{
  "version": 3,
  "sources": ["../../src/material/divider/divider.ts", "../../src/material/divider/divider-module.ts", "../../src/cdk/collections/dispose-view-repeater-strategy.ts", "../../src/cdk/collections/selection-model.ts", "../../src/cdk/collections/unique-selection-dispatcher.ts", "../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts", "../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox-module.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider',\n  },\n  template: '',\n  styleUrl: 'divider.css',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n  set vertical(value: BooleanInput) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean {\n    return this._inset;\n  }\n  set inset(value: BooleanInput) {\n    this._inset = coerceBooleanProperty(value);\n  }\n  private _inset: boolean = false;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '../core';\nimport {MatDivider} from './divider';\n\n@NgModule({\n  imports: [MatCommonModule, MatDivider],\n  exports: [MatDivider, MatCommonModule],\n})\nexport class MatDividerModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  EmbeddedViewRef,\n  IterableChangeRecord,\n  IterableChanges,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  _ViewRepeater,\n  _ViewRepeaterItemChanged,\n  _ViewRepeaterItemContext,\n  _ViewRepeaterItemContextFactory,\n  _ViewRepeaterItemValueResolver,\n  _ViewRepeaterOperation,\n} from './view-repeater';\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport class _DisposeViewRepeaterStrategy<T, R, C extends _ViewRepeaterItemContext<T>>\n  implements _ViewRepeater<T, R, C>\n{\n  applyChanges(\n    changes: IterableChanges<R>,\n    viewContainerRef: ViewContainerRef,\n    itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\n    itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\n    itemViewChanged?: _ViewRepeaterItemChanged<R, C>,\n  ) {\n    changes.forEachOperation(\n      (\n        record: IterableChangeRecord<R>,\n        adjustedPreviousIndex: number | null,\n        currentIndex: number | null,\n      ) => {\n        let view: EmbeddedViewRef<C> | undefined;\n        let operation: _ViewRepeaterOperation;\n        if (record.previousIndex == null) {\n          const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n          view = viewContainerRef.createEmbeddedView(\n            insertContext.templateRef,\n            insertContext.context,\n            insertContext.index,\n          );\n          operation = _ViewRepeaterOperation.INSERTED;\n        } else if (currentIndex == null) {\n          viewContainerRef.remove(adjustedPreviousIndex!);\n          operation = _ViewRepeaterOperation.REMOVED;\n        } else {\n          view = viewContainerRef.get(adjustedPreviousIndex!) as EmbeddedViewRef<C>;\n          viewContainerRef.move(view!, currentIndex);\n          operation = _ViewRepeaterOperation.MOVED;\n        }\n\n        if (itemViewChanged) {\n          itemViewChanged({\n            context: view?.context,\n            operation,\n            record,\n          });\n        }\n      },\n    );\n  }\n\n  detach() {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Subject} from 'rxjs';\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n  /** Currently-selected values. */\n  private _selection = new Set<T>();\n\n  /** Keeps track of the deselected options that haven't been emitted by the change event. */\n  private _deselectedToEmit: T[] = [];\n\n  /** Keeps track of the selected options that haven't been emitted by the change event. */\n  private _selectedToEmit: T[] = [];\n\n  /** Cache for the array value of the selected items. */\n  private _selected: T[] | null;\n\n  /** Selected values. */\n  get selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n\n  /** Event emitted when the value has changed. */\n  readonly changed = new Subject<SelectionChange<T>>();\n\n  constructor(\n    private _multiple = false,\n    initiallySelectedValues?: T[],\n    private _emitChanges = true,\n    public compareWith?: (o1: T, o2: T) => boolean,\n  ) {\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n\n  /**\n   * Selects a value or an array of values.\n   * @param values The values to select\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  select(...values: T[]): boolean | void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._markSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n\n  /**\n   * Deselects a value or an array of values.\n   * @param values The values to deselect\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  deselect(...values: T[]): boolean | void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._unmarkSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n\n  /**\n   * Sets the selected values\n   * @param values The new selected values\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  setSelection(...values: T[]): boolean | void {\n    this._verifyValueAssignment(values);\n    const oldValues = this.selected;\n    const newSelectedSet = new Set(values.map(value => this._getConcreteValue(value)));\n    values.forEach(value => this._markSelected(value));\n    oldValues\n      .filter(value => !newSelectedSet.has(this._getConcreteValue(value, newSelectedSet)))\n      .forEach(value => this._unmarkSelected(value));\n    const changed = this._hasQueuedChanges();\n    this._emitChangeEvent();\n    return changed;\n  }\n\n  /**\n   * Toggles a value between selected and deselected.\n   * @param value The value to toggle\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  toggle(value: T): boolean | void {\n    return this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n\n  /**\n   * Clears all of the selected values.\n   * @param flushEvent Whether to flush the changes in an event.\n   *   If false, the changes to the selection will be flushed along with the next event.\n   * @return Whether the selection changed as a result of this call\n   * @breaking-change 16.0.0 make return type boolean\n   */\n  clear(flushEvent = true): boolean | void {\n    this._unmarkAll();\n    const changed = this._hasQueuedChanges();\n    if (flushEvent) {\n      this._emitChangeEvent();\n    }\n    return changed;\n  }\n\n  /**\n   * Determines whether a value is selected.\n   */\n  isSelected(value: T): boolean {\n    return this._selection.has(this._getConcreteValue(value));\n  }\n\n  /**\n   * Determines whether the model does not have a value.\n   */\n  isEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n\n  /**\n   * Determines whether the model has a value.\n   */\n  hasValue(): boolean {\n    return !this.isEmpty();\n  }\n\n  /**\n   * Sorts the selected values based on a predicate function.\n   */\n  sort(predicate?: (a: T, b: T) => number): void {\n    if (this._multiple && this.selected) {\n      this._selected!.sort(predicate);\n    }\n  }\n\n  /**\n   * Gets whether multiple values can be selected.\n   */\n  isMultipleSelection() {\n    return this._multiple;\n  }\n\n  /** Emits a change event and clears the records of selected and deselected values. */\n  private _emitChangeEvent() {\n    // Clear the selected values so they can be re-cached.\n    this._selected = null;\n\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      this.changed.next({\n        source: this,\n        added: this._selectedToEmit,\n        removed: this._deselectedToEmit,\n      });\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n  }\n\n  /** Selects a value. */\n  private _markSelected(value: T) {\n    value = this._getConcreteValue(value);\n    if (!this.isSelected(value)) {\n      if (!this._multiple) {\n        this._unmarkAll();\n      }\n\n      if (!this.isSelected(value)) {\n        this._selection.add(value);\n      }\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Deselects a value. */\n  private _unmarkSelected(value: T) {\n    value = this._getConcreteValue(value);\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Clears out the selected values. */\n  private _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n\n  /**\n   * Verifies the value assignment and throws an error if the specified value array is\n   * including multiple values while the selection model is not supporting multiple values.\n   */\n  private _verifyValueAssignment(values: T[]) {\n    if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMultipleValuesInSingleSelectionError();\n    }\n  }\n\n  /** Whether there are queued up change to be emitted. */\n  private _hasQueuedChanges() {\n    return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n  }\n\n  /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\n  private _getConcreteValue(inputValue: T, selection?: Set<T>): T {\n    if (!this.compareWith) {\n      return inputValue;\n    } else {\n      selection = selection ?? this._selection;\n      for (let selectedValue of selection) {\n        if (this.compareWith!(inputValue, selectedValue)) {\n          return selectedValue;\n        }\n      }\n      return inputValue;\n    }\n  }\n}\n\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * @docs-private\n */\nexport interface SelectionChange<T> {\n  /** Model that dispatched the event. */\n  source: SelectionModel<T>;\n  /** Options that were added to the model. */\n  added: T[];\n  /** Options that were removed from the model. */\n  removed: T[];\n}\n\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nexport function getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, OnDestroy} from '@angular/core';\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  ANIMATION_MODULE_TYPE,\n  inject,\n} from '@angular/core';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrl: 'pseudo-checkbox.css',\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class.mat-pseudo-checkbox-minimal]': 'appearance === \"minimal\"',\n    '[class.mat-pseudo-checkbox-full]': 'appearance === \"full\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  _animationMode? = inject(ANIMATION_MODULE_TYPE, {optional: true});\n\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  /**\n   * Appearance of the pseudo checkbox. Default appearance of 'full' renders a checkmark/mixedmark\n   * indicator inside a square box. 'minimal' appearance only renders the checkmark/mixedmark.\n   */\n  @Input() appearance: 'minimal' | 'full' = 'full';\n\n  constructor(...args: unknown[]);\n  constructor() {}\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox';\nimport {MatCommonModule} from '../../common-behaviors/common-module';\n\n@NgModule({\n  imports: [MatCommonModule, MatPseudoCheckbox],\n  exports: [MatPseudoCheckbox],\n})\nexport class MatPseudoCheckboxModule {}\n"],
  "mappings": "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",
  "names": ["MatDivider", "vertical", "_vertical", "value", "coerceBooleanProperty", "inset", "_inset", "\u0275cmp", "\u0275\u0275defineComponent", "selectors", "hostAttrs", "hostVars", "hostBindings", "rf", "ctx", "inputs", "decls", "vars", "template", "styles", "encapsulation", "changeDetection", "MatDividerModule", "\u0275mod", "\u0275\u0275defineNgModule", "MatCommonModule", "_DisposeViewRepeaterStrategy", "applyChanges", "changes", "viewContainerRef", "itemContextFactory", "itemValueResolver", "itemViewChanged", "forEachOperation", "record", "adjustedPreviousIndex", "currentIndex", "view", "operation", "previousIndex", "insertContext", "createEmbeddedView", "templateRef", "context", "index", "_ViewRepeaterOperation", "INSERTED", "remove", "REMOVED", "get", "move", "MOVED", "detach", "SelectionModel", "_multiple", "_emitChanges", "compareWith", "_selection", "Set", "_deselectedToEmit", "_selectedToEmit", "_selected", "selected", "Array", "from", "values", "changed", "Subject", "constructor", "initiallySelectedValues", "length", "forEach", "value", "_markSelected", "select", "_verifyValueAssignment", "_hasQueuedChanges", "_emitChangeEvent", "deselect", "_unmarkSelected", "setSelection", "oldValues", "newSelectedSet", "map", "_getConcreteValue", "filter", "has", "toggle", "isSelected", "clear", "flushEvent", "_unmarkAll", "isEmpty", "size", "hasValue", "sort", "predicate", "isMultipleSelection", "next", "source", "added", "removed", "add", "push", "delete", "inputValue", "selection", "selectedValue", "UniqueSelectionDispatcher", "_listeners", "notify", "id", "name", "listener", "listen", "push", "filter", "registered", "ngOnDestroy", "\u0275prov", "\u0275\u0275defineInjectable", "factory", "\u0275fac", "providedIn", "MatPseudoCheckbox", "_animationMode", "inject", "ANIMATION_MODULE_TYPE", "optional", "state", "disabled", "appearance", "constructor", "\u0275cmp", "\u0275\u0275defineComponent", "selectors", "hostAttrs", "hostVars", "hostBindings", "rf", "ctx", "inputs", "decls", "vars", "template", "styles", "encapsulation", "changeDetection", "MatPseudoCheckboxModule", "\u0275mod", "\u0275\u0275defineNgModule", "\u0275inj", "\u0275\u0275defineInjector", "MatCommonModule"]
}
