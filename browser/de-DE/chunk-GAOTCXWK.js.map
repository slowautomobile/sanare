{"version":3,"mappings":"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","names":["ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","language_r1","code","ɵɵadvance","ɵɵtextInterpolate","name","ɵɵi18n","SettingsComponent","_SettingsComponent","constructor","router","inject","Router","themeManager","ThemeManagerService","localstorageService","LocalstorageService","usersService","UsersService","shareStateService","ShareStateService","activePageTitle","ActivePageService","pageTitle","backNavigation","userId","selectValueChanged","isDarkSignal","isDark","subscriptions","Subscription","isLoading","languages","ngOnInit","set","selectedLanguage","_getUserLanguageToken","console","log","switchTheme","changeTheme","onSubmit","_setAndUpdateUserLanguageToken","navigateByUrl","onBack","getToken","languageCode","setToken","subscription","updateUserLanguage","langCode","subscribe","location","replace","window","origin","add","ngOnDestroy","unsubscribe","selectors","decls","vars","consts","i18n_0","ɵɵlistener","SettingsComponent_Template_ui_page_toolbar_cancelEvent_1_listener","ctx","SettingsComponent_Template_ui_page_toolbar_submitEvent_1_listener","ɵɵtwoWayListener","SettingsComponent_Template_mat_slide_toggle_ngModelChange_6_listener","$event","ɵɵtwoWayBindingSet","SettingsComponent_Template_mat_slide_toggle_change_6_listener","SettingsComponent_Template_mat_select_valueChange_14_listener","ɵɵrepeaterCreate","SettingsComponent_For_16_Template","ɵɵrepeaterTrackByIdentity","ɵɵtemplate","SettingsComponent_Conditional_17_Template","ɵɵtwoWayProperty","ɵɵrepeater","ɵɵconditional","FormsModule","NgControlStatus","NgModel","MatInputModule","MatFormField","MatLabel","MatHint","MatSelectModule","MatSelect","MatOption","MatFormFieldModule","MatSlideToggleModule","MatSlideToggle","PageToolbarComponent","styles","className","filePath","lineNumber"],"ignoreList":[],"sources":["apps/sanare-app/src/app/pages/settings/settings.component.html","apps/sanare-app/src/app/pages/settings/settings.component.ts"],"sourcesContent":["<div class=\"page-container\">\n  <ui-page-toolbar\n    [pageTitle]=\"pageTitle()\"\n    [cancelButton]=\"true\"\n    [submitButton]=\"true\"\n    (cancelEvent)=\"onBack()\"\n    (submitEvent)=\"onSubmit()\"\n  ></ui-page-toolbar>\n\n  <div class=\"settings-wrapper\">\n    <h3\n      class=\"mat-title-medium-margin-plus\"\n      i18n=\"@@Settings.userInterfaceTitle\"\n    >\n      User interface\n    </h3>\n    <div class=\"theme-toggle-wrapper\">\n      <mat-slide-toggle\n        labelPosition=\"before\"\n        [(ngModel)]=\"isDark\"\n        (change)=\"switchTheme()\"\n        i18n=\"@@Settings.switchThemeToggleLabel\"\n        class=\"mat-headline-small\"\n        >Dark mode</mat-slide-toggle\n      >\n    </div>\n    <div class=\"language-wrapper\">\n      <p i18n=\"@@Settings.languageSettingsTitle\">Language settings</p>\n      <mat-form-field appearance=\"outline\">\n        <mat-label i18n=\"@@Settings.languageSettingsLabel\"\n          >Select your default language</mat-label\n        >\n        <mat-select\n          [(value)]=\"selectedLanguage\"\n          (valueChange)=\"selectValueChanged = true\"\n        >\n          @for (language of languages; track language) {\n            <mat-option [value]=\"language.code\">{{ language.name }}</mat-option>\n          }\n        </mat-select>\n        @if (selectValueChanged) {\n          <mat-hint i18n=\"@@Settings.languageSettingsHint\"\n            >Changes will take effect after saving</mat-hint\n          >\n        }\n      </mat-form-field>\n    </div>\n    <!-- <div class=\"copyright-block\">\n      <h3 class=\"mat-title-large\">About Sanare App</h3>\n      <p>Designed and developed by Marko Bokan.</p>\n      <p>Copyright © 2025 Marko Bokan. All Rights Reserved.</p>\n    </div> -->\n    <!-- <div>\n      <h3>About Sanare App</h3>\n      <p><strong>Development:</strong> This app was developed by Marko Bokan, focusing on programming, web design, and deployment across the frontend and backend.</p>\n      <p><strong>Expertise:</strong> Miloš Bokan contributed as a physiotherapy specialist, providing consultation and domain expertise throughout the development process.</p>\n      <p>Copyright © 2025 Marko Bokan. All Rights Reserved.</p>\n    </div> -->\n  </div>\n</div>\n","import {\n  Component,\n  computed,\n  effect,\n  inject,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { Router } from '@angular/router';\nimport {\n  ActivePageService,\n  PageToolbarComponent,\n  ThemeManagerService,\n} from '@slowautomobile/ui';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { LocalstorageService, UsersService } from '@slowautomobile/users';\nimport { Subscription } from 'rxjs';\nimport { ShareStateService } from '@slowautomobile/exercises';\n\ninterface Language {\n  name: string;\n  code: string;\n}\n\n@Component({\n  selector: 'sanareapp-settings',\n  templateUrl: './settings.component.html',\n  styleUrl: './settings.component.scss',\n  imports: [\n    FormsModule,\n    MatInputModule,\n    MatSelectModule,\n    MatFormFieldModule,\n    MatSlideToggleModule,\n    PageToolbarComponent,\n  ],\n})\nexport class SettingsComponent implements OnInit, OnDestroy {\n  private router = inject(Router);\n  themeManager = inject(ThemeManagerService);\n  private localstorageService = inject(LocalstorageService);\n  private usersService = inject(UsersService);\n  private shareStateService = inject(ShareStateService);\n  private activePageTitle = inject(ActivePageService);\n\n  pageTitle = this.activePageTitle.pageTitle;\n  backNavigation = this.activePageTitle.backNavigation;\n  userId = this.usersService.userId;\n  selectValueChanged = false;\n  isDarkSignal = this.themeManager.isDark;\n  isDark = false;\n  subscriptions = new Subscription();\n  isLoading = this.shareStateService.isLoading;\n\n  languages: Language[] = [\n    { name: 'English', code: 'en-US' },\n    { name: 'Deutsch', code: 'de-DE' },\n    { name: 'Srpski', code: 'sr-RS' },\n  ];\n\n  selectedLanguage!: string;\n\n  ngOnInit(): void {\n    this.pageTitle.set($localize`:@@Settings.pageTitle:Settings`);\n    this.backNavigation.set(true);\n\n    this.isDark = this.isDarkSignal();\n\n    this.selectedLanguage = this._getUserLanguageToken();\n    console.log(this.selectedLanguage);\n  }\n\n  switchTheme() {\n    this.isDark\n      ? this.themeManager.changeTheme('dark')\n      : this.themeManager.changeTheme('light');\n  }\n\n  onSubmit() {\n    this.isLoading.set(true);\n\n    // This works only when app is deployed on server which serves different localized builds, otherwise, router will navigate to dashboard(every ** path that is not in routes will redirect to '/' ie. /dashboard)\n    // this.router.navigate([`/${this.selectedLanguage}`]);\n    if (this.selectValueChanged) {\n      this._setAndUpdateUserLanguageToken(this.selectedLanguage);\n    } else {\n      this.isLoading.set(false);\n\n      this.router.navigateByUrl('/');\n    }\n    // location.replace(`/${this.selectedLanguage}/settings`);\n\n    console.log(this.selectedLanguage);\n  }\n\n  onBack() {\n    this.router.navigateByUrl('');\n  }\n\n  // showValue() {\n  //   this.selectValueChanged = true;\n  //   console.log(this.selectedLanguage);\n  // }\n\n  private _getUserLanguageToken(): string {\n    return this.localstorageService.getToken('userLanguage') || 'en-US';\n  }\n\n  private _setAndUpdateUserLanguageToken(languageCode: string) {\n    this.localstorageService.setToken('userLanguage', languageCode);\n\n    const subscription = this.usersService\n      .updateUserLanguage(this.userId(), { langCode: languageCode })\n      .subscribe(() => {\n        // setTimeout(() => {\n        //   location.replace(`${window.location.origin}/${languageCode}/`);\n        // }, 4000);\n        this.isLoading.set(false);\n\n        location.replace(`${window.location.origin}/${languageCode}/`);\n      });\n\n    this.subscriptions.add(subscription);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.backNavigation.set(false);\n  }\n}\n"]}