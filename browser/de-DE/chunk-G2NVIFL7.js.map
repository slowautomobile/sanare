{"version":3,"mappings":"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","names":["FavoriteProgramsComponent","FavoriteExercisesComponent","ɵɵelement","ɵɵproperty","ctx_r0","pageTitle","ɵɵelementStart","ɵɵlistener","DashboardComponent_Defer_6_Template_clients_progress_openEditClientProgramEvent_0_listener","$event","ɵɵrestoreView","_r2","ɵɵnextContext","ɵɵresetView","openEditClientProgram","ɵɵelementEnd","clientsPrograms","isProgramCompleted","DashboardComponent_Defer_11_Template_ui_favorite_programs_openEditProgramEvent_0_listener","_r3","openEditProgram","DashboardComponent_Defer_11_Template_ui_favorite_programs_reuseEditProgramEvent_0_listener","reuseEditProgram","isAdmin","themeSignal","favoritePrograms","favoriteExercises","DashboardComponent","_DashboardComponent","constructor","clientsService","inject","ClientsService","router","Router","shareClientsDataService","ShareClientsDataService","activePageTitle","ActivePageService","screenSizeService","ScreenSizeService","usersService","UsersService","themeManager","ThemeManagerService","toSignal","getAllClientsProgramsBasic","clientInfo","reuseProgram","screenSize","ngOnInit","set","programData","console","log","programId","id","programName","name","dateRange","clientId","clientName","programPosition","position","navigate","queryParams","isClientProgram","isTemplate","program","programToEdit","start","end","selectors","decls","vars","consts","i18n_0","ɵɵtemplate","DashboardComponent_Conditional_0_Template","ɵɵi18n","DashboardComponent_Defer_6_Template","DashboardComponent_DeferPlaceholder_7_Template","ɵɵdefer","DashboardComponent_Defer_8_DepsFn","ɵɵdeferEnableTimerScheduling","DashboardComponent_Defer_11_Template","DashboardComponent_DeferPlaceholder_12_Template","DashboardComponent_Defer_13_DepsFn","DashboardComponent_Defer_15_Template","DashboardComponent_DeferPlaceholder_16_Template","DashboardComponent_Defer_17_DepsFn","ɵɵconditional","tmp_0_0","ctx","isCompact","ɵɵadvance","PageToolbarComponent","OverlayscrollbarsModule","OverlayScrollbarsComponent","styles","className","filePath","lineNumber"],"ignoreList":[],"sources":["apps/sanare-app/src/app/pages/dashboard/dashboard.component.ts","apps/sanare-app/src/app/pages/dashboard/dashboard.component.html"],"sourcesContent":["import { Component, inject, OnInit, signal } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  ClientInfo,\n  ClientsService,\n  Program,\n  ShareClientsDataService,\n} from '@slowautomobile/exercises';\nimport {\n  ActivePageService,\n  FavoriteExercisesComponent,\n  FavoriteProgramsComponent,\n  LoadingOverlayService,\n  ScreenSizeService,\n  ThemeManagerService,\n} from '@slowautomobile/ui';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\nimport { PageToolbarComponent } from '@slowautomobile/ui';\nimport { ClientsProgressComponent } from '@slowautomobile/clients';\nimport { UsersService } from '@slowautomobile/users';\nimport { toSignal } from '@angular/core/rxjs-interop';\n@Component({\n  selector: 'sanareapp-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrl: './dashboard.component.scss',\n  imports: [\n    PageToolbarComponent,\n    ClientsProgressComponent,\n    OverlayscrollbarsModule,\n    FavoriteProgramsComponent,\n    FavoriteExercisesComponent,\n  ],\n})\nexport class DashboardComponent implements OnInit {\n  private clientsService = inject(ClientsService);\n  private router = inject(Router);\n  private shareClientsDataService = inject(ShareClientsDataService);\n  private activePageTitle = inject(ActivePageService);\n  private screenSizeService = inject(ScreenSizeService);\n  usersService = inject(UsersService);\n  themeManager = inject(ThemeManagerService);\n\n  // clientsPrograms$!: Observable<any[]>;\n  clientsPrograms = toSignal(this.clientsService.getAllClientsProgramsBasic());\n  isProgramCompleted: boolean[] = [];\n  clientInfo = this.shareClientsDataService.clientInfo;\n  reuseProgram = this.shareClientsDataService.reuseProgram;\n  // isClientProgram = this.shareClientsDataService.isClientProgram;\n\n  isAdmin = this.usersService.isAdmin;\n  favoritePrograms = this.usersService.favoritePrograms;\n  favoriteExercises = this.usersService.favoriteExercises;\n\n  pageTitle = this.activePageTitle.pageTitle;\n  themeSignal = this.themeManager.themeSignal;\n  screenSize = this.screenSizeService.screenSize;\n\n  ngOnInit(): void {\n    this.pageTitle.set($localize`:@@Dashboard.pageTitle:Dashboard`);\n  }\n\n  openEditClientProgram(programData: any) {\n    console.log(programData);\n    // console.log(this.programs[programPosition - 1]);\n    // this.isClientProgram.set(true);\n    const programId = programData.id;\n    const programName = programData.name;\n\n    const dateRange = programData.dateRange;\n    console.log(dateRange);\n\n    this.clientInfo.set({\n      clientId: programData.clientId,\n      clientName: programData.clientName,\n      programPosition: programData.position,\n      programId: programId,\n      programName: programName,\n      dateRange: dateRange,\n    });\n\n    // this.router.navigateByUrl(`programs/form/${programId}`);\n    // this.router.navigateByUrl(\n    //   `clients/form/${this.clientId}/programs/${programId}`,\n    // );\n    this.router.navigate([`programs/form/${programId}`], {\n      queryParams: {\n        programName: `${programName}`,\n        isClientProgram: programName.isTemplate ? 'false' : 'true',\n      },\n    });\n  }\n\n  openEditProgram(program: Program) {\n    const programToEdit = program;\n    const programId = program.id;\n\n    // Update clientInfo() signal for new-program-stepper component template rendering\n    this.clientInfo.set({\n      clientId: '',\n      clientName: '',\n      programPosition: 0,\n      programId: '',\n      programName: programToEdit.name,\n      dateRange: { start: '', end: '' },\n    });\n\n    // Alternative\n    this.router.navigate([`programs/form/${programId}`], {\n      queryParams: {\n        programName: `${programToEdit.name}`,\n        isClientProgram: 'false',\n      },\n    });\n  }\n\n  reuseEditProgram(program: Program) {\n    // Signal that program should be reused, so that mat-stepper goes to last step automatically\n    this.reuseProgram.set(true);\n\n    // Iterate through all programs and find the one for adding to client, then check if it's template or client's program\n\n    const programToEdit = program;\n\n    // Update clientInfo() signal for new-program-stepper component template rendering\n    this.clientInfo.set({\n      clientId: '',\n      clientName: '',\n      programPosition: 0,\n      programId: '',\n      programName: programToEdit.name,\n      dateRange: { start: '', end: '' },\n    });\n\n    console.log(this.clientInfo());\n\n    this.router.navigate([`programs/form/${programToEdit.id}`], {\n      queryParams: {\n        programName: `${programToEdit.name}`,\n        isClientProgram: 'false',\n      },\n    });\n  }\n}\n","@if (!screenSize()?.isCompact) {\n  <ui-page-toolbar [pageTitle]=\"pageTitle()\"></ui-page-toolbar>\n}\n\n<div class=\"dashboard-container\">\n  <div class=\"client-progress-container\">\n    <h3 class=\"mat-title-medium-margin-plus\" i18n=\"@@Dashboard.progressTitle\">\n      Recent progress\n    </h3>\n    <div\n      class=\"scrollable-container\"\n      overlay-scrollbars\n      [options]=\"themeSignal()\"\n      [defer]\n    >\n      @defer {\n        <clients-progress\n          [programs]=\"clientsPrograms()\"\n          [isProgramCompleted]=\"isProgramCompleted\"\n          [isDashboard]=\"true\"\n          (openEditClientProgramEvent)=\"openEditClientProgram($event)\"\n        ></clients-progress>\n      } @placeholder (minimum 500ms) {\n        <div class=\"programs-list-wrapper-placeholder\">\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n        </div>\n      }\n    </div>\n  </div>\n  <div class=\"dashboard-fields\">\n    @defer {\n      <ui-favorite-programs\n        [isAdmin]=\"isAdmin()\"\n        [themeSignal]=\"themeSignal()\"\n        [favoritePrograms]=\"favoritePrograms()\"\n        (openEditProgramEvent)=\"openEditProgram($event)\"\n        (reuseEditProgramEvent)=\"reuseEditProgram($event)\"\n      />\n    } @placeholder {\n      <div class=\"favorites-field-skeleton\"></div>\n    }\n    @defer {\n      <ui-favorite-exercises\n        [favoriteExercises]=\"favoriteExercises()\"\n        [themeSignal]=\"themeSignal()\"\n      />\n    } @placeholder {\n      <div class=\"favorites-field-skeleton\"></div>\n    }\n  </div>\n</div>\n<!-- @for (program of clientsPrograms$ | async; track program) {\n  <div>{{ program.program.name }}</div>\n} -->\n"]}