{"version":3,"mappings":"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","names":["ProgramsListComponent","_ProgramsListComponent","constructor","programsService","inject","ProgramsService","_snackBar","MatSnackBar","dialog","MatDialog","router","Router","clientsService","ClientsService","shareClientsDataService","ShareClientsDataService","usersService","UsersService","shareStateService","ShareStateService","activePageTitle","ActivePageService","pageTitle","pageType","dataSource","MatTableDataSource","isFetchingData","programs","subscriptions","Subscription","reuseProgram","userFavorites","userId","isAdmin","clientInfo","isAdminProgram","getPrograms","ngOnInit","set","clientId","clientName","programPosition","programId","programName","dateRange","start","end","createProgram","navigateByUrl","listOption","subscription","forkJoin","getAllClientsPrograms","subscribe","programsServiceList","clientsServiceList","clientsProgramList","map","program","forEach","favPrograms","some","favProgram","id","isFavorite","sort","a","b","name","localeCompare","data","add","programsList","_getFavoritePrograms","favoritePrograms","filter","openEditProgram","programToEdit","find","update","currentValue","__spreadProps","__spreadValues","navigate","queryParams","isClientProgram","isTemplate","reuseEditProgram","eventData","console","log","addClient","openDeleteConfirmationDialog","dialogRef","open","DeleteConfirmationDialogComponent","width","title","message","panelClass","afterClosed","result","deleteProgram","itemId","close","programToDelete","deleteClientProgram","position","duration","_updateFavorites","updatedFavorites","updateFavorites","favorites","addToFavorites","removeFromFavorites","updatedFavPrograms","favProgramId","ngOnDestroy","unsubscribe","selectors","features","ɵɵProvidersFeature","provide","MatPaginatorIntl","useClass","PaginatorI18nService","decls","vars","consts","template","ProgramsListComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","ProgramsListComponent_Template_ui_page_toolbar_newEvent_0_listener","ɵɵelementEnd","ProgramsListComponent_Template_ui_programs_table_getProgramsEvent_1_listener","$event","ProgramsListComponent_Template_ui_programs_table_reuseEditProgramEvent_1_listener","ProgramsListComponent_Template_ui_programs_table_openEditProgramEvent_1_listener","ProgramsListComponent_Template_ui_programs_table_openDeleteConfirmationDialogEvent_1_listener","ProgramsListComponent_Template_ui_programs_table_favoriteProgram_1_listener","ProgramsListComponent_Template_ui_programs_table_removeFavoriteProgram_1_listener","ɵɵproperty","ɵɵadvance","PageToolbarComponent","ProgramsTableComponent","encapsulation","className","filePath","lineNumber"],"ignoreList":[],"sources":["apps/sanare-app/src/app/pages/programs/programs-list/programs-list.component.ts","apps/sanare-app/src/app/pages/programs/programs-list/programs-list.component.html"],"sourcesContent":["import {\n  AfterViewInit,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n  inject,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator, MatPaginatorIntl } from '@angular/material/paginator';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Router } from '@angular/router';\nimport {\n  ClientsService,\n  Program,\n  ProgramsService,\n  ShareClientsDataService,\n  ShareStateService,\n} from '@slowautomobile/exercises';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { Favorites, UsersService } from '@slowautomobile/users';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { DeleteConfirmationDialogComponent } from 'libs/ui/src/lib/components/deleteConfirmationDialog/deleteConfirmationDialog.component';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { Subscription, forkJoin } from 'rxjs';\nimport {\n  ActivePageService,\n  PageToolbarComponent,\n  PaginatorI18nService,\n  ProgramsTableComponent,\n} from '@slowautomobile/ui';\n\nexport interface ClientInfo {\n  clientId: string;\n  clientName: string;\n  programPosition: number;\n  programId: string;\n  programName: string;\n  dateRange: {\n    start: string;\n    end: string;\n  };\n}\n\n@Component({\n  selector: 'sanareapp-programs-list',\n  templateUrl: './programs-list.component.html',\n  styleUrl: './programs-list.component.scss',\n  imports: [PageToolbarComponent, ProgramsTableComponent],\n  providers: [{ provide: MatPaginatorIntl, useClass: PaginatorI18nService }],\n})\nexport class ProgramsListComponent implements OnInit, OnDestroy {\n  private programsService = inject(ProgramsService);\n  private _snackBar = inject(MatSnackBar);\n  dialog = inject(MatDialog);\n  private router = inject(Router);\n  private clientsService = inject(ClientsService);\n  private shareClientsDataService = inject(ShareClientsDataService);\n  private usersService = inject(UsersService);\n  private shareStateService = inject(ShareStateService);\n  private activePageTitle = inject(ActivePageService);\n\n  // Page info and inputs for ui-page-toolbar\n  // pageTitle = $localize`:@@ProgramsList.pageTitle:Programs`;\n  pageTitle = this.activePageTitle.pageTitle;\n  pageType = 'program';\n\n  // displayedColumns: string[] = ['name', 'numberOfExercises', 'type', 'options'];\n  dataSource = new MatTableDataSource<Program>();\n  isFetchingData = this.shareStateService.isFetchingData;\n  programs: Program[] | any[] = [];\n  removedProgram!: any | null;\n  // @ViewChild(MatSort) sort!: MatSort;\n  // @ViewChild(MatPaginator) paginator!: MatPaginator;\n  subscriptions = new Subscription();\n  // listOption: string = 'all';\n  // isClientProgram = this.shareClientsDataService.isClientProgram;\n  reuseProgram = this.shareClientsDataService.reuseProgram;\n  userFavorites = this.usersService.userFavorites;\n  userId = this.usersService.userId;\n  isAdmin = this.usersService.isAdmin;\n  clientInfo = this.shareClientsDataService.clientInfo;\n  isAdminProgram = this.programsService.isAdminProgram;\n\n  constructor() {\n    // Get data and assign the data to the data source for the table to render\n    this.getPrograms('all');\n    // this.changeListedItems();\n  }\n  //  FINISH THIS  COMPONENT !!!!!\n  ngOnInit(): void {\n    this.pageTitle.set($localize`:@@ProgramsList.pageTitle:Programs`);\n    // Reset clientInfo() signal data\n    this.clientInfo.set({\n      clientId: '',\n      clientName: '',\n      programPosition: 0,\n      programId: '',\n      programName: '',\n      dateRange: { start: '', end: '' },\n    });\n  }\n\n  // ngAfterViewInit() {\n  //   this.dataSource.paginator = this.paginator;\n  //   this.dataSource.sort = this.sort;\n  // }\n\n  /*   changeListedItems() {\n    console.log(this.listOption);\n    if (this.listOption === 'all') {\n      const subscription = forkJoin([\n        this.programsService.getPrograms(),\n        this.clientsService.getAllClientsPrograms(),\n      ]).subscribe(([programsServiceList, clientsServiceList]) => {\n        this.programs = [];\n\n        const clientsProgramList = clientsServiceList.map(\n          (clientInfo: any) => clientInfo.program,\n        );\n        this.programs = [...programsServiceList, ...clientsProgramList];\n        console.log(this.programs);\n        this.dataSource.data = this.programs;\n      });\n\n      this.subscriptions.add(subscription);\n    } else if (this.listOption === 'template') {\n      const subscription = this.programsService\n        .getPrograms()\n        .subscribe(programsList => {\n          this.programs = [];\n          this.programs = programsList;\n          this.dataSource.data = this.programs;\n\n          this.subscriptions.add(subscription);\n        });\n    } else if (this.listOption === 'client') {\n      const subscription = this.clientsService\n        .getAllClientsPrograms()\n        .subscribe(programsList => {\n          this.programs = [];\n          const clientsProgramList = programsList.map(\n            (clientInfo: any) => clientInfo.program,\n          );\n\n          this.programs = clientsProgramList;\n          this.dataSource.data = this.programs;\n\n          this.subscriptions.add(subscription);\n        });\n    } else if (this.listOption === 'favorite') {\n      // Implement logic for favorite programs. isFavorite field should be added to program model\n      this.programs = [];\n      this.dataSource.data = this.programs;\n    }\n  } */\n  createProgram() {\n    this.router.navigateByUrl('/programs/form');\n  }\n\n  getPrograms(listOption: string) {\n    this.isFetchingData.set(true);\n    // const subscription = forkJoin([\n    //   this.programsService.getPrograms(),\n    //   this.clientsService.getAllClientsPrograms(),\n    // ]).subscribe(([programsServiceList, clientsServiceList]) => {\n    //   this.programs = [];\n    //   const clientsProgramList = clientsServiceList.map(\n    //     (clientInfo: any) => clientInfo.program,\n    //   );\n    //   this.programs = [...programsServiceList, ...clientsProgramList];\n    //   this.dataSource.data = this.programs;\n    // });\n\n    // this.subscriptions.add(subscription);\n    if (listOption === 'all') {\n      const subscription = forkJoin([\n        this.programsService.getPrograms(),\n        this.clientsService.getAllClientsPrograms(),\n      ]).subscribe(([programsServiceList, clientsServiceList]) => {\n        this.programs = [];\n\n        const clientsProgramList = clientsServiceList.map(\n          (clientInfo: any) => clientInfo.program,\n        );\n        this.programs = [...programsServiceList, ...clientsProgramList];\n\n        this.programs.forEach(program => {\n          // Check if program is favorite for user\n          if (\n            this.userFavorites().favPrograms.some(\n              favProgram => favProgram === program.id,\n            )\n          ) {\n            program.isFavorite = true;\n          } else {\n            program.isFavorite = false;\n          }\n        });\n\n        this.programs.sort((a, b) => {\n          return a.name.localeCompare(b.name);\n        });\n        this.dataSource.data = this.programs;\n        this.isFetchingData.set(false);\n      });\n      this.subscriptions.add(subscription);\n    } else if (listOption === 'template') {\n      this.isFetchingData.set(true);\n      const subscription = this.programsService\n        .getPrograms()\n        .subscribe(programsList => {\n          this.programs = [];\n          this.programs = programsList;\n\n          this.programs.forEach(program => {\n            // Check if program is favorite for user\n            if (\n              this.userFavorites().favPrograms.some(\n                favProgram => favProgram === program.id,\n              )\n            ) {\n              program.isFavorite = true;\n            } else {\n              program.isFavorite = false;\n            }\n          });\n\n          this.programs.sort((a, b) => {\n            return a.name.localeCompare(b.name);\n          });\n          this.dataSource.data = this.programs;\n          this.isFetchingData.set(false);\n        });\n      this.subscriptions.add(subscription);\n    } else if (listOption === 'client') {\n      this.isFetchingData.set(true);\n      const subscription = this.clientsService\n        .getAllClientsPrograms()\n        .subscribe(programsList => {\n          this.programs = [];\n          const clientsProgramList = programsList.map(\n            (clientInfo: any) => clientInfo.program,\n          );\n\n          this.programs = clientsProgramList;\n\n          this.programs.forEach(program => {\n            // Check if program is favorite for user\n            if (\n              this.userFavorites().favPrograms.some(\n                favProgram => favProgram === program.id,\n              )\n            ) {\n              program.isFavorite = true;\n            } else {\n              program.isFavorite = false;\n            }\n          });\n\n          this.programs.sort((a, b) => {\n            return a.name.localeCompare(b.name);\n          });\n          this.dataSource.data = this.programs;\n          this.isFetchingData.set(false);\n        });\n      this.subscriptions.add(subscription);\n    } else if (listOption === 'favorite') {\n      this._getFavoritePrograms();\n    }\n  }\n\n  _getFavoritePrograms() {\n    this.isFetchingData.set(true);\n\n    const subscription = forkJoin([\n      this.programsService.getPrograms(),\n      this.clientsService.getAllClientsPrograms(),\n    ]).subscribe(([programsServiceList, clientsServiceList]) => {\n      this.programs = [];\n      let favoritePrograms = [];\n\n      const clientsProgramList = clientsServiceList.map(\n        (clientInfo: any) => clientInfo.program,\n      );\n      this.programs = [...programsServiceList, ...clientsProgramList];\n\n      favoritePrograms = this.programs.filter(program => {\n        // Check if program is favorite for user\n        if (\n          this.userFavorites().favPrograms.some(\n            favProgram => favProgram === program.id,\n          )\n        ) {\n          program.isFavorite = true;\n          return true;\n        } else {\n          program.isFavorite = false;\n          return false;\n        }\n      });\n\n      favoritePrograms.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n      });\n      this.dataSource.data = favoritePrograms;\n      this.isFetchingData.set(false);\n    });\n    this.subscriptions.add(subscription);\n  }\n\n  openEditProgram(programId: string) {\n    // Iterate through all programs and find the one for editing, then check if it's template or client's program\n    const programToEdit = this.programs.find(\n      (program: Program) => program.id === programId,\n    );\n\n    // Update clientInfo() signal for new-program-stepper component template rendering\n    this.clientInfo.update((currentValue: ClientInfo) => ({\n      ...currentValue,\n      programName: programToEdit.name,\n    }));\n\n    // if (programToEdit.isTemplate) {\n    //   this.router.navigateByUrl(`programs/form/${programId}`);\n    // } else {\n    //   this.isClientProgram.set(true);\n    //   this.router.navigateByUrl(`programs/form/${programId}`);\n    // }\n    // Alternative\n    this.router.navigate([`programs/form/${programId}`], {\n      queryParams: {\n        programName: `${programToEdit.name}`,\n        isClientProgram: programToEdit.isTemplate ? 'false' : 'true',\n      },\n    });\n  }\n\n  reuseEditProgram(eventData: any) {\n    // Signal that program should be reused, so that mat-stepper goes to last step automatically\n    this.reuseProgram.set(true);\n\n    // Iterate through all programs and find the one for adding to client, then check if it's template or client's program\n\n    const programToEdit = this.programs.find(\n      (program: Program) => program.id === eventData.programId,\n    );\n\n    // Update clientInfo() signal for new-program-stepper component template rendering\n    this.clientInfo.update((currentValue: ClientInfo) => ({\n      ...currentValue,\n      programName: programToEdit.name,\n    }));\n\n    console.log(this.clientInfo());\n    // console.log(\n    //   'position: ' +\n    //     programToEdit.position +\n    //     'programToEdit position:' +\n    //     programToEdit.position,\n    // );\n\n    // REDUNDANT !!! -> eventData.programId === programToEdit.id !!!!\n    // if (programToEdit.isTemplate) {\n    //   this.router.navigateByUrl(`programs/form/${eventData.programId}`);\n    // } else {\n    //   this.isClientProgram.set(true);\n    //   // console.log(this.programs[programPosition].id);\n    //   this.router.navigateByUrl(`programs/form/${programToEdit.id}`);\n    // }\n    this.router.navigate([`programs/form/${programToEdit.id}`], {\n      queryParams: {\n        programName: `${programToEdit.name}`,\n        isClientProgram: programToEdit.isTemplate ? 'false' : 'true',\n      },\n    });\n  }\n\n  addClient(clientId: string) {\n    console.log('open program and add client automatically');\n  }\n\n  openDeleteConfirmationDialog(eventData: any): void {\n    const dialogRef = this.dialog.open(DeleteConfirmationDialogComponent, {\n      width: '312px',\n      data: {\n        title: $localize`:@@DeleteConfirmationDialog.deleteTitleProgram:Delete selected program?`,\n        message: $localize`:@@DeleteConfirmationDialog.deleteTitleUserProgram:Deleting the selected program will remove it from your account.`,\n      },\n      panelClass: 'custom-dialog',\n    });\n\n    const subscription = dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        // User confirmed deletion, handle deletion logic here\n        console.log('User confirmed deletion');\n        this.deleteProgram(eventData.itemId, eventData.listOption);\n        dialogRef.close();\n      } else {\n        // User canceled deletion\n        console.log('User canceled deletion');\n        dialogRef.close();\n      }\n    });\n    this.subscriptions.add(subscription);\n  }\n\n  deleteProgram(programId: string, listOption: string) {\n    // Iterate through all programs and find the one for deleting, then check if it's template or client's program\n    const programToDelete = this.programs.find(\n      (program: Program) => program.id === programId,\n    );\n\n    let subscription;\n    if (programToDelete.isTemplate) {\n      // this.router.navigateByUrl(`programs/form/${programId}`);\n      subscription = this.programsService\n        .deleteProgram(programId)\n        .subscribe(() => {\n          this.getPrograms(listOption);\n          // this.changeListedItems();\n        });\n    } else {\n      subscription = this.clientsService\n        .deleteClientProgram(programToDelete.clientId, programToDelete.position)\n        .subscribe(() => {\n          this.getPrograms(listOption);\n          // this.changeListedItems();\n        });\n    }\n    this.subscriptions.add(subscription);\n\n    this._snackBar.open(\n      $localize`:@@Snackbar.programDeleted:Program deleted`,\n      '',\n      {\n        duration: 2000,\n        panelClass: ['custom-snackbar-style'],\n      },\n    );\n  }\n\n  /*   undoRemove(): void {\n    console.log(this.removedProgram?.program);\n    if (this.removedProgram) {\n      // Add the removed item back to its original position\n      // this.items.splice(this.removedItem.index, 0, this.removedItem.value);\n\n      const restoredProgramSubscription = this.programsService\n        .createProgram(this.removedProgram.program)\n        .subscribe(\n          // NOT LIKE THIS, PUT CONFIRM DIALOG, AND AFTER WITHOUT UNDO, ONLY SNACKBAR INFO!!!! BECAUSE THERE IS NO NEED FOR UNNECCESSARY HTTP REQUESTS AND NEWLY CREATED CLIENT(ALTOUGH SAME) WILL HAVE DIFERENT ID!!!!!!\n          () => {\n            this.getPrograms();\n          },\n        );\n\n      // Reset the removedItem reference\n      this.removedProgram = null;\n      this.subscriptions.add(restoredProgramSubscription);\n    }\n  } */\n\n  // Add/remove favorite programs\n  _updateFavorites(userId: string, updatedFavorites: Favorites) {\n    const subscription = this.usersService\n      .updateFavorites(userId, updatedFavorites)\n      .subscribe(favorites => console.log(favorites));\n    this.subscriptions.add(subscription);\n  }\n\n  addToFavorites(program: Program) {\n    this.userFavorites.update(favorites => {\n      const programId = program.id as string;\n      const updatedFavorites = {\n        ...favorites,\n        favPrograms: [...favorites.favPrograms, programId],\n      };\n      this._updateFavorites(this.userId(), updatedFavorites);\n\n      return updatedFavorites;\n    });\n  }\n\n  removeFromFavorites(program: Program) {\n    const updatedFavPrograms = this.userFavorites().favPrograms.filter(\n      favProgramId => favProgramId !== program.id,\n    );\n\n    this.userFavorites.update(favorites => {\n      const updatedFavorites = {\n        ...favorites,\n        favPrograms: [...updatedFavPrograms],\n      };\n\n      return updatedFavorites;\n    });\n\n    this._updateFavorites(this.userId(), this.userFavorites());\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","<ui-page-toolbar\n  [pageTitle]=\"pageTitle()\"\n  [newButton]=\"true\"\n  [pageType]=\"'program'\"\n  (newEvent)=\"createProgram()\"\n></ui-page-toolbar>\n\n<ui-programs-table\n  [isAdmin]=\"isAdmin()\"\n  [isAdminProgram]=\"isAdminProgram()\"\n  [mainProgramsList]=\"true\"\n  [dataSource]=\"dataSource\"\n  (getProgramsEvent)=\"getPrograms($event)\"\n  (reuseEditProgramEvent)=\"reuseEditProgram($event)\"\n  (openEditProgramEvent)=\"openEditProgram($event)\"\n  (openDeleteConfirmationDialogEvent)=\"openDeleteConfirmationDialog($event)\"\n  (favoriteProgram)=\"addToFavorites($event)\"\n  (removeFavoriteProgram)=\"removeFromFavorites($event)\"\n>\n  <!-- <button\n    deleteBtn\n    mat-icon-button\n    matTooltip=\"Delete\"\n    aria-label=\"Delete icon button\"\n    (click)=\"openDeleteConfirmationDialog($event)\"\n  >\n    <mat-icon>delete_outline</mat-icon>\n  </button> -->\n</ui-programs-table>\n"]}