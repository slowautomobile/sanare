{"version":3,"mappings":"0PAkBIA,EAAA,WAAuD,aAEnDC,EAAA,mBAAAC,EAAAC,CAAA,KAAAC,GAAAC,EAAA,QAAAC,GAASF,EAAAG,UAAA,CAAW,KAKpBP,EAAA,cAAUQ,EAAA,WAAKC,EAAA,EAAW,EACpB,ICfd,GAAaC,IAAoB,KAA3B,KAAOA,EAAoB,CANjCC,aAAA,CAOU,KAAAC,iBAAmBC,EAAOC,CAAgB,EAKlD,KAAAC,aAAe,IAEfC,UAAQ,CACN,KAAKC,sBAAwB,KAAKL,iBAAiBM,SAASC,IAC1D,gBAAgB,EAGlB,KAAKC,eAAiB,KAAKH,sBAAsBI,MACjDC,QAAQC,IAAI,KAAKH,cAAc,CAGjC,EAEAI,iBAAiBC,EAAU,CACzB,GAAMC,GAAeD,EAAME,OAAOC,MAAM,CAAC,EACzC,GAAIF,EAAc,CAChB,KAAKT,sBAAsBY,WAAWH,CAAY,EAClD,KAAKT,sBAAsBa,uBAAsB,EACjD,KAAKf,aAAe,GAEpB,GAAMgB,GAAa,GAAIC,cACvBD,EAAWE,OAAS,IAAK,CACvB,KAAKb,eAAiBW,EAAWG,MACnC,GAEAH,EAAWI,cAAcT,CAAY,CACvC,EACF,CAEAnB,WAAS,CACP,KAAKQ,aAAe,GACpB,KAAKK,eAAiB,GACtB,KAAKH,sBAAsBY,WAAW,EAAE,EACxC,KAAKZ,sBAAsBa,uBAAsB,CACnD,cAAAM,IAAA,UAAAC,CAAA,aAAAA,CAAA,EAxCW3B,IAAoB,gBAAA4B,IAAA,CAAAC,CAAA,EAAAC,IAAA,CAApB9B,EAAoB+B,UAAA,sBAAAC,MAAA,EAAAC,KAAA,EAAAC,WAAA,IAAAC,yBDAfC,gCAWEA,yWAtBpB9C,EAAA,WAA0B,aAKtBC,EAAA,kBAAA8C,EAAA,OAAUC,GAAAxB,iBAAAuB,CAAA,CAAwB,IAJpCtC,EAAA,EAMAT,EAAA,WAAwC,aAMrC,cACWQ,EAAA,iBAAWC,EAAA,EAAW,EAC1B,EAEVwC,EAAA,EAAAC,EAAA,aAYAlD,EAAA,WACEmD,EAAA,WACF1C,EAAA,EAAM,GAAA4B,CAAA,KAdNe,EAAA,GAAAC,EAAA,CAAAL,EAAAjC,cAAAiC,EAAA5B,eAAA,MAaOgC,EAAA,GAAAE,EAAA,MAAAN,EAAA5B,eAAAmC,CAAA,EAAsB,MAAAP,EAAA5B,cAAA,KAAAoC,YAAA,ECrBjBC,EAAYC,CAAO,EAAAC,OAAA,y7DAEpBjD,EAAoB,aAAAkD,CAAA,IAAAC,CAAA","names":["ɵɵelementStart","ɵɵlistener","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵresetView","removeImg","ɵɵtext","ɵɵelementEnd","UploadImageComponent","constructor","controlContainer","inject","ControlContainer","isImgRemoved","ngOnInit","profilePictureControl","control","get","profilePicture","value","console","log","handleProfileImg","event","selectedFile","target","files","patchValue","updateValueAndValidity","fileReader","FileReader","onload","result","readAsDataURL","ɵfac","t","ɵcmp","m","type","selectors","decls","vars","consts","i18n_0","$localize","$event","ctx","ɵɵtemplate","UploadImageComponent_Conditional_6_Template","ɵɵelement","ɵɵadvance","ɵɵconditional","ɵɵproperty","ɵɵsanitizeUrl","dependencies","MatTooltip","MatIcon","styles","N","a"],"ignoreList":[],"sources":["libs/ui/src/lib/components/upload-image/upload-image.component.html","libs/ui/src/lib/components/upload-image/upload-image.component.ts"],"sourcesContent":["<div class=\"upload-image\">\n  <input\n    type=\"file\"\n    accept=\"image/*\"\n    id=\"profileImgInput\"\n    (change)=\"handleProfileImg($event)\"\n  />\n  <div class=\"file-upload-button-wrapper\">\n    <label\n      for=\"profileImgInput\"\n      class=\"file-upload-button\"\n      matTooltip=\"Upload a photo\"\n      i18n-matTooltip=\"@@UserForm.uploadPhotoTooltip\"\n    >\n      <mat-icon>add_a_photo</mat-icon>\n    </label>\n  </div>\n  @if (!isImgRemoved && profilePicture) {\n    <div class=\"file-upload-button-wrapper remove-wrapper\">\n      <label\n        (click)=\"removeImg()\"\n        class=\"file-upload-button\"\n        matTooltip=\"Remove photo\"\n        i18n-matTooltip=\"@@UserForm.removePhotoTooltip\"\n      >\n        <mat-icon>close</mat-icon>\n      </label>\n    </div>\n  }\n  <div class=\"profile-img-wrapper\">\n    <img [src]=\"profilePicture\" [alt]=\"profilePicture\" />\n  </div>\n</div>\n","import { AfterViewInit, Component, OnInit, inject } from '@angular/core';\nimport { ControlContainer, FormControl } from '@angular/forms';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatTooltip } from '@angular/material/tooltip';\n\n@Component({\n    selector: 'ui-upload-image',\n    templateUrl: './upload-image.component.html',\n    styleUrl: './upload-image.component.scss',\n    imports: [MatTooltip, MatIcon]\n})\nexport class UploadImageComponent implements OnInit {\n  private controlContainer = inject(ControlContainer);\n\n  // @Input() profilePicture!: string;\n  profilePicture!: any;\n  profilePictureControl!: FormControl;\n  isImgRemoved = false;\n\n  ngOnInit(): void {\n    this.profilePictureControl = this.controlContainer.control?.get(\n      'profilePicture',\n    ) as FormControl;\n\n    this.profilePicture = this.profilePictureControl.value;\n    console.log(this.profilePicture);\n\n    // console.log(this.profilePictureControl);\n  }\n\n  handleProfileImg(event: any) {\n    const selectedFile = event.target.files[0];\n    if (selectedFile) {\n      this.profilePictureControl.patchValue(selectedFile);\n      this.profilePictureControl.updateValueAndValidity();\n      this.isImgRemoved = false;\n\n      const fileReader = new FileReader();\n      fileReader.onload = () => {\n        this.profilePicture = fileReader.result;\n      };\n\n      fileReader.readAsDataURL(selectedFile);\n    }\n  }\n\n  removeImg() {\n    this.isImgRemoved = true;\n    this.profilePicture = '';\n    this.profilePictureControl.patchValue('');\n    this.profilePictureControl.updateValueAndValidity();\n  }\n}\n"]}