{
  "version": 3,
  "sources": ["../../src/material/slide-toggle/slide-toggle-config.ts", "../../src/material/slide-toggle/slide-toggle.ts", "../../src/material/slide-toggle/slide-toggle.html", "../../src/material/slide-toggle/slide-toggle-required-validator.ts", "../../src/material/slide-toggle/module.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {ThemePalette} from '../core';\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n\n  /**\n   * Default theme color of the slide toggle. This API is supported in M2 themes only,\n   * it has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/slide-toggle/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  color?: ThemePalette;\n\n  /** Whether to hide the icon inside the slide toggle. */\n  hideIcon?: boolean;\n\n  /** Whether disabled slide toggles should remain interactive. */\n  disabledInteractive?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken<MatSlideToggleDefaultOptions>(\n  'mat-slide-toggle-default-options',\n  {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, hideIcon: false, disabledInteractive: false}),\n  },\n);\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  AfterContentInit,\n  booleanAttribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  numberAttribute,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n  ANIMATION_MODULE_TYPE,\n  inject,\n  HostAttributeToken,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n} from '@angular/forms';\nimport {_IdGenerator, FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions,\n} from './slide-toggle-config';\nimport {_MatInternalFormField, _StructuralStylesLoader, MatRipple} from '../core';\nimport {_CdkPrivateStyleLoader} from '@angular/cdk/private';\n\n/**\n * @deprecated Will stop being exported.\n * @breaking-change 19.0.0\n */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true,\n};\n\n/** Change event object emitted by a slide toggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source slide toggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the slide toggle. */\n    public checked: boolean,\n  ) {}\n}\n\n@Component({\n  selector: 'mat-slide-toggle',\n  templateUrl: 'slide-toggle.html',\n  styleUrl: 'slide-toggle.css',\n  host: {\n    'class': 'mat-mdc-slide-toggle',\n    '[id]': 'id',\n    // Needs to be removed since it causes some a11y issues (see #21266).\n    '[attr.tabindex]': 'null',\n    '[attr.aria-label]': 'null',\n    '[attr.name]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[class.mat-mdc-slide-toggle-focused]': '_focused',\n    '[class.mat-mdc-slide-toggle-checked]': 'checked',\n    '[class._mat-animation-noopable]': '_noopAnimations',\n    '[class]': 'color ? \"mat-\" + color : \"\"',\n  },\n  exportAs: 'matSlideToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    MAT_SLIDE_TOGGLE_VALUE_ACCESSOR,\n    {\n      provide: NG_VALIDATORS,\n      useExisting: MatSlideToggle,\n      multi: true,\n    },\n  ],\n  imports: [MatRipple, _MatInternalFormField],\n})\nexport class MatSlideToggle\n  implements OnDestroy, AfterContentInit, OnChanges, ControlValueAccessor, Validator\n{\n  private _elementRef = inject(ElementRef);\n  protected _focusMonitor = inject(FocusMonitor);\n  protected _changeDetectorRef = inject(ChangeDetectorRef);\n  defaults = inject<MatSlideToggleDefaultOptions>(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS);\n\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n  private _validatorOnChange = () => {};\n\n  private _uniqueId: string;\n  private _checked: boolean = false;\n\n  private _createChangeEvent(isChecked: boolean) {\n    return new MatSlideToggleChange(this, isChecked);\n  }\n\n  /** Unique ID for the label element. */\n  _labelId: string;\n\n  /** Returns the unique id for the visual hidden button. */\n  get buttonId(): string {\n    return `${this.id || this._uniqueId}-button`;\n  }\n\n  /** Reference to the MDC switch element. */\n  @ViewChild('switch') _switchElement: ElementRef<HTMLElement>;\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._switchElement.nativeElement.focus();\n  }\n  /** Whether noop animations are enabled. */\n  _noopAnimations: boolean;\n\n  /** Whether the slide toggle is currently focused. */\n  _focused: boolean;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Used to set the aria-describedby attribute on the underlying input element. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether the slide-toggle is required. */\n  @Input({transform: booleanAttribute}) required: boolean;\n\n  // TODO(crisbeto): this should be a ThemePalette, but some internal apps were abusing\n  // the lack of type checking previously and assigning random strings.\n  /**\n   * Theme color of the slide toggle. This API is supported in M2 themes only,\n   * it has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/slide-toggle/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  @Input() color: string | undefined;\n\n  /** Whether the slide toggle is disabled. */\n  @Input({transform: booleanAttribute}) disabled: boolean = false;\n\n  /** Whether the slide toggle has a ripple. */\n  @Input({transform: booleanAttribute}) disableRipple: boolean = false;\n\n  /** Tabindex of slide toggle. */\n  @Input({transform: (value: unknown) => (value == null ? 0 : numberAttribute(value))})\n  tabIndex: number = 0;\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input({transform: booleanAttribute})\n  get checked(): boolean {\n    return this._checked;\n  }\n  set checked(value: boolean) {\n    this._checked = value;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Whether to hide the icon inside of the slide toggle. */\n  @Input({transform: booleanAttribute}) hideIcon: boolean;\n\n  /** Whether the slide toggle should remain interactive when it is disabled. */\n  @Input({transform: booleanAttribute}) disabledInteractive: boolean;\n\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change = new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n    const tabIndex = inject(new HostAttributeToken('tabindex'), {optional: true});\n    const defaults = this.defaults;\n    const animationMode = inject(ANIMATION_MODULE_TYPE, {optional: true});\n\n    this.tabIndex = tabIndex == null ? 0 : parseInt(tabIndex) || 0;\n    this.color = defaults.color || 'accent';\n    this._noopAnimations = animationMode === 'NoopAnimations';\n    this.id = this._uniqueId = inject(_IdGenerator).getId('mat-mdc-slide-toggle-');\n    this.hideIcon = defaults.hideIcon ?? false;\n    this.disabledInteractive = defaults.disabledInteractive ?? false;\n    this._labelId = this._uniqueId + '-label';\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n        this._focused = true;\n        this._changeDetectorRef.markForCheck();\n      } else if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state\n        // change (such as a form control's ng-touched) will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._focused = false;\n          this._onTouched();\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['required']) {\n      this._validatorOnChange();\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of Validator. */\n  validate(control: AbstractControl<boolean>): ValidationErrors | null {\n    return this.required && control.value !== true ? {'required': true} : null;\n  }\n\n  /** Implemented as a part of Validator. */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  protected _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(this._createChangeEvent(this.checked));\n  }\n\n  /** Method being called whenever the underlying button is clicked. */\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggleChange.emit();\n\n      if (!this.defaults.disableToggleValue) {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n      }\n    }\n  }\n\n  _getAriaLabelledBy() {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Even though we have a `label` element with a `for` pointing to the button, we need the\n    // `aria-labelledby`, because the button gets flagged as not having a label by tools like axe.\n    return this.ariaLabel ? null : this._labelId;\n  }\n}\n", "<div mat-internal-form-field [labelPosition]=\"labelPosition\">\n  <button\n    class=\"mdc-switch\"\n    role=\"switch\"\n    type=\"button\"\n    [class.mdc-switch--selected]=\"checked\"\n    [class.mdc-switch--unselected]=\"!checked\"\n    [class.mdc-switch--checked]=\"checked\"\n    [class.mdc-switch--disabled]=\"disabled\"\n    [class.mat-mdc-slide-toggle-disabled-interactive]=\"disabledInteractive\"\n    [tabIndex]=\"disabled && !disabledInteractive ? -1 : tabIndex\"\n    [disabled]=\"disabled && !disabledInteractive\"\n    [attr.id]=\"buttonId\"\n    [attr.name]=\"name\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-labelledby]=\"_getAriaLabelledBy()\"\n    [attr.aria-describedby]=\"ariaDescribedby\"\n    [attr.aria-required]=\"required || null\"\n    [attr.aria-checked]=\"checked\"\n    [attr.aria-disabled]=\"disabled && disabledInteractive ? 'true' : null\"\n    (click)=\"_handleClick()\"\n    #switch>\n    <span class=\"mdc-switch__track\"></span>\n    <span class=\"mdc-switch__handle-track\">\n      <span class=\"mdc-switch__handle\">\n        <span class=\"mdc-switch__shadow\">\n          <span class=\"mdc-elevation-overlay\"></span>\n        </span>\n        <span class=\"mdc-switch__ripple\">\n          <span class=\"mat-mdc-slide-toggle-ripple mat-focus-indicator\" mat-ripple\n            [matRippleTrigger]=\"switch\"\n            [matRippleDisabled]=\"disableRipple || disabled\"\n            [matRippleCentered]=\"true\"></span>\n        </span>\n        @if (!hideIcon) {\n          <span class=\"mdc-switch__icons\">\n            <svg\n              class=\"mdc-switch__icon mdc-switch__icon--on\"\n              viewBox=\"0 0 24 24\"\n              aria-hidden=\"true\">\n              <path d=\"M19.69,5.23L8.96,15.96l-4.23-4.23L2.96,13.5l6,6L21.46,7L19.69,5.23z\" />\n            </svg>\n            <svg\n              class=\"mdc-switch__icon mdc-switch__icon--off\"\n              viewBox=\"0 0 24 24\"\n              aria-hidden=\"true\">\n              <path d=\"M20 13H4v-2h16v2z\" />\n            </svg>\n          </span>\n        }\n      </span>\n    </span>\n  </button>\n\n  <!--\n    Clicking on the label will trigger another click event from the button.\n    Stop propagation here so other listeners further up in the DOM don't execute twice.\n  -->\n  <label class=\"mdc-label\" [for]=\"buttonId\" [attr.id]=\"_labelId\" (click)=\"$event.stopPropagation()\">\n    <ng-content></ng-content>\n  </label>\n</div>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, forwardRef, Provider} from '@angular/core';\nimport {CheckboxRequiredValidator, NG_VALIDATORS} from '@angular/forms';\n\n/**\n * @deprecated No longer used, `MatCheckbox` implements required validation directly.\n * @breaking-change 19.0.0\n */\nexport const MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true,\n};\n\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n *\n * @deprecated No longer used, `MatCheckbox` implements required validation directly.\n * @breaking-change 19.0.0\n */\n@Directive({\n  selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n  providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n})\nexport class MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '../core';\nimport {MatSlideToggle} from './slide-toggle';\nimport {MatSlideToggleRequiredValidator} from './slide-toggle-required-validator';\n\n/**\n * @deprecated No longer used, `MatSlideToggle` implements required validation directly.\n * @breaking-change 19.0.0\n */\n@NgModule({\n  imports: [MatSlideToggleRequiredValidator],\n  exports: [MatSlideToggleRequiredValidator],\n})\nexport class _MatSlideToggleRequiredValidatorModule {}\n\n@NgModule({\n  imports: [MatSlideToggle, MatCommonModule],\n  exports: [MatSlideToggle, MatCommonModule],\n})\nexport class MatSlideToggleModule {}\n"],
  "mappings": "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",
  "names": ["_c0", "_c1", "MatSlideToggle_Conditional_10_Template", "rf", "ctx", "MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS", "InjectionToken", "providedIn", "factory", "disableToggleValue", "hideIcon", "disabledInteractive", "MAT_SLIDE_TOGGLE_VALUE_ACCESSOR", "provide", "NG_VALUE_ACCESSOR", "useExisting", "forwardRef", "MatSlideToggle", "multi", "MatSlideToggleChange", "source", "checked", "constructor", "_elementRef", "inject", "ElementRef", "_focusMonitor", "FocusMonitor", "_changeDetectorRef", "ChangeDetectorRef", "defaults", "_onChange", "_", "_onTouched", "_validatorOnChange", "_uniqueId", "_checked", "_createChangeEvent", "isChecked", "_labelId", "buttonId", "id", "_switchElement", "focus", "nativeElement", "_noopAnimations", "_focused", "name", "labelPosition", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "required", "color", "disabled", "disableRipple", "tabIndex", "value", "markForCheck", "change", "EventEmitter", "toggleChange", "inputId", "_CdkPrivateStyleLoader", "load", "_StructuralStylesLoader", "HostAttributeToken", "optional", "animationMode", "ANIMATION_MODULE_TYPE", "parseInt", "_IdGenerator", "getId", "ngAfterContentInit", "monitor", "subscribe", "focusOrigin", "Promise", "resolve", "then", "ngOnChanges", "changes", "ngOnDestroy", "stopMonitoring", "writeValue", "registerOnChange", "fn", "registerOnTouched", "validate", "control", "registerOnValidatorChange", "setDisabledState", "isDisabled", "toggle", "_emitChangeEvent", "emit", "_handleClick", "_getAriaLabelledBy", "\u0275cmp", "\u0275\u0275defineComponent", "selectors", "viewQuery", "inputs", "booleanAttribute", "numberAttribute", "outputs", "exportAs", "features", "\u0275\u0275ProvidersFeature", "NG_VALIDATORS", "\u0275\u0275NgOnChangesFeature", "$event", "stopPropagation", "switch_r2", "\u0275\u0275reference", "MatRipple", "_MatInternalFormField", "styles", "encapsulation", "changeDetection", "MatSlideToggleModule", "\u0275mod", "\u0275\u0275defineNgModule", "\u0275inj", "\u0275\u0275defineInjector", "MatSlideToggle", "MatCommonModule"]
}
