{"version":3,"mappings":"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","names":["ɵɵelementStart","ɵɵlistener","ɵɵrestoreView","_r2","ctx_r2","ɵɵnextContext","ɵɵresetView","removeFromFavorites","exercise","ɵɵtext","ɵɵelementEnd","Ae","r","_","e","A","_r4","addToFavorites","ve","_r5","removeFromSelected","showHoverIcon","n","ɵɵproperty","isHovered","ɵɵadvance","ɵɵtextInterpolate","Pe","_r6","addToSelected","fe","ɵɵelement","ɵɵtemplate","ExerciseCardComponent_Conditional_1_Conditional_8_Template","ExerciseCardComponent_Conditional_1_Conditional_9_Template","_r1","showExerciseModal","id","ExerciseCardComponent_Conditional_1_Conditional_13_Template","ExerciseCardComponent_Conditional_1_Conditional_14_Template","video","images","mainImg","ɵɵtextInterpolate1","name","selectedLanguage","ɵɵconditional","isFavorite","isSelected","ExerciseCardComponent","constructor","dialog","inject","MatDialog","exercisesService","ExercisesService","shareStateService","ShareStateService","selectedExercisesService","SelectedExercisesService","usersService","UsersService","localstorageService","LocalstorageService","subscriptions","Subscription","isEmptyPlaceholder","selectedExercise","EventEmitter","removeExercise","favoriteExercise","removeFavoriteExercise","userFavorites","userId","ngOnInit","_getUserLanguageToken","selectExercise","emit","removeCard","_getExercise","exerciseId","getExercise","exerciseCard","isProgramExercise","subscription","subscribe","open","ExerciseModalComponent","data","fullExercise","selectedLang","width","panelClass","backdropClass","add","getToken","split","ngOnDestroy","unsubscribe","ɵfac","t","ɵcmp","R","type","selectors","inputs","cardWrapper","outputs","decls","vars","consts","i18n_0","$localize","ExerciseCardComponent_Conditional_1_Template","ctx","dependencies","NgClass","MatIconButton","MatTooltip","MatIcon","MatMiniFabButton","VideoPlayerComponent","styles","ge","CdkDrag","CdkDragPlaceholder","Re","he","ɵɵi18n","Te","Ie","De","$event","ctx_r1","onDragStarted","onDragEnded","ExercisesGridComponent_For_6_Defer_0_div_1_Template","$implicit","exercise_r3","Me","Ne","be","ExercisesGridComponent_For_6_Defer_0_Template","ExercisesGridComponent_For_6_DeferPlaceholder_1_Template","ɵɵdefer","ExercisesGridComponent_For_6_Defer_2_DepsFn","V","ExercisesGridComponent_For_6_Conditional_4_Template","transferringItem","ExercisesGridComponent","themeManager","ThemeManagerService","transferringItemService","DropListTransferItemService","isFetchingData","selectedExercises","themeSignal","isDragging","windowSize$","fromEvent","window","pipe","startWith","debounceTime","map","innerWidth","getGridStyle","windowSize","effectiveSize","drawerOpen","drawerSignal","entered","set","undefined","exited","item","console","log","noReturnPredicate","cardToRemove","indexToRemove","some","i","_resetCardState","update","favorites","updatedFavorites","__spreadProps","__spreadValues","favExercises","_updateFavorites","updatedFavExercises","filter","favExerciseId","updateFavorites","cardToReset","exercises","length","find","exerciseToReset","ExercisesGridComponent_Conditional_1_Template","ExercisesGridComponent_Conditional_2_Template","j","ɵɵrepeaterCreate","ExercisesGridComponent_For_6_Template","_forTrack0","ɵɵpipeBind1","ɵɵrepeater","CommonModule","NgStyle","AsyncPipe","CdkDropList","OverlayscrollbarsModule","OverlayScrollbarsComponent","MatProgressSpinnerModule","MatProgressSpinner","di"],"ignoreList":[],"sources":["apps/sanare-app/src/app/pages/exercises/exercise-card/exercise-card.component.html","apps/sanare-app/src/app/pages/exercises/exercise-card/exercise-card.component.ts","apps/sanare-app/src/app/pages/exercises/exercises-grid/exercises-grid.component.ts","apps/sanare-app/src/app/pages/exercises/exercises-grid/exercises-grid.component.html"],"sourcesContent":["<div [ngClass]=\"cardWrapper\">\n  @if (!isEmptyPlaceholder) {\n    <div class=\"card\">\n      <div class=\"card-head\">\n        <ui-video-player\n          [videoSrc]=\"exercise.video\"\n          [thumbnail]=\"exercise.images?.mainImg\"\n          [isModal]=\"false\"\n        />\n      </div>\n      <div class=\"card-body\">\n        <div class=\"exercise-name\">\n          <span class=\"multi-line-text\">\n            {{ exercise.name[selectedLanguage] }}\n          </span>\n        </div>\n        <div class=\"card-icons\">\n          @if (exercise.isFavorite) {\n            <button\n              (click)=\"removeFromFavorites(exercise)\"\n              mat-icon-button\n              class=\"favorite-exercise-star\"\n              matTooltip=\"Remove from favorites\"\n              i18n-matTooltip=\"@@ExerciseCard.removeFromFavoritesTooltip\"\n              aria-label=\"Favorite icon-button with a star icon\"\n              i18n-aria-label=\"@@ExerciseCard.removeFromFavoritesAriaLabel\"\n            >\n              <mat-icon>star</mat-icon>\n            </button>\n          } @else {\n            <button\n              (click)=\"addToFavorites(exercise)\"\n              mat-icon-button\n              matTooltip=\"Add to favorites\"\n              i18n-matTooltip=\"@@ExerciseCard.addToFavoritesTooltip\"\n              aria-label=\"Favorite icon-button with a star icon\"\n              i18n-aria-label=\"@@ExerciseCard.addToFavoritesAriaLabel\"\n            >\n              <mat-icon>star_border</mat-icon>\n            </button>\n          }\n          <!-- <button\n            (click)=\"\n              exercise.isFavorite\n                ? removeFromFavorites(exercise)\n                : addToFavorites(exercise.id)\n            \"\n            mat-icon-button\n            [class.favorite-exercise-star]=\"exercise.isFavorite\"\n            [matTooltip]=\"\n              exercise.isFavorite ? 'Remove from favorites' : 'Add to favorites'\n            \"\n            aria-label=\"Favorite icon-button with a star icon\"\n          >\n            <mat-icon>{{\n              exercise.isFavorite ? 'star' : 'star_border'\n            }}</mat-icon>\n          </button> -->\n          <button\n            (click)=\"showExerciseModal(exercise.id, exercise, false)\"\n            mat-icon-button\n            matTooltip=\"Details\"\n            i18n-matTooltip=\"@@ExerciseCard.details\"\n            aria-label=\"Info icon-button with a info icon\"\n            i18n-aria-label=\"@@ExerciseCard.detailsAriaLabel\"\n          >\n            <mat-icon>info_outline</mat-icon>\n          </button>\n          @if (exercise.isSelected) {\n            <button\n              (click)=\"removeFromSelected(exercise)\"\n              class=\"toggleDoneRemoveBtn\"\n              (mouseenter)=\"showHoverIcon(true)\"\n              (mouseleave)=\"showHoverIcon(false)\"\n              mat-mini-fab\n              [color]=\"isHovered ? 'accent' : 'primary'\"\n              matTooltip=\"Remove exercise\"\n              i18n-matTooltip=\"@@ExerciseCard.removeExercise\"\n              aria-label=\"Remove icon-button with a close icon\"\n              i18n-aria-label=\"@@ExerciseCard.removeExerciseAriaLabel\"\n            >\n              <mat-icon>{{ isHovered ? 'close' : 'done' }}</mat-icon>\n            </button>\n          } @else {\n            <button\n              (click)=\"addToSelected(exercise)\"\n              mat-icon-button\n              matTooltip=\"Add exercise\"\n              i18n-matTooltip=\"@@ExerciseCard.addExercise\"\n              color=\"primary\"\n              aria-label=\"Add icon button with a add icon\"\n              i18n-aria-label=\"@@ExerciseCard.addExerciseAriaLabel\"\n            >\n              <mat-icon>add</mat-icon>\n            </button>\n          }\n        </div>\n      </div>\n    </div>\n  }\n</div>\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  inject,\n} from '@angular/core';\nimport {\n  Exercise,\n  ExerciseModalComponent,\n  ExercisesService,\n  SelectedExercisesService,\n  ShareStateService,\n} from '@slowautomobile/exercises';\nimport { MatDialog } from '@angular/material/dialog';\n\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { LocalstorageService, UsersService } from '@slowautomobile/users';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { MatIconButton, MatMiniFabButton } from '@angular/material/button';\nimport { NgClass } from '@angular/common';\nimport { Observable, Subscription } from 'rxjs';\nimport { VideoPlayerComponent } from '@slowautomobile/ui';\n\n@Component({\n    selector: 'sanareapp-exercise-card',\n    templateUrl: './exercise-card.component.html',\n    styleUrl: './exercise-card.component.scss',\n    imports: [NgClass, MatIconButton, MatTooltip, MatIcon, MatMiniFabButton, VideoPlayerComponent]\n})\nexport class ExerciseCardComponent implements OnInit, OnDestroy {\n  dialog = inject(MatDialog);\n  private exercisesService = inject(ExercisesService);\n  private shareStateService = inject(ShareStateService);\n  private selectedExercisesService = inject(SelectedExercisesService);\n  private usersService = inject(UsersService);\n  private localstorageService = inject(LocalstorageService);\n\n  subscriptions = new Subscription();\n\n  @Input() exercise!: Exercise;\n  @Input() cardWrapper!: string;\n  @Input() isEmptyPlaceholder = false;\n  @Output() selectedExercise = new EventEmitter<Exercise>();\n  @Output() removeExercise = new EventEmitter<Exercise>();\n  @Output() favoriteExercise = new EventEmitter<Exercise>();\n  @Output() removeFavoriteExercise = new EventEmitter<Exercise>();\n\n  selectedLanguage!: 'en' | 'de' | 'sr';\n  isHovered = false;\n  userFavorites = this.usersService.userFavorites;\n  userId = this.usersService.userId;\n\n  ngOnInit(): void {\n    this.selectedLanguage = this._getUserLanguageToken();\n  }\n\n  addToSelected(exercise: Exercise) {\n    this.selectedExercisesService.addToSelected(exercise);\n  }\n\n  removeFromSelected(exercise: Exercise) {\n    this.selectedExercisesService.removeFromSelected(exercise);\n  }\n\n  selectExercise(exercise: Exercise) {\n    exercise.isSelected = true;\n    this.selectedExercise.emit(exercise);\n  }\n\n  removeCard(exercise: Exercise) {\n    this.removeExercise.emit(exercise);\n  }\n\n  showHoverIcon(isHovered: boolean): void {\n    this.isHovered = isHovered;\n  }\n\n  private _getExercise(exerciseId: string): Observable<Exercise> {\n    return this.exercisesService.getExercise(exerciseId);\n  }\n\n  showExerciseModal(\n    exerciseId: string,\n    exerciseCard: Exercise,\n    isProgramExercise: boolean,\n  ): void {\n    const subscription = this._getExercise(exerciseId).subscribe(exercise => {\n      this.dialog.open(ExerciseModalComponent, {\n        data: {\n          fullExercise: exercise,\n          exerciseCard: exerciseCard,\n          isProgramExercise: isProgramExercise,\n          selectedLang: this.selectedLanguage,\n        },\n        width: '500px',\n        // height: '736px',\n        panelClass: ['custom-dialog', isProgramExercise ? 'custom-shadow' : ''],\n        // disableClose: isProgramExercise,\n        // hasBackdrop: isProgramExercise ? false : true,\n        backdropClass: isProgramExercise ? 'custom-backdrop' : '',\n        // enterAnimationDuration: 0,\n      });\n    });\n    this.subscriptions.add(subscription);\n  }\n\n  addToFavorites(exercise: Exercise) {\n    exercise.isFavorite = true;\n    this.favoriteExercise.emit(exercise);\n  }\n\n  removeFromFavorites(exercise: Exercise) {\n    exercise.isFavorite = false;\n    this.removeFavoriteExercise.emit(exercise);\n  }\n\n  private _getUserLanguageToken(): 'en' | 'de' | 'sr' {\n    return <'en' | 'de' | 'sr'>(\n      this.localstorageService.getToken('userLanguage')?.split('-')[0]\n    );\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, inject, Input, input, OnInit } from '@angular/core';\nimport { AsyncPipe, CommonModule, NgStyle } from '@angular/common';\nimport {\n  CdkDrag,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragPlaceholder,\n  CdkDragPreview,\n  CdkDropList,\n} from '@angular/cdk/drag-drop';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\nimport { ExerciseCardComponent } from '../exercise-card/exercise-card.component';\nimport { ThemeManagerService } from '@slowautomobile/ui';\nimport {\n  DropListTransferItemService,\n  Exercise,\n  SelectedExercisesService,\n  ShareStateService,\n} from '@slowautomobile/exercises';\nimport {\n  debounceTime,\n  fromEvent,\n  map,\n  Observable,\n  startWith,\n  Subscription,\n} from 'rxjs';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { Favorites, UsersService } from '@slowautomobile/users';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\n@Component({\n  selector: 'sanareapp-exercises-grid',\n  imports: [\n    CommonModule,\n    CdkDropList,\n    CdkDrag,\n    CdkDragPlaceholder,\n    OverlayscrollbarsModule,\n    ExerciseCardComponent,\n    NgStyle,\n    AsyncPipe,\n    MatProgressSpinnerModule,\n  ],\n  templateUrl: './exercises-grid.component.html',\n  styleUrl: './exercises-grid.component.scss',\n})\nexport class ExercisesGridComponent implements OnInit {\n  themeManager = inject(ThemeManagerService);\n  private shareStateService = inject(ShareStateService);\n  private selectedExercisesService = inject(SelectedExercisesService);\n  private usersService = inject(UsersService);\n  transferringItemService = inject(DropListTransferItemService);\n\n  isFetchingData = this.shareStateService.isFetchingData;\n  transferringItem = this.transferringItemService.transferringItem;\n  userFavorites = this.usersService.userFavorites;\n  userId = this.usersService.userId;\n  selectedExercises = this.selectedExercisesService.selectedExercises;\n  // transferringItem: Exercise | undefined = undefined;\n  themeSignal = this.themeManager.themeSignal;\n  drawerOpen!: boolean;\n  // exercises = input<Exercise[]>();\n  @Input() exercises!: Exercise[];\n  windowSize$?: Observable<number>;\n  subscriptions = new Subscription();\n  isDragging = false;\n\n  ngOnInit(): void {\n    this.windowSize$ = fromEvent(window, 'resize').pipe(\n      startWith(null), // Emit an initial value to trigger the styles on component initialization\n      debounceTime(200),\n      map(() => window.innerWidth),\n    );\n  }\n\n  // Dynamically change filter drawer and exercise display grid behavior\n  getGridStyle(windowSize: number | null): { [key: string]: string } {\n    const effectiveSize = windowSize ?? 0;\n    this.drawerOpen = this.shareStateService.drawerSignal();\n    if (effectiveSize < 1510 && effectiveSize > 1338 && this.drawerOpen) {\n      return {\n        'grid-template-columns': 'repeat(3, 1fr)',\n      };\n    } else if (\n      effectiveSize < 1338 &&\n      effectiveSize > 1168 &&\n      this.drawerOpen\n    ) {\n      return {\n        'grid-template-columns': 'repeat(2, 1fr)',\n      };\n    } else {\n      return {};\n    }\n  }\n\n  entered() {\n    // entered(event: CdkDragEnter<any>) {\n    // this.transferringItem = undefined;\n    this.transferringItem.set(undefined);\n\n    // this.enteredSelectedList = false;\n\n    // console.log(event);\n  }\n\n  exited(e: CdkDragExit<any>) {\n    // this.transferringItem = e.item.data;\n    this.transferringItem.set(e.item.data);\n    console.log(this.transferringItem());\n  }\n\n  noReturnPredicate() {\n    return false;\n  }\n\n  // SEEMS THAT IT WORKS, REFACTOR THESE TWO FUNCTIONS IN ONE AND REMOVE UNNECESSARY CODE\n  removeCard(cardToRemove: Exercise): void {\n    let indexToRemove!: number;\n\n    this.selectedExercises().some((selectedExercise, i) => {\n      if (selectedExercise.id === cardToRemove.id) {\n        indexToRemove = i;\n      }\n    });\n    // console.log(cardToRemove, indexToRemove);\n    this._resetCardState(cardToRemove, indexToRemove);\n    // this.selectedExercises.splice(indexToRemove, 1);\n\n    // if (indexToRemove !== -1) {\n    // }\n  }\n\n  addToFavorites(exercise: Exercise) {\n    this.userFavorites.update(favorites => {\n      const updatedFavorites = {\n        ...favorites,\n        favExercises: [...favorites.favExercises, exercise.id],\n      };\n      this._updateFavorites(this.userId(), updatedFavorites);\n\n      return updatedFavorites;\n    });\n  }\n\n  removeFromFavorites(exercise: Exercise) {\n    const updatedFavExercises = this.userFavorites().favExercises.filter(\n      favExerciseId => favExerciseId !== exercise.id,\n    );\n\n    this.userFavorites.update(favorites => {\n      const updatedFavorites = {\n        ...favorites,\n        favExercises: [...updatedFavExercises],\n      };\n\n      return updatedFavorites;\n    });\n\n    this._updateFavorites(this.userId(), this.userFavorites());\n  }\n\n  // Add/remove favorite exercises\n  _updateFavorites(userId: string, updatedFavorites: Favorites) {\n    const subscription = this.usersService\n      .updateFavorites(userId, updatedFavorites)\n      .subscribe(favorites => console.log(favorites));\n    this.subscriptions.add(subscription);\n  }\n\n  private _resetCardState(cardToReset: Exercise, indexToRemove: number) {\n    if (this.exercises.length === 0) {\n      return;\n    }\n\n    this.exercises.find(exerciseToReset => {\n      if (exerciseToReset.id === cardToReset.id) {\n        exerciseToReset.isSelected = false;\n      }\n    });\n  }\n\n  onDragStarted() {\n    this.isDragging = true;\n  }\n\n  onDragEnded() {\n    this.isDragging = false;\n    // console.log(this.isDragging);\n  }\n}\n","<div\n  overlay-scrollbars\n  [options]=\"themeSignal()\"\n  [defer]\n  class=\"grid-container\"\n>\n  @if (exercises?.length === 0 && !isFetchingData()) {\n    <div class=\"noExercisesFound\">\n      <span i18n=\"@@ExercisesGrid.noExercisesFoundMessage\"\n        >No exercises found for your search</span\n      >\n    </div>\n  }\n  @if (isFetchingData()) {\n    <div class=\"fetchingDataSpinner\">\n      <mat-spinner diameter=\"50\"></mat-spinner>\n    </div>\n  }\n  <div\n    cdkDropList\n    [cdkDropListData]=\"exercises\"\n    [ngStyle]=\"getGridStyle(windowSize$ | async)\"\n    class=\"exercise-cards\"\n    cdkDropListSortingDisabled\n    (cdkDropListEntered)=\"entered()\"\n    (cdkDropListExited)=\"exited($event)\"\n    [cdkDropListEnterPredicate]=\"noReturnPredicate\"\n  >\n    @for (exercise of exercises; track exercise.id) {\n      @defer {\n        <sanareapp-exercise-card\n          (removeExercise)=\"removeCard($event)\"\n          (favoriteExercise)=\"addToFavorites($event)\"\n          (removeFavoriteExercise)=\"removeFromFavorites($event)\"\n          [isEmptyPlaceholder]=\"false\"\n          cardWrapper=\"wrap-default\"\n          [exercise]=\"exercise\"\n          cdkDrag\n          [cdkDragData]=\"exercise\"\n          (cdkDragStarted)=\"onDragStarted()\"\n          (cdkDragEnded)=\"onDragEnded()\"\n        >\n          <div class=\"exercise-card-placeholder\" *cdkDragPlaceholder></div>\n        </sanareapp-exercise-card>\n      } @placeholder {\n        <div class=\"exercise-card-skeleton\"></div>\n      }\n      @if (transferringItem() === exercise) {\n        <div class=\"static-placeholder\">\n          <sanareapp-exercise-card\n            cardWrapper=\"wrap-default\"\n            [exercise]=\"exercise\"\n          >\n            ></sanareapp-exercise-card\n          >\n        </div>\n      }\n    }\n  </div>\n</div>\n"]}