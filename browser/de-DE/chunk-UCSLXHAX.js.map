{"version":3,"mappings":"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","names":["ɵɵelement","ɵɵelementStart","ɵɵelementEnd","ɵɵtext","ɵɵlistener","SelectedExercisesListComponent_For_4_Template_button_click_6_listener","exercise_r3","ɵɵrestoreView","_r2","$implicit","ctx_r3","ɵɵnextContext","ɵɵresetView","removeFromSelected","ɵɵtemplate","SelectedExercisesListComponent_For_4_div_9_Template","ɵɵproperty","previewClass","ɵɵadvance","images","mainImg","ɵɵsanitizeUrl","name","selectedLanguage","ɵɵtextInterpolate1","ɵɵi18n","SelectedExercisesListComponent","_SelectedExercisesListComponent","constructor","selectedExercisesService","inject","SelectedExercisesService","transferringItemService","DropListTransferItemService","localstorageService","LocalstorageService","transferringItem","enteredSelectedList","selectedExercises","ngOnInit","_getUserLanguageToken","drop","event","previousContainer","id","container","data","some","item","previousIndex","addToSelected","copyArrayItem","currentIndex","isSelected","console","log","moveItemInArray","set","enteredSelected","exitedSelected","e","exercise","removeCard","cardToRemove","indexToRemove","selectedExercise","i","_resetCardState","cardToReset","exercises","length","find","exerciseToReset","getToken","split","selectors","inputs","decls","vars","consts","i18n_0","SelectedExercisesListComponent_Template_div_cdkDropListDropped_1_listener","$event","_r1","ctx","SelectedExercisesListComponent_Template_div_cdkDropListEntered_1_listener","SelectedExercisesListComponent_Template_div_cdkDropListExited_1_listener","ɵɵrepeaterCreate","SelectedExercisesListComponent_For_4_Template","_forTrack0","SelectedExercisesListComponent_Conditional_5_Template","ɵɵrepeater","ɵɵconditional","CommonModule","CdkDropList","CdkDrag","CdkDragPlaceholder","MatIcon","MatIconButton","styles","className","filePath","lineNumber"],"ignoreList":[],"sources":["apps/sanare-app/src/app/pages/exercises/selected-exercises-list/selected-exercises-list.component.html","apps/sanare-app/src/app/pages/exercises/selected-exercises-list/selected-exercises-list.component.ts"],"sourcesContent":["<div class=\"background-wrapper\">\n  <div\n    cdkDropList\n    #selected=\"cdkDropList\"\n    [cdkDropListData]=\"selectedExercises()\"\n    class=\"main-wrap\"\n    (cdkDropListDropped)=\"drop($event)\"\n    (cdkDropListEntered)=\"enteredSelected($event)\"\n    (cdkDropListExited)=\"exitedSelected($event)\"\n  >\n    @for (exercise of selectedExercises(); track exercise.id) {\n      <div\n        class=\"selected-cards-box\"\n        cdkDrag\n        [cdkDragPreviewClass]=\"previewClass\"\n      >\n        <div class=\"selected-card\">\n          <div class=\"img-wrapper\">\n            <img\n              class=\"selected-exercise-img\"\n              [src]=\"exercise.images?.mainImg\"\n              [alt]=\"exercise.name[selectedLanguage]\"\n            />\n          </div>\n          <p class=\"selected-exercise-name mat-body-medium\">\n            {{ exercise.name[selectedLanguage] }}\n          </p>\n          <button mat-icon-button (click)=\"removeFromSelected(exercise)\">\n            <mat-icon>close</mat-icon>\n          </button>\n        </div>\n        <div class=\"exercise-card-placeholder\" *cdkDragPlaceholder></div>\n      </div>\n    }\n    @if (selectedExercises().length === 0 && !enteredSelectedList) {\n      <div class=\"add-exercise-placeholder\">\n        <span class=\"mat-body-large\" i18n=\"@@SelectedExercises.addExercise\"\n          >Add exercises</span\n        >\n        <div class=\"mat-headline-medium\">\n          <mat-icon\n            [inline]=\"true\"\n            aria-hidden=\"false\"\n            aria-label=\"List icon\"\n            i18n-aria-label=\"@@SelectedExercises.listIcon\"\n            fontIcon=\"playlist_add\"\n          ></mat-icon>\n        </div>\n      </div>\n    }\n  </div>\n</div>\n","import { Component, inject, Input, input, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\nimport { ThemeManagerService } from '@slowautomobile/ui';\nimport {\n  DropListTransferItemService,\n  Exercise,\n  SelectedExercisesService,\n} from '@slowautomobile/exercises';\nimport {\n  CdkDrag,\n  CdkDragDrop,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragPlaceholder,\n  CdkDragPreview,\n  CdkDropList,\n  copyArrayItem,\n  moveItemInArray,\n} from '@angular/cdk/drag-drop';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatIconButton } from '@angular/material/button';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { LocalstorageService } from '@slowautomobile/users';\n\n@Component({\n  selector: 'sanareapp-selected-exercises-list',\n  imports: [\n    CommonModule,\n    CdkDropList,\n    CdkDrag,\n    CdkDragPlaceholder,\n    MatIcon,\n    MatIconButton,\n  ],\n  templateUrl: './selected-exercises-list.component.html',\n  styleUrl: './selected-exercises-list.component.scss',\n})\nexport class SelectedExercisesListComponent implements OnInit {\n  // themeManager = inject(ThemeManagerService);\n  private selectedExercisesService = inject(SelectedExercisesService);\n  transferringItemService = inject(DropListTransferItemService);\n  private localstorageService = inject(LocalstorageService);\n\n  selectedLanguage!: 'en' | 'de' | 'sr';\n\n  transferringItem = this.transferringItemService.transferringItem;\n\n  previewClass = 'custom-preview';\n  // transferringItem: Exercise | undefined = undefined;\n  enteredSelectedList = false;\n  // exercises = input<Exercise[]>();\n  @Input() exercises!: Exercise[];\n\n  // themeSignal = this.themeManager.themeSignal;\n  selectedExercises = this.selectedExercisesService.selectedExercises;\n\n  ngOnInit(): void {\n    this.selectedLanguage = this._getUserLanguageToken();\n  }\n\n  drop(event: CdkDragDrop<Exercise[]>) {\n    if (\n      event.previousContainer.id !== event.container.id &&\n      !event.container.data.some(\n        item =>\n          item.id === event.previousContainer.data[event.previousIndex].id,\n      )\n    ) {\n      this.selectedExercisesService.addToSelected(\n        event.previousContainer.data[event.previousIndex],\n      );\n      copyArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex,\n      );\n      event.previousContainer.data[event.previousIndex].isSelected = true;\n\n      console.log(event.previousContainer.data[event.previousIndex]);\n      console.log(this.selectedExercises());\n      console.log(this.transferringItem());\n    } else {\n      moveItemInArray(\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex,\n      );\n    }\n    // this.transferringItem = undefined;\n    this.transferringItem.set(undefined);\n\n    this.enteredSelectedList = false;\n\n    // this.enteredSelectedList = true;\n  }\n\n  enteredSelected(event: CdkDragEnter<Exercise[]>) {\n    // this.transferringItem = undefined;\n    this.enteredSelectedList = true;\n  }\n\n  exitedSelected(e: CdkDragExit<any>) {\n    // this.transferringItem = undefined;\n    this.transferringItem.set(undefined);\n\n    this.enteredSelectedList = false;\n    // console.log('asdf');\n  }\n\n  removeFromSelected(exercise: Exercise) {\n    console.log(this.selectedExercisesService.selectedExercises());\n    this.removeCard(exercise);\n\n    this.selectedExercisesService.removeFromSelected(exercise);\n\n    console.log(this.selectedExercisesService.selectedExercises());\n  }\n\n  // SEEMS THAT IT WORKS, REFACTOR THESE TWO FUNCTIONS IN ONE AND REMOVE UNNECESSARY CODE\n  removeCard(cardToRemove: Exercise): void {\n    let indexToRemove!: number;\n\n    this.selectedExercises().some((selectedExercise, i) => {\n      if (selectedExercise.id === cardToRemove.id) {\n        indexToRemove = i;\n      }\n    });\n    // console.log(cardToRemove, indexToRemove);\n    this._resetCardState(cardToRemove, indexToRemove);\n    // this.selectedExercises.splice(indexToRemove, 1);\n\n    // if (indexToRemove !== -1) {\n    // }\n  }\n\n  private _resetCardState(cardToReset: Exercise, indexToRemove: number) {\n    if (this.exercises.length === 0) {\n      return;\n    }\n\n    this.exercises.find(exerciseToReset => {\n      if (exerciseToReset.id === cardToReset.id) {\n        exerciseToReset.isSelected = false;\n      }\n    });\n  }\n\n  private _getUserLanguageToken(): 'en' | 'de' | 'sr' {\n    return <'en' | 'de' | 'sr'>(\n      this.localstorageService.getToken('userLanguage')?.split('-')[0]\n    );\n  }\n}\n"]}