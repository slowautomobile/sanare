{
  "version": 3,
  "sources": ["../../src/material/core/ripple/ripple-ref.ts", "../../src/material/core/ripple/ripple-event-manager.ts", "../../src/material/core/ripple/ripple-renderer.ts", "../../src/material/core/ripple/ripple.ts", "../../src/material/core/private/ripple-loader.ts", "../../src/material/core/focus-indicators/structural-styles.ts", "../../src/material/button/button-base.ts", "../../src/material/button/icon-button.ts", "../../src/material/button/icon-button.html", "../../src/material/core/ripple/index.ts", "../../src/material/button/button.ts", "../../src/material/button/button.html", "../../src/material/button/fab.ts", "../../src/material/button/module.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN,\n  VISIBLE,\n  FADING_OUT,\n  HIDDEN,\n}\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: {fadeOutRipple(ref: RippleRef): void},\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig,\n    /* Whether animations are forcibly disabled for ripples through CSS. */\n    public _animationForciblyDisabledThroughCss = false,\n  ) {}\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {normalizePassiveListenerOptions, _getEventTarget} from '@angular/cdk/platform';\nimport {NgZone} from '@angular/core';\n\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true,\n});\n\n/** Manages events through delegation so that as few event handlers as possible are bound. */\nexport class RippleEventManager {\n  private _events = new Map<string, Map<HTMLElement, Set<EventListenerObject>>>();\n\n  /** Adds an event handler. */\n  addHandler(ngZone: NgZone, name: string, element: HTMLElement, handler: EventListenerObject) {\n    const handlersForEvent = this._events.get(name);\n\n    if (handlersForEvent) {\n      const handlersForElement = handlersForEvent.get(element);\n\n      if (handlersForElement) {\n        handlersForElement.add(handler);\n      } else {\n        handlersForEvent.set(element, new Set([handler]));\n      }\n    } else {\n      this._events.set(name, new Map([[element, new Set([handler])]]));\n\n      ngZone.runOutsideAngular(() => {\n        document.addEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes an event handler. */\n  removeHandler(name: string, element: HTMLElement, handler: EventListenerObject) {\n    const handlersForEvent = this._events.get(name);\n\n    if (!handlersForEvent) {\n      return;\n    }\n\n    const handlersForElement = handlersForEvent.get(element);\n\n    if (!handlersForElement) {\n      return;\n    }\n\n    handlersForElement.delete(handler);\n\n    if (handlersForElement.size === 0) {\n      handlersForEvent.delete(element);\n    }\n\n    if (handlersForEvent.size === 0) {\n      this._events.delete(name);\n      document.removeEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions);\n    }\n  }\n\n  /** Event handler that is bound and which dispatches the events to the different targets. */\n  private _delegateEventHandler = (event: Event) => {\n    const target = _getEventTarget(event);\n\n    if (target) {\n      this._events.get(event.type)?.forEach((handlers, element) => {\n        if (element === target || element.contains(target as Node)) {\n          handlers.forEach(handler => handler.handleEvent(event));\n        }\n      });\n    }\n  };\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {\n  ElementRef,\n  NgZone,\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Injector,\n} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions, _getEventTarget} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader} from '@angular/cdk/a11y';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {_CdkPrivateStyleLoader} from '@angular/cdk/private';\nimport {RippleRef, RippleState, RippleConfig} from './ripple-ref';\nimport {RippleEventManager} from './ripple-event-manager';\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/** Interfaces the defines ripple element transition event listeners. */\ninterface RippleEventListeners {\n  onTransitionEnd: EventListener;\n  onTransitionCancel: EventListener;\n  fallbackTimer: ReturnType<typeof setTimeout> | null;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 225,\n  exitDuration: 150,\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options used to bind a passive capturing event. */\nconst passiveCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true,\n});\n\n/** Events that signal that the pointer is down. */\nconst pointerDownEvents = ['mousedown', 'touchstart'];\n\n/** Events that signal that the pointer is up. */\nconst pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];\n\n@Component({\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  styleUrl: 'ripple-structure.css',\n  host: {'mat-ripple-style-loader': ''},\n})\nexport class _MatRippleStylesLoader {}\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer implements EventListenerObject {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /**\n   * Map of currently active ripple references.\n   * The ripple reference is mapped to its element event listeners.\n   * The reason why `| null` is used is that event listeners are added only\n   * when the condition is truthy (see the `_startFadeOutTransition` method).\n   */\n  private _activeRipples = new Map<RippleRef, RippleEventListeners | null>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Whether pointer-up event listeners have been registered. */\n  private _pointerUpEventsRegistered = false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: DOMRect | null;\n\n  private static _eventManager = new RippleEventManager();\n\n  constructor(\n    private _target: RippleTarget,\n    private _ngZone: NgZone,\n    elementOrElementRef: HTMLElement | ElementRef<HTMLElement>,\n    private _platform: Platform,\n    injector?: Injector,\n  ) {\n    // Only do anything if we're on the browser.\n    if (_platform.isBrowser) {\n      this._containerElement = coerceElement(elementOrElementRef);\n    }\n\n    if (injector) {\n      injector.get(_CdkPrivateStyleLoader).load(_MatRippleStylesLoader);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = (this._containerRect =\n      this._containerRect || this._containerElement.getBoundingClientRect());\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const enterDuration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If a custom color has been specified, set it as inline style. If no color is\n    // set, the default color will be applied through the ripple theme styles.\n    if (config.color != null) {\n      ripple.style.backgroundColor = config.color;\n    }\n\n    ripple.style.transitionDuration = `${enterDuration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical to ensure that the `scale` animates properly.\n    // We enforce a style recalculation by calling `getComputedStyle` and *accessing* a property.\n    // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    const computedStyles = window.getComputedStyle(ripple);\n    const userTransitionProperty = computedStyles.transitionProperty;\n    const userTransitionDuration = computedStyles.transitionDuration;\n\n    // Note: We detect whether animation is forcibly disabled through CSS (e.g. through\n    // `transition: none` or `display: none`). This is technically unexpected since animations are\n    // controlled through the animation config, but this exists for backwards compatibility. This\n    // logic does not need to be super accurate since it covers some edge cases which can be easily\n    // avoided by users.\n    const animationForciblyDisabledThroughCss =\n      userTransitionProperty === 'none' ||\n      // Note: The canonical unit for serialized CSS `<time>` properties is seconds. Additionally\n      // some browsers expand the duration for every property (in our case `opacity` and `transform`).\n      userTransitionDuration === '0s' ||\n      userTransitionDuration === '0s, 0s' ||\n      // If the container is 0x0, it's likely `display: none`.\n      (containerRect.width === 0 && containerRect.height === 0);\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config, animationForciblyDisabledThroughCss);\n\n    // Start the enter animation by setting the transform/scale to 100%. The animation will\n    // execute as part of this statement because we forced a style recalculation before.\n    // Note: We use a 3d transform here in order to avoid an issue in Safari where\n    // the ripples aren't clipped when inside the shadow DOM (see #24028).\n    ripple.style.transform = 'scale3d(1, 1, 1)';\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    let eventListeners: RippleEventListeners | null = null;\n\n    // Do not register the `transition` event listener if fade-in and fade-out duration\n    // are set to zero. The events won't fire anyway and we can save resources here.\n    if (!animationForciblyDisabledThroughCss && (enterDuration || animationConfig.exitDuration)) {\n      this._ngZone.runOutsideAngular(() => {\n        const onTransitionEnd = () => {\n          // Clear the fallback timer since the transition fired correctly.\n          if (eventListeners) {\n            eventListeners.fallbackTimer = null;\n          }\n          clearTimeout(fallbackTimer);\n          this._finishRippleTransition(rippleRef);\n        };\n        const onTransitionCancel = () => this._destroyRipple(rippleRef);\n\n        // In some cases where there's a higher load on the browser, it can choose not to dispatch\n        // neither `transitionend` nor `transitioncancel` (see b/227356674). This timer serves as a\n        // fallback for such cases so that the ripple doesn't become stuck. We add a 100ms buffer\n        // because timers aren't precise. Note that another approach can be to transition the ripple\n        // to the `VISIBLE` state immediately above and to `FADING_IN` afterwards inside\n        // `transitionstart`. We go with the timer because it's one less event listener and\n        // it's less likely to break existing tests.\n        const fallbackTimer = setTimeout(onTransitionCancel, enterDuration + 100);\n\n        ripple.addEventListener('transitionend', onTransitionEnd);\n        // If the transition is cancelled (e.g. due to DOM removal), we destroy the ripple\n        // directly as otherwise we would keep it part of the ripple container forever.\n        // https://www.w3.org/TR/css-transitions-1/#:~:text=no%20longer%20in%20the%20document.\n        ripple.addEventListener('transitioncancel', onTransitionCancel);\n        eventListeners = {onTransitionEnd, onTransitionCancel, fallbackTimer};\n      });\n    }\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.set(rippleRef, eventListeners);\n\n    // In case there is no fade-in transition duration, we need to manually call the transition\n    // end listener because `transitionend` doesn't fire if there is no transition.\n    if (animationForciblyDisabledThroughCss || !enterDuration) {\n      this._finishRippleTransition(rippleRef);\n    }\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples already fading out or hidden, this should be a noop.\n    if (rippleRef.state === RippleState.FADING_OUT || rippleRef.state === RippleState.HIDDEN) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    // This starts the fade-out transition and will fire the transition end listener that\n    // removes the ripple element from the DOM.\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // In case there is no fade-out transition duration, we need to manually call the\n    // transition end listener because `transitionend` doesn't fire if there is no transition.\n    if (rippleRef._animationForciblyDisabledThroughCss || !animationConfig.exitDuration) {\n      this._finishRippleTransition(rippleRef);\n    }\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._getActiveRipples().forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Fades out all currently active non-persistent ripples. */\n  fadeOutAllNonPersistent() {\n    this._getActiveRipples().forEach(ripple => {\n      if (!ripple.config.persistent) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(elementOrElementRef: HTMLElement | ElementRef<HTMLElement>) {\n    const element = coerceElement(elementOrElementRef);\n\n    if (!this._platform.isBrowser || !element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n    this._triggerElement = element;\n\n    // Use event delegation for the trigger events since they're\n    // set up during creation and are performance-sensitive.\n    pointerDownEvents.forEach(type => {\n      RippleRenderer._eventManager.addHandler(this._ngZone, type, element, this);\n    });\n  }\n\n  /**\n   * Handles all registered events.\n   * @docs-private\n   */\n  handleEvent(event: Event) {\n    if (event.type === 'mousedown') {\n      this._onMousedown(event as MouseEvent);\n    } else if (event.type === 'touchstart') {\n      this._onTouchStart(event as TouchEvent);\n    } else {\n      this._onPointerUp();\n    }\n\n    // If pointer-up events haven't been registered yet, do so now.\n    // We do this on-demand in order to reduce the total number of event listeners\n    // registered by the ripples, which speeds up the rendering time for large UIs.\n    if (!this._pointerUpEventsRegistered) {\n      // The events for hiding the ripple are bound directly on the trigger, because:\n      // 1. Some of them occur frequently (e.g. `mouseleave`) and any advantage we get from\n      // delegation will be diminished by having to look through all the data structures often.\n      // 2. They aren't as performance-sensitive, because they're bound only after the user\n      // has interacted with an element.\n      this._ngZone.runOutsideAngular(() => {\n        pointerUpEvents.forEach(type => {\n          this._triggerElement!.addEventListener(type, this, passiveCapturingEventOptions);\n        });\n      });\n\n      this._pointerUpEventsRegistered = true;\n    }\n  }\n\n  /** Method that will be called if the fade-in or fade-in transition completed. */\n  private _finishRippleTransition(rippleRef: RippleRef) {\n    if (rippleRef.state === RippleState.FADING_IN) {\n      this._startFadeOutTransition(rippleRef);\n    } else if (rippleRef.state === RippleState.FADING_OUT) {\n      this._destroyRipple(rippleRef);\n    }\n  }\n\n  /**\n   * Starts the fade-out transition of the given ripple if it's not persistent and the pointer\n   * is not held down anymore.\n   */\n  private _startFadeOutTransition(rippleRef: RippleRef) {\n    const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n    const {persistent} = rippleRef.config;\n\n    rippleRef.state = RippleState.VISIBLE;\n\n    // When the timer runs out while the user has kept their pointer down, we want to\n    // keep only the persistent ripples and the latest transient ripple. We do this,\n    // because we don't want stacked transient ripples to appear after their enter\n    // animation has finished.\n    if (!persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n      rippleRef.fadeOut();\n    }\n  }\n\n  /** Destroys the given ripple by removing it from the DOM and updating its state. */\n  private _destroyRipple(rippleRef: RippleRef) {\n    const eventListeners = this._activeRipples.get(rippleRef) ?? null;\n    this._activeRipples.delete(rippleRef);\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // If the current ref is the most recent transient ripple, unset it\n    // avoid memory leaks.\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    rippleRef.state = RippleState.HIDDEN;\n    if (eventListeners !== null) {\n      rippleRef.element.removeEventListener('transitionend', eventListeners.onTransitionEnd);\n      rippleRef.element.removeEventListener('transitioncancel', eventListeners.onTransitionCancel);\n      if (eventListeners.fallbackTimer !== null) {\n        clearTimeout(eventListeners.fallbackTimer);\n      }\n    }\n    rippleRef.element.remove();\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown(event: MouseEvent) {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent =\n      this._lastTouchStartEvent &&\n      Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart(event: TouchEvent) {\n    if (!this._target.rippleDisabled && !isFakeTouchstartFromScreenReader(event)) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches as TouchList | undefined;\n\n      // According to the typings the touches should always be defined, but in some cases\n      // the browser appears to not assign them in tests which leads to flakes.\n      if (touches) {\n        for (let i = 0; i < touches.length; i++) {\n          this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n        }\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp() {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._getActiveRipples().forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible =\n        ripple.state === RippleState.VISIBLE ||\n        (ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN);\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  private _getActiveRipples(): RippleRef[] {\n    return Array.from(this._activeRipples.keys());\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    const trigger = this._triggerElement;\n\n    if (trigger) {\n      pointerDownEvents.forEach(type =>\n        RippleRenderer._eventManager.removeHandler(type, trigger, this),\n      );\n\n      if (this._pointerUpEventsRegistered) {\n        pointerUpEvents.forEach(type =>\n          trigger.removeEventListener(type, this, passiveCapturingEventOptions),\n        );\n\n        this._pointerUpEventsRegistered = false;\n      }\n    }\n  }\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: DOMRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  ANIMATION_MODULE_TYPE,\n  Injector,\n  inject,\n} from '@angular/core';\nimport {_CdkPrivateStyleLoader} from '@angular/cdk/private';\nimport {RippleAnimationConfig, RippleConfig, RippleRef} from './ripple-ref';\nimport {RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Default configuration for the animation duration of the ripples. There are two phases with\n   * different durations for the ripples: `enter` and `leave`. The durations will be overwritten\n   * by the value of `matRippleAnimation` or if the `NoopAnimationsModule` is included.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse or touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n\n  /**\n   * A namespace to use for ripple loader to allow multiple instances to exist on the same page.\n   */\n  namespace?: string;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS = new InjectionToken<RippleGlobalOptions>(\n  'mat-ripple-global-options',\n);\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded',\n  },\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _animationMode = inject(ANIMATION_MODULE_TYPE, {optional: true});\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    if (value) {\n      this.fadeOutAllNonPersistent();\n    }\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() {\n    return this._trigger || this._elementRef.nativeElement;\n  }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** @docs-private Whether ripple directive is initialized and the input bindings are set. */\n  _isInitialized: boolean = false;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const ngZone = inject(NgZone);\n    const platform = inject(Platform);\n    const globalOptions = inject<RippleGlobalOptions>(MAT_RIPPLE_GLOBAL_OPTIONS, {optional: true});\n    const injector = inject(Injector);\n\n    // Note: cannot use `inject()` here, because this class\n    // gets instantiated manually in the ripple loader.\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, this._elementRef, platform, injector);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Fades out all currently showing non-persistent ripple elements. */\n  fadeOutAllNonPersistent() {\n    this._rippleRenderer.fadeOutAllNonPersistent();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {\n        ...this._globalOptions.animation,\n        ...(this._animationMode === 'NoopAnimations' ? {enterDuration: 0, exitDuration: 0} : {}),\n        ...this.animation,\n      },\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates relative to the viewport.\n   * @param x Coordinate along the X axis at which to fade-in the ripple. Coordinate\n   *   should be relative to the viewport.\n   * @param y Coordinate along the Y axis at which to fade-in the ripple. Coordinate\n   *   should be relative to the viewport.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ANIMATION_MODULE_TYPE,\n  Injectable,\n  Injector,\n  NgZone,\n  OnDestroy,\n  RendererFactory2,\n  inject,\n} from '@angular/core';\nimport {\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  RippleRenderer,\n  RippleTarget,\n  defaultRippleAnimationConfig,\n} from '../ripple';\nimport {Platform, _bindEventWithOptions, _getEventTarget} from '@angular/cdk/platform';\nimport {_CdkPrivateStyleLoader} from '@angular/cdk/private';\n\n/** The options for the MatRippleLoader's event listeners. */\nconst eventListenerOptions = {capture: true};\n\n/**\n * The events that should trigger the initialization of the ripple.\n * Note that we use `mousedown`, rather than `click`, for mouse devices because\n * we can't rely on `mouseenter` in the shadow DOM and `click` happens too late.\n */\nconst rippleInteractionEvents = ['focus', 'mousedown', 'mouseenter', 'touchstart'];\n\n/** The attribute attached to a component whose ripple has not yet been initialized. */\nconst matRippleUninitialized = 'mat-ripple-loader-uninitialized';\n\n/** Additional classes that should be added to the ripple when it is rendered. */\nconst matRippleClassName = 'mat-ripple-loader-class-name';\n\n/** Whether the ripple should be centered. */\nconst matRippleCentered = 'mat-ripple-loader-centered';\n\n/** Whether the ripple should be disabled. */\nconst matRippleDisabled = 'mat-ripple-loader-disabled';\n\n/**\n * Handles attaching ripples on demand.\n *\n * This service allows us to avoid eagerly creating & attaching MatRipples.\n * It works by creating & attaching a ripple only when a component is first interacted with.\n *\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MatRippleLoader implements OnDestroy {\n  private _document = inject(DOCUMENT);\n  private _animationMode = inject(ANIMATION_MODULE_TYPE, {optional: true});\n  private _globalRippleOptions = inject(MAT_RIPPLE_GLOBAL_OPTIONS, {optional: true});\n  private _platform = inject(Platform);\n  private _ngZone = inject(NgZone);\n  private _injector = inject(Injector);\n  private _eventCleanups: (() => void)[];\n  private _hosts = new Map<\n    HTMLElement,\n    {renderer: RippleRenderer; target: RippleTarget; hasSetUpEvents: boolean}\n  >();\n\n  constructor() {\n    const renderer = inject(RendererFactory2).createRenderer(null, null);\n\n    this._eventCleanups = this._ngZone.runOutsideAngular(() => {\n      return rippleInteractionEvents.map(name =>\n        _bindEventWithOptions(\n          renderer,\n          this._document,\n          name,\n          this._onInteraction,\n          eventListenerOptions,\n        ),\n      );\n    });\n  }\n\n  ngOnDestroy(): void {\n    const hosts = this._hosts.keys();\n\n    for (const host of hosts) {\n      this.destroyRipple(host);\n    }\n\n    this._eventCleanups.forEach(cleanup => cleanup());\n  }\n\n  /**\n   * Configures the ripple that will be rendered by the ripple loader.\n   *\n   * Stores the given information about how the ripple should be configured on the host\n   * element so that it can later be retrived & used when the ripple is actually created.\n   */\n  configureRipple(\n    host: HTMLElement,\n    config: {\n      className?: string;\n      centered?: boolean;\n      disabled?: boolean;\n    },\n  ): void {\n    // Indicates that the ripple has not yet been rendered for this component.\n    host.setAttribute(matRippleUninitialized, this._globalRippleOptions?.namespace ?? '');\n\n    // Store the additional class name(s) that should be added to the ripple element.\n    if (config.className || !host.hasAttribute(matRippleClassName)) {\n      host.setAttribute(matRippleClassName, config.className || '');\n    }\n\n    // Store whether the ripple should be centered.\n    if (config.centered) {\n      host.setAttribute(matRippleCentered, '');\n    }\n\n    if (config.disabled) {\n      host.setAttribute(matRippleDisabled, '');\n    }\n  }\n\n  /** Sets the disabled state on the ripple instance corresponding to the given host element. */\n  setDisabled(host: HTMLElement, disabled: boolean): void {\n    const ripple = this._hosts.get(host);\n\n    // If the ripple has already been instantiated, just disable it.\n    if (ripple) {\n      ripple.target.rippleDisabled = disabled;\n\n      if (!disabled && !ripple.hasSetUpEvents) {\n        ripple.hasSetUpEvents = true;\n        ripple.renderer.setupTriggerEvents(host);\n      }\n    } else if (disabled) {\n      // Otherwise, set an attribute so we know what the\n      // disabled state should be when the ripple is initialized.\n      host.setAttribute(matRippleDisabled, '');\n    } else {\n      host.removeAttribute(matRippleDisabled);\n    }\n  }\n\n  /**\n   * Handles creating and attaching component internals\n   * when a component is initially interacted with.\n   */\n  private _onInteraction = (event: Event) => {\n    const eventTarget = _getEventTarget(event);\n\n    if (eventTarget instanceof HTMLElement) {\n      // TODO(wagnermaciel): Consider batching these events to improve runtime performance.\n      const element = eventTarget.closest(\n        `[${matRippleUninitialized}=\"${this._globalRippleOptions?.namespace ?? ''}\"]`,\n      );\n\n      if (element) {\n        this._createRipple(element as HTMLElement);\n      }\n    }\n  };\n\n  /** Creates a MatRipple and appends it to the given element. */\n  private _createRipple(host: HTMLElement): void {\n    if (!this._document || this._hosts.has(host)) {\n      return;\n    }\n\n    // Create the ripple element.\n    host.querySelector('.mat-ripple')?.remove();\n    const rippleEl = this._document.createElement('span');\n    rippleEl.classList.add('mat-ripple', host.getAttribute(matRippleClassName)!);\n    host.append(rippleEl);\n\n    const isNoopAnimations = this._animationMode === 'NoopAnimations';\n    const globalOptions = this._globalRippleOptions;\n    const enterDuration = isNoopAnimations\n      ? 0\n      : globalOptions?.animation?.enterDuration ?? defaultRippleAnimationConfig.enterDuration;\n    const exitDuration = isNoopAnimations\n      ? 0\n      : globalOptions?.animation?.exitDuration ?? defaultRippleAnimationConfig.exitDuration;\n    const target: RippleTarget = {\n      rippleDisabled:\n        isNoopAnimations || globalOptions?.disabled || host.hasAttribute(matRippleDisabled),\n      rippleConfig: {\n        centered: host.hasAttribute(matRippleCentered),\n        terminateOnPointerUp: globalOptions?.terminateOnPointerUp,\n        animation: {\n          enterDuration,\n          exitDuration,\n        },\n      },\n    };\n\n    const renderer = new RippleRenderer(\n      target,\n      this._ngZone,\n      rippleEl,\n      this._platform,\n      this._injector,\n    );\n    const hasSetUpEvents = !target.rippleDisabled;\n\n    if (hasSetUpEvents) {\n      renderer.setupTriggerEvents(host);\n    }\n\n    this._hosts.set(host, {\n      target,\n      renderer,\n      hasSetUpEvents,\n    });\n\n    host.removeAttribute(matRippleUninitialized);\n  }\n\n  destroyRipple(host: HTMLElement): void {\n    const ripple = this._hosts.get(host);\n\n    if (ripple) {\n      ripple.renderer._removeTriggerEvents();\n      this._hosts.delete(host);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Component used to load structural styles for focus indicators.\n * @docs-private\n */\n@Component({\n  selector: 'structural-styles',\n  styleUrl: 'structural-styles.css',\n  encapsulation: ViewEncapsulation.None,\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class _StructuralStylesLoader {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  AfterViewInit,\n  ANIMATION_MODULE_TYPE,\n  booleanAttribute,\n  Directive,\n  ElementRef,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  numberAttribute,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {_StructuralStylesLoader, MatRippleLoader, ThemePalette} from '../core';\nimport {_CdkPrivateStyleLoader} from '@angular/cdk/private';\n\n/** Object that can be used to configure the default options for the button component. */\nexport interface MatButtonConfig {\n  /** Whether disabled buttons should be interactive. */\n  disabledInteractive?: boolean;\n\n  /** Default palette color to apply to buttons. */\n  color?: ThemePalette;\n}\n\n/** Injection token that can be used to provide the default options the button component. */\nexport const MAT_BUTTON_CONFIG = new InjectionToken<MatButtonConfig>('MAT_BUTTON_CONFIG');\n\n/** Shared host configuration for all buttons */\nexport const MAT_BUTTON_HOST = {\n  '[attr.disabled]': '_getDisabledAttribute()',\n  '[attr.aria-disabled]': '_getAriaDisabled()',\n  '[class.mat-mdc-button-disabled]': 'disabled',\n  '[class.mat-mdc-button-disabled-interactive]': 'disabledInteractive',\n  '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  // MDC automatically applies the primary theme color to the button, but we want to support\n  // an unthemed version. If color is undefined, apply a CSS class that makes it easy to\n  // select and style this \"theme\".\n  '[class.mat-unthemed]': '!color',\n  // Add a class that applies to all buttons. This makes it easier to target if somebody\n  // wants to target all Material buttons.\n  '[class.mat-mdc-button-base]': 'true',\n  '[class]': 'color ? \"mat-\" + color : \"\"',\n};\n\n/** List of classes to add to buttons instances based on host attribute selector. */\nconst HOST_SELECTOR_MDC_CLASS_PAIR: {attribute: string; mdcClasses: string[]}[] = [\n  {\n    attribute: 'mat-button',\n    mdcClasses: ['mdc-button', 'mat-mdc-button'],\n  },\n  {\n    attribute: 'mat-flat-button',\n    mdcClasses: ['mdc-button', 'mdc-button--unelevated', 'mat-mdc-unelevated-button'],\n  },\n  {\n    attribute: 'mat-raised-button',\n    mdcClasses: ['mdc-button', 'mdc-button--raised', 'mat-mdc-raised-button'],\n  },\n  {\n    attribute: 'mat-stroked-button',\n    mdcClasses: ['mdc-button', 'mdc-button--outlined', 'mat-mdc-outlined-button'],\n  },\n  {\n    attribute: 'mat-fab',\n    mdcClasses: ['mdc-fab', 'mat-mdc-fab-base', 'mat-mdc-fab'],\n  },\n  {\n    attribute: 'mat-mini-fab',\n    mdcClasses: ['mdc-fab', 'mat-mdc-fab-base', 'mdc-fab--mini', 'mat-mdc-mini-fab'],\n  },\n  {\n    attribute: 'mat-icon-button',\n    mdcClasses: ['mdc-icon-button', 'mat-mdc-icon-button'],\n  },\n];\n\n/** Base class for all buttons.  */\n@Directive()\nexport class MatButtonBase implements AfterViewInit, OnDestroy {\n  _elementRef = inject(ElementRef);\n  _ngZone = inject(NgZone);\n  _animationMode = inject(ANIMATION_MODULE_TYPE, {optional: true});\n\n  private readonly _focusMonitor = inject(FocusMonitor);\n\n  /**\n   * Handles the lazy creation of the MatButton ripple.\n   * Used to improve initial load time of large applications.\n   */\n  protected _rippleLoader: MatRippleLoader = inject(MatRippleLoader);\n\n  /** Whether this button is a FAB. Used to apply the correct class on the ripple. */\n  protected _isFab = false;\n\n  /**\n   * Theme color of the button. This API is supported in M2 themes only, it has\n   * no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/button/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  @Input() color?: string | null;\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input({transform: booleanAttribute})\n  get disableRipple(): boolean {\n    return this._disableRipple;\n  }\n  set disableRipple(value: any) {\n    this._disableRipple = value;\n    this._updateRippleDisabled();\n  }\n  private _disableRipple: boolean = false;\n\n  /** Whether the button is disabled. */\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: any) {\n    this._disabled = value;\n    this._updateRippleDisabled();\n  }\n  private _disabled: boolean = false;\n\n  /** `aria-disabled` value of the button. */\n  @Input({transform: booleanAttribute, alias: 'aria-disabled'})\n  ariaDisabled: boolean | undefined;\n\n  /**\n   * Natively disabled buttons prevent focus and any pointer events from reaching the button.\n   * In some scenarios this might not be desirable, because it can prevent users from finding out\n   * why the button is disabled (e.g. via tooltip). This is also useful for buttons that may\n   * become disabled when activated, which would cause focus to be transferred to the document\n   * body instead of remaining on the button.\n   *\n   * Enabling this input will change the button so that it is styled to be disabled and will be\n   * marked as `aria-disabled`, but it will allow the button to receive events and focus.\n   *\n   * Note that by enabling this, you need to set the `tabindex` yourself if the button isn't\n   * meant to be tabbable and you have to prevent the button action (e.g. form submissions).\n   */\n  @Input({transform: booleanAttribute})\n  disabledInteractive: boolean;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n    const config = inject(MAT_BUTTON_CONFIG, {optional: true});\n    const element = this._elementRef.nativeElement;\n    const classList = (element as HTMLElement).classList;\n\n    this.disabledInteractive = config?.disabledInteractive ?? false;\n    this.color = config?.color ?? null;\n    this._rippleLoader?.configureRipple(element, {className: 'mat-mdc-button-ripple'});\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding MDC classes.\n    for (const {attribute, mdcClasses} of HOST_SELECTOR_MDC_CLASS_PAIR) {\n      if (element.hasAttribute(attribute)) {\n        classList.add(...mdcClasses);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._rippleLoader?.destroyRipple(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    if (origin) {\n      this._focusMonitor.focusVia(this._elementRef.nativeElement, origin, options);\n    } else {\n      this._elementRef.nativeElement.focus(options);\n    }\n  }\n\n  protected _getAriaDisabled() {\n    if (this.ariaDisabled != null) {\n      return this.ariaDisabled;\n    }\n\n    return this.disabled && this.disabledInteractive ? true : null;\n  }\n\n  protected _getDisabledAttribute() {\n    return this.disabledInteractive || !this.disabled ? null : true;\n  }\n\n  private _updateRippleDisabled(): void {\n    this._rippleLoader?.setDisabled(\n      this._elementRef.nativeElement,\n      this.disableRipple || this.disabled,\n    );\n  }\n}\n\n/** Shared host configuration for buttons using the `<a>` tag. */\nexport const MAT_ANCHOR_HOST = {\n  // Note that this is basically a noop on anchors,\n  // but it appears that some internal apps depend on it.\n  '[attr.disabled]': '_getDisabledAttribute()',\n  '[class.mat-mdc-button-disabled]': 'disabled',\n  '[class.mat-mdc-button-disabled-interactive]': 'disabledInteractive',\n  '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n\n  // Note that we ignore the user-specified tabindex when it's disabled for\n  // consistency with the `mat-button` applied on native buttons where even\n  // though they have an index, they're not tabbable.\n  '[attr.tabindex]': 'disabled && !disabledInteractive ? -1 : tabIndex',\n  '[attr.aria-disabled]': '_getAriaDisabled()',\n  // MDC automatically applies the primary theme color to the button, but we want to support\n  // an unthemed version. If color is undefined, apply a CSS class that makes it easy to\n  // select and style this \"theme\".\n  '[class.mat-unthemed]': '!color',\n  // Add a class that applies to all buttons. This makes it easier to target if somebody\n  // wants to target all Material buttons.\n  '[class.mat-mdc-button-base]': 'true',\n  '[class]': 'color ? \"mat-\" + color : \"\"',\n};\n\n/**\n * Anchor button base.\n */\n@Directive()\nexport class MatAnchorBase extends MatButtonBase implements OnInit, OnDestroy {\n  private _renderer = inject(Renderer2);\n  private _cleanupClick: () => void;\n\n  @Input({\n    transform: (value: unknown) => {\n      return value == null ? undefined : numberAttribute(value);\n    },\n  })\n  tabIndex: number;\n\n  ngOnInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      this._cleanupClick = this._renderer.listen(\n        this._elementRef.nativeElement,\n        'click',\n        this._haltDisabledEvents,\n      );\n    });\n  }\n\n  override ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._cleanupClick?.();\n  }\n\n  _haltDisabledEvents = (event: Event): void => {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  };\n\n  protected override _getAriaDisabled() {\n    if (this.ariaDisabled != null) {\n      return this.ariaDisabled;\n    }\n    return this.disabled || null;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {MAT_ANCHOR_HOST, MAT_BUTTON_HOST, MatAnchorBase, MatButtonBase} from './button-base';\n\n/**\n * Material Design icon button component. This type of button displays a single interactive icon for\n * users to perform an action.\n * See https://material.io/develop/web/components/buttons/icon-buttons/\n */\n@Component({\n  selector: `button[mat-icon-button]`,\n  templateUrl: 'icon-button.html',\n  styleUrls: ['icon-button.css', 'button-high-contrast.css'],\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIconButton extends MatButtonBase {\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n    this._rippleLoader.configureRipple(this._elementRef.nativeElement, {centered: true});\n  }\n}\n\n/**\n * Material Design icon button component for anchor elements. This button displays a single\n * interaction icon that allows users to navigate across different routes or pages.\n * See https://material.io/develop/web/components/buttons/icon-buttons/\n */\n@Component({\n  selector: `a[mat-icon-button]`,\n  templateUrl: 'icon-button.html',\n  styleUrls: ['icon-button.css', 'button-high-contrast.css'],\n  host: MAT_ANCHOR_HOST,\n  exportAs: 'matButton, matAnchor',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIconAnchor extends MatAnchorBase {}\n", "<span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span>\n\n<ng-content></ng-content>\n\n<!--\n  The indicator can't be directly on the button, because MDC uses ::before for high contrast\n  indication and it can't be on the ripple, because it has a border radius and overflow: hidden.\n-->\n<span class=\"mat-focus-indicator\"></span>\n\n<span class=\"mat-mdc-button-touch-target\"></span>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport {RippleRenderer, RippleTarget, defaultRippleAnimationConfig} from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, MatRipple],\n  exports: [MatRipple, MatCommonModule],\n})\nexport class MatRippleModule {}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {MAT_ANCHOR_HOST, MAT_BUTTON_HOST, MatAnchorBase, MatButtonBase} from './button-base';\n\n/**\n * Material Design button component. Users interact with a button to perform an action.\n * See https://material.io/components/buttons\n *\n * The `MatButton` class applies to native button elements and captures the appearances for\n * \"text button\", \"outlined button\", and \"contained button\" per the Material Design\n * specification. `MatButton` additionally captures an additional \"flat\" appearance, which matches\n * \"contained\" but without elevation.\n */\n@Component({\n  selector: `\n    button[mat-button], button[mat-raised-button], button[mat-flat-button],\n    button[mat-stroked-button]\n  `,\n  templateUrl: 'button.html',\n  styleUrls: ['button.css', 'button-high-contrast.css'],\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends MatButtonBase {}\n\n/**\n * Material Design button component for anchor elements. Anchor elements are used to provide\n * links for the user to navigate across different routes or pages.\n * See https://material.io/components/buttons\n *\n * The `MatAnchor` class applies to native anchor elements and captures the appearances for\n * \"text button\", \"outlined button\", and \"contained button\" per the Material Design\n * specification. `MatAnchor` additionally captures an additional \"flat\" appearance, which matches\n * \"contained\" but without elevation.\n */\n@Component({\n  selector: `a[mat-button], a[mat-raised-button], a[mat-flat-button], a[mat-stroked-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: MAT_ANCHOR_HOST,\n  templateUrl: 'button.html',\n  styleUrls: ['button.css', 'button-high-contrast.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatAnchorBase {}\n", "<span\n    class=\"mat-mdc-button-persistent-ripple\"\n    [class.mdc-button__ripple]=\"!_isFab\"\n    [class.mdc-fab__ripple]=\"_isFab\"></span>\n\n<ng-content select=\".material-icons:not([iconPositionEnd]), mat-icon:not([iconPositionEnd]), [matButtonIcon]:not([iconPositionEnd])\">\n</ng-content>\n\n<span class=\"mdc-button__label\"><ng-content></ng-content></span>\n\n<ng-content select=\".material-icons[iconPositionEnd], mat-icon[iconPositionEnd], [matButtonIcon][iconPositionEnd]\">\n</ng-content>\n\n<!--\n  The indicator can't be directly on the button, because MDC uses ::before for high contrast\n  indication and it can't be on the ripple, because it has a border radius and overflow: hidden.\n-->\n<span class=\"mat-focus-indicator\"></span>\n\n<span class=\"mat-mdc-button-touch-target\"></span>\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  InjectionToken,\n  Input,\n  ViewEncapsulation,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\n\nimport {MatAnchor} from './button';\nimport {MAT_ANCHOR_HOST, MAT_BUTTON_HOST, MatButtonBase} from './button-base';\nimport {ThemePalette} from '../core';\n\n/** Default FAB options that can be overridden. */\nexport interface MatFabDefaultOptions {\n  /**\n   * Default theme color of the button. This API is supported in M2 themes\n   * only, it has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/button/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants.\n   */\n  color?: ThemePalette;\n}\n\n/** Injection token to be used to override the default options for FAB. */\nexport const MAT_FAB_DEFAULT_OPTIONS = new InjectionToken<MatFabDefaultOptions>(\n  'mat-mdc-fab-default-options',\n  {\n    providedIn: 'root',\n    factory: MAT_FAB_DEFAULT_OPTIONS_FACTORY,\n  },\n);\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function MAT_FAB_DEFAULT_OPTIONS_FACTORY(): MatFabDefaultOptions {\n  return {\n    // The FAB by default has its color set to accent.\n    color: 'accent',\n  };\n}\n\n// Default FAB configuration.\nconst defaults = MAT_FAB_DEFAULT_OPTIONS_FACTORY();\n\n/**\n * Material Design floating action button (FAB) component. These buttons represent the primary\n * or most common action for users to interact with.\n * See https://material.io/components/buttons-floating-action-button/\n *\n * The `MatFabButton` class has two appearances: normal and extended.\n */\n@Component({\n  selector: `button[mat-fab]`,\n  templateUrl: 'button.html',\n  styleUrl: 'fab.css',\n  host: {\n    ...MAT_BUTTON_HOST,\n    '[class.mdc-fab--extended]': 'extended',\n    '[class.mat-mdc-extended-fab]': 'extended',\n  },\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatFabButton extends MatButtonBase {\n  private _options = inject<MatFabDefaultOptions>(MAT_FAB_DEFAULT_OPTIONS, {optional: true});\n\n  override _isFab = true;\n\n  @Input({transform: booleanAttribute}) extended: boolean;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n    this._options = this._options || defaults;\n    this.color = this._options!.color || defaults.color;\n  }\n}\n\n/**\n * Material Design mini floating action button (FAB) component. These buttons represent the primary\n * or most common action for users to interact with.\n * See https://material.io/components/buttons-floating-action-button/\n */\n@Component({\n  selector: `button[mat-mini-fab]`,\n  templateUrl: 'button.html',\n  styleUrl: 'fab.css',\n  host: MAT_BUTTON_HOST,\n  exportAs: 'matButton',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMiniFabButton extends MatButtonBase {\n  private _options = inject<MatFabDefaultOptions>(MAT_FAB_DEFAULT_OPTIONS, {optional: true});\n\n  override _isFab = true;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n    this._options = this._options || defaults;\n    this.color = this._options!.color || defaults.color;\n  }\n}\n\n/**\n * Material Design floating action button (FAB) component for anchor elements. Anchor elements\n * are used to provide links for the user to navigate across different routes or pages.\n * See https://material.io/components/buttons-floating-action-button/\n *\n * The `MatFabAnchor` class has two appearances: normal and extended.\n */\n@Component({\n  selector: `a[mat-fab]`,\n  templateUrl: 'button.html',\n  styleUrl: 'fab.css',\n  host: {\n    ...MAT_ANCHOR_HOST,\n    '[class.mdc-fab--extended]': 'extended',\n    '[class.mat-mdc-extended-fab]': 'extended',\n  },\n  exportAs: 'matButton, matAnchor',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatFabAnchor extends MatAnchor {\n  private _options = inject<MatFabDefaultOptions>(MAT_FAB_DEFAULT_OPTIONS, {optional: true});\n\n  override _isFab = true;\n\n  @Input({transform: booleanAttribute}) extended: boolean;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n    this._options = this._options || defaults;\n    this.color = this._options!.color || defaults.color;\n  }\n}\n\n/**\n * Material Design mini floating action button (FAB) component for anchor elements. Anchor elements\n * are used to provide links for the user to navigate across different routes or pages.\n * See https://material.io/components/buttons-floating-action-button/\n */\n@Component({\n  selector: `a[mat-mini-fab]`,\n  templateUrl: 'button.html',\n  styleUrl: 'fab.css',\n  host: MAT_ANCHOR_HOST,\n  exportAs: 'matButton, matAnchor',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMiniFabAnchor extends MatAnchor {\n  private _options = inject<MatFabDefaultOptions>(MAT_FAB_DEFAULT_OPTIONS, {optional: true});\n\n  override _isFab = true;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n    this._options = this._options || defaults;\n    this.color = this._options!.color || defaults.color;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '../core';\nimport {MatAnchor, MatButton} from './button';\nimport {MatFabAnchor, MatFabButton, MatMiniFabAnchor, MatMiniFabButton} from './fab';\nimport {MatIconAnchor, MatIconButton} from './icon-button';\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    MatRippleModule,\n    MatAnchor,\n    MatButton,\n    MatIconAnchor,\n    MatMiniFabAnchor,\n    MatMiniFabButton,\n    MatIconButton,\n    MatFabAnchor,\n    MatFabButton,\n  ],\n  exports: [\n    MatAnchor,\n    MatButton,\n    MatIconAnchor,\n    MatIconButton,\n    MatMiniFabAnchor,\n    MatMiniFabButton,\n    MatFabAnchor,\n    MatFabButton,\n    MatCommonModule,\n  ],\n})\nexport class MatButtonModule {}\n"],
  "mappings": "mUASYA,EAAZ,SAAYA,EAAW,CACrBA,OAAAA,EAAAA,EAAA,UAAA,CAAA,EAAA,YACAA,EAAAA,EAAA,QAAA,CAAA,EAAA,UACAA,EAAAA,EAAA,WAAA,CAAA,EAAA,aACAA,EAAAA,EAAA,OAAA,CAAA,EAAA,SAJUA,CAKZ,EALYA,GAKX,CAAA,CAAA,EAyBYC,OAAS,CAKVC,UAEDC,QAEAC,OAEAC,qCATTC,MAAqBN,EAAYO,OAEjCC,YACUN,EAEDC,EAEAC,EAEAC,EAAuC,GAAK,CAN3C,KAASH,UAATA,EAED,KAAOC,QAAPA,EAEA,KAAMC,OAANA,EAEA,KAAoCC,qCAApCA,EAITI,SAAO,CACL,KAAKP,UAAUQ,cAAc,IAAI,EAEpC,EC7CKC,GAA+BC,EAAgC,CACnEC,QAAS,GACTC,QAAS,EACV,CAAA,EAGYC,OAAkB,CACrBC,QAAU,IAAIC,IAGtBC,WAAWC,EAAgBC,EAAcjB,EAAsBkB,EAA4B,CACzF,IAAMC,EAAmB,KAAKN,QAAQO,IAAIH,CAAI,EAE9C,GAAIE,EAAkB,CACpB,IAAME,EAAqBF,EAAiBC,IAAIpB,CAAO,EAEnDqB,EACFA,EAAmBC,IAAIJ,CAAO,EAE9BC,EAAiBI,IAAIvB,EAAS,IAAIwB,IAAI,CAACN,CAAO,CAAC,CAAC,OAGlD,KAAKL,QAAQU,IAAIN,EAAM,IAAIH,IAAI,CAAC,CAACd,EAAS,IAAIwB,IAAI,CAACN,CAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAE/DF,EAAOS,kBAAkB,IAAK,CAC5BC,SAASC,iBAAiBV,EAAM,KAAKW,sBAAuBpB,EAA4B,CAC1F,CAAC,EAKLqB,cAAcZ,EAAcjB,EAAsBkB,EAA4B,CAC5E,IAAMC,EAAmB,KAAKN,QAAQO,IAAIH,CAAI,EAE9C,GAAI,CAACE,EACH,OAGF,IAAME,EAAqBF,EAAiBC,IAAIpB,CAAO,EAElDqB,IAILA,EAAmBS,OAAOZ,CAAO,EAE7BG,EAAmBU,OAAS,GAC9BZ,EAAiBW,OAAO9B,CAAO,EAG7BmB,EAAiBY,OAAS,IAC5B,KAAKlB,QAAQiB,OAAOb,CAAI,EACxBS,SAASM,oBAAoBf,EAAM,KAAKW,sBAAuBpB,EAA4B,IAKvFoB,sBAAyBK,GAAgB,CAC/C,IAAMC,EAASC,EAAgBF,CAAK,EAEhCC,GACF,KAAKrB,QAAQO,IAAIa,EAAMG,IAAI,GAAGC,QAAQ,CAACC,EAAUtC,IAAW,EACtDA,IAAYkC,GAAUlC,EAAQuC,SAASL,CAAc,IACvDI,EAASD,QAAQnB,GAAWA,EAAQsB,YAAYP,CAAK,CAAC,CAE1D,CAAC,CAEL,CACD,ECnCYQ,EAA+B,CAC1CC,cAAe,IACfC,aAAc,KAOVC,GAA2B,IAG3BC,GAA+BpC,EAAgC,CACnEC,QAAS,GACTC,QAAS,EACV,CAAA,EAGKmC,GAAoB,CAAC,YAAa,YAAY,EAG9CC,GAAkB,CAAC,UAAW,aAAc,WAAY,aAAa,EAS9DC,IAAsB,IAAA,OAAtBA,CAAsB,4CAAtBA,EAAsB,EAAtB,OAAAC,UAAAC,EAAA,MAAAF,EAAsBG,UAAA,CAAA,CAAA,cAAA,CAAA,EAAAC,UAAA,CAAA,0BAAA,EAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAA,EAAAC,OAAA,CAAA,2jBAAA,EAAAC,cAAA,EAAAC,gBAAA,CAAA,CAAA,SAAtBZ,CAAsB,GAAA,EAStBa,QAAAA,CAAc,CAoCfC,QACAC,QAEAC,UArCFC,kBAGAC,gBAGAC,eAAiB,GAQjBC,eAAiB,IAAItD,IAGrBuD,2BAGAC,qBAGAC,2BAA6B,GAM7BC,eAEA,OAAOC,cAAgB,IAAI7D,EAEnCP,YACUyD,EACAC,EACRW,EACQV,EACRW,EAAmB,CAJX,KAAOb,QAAPA,EACA,KAAOC,QAAPA,EAEA,KAASC,UAATA,EAIJA,EAAUY,YACZ,KAAKX,kBAAoBY,EAAcH,CAAmB,GAGxDC,GACFA,EAASvD,IAAI0D,CAAsB,EAAEC,KAAK/B,EAAsB,EAUpEgC,aAAaC,EAAWC,EAAWjF,EAAuB,CAAA,EAAE,CAC1D,IAAMkF,EAAiB,KAAKX,eAC1B,KAAKA,gBAAkB,KAAKP,kBAAkBmB,sBAAqB,EAC/DC,EAAkBC,IAAA,GAAI7C,GAAiCxC,EAAOsF,WAEhEtF,EAAOuF,WACTP,EAAIE,EAAcM,KAAON,EAAcO,MAAQ,EAC/CR,EAAIC,EAAcQ,IAAMR,EAAcS,OAAS,GAGjD,IAAMC,EAAS5F,EAAO4F,QAAUC,GAAyBb,EAAGC,EAAGC,CAAa,EACtEY,EAAUd,EAAIE,EAAcM,KAC5BO,EAAUd,EAAIC,EAAcQ,IAC5BjD,EAAgB2C,EAAgB3C,cAEhCuD,EAASvE,SAASwE,cAAc,KAAK,EAC3CD,EAAOE,UAAU7E,IAAI,oBAAoB,EAEzC2E,EAAOG,MAAMX,KAAO,GAAGM,EAAUF,CAAM,KACvCI,EAAOG,MAAMT,IAAM,GAAGK,EAAUH,CAAM,KACtCI,EAAOG,MAAMR,OAAS,GAAGC,EAAS,CAAC,KACnCI,EAAOG,MAAMV,MAAQ,GAAGG,EAAS,CAAC,KAI9B5F,EAAOoG,OAAS,OAClBJ,EAAOG,MAAME,gBAAkBrG,EAAOoG,OAGxCJ,EAAOG,MAAMG,mBAAqB,GAAG7D,CAAa,KAElD,KAAKuB,kBAAkBuC,YAAYP,CAAM,EAMzC,IAAMQ,GAAiBC,OAAOC,iBAAiBV,CAAM,EAC/CW,GAAyBH,GAAeI,mBACxCC,GAAyBL,GAAeF,mBAOxCQ,EACJH,KAA2B,QAG3BE,KAA2B,MAC3BA,KAA2B,UAE1B3B,EAAcO,QAAU,GAAKP,EAAcS,SAAW,EAGnDoB,EAAY,IAAIlH,EAAU,KAAMmG,EAAQhG,EAAQ8G,CAAmC,EAMzFd,EAAOG,MAAMa,UAAY,mBAEzBD,EAAU7G,MAAQN,EAAYqH,UAEzBjH,EAAOkH,aACV,KAAK9C,2BAA6B2C,GAGpC,IAAII,EAA8C,KAIlD,MAAI,CAACL,IAAwCrE,GAAiB2C,EAAgB1C,eAC5E,KAAKoB,QAAQtC,kBAAkB,IAAK,CAClC,IAAM4F,GAAkBA,IAAK,CAEvBD,IACFA,EAAeE,cAAgB,MAEjCC,aAAaD,EAAa,EAC1B,KAAKE,wBAAwBR,CAAS,CACxC,EACMS,EAAqBA,IAAM,KAAKC,eAAeV,CAAS,EASxDM,GAAgBK,WAAWF,EAAoB/E,EAAgB,GAAG,EAExEuD,EAAOtE,iBAAiB,gBAAiB0F,EAAe,EAIxDpB,EAAOtE,iBAAiB,mBAAoB8F,CAAkB,EAC9DL,EAAiB,CAACC,gBAAAA,GAAiBI,mBAAAA,EAAoBH,cAAAA,EAAa,CACtE,CAAC,EAIH,KAAKlD,eAAe7C,IAAIyF,EAAWI,CAAc,GAI7CL,GAAuC,CAACrE,IAC1C,KAAK8E,wBAAwBR,CAAS,EAGjCA,EAITzG,cAAcyG,EAAoB,CAEhC,GAAIA,EAAU7G,QAAUN,EAAY+H,YAAcZ,EAAU7G,QAAUN,EAAYO,OAChF,OAGF,IAAMyH,EAAWb,EAAUhH,QACrBqF,EAAkBC,IAAA,GAAI7C,GAAiCuE,EAAU/G,OAAOsF,WAI9EsC,EAASzB,MAAMG,mBAAqB,GAAGlB,EAAgB1C,YAAY,KACnEkF,EAASzB,MAAM0B,QAAU,IACzBd,EAAU7G,MAAQN,EAAY+H,YAI1BZ,EAAU9G,sCAAwC,CAACmF,EAAgB1C,eACrE,KAAK6E,wBAAwBR,CAAS,EAK1Ce,YAAU,CACR,KAAKC,kBAAiB,EAAG3F,QAAQ4D,GAAUA,EAAO3F,QAAO,CAAE,EAI7D2H,yBAAuB,CACrB,KAAKD,kBAAiB,EAAG3F,QAAQ4D,GAAS,CACnCA,EAAOhG,OAAOkH,YACjBlB,EAAO3F,QAAO,CAElB,CAAC,EAIH4H,mBAAmBxD,EAA0D,CAC3E,IAAM1E,EAAU6E,EAAcH,CAAmB,EAE7C,CAAC,KAAKV,UAAUY,WAAa,CAAC5E,GAAWA,IAAY,KAAKkE,kBAK9D,KAAKiE,qBAAoB,EACzB,KAAKjE,gBAAkBlE,EAIvB8C,GAAkBT,QAAQD,GAAO,CAC/ByB,EAAeY,cAAc1D,WAAW,KAAKgD,QAAS3B,EAAMpC,EAAS,IAAI,CAC3E,CAAC,GAOHwC,YAAYP,EAAY,CAClBA,EAAMG,OAAS,YACjB,KAAKgG,aAAanG,CAAmB,EAC5BA,EAAMG,OAAS,aACxB,KAAKiG,cAAcpG,CAAmB,EAEtC,KAAKqG,aAAY,EAMd,KAAK/D,6BAMR,KAAKR,QAAQtC,kBAAkB,IAAK,CAClCsB,GAAgBV,QAAQD,GAAO,CAC7B,KAAK8B,gBAAiBvC,iBAAiBS,EAAM,KAAMS,EAA4B,CACjF,CAAC,CACH,CAAC,EAED,KAAK0B,2BAA6B,IAK9BiD,wBAAwBR,EAAoB,CAC9CA,EAAU7G,QAAUN,EAAYqH,UAClC,KAAKqB,wBAAwBvB,CAAS,EAC7BA,EAAU7G,QAAUN,EAAY+H,YACzC,KAAKF,eAAeV,CAAS,EAQzBuB,wBAAwBvB,EAAoB,CAClD,IAAMwB,EAA8BxB,IAAc,KAAK3C,2BACjD,CAAC8C,WAAAA,CAAU,EAAIH,EAAU/G,OAE/B+G,EAAU7G,MAAQN,EAAY4I,QAM1B,CAACtB,IAAe,CAACqB,GAA+B,CAAC,KAAKrE,iBACxD6C,EAAU1G,QAAO,EAKboH,eAAeV,EAAoB,CACzC,IAAMI,EAAiB,KAAKhD,eAAehD,IAAI4F,CAAS,GAAK,KAC7D,KAAK5C,eAAetC,OAAOkF,CAAS,EAG/B,KAAK5C,eAAerC,OACvB,KAAKyC,eAAiB,MAKpBwC,IAAc,KAAK3C,6BACrB,KAAKA,2BAA6B,MAGpC2C,EAAU7G,MAAQN,EAAYO,OAC1BgH,IAAmB,OACrBJ,EAAUhH,QAAQgC,oBAAoB,gBAAiBoF,EAAeC,eAAe,EACrFL,EAAUhH,QAAQgC,oBAAoB,mBAAoBoF,EAAeK,kBAAkB,EACvFL,EAAeE,gBAAkB,MACnCC,aAAaH,EAAeE,aAAa,GAG7CN,EAAUhH,QAAQ0I,OAAM,EAIlBN,aAAanG,EAAiB,CAGpC,IAAM0G,EAAkBC,GAAgC3G,CAAK,EACvD4G,EACJ,KAAKvE,sBACLwE,KAAKC,IAAG,EAAK,KAAKzE,qBAAuB1B,GAEvC,CAAC,KAAKkB,QAAQkF,gBAAkB,CAACL,GAAmB,CAACE,IACvD,KAAK1E,eAAiB,GACtB,KAAKa,aAAa/C,EAAMgH,QAAShH,EAAMiH,QAAS,KAAKpF,QAAQqF,YAAY,GAKrEd,cAAcpG,EAAiB,CACrC,GAAI,CAAC,KAAK6B,QAAQkF,gBAAkB,CAACI,GAAiCnH,CAAK,EAAG,CAI5E,KAAKqC,qBAAuBwE,KAAKC,IAAG,EACpC,KAAK5E,eAAiB,GAItB,IAAMkF,EAAUpH,EAAMqH,eAItB,GAAID,EACF,QAASE,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAClC,KAAKvE,aAAaqE,EAAQE,CAAC,EAAEN,QAASI,EAAQE,CAAC,EAAEL,QAAS,KAAKpF,QAAQqF,YAAY,GAOnFb,cAAY,CACb,KAAKnE,iBAIV,KAAKA,eAAiB,GAGtB,KAAK6D,kBAAiB,EAAG3F,QAAQ4D,GAAS,CAGxC,IAAMwD,EACJxD,EAAO9F,QAAUN,EAAY4I,SAC5BxC,EAAOhG,OAAOyJ,sBAAwBzD,EAAO9F,QAAUN,EAAYqH,UAElE,CAACjB,EAAOhG,OAAOkH,YAAcsC,GAC/BxD,EAAO3F,QAAO,CAElB,CAAC,GAGK0H,mBAAiB,CACvB,OAAO2B,MAAMC,KAAK,KAAKxF,eAAeyF,KAAI,CAAE,EAI9C1B,sBAAoB,CAClB,IAAM2B,EAAU,KAAK5F,gBAEjB4F,IACFhH,GAAkBT,QAAQD,GACxByB,EAAeY,cAAc5C,cAAcO,EAAM0H,EAAS,IAAI,CAAC,EAG7D,KAAKvF,6BACPxB,GAAgBV,QAAQD,GACtB0H,EAAQ9H,oBAAoBI,EAAM,KAAMS,EAA4B,CAAC,EAGvE,KAAK0B,2BAA6B,OAS1C,SAASuB,GAAyBb,EAAWC,EAAW6E,EAAa,CACnE,IAAMC,EAAQC,KAAKC,IAAID,KAAKE,IAAIlF,EAAI8E,EAAKtE,IAAI,EAAGwE,KAAKE,IAAIlF,EAAI8E,EAAKK,KAAK,CAAC,EAClEC,EAAQJ,KAAKC,IAAID,KAAKE,IAAIjF,EAAI6E,EAAKpE,GAAG,EAAGsE,KAAKE,IAAIjF,EAAI6E,EAAKO,MAAM,CAAC,EACxE,OAAOL,KAAKM,KAAKP,EAAQA,EAAQK,EAAQA,CAAK,CAChD,KCvbaG,EAA4B,IAAIC,EAC3C,2BAA2B,EAWhBC,IAAS,IAAA,OAATA,CAAS,CACZC,YAAcC,EAAgCC,CAAU,EACxDC,eAAiBF,EAAOG,EAAuB,CAACC,SAAU,EAAI,CAAC,EAG9C3E,MAGI4E,UAMDzF,SAOFK,OAAiB,EAOdN,UAM7B,IACI2F,UAAQ,CACV,OAAO,KAAKC,UAEd,IAAID,SAASE,EAAc,CACrBA,GACF,KAAKnD,wBAAuB,EAE9B,KAAKkD,UAAYC,EACjB,KAAKC,6BAA4B,EAE3BF,UAAqB,GAM7B,IACIrB,SAAO,CACT,OAAO,KAAKwB,UAAY,KAAKX,YAAYY,cAE3C,IAAIzB,QAAQA,EAAoB,CAC9B,KAAKwB,SAAWxB,EAChB,KAAKuB,6BAA4B,EAE3BC,SAGAE,gBAGAC,eAGRC,eAA0B,GAI1BrL,aAAA,CACE,IAAMW,EAAS4J,EAAOe,CAAM,EACtBC,EAAWhB,EAAOiB,CAAQ,EAC1BC,EAAgBlB,EAA4BJ,EAA2B,CAACQ,SAAU,EAAI,CAAC,EACvFrG,EAAWiG,EAAOmB,CAAQ,EAIhC,KAAKN,eAAiBK,GAAiB,CAAA,EACvC,KAAKN,gBAAkB,IAAI3H,EAAe,KAAM7C,EAAQ,KAAK2J,YAAaiB,EAAUjH,CAAQ,EAG9FqH,UAAQ,CACN,KAAKN,eAAiB,GACtB,KAAKL,6BAA4B,EAGnCY,aAAW,CACT,KAAKT,gBAAgBrD,qBAAoB,EAI3CJ,YAAU,CACR,KAAKyD,gBAAgBzD,WAAU,EAIjCE,yBAAuB,CACrB,KAAKuD,gBAAgBvD,wBAAuB,EAO9C,IAAIkB,cAAY,CACd,MAAO,CACL3D,SAAU,KAAKA,SACfK,OAAQ,KAAKA,OACbQ,MAAO,KAAKA,MACZd,UAAWD,MAAA,GACN,KAAKmG,eAAelG,WACnB,KAAKuF,iBAAmB,iBAAmB,CAACpI,cAAe,EAAGC,aAAc,CAAC,EAAI,CAAA,GAClF,KAAK4C,WAEVmE,qBAAsB,KAAK+B,eAAe/B,sBAQ9C,IAAIV,gBAAc,CAChB,OAAO,KAAKkC,UAAY,CAAC,CAAC,KAAKO,eAAeP,SAIxCG,8BAA4B,CAC9B,CAAC,KAAKH,UAAY,KAAKQ,gBACzB,KAAKF,gBAAgBtD,mBAAmB,KAAK4B,OAAO,EAqBxDoC,OAAOC,EAAkCjH,EAAY,EAAGjF,EAAqB,CAC3E,OAAI,OAAOkM,GAAc,SAChB,KAAKX,gBAAgBxG,aAAamH,EAAWjH,EAAGI,IAAA,GAAI,KAAK6D,cAAiBlJ,EAAO,EAEjF,KAAKuL,gBAAgBxG,aAAa,EAAG,EAAGM,IAAA,GAAI,KAAK6D,cAAiBgD,EAAU,6CA7J5EzB,EAAS,2BAATA,EAASvH,UAAA,CAAA,CAAA,GAAA,aAAA,EAAA,EAAA,CAAA,GAAA,YAAA,EAAA,CAAA,EAAAC,UAAA,CAAA,EAAA,YAAA,EAAAgJ,SAAA,EAAAC,aAAA,SAAA7I,EAAAC,EAAA,CAAAD,EAAA,uCAAT,CAAS,EAAA8I,OAAA,CAAAjG,MAAA,CAAA,EAAA,iBAAA,OAAA,EAAA4E,UAAA,CAAA,EAAA,qBAAA,WAAA,EAAAzF,SAAA,CAAA,EAAA,oBAAA,UAAA,EAAAK,OAAA,CAAA,EAAA,kBAAA,QAAA,EAAAN,UAAA,CAAA,EAAA,qBAAA,WAAA,EAAA2F,SAAA,CAAA,EAAA,oBAAA,UAAA,EAAApB,QAAA,CAAA,EAAA,mBAAA,SAAA,CAAA,EAAAyC,SAAA,CAAA,WAAA,CAAA,CAAA,SAAT7B,CAAS,GAAA,ECrCtB,IAAM8B,GAAuB,CAACC,QAAS,EAAI,EAOrCC,GAA0B,CAAC,QAAS,YAAa,aAAc,YAAY,EAG3EC,EAAyB,kCAGzBC,GAAqB,+BAGrBC,GAAoB,6BAGpBC,EAAoB,6BAWbC,IAAe,IAAA,OAAfA,CAAe,CAClBC,UAAYC,EAAOC,EAAQ,EAC3BC,eAAiBF,EAAOG,EAAuB,CAACC,SAAU,EAAI,CAAC,EAC/DC,qBAAuBL,EAAOM,EAA2B,CAACF,SAAU,EAAI,CAAC,EACzEG,UAAYP,EAAOQ,CAAQ,EAC3BC,QAAUT,EAAOU,CAAM,EACvBC,UAAYX,EAAOY,CAAQ,EAC3BC,eACAC,OAAS,IAAIC,IAKrBC,aAAA,CACE,IAAMC,EAAWjB,EAAOkB,EAAgB,EAAEC,eAAe,KAAM,IAAI,EAEnE,KAAKN,eAAiB,KAAKJ,QAAQW,kBAAkB,IAC5C3B,GAAwB4B,IAAIC,GACjCC,GACEN,EACA,KAAKlB,UACLuB,EACA,KAAKE,eACLjC,EAAoB,CACrB,CAEJ,EAGHkC,aAAW,CACT,IAAMC,EAAQ,KAAKZ,OAAOa,KAAI,EAE9B,QAAWC,KAAQF,EACjB,KAAKG,cAAcD,CAAI,EAGzB,KAAKf,eAAeiB,QAAQC,GAAWA,EAAO,CAAE,EASlDC,gBACEJ,EACAK,EAIC,CAGDL,EAAKM,aAAaxC,EAAwB,KAAKW,sBAAsB8B,WAAa,EAAE,GAGhFF,EAAOG,WAAa,CAACR,EAAKS,aAAa1C,EAAkB,IAC3DiC,EAAKM,aAAavC,GAAoBsC,EAAOG,WAAa,EAAE,EAI1DH,EAAOK,UACTV,EAAKM,aAAatC,GAAmB,EAAE,EAGrCqC,EAAOM,UACTX,EAAKM,aAAarC,EAAmB,EAAE,EAK3C2C,YAAYZ,EAAmBW,EAAiB,CAC9C,IAAME,EAAS,KAAK3B,OAAO4B,IAAId,CAAI,EAG/Ba,GACFA,EAAOE,OAAOC,eAAiBL,EAE3B,CAACA,GAAY,CAACE,EAAOI,iBACvBJ,EAAOI,eAAiB,GACxBJ,EAAOxB,SAAS6B,mBAAmBlB,CAAI,IAEhCW,EAGTX,EAAKM,aAAarC,EAAmB,EAAE,EAEvC+B,EAAKmB,gBAAgBlD,CAAiB,EAQlC2B,eAAkBwB,GAAgB,CACxC,IAAMC,EAAcC,EAAgBF,CAAK,EAEzC,GAAIC,aAAuBE,YAAa,CAEtC,IAAMC,EAAUH,EAAYI,QAC1B,IAAI3D,CAAsB,KAAK,KAAKW,sBAAsB8B,WAAa,EAAE,IAAI,EAG3EiB,GACF,KAAKE,cAAcF,CAAsB,EAG/C,EAGQE,cAAc1B,EAAiB,CACrC,GAAI,CAAC,KAAK7B,WAAa,KAAKe,OAAOyC,IAAI3B,CAAI,EACzC,OAIFA,EAAK4B,cAAc,aAAa,GAAGC,OAAM,EACzC,IAAMC,EAAW,KAAK3D,UAAU4D,cAAc,MAAM,EACpDD,EAASE,UAAUC,IAAI,aAAcjC,EAAKkC,aAAanE,EAAkB,CAAE,EAC3EiC,EAAKmC,OAAOL,CAAQ,EAEpB,IAAMM,EAAmB,KAAK9D,iBAAmB,iBAC3C+D,EAAgB,KAAK5D,qBACrB6D,EAAgBF,EAClB,EACAC,GAAeE,WAAWD,eAAiBE,EAA6BF,cACtEG,EAAeL,EACjB,EACAC,GAAeE,WAAWE,cAAgBD,EAA6BC,aACrE1B,EAAuB,CAC3BC,eACEoB,GAAoBC,GAAe1B,UAAYX,EAAKS,aAAaxC,CAAiB,EACpFyE,aAAc,CACZhC,SAAUV,EAAKS,aAAazC,EAAiB,EAC7C2E,qBAAsBN,GAAeM,qBACrCJ,UAAW,CACTD,cAAAA,EACAG,aAAAA,CACD,CACF,GAGGpD,EAAW,IAAIuD,EACnB7B,EACA,KAAKlC,QACLiD,EACA,KAAKnD,UACL,KAAKI,SAAS,EAEVkC,EAAiB,CAACF,EAAOC,eAE3BC,GACF5B,EAAS6B,mBAAmBlB,CAAI,EAGlC,KAAKd,OAAO2D,IAAI7C,EAAM,CACpBe,OAAAA,EACA1B,SAAAA,EACA4B,eAAAA,CACD,CAAA,EAEDjB,EAAKmB,gBAAgBrD,CAAsB,EAG7CmC,cAAcD,EAAiB,CAC7B,IAAMa,EAAS,KAAK3B,OAAO4B,IAAId,CAAI,EAE/Ba,IACFA,EAAOxB,SAASyD,qBAAoB,EACpC,KAAK5D,OAAO6D,OAAO/C,CAAI,8CA3KhB9B,EAAe,EAAf,OAAA8E,WAAAC,GAAA,OAAA/E,EAAegF,QAAfhF,EAAeiF,UAAAC,WADH,MAAM,CAAA,SAClBlF,CAAe,GAAA,EChD5B,IAWamF,IAAuB,IAAA,OAAvBA,CAAuB,4CAAvBA,EAAuB,EAAvB,OAAAC,UAAAC,EAAA,MAAAF,EAAuBG,UAAA,CAAA,CAAA,mBAAA,CAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAA,EAAAC,OAAA,CAAA,4jBAAA,EAAAC,cAAA,EAAAC,gBAAA,CAAA,CAAA,SAAvBX,CAAuB,GAAA,ECepC,IAAAY,GAAA,CAAA,kBAAA,EAAA,EAAAC,GAAA,CAAA,GAAA,MACaC,GAAoB,IAAIC,EAAgC,mBAAmB,EAoBxF,IAAMC,GAA4E,CAChF,CACEC,UAAW,aACXC,WAAY,CAAC,aAAc,gBAAgB,CAC5C,EACD,CACED,UAAW,kBACXC,WAAY,CAAC,aAAc,yBAA0B,2BAA2B,CACjF,EACD,CACED,UAAW,oBACXC,WAAY,CAAC,aAAc,qBAAsB,uBAAuB,CACzE,EACD,CACED,UAAW,qBACXC,WAAY,CAAC,aAAc,uBAAwB,yBAAyB,CAC7E,EACD,CACED,UAAW,UACXC,WAAY,CAAC,UAAW,mBAAoB,aAAa,CAC1D,EACD,CACED,UAAW,eACXC,WAAY,CAAC,UAAW,mBAAoB,gBAAiB,kBAAkB,CAChF,EACD,CACED,UAAW,kBACXC,WAAY,CAAC,kBAAmB,qBAAqB,CACtD,CAAA,EAKUC,GAAa,IAAA,OAAbA,CAAa,CACxBC,YAAcC,EAAOC,CAAU,EAC/BC,QAAUF,EAAOG,CAAM,EACvBC,eAAiBJ,EAAOK,EAAuB,CAACC,SAAU,EAAI,CAAC,EAE9CC,cAAgBP,EAAOQ,EAAY,EAM1CC,cAAiCT,EAAOU,EAAe,EAGvDC,OAAS,GASVC,MAGT,IACIC,eAAa,CACf,OAAO,KAAKC,eAEd,IAAID,cAAcE,EAAU,CAC1B,KAAKD,eAAiBC,EACtB,KAAKC,sBAAqB,EAEpBF,eAA0B,GAGlC,IACIG,UAAQ,CACV,OAAO,KAAKC,UAEd,IAAID,SAASF,EAAU,CACrB,KAAKG,UAAYH,EACjB,KAAKC,sBAAqB,EAEpBE,UAAqB,GAI7BC,aAgBAC,oBAIAC,aAAA,CACErB,EAAOsB,CAAsB,EAAEC,KAAKC,EAAuB,EAC3D,IAAMC,EAASzB,EAAO0B,GAAmB,CAACpB,SAAU,EAAI,CAAC,EACnDqB,EAAU,KAAK5B,YAAY6B,cAC3BC,EAAaF,EAAwBE,UAE3C,KAAKT,oBAAsBK,GAAQL,qBAAuB,GAC1D,KAAKR,MAAQa,GAAQb,OAAS,KAC9B,KAAKH,eAAeqB,gBAAgBH,EAAS,CAACI,UAAW,uBAAuB,CAAC,EAIjF,OAAW,CAACnC,UAAAA,EAAWC,WAAAA,CAAU,IAAKF,GAChCgC,EAAQK,aAAapC,CAAS,GAChCiC,EAAUI,IAAI,GAAGpC,CAAU,EAKjCqC,iBAAe,CACb,KAAK3B,cAAc4B,QAAQ,KAAKpC,YAAa,EAAI,EAGnDqC,aAAW,CACT,KAAK7B,cAAc8B,eAAe,KAAKtC,WAAW,EAClD,KAAKU,eAAe6B,cAAc,KAAKvC,YAAY6B,aAAa,EAIlEW,MAAMC,EAAsB,UAAWC,EAAsB,CACvDD,EACF,KAAKjC,cAAcmC,SAAS,KAAK3C,YAAY6B,cAAeY,EAAQC,CAAO,EAE3E,KAAK1C,YAAY6B,cAAcW,MAAME,CAAO,EAItCE,kBAAgB,CACxB,OAAI,KAAKxB,cAAgB,KAChB,KAAKA,aAGP,KAAKF,UAAY,KAAKG,oBAAsB,GAAO,KAGlDwB,uBAAqB,CAC7B,OAAO,KAAKxB,qBAAuB,CAAC,KAAKH,SAAW,KAAO,GAGrDD,uBAAqB,CAC3B,KAAKP,eAAeoC,YAClB,KAAK9C,YAAY6B,cACjB,KAAKf,eAAiB,KAAKI,QAAQ,6CAzH5BnB,EAAa,EAAb,OAAAgD,UAAAC,EAAA,MAAAjD,EAAakD,OAAA,CAAApC,MAAA,QAAAC,cAAA,CAAA,EAAA,gBAAA,gBA0BLoC,CAAgB,EAAAhC,SAAA,CAAA,EAAA,WAAA,WAWhBgC,CAAgB,EAAA9B,aAAA,CAAA,EAAA,gBAAA,eAWhB8B,CAAgB,EAAA7B,oBAAA,CAAA,EAAA,sBAAA,sBAgBhB6B,CAAgB,CAAA,CAAA,CAAA,SAhExBnD,CAAa,GAAA,EC/E1B,IAcaoD,IAAc,IAAA,CAArB,MAAOA,UAAsBC,CAAa,CAG9CC,aAAA,CACE,MAAK,EACL,KAAKC,cAAcC,gBAAgB,KAAKC,YAAYC,cAAe,CAACC,SAAU,EAAI,CAAC,6CAL1EP,EAAa,EAAb,OAAAQ,UAAAC,EAAA,MAAAT,EAAaU,UAAA,CAAA,CAAA,SAAA,kBAAA,EAAA,CAAA,EAAAC,SAAA,GAAAC,aAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,iBAAbC,EAAAC,sBAAa,CAAA,EAAA,gBAAbD,EAAAE,iBAAa,CAAA,YAAb,OAAaF,EAAAG,MAAA,EAAb,wCAAA,EAAa,sCAAAH,EAAAI,mBAAb,EAAa,0BAAAJ,EAAAK,iBAAA,gBAAb,EAAa,eAAA,CAAAL,EAAAG,KAAb,EAAa,sBAAb,EAAA,EAAa,EAAAG,SAAA,CAAA,WAAA,EAAAC,SAAA,CAAAC,CAAA,mOCzB1B,KAAA,cAAA,EAAA,EAAA,OAAA,CAAA,EAAA,EAAAC,OAAA,CAAA,+vHAAA,gVAAA,EAAAC,cAAA,EAAAC,gBAAA,CAAA,CAAA,SDyBazB,CAAc,GAAA,MELd0B,IAAe,IAAA,OAAfA,CAAe,4CAAfA,EAAe,EAAf,OAAAC,UAAAC,EAAA,MAAAF,CAAe,CAAA,+BAHhBG,EACWA,CAAe,CAAA,CAAA,SAEzBH,CAAe,GAAA,ECT5B,IAAAI,GAAA,CAAA,aAAA,EAAA,EAAAC,GAAA,CAAA,CAAA,CAAA,GAAA,EAAA,iBAAA,EAAA,kBAAA,EAAA,EAAA,CAAA,WAAA,EAAA,kBAAA,EAAA,EAAA,CAAA,GAAA,gBAAA,GAAA,EAAA,kBAAA,EAAA,CAAA,EAAA,IAAA,CAAA,CAAA,GAAA,kBAAA,GAAA,EAAA,gBAAA,EAAA,CAAA,WAAA,kBAAA,EAAA,EAAA,CAAA,GAAA,gBAAA,GAAA,kBAAA,EAAA,CAAA,CAAA,EAAAC,GAAA,CAAA,kHAAA,IAAA,+FAAA,EAAA,IAAAC,GAAA,CAAA,UAAA,EAAA,EAAAC,GAAA,CAAA,eAAA,EAAA,EAAAC,GAAA,wlSAqBaC,IAAU,IAAA,CAAjB,MAAOA,UAAkBC,CAAa,gEAA/BD,CAAS,IAAAE,GAATF,CAAS,CAAA,CAAA,GAAA,EAAT,OAAAG,UAAAC,EAAA,MAAAJ,EAASK,UAAA,CAAA,CAAA,SAAA,aAAA,EAAA,EAAA,CAAA,SAAA,oBAAA,EAAA,EAAA,CAAA,SAAA,kBAAA,EAAA,EAAA,CAAA,SAAA,qBAAA,EAAA,CAAA,EAAAC,SAAA,GAAAC,aAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,iBAATC,EAAAC,sBAAS,CAAA,EAAA,gBAATD,EAAAE,iBAAS,CAAA,YAAT,OAASF,EAAAG,MAAA,EAAT,wCAAA,EAAS,sCAAAH,EAAAI,mBAAT,EAAS,0BAAAJ,EAAAK,iBAAA,gBAAT,EAAS,eAAA,CAAAL,EAAAG,KAAT,EAAS,sBAAT,EAAA,EAAS,EAAAG,SAAA,CAAA,WAAA,EAAAC,SAAA,CAAAC,CAAA,mOChCtB,KAAA,cAAA,OAAA,IAAA,OAAA,cAAA,EAAA,EAAA,OAAA,CAAA,GAAAT,EAAA,mCAAA,EAAA,kBAAAC,EAAAS,MAAA,CAAA,EAAAC,OAAA,CAAA,+8jBAAA,gVAAA,EAAAC,cAAA,EAAAC,gBAAA,CAAA,CAAA,SDgCarB,CAAU,GAAA,MEGVsB,GAA0B,IAAIC,EACzC,8BACA,CACEC,WAAY,OACZC,QAASC,EACV,CAAA,WAQaA,IAA+B,CAC7C,MAAO,CAELC,MAAO,SAEX,CAGA,IAAMC,EAAWF,GAA+B,EAsBnCG,IAAa,IAAA,CAApB,MAAOA,UAAqBC,CAAa,CACrCC,SAAWC,EAA6BV,GAAyB,CAACW,SAAU,EAAI,CAAC,EAEhFC,OAAS,GAEoBC,SAItCC,aAAA,CACE,MAAK,EACL,KAAKL,SAAW,KAAKA,UAAYH,EACjC,KAAKD,MAAQ,KAAKI,SAAUJ,OAASC,EAASD,iDAZrCE,EAAY,2BAAZA,EAAYQ,UAAA,CAAA,CAAA,SAAA,UAAA,EAAA,CAAA,EAAAC,SAAA,GAAAC,aAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,iBAAZC,EAAAC,sBAAY,CAAA,EAAA,gBAAZD,EAAAE,iBAAY,CAAA,YAAZ,OAAYF,EAAAd,MAAA,EAAZ,wCAAA,EAAY,sCAAAc,EAAAG,mBAAZ,EAAY,0BAAAH,EAAAI,iBAAA,gBAAZ,EAAY,eAAA,CAAAJ,EAAAd,KAAZ,EAAY,sBAAZ,EAAA,EAAY,oBAAAc,EAAAN,QAAZ,EAAY,uBAAAM,EAAAN,QAAZ,EAAY,EAAAW,OAAA,CAAAX,SAAA,CAAA,EAAA,WAAA,WAKJY,CAAgB,CAAA,EAAAC,SAAA,CAAA,WAAA,EAAAC,SAAA,CAAAC,CAAA,mODnFrC,KAAA,cAAA,OAAA,IAAA,OAAA,cAAA,EAAA,EAAA,OAAA,CAAA,GAAAV,EAAA,mCAAA,EAAA,kBAAAC,EAAAP,MAAA,CAAA,EAAAiB,OAAA,CAAA,ulSAAA,EAAAC,cAAA,EAAAC,gBAAA,CAAA,CAAA,SC8EaxB,CAAa,GAAA,EA8BbyB,IAAiB,IAAA,CAAxB,MAAOA,UAAyBxB,CAAa,CACzCC,SAAWC,EAA6BV,GAAyB,CAACW,SAAU,EAAI,CAAC,EAEhFC,OAAS,GAIlBE,aAAA,CACE,MAAK,EACL,KAAKL,SAAW,KAAKA,UAAYH,EACjC,KAAKD,MAAQ,KAAKI,SAAUJ,OAASC,EAASD,iDAVrC2B,EAAgB,EAAhB,OAAAC,UAAAC,EAAA,MAAAF,EAAgBjB,UAAA,CAAA,CAAA,SAAA,eAAA,EAAA,CAAA,EAAAC,SAAA,GAAAC,aAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,iBAAhBC,EAAAC,sBAAgB,CAAA,EAAA,gBAAhBD,EAAAE,iBAAgB,CAAA,YAAhB,OAAAF,EAAAd,MAAgB,EAAhB,wCAAA,EAAgB,sCAAAc,EAAAG,mBAAhB,EAAgB,0BAAAH,EAAAI,iBAAA,gBAAhB,EAAgB,eAAA,CAAAJ,EAAAd,KAAhB,EAAgB,sBAAhB,EAAA,EAAgB,EAAAqB,SAAA,CAAA,WAAA,EAAAC,SAAA,CAAAC,CAAA,mOD5G7B,KAAA,cAAA,OAAA,IAAA,OAAA,cAAA,EAAA,EAAA,OAAA,CAAA,GAAAV,EAAA,mCAAA,EAAA,kBAAAC,EAAAP,MAAA,CAAA,EAAAiB,OAAA,CAAAM,EAAA,EAAAL,cAAA,EAAAC,gBAAA,CAAA,CAAA,SC4GaC,CAAiB,GAAA,MCrEjBI,IAAe,IAAA,OAAfA,CAAe,4CAAfA,EAAe,EAAf,OAAAC,UAAAC,EAAA,MAAAF,CAAe,CAAA,EAAf,OAAAG,UAAAC,EAAA,UAvBTC,EACAC,GAmBAD,CAAe,CAAA,CAAA,SAGNL,CAAe,GAAA",
  "names": ["RippleState", "RippleRef", "_renderer", "element", "config", "_animationForciblyDisabledThroughCss", "state", "HIDDEN", "constructor", "fadeOut", "fadeOutRipple", "passiveCapturingEventOptions$1", "normalizePassiveListenerOptions", "passive", "capture", "RippleEventManager", "_events", "Map", "addHandler", "ngZone", "name", "handler", "handlersForEvent", "get", "handlersForElement", "add", "set", "Set", "runOutsideAngular", "document", "addEventListener", "_delegateEventHandler", "removeHandler", "delete", "size", "removeEventListener", "event", "target", "_getEventTarget", "type", "forEach", "handlers", "contains", "handleEvent", "defaultRippleAnimationConfig", "enterDuration", "exitDuration", "ignoreMouseEventsTimeout", "passiveCapturingEventOptions", "pointerDownEvents", "pointerUpEvents", "_MatRippleStylesLoader", "\u0275cmp", "\u0275\u0275defineComponent", "selectors", "hostAttrs", "decls", "vars", "template", "rf", "ctx", "styles", "encapsulation", "changeDetection", "RippleRenderer", "_target", "_ngZone", "_platform", "_containerElement", "_triggerElement", "_isPointerDown", "_activeRipples", "_mostRecentTransientRipple", "_lastTouchStartEvent", "_pointerUpEventsRegistered", "_containerRect", "_eventManager", "elementOrElementRef", "injector", "isBrowser", "coerceElement", "_CdkPrivateStyleLoader", "load", "fadeInRipple", "x", "y", "containerRect", "getBoundingClientRect", "animationConfig", "__spreadValues", "animation", "centered", "left", "width", "top", "height", "radius", "distanceToFurthestCorner", "offsetX", "offsetY", "ripple", "createElement", "classList", "style", "color", "backgroundColor", "transitionDuration", "appendChild", "computedStyles", "window", "getComputedStyle", "userTransitionProperty", "transitionProperty", "userTransitionDuration", "animationForciblyDisabledThroughCss", "rippleRef", "transform", "FADING_IN", "persistent", "eventListeners", "onTransitionEnd", "fallbackTimer", "clearTimeout", "_finishRippleTransition", "onTransitionCancel", "_destroyRipple", "setTimeout", "FADING_OUT", "rippleEl", "opacity", "fadeOutAll", "_getActiveRipples", "fadeOutAllNonPersistent", "setupTriggerEvents", "_removeTriggerEvents", "_onMousedown", "_onTouchStart", "_onPointerUp", "_startFadeOutTransition", "isMostRecentTransientRipple", "VISIBLE", "remove", "isFakeMousedown", "isFakeMousedownFromScreenReader", "isSyntheticEvent", "Date", "now", "rippleDisabled", "clientX", "clientY", "rippleConfig", "isFakeTouchstartFromScreenReader", "touches", "changedTouches", "i", "length", "isVisible", "terminateOnPointerUp", "Array", "from", "keys", "trigger", "rect", "distX", "Math", "max", "abs", "right", "distY", "bottom", "sqrt", "MAT_RIPPLE_GLOBAL_OPTIONS", "InjectionToken", "MatRipple", "_elementRef", "inject", "ElementRef", "_animationMode", "ANIMATION_MODULE_TYPE", "optional", "unbounded", "disabled", "_disabled", "value", "_setupTriggerEventsIfEnabled", "_trigger", "nativeElement", "_rippleRenderer", "_globalOptions", "_isInitialized", "NgZone", "platform", "Platform", "globalOptions", "Injector", "ngOnInit", "ngOnDestroy", "launch", "configOrX", "hostVars", "hostBindings", "inputs", "exportAs", "eventListenerOptions", "capture", "rippleInteractionEvents", "matRippleUninitialized", "matRippleClassName", "matRippleCentered", "matRippleDisabled", "MatRippleLoader", "_document", "inject", "DOCUMENT", "_animationMode", "ANIMATION_MODULE_TYPE", "optional", "_globalRippleOptions", "MAT_RIPPLE_GLOBAL_OPTIONS", "_platform", "Platform", "_ngZone", "NgZone", "_injector", "Injector", "_eventCleanups", "_hosts", "Map", "constructor", "renderer", "RendererFactory2", "createRenderer", "runOutsideAngular", "map", "name", "_bindEventWithOptions", "_onInteraction", "ngOnDestroy", "hosts", "keys", "host", "destroyRipple", "forEach", "cleanup", "configureRipple", "config", "setAttribute", "namespace", "className", "hasAttribute", "centered", "disabled", "setDisabled", "ripple", "get", "target", "rippleDisabled", "hasSetUpEvents", "setupTriggerEvents", "removeAttribute", "event", "eventTarget", "_getEventTarget", "HTMLElement", "element", "closest", "_createRipple", "has", "querySelector", "remove", "rippleEl", "createElement", "classList", "add", "getAttribute", "append", "isNoopAnimations", "globalOptions", "enterDuration", "animation", "defaultRippleAnimationConfig", "exitDuration", "rippleConfig", "terminateOnPointerUp", "RippleRenderer", "set", "_removeTriggerEvents", "delete", "\u0275prov", "\u0275\u0275defineInjectable", "factory", "\u0275fac", "providedIn", "_StructuralStylesLoader", "\u0275cmp", "\u0275\u0275defineComponent", "selectors", "decls", "vars", "template", "rf", "ctx", "styles", "encapsulation", "changeDetection", "_c0", "_c1", "MAT_BUTTON_CONFIG", "InjectionToken", "HOST_SELECTOR_MDC_CLASS_PAIR", "attribute", "mdcClasses", "MatButtonBase", "_elementRef", "inject", "ElementRef", "_ngZone", "NgZone", "_animationMode", "ANIMATION_MODULE_TYPE", "optional", "_focusMonitor", "FocusMonitor", "_rippleLoader", "MatRippleLoader", "_isFab", "color", "disableRipple", "_disableRipple", "value", "_updateRippleDisabled", "disabled", "_disabled", "ariaDisabled", "disabledInteractive", "constructor", "_CdkPrivateStyleLoader", "load", "_StructuralStylesLoader", "config", "MAT_BUTTON_CONFIG", "element", "nativeElement", "classList", "configureRipple", "className", "hasAttribute", "add", "ngAfterViewInit", "monitor", "ngOnDestroy", "stopMonitoring", "destroyRipple", "focus", "origin", "options", "focusVia", "_getAriaDisabled", "_getDisabledAttribute", "setDisabled", "\u0275dir", "\u0275\u0275defineDirective", "inputs", "booleanAttribute", "MatIconButton", "MatButtonBase", "constructor", "_rippleLoader", "configureRipple", "_elementRef", "nativeElement", "centered", "\u0275cmp", "\u0275\u0275defineComponent", "selectors", "hostVars", "hostBindings", "rf", "ctx", "_getDisabledAttribute", "_getAriaDisabled", "color", "disabledInteractive", "_animationMode", "exportAs", "features", "\u0275\u0275InheritDefinitionFeature", "styles", "encapsulation", "changeDetection", "MatRippleModule", "\u0275mod", "\u0275\u0275defineNgModule", "MatCommonModule", "_c0", "_c1", "_c2", "_c5", "_c6", "_c7", "MatButton", "MatButtonBase", "__ngFactoryType__", "\u0275cmp", "\u0275\u0275defineComponent", "selectors", "hostVars", "hostBindings", "rf", "ctx", "_getDisabledAttribute", "_getAriaDisabled", "color", "disabledInteractive", "_animationMode", "exportAs", "features", "\u0275\u0275InheritDefinitionFeature", "_isFab", "styles", "encapsulation", "changeDetection", "MAT_FAB_DEFAULT_OPTIONS", "InjectionToken", "providedIn", "factory", "MAT_FAB_DEFAULT_OPTIONS_FACTORY", "color", "defaults", "MatFabButton", "MatButtonBase", "_options", "inject", "optional", "_isFab", "extended", "constructor", "selectors", "hostVars", "hostBindings", "rf", "ctx", "_getDisabledAttribute", "_getAriaDisabled", "disabledInteractive", "_animationMode", "inputs", "booleanAttribute", "exportAs", "features", "\u0275\u0275InheritDefinitionFeature", "styles", "encapsulation", "changeDetection", "MatMiniFabButton", "\u0275cmp", "\u0275\u0275defineComponent", "_c7", "MatButtonModule", "\u0275mod", "\u0275\u0275defineNgModule", "\u0275inj", "\u0275\u0275defineInjector", "MatCommonModule", "MatRippleModule"]
}
