{"version":3,"mappings":"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","names":["UserEditFormComponent","constructor","formBuilder","inject","FormBuilder","route","ActivatedRoute","usersService","UsersService","router","Router","_snackBar","MatSnackBar","shareStateService","ShareStateService","activePageTitle","ActivePageService","pageTitle","backNavigation","userName","subscriptions","Subscription","editMode","userId","isLoading","ngOnInit","set","_initForm","_checkEditMode","form","group","id","firstName","Validators","required","lastName","email","phone","profilePicture","address","street","streetNumber","city","zipCode","country","credentials","title","qualifications","licences","company","favorites","favExercises","favPrograms","subscription","getUser","subscribe","user","profileImg","console","log","get","setValue","add","onSubmit","invalid","open","duration","panelClass","userForm","value","userFormData","FormData","Object","keys","map","key","subKey","combinedKey","append","_updateUser","updateUser","createdUser","lastValueFrom","timer","then","navigateByUrl","onBack","controls","ngOnDestroy","unsubscribe","ɵfac","e","ɵcmp","f","type","selectors","decls","vars","consts","template","rf","ctx","ɵɵelementStart","ɵɵlistener","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵproperty","dependencies","PageToolbarComponent","ClientFullEditFormComponent","FormsModule","ɵNgNoValidate","NgControlStatusGroup","ReactiveFormsModule","FormGroupDirective","styles","G"],"ignoreList":[],"sources":["apps/sanare-app/src/app/pages/users/user-edit-form/user-edit-form.component.ts","apps/sanare-app/src/app/pages/users/user-edit-form/user-edit-form.component.html"],"sourcesContent":["import { Component, OnDestroy, OnInit, inject } from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { UsersService } from '@slowautomobile/users';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { lastValueFrom, timer, Subscription, share } from 'rxjs';\nimport {\n  PageToolbarComponent,\n  ClientFullEditFormComponent,\n  ActivePageService,\n} from '@slowautomobile/ui';\nimport { ShareStateService } from '@slowautomobile/exercises';\n\n@Component({\n    selector: 'sanareapp-edit-form',\n    templateUrl: './user-edit-form.component.html',\n    styleUrl: './user-edit-form.component.scss',\n    imports: [\n        PageToolbarComponent,\n        ClientFullEditFormComponent,\n        FormsModule,\n        ReactiveFormsModule,\n    ]\n})\nexport class UserEditFormComponent implements OnInit, OnDestroy {\n  private formBuilder = inject(FormBuilder);\n  private route = inject(ActivatedRoute);\n  private usersService = inject(UsersService);\n  private router = inject(Router);\n  private _snackBar = inject(MatSnackBar);\n  private shareStateService = inject(ShareStateService);\n  private activePageTitle = inject(ActivePageService);\n\n  pageTitle = this.activePageTitle.pageTitle;\n  backNavigation = this.activePageTitle.backNavigation;\n\n  userName = this.usersService.userName;\n\n  subscriptions = new Subscription();\n\n  form!: FormGroup;\n  editMode = false;\n  userId = this.usersService.userId;\n  isLoading = this.shareStateService.isLoading;\n\n  ngOnInit(): void {\n    this.pageTitle.set($localize`:@@UserForm.pageTitle:User profile`);\n    this.backNavigation.set(true);\n\n    this._initForm();\n    this._checkEditMode();\n\n    // this.form.valueChanges.subscribe(value => console.log(value));\n  }\n\n  // For the sake of form reusability, 'clientInfo' will remain as field name\n  // FINISH THIS SO VALUE CAN BE SET AND SAVED !!! FINISH PROFILE EDIT PAGE ! ! ! !\n  private _initForm() {\n    this.form = this.formBuilder.group({\n      id: [''],\n      // name: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', Validators.required],\n      phone: ['', Validators.required],\n      profilePicture: [''],\n      address: this.formBuilder.group({\n        street: [''],\n        streetNumber: [''],\n        city: [''],\n        zipCode: [''],\n        country: [''],\n      }),\n      credentials: this.formBuilder.group({\n        title: [''],\n        qualifications: [''],\n        // qualifications: new FormControl(),\n        licences: [''],\n\n        // licences: this.formBuilder.array([]),\n        company: [''],\n      }),\n      favorites: this.formBuilder.group({\n        favExercises: [''],\n        favPrograms: [''],\n      }),\n    });\n  }\n\n  private _checkEditMode() {\n    if (this.userId()) {\n      this.editMode = true;\n\n      const subscription = this.usersService\n        .getUser(this.userId())\n        .subscribe(user => {\n          const profileImg = user.profilePicture;\n          // console.log(profileImg);\n          console.log(user);\n\n          this.form.get('id')?.setValue(this.userId());\n          // this.form.get('name')?.setValue(user.name);\n          this.form.get('firstName')?.setValue(user.firstName);\n          this.form.get('lastName')?.setValue(user.lastName);\n          this.form.get('email')?.setValue(user.email);\n          this.form.get('phone')?.setValue(user.phone);\n          this.form.get('profilePicture')?.setValue(user.profilePicture);\n          this.form.get('address.street')?.setValue(user.address?.street);\n          this.form\n            .get('address.streetNumber')\n            ?.setValue(user.address?.streetNumber);\n          this.form.get('address.city')?.setValue(user.address?.city);\n          this.form.get('address.zipCode')?.setValue(user.address?.zipCode);\n          this.form.get('address.country')?.setValue(user.address?.country);\n\n          this.form.get('credentials.title')?.setValue(user.credentials?.title);\n          this.form\n            .get('credentials.qualifications')\n            ?.setValue(user.credentials?.qualifications);\n          this.form\n            .get('credentials.licences')\n            ?.setValue(user.credentials?.licences);\n          this.form\n            .get('credentials.company')\n            ?.setValue(user.credentials?.company);\n\n          this.form\n            .get('favorites.favExercises')\n            ?.setValue(user.favorites?.favExercises);\n          this.form\n            .get('favorites.favPrograms')\n            ?.setValue(user.favorites?.favPrograms);\n        });\n      this.subscriptions.add(subscription);\n    }\n  }\n\n  onSubmit() {\n    if (this.form.invalid) {\n      this._snackBar.open(\n        $localize`:@@Snackbar.enterRequiredFields:Please enter required fields`,\n        '',\n        {\n          duration: 2000,\n          panelClass: ['custom-snackbar-style'],\n        },\n      );\n      return;\n    }\n    this.isLoading.set(true);\n    console.log(this.form);\n\n    /*  const userForm: User = {\n      id: this.userId(),\n      // name: this.form.get('name')?.value,\n      firstName: this.form.get('firstName')?.value,\n      lastName: this.form.get('lastName')?.value,\n      email: this.form.get('email')?.value,\n      phone: this.form.get('phone')?.value,\n      profilePicture: this.form.get('profilePicture')?.value,\n      address: {\n        street: this.form.get('address.street')?.value,\n        streetNumber: this.form.get('address.streetNumber')?.value,\n        city: this.form.get('address.city')?.value,\n        zipCode: this.form.get('address.zipCode')?.value,\n        country: this.form.get('address.country')?.value,\n      },\n    }; */\n    this.userName.set(\n      this.userForm['firstName'].value + ' ' + this.userForm['lastName'].value,\n    );\n\n    const userFormData = new FormData();\n\n    Object.keys(this.userForm).map(key => {\n      if (key === 'address') {\n        Object.keys(this.userForm[key].value).map(subKey => {\n          // Combined key is for example: form.get('address.street)?.value\n          const combinedKey = `${key}.${subKey}`;\n          userFormData.append(subKey, this.form.get(combinedKey)?.value);\n        });\n      } else if (key === 'credentials') {\n        Object.keys(this.userForm[key].value).map(subKey => {\n          // Combined key is for example: form.get('credentials.title)?.value\n          const combinedKey = `${key}.${subKey}`;\n          userFormData.append(subKey, this.form.get(combinedKey)?.value);\n        });\n      } else if (key === 'favorites') {\n        Object.keys(this.userForm[key].value).map(subKey => {\n          // Combined key is for example: form.get('credentials.title)?.value\n          const combinedKey = `${key}.${subKey}`;\n          userFormData.append(subKey, this.form.get(combinedKey)?.value);\n        });\n      } else {\n        userFormData.append(key, this.userForm[key].value);\n      }\n    });\n\n    if (this.editMode) {\n      this._updateUser(userFormData);\n    }\n  }\n\n  private _updateUser(userFormData: FormData) {\n    const subscription = this.usersService\n      .updateUser(userFormData, this.userId())\n      .subscribe(createdUser => {\n        console.log(createdUser);\n        this._snackBar.open(\n          $localize`:@@Snackbar.userUpdated:User updated`,\n          '',\n          {\n            duration: 2000,\n            panelClass: ['custom-snackbar-style'],\n          },\n        );\n        lastValueFrom(timer(1000)).then(() => {\n          this.isLoading.set(false);\n          this.router.navigateByUrl(`dashboard`);\n        });\n      });\n    this.subscriptions.add(subscription);\n  }\n\n  onBack() {\n    this.router.navigateByUrl('');\n  }\n\n  get userForm() {\n    return this.form.controls;\n  }\n\n  ngOnDestroy(): void {\n    this.backNavigation.set(false);\n    this.subscriptions.unsubscribe();\n  }\n}\n","<!-- This could be component!!!? -->\n<!-- <div class=\"page-title clients-title new-btn\">\n\n  <h2 class=\"primary-field main-title user-title mat-headline-small\">\n    User profile\n  </h2>\n\n</div>\n\n<div class=\"stepper-btns\">\n\n  <button\n    class=\"custom-btn\"\n    mat-stroked-button\n    color=\"primary\"\n    (click)=\"onBack()\"\n  >\n    Cancel\n  </button>\n\n  <button\n    class=\"custom-btn\"\n    [class.spinner]=\"isLoading\"\n    [disabled]=\"isLoading\"\n    mat-flat-button\n    color=\"primary\"\n    (click)=\"onSubmit()\"\n  >\n    Save\n  </button>\n</div> -->\n<div class=\"page-container\">\n  <ui-page-toolbar\n    [pageTitle]=\"pageTitle()\"\n    [cancelButton]=\"true\"\n    [submitButton]=\"true\"\n    (cancelEvent)=\"onBack()\"\n    (submitEvent)=\"onSubmit()\"\n  ></ui-page-toolbar>\n\n  <form [formGroup]=\"form\" class=\"form-wrapper\">\n    <!-- <div class=\"form-wrapper\"> -->\n    <ui-client-full-edit-form></ui-client-full-edit-form>\n    <!-- CONTINUE HERE!!!!!!!!!!!!! -->\n    <!-- <div class=\"profile-info\">\n        <h3>Profile picture</h3>\n        @defer {\n          <ui-upload-image></ui-upload-image>\n        }\n        <div class=\"info-summary\">\n          <div class=\"summary-row\">\n            <span>Name: </span>\n            <span\n              >{{ form.get('firstName')?.value }}\n              {{ form.get('lastName')?.value }}</span\n            >\n          </div>\n        </div>\n      </div> -->\n    <!-- </div> -->\n  </form>\n</div>\n"]}