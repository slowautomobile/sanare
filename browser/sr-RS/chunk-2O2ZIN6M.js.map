{"version":3,"mappings":"gkBAiDA,QAAAA,IAAAC,EAAAC,EAAA,CAAAD,EAAA,GAAAE,CAAA,UCjDA,MDkDaC,IAAmC,GAAIC,GAClD,kCAAkC,EAmCpC,GA2BaC,KAAc,UAAdA,EAAc,CAChBC,YAAcC,EAAgCC,CAAU,EACzDC,QAAUF,EAAOG,CAAM,EACvBC,mBAAqBJ,EAAOK,CAAiB,EAC7CC,UAAYN,EAAOO,CAAS,EAC5BC,sBACRC,eAAkBT,EAAOU,EAAuB,CAACC,SAAU,EAAI,CAAC,EAIhEC,aAAA,CACE,GAAMC,GAAWb,EAAqCJ,GAAkC,CACtFe,SAAU,EACX,GAED,KAAKG,iBAAmB,KAAKL,iBAAmB,iBAE5CI,IACEA,EAASE,QACX,KAAKA,MAAQ,KAAKC,cAAgBH,EAASE,OAG7C,KAAKE,KAAOJ,EAASI,MAAQ,KAAKA,OAKtCH,iBAAmB,GAUnB,GACIC,QAAK,CACP,MAAO,MAAKG,QAAU,KAAKF,eAE7B,GAAID,OAAMI,EAAgC,CACxC,KAAKD,OAASC,GAERD,OACAF,cAA8B,UAGtC,GACIG,QAAK,CACP,MAAO,MAAKC,QAEd,GAAID,OAAME,EAAS,CACjB,KAAKD,OAASE,GAAMD,GAAK,CAAC,EAC1B,KAAKjB,mBAAmBmB,aAAY,GAE9BH,OAAS,EAGjB,GACII,cAAW,CACb,MAAO,MAAKC,cAAgB,GAE9B,GAAID,aAAYH,EAAS,CACvB,KAAKI,aAAeH,GAAMD,GAAK,CAAC,EAChC,KAAKjB,mBAAmBmB,aAAY,GAE9BE,aAAe,EAOJC,aAAe,GAAIC,KAStC,GACIV,OAAI,CACN,MAAO,MAAKW,OAEd,GAAIX,MAAKE,EAAsB,CAG7B,KAAKS,MAAQT,EACb,KAAKf,mBAAmBmB,aAAY,GAE9BK,MAAyB,cAEjCC,iBAAe,CAGb,KAAK3B,QAAQ4B,kBAAkB,IAAK,CAClC,KAAKtB,sBAAwB,KAAKF,UAAUyB,OAC1C,KAAKhC,YAAYiC,cACjB,gBACA,KAAKC,qBAAqB,CAE9B,EAAC,GAGHC,aAAW,CACT,KAAK1B,wBAAqB,GAI5B2B,yBAAuB,CACrB,MAAO,UAAU,KAAKC,iBAAgB,EAAK,EAAI,KAAKjB,MAAQ,GAAG,KAIjEkB,wBAAsB,CACpB,MAAO,GAAG,KAAKpB,OAAS,SAAW,KAAKO,YAAc,GAAG,KAI3DY,kBAAgB,CACd,MAAO,MAAKnB,OAAS,iBAAmB,KAAKA,OAAS,SAIhDgB,sBAAyBK,GAA0B,CAEvD,KAAKZ,aAAaa,UAAUC,SAAW,GACvC,CAACF,EAAMG,QACP,CAAEH,EAAMG,OAAuBC,UAAUC,SAAS,kCAAkC,IAKlF,KAAK1B,OAAS,eAAiB,KAAKA,OAAS,WAC/C,KAAKf,QAAQ0C,IAAI,IAAM,KAAKlB,aAAamB,KAAK,CAAC1B,MAAO,KAAKA,KAAK,CAAC,CAAC,CAEtE,UAAA2B,IAAA,SAAAA,CAAAC,CAAA,aAAAA,CAAA,EA3IWjD,IAAc,GAAd,MAAAkD,MAAAC,EAAA,CAAAC,IAAA,CAAApD,EAAcqD,UAAA,uBAAAC,UAAA,QA2DS,wHAAAC,SAAA,GAAAC,aAAA,QAAAA,CAAA7D,EAAAC,EAAA,CAAAD,EAAA,IAAA8D,CAAA,iBA3DvB7D,EAAA0C,iBAgDQ,OAAA1C,EAAAyB,KAAA,SAAAzB,EAAAuB,IAAA,EAAAuC,CAAA,CAhDR,OAAA9D,EAAAqB,KAAA,EAAA0C,CAAA,2BAAAC,CAAA,CAAA5C,gBAAA,EAAc,wCAAApB,EAAAoB,gBAAd,EAAc,qCAAdpB,EAAA0C,iBAgDQ,CAhDR,EAAc,GAAAuB,OAAA,CAAA5C,MAAA,QAAAI,MAAA,mBAgDNyC,CAAe,EAAApC,YAAA,+BAWfoC,CAAe,EAAA3C,KAAA,QAAA4C,QAAA,CAAAnC,aAAA,gBAAAoC,SAAA,mBAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,2VAAAC,SAAA,QAAAA,CAAAzE,EAAAC,EAAA,CAAAD,EAAA,IAAA0E,CAAA,UC5KpC,EAAAxE,CAAA,YAAAyE,CAAA,GAAAC,EAAA,cAAAC,CAAA,GAAAH,CAAA,YAAAxE,CAAA,aAAA2E,CAAA,GAAAH,CAAA,YAAAxE,CAAA,aAAA2E,CAAA,IAAA7E,EAAA,IAAA8E,CAAA,GAAAC,CAAA,cAAAd,CAAA,CAAArB,sBAAA,IAAAkC,CAAA,GAAAE,CAAA,CAAAf,CAAA,CAAAzC,IAAA,kBAAAsD,CAAA,GAAAC,CAAA,aAAAd,CAAA,CAAAvB,uBAAA,OAAAuC,OAAA,+yOAAAC,cAAA,EAAAC,gBAAA,WDiHa9E,EAAc,MA+I3B,QAASwB,IAAMD,EAAWwD,EAAM,EAAGC,EAAM,IAAG,CAC1C,MAAOC,MAAKD,IAAID,EAAKE,KAAKF,IAAIC,EAAKzD,CAAC,CAAC,CACvC,MAAA2D,EAAA,CAAAA,CAAA,KAAAC,MAAA,UAAAC,EAAA,CAAAA,CAAA,KAAAD,MAAA,mBAAAE,GAAAC,CAAA,CAAAC,CAAA,EAAAD,CAAA,KE3PQE,EAAA,YAAAC,EAAA,KAIWC,EAAA,aAAAC,GAAAL,CAAA,CAAAC,CAAA,KAAAD,CAAA,KAmBLE,EAAA,aAA6CI,EAAA,GAE3CF,EAAA,GAAAJ,CAAA,QAAAO,CAAA,CAAAC,CAAA,GAAAC,SAAA,CAF2CC,EAAA,EAAAC,EAAAC,EAAAC,IAAA,aAAAC,GAAAd,CAAA,CAAAC,CAAA,KAAAD,CAAA,KAQ7CE,EAAA,aAKEa,EAAA,yBAoBAb,EAAA,UAAM,UACJC,EAAA,KAAmDC,EAAA,EACnDF,EAAA,UACGI,EAAA,GAAAU,CAAA,WACHZ,EAAA,EAAO,EACF,GAAAJ,CAAA,QAAAO,CAAA,CAAAC,CAAA,GAAAC,SAAA,CAAA9C,CAAA,CAAA6C,CAAA,IA3BPS,EAAA,UAAAC,EAAAC,YAAA,sBAIET,EAAA,EAAAO,EAAA,UAAAC,EAAAC,YAAA,0BAAoD,QAAAP,EAAAQ,QAAA,EAqBjDV,EAAA,GAAAW,EAAA,GAAAC,EAAA,IAAAV,EAAAW,UAAAC,IAAA,8BAAAC,GAAAzB,CAAA,CAAAC,CAAA,KAAAD,CAAA,KAOPE,EAAA,aAgBEa,EAAA,yBASAb,EAAA,UAAM,UACJC,EAAA,KAAiDC,EAAA,EACjDF,EAAA,UACEI,EAAA,GAAAU,CAAA,WACFZ,EAAA,EAAO,EACF,GAAAJ,CAAA,QAAAO,CAAA,CAAAC,CAAA,GAAAC,SAAA,CAAA9C,CAAA,CAAA6C,CAAA,IA3BPS,EAAA,UAAAC,EAAAC,YAAA,sBAeET,EAAA,EAAAO,EAAA,UAAAC,EAAAC,YAAA,0BAAoD,QAAAP,EAAAQ,QAAA,EAUlDV,EAAA,GAAAW,EAAA,IAAAC,EAAA,IAAAV,EAAAW,UAAAC,IAAA,8BAAAE,GAAA1B,CAAA,CAAAC,CAAA,KAAAD,CAAA,QAAAO,CAAA,CAAAoB,CAAA,GA6BNzB,EAAA,eAIE0B,EAAA,iBAAAC,EAAA,CAAAC,EAAAC,CAAA,KAAAnB,GAAAoB,EAAA,GAAAvB,UAAAS,EAAAc,EAAA,GACqBH,SAAAI,gBAAA,EAAwBC,EAAEhB,EAAAiB,kBAAAvB,CAAA,CAE/D,KACgBV,EAAA,cAAUI,EAAA,gBAAUF,EAAA,EAAW,aAAAgC,GAAApC,CAAA,CAAAC,CAAA,KAAAD,CAAA,QAAAO,CAAA,CAAAoB,CAAA,GAGjCzB,EAAA,eAME0B,EAAA,iBAAAC,EAAA,CAAAC,EAAAO,CAAA,KAAAzB,GAAAoB,EAAA,GAAAvB,UAAAS,EAAAc,EAAA,GACqBH,SAAAI,gBAAA,EAAwBC,EAAEhB,EAAAoB,sBAAA1B,CAAA,CAE/D,KACgBV,EAAA,cAAUI,EAAA,UAAIF,EAAA,EAAW,aAAAmC,GAAAvC,CAAA,CAAAC,CAAA,KAAAD,CAAA,IAtB7BwC,EAAA,EAAAC,GAAA,iBAA6B,EAAAC,GAAA,iBAAA1C,CAAA,QAAAO,CAAA,CAAAC,CAAA,GAAAmC,MAAA,CAAAhF,CAAA,CAAA6C,CAAA,IAA7BoC,EAAA1B,EAAA2B,mBAAAC,CAAA,kBAAAC,GAAA/C,CAAA,CAAAC,CAAA,KAAAD,CAAA,KAlHJE,EAAA,WAA+B,qBAI5B,gBAC2BI,EAAA,GAExBF,EAAA,EACFF,EAAA,YAAuBI,EAAA,GAIrBF,EAAA,EAEFoC,EAAA,EAAAQ,GAAA,eAAmB,EAAAC,GAAA,eAKU,EAAAC,GAAA,eA0E7BnC,EAAA,aAmBFX,EAAA,EACAoC,EAAA,GAAAW,GAAA,KA2BF/C,EAAA,EACAW,EAAA,mBAAAf,CAAA,QAAAO,CAAA,CAAAN,CAAA,CAAAQ,SAAA,CAAA9C,CAAA,CAAAsC,CAAA,CAAA0C,MAAA,CAAArE,CAAA,CAAAkC,CAAA,IA1IIE,EAAA,EAAAO,EAAA,UAAAC,EAAAC,YAAAiC,EAAA,EAAAC,EAAA,EAAAD,EAAA,EAAAE,EAAA,GAE0B5C,EAAA,GAAAC,EAAAO,EAAAC,YAAA,gCAGHT,EAAA,GAAAC,EAAAC,EAAA2C,QAAA3C,EAAA2C,QAAA1C,KAAAD,EAAA4C,UAAA,EAMvB9C,EAAA,EAAAkC,EAAA1B,EAAAC,YAAA,MAKAT,EAAA,EAAAkC,EAAA1B,EAAA2B,mBAAAC,CAAA,OA8FFpC,EAAA,GAAAkC,EAAA1B,EAAAC,YAAA,kBAAAsC,GAAAzD,CAAA,CAAAC,CAAA,KAAAD,CAAA,KA1HJwC,EAAA,EAAAkB,GAAA,cAQAC,EAAA,EAAAC,GAAA,eAAAC,CAAA,GAAA7D,CAAA,QAAAO,CAAA,CAAAC,CAAA,GARAoC,EAAA1B,EAAAC,YAAA,MAQAT,EAAA,EAAAoD,EAAAxJ,CAAA,ICwBN,GAAayJ,KAAwB,KAA/B,KAAOA,EAAwB,CAvBrCvI,aAAA,CAgCY,KAAAwI,2BAAgD,GAAIzH,MAY9D+F,sBAAsB2B,EAAgB,CACpC,KAAKD,2BAA2BE,KAAKD,CAAW,CAClD,EAEA9B,kBAAkB8B,EAAgB,CAChCE,QAAQC,IAAIH,CAAW,CACzB,cAAAvG,IAAA,UAAAC,CAAA,aAAAA,CAAA,EA3BWoG,IAAwB,gBAAAnG,IAAA,CAAAyG,CAAA,EAAAvG,IAAA,CAAxBiG,EAAwBhG,UAAA,uBAAAQ,OAAA,CAAA+F,UAAA,YAAAzB,mBAAA,qBAAA1B,YAAA,eAAA1C,QAAA,CAAAuF,2BAAA,8BAAArF,MAAA,EAAAC,KAAA,EAAAC,WAAA,IAAA0F,eD3B1BC,yBAqDmDA,0BAmCDA,0BA4CjCA,gDAEAA,o1BAjJ5BtE,EAAA,WAA2B,gBAKvBsC,EAAA,EAAAiC,GAAA,KAAAzD,CAAA,YA0JFZ,EAAA,EAAW,GAAAzC,CAAA,QAAA+G,CAAA,CA5JThE,EAAA,EAAAO,EAAA,UAAA3G,EAAA6G,YAAA,+BAEAT,EAAA,EAAAkC,GAAA+B,EAAAC,EAAA,IAAAtK,EAAAgK,SAAA,QAAAK,CAAA,KAAAE,YAAA,ECeIC,GACAC,EACAC,GACAC,GACAC,EACAC,EACAC,GACAC,EACAC,GACA5K,GACA6K,GACAC,EACAC,EACAC,EACAC,EACAC,CAAQ,EAAAtG,OAAA,6mDAGHyE,EAAwB,aAAA8B,EAAA,IAAA1G,CAAA","names":["MatProgressBar_Conditional_2_Template","rf","ctx","c","MAT_PROGRESS_BAR_DEFAULT_OPTIONS","InjectionToken","MatProgressBar","_elementRef","inject","ElementRef","_ngZone","NgZone","_changeDetectorRef","ChangeDetectorRef","_renderer","Renderer2","_cleanupTransitionEnd","_animationMode","ANIMATION_MODULE_TYPE","optional","constructor","defaults","_isNoopAnimation","color","_defaultColor","mode","_color","value","_value","v","clamp","markForCheck","bufferValue","_bufferValue","animationEnd","EventEmitter","_mode","ngAfterViewInit","runOutsideAngular","listen","nativeElement","_transitionendHandler","ngOnDestroy","_getPrimaryBarTransform","_isIndeterminate","_getBufferBarFlexBasis","event","observers","length","target","classList","contains","run","next","ɵfac","n","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","$","D","X","r","inputs","numberAttribute","outputs","exportAs","decls","vars","consts","template","i","_","me","o","a","y","d","styles","encapsulation","changeDetection","min","max","Math","de","height","_e","pe","t","s","ɵɵelementStart","ɵɵi18n","ɵɵelementEnd","ge","ɵɵtext","e","l","$implicit","ɵɵadvance","ɵɵtextInterpolate","programData_r1","name","ue","ɵɵelement","M","ɵɵproperty","ctx_r1","isDashboard","progress","ɵɵtextInterpolate1","ɵɵpipeBind2","dateRange","end","fe","Ce","O","ɵɵlistener","$event","ɵɵrestoreView","_r3","ɵɵnextContext","stopPropagation","ɵɵresetView","viewClientProgram","be","_r4","openEditClientProgram","Ee","ɵɵtemplate","ClientsProgressComponent_Conditional_2_For_2_Conditional_10_Conditional_0_Template","ClientsProgressComponent_Conditional_2_For_2_Conditional_10_Conditional_1_Template","$index","ɵɵconditional","isProgramCompleted","ɵ$index_12_r5","Se","ClientsProgressComponent_Conditional_2_For_2_Conditional_6_Template","ClientsProgressComponent_Conditional_2_For_2_Conditional_7_Template","ClientsProgressComponent_Conditional_2_For_2_Conditional_8_Template","ClientsProgressComponent_Conditional_2_For_2_Conditional_10_Template","ɵɵpureFunction0","_c0","_c1","program","clientName","Pe","ClientsProgressComponent_Conditional_2_Conditional_0_Template","ɵɵrepeaterCreate","ClientsProgressComponent_Conditional_2_For_2_Template","ɵɵrepeaterTrackByIdentity","ɵɵrepeater","ClientsProgressComponent","openEditClientProgramEvent","programData","emit","console","log","E","programs$","i18n_0","$localize","ClientsProgressComponent_Conditional_2_Template","m","tmp_1_0","ɵɵpipeBind1","dependencies","MatList","NgClass","MatListSubheaderCssMatStyler","MatListItem","NgStyle","MatIcon","MatListItemIcon","MatListItemTitle","MatListItemLine","MatListItemMeta","MatIconButton","MatTooltip","MatDivider","AsyncPipe","DatePipe","Ve"],"ignoreList":[],"sources":["../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar.html","libs/clients/src/lib/components/clients-progress/clients-progress.component.html","libs/clients/src/lib/components/clients-progress/clients-progress.component.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  NgZone,\n  Input,\n  Output,\n  EventEmitter,\n  AfterViewInit,\n  OnDestroy,\n  ChangeDetectorRef,\n  InjectionToken,\n  inject,\n  numberAttribute,\n  ANIMATION_MODULE_TYPE,\n  Renderer2,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ThemePalette} from '../core';\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n/** Default `mat-progress-bar` options that can be overridden. */\nexport interface MatProgressBarDefaultOptions {\n  /**\n   * Default theme color of the progress bar. This API is supported in M2 themes only,\n   * it has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/progress-bar/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  color?: ThemePalette;\n\n  /** Default mode of the progress bar. */\n  mode?: ProgressBarMode;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-bar`. */\nexport const MAT_PROGRESS_BAR_DEFAULT_OPTIONS = new InjectionToken<MatProgressBarDefaultOptions>(\n  'MAT_PROGRESS_BAR_DEFAULT_OPTIONS',\n);\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY},\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => (_location ? _location.pathname + _location.search : ''),\n  };\n}\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate' | 'buffer' | 'query';\n\n@Component({\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    // set tab index to -1 so screen readers will read the aria-label\n    // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n    'tabindex': '-1',\n    '[attr.aria-valuenow]': '_isIndeterminate() ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-mdc-progress-bar mdc-linear-progress',\n    '[class]': '\"mat-\" + color',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n    '[class.mdc-linear-progress--animation-ready]': '!_isNoopAnimation',\n    '[class.mdc-linear-progress--indeterminate]': '_isIndeterminate()',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrl: 'progress-bar.css',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar implements AfterViewInit, OnDestroy {\n  readonly _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _ngZone = inject(NgZone);\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  private _renderer = inject(Renderer2);\n  private _cleanupTransitionEnd: (() => void) | undefined;\n  _animationMode? = inject(ANIMATION_MODULE_TYPE, {optional: true});\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const defaults = inject<MatProgressBarDefaultOptions>(MAT_PROGRESS_BAR_DEFAULT_OPTIONS, {\n      optional: true,\n    });\n\n    this._isNoopAnimation = this._animationMode === 'NoopAnimations';\n\n    if (defaults) {\n      if (defaults.color) {\n        this.color = this._defaultColor = defaults.color;\n      }\n\n      this.mode = defaults.mode || this.mode;\n    }\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  // TODO: should be typed as `ThemePalette` but internal apps pass in arbitrary strings.\n  /**\n   * Theme color of the progress bar. This API is supported in M2 themes only, it\n   * has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/progress-bar/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  @Input()\n  get color() {\n    return this._color || this._defaultColor;\n  }\n  set color(value: string | null | undefined) {\n    this._color = value;\n  }\n  private _color: string | null | undefined;\n  private _defaultColor: ThemePalette = 'primary';\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input({transform: numberAttribute})\n  get value(): number {\n    return this._value;\n  }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _value = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input({transform: numberAttribute})\n  get bufferValue(): number {\n    return this._bufferValue || 0;\n  }\n  set bufferValue(v: number) {\n    this._bufferValue = clamp(v || 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _bufferValue = 0;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() readonly animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input()\n  get mode(): ProgressBarMode {\n    return this._mode;\n  }\n  set mode(value: ProgressBarMode) {\n    // Note that we don't technically need a getter and a setter here,\n    // but we use it to match the behavior of the existing mat-progress-bar.\n    this._mode = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _mode: ProgressBarMode = 'determinate';\n\n  ngAfterViewInit() {\n    // Run outside angular so change detection didn't get triggered on every transition end\n    // instead only on the animation that we care about (primary value bar's transitionend)\n    this._ngZone.runOutsideAngular(() => {\n      this._cleanupTransitionEnd = this._renderer.listen(\n        this._elementRef.nativeElement,\n        'transitionend',\n        this._transitionendHandler,\n      );\n    });\n  }\n\n  ngOnDestroy() {\n    this._cleanupTransitionEnd?.();\n  }\n\n  /** Gets the transform style that should be applied to the primary bar. */\n  _getPrimaryBarTransform(): string {\n    return `scaleX(${this._isIndeterminate() ? 1 : this.value / 100})`;\n  }\n\n  /** Gets the `flex-basis` value that should be applied to the buffer bar. */\n  _getBufferBarFlexBasis(): string {\n    return `${this.mode === 'buffer' ? this.bufferValue : 100}%`;\n  }\n\n  /** Returns whether the progress bar is indeterminate. */\n  _isIndeterminate(): boolean {\n    return this.mode === 'indeterminate' || this.mode === 'query';\n  }\n\n  /** Event handler for `transitionend` events. */\n  private _transitionendHandler = (event: TransitionEvent) => {\n    if (\n      this.animationEnd.observers.length === 0 ||\n      !event.target ||\n      !(event.target as HTMLElement).classList.contains('mdc-linear-progress__primary-bar')\n    ) {\n      return;\n    }\n\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this._ngZone.run(() => this.animationEnd.next({value: this.value}));\n    }\n  };\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","<!--\n  All children need to be hidden for screen readers in order to support ChromeVox.\n  More context in the issue: https://github.com/angular/components/issues/22165.\n-->\n<div class=\"mdc-linear-progress__buffer\" aria-hidden=\"true\">\n  <div\n    class=\"mdc-linear-progress__buffer-bar\"\n    [style.flex-basis]=\"_getBufferBarFlexBasis()\"></div>\n  <!-- Remove the dots outside of buffer mode since they can cause CSP issues (see #28938) -->\n  @if (mode === 'buffer') {\n    <div class=\"mdc-linear-progress__buffer-dots\"></div>\n  }\n</div>\n<div\n  class=\"mdc-linear-progress__bar mdc-linear-progress__primary-bar\"\n  aria-hidden=\"true\"\n  [style.transform]=\"_getPrimaryBarTransform()\">\n  <span class=\"mdc-linear-progress__bar-inner\"></span>\n</div>\n<div class=\"mdc-linear-progress__bar mdc-linear-progress__secondary-bar\" aria-hidden=\"true\">\n  <span class=\"mdc-linear-progress__bar-inner\"></span>\n</div>\n","<div class=\"status-toggle\">\n  <mat-list\n    class=\"program-list\"\n    [ngClass]=\"isDashboard ? 'custom-height-background' : ''\"\n  >\n    @if (programs$ | async; as programs) {\n      @if (!isDashboard) {\n        <span\n          mat-subheader\n          class=\"subheader-text mat-body-large\"\n          i18n=\"@@ClientsProgress.title\"\n          >Programs</span\n        >\n      }\n      @for (programData of programs; track programData; let i = $index) {\n        <div class=\"list-item-wrapper\">\n          <mat-list-item\n            class=\"program-list-item\"\n            [ngStyle]=\"isDashboard ? { height: '78px' } : { height: '64px' }\"\n          >\n            <mat-icon matListItemIcon>{{\n              isDashboard ? 'account_circle' : 'description'\n            }}</mat-icon>\n            <span matListItemTitle>{{\n              programData.program\n                ? programData.program.name\n                : programData.clientName\n            }}</span>\n            <!-- Should this info be in clients progress bar on dashboard? -->\n            @if (isDashboard) {\n              <span matListItemLine class=\"status-tooltip\">{{\n                programData.name\n              }}</span>\n            }\n            @if (isProgramCompleted[i]) {\n              <!-- <span matListItemLine [matTooltip]=\"'Ended: ' + (program.dateRange.end | date: 'd MMM yyyy')\" class=\"status-tooltip\" style=\"background-color: #3f51b5;\">\n                    Completed\n                  </span> -->\n              <span\n                matListItemLine\n                class=\"status-tooltip progress-list-line\"\n                [ngClass]=\"!isDashboard ? 'progress-margin' : ''\"\n              >\n                <mat-progress-bar\n                  class=\"progress-bar\"\n                  [ngClass]=\"isDashboard ? 'dash-progress-width' : ''\"\n                  color=\"primary\"\n                  mode=\"determinate\"\n                  [value]=\"programData.progress\"\n                >\n                </mat-progress-bar>\n                <!-- <span\n                  class=\"status-icon-wrapper\"\n                  style=\"background-color: #3f51b5\"\n                  matTooltip=\"Completed\"\n                >\n                  <mat-icon\n                    aria-hidden=\"false\"\n                    aria-label=\"Done icon\"\n                    fontIcon=\"done\"\n                  ></mat-icon>\n                </span> -->\n                <!-- @if (!isDashboard) { -->\n                <span>\n                  <span i18n=\"@@ClientsProgress.programEnded\">Ended: </span>\n                  <span\n                    >{{ programData.dateRange.end | date: 'd MMM yyyy' }}\n                  </span>\n                </span>\n                <!-- } -->\n              </span>\n            } @else {\n              <!-- <span matListItemLine [matTooltip]=\"'Ends: ' + (program.dateRange.end | date: 'd MMM yyyy')\" class=\"status-tooltip\" style=\"background-color: #ff4081;\">In progress</span> -->\n              <span\n                matListItemLine\n                class=\"status-tooltip progress-list-line\"\n                [ngClass]=\"!isDashboard ? 'progress-margin' : ''\"\n              >\n                <!-- <span\n                  class=\"status-icon-wrapper\"\n                  style=\"background-color: #ff4081\"\n                  matTooltip=\"In progress\"\n                >\n                  <mat-icon\n                    aria-hidden=\"false\"\n                    aria-label=\"In progress icon\"\n                    fontIcon=\"autorenew\"\n                  ></mat-icon>\n                </span> -->\n                <mat-progress-bar\n                  class=\"progress-bar\"\n                  [ngClass]=\"isDashboard ? 'dash-progress-width' : ''\"\n                  color=\"accent\"\n                  mode=\"determinate\"\n                  [value]=\"programData.progress\"\n                >\n                </mat-progress-bar>\n                <!-- @if (!isDashboard) { -->\n                <span>\n                  <span i18n=\"@@ClientsProgress.programEnds\">Ends: </span>\n                  <span>\n                    {{ programData.dateRange.end | date: 'd MMM yyyy' }}\n                  </span>\n                </span>\n                <!-- } -->\n              </span>\n            }\n            <!-- It is a question if options should be available for every program, since there is one \"Switch to full edit\" button. For now, only view button is enabled -->\n            <span matListItemMeta class=\"list-action-button\">\n              <!-- <button\n                    mat-icon-button\n                    matTooltip=\"Details\"\n                    aria-label=\"Details icon button\"\n                    (click)=\"viewClientProgram()\"\n                  >\n                    <mat-icon>info_outline</mat-icon>\n                    <mat-icon>visibility</mat-icon>\n                  </button> -->\n              <!-- <button\n                    mat-icon-button\n                    matTooltip=\"Delete\"\n                    aria-label=\"Delete icon button\"\n                    (click)=\"deleteClientProgram()\"\n                  >\n                    <mat-icon>delete_outline</mat-icon>\n                  </button> -->\n            </span>\n          </mat-list-item>\n          @if (isDashboard) {\n            @if (isProgramCompleted[i]) {\n              <button\n                mat-icon-button\n                matTooltip=\"View\"\n                aria-label=\"View icon button\"\n                (click)=\"\n                  $event.stopPropagation(); viewClientProgram(programData)\n                \"\n              >\n                <mat-icon>visibility</mat-icon>\n              </button>\n            } @else {\n              <button\n                mat-icon-button\n                matTooltip=\"Edit\"\n                i18n-matTooltip=\"@@ClientsProgress.editProgramBtn\"\n                aria-label=\"Edit icon button\"\n                i18n-aria-label=\"@@ClientsProgress.editProgramBtnAriaLabel\"\n                (click)=\"\n                  $event.stopPropagation(); openEditClientProgram(programData)\n                \"\n              >\n                <mat-icon>edit</mat-icon>\n              </button>\n            }\n          }\n        </div>\n        <mat-divider></mat-divider>\n      }\n    }\n  </mat-list>\n</div>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressBarMode, MatProgressBar } from '@angular/material/progress-bar';\nimport { Observable } from 'rxjs';\nimport { MatDivider } from '@angular/material/divider';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { MatIconButton } from '@angular/material/button';\nimport { MatIcon } from '@angular/material/icon';\nimport { NgClass, NgStyle, AsyncPipe, DatePipe } from '@angular/common';\nimport { MatList, MatListSubheaderCssMatStyler, MatListItem, MatListItemIcon, MatListItemTitle, MatListItemLine, MatListItemMeta } from '@angular/material/list';\n\n// interface ClientProgramData {\n//   [key: number]: any[];\n// }\n\n@Component({\n    selector: 'clients-progress',\n    templateUrl: './clients-progress.component.html',\n    styleUrl: './clients-progress.component.scss',\n    imports: [\n        MatList,\n        NgClass,\n        MatListSubheaderCssMatStyler,\n        MatListItem,\n        NgStyle,\n        MatIcon,\n        MatListItemIcon,\n        MatListItemTitle,\n        MatListItemLine,\n        MatProgressBar,\n        MatListItemMeta,\n        MatIconButton,\n        MatTooltip,\n        MatDivider,\n        AsyncPipe,\n        DatePipe,\n    ]\n})\nexport class ClientsProgressComponent {\n  @Input() programs$!: Observable<any[] | undefined>;\n  @Input() isProgramCompleted!: boolean[];\n  @Input() isDashboard!: boolean;\n  // @Input() backgroundColor: string = '';\n  // @Input() color!: ThemePalette;\n  // @Input() mode!: ProgressBarMode;\n  // @Input() value!: number;\n  // @Input() color!: ThemePalette;\n  @Output() openEditClientProgramEvent: EventEmitter<any> = new EventEmitter();\n\n  // color!: ThemePalette;\n  // mode!: ProgressBarMode;\n  value!: number;\n  //  color!: ThemePalette;\n\n  /*  color: ThemePalette = 'primary';\n  // mode: ProgressBarMode = 'determinate';\n  value = 100;\n  bufferValue = 0; */\n\n  openEditClientProgram(programData: any) {\n    this.openEditClientProgramEvent.emit(programData);\n  }\n\n  viewClientProgram(programData: any) {\n    console.log(programData);\n  }\n}\n"]}