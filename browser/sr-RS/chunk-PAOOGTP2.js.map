{"version":3,"mappings":"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","names":["_c2","_c3","_c4","MatOption_Conditional_0_Template","rf","ctx","O","ctx_r0","ɵɵnextContext","C","e","disabled","selected","MatOption_Conditional_5_Template","MatOption_Conditional_6_Template","c","f","d","p","Se","group","label","MAT_OPTION_PARENT_COMPONENT","InjectionToken","MAT_OPTGROUP","MatOptionSelectionChange","source","isUserInput","constructor","MatOption","_element","inject","ElementRef","_changeDetectorRef","ChangeDetectorRef","_parent","optional","_signalDisableRipple","_selected","_active","_disabled","_mostRecentViewValue","multiple","value","id","_IdGenerator","getId","disableRipple","hideSingleSelectionIndicator","onSelectionChange","EventEmitter","_text","_stateChanges","Subject","styleLoader","_CdkPrivateStyleLoader","load","_StructuralStylesLoader","_VisuallyHiddenLoader","isSignal","active","viewValue","nativeElement","textContent","trim","select","emitEvent","markForCheck","_emitSelectionChangeEvent","deselect","focus","_origin","options","element","_getHostElement","setActiveStyles","setInactiveStyles","getLabel","_handleKeydown","event","keyCode","ENTER","SPACE","hasModifierKey","_selectViaInteraction","preventDefault","_getTabIndex","ngAfterViewChecked","next","ngOnDestroy","complete","emit","ɵfac","t","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","he","x_","a","A","F","i","first","hostAttrs","hostVars","hostBindings","E","$event","Bt","K","toString","ie","inputs","booleanAttribute","outputs","exportAs","ngContentSelectors","decls","vars","consts","template","Re","I_","S","P_","re","L_","I","_inert","dependencies","MatPseudoCheckbox","MatRipple","styles","encapsulation","changeDetection","_countGroupLabelsBeforeOption","optionIndex","optionGroups","length","optionsArray","toArray","groups","groupCounter","_getOptionScrollPosition","optionOffset","optionHeight","currentScrollPosition","panelHeight","Math","max","MatOptionModule","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","MatRippleModule","MatCommonModule","MatPseudoCheckboxModule","_c0","_c1","MatSelect_Conditional_4_Template","ctx_r1","ce","placeholder","MatSelect_Conditional_5_Conditional_1_Template","MatSelect_Conditional_5_Conditional_2_Template","triggerValue","MatSelect_Conditional_5_Template","B_","customTrigger","MatSelect_ng_template_10_Template","_r3","ɵɵgetCurrentView","T","u","x","yc","_getPanelTheme","_animationsDisabled","panelClass","ariaLabel","_getPanelAriaLabelledby","MAT_SELECT_SCROLL_STRATEGY","providedIn","factory","overlay","Overlay","scrollStrategies","reposition","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MAT_SELECT_TRIGGER","MatSelectChange","MatSelect","_viewportRuler","ViewportRuler","_elementRef","_dir","Directionality","_idGenerator","_renderer","Renderer2","_parentFormField","MAT_FORM_FIELD","ngControl","NgControl","self","_liveAnnouncer","LiveAnnouncer","_defaultOptions","ANIMATION_MODULE_TYPE","_initialized","_cleanupDetach","_positions","originX","originY","overlayX","overlayY","_scrollOptionIntoView","index","option","panel","labelCount","scrollTop","offsetTop","offsetHeight","_positioningSettled","_keyManager","activeItemIndex","_getChangeEvent","_scrollStrategyFactory","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_previousControl","_destroy","_errorStateTracker","stateChanges","disableAutomaticLabeling","userAriaDescribedBy","_selectionModel","_preferredOverlayOrigin","_overlayWidth","_onChange","_onTouched","_valueId","_scrollStrategy","_overlayPanelClass","overlayPanelClass","focused","_focused","controlType","trigger","_overlayDir","tabIndex","_hideSingleSelectionIndicator","_syncParentProperties","_placeholder","required","_required","control","hasValidator","Validators","_multiple","disableOptionCentering","compareWith","fn","_initializeSelection","_value","newValue","_assignValue","ariaLabelledby","errorStateMatcher","matcher","typeaheadDebounceInterval","sortComparator","_id","errorState","panelWidth","canSelectNullableOptions","optionSelectionChanges","defer","changes","pipe","startWith","switchMap","merge","map","openedChange","_openedStream","filter","o","_closedStream","selectionChange","valueChange","defaultErrorStateMatcher","ErrorStateMatcher","parentForm","NgForm","parentFormGroup","FormGroupDirective","HostAttributeToken","valueAccessor","_ErrorStateTracker","parseInt","ngOnInit","SelectionModel","change","takeUntil","subscribe","panelOpen","_getOverlayWidth","detectChanges","ngAfterContentInit","_initKeyManager","changed","added","forEach","removed","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","setAttribute","removeAttribute","undefined","updateErrorState","ngOnChanges","withTypeAhead","destroy","_clearFromModal","toggle","close","open","_canOpen","getConnectedOverlayOrigin","_applyModalPanelOwnership","positionChange","take","attachOverlay","withHorizontalOrientation","_highlightCorrectOption","Promise","resolve","then","_trackedModal","modal","closest","panelId","removeAriaReferencedId","addAriaReferencedId","_exitAndDetach","_isRtl","_detachOverlay","cleanupEvent","clearTimeout","exitFallbackTimer","listen","animationName","setTimeout","classList","add","detachOverlay","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","empty","selectedOptions","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","manager","isTyping","altKey","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","shiftKey","_handleOverlayKeydown","ESCAPE","_onFocus","_onBlur","cancelTypeahead","color","isEmpty","_setSelectionByValue","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","_skipPredicate","preferredOrigin","CdkOverlayOrigin","elementRef","getBoundingClientRect","width","ActiveDescendantKeyManager","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","skipPredicate","tabOut","changedOrDestroyed","_onSelect","wasSelected","_propagateChanges","setActiveItem","sort","b","indexOf","fallbackValue","valueToEmit","firstEnabledOptionIndex","get","labelId","getLabelId","labelExpression","_getAriaActiveDescendant","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","contentQueries","dirIndex","Ee","_t","D_","N_","CdkConnectedOverlay","r","numberAttribute","features","ɵɵProvidersFeature","MatFormFieldControl","useExisting","ɵɵNgOnChangesFeature","A_","q","k_","F_","Ct","U_","fallbackOverlayOrigin_r4","ɵɵreference","NgClass","MatSelectModule","Le","Pe","providers","OverlayModule","CdkScrollableModule","MatFormFieldModule","MatPaginator_Conditional_2_Conditional_3_For_4_Template","pageSizeOption_r3","$implicit","MatPaginator_Conditional_2_Conditional_3_Template","_r1","_changePageSize","He","z_","Qe","ct","selectRef_r4","_formFieldAppearance","pageSize","_pageSizeLabelId","selectConfig","je","_displayedPageSizeOptions","MatPaginator_Conditional_2_Conditional_4_Template","MatPaginator_Conditional_2_Template","V_","_intl","itemsPerPageLabel","MatPaginator_Conditional_6_Template","_r5","_buttonClicked","_previousButtonsDisabled","firstPageLabel","W_","n","getNumberOfPages","_nextButtonsDisabled","lastPageLabel","MatPaginatorIntl","nextPageLabel","previousPageLabel","getRangeLabel","page","startIndex","endIndex","min","ɵprov","ɵɵdefineInjectable","token","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","parentIntl","MAT_PAGINATOR_INTL_PROVIDER","Optional","SkipSelf","DEFAULT_PAGE_SIZE","MAT_PAGINATOR_DEFAULT_OPTIONS","MatPaginator","_intlChanges","_isInitialized","_initializedStream","ReplaySubject","pageIndex","_pageIndex","_length","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","_pageSizeOptions","hidePageSize","showFirstLastButtons","initialized","defaults","formFieldAppearance","unsubscribe","nextPage","hasNextPage","_navigate","previousPage","hasPreviousPage","firstPage","lastPage","maxPageIndex","ceil","previousPageIndex","floor","_emitPageEvent","slice","push","previousIndex","targetIndex","N","H_","j_","Dn","MatFormField","MatIconButton","MatTooltip","MatPaginatorModule","MatButtonModule","MatTooltipModule","MatSortHeader_Conditional_3_Template","ɵɵelementStart","ɵɵnamespaceSVG","ɵɵelement","ɵɵelementEnd","MAT_SORT_DEFAULT_OPTIONS","MatSort","sortables","Map","start","direction","_direction","disableClear","sortChange","register","sortable","set","deregister","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","__ngFactoryType__","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","sortOrder","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MAT_SORT_HEADER_INTL_PROVIDER","MatSortHeader","_sort","_columnDef","_focusMonitor","FocusMonitor","_ariaDescriber","AriaDescriber","_renderChanges","_animationModule","_recentlyCleared","signal","_sortButton","arrowPosition","sortActionDescription","_sortActionDescription","_updateSortActionDescription","defaultOptions","name","querySelector","ngAfterViewInit","monitor","stopMonitoring","removeDescription","_toggleOnInteraction","_isDisabled","wasSorted","_isSorted","prevDirection","_getAriaSortAttribute","_renderArrow","newDescription","describe","ɵɵlistener","ɵɵattribute","ɵɵclassProp","attrs","ɵɵprojectionDef","ɵɵprojection","ɵɵtemplate","ɵɵadvance","ɵɵconditional","MatSortModule","rh","sh","lh","CdkTable_Conditional_3_Template","lt","CdkTable_Conditional_4_Template","CDK_TABLE","CdkCellDef","TemplateRef","$","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","_table","_hasStickyChanged","_name","_setNameInput","sticky","_sticky","stickyEnd","_stickyEnd","cell","headerCell","footerCell","cssClassFriendlyName","_columnCssClassName","hasStickyChanged","resetStickyChanged","_updateColumnCssClassName","replace","BaseCdkCell","columnDef","CdkHeaderCell","ɵɵInheritDefinitionFeature","CdkCell","role","_getCellRole","_Schedule","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_currentSchedule","_ngZone","NgZone","schedule","task","_createScheduleIfNeeded","scheduleEnd","runOutsideAngular","queueMicrotask","Z","BaseRowDef","_differs","IterableDiffers","columns","_columnsDiffer","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","CdkRowDef","when","CdkCellOutlet","_viewContainer","ViewContainerRef","cells","context","mostRecentCellOutlet","CdkHeaderRow","CdkRow","CdkNoDataRow","templateRef","_contentClassName","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","_tableInjector","_elemSizeCache","WeakMap","_resizeObserver","globalThis","ResizeObserver","entries","_updateCachedSizes","_updatedStickyColumnsParamsToReplay","_stickyColumnsReplayTimeout","_cachedCellWidths","_borderCellCss","_destroyed","top","bottom","left","right","clearStickyPositioning","rows","stickyDirections","includes","_removeFromStickyColumnReplayQueue","elementsToClear","row","nodeType","ELEMENT_NODE","from","children","_afterNextRender","write","_removeStickyStyle","updateStickyColumns","stickyStartStates","stickyEndStates","recalculateCellWidths","replay","state","stickyColumnsUpdated","sizes","stickyEndColumnsUpdated","firstRow","numCells","isRtl","end","lastStickyStart","lastIndexOf","firstStickyEnd","cellWidths","startPositions","endPositions","_updateStickyColumnReplayQueue","earlyRead","_getCellWidths","_getStickyStartColumnPositions","_getStickyEndColumnPositions","_addStickyStyle","w","stickRows","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","height","_retrieveElementSize","borderedRowIndex","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","offsets","elements","stickyFooterRowsUpdated","updateStickyFooterContainer","tableElement","tfoot","disconnect","contains","dir","style","remove","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","firstRowCells","widths","positions","nextPosition","cachedSize","clientRect","size","observe","box","params","rowsSet","Set","update","has","needsColumnUpdate","entry","newEntry","borderBoxSize","inlineSize","blockSize","contentRect","target","isCell","spec","afterNextRender","injector","klass","STICKY_POSITIONING_LISTENER","DataRowOutlet","viewContainer","table","_rowOutlet","_outletAssigned","HeaderRowOutlet","_headerRowOutlet","FooterRowOutlet","_footerRowOutlet","NoDataRowOutlet","_noDataRowOutlet","CdkTable","_platform","Platform","_viewRepeater","_VIEW_REPEATER_STRATEGY","_stickyPositioningListener","skipSelf","_document","DOCUMENT","_data","_onDestroy","_renderRows","_renderChangeSubscription","_columnDefsByName","_rowDefs","_headerRowDefs","_footerRowDefs","_dataDiffer","_defaultRowDef","_customColumnDefs","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_customNoDataRow","_headerRowDefChanged","_footerRowDefChanged","_stickyColumnStylesNeedReset","_forceRecalculateCellWidths","_cachedRenderRowsMap","_stickyStyler","stickyCssClass","needsPositionStickyOnElement","_isServer","_isShowingNoDataRow","_hasAllOutlets","_hasInitialized","_cellRoleInternal","tableRole","getAttribute","trackBy","_trackByFn","dataSource","_dataSource","_switchDataSource","multiTemplateDataRows","_multiTemplateDataRows","_forceRenderDataRows","updateStickyColumnStyles","fixedLayout","_fixedLayout","contentChanged","viewChange","BehaviorSubject","Number","MAX_VALUE","_contentColumnDefs","_contentRowDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_noDataRow","_injector","Injector","isBrowser","nodeName","_setupStickyStyler","_i","dataRow","dataIndex","data","ngAfterContentChecked","_canRender","_render","def","isDataSource","renderRows","_getAllRenderRows","_updateNoDataRow","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","item","operation","_ViewRepeaterOperation","INSERTED","_renderCellTemplateForItem","rowDef","_updateRowIndexContext","forEachIdentityChange","rowView","addColumnDef","removeColumnDef","addRowDef","removeRowDef","addHeaderRowDef","headerRowDef","removeHeaderRowDef","addFooterRowDef","footerRowDef","removeFooterRowDef","setNoDataRow","noDataRow","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","closestTableSection","display","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","footerRow","values","_cacheRowDefs","_cacheColumnDefs","rowDefsChanged","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_observeRenderChanges","_checkStickyStates","prevCachedRenderRows","renderRowsForData","_getRenderRowsForData","j","renderRow","cache","_getRowDefs","cachedRenderRows","shift","mergeArrayAndSet","_getOwnDefs","defaultRowDefs","columnsDiffReducer","acc","dataColumnsChanged","reduce","headerColumnsChanged","footerColumnsChanged","dataStream","connect","isObservable","of","_renderRow","columnDefs","columnName","rowOutlet","renderedRows","viewRef","rootNodes","rowDefs","outlet","view","createEmbeddedView","cellTemplate","_getCellTemplates","renderIndex","count","last","even","odd","columnId","stickyCheckReducer","items","shouldShow","container","rootNode","useClass","_DisposeViewRepeaterStrategy","useValue","array","concat","section","uppercaseSection","toUpperCase","current","parentNode","CdkTableModule","ScrollingModule","MatTable_Conditional_2_Template","uh","gh","MatTable","qe","_h","ph","hh","MatCellDef","MatHeaderCellDef","MatColumnDef","MatHeaderCell","MatCell","MatHeaderRowDef","MatRowDef","MatHeaderRow","MatRow","MatNoDataRow","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","DataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","filteredData","_filterData","_updateChangeSubscription","paginator","_paginator","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","valueA","valueB","valueAType","valueBType","comparatorResult","filterPredicate","transformedFilter","toLowerCase","Object","initialData","pageChange","combineLatest","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","filteredDataLength","lastPageIndex","newPageIndex","ExercisesService","http","HttpClient","apiURLExercises","environment","apiURL","apiURLMuscles","apiURLBodyAreas","apiURLMovements","apiURLStartingPositions","apiURLEquipments","getExercises","getExercise","exerciseId","createExercise","exerciseData","post","updateExercise","put","deleteExercise","getMuscles","createMuscle","muscle","getBodyAreas","createBodyArea","bodyArea","getMovements","createMovement","movement","getStartingPositions","createStartingPosition","startingPosition","getEquipments","createEquipment","equipment","BodyAreasService","getBodyArea","bodyAreaId","updateBodyArea","deleteBodyArea","MovementsService","getMovement","movementId","updateMovement","deleteMovement","StartingPositionsService","getStartingPosition","startingPositionId","updateStartingPosition","deleteStartingPosition","EquipmentService","getEquipment","equipmentId","updateEquipment","deleteEquipment","SearchService","apiURLSearch","searchExercises","searchTerm","filters","langCode","requstBody","ShareDataService","data$","searchedData$","asObservable","data2$","filterData$","updateSearchResults","updateFilterResults","data2","AddRemoveDataService","sharedDataService","dataSignal","addDataItem","localeName","itemIndex","findIndex","console","log","updatedData","localeNames","removeDataItem","v","splice","resetAll","ShareStateService","drawerSignal","listOption","isFetchingData","isLoading","SelectedExercisesService","selectedExercises","addToSelected","exercise","selectedExercise","reps","sets","pause","weight","removeFromSelected","ProgramDataService","programData","notes","programId","programName","ProgramClientsDataService","programClientsData","selectedClients","dateRange","ProgramsService","apiURLPrograms","isAdminProgram","getPrograms","getProgram","createProgram","updateProgram","deleteProgram","IsClientValidService","isClientValid","ClientsService","apiURLClients","getClients","getClientsBasic","getClient","clientId","createClient","clientData","updateClient","deleteClient","getClientProgram","getAllClientsPrograms","getAllClientsProgramsBasic","updateClientProgram","updatedProgram","programPosition","positionParam","deleteClientProgram","ShareClientsDataService","clients","isClientProgram","clientInfo","clientName","reuseProgram","isBrandNewClientsProgram","DropListTransferItemService","transferringItem","bh","DialogConfig","viewContainerRef","hasBackdrop","backdropClass","disableClose","minWidth","minHeight","maxWidth","maxHeight","positionStrategy","ariaDescribedBy","ariaLabelledBy","ariaModal","autoFocus","restoreFocus","scrollStrategy","closeOnNavigation","closeOnDestroy","closeOnOverlayDetachments","componentFactoryResolver","templateContext","CdkDialogContainer","BasePortalOutlet","_focusTrapFactory","FocusTrapFactory","_config","_interactivityChecker","InteractivityChecker","_overlayRef","OverlayRef","_portalOutlet","_focusTrap","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","_ariaLabelledByQueue","_isDestroyed","_addAriaLabelledBy","_removeAriaLabelledBy","_contentAttached","_initializeFocusTrap","_handleBackdropClicks","_captureInitialFocus","_trapFocus","_restoreFocus","attachComponentPortal","portal","hasAttached","result","attachTemplatePortal","attachDomPortal","_recaptureFocus","_containsFocus","_forceFocus","isFocusable","callback","deregisterBlur","deregisterMousedown","_focusByCssSelector","selector","elementToFocus","focusInitialElement","_focusDialogContainer","focusConfig","focusTargetElement","activeElement","_getFocusedElementPierceShadowDom","body","focusVia","backdropClick","CdkPortalOutlet","DialogRef","overlayRef","config","componentInstance","componentRef","containerInstance","closed","keydownEvents","outsidePointerEvents","_detachSubscription","focusOrigin","detachments","closedSubject","dispose","updatePosition","updateSize","addPanelClass","classes","removePanelClass","DIALOG_SCROLL_STRATEGY","block","DIALOG_DATA","DEFAULT_DIALOG_CONFIG","Dialog","_overlay","_parentDialog","_overlayContainer","OverlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","openDialogs","afterOpened","afterAllClosed","_getAfterAllClosed","componentOrTemplateRef","__spreadValues","getDialogById","overlayConfig","_getOverlayConfig","dialogRef","dialogContainer","_attachContainer","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","reverseForEach","dialog","OverlayConfig","global","centerHorizontally","centerVertically","disposeOnNavigation","userInjector","containerType","containerPortal","ComponentPortal","parent","attach","instance","_createInjector","TemplatePortal","contentRef","fallbackInjector","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","MatDialogContainer_ng_template_2_Template","MatDialogConfig","delayFocusTrap","enterAnimationDuration","exitAnimationDuration","OPEN_CLASS","OPENING_CLASS","CLOSING_CLASS","OPEN_ANIMATION_DURATION","CLOSE_ANIMATION_DURATION","MatDialogContainer","_animationMode","_animationStateChanged","_animationsEnabled","_actionSectionCount","_hostElement","_enterAnimationDuration","parseCssTime","_exitAnimationDuration","_animationTimer","_startOpenAnimation","totalTime","setProperty","TRANSITION_DURATION_PROPERTY","_requestAnimationFrame","_waitForAnimationToComplete","_finishDialogOpen","_startExitAnimation","_finishDialogClose","_updateActionSectionCount","delta","_clearAnimationClasses","_openAnimationDone","duration","requestAnimationFrame","ref","location","Mh","time","endsWith","coerceNumberProperty","substring","MatDialogState","OPEN","CLOSING","CLOSED","MatDialogRef","_ref","_containerInstance","_afterOpened","_beforeClosed","_result","_closeFallbackTimeout","_state","_closeDialogVia","dialogResult","detachBackdrop","afterClosed","beforeClosed","strategy","getState","interactionType","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MatDialog","_dialog","dialogConfigClass","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","cdkRef","__spreadProps","cdkConfig","_closeDialogs","dialogs","MatDialogClose","_matDialogClose","getClosestDialog","proxiedChange","_matDialogCloseResult","_onButtonClick","screenX","screenY","MatDialogLayoutSection","_dialogRef","_onAdd","_onRemove","MatDialogTitle","MatDialogContent","ɵɵHostDirectivesFeature","CdkScrollable","MatDialogActions","align","BROWSER_STORAGE","localStorage","BrowserStorageService","storage","key","getItem","setItem","removeItem","LOCAL_STORAGE_KEY","ThemeManagerService","document","browserStorage","isDark","_window","defaultView","themeSignal","overflow","y","scrollbars","theme","autoHide","autoHideDelay","customScrollbarOptions","visibility","getStoredTheme","JSON","parse","setStoredTheme","meta","stringify","getPreferredTheme","storedTheme","matchMedia","matches","setTheme","documentElement","setMaterialTheme","addEventListener","getLinkElementForKey","removeStyle","existingLinkElement","getExistingLinkElementByKey","head","removeChild","changeTheme","scrollbarTheme","createLinkElementWithKey","getClassNameForKey","linkEl","createElement","appendChild","PaginatorI18nService","$localize","amountPages","ActivePageService","pageTitle","backNavigation","toSignal","requiresCleanup","manualCleanup","assertInInjectionContext","cleanupRef","DestroyRef","equal","makeToSignalEqual","requireSync","kind","initialValue","sub","error","rejectErrors","_RuntimeError","ngDevMode","onDestroy","bind","computed","userEquality","is","ScreenSizeService","breakpointObserver","BreakpointObserver","compactBP","mediumBP","expandedBP","screenSize","isCompact","breakpoints","isMedium","isExpanded","shareReplay","bufferSize","refCount","tap","CountriesLibService","apiURLCountriesLib","getCountriesLib","lang","DynamicFabButtonComponent","isScrolling","input","matTooltip","newButtonString","newFabEvent","ɵɵtext","ɵɵproperty","ɵɵtextInterpolate1","CommonModule","MatFabButton","MatIconModule","MatIcon","Rh","wh","Dh","Nh","ɵɵrestoreView","_r4","ɵɵresetView","printEvent","kh","PageToolbarComponent_Conditional_2_Conditional_4_Conditional_2_Template","PageToolbarComponent_Conditional_2_Conditional_4_Conditional_7_Template","deleteEvent","ɵɵtextInterpolate","getDynamicPageTypeString","ɵɵpureFunction1","editMode","itemName","pageType","Ah","Fh","cancelEvent","PageToolbarComponent_Conditional_2_Conditional_4_Template","PageToolbarComponent_Conditional_2_Conditional_5_Template","Bh","$h","ɵɵi18n","Gh","_r6","onSubmit","Uh","_r7","zh","_r8","newEvent","Vh","PageToolbarComponent_Conditional_7_Conditional_0_Template","PageToolbarComponent_Conditional_7_Conditional_1_Template","tmp_1_0","PageToolbarComponent","router","Router","shareStateService","screenSizeService","cancelButton","submitButton","newButton","submitEvent","action","i18n_0","PageToolbarComponent_Conditional_2_Template","PageToolbarComponent_Conditional_3_Template","PageToolbarComponent_Conditional_5_Template","PageToolbarComponent_Conditional_6_Template","PageToolbarComponent_Conditional_7_Template","NgStyle","MatButton","MatDividerModule","MatDivider","MatChip_Conditional_3_Template","MatChip_Conditional_7_Template","MatChipRow_Conditional_0_Template","MatChipRow_Conditional_2_Template","MatChipRow_Conditional_4_Conditional_0_Template","MatChipRow_Conditional_4_Conditional_1_Template","MatChipRow_Conditional_4_Template","iu","contentEditInput","MatChipRow_Conditional_5_Template","MatChipRow_Conditional_7_Template","_c5","_c6","MAT_CHIPS_DEFAULT_OPTIONS","separatorKeyCodes","MAT_CHIP_AVATAR","MAT_CHIP_TRAILING_ICON","MAT_CHIP_REMOVE","MAT_CHIP","MatChipAction","_parentChip","isInteractive","_isPrimary","_allowFocusWhenDisabled","_getDisabledAttribute","_getTabindex","_handleClick","_handlePrimaryActionInteraction","_isEditing","MatChipRemove","stopPropagation","MatChip","_globalRippleOptions","MAT_RIPPLE_GLOBAL_OPTIONS","_isBasicChip","_hasFocusInternal","_pendingFocus","_actionChanges","_allLeadingIcons","_allTrailingIcons","_allRemoveIcons","_hasFocus","ariaDescription","_ariaDescriptionId","_chipListDisabled","_textElement","removable","highlighted","destroyed","basicChipAttrName","leadingIcon","trailingIcon","removeIcon","primaryAction","_rippleLoader","MatRippleLoader","animationMode","_monitorFocus","configureRipple","className","_isRippleDisabled","tagName","setDisabled","destroyRipple","chip","_hasTrailingIcon","BACKSPACE","repeat","DELETE","_getSourceAction","_getActions","origin","hasFocus","run","Ei","Wh","Qh","Kh","MatChipEditInput","initialize","getNativeElement","setValue","_moveCursorToEndOfInput","getValue","range","createRange","selectNodeContents","collapse","sel","window","getSelection","removeAllRanges","addRange","MatChipRow","_editStartPending","editable","edited","defaultEditInput","_onEditFinish","_handleFocus","_startEditing","_handleDoubleclick","_getEditInput","Jh","Zh","eu","tu","ou","ru","MatChipSet","_lastDestroyedFocusedChipIndex","_defaultRole","chipFocusChanges","_getChipStream","chipDestroyedChanges","chipRemovedChanges","_syncChipsState","_chips","_explicitRole","_hasFocusedChip","_chipActions","QueryList","_setUpFocusManagement","_trackChipSetChanges","_trackDestroyedFocusedChip","_originatesFromChip","_isValidIndex","_allowFocusEscape","previous","mappingFunction","currentElement","chips","actions","reset","notifyOnChanges","FocusKeyManager","_redirectDestroyedChipFocus","chipIndex","newIndex","chipToFocus","setPreviousItemActive","MatChipGridChange","MatChipGrid","_chipInput","_ariaDescribedbyIds","chipBlurChanges","_blur","registerInput","inputElement","setFirstItemActive","_markAsTouched","TAB","_focusLastChip","eligibleActions","nm","su","MatChipInput","chipGrid","_chipGrid","addOnBlur","chipEnd","formField","_keydown","_emitChipEnd","_focus","_isSeparatorKey","chipInput","_onInput","invalid","MatChipsModule","createCache","s","cacheUpdateContextual","l","HTMLElement","round","abs","sign","cancelAnimationFrame","getApi","_","isUndefined","isNull","isNumber","isString","isBoolean","isFunction","isObject","isArrayLike","isPlainObject","isHTMLElement","isElement","Element","each","keys","inArray","prototype","apply","createOrKeepArray","isEmptyArray","deduplicateArray","runEachAndClear","h","g","m","H","capitalizeFirstLetter","String","equalWH","equalXY","equalTRBL","noop","selfClearTimeout","debounce","mergeParms","flush","arguments","hasOwnProperty","call","assignDeep","removeUndefinedProperties","isEmptyObject","capNumber","getDomTokensArray","split","getAttr","hasAttr","setAttrs","removeAttrs","domTokenListAttr","domTokenListOperation","removeAttrClass","addAttrClass","addRemoveAttrClass","hasAttrClass","createDomTokenListClass","removeClass","addClass","querySelectorAll","findFirst","isBodyElement","contents","childNodes","getFocusedElement","liesBetween","removeElements","appendChildren","createDiv","createDOM","innerHTML","getCSSVal","getPropertyValue","validFiniteNumber","isFinite","parseToZeroOrNumber","parseFloat","roundCssNumber","numberToCssPx","setStyles","getStyles","getComputedStyle","topRightBottomLeft","getTrasformTranslateValue","elementHasDimensions","offsetWidth","getClientRects","z","getElmWidthHeightProperty","getWindowSize","D","getFractionalSize","hasDimensions","domRectHasDimensions","domRectAppeared","removeEventListener","passive","capture","stopAndPrevent","scrollElementTo","scrollLeft","getElementScroll","getZeroScrollCoordinates","M","sanitizeScrollCoordinates","sanitizeAxis","isDefaultDirectionScrollCoordinates","getAxis","getScrollCoordinatesPercent","focusElement","preventScroll","manageListener","createEventListenerHub","removeEvent","addEvent","triggerEvent","opsStringify","getPropByPath","paddingAbsolute","showNativeOverlaidScrollbars","elementEvents","attributes","ignoreMutation","autoHideSuspend","dragScroll","clickScroll","pointers","getOptionsDiff","createOptionCheck","k","R","V","L","U","P","B","X","Y","W","J","G","Q","tt","nt","ot","st","et","rt","it","at","ut","dt","ft","vt","pt","ht","gt","bt","wt","yt","St","getNonce","setNonce","mt","createEnvironment","getNativeScrollbarSize","getNativeScrollbarsHiding","firstChild","lastChild","nonce","host","padding","viewport","content","slot","cancel","nativeScrollbarsOverlaid","addZoomListener","devicePixelRatio","getEnvironment","resolveInitialization","staticInitializationElement","dynamicInitializationElement","cancelInitialization","Ot","addInstance","removeInstance","getInstance","createEventContentChange","updateElements","createDOMObserver","observerCallback","attributeName","oldValue","addedNodes","removedNodes","attributeOldValue","attributeFilter","subtree","childList","characterData","takeRecords","$t","addPlugins","registerPluginModuleInstances","static","getStaticPluginModuleInstance","xt","Ht","getShowNativeOverlaidScrollbars","overflowIsVisible","createViewportOverflowState","getAxisOverflowStyle","zt","At","createSizeObserver","onSizeChangedCallbackProxy","ResizeObserverEntry","pop","createTrinsicObserver","isHeightIntrinsic","isIntersecting","intersectionRatio","triggerOnTrinsicChangedCallback","intersectionObserverCallback","root","onSizeChanged","createObserversSetup","getDirectionIsRTL","setDirection","onTrinsicChanged","onContentMutation","onHostMutation","Et","It","Dt","ignoreMutationFromOptions","createScrollbarsSetupElements","Mt","initScrollTimeline","axis","kt","Tt","animate","timeline","getViewportPercent","Rt","Vt","getAxisValue","scrollbarStructureAddRemoveClass","scrollbarStyle","scrollbarsAddRemoveClass","refreshScrollbarsHandleLength","createScrollbarStyleFn","refreshScrollbarsHandleOffset","Lt","refreshScrollbarsScrollCoordinates","refreshScrollbarsScrollbarOffset","styleScrollbarPosition","getTranslateValue","transform","generateScrollbarDOM","Ut","Pt","appendElements","Nt","qt","Ft","jt","Xt","Yt","Wt","Jt","Gt","createScrollbarsSetupEvents","Kt","scrollOffsetElementScrollBy","scrollBy","behavior","createInteractiveScrollEvents","createRelativeHandleMove","button","isPrimary","pointerType","getHandleOffset","releasePointerCapture","pointerId","setPointerCapture","deltaX","deltaY","deltaMode","createScrollbarsSetup","isHoverablePointerType","manageScrollbarsAutoHideInstantInteraction","Qt","manageScrollbarsAutoHide","manageAutoHideSuspension","onHostMouseEnter","Zt","tn","nn","sn","en","cn","rn","setScrollbarVisibility","createStructureSetupElements","ownerDocument","getDocumentWindow","elementHasOverflow","elementIsGenerated","ln","an","un","unwrap","prepareWrapUnwrapFocus","createTrinsicUpdateSegment","_n","createPaddingUpdateSegment","dn","createOverflowUpdateSegment","flexDirection","writingMode","setMeasuringMode","getMeasuredScrollCoordinates","isTrusted","getOverflowAmount","createViewportOverflowStyleClassName","setViewportOverflowStyle","createAllOverflowStyleClassNames","vn","createStructureSetup","createSetups","updateHintsAreTruthy","pn","hn","gn","bn","wn","yn","OverlayScrollbars","validateOptions","updateHints","sizeChanged","directionChanged","heightIntrinsicChanged","overflowEdgeChanged","overflowAmountChanged","overflowStyleChanged","scrollCoordinatesChanged","contentMutation","hostMutation","appear","changedOptions","force","on","off","overflowEdge","overflowAmount","overflowStyle","hasOverflow","scrollCoordinates","directionRTL","translateScrollbarStructure","scrollbar","track","handle","translateScrollbarsSetupElement","clone","scrollOffsetElement","scrollEventElement","scrollbarHorizontal","scrollbarVertical","plugin","valid","env","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","scrollTimeline","staticDefaultInitialization","staticDefaultOptions","getDefaultInitialization","setDefaultInitialization","getDefaultOptions","setDefaultOptions","createDefer","idleId","rafId","wnd","idleSupported","requestIdleCallback","rAF","cAF","rIdle","cIdle","cancelIdleCallback","timeout","OverlayScrollbarsDirective","ngZone","instanceRef","requestDefer","cancelDefer","osInitialize","init","events","osInstance","optionsChange","eventsChange","curr","standalone","mergeEventListeners","emits","emitListener","eventListener","Boolean","OverlayScrollbarsComponent","targetRef","onInitialized","onUpdated","onDestroyed","onScroll","osDirective","getElement","targetElm","contentElm","mergeEvents","originalEvents","args","dispatchEventIfHasObservers","updated","scroll","eventEmitter","observed","observers","up","OverlayscrollbarsModule","_MatInternalFormField","labelPosition","MAT_DATE_LOCALE","MAT_DATE_LOCALE_FACTORY","LOCALE_ID","NOT_IMPLEMENTED","DateAdapter","locale","_localeChanges","localeChanges","setTime","hours","minutes","seconds","Error","getHours","date","getMinutes","getSeconds","parseTime","parseFormat","addSeconds","amount","getValidDateOrNull","isDateInstance","isValid","deserialize","setLocale","compareDate","second","getYear","getMonth","getDate","compareTime","sameDate","firstValid","secondValid","sameTime","clampDate","MAT_DATE_FORMATS","ISO_8601_REGEX","TIME_REGEX","valueFunction","valuesArray","NativeDateAdapter","useUtcForDisplay","_matDateLocale","matDateLocale","getFullYear","getDayOfWeek","getDay","getMonthNames","dtf","Intl","DateTimeFormat","month","timeZone","_format","Date","getDateNames","day","getDayOfWeekNames","weekday","getYearName","year","getFirstDayOfWeek","Locale","firstDay","getWeekInfo","weekInfo","getNumDaysInMonth","_createDateWithOverflow","getTime","createDate","today","format","displayFormat","addCalendarYears","years","addCalendarMonths","months","newDate","addCalendarDays","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","NaN","setHours","userValue","_parseTimeString","withoutExtras","setFullYear","setUTCFullYear","setUTCHours","getMilliseconds","parsed","match","amPm","inRange","MAT_NATIVE_DATE_FORMATS","dateInput","timeInput","hour","minute","monthYearLabel","dateA11yLabel","monthYearA11yLabel","timeOptionLabel","provideNativeDateAdapter","formats","MAT_CHECKBOX_DEFAULT_OPTIONS","MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY","clickAction","disabledInteractive","TransitionCheckState","Init","Checked","Unchecked","Indeterminate","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatCheckbox","multi","MatCheckboxChange","checked","_options","_inputElement","_createChangeEvent","isChecked","_getAnimationTargetElement","_animationClasses","uncheckedToChecked","uncheckedToIndeterminate","checkedToUnchecked","checkedToIndeterminate","indeterminateToChecked","indeterminateToUnchecked","ariaDescribedby","ariaExpanded","ariaControls","ariaOwns","_uniqueId","inputId","indeterminateChange","_labelElement","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_validatorChangeFn","_syncIndeterminate","_indeterminate","_checked","indeterminate","_transitionCheckState","_onLabelTextChange","validate","registerOnValidatorChange","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass","_emitChangeEvent","_handleInputClick","_onInteractionEvent","nativeCheckbox","_onInputClick","_onTouchTargetClick","_preventBubblingFromLabel","vg","Eg","NG_VALIDATORS","Sg","checkbox_r2","MatCheckboxModule","MatProgressSpinner_ng_template_0_Template","_viewBox","Ki","_strokeCircumference","_circleStrokeWidth","_circleRadius","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","diameter","BASE_SIZE","BASE_STROKE_WIDTH","MatProgressSpinner","_noopAnimations","_color","_defaultColor","_determinateCircle","_forceAnimations","mode","strokeWidth","_diameter","_strokeWidth","viewBox","PI","_strokeDashOffset","xg","Ig","ko","circle_r2","NgTemplateOutlet","MatProgressSpinnerModule","a0","a1","MatSelectSearchComponent_mat_checkbox_4_Template","_r2","ctx_r2","_emitSelectAllBooleanToParent","matFormField","toggleAllCheckboxChecked","toggleAllCheckboxIndeterminate","toggleAllCheckboxTooltipMessage","toggleAllCheckboxTooltipPosition","MatSelectSearchComponent_mat_spinner_7_Template","MatSelectSearchComponent_button_8_ng_content_1_Template","MatSelectSearchComponent_button_8_ng_template_2_Template","closeSvgIcon","closeIcon","MatSelectSearchComponent_button_8_Template","_reset","$g","ɵɵtemplateRefExtractor","defaultIcon_r5","clearIcon","MatSelectSearchComponent_div_11_ng_content_1_Template","MatSelectSearchComponent_div_11_ng_template_2_Template","noEntriesFoundLabel","MatSelectSearchComponent_div_11_Template","zg","defaultNoEntriesFound_r6","noEntriesFound","MatSelectSearchClearDirective","configurableDefaultOptions","MAT_SELECTSEARCH_DEFAULT_OPTIONS","MatSelectNoEntriesFoundDirective","MatSelectSearchComponent","matSelect","changeDetectorRef","matOption","placeholderLabel","clearSearchInput","searching","disableInitialFocus","enableClearOnEscapePressed","preventHomeEndKeyPropagation","disableScrollToActiveOnOptionsChanged","showToggleAllCheckbox","hideClearSearchButton","alwaysRestoreSelectedOptionsMulti","recreateValuesArray","toggleAll","searchSelectInput","innerSelectSearch","_formControl","_lastExternalInputValue","onTouched","_options$","optionsList$","optionsLength$","previousSelectedValues","FormControl","nonNullable","_showNoEntriesFound$","valueChanges","optionsLength","getOptionsLengthOffset","activeDescendant","applyDefaultOptions","delay","opened","updateInputWidth","previousFirstOption","currentFirstOption","keyManager","showNoEntriesFound","initMultipleHandling","_isToggleAllCheckboxVisible","_handleKeyup","ariaActiveDescendantId","unselectActiveDescendant","onBlur","restoreSelectedValues","optionValues","panelElement","clientWidth","wg","Dg","Ng","Fg","Bg","Xg","Bi","xc","Ag","An","NgIf","DefaultValueAccessor","NgControlStatus","FormControlDirective","AsyncPipe","NgxMatSelectSearchModule","ReactiveFormsModule","qg","Qg","UploadImageComponent","Kg","Yg","Zg","Jg","ef","country_r1","tf","nf","ClientFullEditFormComponent_Conditional_58_Conditional_1_Defer_2_Template","ClientFullEditFormComponent_Conditional_58_Conditional_1_DeferPlaceholder_3_Template","ɵɵdefer","ClientFullEditFormComponent_Conditional_58_Conditional_1_Defer_4_DepsFn","ɵɵdeferEnableTimerScheduling","Ma","af","qualification_r4","ctx_r4","removeQualification","editQualification","licence_r7","removeLicence","editLicence","sf","ClientFullEditFormComponent_Conditional_58_Conditional_1_Template","ɵɵrepeaterCreate","ClientFullEditFormComponent_Conditional_58_For_15_Template","ɵɵrepeaterTrackByIdentity","addQualification","ClientFullEditFormComponent_Conditional_58_For_23_Template","addLicence","isUserForm","qualificationsFormCtrl","ɵɵrepeater","qualifications","separatorKeysCodes","qualificationsChipGrid_r8","licencesFormCtrl","licences","licencesChipGrid_r9","ClientFullEditFormComponent","controlContainer","ControlContainer","announcer","localStorageService","LocalstorageService","countriesLibService","isClient","countries","countryFilterCtrl","filteredCountries","COMMA","themeManager","_getCountries","filterCountries","_initForm","getToken","localeCompare","clientInfoForm","form","countryCtrl","setInitialValue","singleSelect","search","country","qualification","licence","ClientFullEditFormComponent_Conditional_10_Template","ClientFullEditFormComponent_Conditional_15_Template","ClientFullEditFormComponent_Conditional_21_Template","ClientFullEditFormComponent_Conditional_26_Template","ClientFullEditFormComponent_For_56_Template","ClientFullEditFormComponent_Conditional_58_Template","tmp_3_0","tmp_4_0","tmp_5_0","tmp_6_0","ɵɵpipeBind1","FormsModule","ɵNgNoValidate","NgControlStatusGroup","FormControlName","FormGroupName","MatLabel","MatInput","MatError","DeleteConfirmationDialogComponent","onConfirm","onClose","title","message","CDK_ACCORDION","CdkAccordion","_openCloseAllActions","openAll","CdkAccordionItem","accordion","_expansionDispatcher","UniqueSelectionDispatcher","_openCloseAllSubscription","Subscription","EMPTY","expandedChange","expanded","_expanded","accordionId","notify","_removeUniqueSelectionListener","_subscribeToOpenCloseAllActions","MatExpansionPanel_ng_template_7_Template","MatExpansionPanelHeader_Conditional_4_Template","MAT_ACCORDION","MAT_EXPANSION_PANEL","MatExpansionPanelContent","_template","_expansionPanel","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","_viewContainerRef","_cleanupTransitionEnd","hideToggle","_hideToggle","togglePosition","_togglePosition","afterExpand","afterCollapse","_inputChanges","_lazyContent","_body","_bodyWrapper","_portal","_headerId","_hasSpacing","displayMode","_getExpandedState","_setupAnimationEvents","focusedElement","bodyElement","_transitionEndListener","propertyName","mf","df","pf","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","expandedHeight","collapsedHeight","_toggle","_isExpanded","_getPanelId","_getTogglePosition","_showToggle","_getHeaderHeight","_handleHeaderKeydown","_handleHeaderFocus","_f","uf","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_ownHeaders","_headers","headers","header","withWrap","ff","selectedExercise_r2","Cf","bf","vf","ProgramModalComponent_For_18_Conditional_33_For_4_Conditional_2_Template","$index","$count","equipment_r4","translations","selectedLang","ɵ$index_116_r5","ɵ$count_116_r6","Ef","ProgramModalComponent_For_18_Conditional_33_For_4_Template","equipments","Sf","showExerciseModal","ProgramModalComponent_For_18_Conditional_31_Template","ProgramModalComponent_For_18_Conditional_32_Template","ProgramModalComponent_For_18_Conditional_33_Template","ɵ$index_32_r7","images","mainImg","ɵɵsanitizeUrl","description","ProgramModalComponent","exercisesService","subscriptions","addProgramToClient","_getExercise","exerciseCard","isProgramExercise","subscription","ExerciseModalComponent","fullExercise","ProgramModalComponent_For_18_Template","program","diagnosis","yf","BasicProgramsTableComponent","Mf","Tf","xf","If","Of","Pf","Lf","ɵɵi18nStart","ClientFullEditProgramsComponent_For_15_th_1_Conditional_2_Template","ClientFullEditProgramsComponent_For_15_th_1_Conditional_3_Template","ClientFullEditProgramsComponent_For_15_th_1_Conditional_4_Template","ClientFullEditProgramsComponent_For_15_th_1_Conditional_5_Template","ClientFullEditProgramsComponent_For_15_th_1_Conditional_6_Template","ɵɵi18nEnd","column_r1","Rf","wf","Df","ClientFullEditProgramsComponent_For_15_td_2_Conditional_1_Conditional_1_Template","ClientFullEditProgramsComponent_For_15_td_2_Conditional_1_Conditional_2_Template","element_r2","isProgramCompleted","Nf","kf","ɵɵtextInterpolate2","ɵɵpipeBind2","Af","Ff","ClientFullEditProgramsComponent_For_15_td_2_Conditional_1_Template","ClientFullEditProgramsComponent_For_15_td_2_Conditional_2_Template","ClientFullEditProgramsComponent_For_15_td_2_Conditional_3_Template","ClientFullEditProgramsComponent_For_15_td_2_Conditional_4_Template","Bf","ɵɵelementContainerStart","ClientFullEditProgramsComponent_For_15_th_1_Template","ClientFullEditProgramsComponent_For_15_td_2_Template","ɵɵpropertyInterpolate","$f","Gf","element_r5","ctx_r5","openEditClientProgramDialog","Uf","zf","Vf","ClientFullEditProgramsComponent_td_18_Conditional_2_Template","reuseEditProgram","openDeleteConfirmationDialog","expandedElement","ClientFullEditProgramsComponent_td_18_Conditional_10_Template","ClientFullEditProgramsComponent_td_18_Conditional_11_Template","Xf","ɵɵi18nExp","selectedExercise_r7","yi","Hf","jf","wo","Do","Wf","ClientFullEditProgramsComponent_td_20_For_4_Conditional_13_For_3_Conditional_2_Template","ɵ$index_160_r9","ɵ$count_160_r10","equipment_r8","selectedLanguage","qf","ClientFullEditProgramsComponent_td_20_For_4_Conditional_13_For_3_Template","Qf","ClientFullEditProgramsComponent_td_20_For_4_Conditional_11_Template","ClientFullEditProgramsComponent_td_20_For_4_Conditional_12_Template","ClientFullEditProgramsComponent_td_20_For_4_Conditional_13_Template","Kf","ClientFullEditProgramsComponent_td_20_For_4_Template","columnsToDisplayWithExpand","element_r11","Yf","Zf","element_r13","_r12","Jf","eC","tC","_r14","viewProgramModal","dataSourceAllPrograms","iC","ClientFullEditProgramsComponent","programsService","datePipe","DatePipe","_snackBar","MatSnackBar","formGroupDirective","shareClientsDataService","clientsService","localstorageService","columnsToDisplay","dataSourceClientsPrograms","selection","clientsPrograms","allPrograms","_getUserLanguageToken","client","getClientsPrograms","adaptedProgram","currentDate","programEndDate","navigate","queryParams","res","removeAt","isAllSelected","numSelected","numRows","toggleAllRows","navigateByUrl","programsList","isTemplate","startDate","endDate","newProgram","templateProgramId","updatedPrograms","updatedClient","firstName","lastName","email","phone","address","street","streetNumber","city","zipCode","programs","newAddedProgram","fs","ClientFullEditProgramsComponent_For_15_Template","ClientFullEditProgramsComponent_th_17_Template","ClientFullEditProgramsComponent_td_18_Template","ClientFullEditProgramsComponent_td_20_Template","ClientFullEditProgramsComponent_tr_21_Template","ClientFullEditProgramsComponent_tr_22_Template","ClientFullEditProgramsComponent_tr_23_Template","ClientFullEditProgramsComponent_tr_24_Template","ClientFullEditProgramsComponent_Defer_26_Template","ClientFullEditProgramsComponent_DeferPlaceholder_27_Template","ClientFullEditProgramsComponent_Defer_28_DepsFn","ɵɵpureFunction0","animation","transition","MatButtonToggle_Conditional_2_Template","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_DEFAULT_OPTIONS_FACTORY","hideMultipleSelectionIndicator","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleChange","_changeDetector","_disabledInteractive","_rawValue","_buttonToggles","appearance","_markButtonsForCheck","vertical","_hideMultipleSelectionIndicator","_initializeTabIndex","buttonId","nextButton","_getNextButton","_syncButtonToggle","deferEvents","_updateModelValue","_isSelected","_isPrechecked","toggles","_clearSelection","_selectValue","every","_markForCheck","MatButtonToggle","_buttonElement","buttonToggleGroup","_tabIndex","_appearance","toggleGroup","defaultTabIndex","newChecked","isSingleSelector","focusable","_getButtonName","nC","aC","button_r3","lC","cC","dC","row_r2","mC","pC","_C","hC","ProgramsTableComponent_td_24_Conditional_1_Conditional_2_Template","ProgramsTableComponent_td_24_Conditional_1_Conditional_3_Template","row_r3","uC","gC","ProgramsTableComponent_td_24_Conditional_1_Template","ProgramsTableComponent_td_24_Conditional_2_Template","fC","CC","row_r4","bC","vC","row_r6","ctx_r6","EC","openEditProgram","isAdmin","SC","ProgramsTableComponent_td_30_Conditional_3_Conditional_0_Template","yC","_r9","MC","_r10","TC","_r11","removeFromFavorites","xC","addToFavorites","IC","ProgramsTableComponent_td_30_Conditional_2_Template","ProgramsTableComponent_td_30_Conditional_3_Template","ProgramsTableComponent_td_30_Conditional_4_Template","ProgramsTableComponent_td_30_Conditional_5_Template","ProgramsTableComponent_td_30_Conditional_6_Template","ProgramsTableComponent_td_30_Conditional_7_Template","isFavorite","OC","PC","LC","input_r13","ProgramsTableComponent","displayedColumns","mainProgramsList","getProgramsEvent","reuseEditProgramEvent","openEditProgramEvent","openDeleteConfirmationDialogEvent","favoriteProgram","removeFavoriteProgram","itemId","applyFilter","filterValue","me","se","ee","ne","_e","fe","ae","i0","ɵɵtwoWayListener","ɵɵtwoWayBindingSet","ProgramsTableComponent_th_20_Template","ProgramsTableComponent_td_21_Template","ProgramsTableComponent_th_23_Template","ProgramsTableComponent_td_24_Template","ProgramsTableComponent_th_26_Template","ProgramsTableComponent_td_27_Template","ProgramsTableComponent_th_29_Template","ProgramsTableComponent_td_30_Template","ProgramsTableComponent_tr_31_Template","ProgramsTableComponent_tr_32_Template","ProgramsTableComponent_tr_33_Template","ɵɵtwoWayProperty","NgModel","RC","wC","client_r2","FilterSelectClientsComponent","clientFilterCtrl","filteredClients","isIndeterminate","isClientProgramSignal","clientCtrl","clientsList","filterClients","toggleSelectAll","selectAllValue","val","patchValue","FilterSelectClientsComponent_For_12_Template","MatPrefix","DC","clearSearch","SearchComponent","searchService","shareDataService","drawerOpen","debounceTime","distinctUntilChanged","filterData","searchResult","toggleDrawer","SearchComponent_Conditional_4_Template","MatSuffix","BaseTreeControl","dataNodes","expansionModel","getLevel","isExpandable","getChildren","dataNode","_trackByValue","expand","toggleDescendants","collapseDescendants","expandDescendants","collapseAll","toBeProcessed","getDescendants","FlatTreeControl","results","expandAll","node","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodeOutlet","_node","CdkTreeNodeOutletContext","level","CdkTreeNodeDef","getTreeControlMissingError","CdkTree","_defaultNodeDef","_dataSubscription","_levels","_parents","_ariaSets","treeControl","levelAccessor","childrenAccessor","expansionKey","_nodeOutlet","_nodeDefs","_expansionModel","_flattenedNodes","_nodeType","_nodes","_keyManagerNodes","_keyManagerFactory","TREE_KEY_MANAGER","_viewInit","_initializeKeyManager","_updateDefaultNodeDefinition","_subscribeToDataChanges","_checkTreeControlUsage","_initializeDataDiffer","defaultNodeDefs","_setNodeTypeIfUnset","newType","_getExpansionModel","_getRenderData","renderingData","_renderDataChanges","expansionChanges","_emitExpansionChanges","renderNodes","flattenedNodes","_computeRenderingData","convertedData","renderNodeChanges","_updateCachedData","_updateKeyManagerItems","nodes","_emitExpansionState","keyManagerNodes","_getExpansionKey","keyManagerOptions","typeAheadDebounceInterval","horizontalOrientation","_index","dataDiffer","parentData","forEachOperation","adjustedPreviousIndex","insertNode","move","newData","_getNodeDef","nodeDef","nodeData","_getLevelAccessor","CdkTreeNode","mostRecentTreeNode","_getDescendants","child","_forEachExpansionKey","_getChildrenAccessor","_getDirectChildren","_findChildrenByLevel","coerceObservable","levelDelta","dataNodeLevel","expectedLevel","currentLevel","_registerNode","_unregisterNode","_getLevel","_getSetSize","_getAriaSet","_getPositionInSet","_getNodeParent","_getNodeChildren","_sendKeydownToKeyManager","Infinity","_getAllChildrenRecursively","allChildren","nextChildren","concatMap","parentKey","_findParentForNode","cachedNodes","parentIndex","_flattenNestedNodesWithExpansion","childKey","nestedNodes","_clearPreviousCache","_calculateParents","toToggle","observables","inner","_tree","_tabindex","_type","_role","_isExpandable","_inputIsExpandable","_inputIsExpanded","typeaheadLabel","activation","_dataChanges","_shouldFocus","_parentNodeAriaLevel","isLeafNode","_getAriaExpanded","getParentNodeAriaLevel","getParent","unfocus","activate","makeFocusable","_focusItem","focusItem","_setActiveItem","nodeElement","isNodeElement","cssUnitPattern","CdkTreeNodePadding","_treeNode","_currentPadding","indentUnits","_level","_setLevelInput","indent","_indent","_setIndentInput","_setPadding","_paddingIndent","nodeLevel","forceChange","paddingProp","resetProp","units","parts","CdkTreeNodeToggle","recursive","isNoopTreeKeyManager","_isNoopTreeKeyManager","MatTreeNode","tabIndexInputBinding","_tabIndexInputBinding","_getTabindexAttribute","MatTreeNodeDef","MatTreeNodePadding","MatTreeNodeOutlet","MatTree","MatTreeNodeToggle","MatTreeFlattener","transformFunction","_flattenNode","resultNodes","parentMap","flatNode","childrenNodes","_flattenChildren","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","currentExpand","MatTreeFlatDataSource","_treeControl","_treeFlattener","_flattenedData","_expandedData","collectionViewer","BC","$C","localeName_r2","chipRemoveNode","GC","SearchFilterComponent_For_9_For_1_Template","category_r4","UC","node_r6","onCheckboxChange","zC","node_r7","CATEGORIES","categoryName","categoryNameLocale","SearchFilterComponent","bodyAreasService","movementsService","startingPositionsService","equipmentService","addRemoveDataService","toggleDrawerSignal","categoriesData","_transformer","expandable","treeFlattener","hasChild","_getBodyAreas","_getMovements","_getStartingPositions","_getEquipment","forkJoin","category","categoryChildren","nameValue","localeNameToRemove","indexToRemove","nodeToRemove","toggleChecked","valueChipRemove","localeNameChipRemove","bodyAreasList","bodyAreas","movementsList","movements","startingPositionsList","startingPositions","equipmentList","SearchFilterComponent_For_9_Template","_forTrack0","SearchFilterComponent_mat_tree_node_14_Template","SearchFilterComponent_mat_tree_node_15_Template","ExerciseSearchBtnsWrapperComponent","listOptionSignal","listOptionValue","effect","changeListOption","VC","XC","HC","thumbnail","jC","videoSrc","VideoPlayerComponent","isModal","isPlaying","video","videoPlayer","onMouseEnter","hoverTimeout","playVideo","onMouseLeave","pauseVideo","__async","once","play","loop","VideoPlayerComponent_Conditional_1_Template","VideoPlayerComponent_Conditional_4_Template","ɵɵpureFunction3","MatMenuItem_Conditional_4_Template","MatMenu_ng_template_0_Template","_onAnimationStart","_onAnimationDone","_classList","_panelAnimationState","_isAnimating","MAT_MENU_PANEL","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","_checkDisabled","_handleMouseEnter","cloneNode","icons","_setHighlighted","isHighlighted","_setTriggersSubmenu","triggersSubmenu","qC","KC","MAT_MENU_CONTENT","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","ENTER_ANIMATION","EXIT_ANIMATION","MatMenu","_xPosition","_yPosition","_firstItemFocusRef","_exitFallbackTimeout","_allItems","_directDescendantItems","_animationDone","parentMenu","setPositionClasses","lazyContent","previousPanelClass","_previousPanelClass","newClassList","_updateDirectDescendants","focusedItem","itemsList","setNextItemActive","_item","setFocusOrigin","focusFirstItem","menuPanel","_resolvePanel","resetActiveItem","setElevation","_depth","posX","posY","isExit","_setIsOpen","isOpen","ZC","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","passiveEventListenerOptions","PANELS_TO_TRIGGERS","MatMenuTrigger","_menuItemInstance","_cleanupTouchstart","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_pendingRemoval","_parentMaterialMenu","_parentInnerPadding","_openedBy","_deprecatedMatMenuTriggerFor","menu","_menu","reason","_destroyMenu","menuData","menuOpened","onMenuOpen","menuClosed","onMenuClose","renderer","_bindEventWithOptions","isFakeTouchstartFromScreenReader","_handleHover","_ownsMenu","menuOpen","toggleMenu","closeMenu","openMenu","previousTrigger","_createOverlay","getConfig","_setPosition","_getPortal","_menuClosingActions","_setIsMenuOpen","withLockedPosition","reapplyLastPosition","detach","_subscribeToPositions","flexibleConnectedTo","withGrowAfterOpen","withTransformOriginOn","positionChanges","connectionPair","originFallbackX","overlayFallbackY","originFallbackY","overlayFallbackX","offsetY","firstItem","withPositions","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","MatMenuModule","matMenuAnimations","transformMenu","definitions","opacity","expr","timings","fadeInItems","MatToolbarRow","MatToolbar","_toolbarRows","_checkToolbarMixedModes","rb","MatToolbarModule","db","onBack","mb","pb","ToolbarButtonsComponent_Conditional_3_Conditional_0_Template","ToolbarButtonsComponent_Conditional_3_Conditional_1_Template","_b","hb","ub","ToolbarButtonsComponent_Conditional_4_Conditional_0_Template","ToolbarButtonsComponent_Conditional_4_Conditional_1_Template","gb","fb","Cb","bb","vb","ToolbarButtonsComponent","usersService","UsersService","authService","AuthService","activePageTitle","Location","userName","getInitial","charAt","logoutUser","logout","ToolbarButtonsComponent_Conditional_3_Template","ToolbarButtonsComponent_Conditional_4_Template","ToolbarButtonsComponent_Conditional_5_Template","ToolbarButtonsComponent_Conditional_7_Template","ToolbarButtonsComponent_Conditional_9_Template","ToolbarButtonsComponent_Conditional_10_Template","ToolbarButtonsComponent_Conditional_18_Template","menu_r4","tmp_8_0","tmp_11_0","RouterLink","Qp","Eb","Sb","yb","muscle_r1","Mb","bodyArea_r2","Tb","movement_r4","xb","startingPosition_r5","Ib","equipment_r6","Ob","showHoverIcon","isHovered","Pb","Lb","ExerciseModalComponent_Conditional_47_Conditional_1_Template","ExerciseModalComponent_Conditional_47_Conditional_2_Template","Rb","selectedExercisesService","ExerciseModalComponent_Conditional_2_Template","ExerciseModalComponent_Conditional_3_Template","ExerciseModalComponent_For_22_Template","ExerciseModalComponent_For_28_Template","ExerciseModalComponent_For_34_Template","ExerciseModalComponent_For_40_Template","ExerciseModalComponent_For_46_Template","ExerciseModalComponent_Conditional_47_Template","ExerciseModalComponent_Conditional_48_Template","muscles","deepCloneNode","descendantsWithId","transferCanvasData","transferInputData","transferData","descendantElements","cloneElements","cloneUniqueId","getContext","drawImage","getMutableClientRect","rect","isInsideClientRect","adjustDomRect","domRect","isPointerNearDomRect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","scrollPosition","getViewportScrollPosition","handleScroll","_getEventTarget","cachedPosition","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","scrollY","scrollX","getRootNode","wrapper","extendStyles","dest","importantProperties","removeProperty","toggleNativeDragInteractions","enable","userSelect","toggleVisibility","combineTransforms","initialTransform","matchElementSize","sourceRect","getTransform","parseCssTimeUnitsToMs","multiplier","getTransformTransitionDurationInMs","computedStyle","transitionedProperties","parseCssPropertyValue","property","prop","propertyIndex","rawDurations","rawDelays","part","PreviewRef","_rootElement","_initialDomRect","_previewTemplate","_previewClass","_pickupPositionOnPage","_initialTransform","_zIndex","_previewEmbeddedView","_preview","_createPreview","supportsPopover","showPopover","setTransform","getTransitionDuration","handler","previewConfig","previewClass","previewTemplate","preview","rootRect","matchSize","margin","activeEventListenerOptions","activeCapturingEventOptions$1","MOUSE_EVENT_IGNORE_TIME","dragImportantProperties","DragRef","_dragDropRegistry","_rootElementCleanups","_cleanupShadowRootSelectStart","_previewContainer","_placeholderRef","_pickupPositionInElement","_anchor","_passiveTransform","_activeTransform","_hasStartedDragging","_hasMoved","_initialContainer","_initialIndex","_parentPositions","_moveEvents","_pointerDirectionDelta","_pointerPositionAtLastDirectionChange","_lastKnownPointerPosition","_ownerSVGElement","_rootElementTapHighlight","_pointerMoveSubscription","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_lastTouchEventTime","_dragStartTime","_boundaryElement","_nativeInteractionsEnabled","_previewRect","_boundaryRect","_placeholderTemplate","_handles","_disabledHandles","_dropContainer","_parentDragRef","_cachedShadowRoot","lockAxis","dragStartDelay","scale","_toggleNativeDragInteractions","beforeStarted","started","released","ended","entered","exited","dropped","moved","constrainPosition","withRootElement","withParent","parentDragRef","registerDragItem","getPlaceholderElement","getRootElement","getVisibleElement","isDragging","withHandles","handles","coerceElement","disabledHandles","withPreviewTemplate","withPlaceholderTemplate","rootElement","_removeRootElementListeners","_pointerDown","_nativeDragStart","SVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","_containInsideBoundaryOnResize","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeListeners","disableHandle","enableHandle","withDirection","_withDropContainer","getFreeDragPosition","setFreeDragPosition","_applyRootElementTransform","withPreviewContainer","_sortFromLastPointerPosition","_updateActiveDropContainer","_getConstrainedPointerPosition","targetHandle","_getTargetHandle","_initializeDragSequence","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","distanceY","dragStartThreshold","isDelayElapsed","now","_getDragStartDelay","_endDragSequence","isReceiving","cancelable","_startDragSequence","constrainedPointerPosition","_updatePointerDirectionDelta","activeTransform","distance","_getDragDistance","_pointerUp","stopDragging","webkitTapHighlightColor","_stopScrolling","_animatePreviewToPlaceholder","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","shadowRoot","_getShadowRoot","dropContainer","shadowDomSelectStart","_createPlaceholderElement","anchor","createComment","insertBefore","_getPreviewInsertionPoint","replaceChild","getItemIndex","getScrollableParents","referenceElement","isTouchSequence","isAuxiliaryMouseButton","isSyntheticEvent","isFakeEvent","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_getPointerPositionInElement","startDragging","isPointerOverContainer","_isOverContainer","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","placeholderRect","cleanupListener","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","minX","maxX","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","cleanup","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","moveItemInArray","fromIndex","toIndex","clamp","to","copyArrayItem","currentArray","targetArray","SingleAxisSortStrategy","_sortPredicate","_itemPositions","_activeDraggables","orientation","_previousSwap","drag","overlaps","withItems","pointerDelta","_getItemIndexFromPointerPosition","isHorizontal","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","elementToOffset","transformAmount","activeDraggables","newPositionReference","_shouldEnterAsFirstChild","_cacheItemPositions","withSortPredicate","predicate","getActiveItemsSnapshot","updateOnScroll","withElementContainer","elementToMeasure","immediateSibling","itemPositions","lastItemRect","firstItemRect","MixedSortStrategy","_rootNode","_activeItems","_relatedNodes","nextSibling","previousSwap","toSwapWith","overlapElement","after","before","newOverlapElement","_getRootNode","elementFromPoint","enterIndex","_getClosestItemIndexToPointer","targetItem","elementAtPoint","minDistance","minIndex","hypot","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AutoScrollVerticalDirection","NONE","UP","DOWN","AutoScrollHorizontalDirection","LEFT","RIGHT","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_container","_isDragging","_sortStrategy","_domRect","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_scrollNode","_stopScrollTimers","_scrollableElements","_initialScrollSnap","coercedElement","withOrientation","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","previousItems","connectedTo","withScrollableParents","oldContainerIndex","newContainerIndex","unshift","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","_startScrollInterval","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","interval","animationFrameScheduler","scrollStep","_canReceive","_startReceiving","activeSiblings","initiator","receiver","draggedItems","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","capturingEventOptions","activeCapturingEventOptions","_ResetsLoader","DragDropRegistry","_styleLoader","RendererFactory2","createRenderer","_cleanupDocumentTouchmove","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","_domNodesToDirectives","_persistentTouchmoveListener","instances","startsWith","endEventHandler","toBind","_preventDefaultWhileDragging","_clearGlobalListeners","streams","Observable","observer","registerDirectiveNode","dragRef","removeDirectiveNode","getDragDirectiveForNode","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","CDK_DRAG_PARENT","CDK_DRAG_HANDLE","CdkDragHandle","_parentDrag","_addHandle","_removeHandle","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_selfHandle","_dragRef","rootElementSelector","freeDragPosition","movedEvent","dragDrop","_assignDefaults","_dropListRef","_syncInputs","_handleEvents","_updateRootElement","_setupHandlesListener","rootSelectorChange","firstChange","_setPreviewTemplate","_resetPreviewTemplate","_setPlaceholderTemplate","_resetPlaceholderTemplate","_getBoundaryElement","boundary","parentDrag","startEvent","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","handleElements","handleInstance","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","CdkDropList","_scrollDispatcher","ScrollDispatcher","_group","_scrollableParentsResolved","_dropLists","elementContainerSelector","_unsortedItems","_setupInputSyncSubscription","_syncItemsWithRef","getSortedItems","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","coerceArray","correspondingDropList","list","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","listAutoScrollDisabled","listOrientation","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","_drag","Vb","Xb","Hb","jb","Wb","SelectedExpansionPanelComponent_For_4_Conditional_28_For_4_Conditional_2_Template","equipment_r3","ɵ$index_84_r4","ɵ$count_84_r5","qb","SelectedExpansionPanelComponent_For_4_Conditional_28_For_4_Template","Qb","SelectedExpansionPanelComponent_For_4_div_1_Template","SelectedExpansionPanelComponent_For_4_Conditional_26_Template","SelectedExpansionPanelComponent_For_4_Conditional_27_Template","SelectedExpansionPanelComponent_For_4_Conditional_28_Template","ɵ$index_7_r7","SelectedExpansionPanelComponent","togglePanel","panelToToggle","panels","removedExercise","onAction","undoRemove","SelectedExpansionPanelComponent_For_4_Template","NumberValueAccessor","MaxLengthValidator","MinValidator","CdkTextareaAutosize","Kb","Yb","Zb","Jb","e0","t0","n0","input_r6","viewProgramEvent","addProgramToClientEvent","de","BasicProgramsTableComponent_th_15_Template","BasicProgramsTableComponent_td_16_Template","BasicProgramsTableComponent_th_18_Template","BasicProgramsTableComponent_td_19_Template","BasicProgramsTableComponent_tr_20_Template","BasicProgramsTableComponent_tr_21_Template","BasicProgramsTableComponent_tr_22_Template","dr","po","mr","Ch","fS","Vs","xS","Vo","Xo","BS","Ri","mn","Vi","Mn","qd","Qd","pr","NM","pi","Gi","Rs","Zn","Ui","Ya","En","Ja","vd","eo","io","no","oo","ao","ro","so","lo","co","mo","cr","zi","gD","fp","So","Al","DT","yp","Mp","eI","Ul","b1","aa","nO","ba","fO","ca","TP","da","BP","ea","zp","fa","ga","xo","ha","Xp","ia","Hp","ja","VL","ka","Hr","la","os","ma","jR","na","C_","oa","WR","pa","b_","qa","v_","ra","vw","sa"],"ignoreList":[85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,150,151,152,153,154,155],"sources":["../../src/material/core/option/option-parent.ts","../../src/material/core/option/option.html","../../src/material/core/option/optgroup.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/select/select-errors.ts","../../src/material/select/select.html","../../src/material/select/select.ts","../../src/material/select/module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.html","../../src/material/paginator/paginator.ts","../../src/material/paginator/module.ts","../../src/material/sort/sort-errors.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-header.html","../../src/material/sort/sort-header-intl.ts","../../src/material/sort/sort-header.ts","../../src/material/sort/sort-module.ts","../../src/cdk/table/table.ts","../../src/cdk/table/tokens.ts","../../src/cdk/table/cell.ts","../../src/cdk/table/coalesced-style-scheduler.ts","../../src/cdk/table/row.ts","../../src/cdk/table/sticky-styler.ts","../../src/cdk/table/sticky-position-listener.ts","../../src/cdk/table/table-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/module.ts","../../src/material/table/table-data-source.ts","libs/exercises/src/lib/services/exercises.service.ts","libs/exercises/src/lib/services/categories/bodyareas.service.ts","libs/exercises/src/lib/services/categories/movements.service.ts","libs/exercises/src/lib/services/categories/starting-positions.service.ts","libs/exercises/src/lib/services/categories/equipment.service.ts","libs/exercises/src/lib/services/search.service.ts","libs/exercises/src/lib/services/share-data.service.ts","libs/exercises/src/lib/services/add-remove-data.service.ts","libs/exercises/src/lib/services/share-state.service.ts","libs/exercises/src/lib/services/selected-exercises.service.ts","libs/exercises/src/lib/services/programs/program-data.service.ts","libs/exercises/src/lib/services/programs/program-clients-data.service.ts","libs/exercises/src/lib/services/programs/programs.service.ts","libs/exercises/src/lib/services/programs/isClientValid.service.ts","libs/exercises/src/lib/services/clients/clients.service.ts","libs/exercises/src/lib/services/clients/share-clients-data.service.ts","libs/exercises/src/lib/services/drop-list-transfer-item.service.ts","../../src/cdk/dialog/dialog-config.ts","../../src/cdk/dialog/dialog-container.ts","../../src/cdk/dialog/dialog-container.html","../../src/cdk/dialog/dialog-ref.ts","../../src/cdk/dialog/dialog-injectors.ts","../../src/cdk/dialog/dialog.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-container.html","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","libs/ui/src/lib/services/browser-storage.service.ts","libs/ui/src/lib/services/theme-manager.service.ts","libs/ui/src/lib/services/paginator-i18n.service.ts","libs/ui/src/lib/services/active-page.service.ts","../../packages/core/rxjs-interop/src/to_signal.ts","libs/ui/src/lib/services/screen-size.service.ts","libs/ui/src/lib/services/countries-lib.service.ts","libs/ui/src/lib/components/dynamic-fab-button/dynamic-fab-button.component.ts","libs/ui/src/lib/components/dynamic-fab-button/dynamic-fab-button.component.html","libs/ui/src/lib/components/page-toolbar/page-toolbar.component.html","libs/ui/src/lib/components/page-toolbar/page-toolbar.component.ts","../../src/material/chips/tokens.ts","../../src/material/chips/chip.html","../../src/material/chips/chip-option.html","../../src/material/chips/chip-row.html","../../src/material/chips/chip-action.ts","../../src/material/chips/chip-icons.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-edit-input.ts","../../src/material/chips/chip-row.ts","../../src/material/chips/chip-set.ts","../../src/material/chips/chip-grid.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/module.ts","node_modules/src/support/cache.ts","node_modules/src/support/compatibility/isBrowser.ts","node_modules/src/support/utils/alias.ts","node_modules/src/support/compatibility/apis.ts","node_modules/src/support/utils/types.ts","node_modules/src/support/utils/array.ts","node_modules/src/support/utils/strings.ts","node_modules/src/support/utils/equal.ts","node_modules/src/support/utils/noop.ts","node_modules/src/support/utils/function.ts","node_modules/src/support/utils/object.ts","node_modules/src/support/utils/math.ts","node_modules/src/support/dom/attribute.ts","node_modules/src/support/dom/class.ts","node_modules/src/support/dom/traversal.ts","node_modules/src/support/dom/manipulation.ts","node_modules/src/support/dom/create.ts","node_modules/src/support/dom/style.ts","node_modules/src/support/dom/dimensions.ts","node_modules/src/support/dom/events.ts","node_modules/src/support/dom/scroll.ts","node_modules/src/support/dom/focus.ts","node_modules/src/support/eventListeners.ts","node_modules/src/options.ts","node_modules/src/classnames.ts","node_modules/src/nonce.ts","node_modules/src/environment.ts","node_modules/src/initialization.ts","node_modules/src/instances.ts","node_modules/src/observers/domObserver.ts","node_modules/src/plugins/plugins.ts","node_modules/src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","node_modules/src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","node_modules/src/setups/structureSetup/structureSetup.utils.ts","node_modules/src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","node_modules/src/plugins/clickScrollPlugin/clickScrollPlugin.ts","node_modules/src/observers/sizeObserver.ts","node_modules/src/observers/trinsicObserver.ts","node_modules/src/setups/observersSetup/observersSetup.ts","node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.events.ts","node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.ts","node_modules/src/setups/structureSetup/structureSetup.elements.ts","node_modules/src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","node_modules/src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","node_modules/src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","node_modules/src/setups/structureSetup/structureSetup.ts","node_modules/src/setups/setups.ts","node_modules/src/overlayscrollbars.ts","node_modules/src/overlayscrollbars.directive.ts","node_modules/src/overlayscrollbars.component.ts","node_modules/src/overlayscrollbars.module.ts","../../src/material/core/internal-form-field/internal-form-field.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox.html","../../src/material/checkbox/module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner.html","../../src/material/progress-spinner/module.ts","node_modules/src/app/mat-select-search/mat-select-search-clear.directive.ts","node_modules/src/app/mat-select-search/mat-select-search.component.html","node_modules/src/app/mat-select-search/default-options.ts","node_modules/src/app/mat-select-search/mat-select-no-entries-found.directive.ts","node_modules/src/app/mat-select-search/mat-select-search.component.ts","node_modules/src/app/mat-select-search/ngx-mat-select-search.module.ts","libs/ui/src/lib/components/client-full-edit-form/client-full-edit-form.component.html","libs/ui/src/lib/components/client-full-edit-form/client-full-edit-form.component.ts","libs/ui/src/lib/components/deleteConfirmationDialog/deleteConfirmationDialog.component.ts","libs/ui/src/lib/components/deleteConfirmationDialog/deleteConfirmationDialog.component.html","../../src/cdk/accordion/accordion.ts","../../src/cdk/accordion/accordion-item.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-header.html","../../src/material/expansion/expansion-panel-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/expansion/expansion-panel.html","../../src/material/expansion/expansion-panel-header.ts","../../src/material/expansion/accordion.ts","libs/ui/src/lib/components/program-modal/program-modal.component.html","libs/ui/src/lib/components/program-modal/program-modal.component.ts","libs/ui/src/lib/components/client-full-edit-programs/client-full-edit-programs.component.html","libs/ui/src/lib/components/client-full-edit-programs/client-full-edit-programs.component.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle.html","libs/ui/src/lib/components/programs-table/programs-table.component.html","libs/ui/src/lib/components/programs-table/programs-table.component.ts","libs/ui/src/lib/pages/filter-select-clients/filter-select-clients.component.html","libs/ui/src/lib/pages/filter-select-clients/filter-select-clients.component.ts","libs/ui/src/lib/pages/search/search.component.html","libs/ui/src/lib/pages/search/search.component.ts","../../src/cdk/tree/control/base-tree-control.ts","../../src/cdk/tree/control/flat-tree-control.ts","../../src/cdk/tree/outlet.ts","../../src/cdk/tree/node.ts","../../src/cdk/tree/tree-errors.ts","../../src/cdk/tree/tree.ts","../../src/cdk/tree/padding.ts","../../src/cdk/tree/toggle.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/outlet.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/data-source/flat-data-source.ts","libs/ui/src/lib/pages/search-filter/search-filter.component.html","libs/ui/src/lib/pages/search-filter/search-filter.component.ts","libs/ui/src/lib/components/exercise-search-btns-wrapper/exercise-search-btns-wrapper.component.ts","libs/ui/src/lib/components/exercise-search-btns-wrapper/exercise-search-btns-wrapper.component.html","libs/ui/src/lib/components/video-player/video-player.component.html","libs/ui/src/lib/components/video-player/video-player.component.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.html","../../src/material/menu/menu.html","../../src/material/menu/menu-item.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/module.ts","../../src/material/menu/menu-animations.ts","../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar.html","../../src/material/toolbar/toolbar-module.ts","libs/ui/src/lib/components/toolbar-buttons/toolbar-buttons.component.html","libs/ui/src/lib/components/toolbar-buttons/toolbar-buttons.component.ts","libs/exercises/src/lib/pages/exercise-modal/exercise-modal.component.html","libs/exercises/src/lib/pages/exercise-modal/exercise-modal.component.ts","../../src/cdk/drag-drop/dom/clone-node.ts","../../src/cdk/drag-drop/dom/dom-rect.ts","../../src/cdk/drag-drop/dom/parent-position-tracker.ts","../../src/cdk/drag-drop/dom/root-node.ts","../../src/cdk/drag-drop/dom/styling.ts","../../src/cdk/drag-drop/dom/transition-duration.ts","../../src/cdk/drag-drop/preview-ref.ts","../../src/cdk/drag-drop/drag-ref.ts","../../src/cdk/drag-drop/drag-utils.ts","../../src/cdk/drag-drop/sorting/single-axis-sort-strategy.ts","../../src/cdk/drag-drop/sorting/mixed-sort-strategy.ts","../../src/cdk/drag-drop/drop-list-ref.ts","../../src/cdk/drag-drop/drag-drop-registry.ts","../../src/cdk/drag-drop/drag-drop.ts","../../src/cdk/drag-drop/drag-parent.ts","../../src/cdk/drag-drop/directives/drag-handle.ts","../../src/cdk/drag-drop/directives/config.ts","../../src/cdk/drag-drop/directives/drag.ts","../../src/cdk/drag-drop/directives/drop-list-group.ts","../../src/cdk/drag-drop/directives/drop-list.ts","../../src/cdk/drag-drop/directives/drag-placeholder.ts","libs/exercises/src/lib/pages/selected-expansion-panel/selected-expansion-panel.component.html","libs/exercises/src/lib/pages/selected-expansion-panel/selected-expansion-panel.component.ts","libs/ui/src/lib/components/basic-programs-table/basic-programs-table.component.html","libs/ui/src/lib/components/basic-programs-table/basic-programs-table.component.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken, Signal} from '@angular/core';\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean | Signal<boolean>;\n  multiple?: boolean;\n  inertGroups?: boolean;\n  hideSingleSelectionIndicator?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT = new InjectionToken<MatOptionParentComponent>(\n  'MAT_OPTION_PARENT_COMPONENT',\n);\n","<!-- Set aria-hidden=\"true\" to this DOM node and other decorative nodes in this file. This might\n be contributing to issue where sometimes VoiceOver focuses on a TextNode in the a11y tree instead\n of the Option node (#23202). Most assistive technology will generally ignore non-role,\n non-text-content elements. Adding aria-hidden seems to make VoiceOver behave more consistently. -->\n@if (multiple) {\n    <mat-pseudo-checkbox\n        class=\"mat-mdc-option-pseudo-checkbox\"\n        [disabled]=\"disabled\"\n        [state]=\"selected ? 'checked' : 'unchecked'\"\n        aria-hidden=\"true\"></mat-pseudo-checkbox>\n}\n\n<ng-content select=\"mat-icon\"></ng-content>\n\n<span class=\"mdc-list-item__primary-text\" #text><ng-content></ng-content></span>\n\n<!-- Render checkmark at the end for single-selection. -->\n@if (!multiple && selected && !hideSingleSelectionIndicator) {\n    <mat-pseudo-checkbox\n        class=\"mat-mdc-option-pseudo-checkbox\"\n        [disabled]=\"disabled\"\n        state=\"checked\"\n        aria-hidden=\"true\"\n        appearance=\"minimal\"></mat-pseudo-checkbox>\n}\n\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\n@if (group && group._inert) {\n    <span class=\"cdk-visually-hidden\">({{ group.label }})</span>\n}\n\n<div class=\"mat-mdc-option-ripple mat-focus-indicator\" aria-hidden=\"true\" mat-ripple\n     [matRippleTrigger]=\"_getHostElement()\" [matRippleDisabled]=\"disabled || disableRipple\">\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Input,\n  InjectionToken,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {_IdGenerator} from '@angular/cdk/a11y';\nimport {MatOptionParentComponent, MAT_OPTION_PARENT_COMPONENT} from './option-parent';\n\n// Notes on the accessibility pattern used for `mat-optgroup`.\n// The option group has two different \"modes\": regular and inert. The regular mode uses the\n// recommended a11y pattern which has `role=\"group\"` on the group element with `aria-labelledby`\n// pointing to the label. This works for `mat-select`, but it seems to hit a bug for autocomplete\n// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if\n// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),\n// VoiceOver on Safari won't read it out.\n// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are\n// removed from the group, and we get the screen reader to read out the group label by mirroring it\n// inside an invisible element in the option. This is sub-optimal, because the screen reader will\n// repeat the group label on each navigation, whereas the default pattern only reads the group when\n// the user enters a new group. The following alternate approaches were considered:\n// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control\n//    when the text will be read out so sometimes it comes in too late or never if the user\n//    navigates quickly.\n// 2. `<mat-option aria-describedby=\"groupLabel\"` - This works on Safari, but VoiceOver in Chrome\n//    won't read out the description at all.\n// 3. `<mat-option aria-labelledby=\"optionLabel groupLabel\"` - This works on Chrome, but Safari\n//     doesn't read out the text at all. Furthermore, on\n\n/**\n * Injection token that can be used to reference instances of `MatOptgroup`. It serves as\n * alternative token to the actual `MatOptgroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nexport const MAT_OPTGROUP = new InjectionToken<MatOptgroup>('MatOptgroup');\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrl: 'optgroup.css',\n  host: {\n    'class': 'mat-mdc-optgroup',\n    '[attr.role]': '_inert ? null : \"group\"',\n    '[attr.aria-disabled]': '_inert ? null : disabled.toString()',\n    '[attr.aria-labelledby]': '_inert ? null : _labelId',\n  },\n  providers: [{provide: MAT_OPTGROUP, useExisting: MatOptgroup}],\n})\nexport class MatOptgroup {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** whether the option group is disabled. */\n  @Input({transform: booleanAttribute}) disabled: boolean = false;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = inject(_IdGenerator).getId('mat-optgroup-label-');\n\n  /** Whether the group is in inert a11y mode. */\n  _inert: boolean;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const parent = inject<MatOptionParentComponent>(MAT_OPTION_PARENT_COMPONENT, {optional: true});\n    this._inert = parent?.inertGroups ?? false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {_IdGenerator, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ElementRef,\n  ChangeDetectorRef,\n  AfterViewChecked,\n  OnDestroy,\n  Input,\n  Output,\n  EventEmitter,\n  QueryList,\n  ViewChild,\n  booleanAttribute,\n  inject,\n  isSignal,\n  Signal,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MAT_OPTGROUP, MatOptgroup} from './optgroup';\nimport {MatOptionParentComponent, MAT_OPTION_PARENT_COMPONENT} from './option-parent';\nimport {MatRipple} from '../ripple/ripple';\nimport {MatPseudoCheckbox} from '../selection/pseudo-checkbox/pseudo-checkbox';\nimport {_StructuralStylesLoader} from '../focus-indicators/structural-styles';\nimport {_CdkPrivateStyleLoader, _VisuallyHiddenLoader} from '@angular/cdk/private';\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange<T = any> {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption<T>,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false,\n  ) {}\n}\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[class.mdc-list-item--selected]': 'selected',\n    '[class.mat-mdc-option-multiple]': 'multiple',\n    '[class.mat-mdc-option-active]': 'active',\n    '[class.mdc-list-item--disabled]': 'disabled',\n    '[id]': 'id',\n    // Set aria-selected to false for non-selected items and true for selected items. Conform to\n    // [WAI ARIA Listbox authoring practices guide](\n    //  https://www.w3.org/WAI/ARIA/apg/patterns/listbox/), \"If any options are selected, each\n    // selected option has either aria-selected or aria-checked  set to true. All options that are\n    // selectable but not selected have either aria-selected or aria-checked set to false.\" Align\n    // aria-selected implementation of Chips and List components.\n    //\n    // Set `aria-selected=\"false\"` on not-selected listbox options to fix VoiceOver announcing\n    // every option as \"selected\" (#21491).\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-mdc-option mdc-list-item',\n  },\n  styleUrl: 'option.css',\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [MatPseudoCheckbox, MatRipple],\n})\nexport class MatOption<T = any> implements FocusableOption, AfterViewChecked, OnDestroy {\n  private _element = inject<ElementRef<HTMLElement>>(ElementRef);\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  private _parent = inject<MatOptionParentComponent>(MAT_OPTION_PARENT_COMPONENT, {optional: true});\n  group = inject<MatOptgroup>(MAT_OPTGROUP, {optional: true});\n\n  private _signalDisableRipple = false;\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() {\n    return this._parent && this._parent.multiple;\n  }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean {\n    return this._selected;\n  }\n\n  /** The form value of the option. */\n  @Input() value: T;\n\n  /** The unique ID of the option. */\n  @Input() id: string = inject(_IdGenerator).getId('mat-option-');\n\n  /** Whether the option is disabled. */\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return (this.group && this.group.disabled) || this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n  }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple(): boolean {\n    return this._signalDisableRipple\n      ? (this._parent!.disableRipple as Signal<boolean>)()\n      : !!this._parent?.disableRipple;\n  }\n\n  /** Whether to display checkmark for single-selection. */\n  get hideSingleSelectionIndicator(): boolean {\n    return !!(this._parent && this._parent.hideSingleSelectionIndicator);\n  }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange<T>>();\n\n  /** Element containing the option's text. */\n  @ViewChild('text', {static: true}) _text: ElementRef<HTMLElement> | undefined;\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(...args: unknown[]);\n  constructor() {\n    const styleLoader = inject(_CdkPrivateStyleLoader);\n    styleLoader.load(_StructuralStylesLoader);\n    styleLoader.load(_VisuallyHiddenLoader);\n    this._signalDisableRipple = !!this._parent && isSignal(this._parent.disableRipple);\n  }\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._text?.nativeElement.textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(emitEvent = true): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n\n      if (emitEvent) {\n        this._emitSelectionChangeEvent();\n      }\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(emitEvent = true): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n\n      if (emitEvent) {\n        this._emitSelectionChangeEvent();\n      }\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(_origin?: FocusOrigin, options?: FocusOptions): void {\n    // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n    // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus(options);\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  // This method is only used by `MatLegacyOption`. Keeping it here to avoid breaking the types.\n  // That's because `MatLegacyOption` use `MatOption` type in a few places such as\n  // `MatOptionSelectionChange`. It is safe to delete this when `MatLegacyOption` is deleted.\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        if (this._mostRecentViewValue) {\n          this._stateChanges.next();\n        }\n\n        this._mostRecentViewValue = viewValue;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange<T>(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(\n  optionIndex: number,\n  options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>,\n): number {\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionOffset Offset of the option from the top of the panel.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(\n  optionOffset: number,\n  optionHeight: number,\n  currentScrollPosition: number,\n  panelHeight: number,\n): number {\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, MatOption, MatOptgroup],\n  exports: [MatOption, MatOptgroup],\n})\nexport class MatOptionModule {}\n\nexport * from './option';\nexport * from './optgroup';\nexport * from './option-parent';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","<div cdk-overlay-origin\n     class=\"mat-mdc-select-trigger\"\n     (click)=\"open()\"\n     #fallbackOverlayOrigin=\"cdkOverlayOrigin\"\n     #trigger>\n\n  <div class=\"mat-mdc-select-value\" [attr.id]=\"_valueId\">\n    @if (empty) {\n      <span class=\"mat-mdc-select-placeholder mat-mdc-select-min-line\">{{placeholder}}</span>\n    } @else {\n      <span class=\"mat-mdc-select-value-text\">\n        @if (customTrigger) {\n          <ng-content select=\"mat-select-trigger\"></ng-content>\n        } @else {\n          <span class=\"mat-mdc-select-min-line\">{{triggerValue}}</span>\n        }\n      </span>\n    }\n  </div>\n\n  <div class=\"mat-mdc-select-arrow-wrapper\">\n    <div class=\"mat-mdc-select-arrow\">\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\n      <svg viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" focusable=\"false\" aria-hidden=\"true\">\n        <path d=\"M7 10l5 5 5-5z\"/>\n      </svg>\n    </div>\n  </div>\n</div>\n\n<ng-template\n  cdk-connected-overlay\n  cdkConnectedOverlayLockPosition\n  cdkConnectedOverlayHasBackdrop\n  cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n  [cdkConnectedOverlayDisableClose]=\"true\"\n  [cdkConnectedOverlayPanelClass]=\"_overlayPanelClass\"\n  [cdkConnectedOverlayScrollStrategy]=\"_scrollStrategy\"\n  [cdkConnectedOverlayOrigin]=\"_preferredOverlayOrigin || fallbackOverlayOrigin\"\n  [cdkConnectedOverlayPositions]=\"_positions\"\n  [cdkConnectedOverlayWidth]=\"_overlayWidth\"\n  [cdkConnectedOverlayFlexibleDimensions]=\"true\"\n  (backdropClick)=\"close()\"\n  (overlayKeydown)=\"_handleOverlayKeydown($event)\">\n  <div\n    #panel\n    role=\"listbox\"\n    tabindex=\"-1\"\n    class=\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\"\n    [class.mat-select-panel-animations-enabled]=\"!_animationsDisabled\"\n    [attr.id]=\"id + '-panel'\"\n    [attr.aria-multiselectable]=\"multiple\"\n    [attr.aria-label]=\"ariaLabel || null\"\n    [attr.aria-labelledby]=\"_getPanelAriaLabelledby()\"\n    [ngClass]=\"panelClass\"\n    (keydown)=\"_handleKeydown($event)\">\n    <ng-content></ng-content>\n  </div>\n</ng-template>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  _IdGenerator,\n  ActiveDescendantKeyManager,\n  addAriaReferencedId,\n  LiveAnnouncer,\n  removeAriaReferencedId,\n} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  ENTER,\n  ESCAPE,\n  hasModifierKey,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n  ConnectedPosition,\n  Overlay,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  booleanAttribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  inject,\n  InjectionToken,\n  Input,\n  numberAttribute,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n  HostAttributeToken,\n  ANIMATION_MODULE_TYPE,\n  Renderer2,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm,\n  Validators,\n} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _ErrorStateTracker,\n  _getOptionScrollPosition,\n  ErrorStateMatcher,\n  MAT_OPTGROUP,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n} from '../core';\nimport {MAT_FORM_FIELD, MatFormField, MatFormFieldControl} from '../form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {filter, map, startWith, switchMap, take, takeUntil} from 'rxjs/operators';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\nimport {NgClass} from '@angular/common';\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>(\n  'mat-select-scroll-strategy',\n  {\n    providedIn: 'root',\n    factory: () => {\n      const overlay = inject(Overlay);\n      return () => overlay.scrollStrategies.reposition();\n    },\n  },\n);\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(\n  overlay: Overlay,\n): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** Object that can be used to configure the default options for the select module. */\nexport interface MatSelectConfig {\n  /** Whether option centering should be disabled. */\n  disableOptionCentering?: boolean;\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  typeaheadDebounceInterval?: number;\n\n  /** Class or list of classes to be applied to the menu's overlay panel. */\n  overlayPanelClass?: string | string[];\n\n  /** Whether icon indicators should be hidden for single-selection. */\n  hideSingleSelectionIndicator?: boolean;\n\n  /**\n   * Width of the panel. If set to `auto`, the panel will match the trigger width.\n   * If set to null or an empty string, the panel will grow to match the longest option's text.\n   */\n  panelWidth?: string | number | null;\n\n  /**\n   * Whether nullable options can be selected by default.\n   * See `MatSelect.canSelectNullableOptions` for more information.\n   */\n  canSelectNullableOptions?: boolean;\n}\n\n/** Injection token that can be used to provide the default options the select module. */\nexport const MAT_SELECT_CONFIG = new InjectionToken<MatSelectConfig>('MAT_SELECT_CONFIG');\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_SELECT_TRIGGER = new InjectionToken<MatSelectTrigger>('MatSelectTrigger');\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange<T = any> {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: T,\n  ) {}\n}\n\n@Component({\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrl: 'select.css',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'combobox',\n    'aria-haspopup': 'listbox',\n    'class': 'mat-mdc-select',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n    '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n    '[attr.aria-expanded]': 'panelOpen',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-mdc-select-disabled]': 'disabled',\n    '[class.mat-mdc-select-invalid]': 'errorState',\n    '[class.mat-mdc-select-required]': 'required',\n    '[class.mat-mdc-select-empty]': 'empty',\n    '[class.mat-mdc-select-multiple]': 'multiple',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect},\n  ],\n  imports: [CdkOverlayOrigin, CdkConnectedOverlay, NgClass],\n})\nexport class MatSelect\n  implements\n    AfterContentInit,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    DoCheck,\n    ControlValueAccessor,\n    MatFormFieldControl<any>\n{\n  protected _viewportRuler = inject(ViewportRuler);\n  protected _changeDetectorRef = inject(ChangeDetectorRef);\n  readonly _elementRef = inject(ElementRef);\n  private _dir = inject(Directionality, {optional: true});\n  private _idGenerator = inject(_IdGenerator);\n  private _renderer = inject(Renderer2);\n  protected _parentFormField = inject<MatFormField>(MAT_FORM_FIELD, {optional: true});\n  ngControl = inject(NgControl, {self: true, optional: true})!;\n  private _liveAnnouncer = inject(LiveAnnouncer);\n  protected _defaultOptions = inject(MAT_SELECT_CONFIG, {optional: true});\n  protected _animationsDisabled =\n    inject(ANIMATION_MODULE_TYPE, {optional: true}) === 'NoopAnimations';\n  private _initialized = new Subject();\n  private _cleanupDetach: (() => void) | undefined;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  // TODO(crisbeto): this is only necessary for the non-MDC select, but it's technically a\n  // public API so we have to keep it. It should be deprecated and removed eventually.\n  /** All of the defined groups of options. */\n  @ContentChildren(MAT_OPTGROUP, {descendants: true}) optionGroups: QueryList<MatOptgroup>;\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MAT_SELECT_TRIGGER) customTrigger: MatSelectTrigger;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions: ConnectedPosition[] = [\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'end',\n      originY: 'bottom',\n      overlayX: 'end',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      panelClass: 'mat-mdc-select-panel-above',\n    },\n    {\n      originX: 'end',\n      originY: 'top',\n      overlayX: 'end',\n      overlayY: 'bottom',\n      panelClass: 'mat-mdc-select-panel-above',\n    },\n  ];\n\n  /** Scrolls a particular option into the view. */\n  _scrollOptionIntoView(index: number): void {\n    const option = this.options.toArray()[index];\n\n    if (option) {\n      const panel: HTMLElement = this.panel.nativeElement;\n      const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n      const element = option._getHostElement();\n\n      if (index === 0 && labelCount === 1) {\n        // If we've got one group label before the option and we're at the top option,\n        // scroll the list to the top. This is better UX than scrolling the list to the\n        // top of the option, because it allows the user to read the top group's label.\n        panel.scrollTop = 0;\n      } else {\n        panel.scrollTop = _getOptionScrollPosition(\n          element.offsetTop,\n          element.offsetHeight,\n          panel.scrollTop,\n          panel.offsetHeight,\n        );\n      }\n    }\n  }\n\n  /** Called when the panel has been opened and the overlay has settled on its final position. */\n  private _positioningSettled() {\n    this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n  }\n\n  /** Creates a change event object that should be emitted by the select. */\n  private _getChangeEvent(value: any) {\n    return new MatSelectChange(this, value);\n  }\n\n  /** Factory function used to create a scroll strategy for this select. */\n  private _scrollStrategyFactory = inject(MAT_SELECT_SCROLL_STRATEGY);\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = this._idGenerator.getId('mat-select-');\n\n  /** Current `aria-labelledby` value for the select trigger. */\n  private _triggerAriaLabelledBy: string | null = null;\n\n  /**\n   * Keeps track of the previous form control assigned to the select.\n   * Used to detect if it has changed.\n   */\n  private _previousControl: AbstractControl | null | undefined;\n\n  /** Emits whenever the component is destroyed. */\n  protected readonly _destroy = new Subject<void>();\n\n  /** Tracks the error state of the select. */\n  private _errorStateTracker: _ErrorStateTracker;\n\n  /**\n   * Emits whenever the component state changes and should cause the parent\n   * form-field to update. Implemented as part of `MatFormFieldControl`.\n   * @docs-private\n   */\n  readonly stateChanges = new Subject<void>();\n\n  /**\n   * Disable the automatic labeling to avoid issues like #27241.\n   * @docs-private\n   */\n  readonly disableAutomaticLabeling = true;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input('aria-describedby') userAriaDescribedBy: string;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Ideal origin for the overlay panel. */\n  _preferredOverlayOrigin: CdkOverlayOrigin | ElementRef | undefined;\n\n  /** Width of the overlay panel. */\n  _overlayWidth: string | number;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** ID for the DOM node containing the select's value. */\n  _valueId = this._idGenerator.getId('mat-select-value-');\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  _overlayPanelClass: string | string[] = this._defaultOptions?.overlayPanelClass || '';\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay)\n  protected _overlayDir: CdkConnectedOverlay;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[] | Set<string> | {[key: string]: any};\n\n  /** Whether the select is disabled. */\n  @Input({transform: booleanAttribute})\n  disabled: boolean = false;\n\n  /** Whether ripples in the select are disabled. */\n  @Input({transform: booleanAttribute})\n  disableRipple: boolean = false;\n\n  /** Tab index of the select. */\n  @Input({\n    transform: (value: unknown) => (value == null ? 0 : numberAttribute(value)),\n  })\n  tabIndex: number = 0;\n\n  /** Whether checkmark indicator for single-selection options is hidden. */\n  @Input({transform: booleanAttribute})\n  get hideSingleSelectionIndicator(): boolean {\n    return this._hideSingleSelectionIndicator;\n  }\n  set hideSingleSelectionIndicator(value: boolean) {\n    this._hideSingleSelectionIndicator = value;\n    this._syncParentProperties();\n  }\n  private _hideSingleSelectionIndicator: boolean =\n    this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string {\n    return this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  private _placeholder: string;\n\n  /** Whether the component is required. */\n  @Input({transform: booleanAttribute})\n  get required(): boolean {\n    return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n  }\n  set required(value: boolean) {\n    this._required = value;\n    this.stateChanges.next();\n  }\n  private _required: boolean | undefined;\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input({transform: booleanAttribute})\n  get multiple(): boolean {\n    return this._multiple;\n  }\n  set multiple(value: boolean) {\n    if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = value;\n  }\n  private _multiple: boolean = false;\n\n  /** Whether to center the active option over the trigger. */\n  @Input({transform: booleanAttribute})\n  disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() {\n    return this._compareWith;\n  }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n  set value(newValue: any) {\n    const hasAssigned = this._assignValue(newValue);\n\n    if (hasAssigned) {\n      this._onChange(newValue);\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input()\n  get errorStateMatcher() {\n    return this._errorStateTracker.matcher;\n  }\n  set errorStateMatcher(value: ErrorStateMatcher) {\n    this._errorStateTracker.matcher = value;\n  }\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  @Input({transform: numberAttribute})\n  typeaheadDebounceInterval: number;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Whether the select is in an error state. */\n  get errorState() {\n    return this._errorStateTracker.errorState;\n  }\n  set errorState(value: boolean) {\n    this._errorStateTracker.errorState = value;\n  }\n\n  /**\n   * Width of the panel. If set to `auto`, the panel will match the trigger width.\n   * If set to null or an empty string, the panel will grow to match the longest option's text.\n   */\n  @Input() panelWidth: string | number | null =\n    this._defaultOptions && typeof this._defaultOptions.panelWidth !== 'undefined'\n      ? this._defaultOptions.panelWidth\n      : 'auto';\n\n  /**\n   * By default selecting an option with a `null` or `undefined` value will reset the select's\n   * value. Enable this option if the reset behavior doesn't match your requirements and instead\n   * the nullable options should become selected. The value of this input can be controlled app-wide\n   * using the `MAT_SELECT_CONFIG` injection token.\n   */\n  @Input({transform: booleanAttribute})\n  canSelectNullableOptions: boolean = this._defaultOptions?.canSelectNullableOptions ?? false;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange))),\n      );\n    }\n\n    return this._initialized.pipe(switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> = this.openedChange.pipe(\n    filter(o => o),\n    map(() => {}),\n  );\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> = this.openedChange.pipe(\n    filter(o => !o),\n    map(() => {}),\n  );\n\n  /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange = new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const defaultErrorStateMatcher = inject(ErrorStateMatcher);\n    const parentForm = inject(NgForm, {optional: true});\n    const parentFormGroup = inject(FormGroupDirective, {optional: true});\n    const tabIndex = inject(new HostAttributeToken('tabindex'), {optional: true});\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    // Note that we only want to set this when the defaults pass it in, otherwise it should\n    // stay as `undefined` so that it falls back to the default in the key manager.\n    if (this._defaultOptions?.typeaheadDebounceInterval != null) {\n      this.typeaheadDebounceInterval = this._defaultOptions.typeaheadDebounceInterval;\n    }\n\n    this._errorStateTracker = new _ErrorStateTracker(\n      defaultErrorStateMatcher,\n      this.ngControl,\n      parentFormGroup,\n      parentForm,\n      this.stateChanges,\n    );\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = tabIndex == null ? 0 : parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n    this._viewportRuler\n      .change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n          this._changeDetectorRef.detectChanges();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initialized.next();\n    this._initialized.complete();\n\n    this._initKeyManager();\n\n    this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    const newAriaLabelledby = this._getTriggerAriaLabelledby();\n    const ngControl = this.ngControl;\n\n    // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n    // is computed as a result of a content query which can cause this binding to trigger a\n    // \"changed after checked\" error.\n    if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n      const element: HTMLElement = this._elementRef.nativeElement;\n      this._triggerAriaLabelledBy = newAriaLabelledby;\n      if (newAriaLabelledby) {\n        element.setAttribute('aria-labelledby', newAriaLabelledby);\n      } else {\n        element.removeAttribute('aria-labelledby');\n      }\n    }\n\n    if (ngControl) {\n      // The disabled state might go out of sync if the form group is swapped out. See #17860.\n      if (this._previousControl !== ngControl.control) {\n        if (\n          this._previousControl !== undefined &&\n          ngControl.disabled !== null &&\n          ngControl.disabled !== this.disabled\n        ) {\n          this.disabled = ngControl.disabled;\n        }\n\n        this._previousControl = ngControl.control;\n      }\n\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by the input, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled'] || changes['userAriaDescribedBy']) {\n      this.stateChanges.next();\n    }\n\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n    }\n  }\n\n  ngOnDestroy() {\n    this._cleanupDetach?.();\n    this._keyManager?.destroy();\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n    this._clearFromModal();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (!this._canOpen()) {\n      return;\n    }\n\n    // It's important that we read this as late as possible, because doing so earlier will\n    // return a different element since it's based on queries in the form field which may\n    // not have run yet. Also this needs to be assigned before we measure the overlay width.\n    if (this._parentFormField) {\n      this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n    }\n\n    this._cleanupDetach?.();\n    this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n    this._applyModalPanelOwnership();\n    this._panelOpen = true;\n    this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._positioningSettled();\n    });\n    this._overlayDir.attachOverlay();\n    this._keyManager.withHorizontalOrientation(null);\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Required for the MDC form field to pick up when the overlay has been opened.\n    this.stateChanges.next();\n\n    // Simulate the animation event before we moved away from `@angular/animations`.\n    Promise.resolve().then(() => this.openedChange.emit(true));\n  }\n\n  /**\n   * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n   * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n   * panel. Track the modal we have changed so we can undo the changes on destroy.\n   */\n  private _trackedModal: Element | null = null;\n\n  /**\n   * If the autocomplete trigger is inside of an `aria-modal` element, connect\n   * that modal to the options panel with `aria-owns`.\n   *\n   * For some browser + screen reader combinations, when navigation is inside\n   * of an `aria-modal` element, the screen reader treats everything outside\n   * of that modal as hidden or invisible.\n   *\n   * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n   * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n   * from reaching the panel.\n   *\n   * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n   * the options panel. This effectively communicates to assistive technology that the\n   * options panel is part of the same interaction as the modal.\n   *\n   * At time of this writing, this issue is present in VoiceOver.\n   * See https://github.com/angular/components/issues/20694\n   */\n  private _applyModalPanelOwnership() {\n    // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n    // the `LiveAnnouncer` and any other usages.\n    //\n    // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n    // section of the DOM we need to look through. This should cover all the cases we support, but\n    // the selector can be expanded if it turns out to be too narrow.\n    const modal = this._elementRef.nativeElement.closest(\n      'body > .cdk-overlay-container [aria-modal=\"true\"]',\n    );\n\n    if (!modal) {\n      // Most commonly, the autocomplete trigger is not inside a modal.\n      return;\n    }\n\n    const panelId = `${this.id}-panel`;\n\n    if (this._trackedModal) {\n      removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n    }\n\n    addAriaReferencedId(modal, 'aria-owns', panelId);\n    this._trackedModal = modal;\n  }\n\n  /** Clears the reference to the listbox overlay element from the modal it was added to. */\n  private _clearFromModal() {\n    if (!this._trackedModal) {\n      // Most commonly, the autocomplete trigger is not used inside a modal.\n      return;\n    }\n\n    const panelId = `${this.id}-panel`;\n\n    removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n    this._trackedModal = null;\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._exitAndDetach();\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n      // Required for the MDC form field to pick up when the overlay has been closed.\n      this.stateChanges.next();\n\n      // Simulate the animation event before we moved away from `@angular/animations`.\n      Promise.resolve().then(() => this.openedChange.emit(false));\n    }\n  }\n\n  /** Triggers the exit animation and detaches the overlay at the end. */\n  private _exitAndDetach() {\n    if (this._animationsDisabled || !this.panel) {\n      this._detachOverlay();\n      return;\n    }\n\n    this._cleanupDetach?.();\n    this._cleanupDetach = () => {\n      cleanupEvent();\n      clearTimeout(exitFallbackTimer);\n      this._cleanupDetach = undefined;\n    };\n\n    const panel: HTMLElement = this.panel.nativeElement;\n    const cleanupEvent = this._renderer.listen(panel, 'animationend', (event: AnimationEvent) => {\n      if (event.animationName === '_mat-select-exit') {\n        this._cleanupDetach?.();\n        this._detachOverlay();\n      }\n    });\n\n    // Since closing the overlay depends on the animation, we have a fallback in case the panel\n    // doesn't animate. This can happen in some internal tests that do `* {animation: none}`.\n    const exitFallbackTimer = setTimeout(() => {\n      this._cleanupDetach?.();\n      this._detachOverlay();\n    }, 200);\n\n    panel.classList.add('mat-select-panel-exit');\n  }\n\n  /** Detaches the current overlay directive. */\n  private _detachOverlay() {\n    this._overlayDir.detachOverlay();\n    // Some of the overlay detachment logic depends on change detection.\n    // Mark for check to ensure that things get picked up in a timely manner.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    this._assignValue(value);\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Refreshes the error state of the select. */\n  updateErrorState() {\n    this._errorStateTracker.updateErrorState();\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey =\n      keyCode === DOWN_ARROW ||\n      keyCode === UP_ARROW ||\n      keyCode === LEFT_ARROW ||\n      keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (\n      (!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n      ((this.multiple || event.altKey) && isArrowKey)\n    ) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n      manager.onKeydown(event);\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      if (selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const manager = this._keyManager;\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isTyping = manager.isTyping();\n\n    if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n      // Don't do anything in this case if the user is typing,\n      // because the typing sequence can include the space key.\n    } else if (\n      !isTyping &&\n      (keyCode === ENTER || keyCode === SPACE) &&\n      manager.activeItem &&\n      !hasModifierKey(event)\n    ) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (\n        this._multiple &&\n        isArrowKey &&\n        event.shiftKey &&\n        manager.activeItem &&\n        manager.activeItemIndex !== previouslyFocusedIndex\n      ) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /** Handles keyboard events coming from the overlay. */\n  protected _handleOverlayKeydown(event: KeyboardEvent): void {\n    // TODO(crisbeto): prior to #30363 this was being handled inside the overlay directive, but we\n    // need control over the animation timing so we do it manually. We should remove the `keydown`\n    // listener from `.mat-mdc-select-panel` and handle all the events here. That may cause\n    // further test breakages so it's left for a follow-up.\n    if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n      event.preventDefault();\n      this.close();\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n    this._keyManager?.cancelTypeahead();\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl) {\n        this._value = this.ngControl.value;\n      }\n\n      this._setSelectionByValue(this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    this.options.forEach(option => option.setInactiveStyles());\n    this._selectionModel.clear();\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      value.forEach((currentValue: any) => this._selectOptionByValue(currentValue));\n      this._sortValues();\n    } else {\n      const correspondingOption = this._selectOptionByValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.updateActiveItem(correspondingOption);\n      } else if (!this.panelOpen) {\n        // Otherwise reset the highlighted option. Note that we only want to do this while\n        // closed, because doing it while open can shift the user's focus unnecessarily.\n        this._keyManager.updateActiveItem(-1);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectOptionByValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      // Skip options that are already in the model. This allows us to handle cases\n      // where the same primitive value is selected multiple times.\n      if (this._selectionModel.isSelected(option)) {\n        return false;\n      }\n\n      try {\n        // Treat null as a special reset value.\n        return (\n          (option.value != null || this.canSelectNullableOptions) &&\n          this._compareWith(option.value, value)\n        );\n      } catch (error) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Assigns a specific value to the select. Returns whether the value has changed. */\n  private _assignValue(newValue: any | any[]): boolean {\n    // Always re-assign an array, because it might have been mutated.\n    if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n      if (this.options) {\n        this._setSelectionByValue(newValue);\n      }\n\n      this._value = newValue;\n      return true;\n    }\n    return false;\n  }\n\n  // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n  // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n  // recommendation.\n  //\n  // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n  // makes a few exceptions for compound widgets.\n  //\n  // From [Developing a Keyboard Interface](\n  // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n  //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n  //   Listbox...\"\n  //\n  // The user can focus disabled options using the keyboard, but the user cannot click disabled\n  // options.\n  private _skipPredicate = (option: MatOption) => {\n    if (this.panelOpen) {\n      // Support keyboard focusing disabled options in an ARIA listbox.\n      return false;\n    }\n\n    // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n    // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n    // closed.\n    return option.disabled;\n  };\n\n  /** Gets how wide the overlay panel should be. */\n  private _getOverlayWidth(\n    preferredOrigin: ElementRef<ElementRef> | CdkOverlayOrigin | undefined,\n  ): string | number {\n    if (this.panelWidth === 'auto') {\n      const refToMeasure =\n        preferredOrigin instanceof CdkOverlayOrigin\n          ? preferredOrigin.elementRef\n          : preferredOrigin || this._elementRef;\n      return refToMeasure.nativeElement.getBoundingClientRect().width;\n    }\n\n    return this.panelWidth === null ? '' : this.panelWidth;\n  }\n  /** Syncs the parent state with the individual options. */\n  _syncParentProperties(): void {\n    if (this.options) {\n      for (const option of this.options) {\n        option._changeDetectorRef.markForCheck();\n      }\n    }\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead(this.typeaheadDebounceInterval)\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withHomeAndEnd()\n      .withPageUpDown()\n      .withAllowedModifierKeys(['shiftKey'])\n      .skipPredicate(this._skipPredicate);\n\n    this._keyManager.tabOut.subscribe(() => {\n      if (this.panelOpen) {\n        // Select the active item when tabbing away. This is consistent with how the native\n        // select behaves. Note that we only want to do this in single selection mode.\n        if (!this.multiple && this._keyManager.activeItem) {\n          this._keyManager.activeItem._selectViaInteraction();\n        }\n\n        // Restore focus to the trigger before closing. Ensures that the focus\n        // position won't be lost if the user got focus into the overlay.\n        this.focus();\n        this.close();\n      }\n    });\n\n    this._keyManager.change.subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n        // be the result of an expression changing. We have to use `detectChanges` in order\n        // to avoid \"changed after checked\" errors (see #14793).\n        this._changeDetectorRef.detectChanges();\n        this.stateChanges.next();\n      });\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (!this.canSelectNullableOptions && option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n\n      if (this.value != null) {\n        this._propagateChanges(option.value);\n      }\n    } else {\n      if (wasSelected !== option.selected) {\n        option.selected\n          ? this._selectionModel.select(option)\n          : this._selectionModel.deselect(option);\n      }\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator\n          ? this.sortComparator(a, b, options)\n          : options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first *enabled* option.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n        // because it activates the first option that passes the skip predicate, rather than the\n        // first *enabled* option.\n        let firstEnabledOptionIndex = -1;\n        for (let index = 0; index < this.options.length; index++) {\n          const option = this.options.get(index)!;\n          if (!option.disabled) {\n            firstEnabledOptionIndex = index;\n            break;\n          }\n        }\n\n        this._keyManager.setActiveItem(firstEnabledOptionIndex);\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Whether the panel is allowed to open. */\n  protected _canOpen(): boolean {\n    return !this._panelOpen && !this.disabled && this.options?.length > 0 && !!this._overlayDir;\n  }\n\n  /** Focuses the select element. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Gets the aria-labelledby for the select panel. */\n  _getPanelAriaLabelledby(): string | null {\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelId = this._parentFormField?.getLabelId() || null;\n    const labelExpression = labelId ? labelId + ' ' : '';\n    return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /** Gets the aria-labelledby of the select component trigger. */\n  private _getTriggerAriaLabelledby(): string | null {\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelId = this._parentFormField?.getLabelId();\n    let value = (labelId ? labelId + ' ' : '') + this._valueId;\n\n    if (this.ariaLabelledby) {\n      value += ' ' + this.ariaLabelledby;\n    }\n\n    return value;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    if (ids.length) {\n      this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n    } else {\n      this._elementRef.nativeElement.removeAttribute('aria-describedby');\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    // Since the panel doesn't overlap the trigger, we\n    // want the label to only float when there's a value.\n    return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n  }\n}\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger',\n  providers: [{provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger}],\n})\nexport class MatSelectTrigger {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '../core';\nimport {MatFormFieldModule} from '../form-field';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\n\n@NgModule({\n  imports: [OverlayModule, MatOptionModule, MatCommonModule, MatSelect, MatSelectTrigger],\n  exports: [\n    CdkScrollableModule,\n    MatFormFieldModule,\n    MatSelect,\n    MatSelectTrigger,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel: (page: number, pageSize: number, length: number) => string = (\n    page: number,\n    pageSize: number,\n    length: number,\n  ) => {\n    if (length == 0 || pageSize == 0) {\n      return `0 of ${length}`;\n    }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex =\n      startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n\n    return `${startIndex + 1} – ${endIndex} of ${length}`;\n  };\n}\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY,\n};\n","<div class=\"mat-mdc-paginator-outer-container\">\n  <div class=\"mat-mdc-paginator-container\">\n    @if (!hidePageSize) {\n      <div class=\"mat-mdc-paginator-page-size\">\n        <div class=\"mat-mdc-paginator-page-size-label\" [attr.id]=\"_pageSizeLabelId\">\n          {{_intl.itemsPerPageLabel}}\n        </div>\n\n        @if (_displayedPageSizeOptions.length > 1) {\n          <mat-form-field\n            [appearance]=\"_formFieldAppearance!\"\n            [color]=\"color\"\n            class=\"mat-mdc-paginator-page-size-select\">\n            <mat-select\n              #selectRef\n              [value]=\"pageSize\"\n              [disabled]=\"disabled\"\n              [aria-labelledby]=\"_pageSizeLabelId\"\n              [panelClass]=\"selectConfig.panelClass || ''\"\n              [disableOptionCentering]=\"selectConfig.disableOptionCentering\"\n              (selectionChange)=\"_changePageSize($event.value)\"\n              hideSingleSelectionIndicator>\n              @for (pageSizeOption of _displayedPageSizeOptions; track pageSizeOption) {\n                <mat-option [value]=\"pageSizeOption\">\n                  {{pageSizeOption}}\n                </mat-option>\n              }\n            </mat-select>\n          <div class=\"mat-mdc-paginator-touch-target\" (click)=\"selectRef.open()\"></div>\n          </mat-form-field>\n        }\n\n        @if (_displayedPageSizeOptions.length <= 1) {\n          <div class=\"mat-mdc-paginator-page-size-value\">{{pageSize}}</div>\n        }\n      </div>\n    }\n\n    <div class=\"mat-mdc-paginator-range-actions\">\n      <div class=\"mat-mdc-paginator-range-label\" aria-live=\"polite\">\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\n      </div>\n\n      <!--\n      The buttons use `disabledInteractive` so that they can retain focus if they become disabled,\n      otherwise focus is moved to the document body. However, users should not be able to navigate\n      into these buttons, so `tabindex` is set to -1 when disabled.\n      -->\n\n      @if (showFirstLastButtons) {\n        <button mat-icon-button type=\"button\"\n                class=\"mat-mdc-paginator-navigation-first\"\n                (click)=\"_buttonClicked(0, _previousButtonsDisabled())\"\n                [attr.aria-label]=\"_intl.firstPageLabel\"\n                [matTooltip]=\"_intl.firstPageLabel\"\n                [matTooltipDisabled]=\"_previousButtonsDisabled()\"\n                matTooltipPosition=\"above\"\n                [disabled]=\"_previousButtonsDisabled()\"\n                [tabindex]=\"_previousButtonsDisabled() ? -1 : null\"\n                disabledInteractive>\n          <svg class=\"mat-mdc-paginator-icon\"\n              viewBox=\"0 0 24 24\"\n              focusable=\"false\"\n              aria-hidden=\"true\">\n            <path d=\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\"/>\n          </svg>\n        </button>\n      }\n      <button mat-icon-button type=\"button\"\n              class=\"mat-mdc-paginator-navigation-previous\"\n              (click)=\"_buttonClicked(pageIndex - 1, _previousButtonsDisabled())\"\n              [attr.aria-label]=\"_intl.previousPageLabel\"\n              [matTooltip]=\"_intl.previousPageLabel\"\n              [matTooltipDisabled]=\"_previousButtonsDisabled()\"\n              matTooltipPosition=\"above\"\n              [disabled]=\"_previousButtonsDisabled()\"\n              [tabindex]=\"_previousButtonsDisabled() ? -1 : null\"\n              disabledInteractive>\n        <svg class=\"mat-mdc-paginator-icon\"\n             viewBox=\"0 0 24 24\"\n             focusable=\"false\"\n             aria-hidden=\"true\">\n          <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/>\n        </svg>\n      </button>\n      <button mat-icon-button type=\"button\"\n              class=\"mat-mdc-paginator-navigation-next\"\n              (click)=\"_buttonClicked(pageIndex + 1, _nextButtonsDisabled())\"\n              [attr.aria-label]=\"_intl.nextPageLabel\"\n              [matTooltip]=\"_intl.nextPageLabel\"\n              [matTooltipDisabled]=\"_nextButtonsDisabled()\"\n              matTooltipPosition=\"above\"\n              [disabled]=\"_nextButtonsDisabled()\"\n              [tabindex]=\"_nextButtonsDisabled() ? -1 : null\"\n              disabledInteractive>\n        <svg class=\"mat-mdc-paginator-icon\"\n             viewBox=\"0 0 24 24\"\n             focusable=\"false\"\n             aria-hidden=\"true\">\n          <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/>\n        </svg>\n      </button>\n      @if (showFirstLastButtons) {\n        <button mat-icon-button type=\"button\"\n                class=\"mat-mdc-paginator-navigation-last\"\n                (click)=\"_buttonClicked(getNumberOfPages() - 1, _nextButtonsDisabled())\"\n                [attr.aria-label]=\"_intl.lastPageLabel\"\n                [matTooltip]=\"_intl.lastPageLabel\"\n                [matTooltipDisabled]=\"_nextButtonsDisabled()\"\n                matTooltipPosition=\"above\"\n                [disabled]=\"_nextButtonsDisabled()\"\n                [tabindex]=\"_nextButtonsDisabled() ? -1 : null\"\n                disabledInteractive>\n          <svg class=\"mat-mdc-paginator-icon\"\n              viewBox=\"0 0 24 24\"\n              focusable=\"false\"\n              aria-hidden=\"true\">\n            <path d=\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\"/>\n          </svg>\n        </button>\n      }\n    </div>\n  </div>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n  booleanAttribute,\n  inject,\n  numberAttribute,\n} from '@angular/core';\nimport {_IdGenerator} from '@angular/cdk/a11y';\nimport {MatOption, ThemePalette} from '../core';\nimport {MatSelect} from '../select';\nimport {MatIconButton} from '../button';\nimport {MatTooltip} from '../tooltip';\nimport {MatFormField, MatFormFieldAppearance} from '../form-field';\nimport {Observable, ReplaySubject, Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/** Object that can used to configure the underlying `MatSelect` inside a `MatPaginator`. */\nexport interface MatPaginatorSelectConfig {\n  /** Whether to center the active option over the trigger. */\n  disableOptionCentering?: boolean;\n\n  /** Classes to be passed to the select panel. */\n  panelClass?: string | string[] | Set<string> | {[key: string]: any};\n}\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size. */\n  pageSize: number;\n\n  /** The current total number of items being paged. */\n  length: number;\n}\n\n// Note that while `MatPaginatorDefaultOptions` and `MAT_PAGINATOR_DEFAULT_OPTIONS` are identical\n// between the MDC and non-MDC versions, we have to duplicate them, because the type of\n// `formFieldAppearance` is narrower in the MDC version.\n\n/** Object that can be used to configure the default options for the paginator module. */\nexport interface MatPaginatorDefaultOptions {\n  /** Number of items to display on a page. By default set to 50. */\n  pageSize?: number;\n\n  /** The set of provided page size options to display to the user. */\n  pageSizeOptions?: number[];\n\n  /** Whether to hide the page size selection UI from the user. */\n  hidePageSize?: boolean;\n\n  /** Whether to show the first/last buttons UI to the user. */\n  showFirstLastButtons?: boolean;\n\n  /** The default form-field appearance to apply to the page size options selector. */\n  formFieldAppearance?: MatFormFieldAppearance;\n}\n\n/** Injection token that can be used to provide the default options for the paginator module. */\nexport const MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken<MatPaginatorDefaultOptions>(\n  'MAT_PAGINATOR_DEFAULT_OPTIONS',\n);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrl: 'paginator.css',\n  host: {\n    'class': 'mat-mdc-paginator',\n    'role': 'group',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  imports: [MatFormField, MatSelect, MatOption, MatIconButton, MatTooltip],\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  _intl = inject(MatPaginatorIntl);\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n\n  /** If set, styles the \"page size\" form field with the designated style. */\n  _formFieldAppearance?: MatFormFieldAppearance;\n\n  /** ID for the DOM node containing the paginator's items per page label. */\n  readonly _pageSizeLabelId = inject(_IdGenerator).getId('mat-paginator-page-size-label-');\n\n  private _intlChanges: Subscription;\n  private _isInitialized = false;\n  private _initializedStream = new ReplaySubject<void>(1);\n\n  /**\n   * Theme color of the underlying form controls. This API is supported in M2\n   * themes only,it has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/paginator/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input({transform: numberAttribute})\n  get pageIndex(): number {\n    return this._pageIndex;\n  }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(value || 0, 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input({transform: numberAttribute})\n  get length(): number {\n    return this._length;\n  }\n  set length(value: number) {\n    this._length = value || 0;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input({transform: numberAttribute})\n  get pageSize(): number {\n    return this._pageSize;\n  }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(value || 0, 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] {\n    return this._pageSizeOptions;\n  }\n  set pageSizeOptions(value: number[] | readonly number[]) {\n    this._pageSizeOptions = (value || ([] as number[])).map(p => numberAttribute(p, 0));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input({transform: booleanAttribute})\n  hidePageSize: boolean = false;\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input({transform: booleanAttribute})\n  showFirstLastButtons: boolean = false;\n\n  /** Used to configure the underlying `MatSelect` inside the paginator. */\n  @Input() selectConfig: MatPaginatorSelectConfig = {};\n\n  /** Whether the paginator is disabled. */\n  @Input({transform: booleanAttribute})\n  disabled: boolean = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  /** Emits when the paginator is initialized. */\n  initialized: Observable<void> = this._initializedStream;\n\n  /** Inserted by Angular inject() migration for backwards compatibility */\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const _intl = this._intl;\n    const defaults = inject<MatPaginatorDefaultOptions>(MAT_PAGINATOR_DEFAULT_OPTIONS, {\n      optional: true,\n    });\n\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n\n    if (defaults) {\n      const {pageSize, pageSizeOptions, hidePageSize, showFirstLastButtons} = defaults;\n\n      if (pageSize != null) {\n        this._pageSize = pageSize;\n      }\n\n      if (pageSizeOptions != null) {\n        this._pageSizeOptions = pageSizeOptions;\n      }\n\n      if (hidePageSize != null) {\n        this.hidePageSize = hidePageSize;\n      }\n\n      if (showFirstLastButtons != null) {\n        this.showFirstLastButtons = showFirstLastButtons;\n      }\n    }\n\n    this._formFieldAppearance = defaults?.formFieldAppearance || 'outline';\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._initializedStream.next();\n  }\n\n  ngOnDestroy() {\n    this._initializedStream.complete();\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (this.hasNextPage()) {\n      this._navigate(this.pageIndex + 1);\n    }\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (this.hasPreviousPage()) {\n      this._navigate(this.pageIndex - 1);\n    }\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (this.hasPreviousPage()) {\n      this._navigate(0);\n    }\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (this.hasNextPage()) {\n      this._navigate(this.getNumberOfPages() - 1);\n    }\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._isInitialized) {\n      return;\n    }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize =\n        this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length,\n    });\n  }\n\n  /** Navigates to a specific page index. */\n  private _navigate(index: number) {\n    const previousIndex = this.pageIndex;\n\n    if (index !== previousIndex) {\n      this.pageIndex = index;\n      this._emitPageEvent(previousIndex);\n    }\n  }\n\n  /**\n   * Callback invoked when one of the navigation buttons is called.\n   * @param targetIndex Index to which the paginator should navigate.\n   * @param isDisabled Whether the button is disabled.\n   */\n  protected _buttonClicked(targetIndex: number, isDisabled: boolean) {\n    // Note that normally disabled buttons won't dispatch the click event, but the paginator ones\n    // do, because we're using `disabledInteractive` to allow them to be focusable. We need to\n    // check here to avoid the navigation.\n    if (!isDisabled) {\n      this._navigate(targetIndex);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\nimport {MatButtonModule} from '../button';\nimport {MatSelectModule} from '../select';\nimport {MatTooltipModule} from '../tooltip';\nimport {MatPaginator} from './paginator';\n\n@NgModule({\n  imports: [MatButtonModule, MatSelectModule, MatTooltipModule, MatPaginator],\n  exports: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  booleanAttribute,\n} from '@angular/core';\nimport {Observable, ReplaySubject, Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Position of the arrow that displays when sorted. */\nexport type SortHeaderArrowPosition = 'before' | 'after';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: SortDirection;\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n/** Default options for `mat-sort`.  */\nexport interface MatSortDefaultOptions {\n  /** Whether to disable clearing the sorting state. */\n  disableClear?: boolean;\n  /** Position of the arrow that displays when sorted. */\n  arrowPosition?: SortHeaderArrowPosition;\n}\n\n/** Injection token to be used to override the default options for `mat-sort`. */\nexport const MAT_SORT_DEFAULT_OPTIONS = new InjectionToken<MatSortDefaultOptions>(\n  'MAT_SORT_DEFAULT_OPTIONS',\n);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  host: {\n    'class': 'mat-sort',\n  },\n})\nexport class MatSort implements OnChanges, OnDestroy, OnInit {\n  private _initializedStream = new ReplaySubject<void>(1);\n\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overridden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: SortDirection = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection {\n    return this._direction;\n  }\n  set direction(direction: SortDirection) {\n    if (\n      direction &&\n      direction !== 'asc' &&\n      direction !== 'desc' &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overridden by the MatSortable's disable clear input.\n   */\n  @Input({alias: 'matSortDisableClear', transform: booleanAttribute})\n  disableClear: boolean;\n\n  /** Whether the sortable is disabled. */\n  @Input({alias: 'matSortDisabled', transform: booleanAttribute})\n  disabled: boolean = false;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /** Emits when the paginator is initialized. */\n  initialized: Observable<void> = this._initializedStream;\n\n  constructor(\n    @Optional()\n    @Inject(MAT_SORT_DEFAULT_OPTIONS)\n    private _defaultOptions?: MatSortDefaultOptions,\n  ) {}\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!sortable.id) {\n        throw getSortHeaderMissingIdError();\n      }\n\n      if (this.sortables.has(sortable.id)) {\n        throw getSortDuplicateSortableIdError(sortable.id);\n      }\n    }\n\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) {\n      return '';\n    }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear =\n      sortable?.disableClear ?? this.disableClear ?? !!this._defaultOptions?.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) {\n      nextDirectionIndex = 0;\n    }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._initializedStream.next();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._initializedStream.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: SortDirection, disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') {\n    sortOrder.reverse();\n  }\n  if (!disableClear) {\n    sortOrder.push('');\n  }\n\n  return sortOrder;\n}\n","<!--\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\n  will be read out as the user is navigating the table's cell (see #13012).\n\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\n-->\n<div class=\"mat-sort-header-container mat-focus-indicator\"\n     [class.mat-sort-header-sorted]=\"_isSorted()\"\n     [class.mat-sort-header-position-before]=\"arrowPosition === 'before'\"\n     [class.mat-sort-header-descending]=\"this._sort.direction === 'desc'\"\n     [class.mat-sort-header-ascending]=\"this._sort.direction === 'asc'\"\n     [class.mat-sort-header-recently-cleared-ascending]=\"_recentlyCleared() === 'asc'\"\n     [class.mat-sort-header-recently-cleared-descending]=\"_recentlyCleared() === 'desc'\"\n     [class.mat-sort-header-animations-disabled]=\"_animationModule === 'NoopAnimations'\"\n     [attr.tabindex]=\"_isDisabled() ? null : 0\"\n     [attr.role]=\"_isDisabled() ? null : 'button'\">\n\n  <!--\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\n  -->\n  <div class=\"mat-sort-header-content\">\n    <ng-content></ng-content>\n  </div>\n\n  <!-- Disable animations while a current animation is running -->\n  @if (_renderArrow()) {\n    <div class=\"mat-sort-header-arrow\">\n      <svg viewBox=\"0 -960 960 960\" focusable=\"false\" aria-hidden=\"true\">\n        <path d=\"M440-240v-368L296-464l-56-56 240-240 240 240-56 56-144-144v368h-80Z\"/>\n      </svg>\n    </div>\n  }\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n}\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n  booleanAttribute,\n  inject,\n  signal,\n  ANIMATION_MODULE_TYPE,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {\n  MAT_SORT_DEFAULT_OPTIONS,\n  MatSort,\n  MatSortable,\n  MatSortDefaultOptions,\n  SortHeaderArrowPosition,\n} from './sort';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {_CdkPrivateStyleLoader} from '@angular/cdk/private';\nimport {_StructuralStylesLoader} from '../core';\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n * @deprecated No longer being used, to be removed.\n * @breaking-change 21.0.0\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n * @deprecated No longer being used, to be removed.\n * @breaking-change 21.0.0\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState?: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrl: 'sort-header.css',\n  host: {\n    'class': 'mat-sort-header',\n    '(click)': '_toggleOnInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    '(mouseleave)': '_recentlyCleared.set(null)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSortHeader implements MatSortable, OnDestroy, OnInit, AfterViewInit {\n  _intl = inject(MatSortHeaderIntl);\n  _sort = inject(MatSort, {optional: true})!;\n  _columnDef = inject<MatSortHeaderColumnDef>('MAT_SORT_HEADER_COLUMN_DEF' as any, {\n    optional: true,\n  });\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  private _focusMonitor = inject(FocusMonitor);\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _ariaDescriber = inject(AriaDescriber, {optional: true});\n  private _renderChanges: Subscription | undefined;\n  protected _animationModule = inject(ANIMATION_MODULE_TYPE, {optional: true});\n\n  /**\n   * Indicates which state was just cleared from the sort header.\n   * Will be reset on the next interaction. Used for coordinating animations.\n   */\n  protected _recentlyCleared = signal<SortDirection | null>(null);\n\n  /**\n   * The element with role=\"button\" inside this component's view. We need this\n   * in order to apply a description with AriaDescriber.\n   */\n  private _sortButton: HTMLElement;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: SortHeaderArrowPosition = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: SortDirection;\n\n  /** whether the sort header is disabled. */\n  @Input({transform: booleanAttribute})\n  disabled: boolean = false;\n\n  /**\n   * Description applied to MatSortHeader's button element with aria-describedby. This text should\n   * describe the action that will occur when the user clicks the sort header.\n   */\n  @Input()\n  get sortActionDescription(): string {\n    return this._sortActionDescription;\n  }\n  set sortActionDescription(value: string) {\n    this._updateSortActionDescription(value);\n  }\n  // Default the action description to \"Sort\" because it's better than nothing.\n  // Without a description, the button's label comes from the sort header text content,\n  // which doesn't give any indication that it performs a sorting operation.\n  private _sortActionDescription: string = 'Sort';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input({transform: booleanAttribute})\n  disableClear: boolean;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n    const defaultOptions = inject<MatSortDefaultOptions>(MAT_SORT_DEFAULT_OPTIONS, {\n      optional: true,\n    });\n\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    if (!this._sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    if (defaultOptions?.arrowPosition) {\n      this.arrowPosition = defaultOptions?.arrowPosition;\n    }\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    this._sort.register(this);\n    this._renderChanges = merge(this._sort._stateChanges, this._sort.sortChange).subscribe(() =>\n      this._changeDetectorRef.markForCheck(),\n    );\n    this._sortButton = this._elementRef.nativeElement.querySelector('.mat-sort-header-container')!;\n    this._updateSortActionDescription(this._sortActionDescription);\n  }\n\n  ngAfterViewInit() {\n    // We use the focus monitor because we also want to style\n    // things differently based on the focus origin.\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(() => this._recentlyCleared.set(null));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._sort.deregister(this);\n    this._renderChanges?.unsubscribe();\n\n    if (this._sortButton) {\n      this._ariaDescriber?.removeDescription(this._sortButton, this._sortActionDescription);\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _toggleOnInteraction() {\n    if (!this._isDisabled()) {\n      const wasSorted = this._isSorted();\n      const prevDirection = this._sort.direction;\n      this._sort.sort(this);\n      this._recentlyCleared.set(wasSorted && !this._isSorted() ? prevDirection : null);\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === SPACE || event.keyCode === ENTER) {\n      event.preventDefault();\n      this._toggleOnInteraction();\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return (\n      this._sort.active == this.id &&\n      (this._sort.direction === 'asc' || this._sort.direction === 'desc')\n    );\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) {\n      return 'none';\n    }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n\n  private _updateSortActionDescription(newDescription: string) {\n    // We use AriaDescriber for the sort button instead of setting an `aria-label` because some\n    // screen readers (notably VoiceOver) will read both the column header *and* the button's label\n    // for every *cell* in the table, creating a lot of unnecessary noise.\n\n    // If _sortButton is undefined, the component hasn't been initialized yet so there's\n    // nothing to update in the DOM.\n    if (this._sortButton) {\n      // removeDescription will no-op if there is no existing message.\n      // TODO(jelbourn): remove optional chaining when AriaDescriber is required.\n      this._ariaDescriber?.removeDescription(this._sortButton, this._sortActionDescription);\n      this._ariaDescriber?.describe(this._sortButton, newDescription);\n    }\n\n    this._sortActionDescription = newDescription;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {MatCommonModule} from '../core';\n\n@NgModule({\n  imports: [MatCommonModule, MatSort, MatSortHeader],\n  exports: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER],\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Direction, Directionality} from '../bidi';\nimport {\n  CollectionViewer,\n  DataSource,\n  _DisposeViewRepeaterStrategy,\n  _RecycleViewRepeaterStrategy,\n  isDataSource,\n  _VIEW_REPEATER_STRATEGY,\n  _ViewRepeater,\n  _ViewRepeaterItemChange,\n  _ViewRepeaterItemInsertArgs,\n  _ViewRepeaterOperation,\n} from '../collections';\nimport {Platform} from '../platform';\nimport {ViewportRuler} from '../scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Input,\n  IterableChangeRecord,\n  IterableDiffer,\n  IterableDiffers,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  TemplateRef,\n  TrackByFunction,\n  ViewContainerRef,\n  ViewEncapsulation,\n  booleanAttribute,\n  inject,\n  Injector,\n  HostAttributeToken,\n} from '@angular/core';\nimport {\n  BehaviorSubject,\n  isObservable,\n  Observable,\n  of as observableOf,\n  Subject,\n  Subscription,\n} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {CdkColumnDef} from './cell';\nimport {_CoalescedStyleScheduler, _COALESCED_STYLE_SCHEDULER} from './coalesced-style-scheduler';\nimport {\n  BaseRowDef,\n  CdkCellOutlet,\n  CdkCellOutletMultiRowContext,\n  CdkCellOutletRowContext,\n  CdkFooterRowDef,\n  CdkHeaderRowDef,\n  CdkNoDataRow,\n  CdkRowDef,\n} from './row';\nimport {StickyStyler} from './sticky-styler';\nimport {\n  getTableDuplicateColumnNameError,\n  getTableMissingMatchingRowDefError,\n  getTableMissingRowDefsError,\n  getTableMultipleDefaultRowDefsError,\n  getTableUnknownColumnError,\n  getTableUnknownDataSourceError,\n} from './table-errors';\nimport {STICKY_POSITIONING_LISTENER, StickyPositioningListener} from './sticky-position-listener';\nimport {CDK_TABLE} from './tokens';\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\n@Directive({\n  selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n  providers: [{provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy}],\n})\nexport class CdkRecycleRows {}\n\n/** Interface used to provide an outlet for rows to be inserted into. */\nexport interface RowOutlet {\n  viewContainer: ViewContainerRef;\n}\n\n/** Possible types that can be set as the data source for a `CdkTable`. */\nexport type CdkTableDataSourceInput<T> = readonly T[] | DataSource<T> | Observable<readonly T[]>;\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\n@Directive({\n  selector: '[rowOutlet]',\n})\nexport class DataRowOutlet implements RowOutlet {\n  viewContainer = inject(ViewContainerRef);\n  elementRef = inject(ElementRef);\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const table = inject<CdkTable<unknown>>(CDK_TABLE);\n    table._rowOutlet = this;\n    table._outletAssigned();\n  }\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\n@Directive({\n  selector: '[headerRowOutlet]',\n})\nexport class HeaderRowOutlet implements RowOutlet {\n  viewContainer = inject(ViewContainerRef);\n  elementRef = inject(ElementRef);\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const table = inject<CdkTable<unknown>>(CDK_TABLE);\n    table._headerRowOutlet = this;\n    table._outletAssigned();\n  }\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\n@Directive({\n  selector: '[footerRowOutlet]',\n})\nexport class FooterRowOutlet implements RowOutlet {\n  viewContainer = inject(ViewContainerRef);\n  elementRef = inject(ElementRef);\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const table = inject<CdkTable<unknown>>(CDK_TABLE);\n    table._footerRowOutlet = this;\n    table._outletAssigned();\n  }\n}\n\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\n@Directive({\n  selector: '[noDataRowOutlet]',\n})\nexport class NoDataRowOutlet implements RowOutlet {\n  viewContainer = inject(ViewContainerRef);\n  elementRef = inject(ElementRef);\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const table = inject<CdkTable<unknown>>(CDK_TABLE);\n    table._noDataRowOutlet = this;\n    table._outletAssigned();\n  }\n}\n\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nexport const CDK_TABLE_TEMPLATE =\n  // Note that according to MDN, the `caption` element has to be projected as the **first**\n  // element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n  `\n  <ng-content select=\"caption\"/>\n  <ng-content select=\"colgroup, col\"/>\n\n  <!--\n    Unprojected content throws a hydration error so we need this to capture it.\n    It gets removed on the client so it doesn't affect the layout.\n  -->\n  @if (_isServer) {\n    <ng-content/>\n  }\n\n  @if (_isNativeHtmlTable) {\n    <thead role=\"rowgroup\">\n      <ng-container headerRowOutlet/>\n    </thead>\n    <tbody role=\"rowgroup\">\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n    </tbody>\n    <tfoot role=\"rowgroup\">\n      <ng-container footerRowOutlet/>\n    </tfoot>\n  } @else {\n    <ng-container headerRowOutlet/>\n    <ng-container rowOutlet/>\n    <ng-container noDataRowOutlet/>\n    <ng-container footerRowOutlet/>\n  }\n`;\n\n/**\n * Interface used to conveniently type the possible context interfaces for the render row.\n * @docs-private\n */\nexport interface RowContext<T>\n  extends CdkCellOutletMultiRowContext<T>,\n    CdkCellOutletRowContext<T> {}\n\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nabstract class RowViewRef<T> extends EmbeddedViewRef<RowContext<T>> {}\n\n/**\n * Set of properties that represents the identity of a single rendered row.\n *\n * When the table needs to determine the list of rows to render, it will do so by iterating through\n * each data object and evaluating its list of row templates to display (when multiTemplateDataRows\n * is false, there is only one template per data object). For each pair of data object and row\n * template, a `RenderRow` is added to the list of rows to render. If the data object and row\n * template pair has already been rendered, the previously used `RenderRow` is added; else a new\n * `RenderRow` is * created. Once the list is complete and all data objects have been iterated\n * through, a diff is performed to determine the changes that need to be made to the rendered rows.\n *\n * @docs-private\n */\nexport interface RenderRow<T> {\n  data: T;\n  dataIndex: number;\n  rowDef: CdkRowDef<T>;\n}\n\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\n@Component({\n  selector: 'cdk-table, table[cdk-table]',\n  exportAs: 'cdkTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrl: 'table.css',\n  host: {\n    'class': 'cdk-table',\n    '[class.cdk-table-fixed-layout]': 'fixedLayout',\n  },\n  encapsulation: ViewEncapsulation.None,\n  // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n  // The view for `MatTable` consists entirely of templates declared in other views. As they are\n  // declared elsewhere, they are checked when their declaration points are checked.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [\n    {provide: CDK_TABLE, useExisting: CdkTable},\n    {provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy},\n    {provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler},\n    // Prevent nested tables from seeing this table's StickyPositioningListener.\n    {provide: STICKY_POSITIONING_LISTENER, useValue: null},\n  ],\n  imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet],\n})\nexport class CdkTable<T>\n  implements AfterContentInit, AfterContentChecked, CollectionViewer, OnDestroy, OnInit\n{\n  protected readonly _differs = inject(IterableDiffers);\n  protected readonly _changeDetectorRef = inject(ChangeDetectorRef);\n  protected readonly _elementRef = inject(ElementRef);\n  protected readonly _dir = inject(Directionality, {optional: true});\n  private _platform = inject(Platform);\n  protected readonly _viewRepeater =\n    inject<_ViewRepeater<T, RenderRow<T>, RowContext<T>>>(_VIEW_REPEATER_STRATEGY);\n  protected readonly _coalescedStyleScheduler = inject<_CoalescedStyleScheduler>(\n    _COALESCED_STYLE_SCHEDULER,\n  );\n  private readonly _viewportRuler = inject(ViewportRuler);\n  protected readonly _stickyPositioningListener = inject<StickyPositioningListener>(\n    STICKY_POSITIONING_LISTENER,\n    {optional: true, skipSelf: true},\n  )!;\n\n  private _document = inject(DOCUMENT);\n\n  /** Latest data provided by the data source. */\n  protected _data: readonly T[];\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  /** List of the rendered rows as identified by their `RenderRow` object. */\n  private _renderRows: RenderRow<T>[];\n\n  /** Subscription that listens for the data provided by the data source. */\n  private _renderChangeSubscription: Subscription | null;\n\n  /**\n   * Map of all the user's defined columns (header, data, and footer cell template) identified by\n   * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n   * any custom column definitions added to `_customColumnDefs`.\n   */\n  private _columnDefsByName = new Map<string, CdkColumnDef>();\n\n  /**\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n   * using `ContentChildren` as well as any custom row definitions added to `_customRowDefs`.\n   */\n  private _rowDefs: CdkRowDef<T>[];\n\n  /**\n   * Set of all header row definitions that can be used by this table. Populated by the rows\n   * gathered by using `ContentChildren` as well as any custom row definitions added to\n   * `_customHeaderRowDefs`.\n   */\n  private _headerRowDefs: CdkHeaderRowDef[];\n\n  /**\n   * Set of all row definitions that can be used by this table. Populated by the rows gathered by\n   * using `ContentChildren` as well as any custom row definitions added to\n   * `_customFooterRowDefs`.\n   */\n  private _footerRowDefs: CdkFooterRowDef[];\n\n  /** Differ used to find the changes in the data provided by the data source. */\n  private _dataDiffer: IterableDiffer<RenderRow<T>>;\n\n  /** Stores the row definition that does not have a when predicate. */\n  private _defaultRowDef: CdkRowDef<T> | null;\n\n  /**\n   * Column definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * column definitions as *its* content child.\n   */\n  private _customColumnDefs = new Set<CdkColumnDef>();\n\n  /**\n   * Data row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * built-in data rows as *its* content child.\n   */\n  private _customRowDefs = new Set<CdkRowDef<T>>();\n\n  /**\n   * Header row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n   * built-in header rows as *its* content child.\n   */\n  private _customHeaderRowDefs = new Set<CdkHeaderRowDef>();\n\n  /**\n   * Footer row definitions that were defined outside of the direct content children of the table.\n   * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n   * built-in footer row as *its* content child.\n   */\n  private _customFooterRowDefs = new Set<CdkFooterRowDef>();\n\n  /** No data row that was defined outside of the direct content children of the table. */\n  private _customNoDataRow: CdkNoDataRow | null;\n\n  /**\n   * Whether the header row definition has been changed. Triggers an update to the header row after\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\n   */\n  private _headerRowDefChanged = true;\n\n  /**\n   * Whether the footer row definition has been changed. Triggers an update to the footer row after\n   * content is checked. Initialized as true so that the table renders the initial set of rows.\n   */\n  private _footerRowDefChanged = true;\n\n  /**\n   * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n   * change.\n   */\n  private _stickyColumnStylesNeedReset = true;\n\n  /**\n   * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n   * `false`, cached values will be used instead. This is only applicable to tables with\n   * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n   */\n  private _forceRecalculateCellWidths = true;\n\n  /**\n   * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n   * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n   * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n   * and row template matches, which allows the `IterableDiffer` to check rows by reference\n   * and understand which rows are added/moved/removed.\n   *\n   * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n   * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n   * contains an array of created pairs. The array is necessary to handle cases where the data\n   * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n   * stored.\n   */\n  private _cachedRenderRowsMap = new Map<T, WeakMap<CdkRowDef<T>, RenderRow<T>[]>>();\n\n  /** Whether the table is applied to a native `<table>`. */\n  protected _isNativeHtmlTable: boolean;\n\n  /**\n   * Utility class that is responsible for applying the appropriate sticky positioning styles to\n   * the table's rows and cells.\n   */\n  private _stickyStyler: StickyStyler;\n\n  /**\n   * CSS class added to any row or cell that has sticky positioning applied. May be overridden by\n   * table subclasses.\n   */\n  protected stickyCssClass: string = 'cdk-table-sticky';\n\n  /**\n   * Whether to manually add position: sticky to all sticky cell elements. Not needed if\n   * the position is set in a selector associated with the value of stickyCssClass. May be\n   * overridden by table subclasses\n   */\n  protected needsPositionStickyOnElement = true;\n\n  /** Whether the component is being rendered on the server. */\n  protected _isServer: boolean;\n\n  /** Whether the no data row is currently showing anything. */\n  private _isShowingNoDataRow = false;\n\n  /** Whether the table has rendered out all the outlets for the first time. */\n  private _hasAllOutlets = false;\n\n  /** Whether the table is done initializing. */\n  private _hasInitialized = false;\n\n  /** Aria role to apply to the table's cells based on the table's own role. */\n  _getCellRole(): string | null {\n    // Perform this lazily in case the table's role was updated by a directive after construction.\n    if (this._cellRoleInternal === undefined) {\n      // Note that we set `role=\"cell\"` even on native `td` elements,\n      // because some browsers seem to require it. See #29784.\n      const tableRole = this._elementRef.nativeElement.getAttribute('role');\n      return tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n    }\n\n    return this._cellRoleInternal;\n  }\n  private _cellRoleInternal: string | null | undefined = undefined;\n\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n   * relative to the function to know if a row should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n  @Input()\n  get trackBy(): TrackByFunction<T> {\n    return this._trackByFn;\n  }\n  set trackBy(fn: TrackByFunction<T>) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n      console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n    }\n    this._trackByFn = fn;\n  }\n  private _trackByFn: TrackByFunction<T>;\n\n  /**\n   * The table's source of data, which can be provided in three ways (in order of complexity):\n   *   - Simple data array (each object represents one table row)\n   *   - Stream that emits a data array each time the array changes\n   *   - `DataSource` object that implements the connect/disconnect interface.\n   *\n   * If a data array is provided, the table must be notified when the array's objects are\n   * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n   * render the diff since the last table render. If the data array reference is changed, the table\n   * will automatically trigger an update to the rows.\n   *\n   * When providing an Observable stream, the table will trigger an update automatically when the\n   * stream emits a new array of data.\n   *\n   * Finally, when providing a `DataSource` object, the table will use the Observable stream\n   * provided by the connect function and trigger updates when that stream emits new data array\n   * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n   * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n   * subscriptions registered during the connect process).\n   */\n  @Input()\n  get dataSource(): CdkTableDataSourceInput<T> {\n    return this._dataSource;\n  }\n  set dataSource(dataSource: CdkTableDataSourceInput<T>) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  private _dataSource: CdkTableDataSourceInput<T>;\n\n  /**\n   * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n   * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n   * dataobject will render the first row that evaluates its when predicate to true, in the order\n   * defined in the table, or otherwise the default row which does not have a when predicate.\n   */\n  @Input({transform: booleanAttribute})\n  get multiTemplateDataRows(): boolean {\n    return this._multiTemplateDataRows;\n  }\n  set multiTemplateDataRows(value: boolean) {\n    this._multiTemplateDataRows = value;\n\n    // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n    // this setter will be invoked before the row outlet has been defined hence the null check.\n    if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n      this._forceRenderDataRows();\n      this.updateStickyColumnStyles();\n    }\n  }\n  _multiTemplateDataRows: boolean = false;\n\n  /**\n   * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n   * and optimize rendering sticky styles for native tables. No-op for flex tables.\n   */\n  @Input({transform: booleanAttribute})\n  get fixedLayout(): boolean {\n    return this._fixedLayout;\n  }\n  set fixedLayout(value: boolean) {\n    this._fixedLayout = value;\n\n    // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n    this._forceRecalculateCellWidths = true;\n    this._stickyColumnStylesNeedReset = true;\n  }\n  private _fixedLayout: boolean = false;\n\n  /**\n   * Emits when the table completes rendering a set of data rows based on the latest data from the\n   * data source, even if the set of rows is empty.\n   */\n  @Output()\n  readonly contentChanged = new EventEmitter<void>();\n\n  // TODO(andrewseguin): Remove max value as the end index\n  //   and instead calculate the view on init and scroll.\n  /**\n   * Stream containing the latest information on what rows are being displayed on screen.\n   * Can be used by the data source to as a heuristic of what data should be provided.\n   *\n   * @docs-private\n   */\n  readonly viewChange = new BehaviorSubject<{start: number; end: number}>({\n    start: 0,\n    end: Number.MAX_VALUE,\n  });\n\n  // Outlets in the table's template where the header, data rows, and footer will be inserted.\n  _rowOutlet: DataRowOutlet;\n  _headerRowOutlet: HeaderRowOutlet;\n  _footerRowOutlet: FooterRowOutlet;\n  _noDataRowOutlet: NoDataRowOutlet;\n\n  /**\n   * The column definitions provided by the user that contain what the header, data, and footer\n   * cells should render for each column.\n   */\n  @ContentChildren(CdkColumnDef, {descendants: true}) _contentColumnDefs: QueryList<CdkColumnDef>;\n\n  /** Set of data row definitions that were provided to the table as content children. */\n  @ContentChildren(CdkRowDef, {descendants: true}) _contentRowDefs: QueryList<CdkRowDef<T>>;\n\n  /** Set of header row definitions that were provided to the table as content children. */\n  @ContentChildren(CdkHeaderRowDef, {\n    descendants: true,\n  })\n  _contentHeaderRowDefs: QueryList<CdkHeaderRowDef>;\n\n  /** Set of footer row definitions that were provided to the table as content children. */\n  @ContentChildren(CdkFooterRowDef, {\n    descendants: true,\n  })\n  _contentFooterRowDefs: QueryList<CdkFooterRowDef>;\n\n  /** Row definition that will only be rendered if there's no data in the table. */\n  @ContentChild(CdkNoDataRow) _noDataRow: CdkNoDataRow;\n\n  private _injector = inject(Injector);\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const role = inject(new HostAttributeToken('role'), {optional: true});\n\n    if (!role) {\n      this._elementRef.nativeElement.setAttribute('role', 'table');\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n  }\n\n  ngOnInit() {\n    this._setupStickyStyler();\n\n    // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n    // the user has provided a custom trackBy, return the result of that function as evaluated\n    // with the values of the `RenderRow`'s data and index.\n    this._dataDiffer = this._differs.find([]).create((_i: number, dataRow: RenderRow<T>) => {\n      return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n    });\n\n    this._viewportRuler\n      .change()\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        this._forceRecalculateCellWidths = true;\n      });\n  }\n\n  ngAfterContentInit() {\n    this._hasInitialized = true;\n  }\n\n  ngAfterContentChecked() {\n    // Only start re-rendering in `ngAfterContentChecked` after the first render.\n    if (this._canRender()) {\n      this._render();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stickyStyler?.destroy();\n\n    [\n      this._rowOutlet?.viewContainer,\n      this._headerRowOutlet?.viewContainer,\n      this._footerRowOutlet?.viewContainer,\n      this._cachedRenderRowsMap,\n      this._customColumnDefs,\n      this._customRowDefs,\n      this._customHeaderRowDefs,\n      this._customFooterRowDefs,\n      this._columnDefsByName,\n    ].forEach((def: ViewContainerRef | Set<unknown> | Map<unknown, unknown> | undefined) => {\n      def?.clear();\n    });\n\n    this._headerRowDefs = [];\n    this._footerRowDefs = [];\n    this._defaultRowDef = null;\n    this._onDestroy.next();\n    this._onDestroy.complete();\n\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    }\n  }\n\n  /**\n   * Renders rows based on the table's latest set of data, which was either provided directly as an\n   * input or retrieved through an Observable stream (directly or from a DataSource).\n   * Checks for differences in the data since the last diff to perform only the necessary\n   * changes (add/remove/move rows).\n   *\n   * If the table's data source is a DataSource or Observable, this will be invoked automatically\n   * each time the provided Observable stream emits a new data array. Otherwise if your data is\n   * an array, this function will need to be called to render any changes.\n   */\n  renderRows() {\n    this._renderRows = this._getAllRenderRows();\n    const changes = this._dataDiffer.diff(this._renderRows);\n    if (!changes) {\n      this._updateNoDataRow();\n      this.contentChanged.next();\n      return;\n    }\n    const viewContainer = this._rowOutlet.viewContainer;\n\n    this._viewRepeater.applyChanges(\n      changes,\n      viewContainer,\n      (\n        record: IterableChangeRecord<RenderRow<T>>,\n        _adjustedPreviousIndex: number | null,\n        currentIndex: number | null,\n      ) => this._getEmbeddedViewArgs(record.item, currentIndex!),\n      record => record.item.data,\n      (change: _ViewRepeaterItemChange<RenderRow<T>, RowContext<T>>) => {\n        if (change.operation === _ViewRepeaterOperation.INSERTED && change.context) {\n          this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n        }\n      },\n    );\n\n    // Update the meta context of a row's context data (index, count, first, last, ...)\n    this._updateRowIndexContext();\n\n    // Update rows that did not get added/removed/moved but may have had their identity changed,\n    // e.g. if trackBy matched data on some property but the actual data reference changed.\n    changes.forEachIdentityChange((record: IterableChangeRecord<RenderRow<T>>) => {\n      const rowView = <RowViewRef<T>>viewContainer.get(record.currentIndex!);\n      rowView.context.$implicit = record.item.data;\n    });\n\n    this._updateNoDataRow();\n\n    this.contentChanged.next();\n    this.updateStickyColumnStyles();\n  }\n\n  /** Adds a column definition that was not included as part of the content children. */\n  addColumnDef(columnDef: CdkColumnDef) {\n    this._customColumnDefs.add(columnDef);\n  }\n\n  /** Removes a column definition that was not included as part of the content children. */\n  removeColumnDef(columnDef: CdkColumnDef) {\n    this._customColumnDefs.delete(columnDef);\n  }\n\n  /** Adds a row definition that was not included as part of the content children. */\n  addRowDef(rowDef: CdkRowDef<T>) {\n    this._customRowDefs.add(rowDef);\n  }\n\n  /** Removes a row definition that was not included as part of the content children. */\n  removeRowDef(rowDef: CdkRowDef<T>) {\n    this._customRowDefs.delete(rowDef);\n  }\n\n  /** Adds a header row definition that was not included as part of the content children. */\n  addHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\n    this._customHeaderRowDefs.add(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n\n  /** Removes a header row definition that was not included as part of the content children. */\n  removeHeaderRowDef(headerRowDef: CdkHeaderRowDef) {\n    this._customHeaderRowDefs.delete(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n\n  /** Adds a footer row definition that was not included as part of the content children. */\n  addFooterRowDef(footerRowDef: CdkFooterRowDef) {\n    this._customFooterRowDefs.add(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n\n  /** Removes a footer row definition that was not included as part of the content children. */\n  removeFooterRowDef(footerRowDef: CdkFooterRowDef) {\n    this._customFooterRowDefs.delete(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n\n  /** Sets a no data row definition that was not included as a part of the content children. */\n  setNoDataRow(noDataRow: CdkNoDataRow | null) {\n    this._customNoDataRow = noDataRow;\n  }\n\n  /**\n   * Updates the header sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n   * automatically called when the header row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   */\n  updateStickyHeaderRowStyles(): void {\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n\n    // Hide the thead element if there are no header rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n    if (this._isNativeHtmlTable) {\n      const thead = closestTableSection(this._headerRowOutlet, 'thead');\n      if (thead) {\n        thead.style.display = headerRows.length ? '' : 'none';\n      }\n    }\n\n    const stickyStates = this._headerRowDefs.map(def => def.sticky);\n    this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n    this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n\n    // Reset the dirty state of the sticky input change since it has been used.\n    this._headerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n\n  /**\n   * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n   * automatically called when the footer row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   */\n  updateStickyFooterRowStyles(): void {\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n\n    // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n    if (this._isNativeHtmlTable) {\n      const tfoot = closestTableSection(this._footerRowOutlet, 'tfoot');\n      if (tfoot) {\n        tfoot.style.display = footerRows.length ? '' : 'none';\n      }\n    }\n\n    const stickyStates = this._footerRowDefs.map(def => def.sticky);\n    this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n    this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n    this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n\n    // Reset the dirty state of the sticky input change since it has been used.\n    this._footerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n\n  /**\n   * Updates the column sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the left and right. Then sticky styles are added for the left and right according\n   * to the column definitions for each cell in each row. This is automatically called when\n   * the data source provides a new set of data or when a column definition changes its sticky\n   * input. May be called manually for cases where the cell content changes outside of these events.\n   */\n  updateStickyColumnStyles() {\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n    const dataRows = this._getRenderedRows(this._rowOutlet);\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n\n    // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n    // In a table using a fixed layout, row content won't affect column width, so sticky styles\n    // don't need to be cleared unless either the sticky column config changes or one of the row\n    // defs change.\n    if ((this._isNativeHtmlTable && !this._fixedLayout) || this._stickyColumnStylesNeedReset) {\n      // Clear the left and right positioning from all columns in the table across all rows since\n      // sticky columns span across all table sections (header, data, footer)\n      this._stickyStyler.clearStickyPositioning(\n        [...headerRows, ...dataRows, ...footerRows],\n        ['left', 'right'],\n      );\n      this._stickyColumnStylesNeedReset = false;\n    }\n\n    // Update the sticky styles for each header row depending on the def's sticky state\n    headerRows.forEach((headerRow, i) => {\n      this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n    });\n\n    // Update the sticky styles for each data row depending on its def's sticky state\n    this._rowDefs.forEach(rowDef => {\n      // Collect all the rows rendered with this row definition.\n      const rows: HTMLElement[] = [];\n      for (let i = 0; i < dataRows.length; i++) {\n        if (this._renderRows[i].rowDef === rowDef) {\n          rows.push(dataRows[i]);\n        }\n      }\n\n      this._addStickyColumnStyles(rows, rowDef);\n    });\n\n    // Update the sticky styles for each footer row depending on the def's sticky state\n    footerRows.forEach((footerRow, i) => {\n      this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n    });\n\n    // Reset the dirty state of the sticky input change since it has been used.\n    Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n  }\n\n  /** Invoked whenever an outlet is created and has been assigned to the table. */\n  _outletAssigned(): void {\n    // Trigger the first render once all outlets have been assigned. We do it this way, as\n    // opposed to waiting for the next `ngAfterContentChecked`, because we don't know when\n    // the next change detection will happen.\n    // Also we can't use queries to resolve the outlets, because they're wrapped in a\n    // conditional, so we have to rely on them being assigned via DI.\n    if (\n      !this._hasAllOutlets &&\n      this._rowOutlet &&\n      this._headerRowOutlet &&\n      this._footerRowOutlet &&\n      this._noDataRowOutlet\n    ) {\n      this._hasAllOutlets = true;\n\n      // In some setups this may fire before `ngAfterContentInit`\n      // so we need a check here. See #28538.\n      if (this._canRender()) {\n        this._render();\n      }\n    }\n  }\n\n  /** Whether the table has all the information to start rendering. */\n  private _canRender(): boolean {\n    return this._hasAllOutlets && this._hasInitialized;\n  }\n\n  /** Renders the table if its state has changed. */\n  private _render(): void {\n    // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n    this._cacheRowDefs();\n    this._cacheColumnDefs();\n\n    // Make sure that the user has at least added header, footer, or data row def.\n    if (\n      !this._headerRowDefs.length &&\n      !this._footerRowDefs.length &&\n      !this._rowDefs.length &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw getTableMissingRowDefsError();\n    }\n\n    // Render updates if the list of columns have been changed for the header, row, or footer defs.\n    const columnsChanged = this._renderUpdatedColumns();\n    const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n    // Ensure sticky column styles are reset if set to `true` elsewhere.\n    this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n    this._forceRecalculateCellWidths = rowDefsChanged;\n\n    // If the header row definition has been changed, trigger a render to the header row.\n    if (this._headerRowDefChanged) {\n      this._forceRenderHeaderRows();\n      this._headerRowDefChanged = false;\n    }\n\n    // If the footer row definition has been changed, trigger a render to the footer row.\n    if (this._footerRowDefChanged) {\n      this._forceRenderFooterRows();\n      this._footerRowDefChanged = false;\n    }\n\n    // If there is a data source and row definitions, connect to the data source unless a\n    // connection has already been made.\n    if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n      this._observeRenderChanges();\n    } else if (this._stickyColumnStylesNeedReset) {\n      // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n      // called when it row data arrives. Otherwise, we need to call it proactively.\n      this.updateStickyColumnStyles();\n    }\n\n    this._checkStickyStates();\n  }\n\n  /**\n   * Get the list of RenderRow objects to render according to the current list of data and defined\n   * row definitions. If the previous list already contained a particular pair, it should be reused\n   * so that the differ equates their references.\n   */\n  private _getAllRenderRows(): RenderRow<T>[] {\n    const renderRows: RenderRow<T>[] = [];\n\n    // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n    // new cache while unused ones can be picked up by garbage collection.\n    const prevCachedRenderRows = this._cachedRenderRowsMap;\n    this._cachedRenderRowsMap = new Map();\n\n    // For each data object, get the list of rows that should be rendered, represented by the\n    // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n    for (let i = 0; i < this._data.length; i++) {\n      let data = this._data[i];\n      const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n\n      if (!this._cachedRenderRowsMap.has(data)) {\n        this._cachedRenderRowsMap.set(data, new WeakMap());\n      }\n\n      for (let j = 0; j < renderRowsForData.length; j++) {\n        let renderRow = renderRowsForData[j];\n\n        const cache = this._cachedRenderRowsMap.get(renderRow.data)!;\n        if (cache.has(renderRow.rowDef)) {\n          cache.get(renderRow.rowDef)!.push(renderRow);\n        } else {\n          cache.set(renderRow.rowDef, [renderRow]);\n        }\n        renderRows.push(renderRow);\n      }\n    }\n\n    return renderRows;\n  }\n\n  /**\n   * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n   * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n   * `(T, CdkRowDef)` pair.\n   */\n  private _getRenderRowsForData(\n    data: T,\n    dataIndex: number,\n    cache?: WeakMap<CdkRowDef<T>, RenderRow<T>[]>,\n  ): RenderRow<T>[] {\n    const rowDefs = this._getRowDefs(data, dataIndex);\n\n    return rowDefs.map(rowDef => {\n      const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef)! : [];\n      if (cachedRenderRows.length) {\n        const dataRow = cachedRenderRows.shift()!;\n        dataRow.dataIndex = dataIndex;\n        return dataRow;\n      } else {\n        return {data, rowDef, dataIndex};\n      }\n    });\n  }\n\n  /** Update the map containing the content's column definitions. */\n  private _cacheColumnDefs() {\n    this._columnDefsByName.clear();\n\n    const columnDefs = mergeArrayAndSet(\n      this._getOwnDefs(this._contentColumnDefs),\n      this._customColumnDefs,\n    );\n    columnDefs.forEach(columnDef => {\n      if (\n        this._columnDefsByName.has(columnDef.name) &&\n        (typeof ngDevMode === 'undefined' || ngDevMode)\n      ) {\n        throw getTableDuplicateColumnNameError(columnDef.name);\n      }\n      this._columnDefsByName.set(columnDef.name, columnDef);\n    });\n  }\n\n  /** Update the list of all available row definitions that can be used. */\n  private _cacheRowDefs() {\n    this._headerRowDefs = mergeArrayAndSet(\n      this._getOwnDefs(this._contentHeaderRowDefs),\n      this._customHeaderRowDefs,\n    );\n    this._footerRowDefs = mergeArrayAndSet(\n      this._getOwnDefs(this._contentFooterRowDefs),\n      this._customFooterRowDefs,\n    );\n    this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n\n    // After all row definitions are determined, find the row definition to be considered default.\n    const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n    if (\n      !this.multiTemplateDataRows &&\n      defaultRowDefs.length > 1 &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw getTableMultipleDefaultRowDefsError();\n    }\n    this._defaultRowDef = defaultRowDefs[0];\n  }\n\n  /**\n   * Check if the header, data, or footer rows have changed what columns they want to display or\n   * whether the sticky states have changed for the header or footer. If there is a diff, then\n   * re-render that section.\n   */\n  private _renderUpdatedColumns(): boolean {\n    const columnsDiffReducer = (acc: boolean, def: BaseRowDef) => {\n      // The differ should be run for every column, even if `acc` is already\n      // true (see #29922)\n      const diff = !!def.getColumnsDiff();\n      return acc || diff;\n    };\n\n    // Force re-render data rows if the list of column definitions have changed.\n    const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n    if (dataColumnsChanged) {\n      this._forceRenderDataRows();\n    }\n\n    // Force re-render header/footer rows if the list of column definitions have changed.\n    const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n    if (headerColumnsChanged) {\n      this._forceRenderHeaderRows();\n    }\n\n    const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n    if (footerColumnsChanged) {\n      this._forceRenderFooterRows();\n    }\n\n    return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n  }\n\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the row outlet. Otherwise start listening for new data.\n   */\n  private _switchDataSource(dataSource: CdkTableDataSourceInput<T>) {\n    this._data = [];\n\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    }\n\n    // Stop listening for data from the previous data source.\n    if (this._renderChangeSubscription) {\n      this._renderChangeSubscription.unsubscribe();\n      this._renderChangeSubscription = null;\n    }\n\n    if (!dataSource) {\n      if (this._dataDiffer) {\n        this._dataDiffer.diff([]);\n      }\n      if (this._rowOutlet) {\n        this._rowOutlet.viewContainer.clear();\n      }\n    }\n\n    this._dataSource = dataSource;\n  }\n\n  /** Set up a subscription for the data provided by the data source. */\n  private _observeRenderChanges() {\n    // If no data source has been set, there is nothing to observe for changes.\n    if (!this.dataSource) {\n      return;\n    }\n\n    let dataStream: Observable<readonly T[]> | undefined;\n\n    if (isDataSource(this.dataSource)) {\n      dataStream = this.dataSource.connect(this);\n    } else if (isObservable(this.dataSource)) {\n      dataStream = this.dataSource;\n    } else if (Array.isArray(this.dataSource)) {\n      dataStream = observableOf(this.dataSource);\n    }\n\n    if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableUnknownDataSourceError();\n    }\n\n    this._renderChangeSubscription = dataStream!\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(data => {\n        this._data = data || [];\n        this.renderRows();\n      });\n  }\n\n  /**\n   * Clears any existing content in the header row outlet and creates a new embedded view\n   * in the outlet using the header row definition.\n   */\n  private _forceRenderHeaderRows() {\n    // Clear the header row outlet if any content exists.\n    if (this._headerRowOutlet.viewContainer.length > 0) {\n      this._headerRowOutlet.viewContainer.clear();\n    }\n\n    this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n    this.updateStickyHeaderRowStyles();\n  }\n\n  /**\n   * Clears any existing content in the footer row outlet and creates a new embedded view\n   * in the outlet using the footer row definition.\n   */\n  private _forceRenderFooterRows() {\n    // Clear the footer row outlet if any content exists.\n    if (this._footerRowOutlet.viewContainer.length > 0) {\n      this._footerRowOutlet.viewContainer.clear();\n    }\n\n    this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n    this.updateStickyFooterRowStyles();\n  }\n\n  /** Adds the sticky column styles for the rows according to the columns' stick states. */\n  private _addStickyColumnStyles(rows: HTMLElement[], rowDef: BaseRowDef) {\n    const columnDefs = Array.from(rowDef?.columns || []).map(columnName => {\n      const columnDef = this._columnDefsByName.get(columnName);\n      if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownColumnError(columnName);\n      }\n      return columnDef!;\n    });\n    const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n    const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n    this._stickyStyler.updateStickyColumns(\n      rows,\n      stickyStartStates,\n      stickyEndStates,\n      !this._fixedLayout || this._forceRecalculateCellWidths,\n    );\n  }\n\n  /** Gets the list of rows that have been rendered in the row outlet. */\n  _getRenderedRows(rowOutlet: RowOutlet): HTMLElement[] {\n    const renderedRows: HTMLElement[] = [];\n\n    for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n      const viewRef = rowOutlet.viewContainer.get(i)! as EmbeddedViewRef<any>;\n      renderedRows.push(viewRef.rootNodes[0]);\n    }\n\n    return renderedRows;\n  }\n\n  /**\n   * Get the matching row definitions that should be used for this row data. If there is only\n   * one row definition, it is returned. Otherwise, find the row definitions that has a when\n   * predicate that returns true with the data. If none return true, return the default row\n   * definition.\n   */\n  _getRowDefs(data: T, dataIndex: number): CdkRowDef<T>[] {\n    if (this._rowDefs.length == 1) {\n      return [this._rowDefs[0]];\n    }\n\n    let rowDefs: CdkRowDef<T>[] = [];\n    if (this.multiTemplateDataRows) {\n      rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n    } else {\n      let rowDef =\n        this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n      if (rowDef) {\n        rowDefs.push(rowDef);\n      }\n    }\n\n    if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableMissingMatchingRowDefError(data);\n    }\n\n    return rowDefs;\n  }\n\n  private _getEmbeddedViewArgs(\n    renderRow: RenderRow<T>,\n    index: number,\n  ): _ViewRepeaterItemInsertArgs<RowContext<T>> {\n    const rowDef = renderRow.rowDef;\n    const context: RowContext<T> = {$implicit: renderRow.data};\n    return {\n      templateRef: rowDef.template,\n      context,\n      index,\n    };\n  }\n\n  /**\n   * Creates a new row template in the outlet and fills it with the set of cell templates.\n   * Optionally takes a context to provide to the row and cells, as well as an optional index\n   * of where to place the new row template in the outlet.\n   */\n  private _renderRow(\n    outlet: RowOutlet,\n    rowDef: BaseRowDef,\n    index: number,\n    context: RowContext<T> = {},\n  ): EmbeddedViewRef<RowContext<T>> {\n    // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n    const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n    this._renderCellTemplateForItem(rowDef, context);\n    return view;\n  }\n\n  private _renderCellTemplateForItem(rowDef: BaseRowDef, context: RowContext<T>) {\n    for (let cellTemplate of this._getCellTemplates(rowDef)) {\n      if (CdkCellOutlet.mostRecentCellOutlet) {\n        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updates the index-related context for each row to reflect any changes in the index of the rows,\n   * e.g. first/last/even/odd.\n   */\n  private _updateRowIndexContext() {\n    const viewContainer = this._rowOutlet.viewContainer;\n    for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n      const viewRef = viewContainer.get(renderIndex) as RowViewRef<T>;\n      const context = viewRef.context as RowContext<T>;\n      context.count = count;\n      context.first = renderIndex === 0;\n      context.last = renderIndex === count - 1;\n      context.even = renderIndex % 2 === 0;\n      context.odd = !context.even;\n\n      if (this.multiTemplateDataRows) {\n        context.dataIndex = this._renderRows[renderIndex].dataIndex;\n        context.renderIndex = renderIndex;\n      } else {\n        context.index = this._renderRows[renderIndex].dataIndex;\n      }\n    }\n  }\n\n  /** Gets the column definitions for the provided row def. */\n  private _getCellTemplates(rowDef: BaseRowDef): TemplateRef<any>[] {\n    if (!rowDef || !rowDef.columns) {\n      return [];\n    }\n    return Array.from(rowDef.columns, columnId => {\n      const column = this._columnDefsByName.get(columnId);\n\n      if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownColumnError(columnId);\n      }\n\n      return rowDef.extractCellTemplate(column!);\n    });\n  }\n\n  /**\n   * Forces a re-render of the data rows. Should be called in cases where there has been an input\n   * change that affects the evaluation of which rows should be rendered, e.g. toggling\n   * `multiTemplateDataRows` or adding/removing row definitions.\n   */\n  private _forceRenderDataRows() {\n    this._dataDiffer.diff([]);\n    this._rowOutlet.viewContainer.clear();\n    this.renderRows();\n  }\n\n  /**\n   * Checks if there has been a change in sticky states since last check and applies the correct\n   * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n   * during a change detection and after the inputs are settled (after content check).\n   */\n  private _checkStickyStates() {\n    const stickyCheckReducer = (\n      acc: boolean,\n      d: CdkHeaderRowDef | CdkFooterRowDef | CdkColumnDef,\n    ) => {\n      return acc || d.hasStickyChanged();\n    };\n\n    // Note that the check needs to occur for every definition since it notifies the definition\n    // that it can reset its dirty state. Using another operator like `some` may short-circuit\n    // remaining definitions and leave them in an unchecked state.\n\n    if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyHeaderRowStyles();\n    }\n\n    if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyFooterRowStyles();\n    }\n\n    if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n      this._stickyColumnStylesNeedReset = true;\n      this.updateStickyColumnStyles();\n    }\n  }\n\n  /**\n   * Creates the sticky styler that will be used for sticky rows and columns. Listens\n   * for directionality changes and provides the latest direction to the styler. Re-applies column\n   * stickiness when directionality changes.\n   */\n  private _setupStickyStyler() {\n    const direction: Direction = this._dir ? this._dir.value : 'ltr';\n    this._stickyStyler = new StickyStyler(\n      this._isNativeHtmlTable,\n      this.stickyCssClass,\n      direction,\n      this._coalescedStyleScheduler,\n      this._platform.isBrowser,\n      this.needsPositionStickyOnElement,\n      this._stickyPositioningListener,\n      this._injector,\n    );\n    (this._dir ? this._dir.change : observableOf<Direction>())\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(value => {\n        this._stickyStyler.direction = value;\n        this.updateStickyColumnStyles();\n      });\n  }\n\n  /** Filters definitions that belong to this table from a QueryList. */\n  private _getOwnDefs<I extends {_table?: any}>(items: QueryList<I>): I[] {\n    return items.filter(item => !item._table || item._table === this);\n  }\n\n  /** Creates or removes the no data row, depending on whether any data is being shown. */\n  private _updateNoDataRow() {\n    const noDataRow = this._customNoDataRow || this._noDataRow;\n\n    if (!noDataRow) {\n      return;\n    }\n\n    const shouldShow = this._rowOutlet.viewContainer.length === 0;\n\n    if (shouldShow === this._isShowingNoDataRow) {\n      return;\n    }\n\n    const container = this._noDataRowOutlet.viewContainer;\n\n    if (shouldShow) {\n      const view = container.createEmbeddedView(noDataRow.templateRef);\n      const rootNode: HTMLElement | undefined = view.rootNodes[0];\n\n      // Only add the attributes if we have a single root node since it's hard\n      // to figure out which one to add it to when there are multiple.\n      if (view.rootNodes.length === 1 && rootNode?.nodeType === this._document.ELEMENT_NODE) {\n        rootNode.setAttribute('role', 'row');\n        rootNode.classList.add(noDataRow._contentClassName);\n      }\n    } else {\n      container.clear();\n    }\n\n    this._isShowingNoDataRow = shouldShow;\n\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet<T>(array: T[], set: Set<T>): T[] {\n  return array.concat(Array.from(set));\n}\n\n/**\n * Finds the closest table section to an outlet. We can't use `HTMLElement.closest` for this,\n * because the node representing the outlet is a comment.\n */\nfunction closestTableSection(outlet: RowOutlet, section: string): HTMLElement | null {\n  const uppercaseSection = section.toUpperCase();\n  let current: Node | null = outlet.viewContainer.element.nativeElement;\n\n  while (current) {\n    // 1 is an element node.\n    const nodeName = current.nodeType === 1 ? (current as HTMLElement).nodeName : null;\n    if (nodeName === uppercaseSection) {\n      return current as HTMLElement;\n    } else if (nodeName === 'TABLE') {\n      // Stop traversing past the `table` node.\n      break;\n    }\n    current = current.parentNode;\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nexport const CDK_TABLE = new InjectionToken<any>('CDK_TABLE');\n\n/** Configurable options for `CdkTextColumn`. */\nexport interface TextColumnOptions<T> {\n  /**\n   * Default function that provides the header text based on the column name if a header\n   * text is not provided.\n   */\n  defaultHeaderTextTransform?: (name: string) => string;\n\n  /** Default data accessor to use if one is not provided. */\n  defaultDataAccessor?: (data: T, name: string) => string;\n}\n\n/** Injection token that can be used to specify the text column options. */\nexport const TEXT_COLUMN_OPTIONS = new InjectionToken<TextColumnOptions<any>>(\n  'text-column-options',\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  Input,\n  TemplateRef,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {CanStick} from './can-stick';\nimport {CDK_TABLE} from './tokens';\n\n/** Base interface for a cell definition. Captures a column's cell template definition. */\nexport interface CellDef {\n  template: TemplateRef<any>;\n}\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[cdkCellDef]',\n})\nexport class CdkCellDef implements CellDef {\n  /** @docs-private */\n  template = inject<TemplateRef<any>>(TemplateRef);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n}\n\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[cdkHeaderCellDef]',\n})\nexport class CdkHeaderCellDef implements CellDef {\n  /** @docs-private */\n  template = inject<TemplateRef<any>>(TemplateRef);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n}\n\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[cdkFooterCellDef]',\n})\nexport class CdkFooterCellDef implements CellDef {\n  /** @docs-private */\n  template = inject<TemplateRef<any>>(TemplateRef);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n}\n\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[cdkColumnDef]',\n  providers: [{provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef}],\n})\nexport class CdkColumnDef implements CanStick {\n  _table? = inject(CDK_TABLE, {optional: true});\n\n  private _hasStickyChanged = false;\n\n  /** Unique name for this column. */\n  @Input('cdkColumnDef')\n  get name(): string {\n    return this._name;\n  }\n  set name(name: string) {\n    this._setNameInput(name);\n  }\n  protected _name: string;\n\n  /** Whether the cell is sticky. */\n  @Input({transform: booleanAttribute})\n  get sticky(): boolean {\n    return this._sticky;\n  }\n  set sticky(value: boolean) {\n    if (value !== this._sticky) {\n      this._sticky = value;\n      this._hasStickyChanged = true;\n    }\n  }\n  private _sticky = false;\n\n  /**\n   * Whether this column should be sticky positioned on the end of the row. Should make sure\n   * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n   * has been changed.\n   */\n  @Input({transform: booleanAttribute})\n  get stickyEnd(): boolean {\n    return this._stickyEnd;\n  }\n  set stickyEnd(value: boolean) {\n    if (value !== this._stickyEnd) {\n      this._stickyEnd = value;\n      this._hasStickyChanged = true;\n    }\n  }\n  _stickyEnd: boolean = false;\n\n  /** @docs-private */\n  @ContentChild(CdkCellDef) cell: CdkCellDef;\n\n  /** @docs-private */\n  @ContentChild(CdkHeaderCellDef) headerCell: CdkHeaderCellDef;\n\n  /** @docs-private */\n  @ContentChild(CdkFooterCellDef) footerCell: CdkFooterCellDef;\n\n  /**\n   * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n   * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n   * do not match are replaced by the '-' character.\n   */\n  cssClassFriendlyName: string;\n\n  /**\n   * Class name for cells in this column.\n   * @docs-private\n   */\n  _columnCssClassName: string[];\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /** Whether the sticky state has changed. */\n  hasStickyChanged(): boolean {\n    const hasStickyChanged = this._hasStickyChanged;\n    this.resetStickyChanged();\n    return hasStickyChanged;\n  }\n\n  /** Resets the sticky changed state. */\n  resetStickyChanged(): void {\n    this._hasStickyChanged = false;\n  }\n\n  /**\n   * Overridable method that sets the css classes that will be added to every cell in this\n   * column.\n   * In the future, columnCssClassName will change from type string[] to string and this\n   * will set a single string value.\n   * @docs-private\n   */\n  protected _updateColumnCssClassName() {\n    this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n  }\n\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  protected _setNameInput(value: string) {\n    // If the directive is set without a name (updated programmatically), then this setter will\n    // trigger with an empty string and should not overwrite the programmatically set value.\n    if (value) {\n      this._name = value;\n      this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n      this._updateColumnCssClassName();\n    }\n  }\n}\n\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nexport class BaseCdkCell {\n  constructor(columnDef: CdkColumnDef, elementRef: ElementRef) {\n    elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n  }\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-header-cell, th[cdk-header-cell]',\n  host: {\n    'class': 'cdk-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class CdkHeaderCell extends BaseCdkCell {\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super(inject(CdkColumnDef), inject(ElementRef));\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n  host: {\n    'class': 'cdk-footer-cell',\n  },\n})\nexport class CdkFooterCell extends BaseCdkCell {\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const columnDef = inject(CdkColumnDef);\n    const elementRef = inject(ElementRef);\n\n    super(columnDef, elementRef);\n\n    const role = columnDef._table?._getCellRole();\n    if (role) {\n      elementRef.nativeElement.setAttribute('role', role);\n    }\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'cdk-cell, td[cdk-cell]',\n  host: {\n    'class': 'cdk-cell',\n  },\n})\nexport class CdkCell extends BaseCdkCell {\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const columnDef = inject(CdkColumnDef);\n    const elementRef = inject(ElementRef);\n\n    super(columnDef, elementRef);\n\n    const role = columnDef._table?._getCellRole();\n    if (role) {\n      elementRef.nativeElement.setAttribute('role', role);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, InjectionToken, NgZone, inject} from '@angular/core';\n\n/**\n * @docs-private\n */\nexport class _Schedule {\n  tasks: (() => unknown)[] = [];\n  endTasks: (() => unknown)[] = [];\n}\n\n/** Injection token used to provide a coalesced style scheduler. */\nexport const _COALESCED_STYLE_SCHEDULER = new InjectionToken<_CoalescedStyleScheduler>(\n  '_COALESCED_STYLE_SCHEDULER',\n);\n\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\n@Injectable()\nexport class _CoalescedStyleScheduler {\n  private _currentSchedule: _Schedule | null = null;\n  private _ngZone = inject(NgZone);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /**\n   * Schedules the specified task to run at the end of the current VM turn.\n   */\n  schedule(task: () => unknown): void {\n    this._createScheduleIfNeeded();\n\n    this._currentSchedule!.tasks.push(task);\n  }\n\n  /**\n   * Schedules the specified task to run after other scheduled tasks at the end of the current\n   * VM turn.\n   */\n  scheduleEnd(task: () => unknown): void {\n    this._createScheduleIfNeeded();\n\n    this._currentSchedule!.endTasks.push(task);\n  }\n\n  private _createScheduleIfNeeded() {\n    if (this._currentSchedule) {\n      return;\n    }\n\n    this._currentSchedule = new _Schedule();\n\n    this._ngZone.runOutsideAngular(() =>\n      // TODO(mmalerba): Scheduling this using something that runs less frequently\n      //  (e.g. requestAnimationFrame, setTimeout, etc.) causes noticeable jank with the column\n      //  resizer. We should audit the usages of schedule / scheduleEnd in that component and see\n      //  if we can refactor it so that we don't need to flush the tasks quite so frequently.\n      queueMicrotask(() => {\n        while (this._currentSchedule!.tasks.length || this._currentSchedule!.endTasks.length) {\n          const schedule = this._currentSchedule!;\n\n          // Capture new tasks scheduled by the current set of tasks.\n          this._currentSchedule = new _Schedule();\n\n          for (const task of schedule.tasks) {\n            task();\n          }\n\n          for (const task of schedule.endTasks) {\n            task();\n          }\n        }\n\n        this._currentSchedule = null;\n      }),\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  ViewEncapsulation,\n  Input,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {CanStick} from './can-stick';\nimport {CdkCellDef, CdkColumnDef} from './cell';\nimport {CDK_TABLE} from './tokens';\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nexport const CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\n@Directive()\nexport abstract class BaseRowDef implements OnChanges {\n  template = inject<TemplateRef<any>>(TemplateRef);\n  protected _differs = inject(IterableDiffers);\n\n  /** The columns to be displayed on this row. */\n  columns: Iterable<string>;\n\n  /** Differ used to check if any changes were made to the columns. */\n  protected _columnsDiffer: IterableDiffer<any>;\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n    // of the columns property or an empty array if none is provided.\n    if (!this._columnsDiffer) {\n      const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n      this._columnsDiffer = this._differs.find(columns).create();\n      this._columnsDiffer.diff(columns);\n    }\n  }\n\n  /**\n   * Returns the difference between the current columns and the columns from the last diff, or null\n   * if there is no difference.\n   */\n  getColumnsDiff(): IterableChanges<any> | null {\n    return this._columnsDiffer.diff(this.columns);\n  }\n\n  /** Gets this row def's relevant cell template from the provided column def. */\n  extractCellTemplate(column: CdkColumnDef): TemplateRef<any> {\n    if (this instanceof CdkHeaderRowDef) {\n      return column.headerCell.template;\n    }\n    if (this instanceof CdkFooterRowDef) {\n      return column.footerCell.template;\n    } else {\n      return column.cell.template;\n    }\n  }\n}\n\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[cdkHeaderRowDef]',\n  inputs: [{name: 'columns', alias: 'cdkHeaderRowDef'}],\n})\nexport class CdkHeaderRowDef extends BaseRowDef implements CanStick, OnChanges {\n  _table? = inject(CDK_TABLE, {optional: true});\n\n  private _hasStickyChanged = false;\n\n  /** Whether the row is sticky. */\n  @Input({alias: 'cdkHeaderRowDefSticky', transform: booleanAttribute})\n  get sticky(): boolean {\n    return this._sticky;\n  }\n  set sticky(value: boolean) {\n    if (value !== this._sticky) {\n      this._sticky = value;\n      this._hasStickyChanged = true;\n    }\n  }\n  private _sticky = false;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super(inject<TemplateRef<any>>(TemplateRef), inject(IterableDiffers));\n  }\n\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n  override ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n  }\n\n  /** Whether the sticky state has changed. */\n  hasStickyChanged(): boolean {\n    const hasStickyChanged = this._hasStickyChanged;\n    this.resetStickyChanged();\n    return hasStickyChanged;\n  }\n\n  /** Resets the sticky changed state. */\n  resetStickyChanged(): void {\n    this._hasStickyChanged = false;\n  }\n}\n\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[cdkFooterRowDef]',\n  inputs: [{name: 'columns', alias: 'cdkFooterRowDef'}],\n})\nexport class CdkFooterRowDef extends BaseRowDef implements CanStick, OnChanges {\n  _table? = inject(CDK_TABLE, {optional: true});\n\n  private _hasStickyChanged = false;\n\n  /** Whether the row is sticky. */\n  @Input({alias: 'cdkFooterRowDefSticky', transform: booleanAttribute})\n  get sticky(): boolean {\n    return this._sticky;\n  }\n  set sticky(value: boolean) {\n    if (value !== this._sticky) {\n      this._sticky = value;\n      this._hasStickyChanged = true;\n    }\n  }\n  private _sticky = false;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super(inject<TemplateRef<any>>(TemplateRef), inject(IterableDiffers));\n  }\n\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n  override ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n  }\n\n  /** Whether the sticky state has changed. */\n  hasStickyChanged(): boolean {\n    const hasStickyChanged = this._hasStickyChanged;\n    this.resetStickyChanged();\n    return hasStickyChanged;\n  }\n\n  /** Resets the sticky changed state. */\n  resetStickyChanged(): void {\n    this._hasStickyChanged = false;\n  }\n}\n\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[cdkRowDef]',\n  inputs: [\n    {name: 'columns', alias: 'cdkRowDefColumns'},\n    {name: 'when', alias: 'cdkRowDefWhen'},\n  ],\n})\nexport class CdkRowDef<T> extends BaseRowDef {\n  _table? = inject(CDK_TABLE, {optional: true});\n\n  /**\n   * Function that should return true if this row template should be used for the provided index\n   * and row data. If left undefined, this row will be considered the default row template to use\n   * when no other when functions return true for the data.\n   * For every row, there must be at least one when function that passes or an undefined to default.\n   */\n  when: (index: number, rowData: T) => boolean;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    super(inject<TemplateRef<any>>(TemplateRef), inject(IterableDiffers));\n  }\n}\n\n/** Context provided to the row cells when `multiTemplateDataRows` is false */\nexport interface CdkCellOutletRowContext<T> {\n  /** Data for the row that this cell is located within. */\n  $implicit?: T;\n\n  /** Index of the data object in the provided data array. */\n  index?: number;\n\n  /** Length of the number of total rows. */\n  count?: number;\n\n  /** True if this cell is contained in the first row. */\n  first?: boolean;\n\n  /** True if this cell is contained in the last row. */\n  last?: boolean;\n\n  /** True if this cell is contained in a row with an even-numbered index. */\n  even?: boolean;\n\n  /** True if this cell is contained in a row with an odd-numbered index. */\n  odd?: boolean;\n}\n\n/**\n * Context provided to the row cells when `multiTemplateDataRows` is true. This context is the same\n * as CdkCellOutletRowContext except that the single `index` value is replaced by `dataIndex` and\n * `renderIndex`.\n */\nexport interface CdkCellOutletMultiRowContext<T> {\n  /** Data for the row that this cell is located within. */\n  $implicit?: T;\n\n  /** Index of the data object in the provided data array. */\n  dataIndex?: number;\n\n  /** Index location of the rendered row that this cell is located within. */\n  renderIndex?: number;\n\n  /** Length of the number of total rows. */\n  count?: number;\n\n  /** True if this cell is contained in the first row. */\n  first?: boolean;\n\n  /** True if this cell is contained in the last row. */\n  last?: boolean;\n\n  /** True if this cell is contained in a row with an even-numbered index. */\n  even?: boolean;\n\n  /** True if this cell is contained in a row with an odd-numbered index. */\n  odd?: boolean;\n}\n\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\n@Directive({\n  selector: '[cdkCellOutlet]',\n})\nexport class CdkCellOutlet implements OnDestroy {\n  _viewContainer = inject(ViewContainerRef);\n\n  /** The ordered list of cells to render within this outlet's view container */\n  cells: CdkCellDef[];\n\n  /** The data context to be provided to each cell */\n  context: any;\n\n  /**\n   * Static property containing the latest constructed instance of this class.\n   * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n   * createEmbeddedView. After one of these components are created, this property will provide\n   * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n   * construct the cells with the provided context.\n   */\n  static mostRecentCellOutlet: CdkCellOutlet | null = null;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n\n  ngOnDestroy() {\n    // If this was the last outlet being rendered in the view, remove the reference\n    // from the static property after it has been destroyed to avoid leaking memory.\n    if (CdkCellOutlet.mostRecentCellOutlet === this) {\n      CdkCellOutlet.mostRecentCellOutlet = null;\n    }\n  }\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'cdk-header-row, tr[cdk-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  imports: [CdkCellOutlet],\n})\nexport class CdkHeaderRow {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'cdk-footer-row, tr[cdk-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  imports: [CdkCellOutlet],\n})\nexport class CdkFooterRow {}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'cdk-row, tr[cdk-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  imports: [CdkCellOutlet],\n})\nexport class CdkRow {}\n\n/** Row that can be used to display a message when no data is shown in the table. */\n@Directive({\n  selector: 'ng-template[cdkNoDataRow]',\n})\nexport class CdkNoDataRow {\n  templateRef = inject<TemplateRef<any>>(TemplateRef);\n\n  _contentClassName = 'cdk-no-data-row';\n\n  constructor(...args: unknown[]);\n  constructor() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Directions that can be used when setting sticky positioning.\n * @docs-private\n */\nimport {afterNextRender, Injector} from '@angular/core';\nimport {Direction} from '../bidi';\nimport {_CoalescedStyleScheduler} from './coalesced-style-scheduler';\nimport {StickyPositioningListener} from './sticky-position-listener';\n\nexport type StickyDirection = 'top' | 'bottom' | 'left' | 'right';\n\ninterface UpdateStickyColumnsParams {\n  rows: HTMLElement[];\n  stickyStartStates: boolean[];\n  stickyEndStates: boolean[];\n}\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nexport const STICKY_DIRECTIONS: StickyDirection[] = ['top', 'bottom', 'left', 'right'];\n\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nexport class StickyStyler {\n  private _elemSizeCache = new WeakMap<HTMLElement, {width: number; height: number}>();\n  private _resizeObserver = globalThis?.ResizeObserver\n    ? new globalThis.ResizeObserver(entries => this._updateCachedSizes(entries))\n    : null;\n  private _updatedStickyColumnsParamsToReplay: UpdateStickyColumnsParams[] = [];\n  private _stickyColumnsReplayTimeout: ReturnType<typeof setTimeout> | null = null;\n  private _cachedCellWidths: number[] = [];\n  private readonly _borderCellCss: Readonly<{[d in StickyDirection]: string}>;\n  private _destroyed = false;\n\n  /**\n   * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n   * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n   *     using inline styles. If false, it is assumed that position: sticky is included in\n   *     the component stylesheet for _stickCellCss.\n   * @param _positionListener A listener that is notified of changes to sticky rows/columns\n   *     and their dimensions.\n   * @param _tableInjector The table's Injector.\n   */\n  constructor(\n    private _isNativeHtmlTable: boolean,\n    private _stickCellCss: string,\n    public direction: Direction,\n    private _coalescedStyleScheduler: _CoalescedStyleScheduler,\n    private _isBrowser = true,\n    private readonly _needsPositionStickyOnElement = true,\n    private readonly _positionListener?: StickyPositioningListener,\n    private readonly _tableInjector?: Injector,\n  ) {\n    this._borderCellCss = {\n      'top': `${_stickCellCss}-border-elem-top`,\n      'bottom': `${_stickCellCss}-border-elem-bottom`,\n      'left': `${_stickCellCss}-border-elem-left`,\n      'right': `${_stickCellCss}-border-elem-right`,\n    };\n  }\n\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n   */\n  clearStickyPositioning(rows: HTMLElement[], stickyDirections: StickyDirection[]) {\n    if (stickyDirections.includes('left') || stickyDirections.includes('right')) {\n      this._removeFromStickyColumnReplayQueue(rows);\n    }\n\n    const elementsToClear: HTMLElement[] = [];\n    for (const row of rows) {\n      // If the row isn't an element (e.g. if it's an `ng-container`),\n      // it won't have inline styles or `children` so we skip it.\n      if (row.nodeType !== row.ELEMENT_NODE) {\n        continue;\n      }\n\n      elementsToClear.push(row, ...(Array.from(row.children) as HTMLElement[]));\n    }\n\n    // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n    this._afterNextRender({\n      write: () => {\n        for (const element of elementsToClear) {\n          this._removeStickyStyle(element, stickyDirections);\n        }\n      },\n    });\n  }\n\n  /**\n   * Applies sticky left and right positions to the cells of each row according to the sticky\n   * states of the rendered column definitions.\n   * @param rows The rows that should have its set of cells stuck according to the sticky states.\n   * @param stickyStartStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the start of the row.\n   * @param stickyEndStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the end of the row.\n   * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n   *     column cell. If `false` cached widths will be used instead.\n   * @param replay Whether to enqueue this call for replay after a ResizeObserver update.\n   */\n  updateStickyColumns(\n    rows: HTMLElement[],\n    stickyStartStates: boolean[],\n    stickyEndStates: boolean[],\n    recalculateCellWidths = true,\n    replay = true,\n  ) {\n    // Don't cache any state if none of the columns are sticky.\n    if (\n      !rows.length ||\n      !this._isBrowser ||\n      !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))\n    ) {\n      this._positionListener?.stickyColumnsUpdated({sizes: []});\n      this._positionListener?.stickyEndColumnsUpdated({sizes: []});\n      return;\n    }\n\n    // Coalesce with sticky row updates (and potentially other changes like column resize).\n    const firstRow = rows[0];\n    const numCells = firstRow.children.length;\n\n    const isRtl = this.direction === 'rtl';\n    const start = isRtl ? 'right' : 'left';\n    const end = isRtl ? 'left' : 'right';\n\n    const lastStickyStart = stickyStartStates.lastIndexOf(true);\n    const firstStickyEnd = stickyEndStates.indexOf(true);\n\n    let cellWidths: number[];\n    let startPositions: number[];\n    let endPositions: number[];\n\n    if (replay) {\n      this._updateStickyColumnReplayQueue({\n        rows: [...rows],\n        stickyStartStates: [...stickyStartStates],\n        stickyEndStates: [...stickyEndStates],\n      });\n    }\n\n    this._afterNextRender({\n      earlyRead: () => {\n        cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n\n        startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n      },\n      write: () => {\n        for (const row of rows) {\n          for (let i = 0; i < numCells; i++) {\n            const cell = row.children[i] as HTMLElement;\n            if (stickyStartStates[i]) {\n              this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n            }\n\n            if (stickyEndStates[i]) {\n              this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n            }\n          }\n        }\n\n        if (this._positionListener && cellWidths.some(w => !!w)) {\n          this._positionListener.stickyColumnsUpdated({\n            sizes:\n              lastStickyStart === -1\n                ? []\n                : cellWidths\n                    .slice(0, lastStickyStart + 1)\n                    .map((width, index) => (stickyStartStates[index] ? width : null)),\n          });\n          this._positionListener.stickyEndColumnsUpdated({\n            sizes:\n              firstStickyEnd === -1\n                ? []\n                : cellWidths\n                    .slice(firstStickyEnd)\n                    .map((width, index) => (stickyEndStates[index + firstStickyEnd] ? width : null))\n                    .reverse(),\n          });\n        }\n      },\n    });\n  }\n\n  /**\n   * Applies sticky positioning to the row's cells if using the native table layout, and to the\n   * row itself otherwise.\n   * @param rowsToStick The list of rows that should be stuck according to their corresponding\n   *     sticky state and to the provided top or bottom position.\n   * @param stickyStates A list of boolean states where each state represents whether the row\n   *     should be stuck in the particular top or bottom position.\n   * @param position The position direction in which the row should be stuck if that row should be\n   *     sticky.\n   *\n   */\n  stickRows(rowsToStick: HTMLElement[], stickyStates: boolean[], position: 'top' | 'bottom') {\n    // Since we can't measure the rows on the server, we can't stick the rows properly.\n    if (!this._isBrowser) {\n      return;\n    }\n\n    // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n    // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n    // sticky states need to be reversed as well.\n    const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n    const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n\n    // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n    const stickyOffsets: number[] = [];\n    const stickyCellHeights: (number | undefined)[] = [];\n    const elementsToStick: HTMLElement[][] = [];\n\n    // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n    // (and potentially other changes like column resize).\n    this._afterNextRender({\n      earlyRead: () => {\n        for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n          if (!states[rowIndex]) {\n            continue;\n          }\n\n          stickyOffsets[rowIndex] = stickyOffset;\n          const row = rows[rowIndex];\n          elementsToStick[rowIndex] = this._isNativeHtmlTable\n            ? (Array.from(row.children) as HTMLElement[])\n            : [row];\n\n          const height = this._retrieveElementSize(row).height;\n          stickyOffset += height;\n          stickyCellHeights[rowIndex] = height;\n        }\n      },\n      write: () => {\n        const borderedRowIndex = states.lastIndexOf(true);\n\n        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n          if (!states[rowIndex]) {\n            continue;\n          }\n\n          const offset = stickyOffsets[rowIndex];\n          const isBorderedRowIndex = rowIndex === borderedRowIndex;\n          for (const element of elementsToStick[rowIndex]) {\n            this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n          }\n        }\n\n        if (position === 'top') {\n          this._positionListener?.stickyHeaderRowsUpdated({\n            sizes: stickyCellHeights,\n            offsets: stickyOffsets,\n            elements: elementsToStick,\n          });\n        } else {\n          this._positionListener?.stickyFooterRowsUpdated({\n            sizes: stickyCellHeights,\n            offsets: stickyOffsets,\n            elements: elementsToStick,\n          });\n        }\n      },\n    });\n  }\n\n  /**\n   * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n   * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n   * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n   * the tfoot element.\n   */\n  updateStickyFooterContainer(tableElement: Element, stickyStates: boolean[]) {\n    if (!this._isNativeHtmlTable) {\n      return;\n    }\n\n    // Coalesce with other sticky updates (and potentially other changes like column resize).\n    this._afterNextRender({\n      write: () => {\n        const tfoot = tableElement.querySelector('tfoot')!;\n\n        if (tfoot) {\n          if (stickyStates.some(state => !state)) {\n            this._removeStickyStyle(tfoot, ['bottom']);\n          } else {\n            this._addStickyStyle(tfoot, 'bottom', 0, false);\n          }\n        }\n      },\n    });\n  }\n\n  /** Triggered by the table's OnDestroy hook. */\n  destroy() {\n    if (this._stickyColumnsReplayTimeout) {\n      clearTimeout(this._stickyColumnsReplayTimeout);\n    }\n\n    this._resizeObserver?.disconnect();\n    this._destroyed = true;\n  }\n\n  /**\n   * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n   * the zIndex, removing each of the provided sticky directions, and removing the\n   * sticky position if there are no more directions.\n   */\n  _removeStickyStyle(element: HTMLElement, stickyDirections: StickyDirection[]) {\n    if (!element.classList.contains(this._stickCellCss)) {\n      return;\n    }\n\n    for (const dir of stickyDirections) {\n      element.style[dir] = '';\n      element.classList.remove(this._borderCellCss[dir]);\n    }\n\n    // If the element no longer has any more sticky directions, remove sticky positioning and\n    // the sticky CSS class.\n    // Short-circuit checking element.style[dir] for stickyDirections as they\n    // were already removed above.\n    const hasDirection = STICKY_DIRECTIONS.some(\n      dir => stickyDirections.indexOf(dir) === -1 && element.style[dir],\n    );\n    if (hasDirection) {\n      element.style.zIndex = this._getCalculatedZIndex(element);\n    } else {\n      // When not hasDirection, _getCalculatedZIndex will always return ''.\n      element.style.zIndex = '';\n      if (this._needsPositionStickyOnElement) {\n        element.style.position = '';\n      }\n      element.classList.remove(this._stickCellCss);\n    }\n  }\n\n  /**\n   * Adds the sticky styling to the element by adding the sticky style class, changing position\n   * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n   * direction and value.\n   */\n  _addStickyStyle(\n    element: HTMLElement,\n    dir: StickyDirection,\n    dirValue: number,\n    isBorderElement: boolean,\n  ) {\n    element.classList.add(this._stickCellCss);\n    if (isBorderElement) {\n      element.classList.add(this._borderCellCss[dir]);\n    }\n    element.style[dir] = `${dirValue}px`;\n    element.style.zIndex = this._getCalculatedZIndex(element);\n    if (this._needsPositionStickyOnElement) {\n      element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n    }\n  }\n\n  /**\n   * Calculate what the z-index should be for the element, depending on what directions (top,\n   * bottom, left, right) have been set. It should be true that elements with a top direction\n   * should have the highest index since these are elements like a table header. If any of those\n   * elements are also sticky in another direction, then they should appear above other elements\n   * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n   * (e.g. footer rows) should then be next in the ordering such that they are below the header\n   * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n   * should minimally increment so that they are above non-sticky elements but below top and bottom\n   * elements.\n   */\n  _getCalculatedZIndex(element: HTMLElement): string {\n    const zIndexIncrements = {\n      top: 100,\n      bottom: 10,\n      left: 1,\n      right: 1,\n    };\n\n    let zIndex = 0;\n    // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n    // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n    // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n    for (const dir of STICKY_DIRECTIONS as Iterable<StickyDirection> & StickyDirection[]) {\n      if (element.style[dir]) {\n        zIndex += zIndexIncrements[dir];\n      }\n    }\n\n    return zIndex ? `${zIndex}` : '';\n  }\n\n  /** Gets the widths for each cell in the provided row. */\n  _getCellWidths(row: HTMLElement, recalculateCellWidths = true): number[] {\n    if (!recalculateCellWidths && this._cachedCellWidths.length) {\n      return this._cachedCellWidths;\n    }\n\n    const cellWidths: number[] = [];\n    const firstRowCells = row.children;\n    for (let i = 0; i < firstRowCells.length; i++) {\n      const cell = firstRowCells[i] as HTMLElement;\n      cellWidths.push(this._retrieveElementSize(cell).width);\n    }\n\n    this._cachedCellWidths = cellWidths;\n    return cellWidths;\n  }\n\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyStartColumnPositions(widths: number[], stickyStates: boolean[]): number[] {\n    const positions: number[] = [];\n    let nextPosition = 0;\n\n    for (let i = 0; i < widths.length; i++) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n\n    return positions;\n  }\n\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyEndColumnPositions(widths: number[], stickyStates: boolean[]): number[] {\n    const positions: number[] = [];\n    let nextPosition = 0;\n\n    for (let i = widths.length; i > 0; i--) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n\n    return positions;\n  }\n\n  /**\n   * Retreives the most recently observed size of the specified element from the cache, or\n   * meaures it directly if not yet cached.\n   */\n  private _retrieveElementSize(element: HTMLElement): {width: number; height: number} {\n    const cachedSize = this._elemSizeCache.get(element);\n    if (cachedSize) {\n      return cachedSize;\n    }\n\n    const clientRect = element.getBoundingClientRect();\n    const size = {width: clientRect.width, height: clientRect.height};\n\n    if (!this._resizeObserver) {\n      return size;\n    }\n\n    this._elemSizeCache.set(element, size);\n    this._resizeObserver.observe(element, {box: 'border-box'});\n    return size;\n  }\n\n  /**\n   * Conditionally enqueue the requested sticky update and clear previously queued updates\n   * for the same rows.\n   */\n  private _updateStickyColumnReplayQueue(params: UpdateStickyColumnsParams) {\n    this._removeFromStickyColumnReplayQueue(params.rows);\n\n    // No need to replay if a flush is pending.\n    if (!this._stickyColumnsReplayTimeout) {\n      this._updatedStickyColumnsParamsToReplay.push(params);\n    }\n  }\n\n  /** Remove updates for the specified rows from the queue. */\n  private _removeFromStickyColumnReplayQueue(rows: HTMLElement[]) {\n    const rowsSet = new Set(rows);\n    for (const update of this._updatedStickyColumnsParamsToReplay) {\n      update.rows = update.rows.filter(row => !rowsSet.has(row));\n    }\n    this._updatedStickyColumnsParamsToReplay = this._updatedStickyColumnsParamsToReplay.filter(\n      update => !!update.rows.length,\n    );\n  }\n\n  /** Update _elemSizeCache with the observed sizes. */\n  private _updateCachedSizes(entries: ResizeObserverEntry[]) {\n    let needsColumnUpdate = false;\n    for (const entry of entries) {\n      const newEntry = entry.borderBoxSize?.length\n        ? {\n            width: entry.borderBoxSize[0].inlineSize,\n            height: entry.borderBoxSize[0].blockSize,\n          }\n        : {\n            width: entry.contentRect.width,\n            height: entry.contentRect.height,\n          };\n\n      if (\n        newEntry.width !== this._elemSizeCache.get(entry.target as HTMLElement)?.width &&\n        isCell(entry.target)\n      ) {\n        needsColumnUpdate = true;\n      }\n\n      this._elemSizeCache.set(entry.target as HTMLElement, newEntry);\n    }\n\n    if (needsColumnUpdate && this._updatedStickyColumnsParamsToReplay.length) {\n      if (this._stickyColumnsReplayTimeout) {\n        clearTimeout(this._stickyColumnsReplayTimeout);\n      }\n\n      this._stickyColumnsReplayTimeout = setTimeout(() => {\n        if (this._destroyed) {\n          return;\n        }\n\n        for (const update of this._updatedStickyColumnsParamsToReplay) {\n          this.updateStickyColumns(\n            update.rows,\n            update.stickyStartStates,\n            update.stickyEndStates,\n            true,\n            false,\n          );\n        }\n        this._updatedStickyColumnsParamsToReplay = [];\n        this._stickyColumnsReplayTimeout = null;\n      }, 0);\n    }\n  }\n\n  /**\n   * Invoke afterNextRender with the table's injector, falling back to CoalescedStyleScheduler\n   * if the injector was not provided.\n   */\n  private _afterNextRender(spec: {earlyRead?: () => void; write: () => void}) {\n    if (this._tableInjector) {\n      afterNextRender(spec, {injector: this._tableInjector});\n    } else {\n      this._coalescedStyleScheduler.schedule(() => {\n        spec.earlyRead?.();\n        spec.write();\n      });\n    }\n  }\n}\n\nfunction isCell(element: Element) {\n  return ['cdk-cell', 'cdk-header-cell', 'cdk-footer-cell'].some(klass =>\n    element.classList.contains(klass),\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** The injection token used to specify the StickyPositioningListener. */\nexport const STICKY_POSITIONING_LISTENER = new InjectionToken<StickyPositioningListener>('CDK_SPL');\n\nexport type StickySize = number | null | undefined;\nexport type StickyOffset = number | null | undefined;\n\nexport interface StickyUpdate {\n  elements?: readonly (HTMLElement[] | undefined)[];\n  offsets?: StickyOffset[];\n  sizes: StickySize[];\n}\n\n/**\n * If provided, CdkTable will call the methods below when it updates the size/\n * position/etc of its sticky rows and columns.\n */\nexport interface StickyPositioningListener {\n  /** Called when CdkTable updates its sticky start columns. */\n  stickyColumnsUpdated(update: StickyUpdate): void;\n\n  /** Called when CdkTable updates its sticky end columns. */\n  stickyEndColumnsUpdated(update: StickyUpdate): void;\n\n  /** Called when CdkTable updates its sticky header rows. */\n  stickyHeaderRowsUpdated(update: StickyUpdate): void;\n\n  /** Called when CdkTable updates its sticky footer rows. */\n  stickyFooterRowsUpdated(update: StickyUpdate): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {\n  HeaderRowOutlet,\n  DataRowOutlet,\n  CdkTable,\n  CdkRecycleRows,\n  FooterRowOutlet,\n  NoDataRowOutlet,\n} from './table';\nimport {\n  CdkCellOutlet,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n  CdkNoDataRow,\n} from './row';\nimport {\n  CdkColumnDef,\n  CdkHeaderCellDef,\n  CdkHeaderCell,\n  CdkCell,\n  CdkCellDef,\n  CdkFooterCellDef,\n  CdkFooterCell,\n} from './cell';\nimport {CdkTextColumn} from './text-column';\nimport {ScrollingModule} from '../scrolling';\n\nconst EXPORTED_DECLARATIONS = [\n  CdkTable,\n  CdkRowDef,\n  CdkCellDef,\n  CdkCellOutlet,\n  CdkHeaderCellDef,\n  CdkFooterCellDef,\n  CdkColumnDef,\n  CdkCell,\n  CdkRow,\n  CdkHeaderCell,\n  CdkFooterCell,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  DataRowOutlet,\n  HeaderRowOutlet,\n  FooterRowOutlet,\n  CdkTextColumn,\n  CdkNoDataRow,\n  CdkRecycleRows,\n  NoDataRowOutlet,\n];\n\n@NgModule({\n  exports: EXPORTED_DECLARATIONS,\n  imports: [ScrollingModule, ...EXPORTED_DECLARATIONS],\n})\nexport class CdkTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CdkTable,\n  _CoalescedStyleScheduler,\n  _COALESCED_STYLE_SCHEDULER,\n  CDK_TABLE,\n  STICKY_POSITIONING_LISTENER,\n  HeaderRowOutlet,\n  DataRowOutlet,\n  NoDataRowOutlet,\n  FooterRowOutlet,\n} from '@angular/cdk/table';\nimport {\n  _DisposeViewRepeaterStrategy,\n  _RecycleViewRepeaterStrategy,\n  _VIEW_REPEATER_STRATEGY,\n} from '@angular/cdk/collections';\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\n@Directive({\n  selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n  providers: [{provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy}],\n})\nexport class MatRecycleRows {}\n\n@Component({\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  // Note that according to MDN, the `caption` element has to be projected as the **first**\n  // element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n  // We can't reuse `CDK_TABLE_TEMPLATE` because it's incompatible with local compilation mode.\n  template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody class=\"mdc-data-table__content\" role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `,\n  styleUrl: 'table.css',\n  host: {\n    'class': 'mat-mdc-table mdc-data-table__table',\n    '[class.mdc-table-fixed-layout]': 'fixedLayout',\n  },\n  providers: [\n    {provide: CdkTable, useExisting: MatTable},\n    {provide: CDK_TABLE, useExisting: MatTable},\n    {provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler},\n    // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n    //  is only included in the build if used.\n    {provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy},\n    // Prevent nested tables from seeing this table's StickyPositioningListener.\n    {provide: STICKY_POSITIONING_LISTENER, useValue: null},\n  ],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet],\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected override stickyCssClass = 'mat-mdc-table-sticky';\n\n  /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n  protected override needsPositionStickyOnElement = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkFooterCell,\n  CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}],\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}],\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}],\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef},\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef')\n  override get name(): string {\n    return this._name;\n  }\n  override set name(name: string) {\n    this._setNameInput(name);\n  }\n\n  /**\n   * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n   * In the future, this will only add \"mat-column-\" and columnCssClassName\n   * will change from type string[] to string.\n   * @docs-private\n   */\n  protected override _updateColumnCssClassName() {\n    super._updateColumnCssClassName();\n    this._columnCssClassName!.push(`mat-column-${this.cssClassFriendlyName}`);\n  }\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-mdc-header-cell mdc-data-table__header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-mdc-footer-cell mdc-data-table__cell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-mdc-cell mdc-data-table__cell',\n  },\n})\nexport class MatCell extends CdkCell {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n  CdkNoDataRow,\n  CdkCellOutlet,\n} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation,\n  booleanAttribute,\n} from '@angular/core';\n\n// We can't reuse `CDK_ROW_TEMPLATE` because it's incompatible with local compilation mode.\nconst ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: [\n    {name: 'columns', alias: 'matHeaderRowDef'},\n    {name: 'sticky', alias: 'matHeaderRowDefSticky', transform: booleanAttribute},\n  ],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: [\n    {name: 'columns', alias: 'matFooterRowDef'},\n    {name: 'sticky', alias: 'matFooterRowDefSticky', transform: booleanAttribute},\n  ],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: [\n    {name: 'columns', alias: 'matRowDefColumns'},\n    {name: 'when', alias: 'matRowDefWhen'},\n  ],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: ROW_TEMPLATE,\n  host: {\n    'class': 'mat-mdc-header-row mdc-data-table__header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n  imports: [CdkCellOutlet],\n})\nexport class MatHeaderRow extends CdkHeaderRow {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: ROW_TEMPLATE,\n  host: {\n    'class': 'mat-mdc-footer-row mdc-data-table__row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n  imports: [CdkCellOutlet],\n})\nexport class MatFooterRow extends CdkFooterRow {}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  selector: 'mat-row, tr[mat-row]',\n  template: ROW_TEMPLATE,\n  host: {\n    'class': 'mat-mdc-row mdc-data-table__row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n  imports: [CdkCellOutlet],\n})\nexport class MatRow extends CdkRow {}\n\n/** Row that can be used to display a message when no data is shown in the table. */\n@Directive({\n  selector: 'ng-template[matNoDataRow]',\n  providers: [{provide: CdkNoDataRow, useExisting: MatNoDataRow}],\n})\nexport class MatNoDataRow extends CdkNoDataRow {\n  override _contentClassName = 'mat-mdc-no-data-row';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '../core';\nimport {MatRecycleRows, MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef,\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef,\n  MatNoDataRow,\n} from './row';\nimport {MatTextColumn} from './text-column';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n  MatRecycleRows,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n  MatNoDataRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [MatCommonModule, CdkTableModule, ...EXPORTED_DECLARATIONS],\n  exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {MatPaginator, PageEvent} from '../paginator';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subject,\n  Subscription,\n} from 'rxjs';\nimport {DataSource} from '@angular/cdk/collections';\nimport {MatSort, Sort} from '../sort';\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nexport class MatTableDataSource<T, P extends MatPaginator = MatPaginator> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription | null = null;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() {\n    return this._data.value;\n  }\n\n  set data(data: T[]) {\n    data = Array.isArray(data) ? data : [];\n    this._data.next(data);\n    // Normally the `filteredData` is updated by the re-render\n    // subscription, but that won't happen if it's inactive.\n    if (!this._renderChangesSubscription) {\n      this._filterData(data);\n    }\n  }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string {\n    return this._filter.value;\n  }\n\n  set filter(filter: string) {\n    this._filter.next(filter);\n    // Normally the `filteredData` is updated by the re-render\n    // subscription, but that won't happen if it's inactive.\n    if (!this._renderChangesSubscription) {\n      this._filterData(this.data);\n    }\n  }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null {\n    return this._sort;\n  }\n\n  set sort(sort: MatSort | null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n\n  private _sort: MatSort | null;\n\n  /**\n   * Instance of the paginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the paginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): P | null {\n    return this._paginator;\n  }\n\n  set paginator(paginator: P | null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n\n  private _paginator: P | null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: (data: T, sortHeaderId: string) => string | number = (\n    data: T,\n    sortHeaderId: string,\n  ): string | number => {\n    const value = (data as unknown as Record<string, any>)[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we leave them as strings.\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  };\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: (data: T[], sort: MatSort) => T[] = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If there are data in the column that can be converted to a number,\n      // it must be ensured that the rest of the data\n      // is of the same type so as not to order incorrectly.\n      const valueAType = typeof valueA;\n      const valueBType = typeof valueB;\n\n      if (valueAType !== valueBType) {\n        if (valueAType === 'number') {\n          valueA += '';\n        }\n        if (valueBType === 'number') {\n          valueB += '';\n        }\n      }\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come last.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  };\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: (data: T, filter: string) => boolean = (data: T, filter: string): boolean => {\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n    // Loops over the values in the array and returns true if any of them match the filter string\n    return Object.values(data as {[key: string]: any}).some(value =>\n      `${value}`.toLowerCase().includes(transformedFilter),\n    );\n  };\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if sort and/or paginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort | null | void> = this._sort\n      ? (merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort | void>)\n      : observableOf(null);\n    const pageChange: Observable<PageEvent | null | void> = this._paginator\n      ? (merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized,\n        ) as Observable<PageEvent | void>)\n      : observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest([dataStream, this._filter]).pipe(\n      map(([data]) => this._filterData(data)),\n    );\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest([filteredData, sortChange]).pipe(\n      map(([data]) => this._orderData(data)),\n    );\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest([orderedData, pageChange]).pipe(\n      map(([data]) => this._pageData(data)),\n    );\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterPredicate function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterPredicate.\n    // May be overridden for customization.\n    this.filteredData =\n      this.filter == null || this.filter === ''\n        ? data\n        : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) {\n      this._updatePaginator(this.filteredData.length);\n    }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) {\n      return data;\n    }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged slice of the provided data array according to the provided paginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) {\n      return data;\n    }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) {\n        return;\n      }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() {\n    if (!this._renderChangesSubscription) {\n      this._updateChangeSubscription();\n    }\n\n    return this._renderData;\n  }\n\n  /**\n   * Used by the MatTable. Called when it disconnects from the data source.\n   * @docs-private\n   */\n  disconnect() {\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = null;\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Exercise } from '../models/exercise';\nimport { Muscle } from '../models/muscle';\nimport { BodyArea } from '../models/bodyArea';\nimport { Movement } from '../models/movement';\nimport { StartingPosition } from '../models/startingPosition';\nimport { Equipment } from '../models/equipment';\nimport { environment } from '@env/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExercisesService {\n  private http = inject(HttpClient);\n\n  apiURLExercises = environment.apiURL + 'exercises';\n  apiURLMuscles = environment.apiURL + 'muscles';\n  apiURLBodyAreas = environment.apiURL + 'bodyareas';\n  apiURLMovements = environment.apiURL + 'movements';\n  apiURLStartingPositions = environment.apiURL + 'startingpositions';\n  apiURLEquipments = environment.apiURL + 'equipments';\n\n  getExercises(): Observable<Exercise[]> {\n    return this.http.get<Exercise[]>(this.apiURLExercises);\n  }\n\n  getExercise(exerciseId: string): Observable<Exercise> {\n    // const options = { headers: headers };\n\n    return this.http.get<Exercise>(\n      `${this.apiURLExercises}/${exerciseId}`\n    );\n  }\n\n  createExercise(exerciseData: FormData): Observable<Exercise> {\n    return this.http.post<Exercise>(this.apiURLExercises, exerciseData);\n  }\n\n  updateExercise(\n    exerciseData: FormData,\n    exerciseId: string\n  ): Observable<Exercise> {\n    return this.http.put<Exercise>(\n      `${this.apiURLExercises}/${exerciseId}`,\n      exerciseData\n    );\n  }\n\n  deleteExercise(exerciseId: string): Observable<Exercise> {\n    return this.http.delete<Exercise>(`${this.apiURLExercises}/${exerciseId}`);\n  }\n\n  getMuscles(): Observable<Muscle[]> {\n    return this.http.get<Muscle[]>(this.apiURLMuscles);\n  }\n\n  createMuscle(muscle: Muscle) {\n    return this.http.post(this.apiURLMuscles, muscle);\n  }\n\n  getBodyAreas(): Observable<BodyArea[]> {\n    // const options = { headers: headers };\n\n    return this.http.get<BodyArea[]>(this.apiURLBodyAreas);\n  }\n\n  createBodyArea(bodyArea: BodyArea) {\n    return this.http.post(this.apiURLBodyAreas, bodyArea);\n  }\n\n  getMovements(): Observable<Movement[]> {\n    // const options = { headers: headers };\n\n    return this.http.get<Movement[]>(this.apiURLMovements);\n  }\n\n  createMovement(movement: Movement) {\n    return this.http.post(this.apiURLMovements, movement);\n  }\n\n  getStartingPositions(): Observable<StartingPosition[]> {\n    // const options = { headers: headers };\n\n    return this.http.get<StartingPosition[]>(\n      this.apiURLStartingPositions\n    );\n  }\n\n  createStartingPosition(startingPosition: StartingPosition) {\n    return this.http.post(this.apiURLStartingPositions, startingPosition);\n  }\n\n  getEquipments(): Observable<Equipment[]> {\n    // const options = { headers: headers };\n\n    return this.http.get<Equipment[]>(this.apiURLEquipments);\n  }\n\n  createEquipment(equipment: Equipment) {\n    return this.http.post(this.apiURLEquipments, equipment);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '@env/environment';\nimport { Observable } from 'rxjs';\nimport { BodyArea } from '../../models/bodyArea';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BodyAreasService {\n  private http = inject(HttpClient);\n\n  apiURLBodyAreas = environment.apiURL + 'bodyareas';\n\n  getBodyAreas(): Observable<BodyArea[]> {\n    return this.http.get<BodyArea[]>(this.apiURLBodyAreas);\n  }\n\n  getBodyArea(bodyAreaId: string): Observable<BodyArea> {\n    return this.http.get<BodyArea>(`${this.apiURLBodyAreas}/${bodyAreaId}`);\n  }\n\n  createBodyArea(bodyArea: BodyArea) {\n    return this.http.post(this.apiURLBodyAreas, bodyArea);\n  }\n\n  updateBodyArea(bodyArea: BodyArea): Observable<BodyArea> {\n    return this.http.put<BodyArea>(`${this.apiURLBodyAreas}/${bodyArea.id}`, bodyArea);\n  }\n\n  deleteBodyArea(bodyAreaId: string): Observable<BodyArea> {\n    return this.http.delete<BodyArea>(`${this.apiURLBodyAreas}/${bodyAreaId}`);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '@env/environment';\nimport { Observable } from 'rxjs';\nimport { Movement } from '../../models/movement';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MovementsService {\n  private http = inject(HttpClient);\n\n  apiURLMovements = environment.apiURL + 'movements';\n\n  getMovements(): Observable<Movement[]> {\n    return this.http.get<Movement[]>(this.apiURLMovements);\n  }\n\n  getMovement(movementId: string): Observable<Movement> {\n    return this.http.get<Movement>(`${this.apiURLMovements}/${movementId}`);\n  }\n\n  createMovement(movement: Movement) {\n    return this.http.post(this.apiURLMovements, movement);\n  }\n\n  updateMovement(movement: Movement): Observable<Movement> {\n    return this.http.put<Movement>(\n      `${this.apiURLMovements}/${movement.id}`,\n      movement\n    );\n  }\n\n  deleteMovement(movementId: string): Observable<Movement> {\n    return this.http.delete<Movement>(`${this.apiURLMovements}/${movementId}`);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '@env/environment';\nimport { Observable } from 'rxjs';\nimport { StartingPosition } from '../../models/startingPosition';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StartingPositionsService {\n  private http = inject(HttpClient);\n\n  apiURLStartingPositions = environment.apiURL + 'startingpositions';\n\n  getStartingPositions(): Observable<StartingPosition[]> {\n    return this.http.get<StartingPosition[]>(this.apiURLStartingPositions);\n  }\n\n  getStartingPosition(startingPositionId: string): Observable<StartingPosition> {\n    return this.http.get<StartingPosition>(`${this.apiURLStartingPositions}/${startingPositionId}`);\n  }\n\n  createStartingPosition(startingPosition: StartingPosition) {\n    return this.http.post(this.apiURLStartingPositions, startingPosition);\n  }\n\n  updateStartingPosition(startingPosition: StartingPosition): Observable<StartingPosition> {\n    return this.http.put<StartingPosition>(\n      `${this.apiURLStartingPositions}/${startingPosition.id}`,\n      startingPosition\n    );\n  }\n\n  deleteStartingPosition(startingPositionId: string): Observable<StartingPosition> {\n    return this.http.delete<StartingPosition>(`${this.apiURLStartingPositions}/${startingPositionId}`);\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '@env/environment';\nimport { Observable } from 'rxjs';\nimport { Equipment } from '../../models/equipment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EquipmentService {\n  private http = inject(HttpClient);\n\n  apiURLEquipments = environment.apiURL + 'equipments';\n\n  getEquipments(): Observable<Equipment[]> {\n    return this.http.get<Equipment[]>(this.apiURLEquipments);\n  }\n\n  getEquipment(equipmentId: string): Observable<Equipment> {\n    return this.http.get<Equipment>(`${this.apiURLEquipments}/${equipmentId}`);\n  }\n\n  createEquipment(equipment: Equipment) {\n    return this.http.post(this.apiURLEquipments, equipment);\n  }\n\n  updateEquipment(equipment: Equipment): Observable<Equipment> {\n    return this.http.put<Equipment>(\n      `${this.apiURLEquipments}/${equipment.id}`,\n      equipment\n    );\n  }\n\n  deleteEquipment(equipmentId: string): Observable<Equipment> {\n    return this.http.delete<Equipment>(`${this.apiURLEquipments}/${equipmentId}`);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable, inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Exercise } from '../models/exercise';\nimport { environment } from '@env/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchService {\n  private http = inject(HttpClient);\n\n  apiURLSearch = environment.apiURL + 'search';\n\n  searchExercises(\n    searchTerm: string,\n    filters: any,\n    langCode: string,\n  ): Observable<Exercise[]> {\n    const requstBody = {\n      searchTerm: searchTerm,\n      filters: filters,\n    };\n\n    const params = {\n      langCode: langCode,\n    };\n\n    return this.http.post<Exercise[]>(this.apiURLSearch, requstBody, {\n      params,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Exercise } from '../models/exercise';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShareDataService {\n  private data$ = new BehaviorSubject<Exercise[]>([]);\n  searchedData$ = this.data$.asObservable();\n\n  private data2$ = new BehaviorSubject<Exercise[]>([]);\n  filterData$: Observable<Exercise[]> | [] = this.data2$.asObservable();\n\n  // private data3$ = new BehaviorSubject<boolean>(false);\n  // toggleDrawerSignal$: Observable<boolean> = this.data3$.asObservable();\n\n  constructor() {}\n\n  updateSearchResults(data: Exercise[]) {\n    this.data$.next(data);\n  }\n\n  updateFilterResults(data2: any) {\n    this.data2$.next(data2);\n  }\n\n  // updateToggleDrawerResults(data3: any) {\n  //   this.data3$.next(data3);\n  // }\n}\n","import { Injectable, inject, signal } from '@angular/core';\nimport { ShareDataService } from './share-data.service';\n\ninterface DataItem {\n  name: string | undefined;\n  localeNames: string[];\n  values: string[];\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddRemoveDataService {\n  private sharedDataService = inject(ShareDataService);\n\n  // private data: DataItem[] = [];\n  public dataSignal = signal<DataItem[]>([]);\n\n  addDataItem(\n    name: string | undefined,\n    value: string,\n    localeName: string,\n  ): void {\n    const itemIndex = this.dataSignal().findIndex(item => item.name === name);\n    console.log(name, value);\n    if (itemIndex !== -1) {\n      // If the item already exists, add the value to its array\n      this.dataSignal.update(data => {\n        const updatedData = [...data];\n        updatedData[itemIndex].values.push(value);\n        updatedData[itemIndex].localeNames.push(localeName);\n\n        console.log('when updateng: ', data === updatedData);\n        return updatedData;\n      });\n      console.log(this.dataSignal());\n      // this.data[itemIndex].values.push(value);\n      // this.data[itemIndex].localeNames.push(localeName);\n    } else {\n      // If the item does not exist, create a new one\n      this.dataSignal.update(data => {\n        const updatedData = [...data];\n        console.log('when adding new: ', data === updatedData);\n\n        updatedData.push({ name, values: [value], localeNames: [localeName] });\n        return updatedData;\n      });\n      console.log(this.dataSignal());\n    }\n    this.sharedDataService.updateFilterResults(this.dataSignal());\n  }\n\n  removeDataItem(\n    name: string | undefined,\n    value: string,\n    localeName: string,\n  ): void {\n    const itemIndex = this.dataSignal().findIndex(item => item.name === name);\n\n    if (itemIndex !== -1) {\n      // If the item exists, remove the value from its array\n      this.dataSignal.update(data => {\n        const updatedData = [...data];\n        console.log('this is updated before removal: ', updatedData);\n\n        // Update latin name(value)\n        updatedData[itemIndex].values = updatedData[itemIndex].values.filter(\n          (v: any) => v !== value,\n        );\n\n        console.log('this is updated after removal: ', updatedData);\n\n        // Update locale name(localeName)\n        updatedData[itemIndex].localeNames = updatedData[\n          itemIndex\n        ].localeNames.filter((v: any) => v !== localeName);\n\n        return updatedData;\n      });\n\n      // Remove the entire item if the values array is empty\n      if (this.dataSignal()[itemIndex].values.length === 0) {\n        this.dataSignal.update(data => {\n          const updatedData = [...data];\n\n          updatedData.splice(itemIndex, 1);\n\n          return updatedData;\n        });\n      }\n    }\n    this.sharedDataService.updateFilterResults(this.dataSignal());\n  }\n\n  // getData(): DataItem[] {\n  //   return this.data;\n  // }\n\n  resetAll(): void {\n    this.dataSignal.set([]);\n    this.sharedDataService.updateFilterResults(this.dataSignal());\n  }\n}\n","import { Injectable, signal } from '@angular/core';\n\ntype ListOption = 'all' | 'selected' | 'favorite';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShareStateService {\n  // Manage drawer state with signal\n  drawerSignal = signal<boolean>(false);\n\n  listOption = signal<ListOption>('all');\n\n  isFetchingData = signal<boolean>(false);\n\n  isLoading = signal<boolean>(false);\n\n  constructor() {}\n}\n","import { Injectable, signal } from '@angular/core';\nimport { Exercise } from '../models/exercise';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectedExercisesService {\n  selectedExercises = signal<Exercise[]>([]);\n\n  // Add exercise to selected list\n  addToSelected(exercise: Exercise): void {\n    console.log(exercise);\n    // Check if exercise is already in the list\n    const index = this.selectedExercises().findIndex(\n      selectedExercise => selectedExercise.id === exercise.id,\n    );\n\n    // Not already in the list, so add it\n    if (index === -1) {\n      exercise.isSelected = true;\n      exercise.reps = 10;\n      exercise.sets = 3;\n      exercise.pause = '1min';\n      exercise.weight = '';\n      this.selectedExercises.update(selectedExercises => [\n        ...selectedExercises,\n        exercise,\n      ]);\n    }\n  }\n\n  removeFromSelected(exercise: Exercise): void {\n    exercise.isSelected = false;\n    this.selectedExercises.update(selectedExercises =>\n      selectedExercises.filter(\n        selectedExercise => selectedExercise.id !== exercise.id,\n      ),\n    );\n  }\n\n  // updateInSelected(exercise: Exercise): void {\n  //   exercise.isSelected = true;\n  //   this.selectedExercises.update(selectedExercises =>\n  //     selectedExercises.map(selectedExercise =>\n  //       selectedExercise.id === exercise.id\n  //         ? (selectedExercise = exercise)\n  //         : selectedExercise,\n  //     ),\n  //   );\n  // }\n}\n","import { Injectable, signal } from '@angular/core';\nimport { Program } from '../../models/program';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProgramDataService {\n  programData = signal<Program>({ name: '', notes: '' });\n\n  programId = signal<string>('');\n\n  programName = signal<string>('');\n\n  constructor() {}\n}\n","import { Injectable, signal } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProgramClientsDataService {\n  programClientsData = signal<any>({ selectedClients: [], dateRange: '' });\n\n  constructor() {}\n}\n","import { Injectable, inject, signal } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '@env/environment';\nimport { Program } from '../../models/program';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProgramsService {\n  private http = inject(HttpClient);\n\n  apiURLPrograms = environment.apiURL + 'programs';\n\n  getPrograms(): Observable<Program[]> {\n    return this.http.get<Program[]>(this.apiURLPrograms);\n  }\n\n  getProgram(programId: string): Observable<Program> {\n    return this.http.get<Program>(`${this.apiURLPrograms}/${programId}`);\n  }\n\n  createProgram(programData: Program): Observable<Program> {\n    return this.http.post<Program>(this.apiURLPrograms, programData);\n  }\n\n  updateProgram(programData: Program, programId: string): Observable<Program> {\n    return this.http.put<Program>(\n      `${this.apiURLPrograms}/${programId}`,\n      programData,\n    );\n  }\n\n  deleteProgram(programId: string): Observable<Program> {\n    return this.http.delete<Program>(`${this.apiURLPrograms}/${programId}`);\n  }\n\n  isAdminProgram = signal<boolean>(false);\n}\n","import { Injectable, signal } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IsClientValidService {\n  isClientValid = signal<boolean>(false);\n\n  constructor() {}\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable, inject } from '@angular/core';\nimport { Client } from '../../models/client';\nimport { Observable } from 'rxjs';\nimport { environment } from '@env/environment';\nimport { Program } from '../../models/program';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientsService {\n  private http = inject(HttpClient);\n\n  apiURLClients = environment.apiURL + 'clients';\n\n  getClients(): Observable<Client[]> {\n    return this.http.get<Client[]>(this.apiURLClients);\n  }\n\n  getClientsBasic(): Observable<Client[]> {\n    return this.http.get<Client[]>(`${this.apiURLClients}/basic`);\n  }\n\n  getClient(clientId: string): Observable<Client> {\n    return this.http.get<Client>(`${this.apiURLClients}/${clientId}`);\n  }\n\n  createClient(clientData: Client): Observable<Client> {\n    return this.http.post<Client>(this.apiURLClients, clientData);\n  }\n\n  updateClient(clientData: Client, clientId: string): Observable<Client> {\n    return this.http.put<Client>(\n      `${this.apiURLClients}/${clientId}`,\n      clientData,\n    );\n  }\n\n  deleteClient(clientId: string): Observable<Client> {\n    return this.http.delete<Client>(`${this.apiURLClients}/${clientId}`);\n  }\n\n  getClientProgram(programId: string): Observable<Program> {\n    return this.http.get<Program>(`${this.apiURLClients}/program/${programId}`);\n  }\n\n  getAllClientsPrograms(): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiURLClients}/programs/all`);\n  }\n\n  getAllClientsProgramsBasic(): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiURLClients}/programs/all/basic`);\n  }\n\n  updateClientProgram(\n    clientId: string,\n    updatedProgram: any,\n    programPosition: number,\n  ): Observable<any> {\n    // Pass program position using URL params\n    const positionParam = programPosition;\n    return this.http.put<any>(\n      `${this.apiURLClients}/program/${clientId}?pos=${positionParam}`,\n      updatedProgram,\n    );\n  }\n\n  deleteClientProgram(\n    clientId: string,\n    programPosition: number,\n  ): Observable<any> {\n    // Pass program position using URL params\n    const positionParam = programPosition;\n    return this.http.delete<any>(\n      `${this.apiURLClients}/program/${clientId}?pos=${positionParam}`,\n    );\n  }\n}\n","import { Injectable, signal } from '@angular/core';\n\nexport interface ClientInfo {\n  clientId: string;\n  clientName: string;\n  programPosition: number;\n  programId: string;\n  programName: string;\n  dateRange: {\n    start: string;\n    end: string;\n  };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShareClientsDataService {\n  clients = signal<any[]>([]);\n\n  isClientProgram = signal<boolean>(false);\n\n  clientInfo = signal<ClientInfo>({\n    clientId: '',\n    clientName: '',\n    programPosition: 0,\n    programId: '',\n    programName: '',\n    dateRange: { start: '', end: '' },\n  });\n\n  reuseProgram = signal<boolean>(false);\n\n  // Use this signal to control new program component, so that it automatically set client, but leave all other fields empty\n  // IMPLEMENT THIS !!!!!\n  isBrandNewClientsProgram = signal<boolean>(false);\n}\n","import { Injectable, signal } from '@angular/core';\nimport { Exercise } from '../models/exercise';\n\n@Injectable({ providedIn: 'root' })\nexport class DropListTransferItemService {\n  transferringItem = signal<Exercise | undefined>(undefined);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ViewContainerRef, Injector, StaticProvider, Type} from '@angular/core';\nimport {Direction} from '../bidi';\nimport {PositionStrategy, ScrollStrategy} from '../overlay';\nimport {BasePortalOutlet} from '../portal';\n\n/** Options for where to set focus to automatically on dialog open */\nexport type AutoFocusTarget = 'dialog' | 'first-tabbable' | 'first-heading';\n\n/** Valid ARIA roles for a dialog. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Configuration for opening a modal dialog. */\nexport class DialogConfig<D = unknown, R = unknown, C extends BasePortalOutlet = BasePortalOutlet> {\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /**\n   * Injector used for the instantiation of the component to be attached. If provided,\n   * takes precedence over the injector indirectly provided by `ViewContainerRef`.\n   */\n  injector?: Injector;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Optional CSS class or classes applied to the overlay panel. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Optional CSS class or classes applied to the overlay backdrop. */\n  backdropClass?: string | string[] = '';\n\n  /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n  maxWidth?: number | string;\n\n  /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n  maxHeight?: number | string;\n\n  /** Strategy to use when positioning the dialog. Defaults to centering it on the page. */\n  positionStrategy?: PositionStrategy;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Dialog label applied via `aria-label` */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether this is a modal dialog. Used to set the `aria-modal` attribute. Off by default,\n   * because it can interfere with other overlay-based components (e.g. `mat-select`) and because\n   * it is redundant since the dialog marks all outside content as `aria-hidden` anyway.\n   */\n  ariaModal?: boolean = false;\n\n  /**\n   * Where the dialog should focus on open.\n   * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n   * AutoFocusTarget instead.\n   */\n  autoFocus?: AutoFocusTarget | string | boolean = 'first-tabbable';\n\n  /**\n   * Whether the dialog should restore focus to the previously-focused element upon closing.\n   * Has the following behavior based on the type that is passed in:\n   * - `boolean` - when true, will return focus to the element that was focused before the dialog\n   *    was opened, otherwise won't restore focus at all.\n   * - `string` - focus will be restored to the first element that matches the CSS selector.\n   * - `HTMLElement` - focus will be restored to the specific element.\n   */\n  restoreFocus?: boolean | string | HTMLElement = true;\n\n  /**\n   * Scroll strategy to be used for the dialog. This determines how\n   * the dialog responds to scrolling underneath the panel element.\n   */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user navigates backwards or forwards through browser\n   * history. This does not apply to navigation via anchor element unless using URL-hash based\n   * routing (`HashLocationStrategy` in the Angular router).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /**\n   * Whether the dialog should close when the dialog service is destroyed. This is useful if\n   * another service is wrapping the dialog and is managing the destruction instead.\n   */\n  closeOnDestroy?: boolean = true;\n\n  /**\n   * Whether the dialog should close when the underlying overlay is detached. This is useful if\n   * another service is wrapping the dialog and is managing the destruction instead. E.g. an\n   * external detachment can happen as a result of a scroll strategy triggering it or when the\n   * browser location changes.\n   */\n  closeOnOverlayDetachments?: boolean = true;\n\n  /**\n   * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n   * @deprecated No longer used. Will be removed.\n   * @breaking-change 20.0.0\n   */\n  componentFactoryResolver?: unknown;\n\n  /**\n   * Providers that will be exposed to the contents of the dialog. Can also\n   * be provided as a function in order to generate the providers lazily.\n   */\n  providers?:\n    | StaticProvider[]\n    | ((dialogRef: R, config: DialogConfig<D, R, C>, container: C) => StaticProvider[]);\n\n  /**\n   * Component into which the dialog content will be rendered. Defaults to `CdkDialogContainer`.\n   * A configuration object can be passed in to customize the providers that will be exposed\n   * to the dialog container.\n   */\n  container?:\n    | Type<C>\n    | {\n        type: Type<C>;\n        providers: (config: DialogConfig<D, R, C>) => StaticProvider[];\n      };\n\n  /**\n   * Context that will be passed to template-based dialogs.\n   * A function can be passed in to resolve the context lazily.\n   */\n  templateContext?: Record<string, any> | (() => Record<string, any>);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  FocusMonitor,\n  FocusOrigin,\n  FocusTrap,\n  FocusTrapFactory,\n  InteractivityChecker,\n} from '../a11y';\nimport {OverlayRef} from '../overlay';\nimport {Platform, _getFocusedElementPierceShadowDom} from '../platform';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  DomPortal,\n  TemplatePortal,\n} from '../portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  Injector,\n  NgZone,\n  OnDestroy,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n  afterNextRender,\n  inject,\n} from '@angular/core';\nimport {DialogConfig} from './dialog-config';\n\nexport function throwDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\n@Component({\n  selector: 'cdk-dialog-container',\n  templateUrl: './dialog-container.html',\n  styleUrl: 'dialog-container.css',\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  imports: [CdkPortalOutlet],\n  host: {\n    'class': 'cdk-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_config.id || null',\n    '[attr.role]': '_config.role',\n    '[attr.aria-modal]': '_config.ariaModal',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n  },\n})\nexport class CdkDialogContainer<C extends DialogConfig = DialogConfig>\n  extends BasePortalOutlet\n  implements OnDestroy\n{\n  protected _elementRef = inject(ElementRef);\n  protected _focusTrapFactory = inject(FocusTrapFactory);\n  readonly _config: C;\n  private _interactivityChecker = inject(InteractivityChecker);\n  protected _ngZone = inject(NgZone);\n  private _overlayRef = inject(OverlayRef);\n  private _focusMonitor = inject(FocusMonitor);\n  private _renderer = inject(Renderer2);\n\n  private _platform = inject(Platform);\n  protected _document = inject(DOCUMENT, {optional: true})!;\n\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap | null = null;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /**\n   * Type of interaction that led to the dialog being closed. This is used to determine\n   * whether the focus style will be applied when returning focus to its original location\n   * after the dialog is closed.\n   */\n  _closeInteractionType: FocusOrigin | null = null;\n\n  /**\n   * Queue of the IDs of the dialog's label element, based on their definition order. The first\n   * ID will be used as the `aria-labelledby` value. We use a queue here to handle the case\n   * where there are two or more titles in the DOM at a time and the first one is destroyed while\n   * the rest are present.\n   */\n  _ariaLabelledByQueue: string[] = [];\n\n  protected readonly _changeDetectorRef = inject(ChangeDetectorRef);\n\n  private _injector = inject(Injector);\n\n  private _isDestroyed = false;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n\n    // Callback is primarily for some internal tests\n    // that were instantiating the dialog container manually.\n    this._config = (inject(DialogConfig, {optional: true}) || new DialogConfig()) as C;\n\n    if (this._config.ariaLabelledBy) {\n      this._ariaLabelledByQueue.push(this._config.ariaLabelledBy);\n    }\n  }\n\n  _addAriaLabelledBy(id: string) {\n    this._ariaLabelledByQueue.push(id);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _removeAriaLabelledBy(id: string) {\n    const index = this._ariaLabelledByQueue.indexOf(id);\n\n    if (index > -1) {\n      this._ariaLabelledByQueue.splice(index, 1);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  protected _contentAttached() {\n    this._initializeFocusTrap();\n    this._handleBackdropClicks();\n    this._captureInitialFocus();\n  }\n\n  /**\n   * Can be used by child classes to customize the initial focus\n   * capturing behavior (e.g. if it's tied to an animation).\n   */\n  protected _captureInitialFocus() {\n    this._trapFocus();\n  }\n\n  ngOnDestroy() {\n    this._isDestroyed = true;\n    this._restoreFocus();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwDialogContentAlreadyAttachedError();\n    }\n\n    const result = this._portalOutlet.attachComponentPortal(portal);\n    this._contentAttached();\n    return result;\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T> {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwDialogContentAlreadyAttachedError();\n    }\n\n    const result = this._portalOutlet.attachTemplatePortal(portal);\n    this._contentAttached();\n    return result;\n  }\n\n  /**\n   * Attaches a DOM portal to the dialog container.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  override attachDomPortal = (portal: DomPortal) => {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwDialogContentAlreadyAttachedError();\n    }\n\n    const result = this._portalOutlet.attachDomPortal(portal);\n    this._contentAttached();\n    return result;\n  };\n\n  // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n  /** Captures focus if it isn't already inside the dialog. */\n  _recaptureFocus() {\n    if (!this._containsFocus()) {\n      this._trapFocus();\n    }\n  }\n\n  /**\n   * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n   * attribute to forcefully focus it. The attribute is removed after focus is moved.\n   * @param element The element to focus.\n   */\n  private _forceFocus(element: HTMLElement, options?: FocusOptions) {\n    if (!this._interactivityChecker.isFocusable(element)) {\n      element.tabIndex = -1;\n      // The tabindex attribute should be removed to avoid navigating to that element again\n      this._ngZone.runOutsideAngular(() => {\n        const callback = () => {\n          deregisterBlur();\n          deregisterMousedown();\n          element.removeAttribute('tabindex');\n        };\n\n        const deregisterBlur = this._renderer.listen(element, 'blur', callback);\n        const deregisterMousedown = this._renderer.listen(element, 'mousedown', callback);\n      });\n    }\n    element.focus(options);\n  }\n\n  /**\n   * Focuses the first element that matches the given selector within the focus trap.\n   * @param selector The CSS selector for the element to set focus to.\n   */\n  private _focusByCssSelector(selector: string, options?: FocusOptions) {\n    let elementToFocus = this._elementRef.nativeElement.querySelector(\n      selector,\n    ) as HTMLElement | null;\n    if (elementToFocus) {\n      this._forceFocus(elementToFocus, options);\n    }\n  }\n\n  /**\n   * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n   * cannot be moved then focus will go to the dialog container.\n   */\n  protected _trapFocus() {\n    if (this._isDestroyed) {\n      return;\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait until after the next render.\n    afterNextRender(\n      () => {\n        const element = this._elementRef.nativeElement;\n        switch (this._config.autoFocus) {\n          case false:\n          case 'dialog':\n            // Ensure that focus is on the dialog container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            if (!this._containsFocus()) {\n              element.focus();\n            }\n            break;\n          case true:\n          case 'first-tabbable':\n            const focusedSuccessfully = this._focusTrap?.focusInitialElement();\n            // If we weren't able to find a focusable element in the dialog, then focus the dialog\n            // container instead.\n            if (!focusedSuccessfully) {\n              this._focusDialogContainer();\n            }\n            break;\n          case 'first-heading':\n            this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n            break;\n          default:\n            this._focusByCssSelector(this._config.autoFocus!);\n            break;\n        }\n      },\n      {injector: this._injector},\n    );\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const focusConfig = this._config.restoreFocus;\n    let focusTargetElement: HTMLElement | null = null;\n\n    if (typeof focusConfig === 'string') {\n      focusTargetElement = this._document.querySelector(focusConfig);\n    } else if (typeof focusConfig === 'boolean') {\n      focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n    } else if (focusConfig) {\n      focusTargetElement = focusConfig;\n    }\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (\n      this._config.restoreFocus &&\n      focusTargetElement &&\n      typeof focusTargetElement.focus === 'function'\n    ) {\n      const activeElement = _getFocusedElementPierceShadowDom();\n      const element = this._elementRef.nativeElement;\n\n      // Make sure that focus is still inside the dialog or is on the body (usually because a\n      // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n      // the consumer moved it themselves before the animation was done, in which case we shouldn't\n      // do anything.\n      if (\n        !activeElement ||\n        activeElement === this._document.body ||\n        activeElement === element ||\n        element.contains(activeElement)\n      ) {\n        if (this._focusMonitor) {\n          this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n          this._closeInteractionType = null;\n        } else {\n          focusTargetElement.focus();\n        }\n      }\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Focuses the dialog container. */\n  private _focusDialogContainer() {\n    // Note that there is no focus method when rendering on the server.\n    if (this._elementRef.nativeElement.focus) {\n      this._elementRef.nativeElement.focus();\n    }\n  }\n\n  /** Returns whether focus is inside the dialog. */\n  private _containsFocus() {\n    const element = this._elementRef.nativeElement;\n    const activeElement = _getFocusedElementPierceShadowDom();\n    return element === activeElement || element.contains(activeElement);\n  }\n\n  /** Sets up the focus trap. */\n  private _initializeFocusTrap() {\n    if (this._platform.isBrowser) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n\n      // Save the previously focused element. This element will be re-focused\n      // when the dialog closes.\n      if (this._document) {\n        this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n      }\n    }\n  }\n\n  /** Sets up the listener that handles clicks on the dialog backdrop. */\n  private _handleBackdropClicks() {\n    // Clicking on the backdrop will move focus out of dialog.\n    // Recapture it if closing via the backdrop is disabled.\n    this._overlayRef.backdropClick().subscribe(() => {\n      if (this._config.disableClose) {\n        this._recaptureFocus();\n      }\n    });\n  }\n}\n","<ng-template cdkPortalOutlet />\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {OverlayRef} from '../overlay';\nimport {ESCAPE, hasModifierKey} from '../keycodes';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {DialogConfig} from './dialog-config';\nimport {FocusOrigin} from '../a11y';\nimport {BasePortalOutlet} from '../portal';\nimport {ComponentRef} from '@angular/core';\n\n/** Additional options that can be passed in when closing a dialog. */\nexport interface DialogCloseOptions {\n  /** Focus original to use when restoring focus. */\n  focusOrigin?: FocusOrigin;\n}\n\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nexport class DialogRef<R = unknown, C = unknown> {\n  /**\n   * Instance of component opened into the dialog. Will be\n   * null when the dialog is opened using a `TemplateRef`.\n   */\n  readonly componentInstance: C | null;\n\n  /**\n   * `ComponentRef` of the component opened into the dialog. Will be\n   * null when the dialog is opened using a `TemplateRef`.\n   */\n  readonly componentRef: ComponentRef<C> | null;\n\n  /** Instance of the container that is rendering out the dialog content. */\n  readonly containerInstance: BasePortalOutlet & {_closeInteractionType?: FocusOrigin};\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined;\n\n  /** Emits when the dialog has been closed. */\n  readonly closed: Observable<R | undefined> = new Subject<R | undefined>();\n\n  /** Emits when the backdrop of the dialog is clicked. */\n  readonly backdropClick: Observable<MouseEvent>;\n\n  /** Emits when on keyboard events within the dialog. */\n  readonly keydownEvents: Observable<KeyboardEvent>;\n\n  /** Emits on pointer events that happen outside of the dialog. */\n  readonly outsidePointerEvents: Observable<MouseEvent>;\n\n  /** Unique ID for the dialog. */\n  readonly id: string;\n\n  /** Subscription to external detachments of the dialog. */\n  private _detachSubscription: Subscription;\n\n  constructor(\n    readonly overlayRef: OverlayRef,\n    readonly config: DialogConfig<any, DialogRef<R, C>, BasePortalOutlet>,\n  ) {\n    this.disableClose = config.disableClose;\n    this.backdropClick = overlayRef.backdropClick();\n    this.keydownEvents = overlayRef.keydownEvents();\n    this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n    this.id = config.id!; // By the time the dialog is created we are guaranteed to have an ID.\n\n    this.keydownEvents.subscribe(event => {\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n        this.close(undefined, {focusOrigin: 'keyboard'});\n      }\n    });\n\n    this.backdropClick.subscribe(() => {\n      if (!this.disableClose) {\n        this.close(undefined, {focusOrigin: 'mouse'});\n      }\n    });\n\n    this._detachSubscription = overlayRef.detachments().subscribe(() => {\n      // Check specifically for `false`, because we want `undefined` to be treated like `true`.\n      if (config.closeOnOverlayDetachments !== false) {\n        this.close();\n      }\n    });\n  }\n\n  /**\n   * Close the dialog.\n   * @param result Optional result to return to the dialog opener.\n   * @param options Additional options to customize the closing behavior.\n   */\n  close(result?: R, options?: DialogCloseOptions): void {\n    if (this.containerInstance) {\n      const closedSubject = this.closed as Subject<R | undefined>;\n      this.containerInstance._closeInteractionType = options?.focusOrigin || 'program';\n      // Drop the detach subscription first since it can be triggered by the\n      // `dispose` call and override the result of this closing sequence.\n      this._detachSubscription.unsubscribe();\n      this.overlayRef.dispose();\n      closedSubject.next(result);\n      closedSubject.complete();\n      (this as {componentInstance: C}).componentInstance = (\n        this as {containerInstance: BasePortalOutlet}\n      ).containerInstance = null!;\n    }\n  }\n\n  /** Updates the position of the dialog based on the current position strategy. */\n  updatePosition(): this {\n    this.overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string | number = '', height: string | number = ''): this {\n    this.overlayRef.updateSize({width, height});\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this.overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this.overlayRef.removePanelClass(classes);\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken, inject} from '@angular/core';\nimport {Overlay, ScrollStrategy} from '../overlay';\nimport {DialogConfig} from './dialog-config';\n\n/** Injection token for the Dialog's ScrollStrategy. */\nexport const DIALOG_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>(\n  'DialogScrollStrategy',\n  {\n    providedIn: 'root',\n    factory: () => {\n      const overlay = inject(Overlay);\n      return () => overlay.scrollStrategies.block();\n    },\n  },\n);\n\n/** Injection token for the Dialog's Data. */\nexport const DIALOG_DATA = new InjectionToken<any>('DialogData');\n\n/** Injection token that can be used to provide default options for the dialog module. */\nexport const DEFAULT_DIALOG_CONFIG = new InjectionToken<DialogConfig>('DefaultDialogConfig');\n\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nexport function DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nexport const DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  TemplateRef,\n  Injectable,\n  Injector,\n  OnDestroy,\n  Type,\n  StaticProvider,\n  ComponentRef,\n  inject,\n} from '@angular/core';\nimport {BasePortalOutlet, ComponentPortal, TemplatePortal} from '../portal';\nimport {of as observableOf, Observable, Subject, defer} from 'rxjs';\nimport {DialogRef} from './dialog-ref';\nimport {DialogConfig} from './dialog-config';\nimport {Directionality} from '../bidi';\nimport {_IdGenerator} from '../a11y';\nimport {ComponentType, Overlay, OverlayRef, OverlayConfig, OverlayContainer} from '../overlay';\nimport {startWith} from 'rxjs/operators';\n\nimport {DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY} from './dialog-injectors';\nimport {CdkDialogContainer} from './dialog-container';\n\n@Injectable({providedIn: 'root'})\nexport class Dialog implements OnDestroy {\n  private _overlay = inject(Overlay);\n  private _injector = inject(Injector);\n  private _defaultOptions = inject<DialogConfig>(DEFAULT_DIALOG_CONFIG, {optional: true});\n  private _parentDialog = inject(Dialog, {optional: true, skipSelf: true});\n  private _overlayContainer = inject(OverlayContainer);\n  private _idGenerator = inject(_IdGenerator);\n\n  private _openDialogsAtThisLevel: DialogRef<any, any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<DialogRef>();\n  private _ariaHiddenElements = new Map<Element, string | null>();\n  private _scrollStrategy = inject(DIALOG_SCROLL_STRATEGY);\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): readonly DialogRef<any, any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<DialogRef<any, any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() =>\n    this.openDialogs.length\n      ? this._getAfterAllClosed()\n      : this._getAfterAllClosed().pipe(startWith(undefined)),\n  );\n\n  constructor(...args: unknown[]);\n\n  constructor() {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param component Type of the component to load into the dialog.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<R = unknown, D = unknown, C = unknown>(\n    component: ComponentType<C>,\n    config?: DialogConfig<D, DialogRef<R, C>>,\n  ): DialogRef<R, C>;\n\n  /**\n   * Opens a modal dialog containing the given template.\n   * @param template TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<R = unknown, D = unknown, C = unknown>(\n    template: TemplateRef<C>,\n    config?: DialogConfig<D, DialogRef<R, C>>,\n  ): DialogRef<R, C>;\n\n  open<R = unknown, D = unknown, C = unknown>(\n    componentOrTemplateRef: ComponentType<C> | TemplateRef<C>,\n    config?: DialogConfig<D, DialogRef<R, C>>,\n  ): DialogRef<R, C>;\n\n  open<R = unknown, D = unknown, C = unknown>(\n    componentOrTemplateRef: ComponentType<C> | TemplateRef<C>,\n    config?: DialogConfig<D, DialogRef<R, C>>,\n  ): DialogRef<R, C> {\n    const defaults = (this._defaultOptions || new DialogConfig()) as DialogConfig<\n      D,\n      DialogRef<R, C>\n    >;\n    config = {...defaults, ...config};\n    config.id = config.id || this._idGenerator.getId('cdk-dialog-');\n\n    if (\n      config.id &&\n      this.getDialogById(config.id) &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayConfig = this._getOverlayConfig(config);\n    const overlayRef = this._overlay.create(overlayConfig);\n    const dialogRef = new DialogRef(overlayRef, config);\n    const dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n\n    (dialogRef as {containerInstance: BasePortalOutlet}).containerInstance = dialogContainer;\n    this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    (this.openDialogs as DialogRef<R, C>[]).push(dialogRef);\n    dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    reverseForEach(this.openDialogs, dialog => dialog.close());\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById<R, C>(id: string): DialogRef<R, C> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n    // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n    // determines when `aria-hidden` is removed from elements outside the dialog.\n    reverseForEach(this._openDialogsAtThisLevel, dialog => {\n      // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n      if (dialog.config.closeOnDestroy === false) {\n        this._removeOpenDialog(dialog, false);\n      }\n    });\n\n    // Make a second pass and close the remaining dialogs. We do this second pass in order to\n    // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n    // that should be closed and dialogs that should not.\n    reverseForEach(this._openDialogsAtThisLevel, dialog => dialog.close());\n\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n    this._openDialogsAtThisLevel = [];\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param config The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig<D, R>(config: DialogConfig<D, R>): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy:\n        config.positionStrategy ||\n        this._overlay.position().global().centerHorizontally().centerVertically(),\n      scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n      panelClass: config.panelClass,\n      hasBackdrop: config.hasBackdrop,\n      direction: config.direction,\n      minWidth: config.minWidth,\n      minHeight: config.minHeight,\n      maxWidth: config.maxWidth,\n      maxHeight: config.maxHeight,\n      width: config.width,\n      height: config.height,\n      disposeOnNavigation: config.closeOnNavigation,\n    });\n\n    if (config.backdropClass) {\n      state.backdropClass = config.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches a dialog container to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachContainer<R, D, C>(\n    overlay: OverlayRef,\n    dialogRef: DialogRef<R, C>,\n    config: DialogConfig<D, DialogRef<R, C>>,\n  ): BasePortalOutlet {\n    const userInjector = config.injector || config.viewContainerRef?.injector;\n    const providers: StaticProvider[] = [\n      {provide: DialogConfig, useValue: config},\n      {provide: DialogRef, useValue: dialogRef},\n      {provide: OverlayRef, useValue: overlay},\n    ];\n    let containerType: Type<BasePortalOutlet>;\n\n    if (config.container) {\n      if (typeof config.container === 'function') {\n        containerType = config.container;\n      } else {\n        containerType = config.container.type;\n        providers.push(...config.container.providers(config));\n      }\n    } else {\n      containerType = CdkDialogContainer;\n    }\n\n    const containerPortal = new ComponentPortal(\n      containerType,\n      config.viewContainerRef,\n      Injector.create({parent: userInjector || this._injector, providers}),\n    );\n    const containerRef = overlay.attach(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created dialog container.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogRef Reference to the dialog being opened.\n   * @param dialogContainer Component that is going to wrap the dialog content.\n   * @param config Configuration used to open the dialog.\n   */\n  private _attachDialogContent<R, D, C>(\n    componentOrTemplateRef: ComponentType<C> | TemplateRef<C>,\n    dialogRef: DialogRef<R, C>,\n    dialogContainer: BasePortalOutlet,\n    config: DialogConfig<D, DialogRef<R, C>>,\n  ) {\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      const injector = this._createInjector(config, dialogRef, dialogContainer, undefined);\n      let context: any = {$implicit: config.data, dialogRef};\n\n      if (config.templateContext) {\n        context = {\n          ...context,\n          ...(typeof config.templateContext === 'function'\n            ? config.templateContext()\n            : config.templateContext),\n        };\n      }\n\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<C>(componentOrTemplateRef, null!, context, injector),\n      );\n    } else {\n      const injector = this._createInjector(config, dialogRef, dialogContainer, this._injector);\n      const contentRef = dialogContainer.attachComponentPortal<C>(\n        new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector),\n      );\n      (dialogRef as {componentRef: ComponentRef<C>}).componentRef = contentRef;\n      (dialogRef as {componentInstance: C}).componentInstance = contentRef.instance;\n    }\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog being opened.\n   * @param dialogContainer Component that is going to wrap the dialog content.\n   * @param fallbackInjector Injector to use as a fallback when a lookup fails in the custom\n   * dialog injector, if the user didn't provide a custom one.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<R, D, C>(\n    config: DialogConfig<D, DialogRef<R, C>>,\n    dialogRef: DialogRef<R, C>,\n    dialogContainer: BasePortalOutlet,\n    fallbackInjector: Injector | undefined,\n  ): Injector {\n    const userInjector = config.injector || config.viewContainerRef?.injector;\n    const providers: StaticProvider[] = [\n      {provide: DIALOG_DATA, useValue: config.data},\n      {provide: DialogRef, useValue: dialogRef},\n    ];\n\n    if (config.providers) {\n      if (typeof config.providers === 'function') {\n        providers.push(...config.providers(dialogRef, config, dialogContainer));\n      } else {\n        providers.push(...config.providers);\n      }\n    }\n\n    if (\n      config.direction &&\n      (!userInjector ||\n        !userInjector.get<Directionality | null>(Directionality, null, {optional: true}))\n    ) {\n      providers.push({\n        provide: Directionality,\n        useValue: {value: config.direction, change: observableOf()},\n      });\n    }\n\n    return Injector.create({parent: userInjector || fallbackInjector, providers});\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   * @param emitEvent Whether to emit an event if this is the last dialog.\n   */\n  private _removeOpenDialog<R, C>(dialogRef: DialogRef<R, C>, emitEvent: boolean) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      (this.openDialogs as DialogRef<R, C>[]).splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n\n        if (emitEvent) {\n          this._getAfterAllClosed().next();\n        }\n      }\n    }\n  }\n\n  /** Hides all of the content that isn't an overlay from assistive technology. */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        const sibling = siblings[i];\n\n        if (\n          sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')\n        ) {\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  private _getAfterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n  }\n}\n\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\nfunction reverseForEach<T>(items: T[] | readonly T[], callback: (current: T) => void) {\n  let i = items.length;\n\n  while (i--) {\n    callback(items[i]);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ViewContainerRef, Injector} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\nimport {_defaultParams} from './dialog-animations';\n\n/** Options for where to set focus to automatically on dialog open */\nexport type AutoFocusTarget = 'dialog' | 'first-tabbable' | 'first-heading';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /**\n   * Injector used for the instantiation of the component to be attached. If provided,\n   * takes precedence over the injector indirectly provided by `ViewContainerRef`.\n   */\n  injector?: Injector;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string | string[] = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n  maxWidth?: number | string;\n\n  /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether this is a modal dialog. Used to set the `aria-modal` attribute. Off by default,\n   * because it can interfere with other overlay-based components (e.g. `mat-select`) and because\n   * it is redundant since the dialog marks all outside content as `aria-hidden` anyway.\n   */\n  ariaModal?: boolean = false;\n\n  /**\n   * Where the dialog should focus on open.\n   * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n   * AutoFocusTarget instead.\n   */\n  autoFocus?: AutoFocusTarget | string | boolean = 'first-tabbable';\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Whether to wait for the opening animation to finish before trapping focus. */\n  delayFocusTrap?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /**\n   * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n   * @deprecated No longer used. Will be removed.\n   * @breaking-change 20.0.0\n   */\n  componentFactoryResolver?: unknown;\n\n  /**\n   * Duration of the enter animation in ms.\n   * Should be a number, string type is deprecated.\n   * @breaking-change 17.0.0 Remove string signature.\n   */\n  enterAnimationDuration?: string | number;\n\n  /**\n   * Duration of the exit animation in ms.\n   * Should be a number, string type is deprecated.\n   * @breaking-change 17.0.0 Remove string signature.\n   */\n  exitAnimationDuration?: string | number;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  OnDestroy,\n  ViewEncapsulation,\n  ANIMATION_MODULE_TYPE,\n  inject,\n} from '@angular/core';\nimport {MatDialogConfig} from './dialog-config';\nimport {CdkDialogContainer} from '@angular/cdk/dialog';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {CdkPortalOutlet, ComponentPortal} from '@angular/cdk/portal';\n\n/** Event that captures the state of dialog container animations. */\ninterface LegacyDialogAnimationEvent {\n  state: 'opened' | 'opening' | 'closing' | 'closed';\n  totalTime: number;\n}\n\n/** Class added when the dialog is open. */\nconst OPEN_CLASS = 'mdc-dialog--open';\n\n/** Class added while the dialog is opening. */\nconst OPENING_CLASS = 'mdc-dialog--opening';\n\n/** Class added while the dialog is closing. */\nconst CLOSING_CLASS = 'mdc-dialog--closing';\n\n/** Duration of the opening animation in milliseconds. */\nexport const OPEN_ANIMATION_DURATION = 150;\n\n/** Duration of the closing animation in milliseconds. */\nexport const CLOSE_ANIMATION_DURATION = 75;\n\n@Component({\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrl: 'dialog.css',\n  encapsulation: ViewEncapsulation.None,\n  // Disabled for consistency with the non-MDC dialog container.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  imports: [CdkPortalOutlet],\n  host: {\n    'class': 'mat-mdc-dialog-container mdc-dialog',\n    'tabindex': '-1',\n    '[attr.aria-modal]': '_config.ariaModal',\n    '[id]': '_config.id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n    '[class.mat-mdc-dialog-container-with-actions]': '_actionSectionCount > 0',\n  },\n})\nexport class MatDialogContainer extends CdkDialogContainer<MatDialogConfig> implements OnDestroy {\n  private _animationMode = inject(ANIMATION_MODULE_TYPE, {optional: true});\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<LegacyDialogAnimationEvent>();\n\n  /** Whether animations are enabled. */\n  _animationsEnabled: boolean = this._animationMode !== 'NoopAnimations';\n\n  /** Number of actions projected in the dialog. */\n  protected _actionSectionCount = 0;\n\n  /** Host element of the dialog container component. */\n  private _hostElement: HTMLElement = this._elementRef.nativeElement;\n  /** Duration of the dialog open animation. */\n  private _enterAnimationDuration = this._animationsEnabled\n    ? parseCssTime(this._config.enterAnimationDuration) ?? OPEN_ANIMATION_DURATION\n    : 0;\n  /** Duration of the dialog close animation. */\n  private _exitAnimationDuration = this._animationsEnabled\n    ? parseCssTime(this._config.exitAnimationDuration) ?? CLOSE_ANIMATION_DURATION\n    : 0;\n  /** Current timer for dialog animations. */\n  private _animationTimer: ReturnType<typeof setTimeout> | null = null;\n\n  protected override _contentAttached(): void {\n    // Delegate to the original dialog-container initialization (i.e. saving the\n    // previous element, setting up the focus trap and moving focus to the container).\n    super._contentAttached();\n\n    // Note: Usually we would be able to use the MDC dialog foundation here to handle\n    // the dialog animation for us, but there are a few reasons why we just leverage\n    // their styles and not use the runtime foundation code:\n    //   1. Foundation does not allow us to disable animations.\n    //   2. Foundation contains unnecessary features we don't need and aren't\n    //      tree-shakeable. e.g. background scrim, keyboard event handlers for ESC button.\n    this._startOpenAnimation();\n  }\n\n  /** Starts the dialog open animation if enabled. */\n  private _startOpenAnimation() {\n    this._animationStateChanged.emit({state: 'opening', totalTime: this._enterAnimationDuration});\n\n    if (this._animationsEnabled) {\n      this._hostElement.style.setProperty(\n        TRANSITION_DURATION_PROPERTY,\n        `${this._enterAnimationDuration}ms`,\n      );\n\n      // We need to give the `setProperty` call from above some time to be applied.\n      // One would expect that the open class is added once the animation finished, but MDC\n      // uses the open class in combination with the opening class to start the animation.\n      this._requestAnimationFrame(() => this._hostElement.classList.add(OPENING_CLASS, OPEN_CLASS));\n      this._waitForAnimationToComplete(this._enterAnimationDuration, this._finishDialogOpen);\n    } else {\n      this._hostElement.classList.add(OPEN_CLASS);\n      // Note: We could immediately finish the dialog opening here with noop animations,\n      // but we defer until next tick so that consumers can subscribe to `afterOpened`.\n      // Executing this immediately would mean that `afterOpened` emits synchronously\n      // on `dialog.open` before the consumer had a change to subscribe to `afterOpened`.\n      Promise.resolve().then(() => this._finishDialogOpen());\n    }\n  }\n\n  /**\n   * Starts the exit animation of the dialog if enabled. This method is\n   * called by the dialog ref.\n   */\n  _startExitAnimation(): void {\n    this._animationStateChanged.emit({state: 'closing', totalTime: this._exitAnimationDuration});\n    this._hostElement.classList.remove(OPEN_CLASS);\n\n    if (this._animationsEnabled) {\n      this._hostElement.style.setProperty(\n        TRANSITION_DURATION_PROPERTY,\n        `${this._exitAnimationDuration}ms`,\n      );\n\n      // We need to give the `setProperty` call from above some time to be applied.\n      this._requestAnimationFrame(() => this._hostElement.classList.add(CLOSING_CLASS));\n      this._waitForAnimationToComplete(this._exitAnimationDuration, this._finishDialogClose);\n    } else {\n      // This subscription to the `OverlayRef#backdropClick` observable in the `DialogRef` is\n      // set up before any user can subscribe to the backdrop click. The subscription triggers\n      // the dialog close and this method synchronously. If we'd synchronously emit the `CLOSED`\n      // animation state event if animations are disabled, the overlay would be disposed\n      // immediately and all other subscriptions to `DialogRef#backdropClick` would be silently\n      // skipped. We work around this by waiting with the dialog close until the next tick when\n      // all subscriptions have been fired as expected. This is not an ideal solution, but\n      // there doesn't seem to be any other good way. Alternatives that have been considered:\n      //   1. Deferring `DialogRef.close`. This could be a breaking change due to a new microtask.\n      //      Also this issue is specific to the MDC implementation where the dialog could\n      //      technically be closed synchronously. In the non-MDC one, Angular animations are used\n      //      and closing always takes at least a tick.\n      //   2. Ensuring that user subscriptions to `backdropClick`, `keydownEvents` in the dialog\n      //      ref are first. This would solve the issue, but has the risk of memory leaks and also\n      //      doesn't solve the case where consumers call `DialogRef.close` in their subscriptions.\n      // Based on the fact that this is specific to the MDC-based implementation of the dialog\n      // animations, the defer is applied here.\n      Promise.resolve().then(() => this._finishDialogClose());\n    }\n  }\n\n  /**\n   * Updates the number action sections.\n   * @param delta Increase/decrease in the number of sections.\n   */\n  _updateActionSectionCount(delta: number) {\n    this._actionSectionCount += delta;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Completes the dialog open by clearing potential animation classes, trapping\n   * focus and emitting an opened event.\n   */\n  private _finishDialogOpen = () => {\n    this._clearAnimationClasses();\n    this._openAnimationDone(this._enterAnimationDuration);\n  };\n\n  /**\n   * Completes the dialog close by clearing potential animation classes, restoring\n   * focus and emitting a closed event.\n   */\n  private _finishDialogClose = () => {\n    this._clearAnimationClasses();\n    this._animationStateChanged.emit({state: 'closed', totalTime: this._exitAnimationDuration});\n  };\n\n  /** Clears all dialog animation classes. */\n  private _clearAnimationClasses() {\n    this._hostElement.classList.remove(OPENING_CLASS, CLOSING_CLASS);\n  }\n\n  private _waitForAnimationToComplete(duration: number, callback: () => void) {\n    if (this._animationTimer !== null) {\n      clearTimeout(this._animationTimer);\n    }\n\n    // Note that we want this timer to run inside the NgZone, because we want\n    // the related events like `afterClosed` to be inside the zone as well.\n    this._animationTimer = setTimeout(callback, duration);\n  }\n\n  /** Runs a callback in `requestAnimationFrame`, if available. */\n  private _requestAnimationFrame(callback: () => void) {\n    this._ngZone.runOutsideAngular(() => {\n      if (typeof requestAnimationFrame === 'function') {\n        requestAnimationFrame(callback);\n      } else {\n        callback();\n      }\n    });\n  }\n\n  protected override _captureInitialFocus(): void {\n    if (!this._config.delayFocusTrap) {\n      this._trapFocus();\n    }\n  }\n\n  /**\n   * Callback for when the open dialog animation has finished. Intended to\n   * be called by sub-classes that use different animation implementations.\n   */\n  protected _openAnimationDone(totalTime: number) {\n    if (this._config.delayFocusTrap) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.next({state: 'opened', totalTime});\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._animationTimer !== null) {\n      clearTimeout(this._animationTimer);\n    }\n  }\n\n  override attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    // When a component is passed into the dialog, the host element interrupts\n    // the `display:flex` from affecting the dialog title, content, and\n    // actions. To fix this, we make the component host `display: contents` by\n    // marking its host with the `mat-mdc-dialog-component-host` class.\n    //\n    // Note that this problem does not exist when a template ref is used since\n    // the title, contents, and actions are then nested directly under the\n    // dialog surface.\n    const ref = super.attachComponentPortal(portal);\n    ref.location.nativeElement.classList.add('mat-mdc-dialog-component-host');\n    return ref;\n  }\n}\n\nconst TRANSITION_DURATION_PROPERTY = '--mat-dialog-transition-duration';\n\n// TODO(mmalerba): Remove this function after animation durations are required\n//  to be numbers.\n/**\n * Converts a CSS time string to a number in ms. If the given time is already a\n * number, it is assumed to be in ms.\n */\nfunction parseCssTime(time: string | number | undefined): number | null {\n  if (time == null) {\n    return null;\n  }\n  if (typeof time === 'number') {\n    return time;\n  }\n  if (time.endsWith('ms')) {\n    return coerceNumberProperty(time.substring(0, time.length - 2));\n  }\n  if (time.endsWith('s')) {\n    return coerceNumberProperty(time.substring(0, time.length - 1)) * 1000;\n  }\n  if (time === '0') {\n    return 0;\n  }\n  return null; // anything else is invalid.\n}\n","<div class=\"mat-mdc-dialog-inner-container mdc-dialog__container\">\n  <div class=\"mat-mdc-dialog-surface mdc-dialog__surface\">\n    <ng-template cdkPortalOutlet />\n  </div>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Possible states of the lifecycle of a dialog. */\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {DialogRef} from '@angular/cdk/dialog';\nimport {DialogPosition, MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {filter, take} from 'rxjs/operators';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ComponentRef} from '@angular/core';\n\nexport enum MatDialogState {\n  OPEN,\n  CLOSING,\n  CLOSED,\n}\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /**\n   * `ComponentRef` of the component opened into the dialog. Will be\n   * null when the dialog is opened using a `TemplateRef`.\n   */\n  readonly componentRef: ComponentRef<T> | null;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined;\n\n  /** Unique ID for the dialog. */\n  id: string;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: ReturnType<typeof setTimeout>;\n\n  /** Current state of the dialog. */\n  private _state = MatDialogState.OPEN;\n\n  // TODO(crisbeto): we shouldn't have to declare this property, because `DialogRef.close`\n  // already has a second `options` parameter that we can use. The problem is that internal tests\n  // have assertions like `expect(MatDialogRef.close).toHaveBeenCalledWith(foo)` which will break,\n  // because it'll be called with two arguments by things like `MatDialogClose`.\n  /** Interaction that caused the dialog to close. */\n  private _closeInteractionType: FocusOrigin | undefined;\n\n  constructor(\n    private _ref: DialogRef<R, T>,\n    config: MatDialogConfig,\n    public _containerInstance: MatDialogContainer,\n  ) {\n    this.disableClose = config.disableClose;\n    this.id = _ref.id;\n\n    // Used to target panels specifically tied to dialogs.\n    _ref.addPanelClass('mat-mdc-dialog-panel');\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged\n      .pipe(\n        filter(event => event.state === 'opened'),\n        take(1),\n      )\n      .subscribe(() => {\n        this._afterOpened.next();\n        this._afterOpened.complete();\n      });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged\n      .pipe(\n        filter(event => event.state === 'closed'),\n        take(1),\n      )\n      .subscribe(() => {\n        clearTimeout(this._closeFallbackTimeout);\n        this._finishDialogClose();\n      });\n\n    _ref.overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._finishDialogClose();\n    });\n\n    merge(\n      this.backdropClick(),\n      this.keydownEvents().pipe(\n        filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)),\n      ),\n    ).subscribe(event => {\n      if (!this.disableClose) {\n        event.preventDefault();\n        _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\n      }\n    });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged\n      .pipe(\n        filter(event => event.state === 'closing'),\n        take(1),\n      )\n      .subscribe(event => {\n        this._beforeClosed.next(dialogResult);\n        this._beforeClosed.complete();\n        this._ref.overlayRef.detachBackdrop();\n\n        // The logic that disposes of the overlay depends on the exit animation completing, however\n        // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n        // timeout which will clean everything up if the animation hasn't fired within the specified\n        // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n        // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n        this._closeFallbackTimeout = setTimeout(\n          () => this._finishDialogClose(),\n          event.totalTime + 100,\n        );\n      });\n\n    this._state = MatDialogState.CLOSING;\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._ref.closed;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed;\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._ref.backdropClick;\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._ref.keydownEvents;\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._ref.config.positionStrategy as GlobalPositionStrategy;\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._ref.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._ref.updateSize(width, height);\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._ref.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._ref.removePanelClass(classes);\n    return this;\n  }\n\n  /** Gets the current state of the dialog's lifecycle. */\n  getState(): MatDialogState {\n    return this._state;\n  }\n\n  /**\n   * Finishes the dialog close by updating the state of the dialog\n   * and disposing the overlay.\n   */\n  private _finishDialogClose() {\n    this._state = MatDialogState.CLOSED;\n    this._ref.close(this._result, {focusOrigin: this._closeInteractionType});\n    this.componentInstance = null!;\n  }\n}\n\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nexport function _closeDialogVia<R>(ref: MatDialogRef<R>, interactionType: FocusOrigin, result?: R) {\n  (ref as unknown as {_closeInteractionType: FocusOrigin})._closeInteractionType = interactionType;\n  return ref.close(result);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ComponentType, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {\n  ComponentRef,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  TemplateRef,\n  Type,\n  inject,\n} from '@angular/core';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\nimport {defer, Observable, Subject} from 'rxjs';\nimport {Dialog, DialogConfig} from '@angular/cdk/dialog';\nimport {startWith} from 'rxjs/operators';\nimport {_IdGenerator} from '@angular/cdk/a11y';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatMdcDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken<MatDialogConfig>(\n  'mat-mdc-dialog-default-options',\n);\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>(\n  'mat-mdc-dialog-scroll-strategy',\n  {\n    providedIn: 'root',\n    factory: () => {\n      const overlay = inject(Overlay);\n      return () => overlay.scrollStrategies.block();\n    },\n  },\n);\n\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(\n  overlay: Overlay,\n): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable({providedIn: 'root'})\nexport class MatDialog implements OnDestroy {\n  private _overlay = inject(Overlay);\n  private _defaultOptions = inject<MatDialogConfig>(MAT_DIALOG_DEFAULT_OPTIONS, {optional: true});\n  private _scrollStrategy = inject(MAT_DIALOG_SCROLL_STRATEGY);\n  private _parentDialog = inject(MatDialog, {optional: true, skipSelf: true});\n  private _idGenerator = inject(_IdGenerator);\n  protected _dialog = inject(Dialog);\n\n  private readonly _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  protected dialogConfigClass = MatDialogConfig;\n\n  private readonly _dialogRefConstructor: Type<MatDialogRef<any>>;\n  private readonly _dialogContainerType: Type<MatDialogContainer>;\n  private readonly _dialogDataToken: InjectionToken<any>;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  private _getAfterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() =>\n    this.openDialogs.length\n      ? this._getAfterAllClosed()\n      : this._getAfterAllClosed().pipe(startWith(undefined)),\n  ) as Observable<any>;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    this._dialogRefConstructor = MatDialogRef;\n    this._dialogContainerType = MatDialogContainer;\n    this._dialogDataToken = MAT_DIALOG_DATA;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param component Type of the component to load into the dialog.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(\n    component: ComponentType<T>,\n    config?: MatDialogConfig<D>,\n  ): MatDialogRef<T, R>;\n\n  /**\n   * Opens a modal dialog containing the given template.\n   * @param template TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(\n    template: TemplateRef<T>,\n    config?: MatDialogConfig<D>,\n  ): MatDialogRef<T, R>;\n\n  open<T, D = any, R = any>(\n    template: ComponentType<T> | TemplateRef<T>,\n    config?: MatDialogConfig<D>,\n  ): MatDialogRef<T, R>;\n\n  open<T, D = any, R = any>(\n    componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n    config?: MatDialogConfig<D>,\n  ): MatDialogRef<T, R> {\n    let dialogRef: MatDialogRef<T, R>;\n    config = {...(this._defaultOptions || new MatDialogConfig()), ...config};\n    config.id = config.id || this._idGenerator.getId('mat-mdc-dialog-');\n    config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n\n    const cdkRef = this._dialog.open<R, D, T>(componentOrTemplateRef, {\n      ...config,\n      positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n      // Disable closing since we need to sync it up to the animation ourselves.\n      disableClose: true,\n      // Disable closing on destroy, because this service cleans up its open dialogs as well.\n      // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n      // the dialogs immediately whereas we want it to wait for the animations to finish.\n      closeOnDestroy: false,\n      // Disable closing on detachments so that we can sync up the animation.\n      // The Material dialog ref handles this manually.\n      closeOnOverlayDetachments: false,\n      container: {\n        type: this._dialogContainerType,\n        providers: () => [\n          // Provide our config as the CDK config as well since it has the same interface as the\n          // CDK one, but it contains the actual values passed in by the user for things like\n          // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n          {provide: this.dialogConfigClass, useValue: config},\n          {provide: DialogConfig, useValue: config},\n        ],\n      },\n      templateContext: () => ({dialogRef}),\n      providers: (ref, cdkConfig, dialogContainer) => {\n        dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\n        dialogRef.updatePosition(config?.position);\n        return [\n          {provide: this._dialogContainerType, useValue: dialogContainer},\n          {provide: this._dialogDataToken, useValue: cdkConfig.data},\n          {provide: this._dialogRefConstructor, useValue: dialogRef},\n        ];\n      },\n    });\n\n    // This can't be assigned in the `providers` callback, because\n    // the instance hasn't been assigned to the CDK ref yet.\n    (dialogRef! as {componentRef: ComponentRef<T>}).componentRef = cdkRef.componentRef!;\n    dialogRef!.componentInstance = cdkRef.componentInstance!;\n\n    this.openDialogs.push(dialogRef!);\n    this.afterOpened.next(dialogRef!);\n\n    dialogRef!.afterClosed().subscribe(() => {\n      const index = this.openDialogs.indexOf(dialogRef);\n\n      if (index > -1) {\n        this.openDialogs.splice(index, 1);\n\n        if (!this.openDialogs.length) {\n          this._getAfterAllClosed().next();\n        }\n      }\n    });\n\n    return dialogRef!;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      dialogs[i].close();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  inject,\n} from '@angular/core';\nimport {_IdGenerator} from '@angular/cdk/a11y';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\nimport {MatDialog} from './dialog';\nimport {_closeDialogVia, MatDialogRef} from './dialog-ref';\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': '_onButtonClick($event)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.type]': 'type',\n  },\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  dialogRef = inject<MatDialogRef<any>>(MatDialogRef, {optional: true})!;\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _dialog = inject(MatDialog);\n\n  /** Screen-reader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Default to \"button\" to prevents accidental form submits. */\n  @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n\n  _onButtonClick(event: MouseEvent) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(\n      this.dialogRef,\n      event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse',\n      this.dialogResult,\n    );\n  }\n}\n\n@Directive()\nexport abstract class MatDialogLayoutSection implements OnInit, OnDestroy {\n  protected _dialogRef = inject<MatDialogRef<any>>(MatDialogRef, {optional: true})!;\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _dialog = inject(MatDialog);\n\n  constructor(...args: unknown[]);\n\n  constructor() {}\n\n  protected abstract _onAdd(): void;\n  protected abstract _onRemove(): void;\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        this._onAdd();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    // Note: we null check because there are some internal\n    // tests that are mocking out `MatDialogRef` incorrectly.\n    const instance = this._dialogRef?._containerInstance;\n\n    if (instance) {\n      Promise.resolve().then(() => {\n        this._onRemove();\n      });\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-mdc-dialog-title mdc-dialog__title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle extends MatDialogLayoutSection {\n  @Input() id: string = inject(_IdGenerator).getId('mat-mdc-dialog-title-');\n\n  protected _onAdd() {\n    // Note: we null check the queue, because there are some internal\n    // tests that are mocking out `MatDialogRef` incorrectly.\n    this._dialogRef._containerInstance?._addAriaLabelledBy?.(this.id);\n  }\n\n  protected override _onRemove(): void {\n    this._dialogRef?._containerInstance?._removeAriaLabelledBy?.(this.id);\n  }\n}\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-mdc-dialog-content mdc-dialog__content'},\n  hostDirectives: [CdkScrollable],\n})\nexport class MatDialogContent {}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {\n    'class': 'mat-mdc-dialog-actions mdc-dialog__actions',\n    '[class.mat-mdc-dialog-actions-align-start]': 'align === \"start\"',\n    '[class.mat-mdc-dialog-actions-align-center]': 'align === \"center\"',\n    '[class.mat-mdc-dialog-actions-align-end]': 'align === \"end\"',\n  },\n})\nexport class MatDialogActions extends MatDialogLayoutSection {\n  /**\n   * Horizontal alignment of action buttons.\n   */\n  @Input() align?: 'start' | 'center' | 'end';\n\n  protected _onAdd() {\n    this._dialogRef._containerInstance?._updateActionSectionCount?.(1);\n  }\n\n  protected override _onRemove(): void {\n    this._dialogRef._containerInstance?._updateActionSectionCount?.(-1);\n  }\n}\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-mdc-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","import { Injectable, InjectionToken, inject } from '@angular/core';\n\nexport const BROWSER_STORAGE = new InjectionToken<Storage>('Browser Storage', {\n  providedIn: 'root',\n  factory: () => localStorage,\n});\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BrowserStorageService {\n  storage = inject<Storage>(BROWSER_STORAGE);\n\n\n  get(key: string) {\n    return this.storage.getItem(key);\n  }\n\n  set(key: string, value: string) {\n    this.storage.setItem(key, value);\n  }\n\n  remove(key: string) {\n    this.storage.removeItem(key);\n  }\n\n  clear() {\n    this.storage.clear();\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Injectable, inject, signal } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\nimport { take } from 'rxjs/operators';\nimport { BrowserStorageService } from './browser-storage.service';\n\nconst LOCAL_STORAGE_KEY = 'themeMode';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemeManagerService {\n  private document = inject(DOCUMENT);\n  private browserStorage = inject(BrowserStorageService);\n  // private _isDarkSub = new BehaviorSubject(false);\n  // isDark$ = this._isDarkSub.asObservable();\n  isDark = signal<boolean>(false);\n  private _window = this.document.defaultView;\n\n  themeSignal = signal<any>({\n    // paddingAbsolute: false,\n    // showNativeOverlaidScrollbars: false,\n    // update: {\n    //   elementEvents: [['img', 'load']],\n    //   debounce: [0, 33],\n    //   attributes: null,\n    //   ignoreMutation: null\n    // },\n    overflow: {\n      x: 'hidden',\n      y: 'scroll',\n    },\n    scrollbars: {\n      theme: 'os-theme-light',\n      // visibility: 'auto',\n      autoHide: 'leave',\n      autoHideDelay: 100,\n      // autoHideSuspend: false,\n      // dragScroll: true,\n      // clickScroll: true,\n      // pointers: ['mouse', 'touch', 'pen']\n    },\n  });\n\n  // Custom options for a specific element\n  customScrollbarOptions = signal({\n    overflow: {\n      x: 'hidden',\n      y: 'hidden',\n    },\n    scrollbars: {\n      theme: 'os-theme-light',\n      autoHide: 'leave',\n      autoHideDelay: 100,\n      visibility: 'hidden',\n    },\n  });\n\n  constructor() {\n    this.setTheme(this.getPreferredTheme());\n    if (this._window !== null && this._window.matchMedia) {\n      this._window\n        .matchMedia('(prefers-color-scheme: dark)')\n        .addEventListener('change', () => {\n          const storedTheme = this.getStoredTheme();\n          if (storedTheme !== 'light' && storedTheme !== 'dark') {\n            this.setTheme(this.getPreferredTheme());\n          }\n        });\n    }\n  }\n\n  getStoredTheme = () =>\n    JSON.parse(this.browserStorage.get(LOCAL_STORAGE_KEY) ?? '{}').theme;\n\n  setStoredTheme = (theme: string) => {\n    const meta = JSON.parse(this.browserStorage.get(LOCAL_STORAGE_KEY) ?? '{}');\n    meta.theme = theme;\n    this.browserStorage.set(LOCAL_STORAGE_KEY, JSON.stringify(meta));\n  };\n\n  getPreferredTheme = (): 'dark' | 'light' => {\n    const storedTheme = this.getStoredTheme();\n    console.log(storedTheme);\n    if (storedTheme) {\n      return storedTheme;\n    }\n\n    if (this._window !== null && this._window.matchMedia) {\n      console.log(\n        this._window.matchMedia('(prefers-color-scheme: dark)').matches,\n      );\n\n      return this._window.matchMedia('(prefers-color-scheme: dark)').matches\n        ? 'dark'\n        : 'light';\n    }\n    return 'light';\n  };\n\n  setTheme = (theme: string) => {\n    if (this._window !== null && this._window.matchMedia) {\n      if (\n        theme === 'auto' &&\n        this._window.matchMedia('(prefers-color-scheme: dark)').matches\n      ) {\n        this.document.documentElement.setAttribute('data-bs-theme', 'dark');\n        // this._isDarkSub.next(true);\n        this.isDark.set(true);\n      } else {\n        this.document.documentElement.setAttribute('data-bs-theme', theme);\n        // this._isDarkSub.next(theme === 'dark');\n        this.isDark.set(theme === 'dark');\n      }\n      this.setMaterialTheme();\n    }\n  };\n\n  setMaterialTheme() {\n    // this.isDark$.pipe(take(1)).subscribe(isDark => {\n    if (this.isDark()) {\n      const href = 'dark-theme.css';\n      getLinkElementForKey('dark-theme').setAttribute('href', href);\n      this.document.documentElement.classList.add('dark-theme');\n    } else {\n      this.removeStyle('dark-theme');\n      this.document.documentElement.classList.remove('dark-theme');\n    }\n    // });\n  }\n\n  removeStyle(key: string) {\n    const existingLinkElement = getExistingLinkElementByKey(key);\n    if (existingLinkElement) {\n      this.document.head.removeChild(existingLinkElement);\n    }\n  }\n\n  changeTheme(theme: string) {\n    this.setStoredTheme(theme);\n    this.setTheme(theme);\n    this.themeSignal.update(options => {\n      let scrollbarTheme = '';\n      if (theme === 'auto') scrollbarTheme = 'light';\n      if (theme === 'dark') scrollbarTheme = 'light';\n      if (theme === 'light') scrollbarTheme = 'dark';\n      return {\n        ...options,\n        scrollbars: {\n          ...options.scrollbars,\n          theme: `os-theme-${scrollbarTheme}`,\n        },\n      };\n    });\n  }\n}\n\nfunction getLinkElementForKey(key: string) {\n  return getExistingLinkElementByKey(key) || createLinkElementWithKey(key);\n}\n\nfunction getExistingLinkElementByKey(key: string) {\n  return document.head.querySelector(\n    `link[rel=\"stylesheet\"].${getClassNameForKey(key)}`,\n  );\n}\n\nfunction createLinkElementWithKey(key: string) {\n  const linkEl = document.createElement('link');\n  linkEl.setAttribute('rel', 'stylesheet');\n  linkEl.classList.add(getClassNameForKey(key));\n  document.head.appendChild(linkEl);\n  return linkEl;\n}\n\nfunction getClassNameForKey(key: string) {\n  return `style-manager-${key}`;\n}\n","import { Injectable } from '@angular/core';\nimport { MatPaginatorIntl } from '@angular/material/paginator';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class PaginatorI18nService implements MatPaginatorIntl {\n  changes = new Subject<void>();\n\n  // For internationalization, the `$localize` function from\n  // the `@angular/localize` package can be used.\n  firstPageLabel = $localize`:@@Paginator.firstPage:First page`;\n  itemsPerPageLabel = $localize`:@@Paginator.itemsPerPage:Items per page:`;\n  lastPageLabel = $localize`:@@Paginator.lastPage:Last page`;\n\n  // You can set labels to an arbitrary string too, or dynamically compute\n  // it through other third-party internationalization libraries.\n  nextPageLabel = 'Next page';\n  previousPageLabel = 'Previous page';\n\n  getRangeLabel(page: number, pageSize: number, length: number): string {\n    if (length === 0) {\n      return $localize`:@@Paginator.singlePageRange:Page 1 of 1`;\n    }\n    const amountPages = Math.ceil(length / pageSize);\n    return $localize`:@@Paginator.pageRange:Page ${page + 1} of ${amountPages}`;\n  }\n}\n","import { Injectable, signal } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ActivePageService {\n  pageTitle = signal<string>('Dashboard');\n\n  backNavigation = signal<boolean>(false);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  assertInInjectionContext,\n  assertNotInReactiveContext,\n  computed,\n  DestroyRef,\n  inject,\n  Injector,\n  signal,\n  Signal,\n  WritableSignal,\n  ɵRuntimeError,\n  ɵRuntimeErrorCode,\n} from '@angular/core';\nimport {ValueEqualityFn} from '@angular/core/primitives/signals';\nimport {Observable, Subscribable} from 'rxjs';\n\n/**\n * Options for `toSignal`.\n *\n * @publicApi\n */\nexport interface ToSignalOptions<T> {\n  /**\n   * Initial value for the signal produced by `toSignal`.\n   *\n   * This will be the value of the signal until the observable emits its first value.\n   */\n  initialValue?: unknown;\n\n  /**\n   * Whether to require that the observable emits synchronously when `toSignal` subscribes.\n   *\n   * If this is `true`, `toSignal` will assert that the observable produces a value immediately upon\n   * subscription. Setting this option removes the need to either deal with `undefined` in the\n   * signal type or provide an `initialValue`, at the cost of a runtime error if this requirement is\n   * not met.\n   */\n  requireSync?: boolean;\n\n  /**\n   * `Injector` which will provide the `DestroyRef` used to clean up the Observable subscription.\n   *\n   * If this is not provided, a `DestroyRef` will be retrieved from the current [injection\n   * context](guide/di/dependency-injection-context), unless manual cleanup is requested.\n   */\n  injector?: Injector;\n\n  /**\n   * Whether the subscription should be automatically cleaned up (via `DestroyRef`) when\n   * `toSignal`'s creation context is destroyed.\n   *\n   * If manual cleanup is enabled, then `DestroyRef` is not used, and the subscription will persist\n   * until the `Observable` itself completes.\n   */\n  manualCleanup?: boolean;\n\n  /**\n   * Whether `toSignal` should throw errors from the Observable error channel back to RxJS, where\n   * they'll be processed as uncaught exceptions.\n   *\n   * In practice, this means that the signal returned by `toSignal` will keep returning the last\n   * good value forever, as Observables which error produce no further values. This option emulates\n   * the behavior of the `async` pipe.\n   */\n  rejectErrors?: boolean;\n\n  /**\n   * A comparison function which defines equality for values emitted by the observable.\n   *\n   * Equality comparisons are executed against the initial value if one is provided.\n   */\n  equal?: ValueEqualityFn<T>;\n}\n\n// Base case: no options -> `undefined` in the result type.\nexport function toSignal<T>(source: Observable<T> | Subscribable<T>): Signal<T | undefined>;\n// Options with `undefined` initial value and no `requiredSync` -> `undefined`.\nexport function toSignal<T>(\n  source: Observable<T> | Subscribable<T>,\n  options: NoInfer<ToSignalOptions<T | undefined>> & {\n    initialValue?: undefined;\n    requireSync?: false;\n  },\n): Signal<T | undefined>;\n// Options with `null` initial value -> `null`.\nexport function toSignal<T>(\n  source: Observable<T> | Subscribable<T>,\n  options: NoInfer<ToSignalOptions<T | null>> & {initialValue?: null; requireSync?: false},\n): Signal<T | null>;\n// Options with `undefined` initial value and `requiredSync` -> strict result type.\nexport function toSignal<T>(\n  source: Observable<T> | Subscribable<T>,\n  options: NoInfer<ToSignalOptions<T>> & {initialValue?: undefined; requireSync: true},\n): Signal<T>;\n// Options with a more specific initial value type.\nexport function toSignal<T, const U extends T>(\n  source: Observable<T> | Subscribable<T>,\n  options: NoInfer<ToSignalOptions<T | U>> & {initialValue: U; requireSync?: false},\n): Signal<T | U>;\n\n/**\n * Get the current value of an `Observable` as a reactive `Signal`.\n *\n * `toSignal` returns a `Signal` which provides synchronous reactive access to values produced\n * by the given `Observable`, by subscribing to that `Observable`. The returned `Signal` will always\n * have the most recent value emitted by the subscription, and will throw an error if the\n * `Observable` errors.\n *\n * With `requireSync` set to `true`, `toSignal` will assert that the `Observable` produces a value\n * immediately upon subscription. No `initialValue` is needed in this case, and the returned signal\n * does not include an `undefined` type.\n *\n * By default, the subscription will be automatically cleaned up when the current [injection\n * context](guide/di/dependency-injection-context) is destroyed. For example, when `toSignal` is\n * called during the construction of a component, the subscription will be cleaned up when the\n * component is destroyed. If an injection context is not available, an explicit `Injector` can be\n * passed instead.\n *\n * If the subscription should persist until the `Observable` itself completes, the `manualCleanup`\n * option can be specified instead, which disables the automatic subscription teardown. No injection\n * context is needed in this configuration as well.\n *\n * @developerPreview\n */\nexport function toSignal<T, U = undefined>(\n  source: Observable<T> | Subscribable<T>,\n  options?: ToSignalOptions<T | U> & {initialValue?: U},\n): Signal<T | U> {\n  ngDevMode &&\n    assertNotInReactiveContext(\n      toSignal,\n      'Invoking `toSignal` causes new subscriptions every time. ' +\n        'Consider moving `toSignal` outside of the reactive context and read the signal value where needed.',\n    );\n\n  const requiresCleanup = !options?.manualCleanup;\n  requiresCleanup && !options?.injector && assertInInjectionContext(toSignal);\n  const cleanupRef = requiresCleanup\n    ? (options?.injector?.get(DestroyRef) ?? inject(DestroyRef))\n    : null;\n\n  const equal = makeToSignalEqual(options?.equal);\n\n  // Note: T is the Observable value type, and U is the initial value type. They don't have to be\n  // the same - the returned signal gives values of type `T`.\n  let state: WritableSignal<State<T | U>>;\n  if (options?.requireSync) {\n    // Initially the signal is in a `NoValue` state.\n    state = signal({kind: StateKind.NoValue}, {equal});\n  } else {\n    // If an initial value was passed, use it. Otherwise, use `undefined` as the initial value.\n    state = signal<State<T | U>>(\n      {kind: StateKind.Value, value: options?.initialValue as U},\n      {equal},\n    );\n  }\n\n  // Note: This code cannot run inside a reactive context (see assertion above). If we'd support\n  // this, we would subscribe to the observable outside of the current reactive context, avoiding\n  // that side-effect signal reads/writes are attribute to the current consumer. The current\n  // consumer only needs to be notified when the `state` signal changes through the observable\n  // subscription. Additional context (related to async pipe):\n  // https://github.com/angular/angular/pull/50522.\n  const sub = source.subscribe({\n    next: (value) => state.set({kind: StateKind.Value, value}),\n    error: (error) => {\n      if (options?.rejectErrors) {\n        // Kick the error back to RxJS. It will be caught and rethrown in a macrotask, which causes\n        // the error to end up as an uncaught exception.\n        throw error;\n      }\n      state.set({kind: StateKind.Error, error});\n    },\n    // Completion of the Observable is meaningless to the signal. Signals don't have a concept of\n    // \"complete\".\n  });\n\n  if (options?.requireSync && state().kind === StateKind.NoValue) {\n    throw new ɵRuntimeError(\n      ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT,\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.',\n    );\n  }\n\n  // Unsubscribe when the current context is destroyed, if requested.\n  cleanupRef?.onDestroy(sub.unsubscribe.bind(sub));\n\n  // The actual returned signal is a `computed` of the `State` signal, which maps the various states\n  // to either values or errors.\n  return computed(\n    () => {\n      const current = state();\n      switch (current.kind) {\n        case StateKind.Value:\n          return current.value;\n        case StateKind.Error:\n          throw current.error;\n        case StateKind.NoValue:\n          // This shouldn't really happen because the error is thrown on creation.\n          throw new ɵRuntimeError(\n            ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT,\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n              '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.',\n          );\n      }\n    },\n    {equal: options?.equal},\n  );\n}\n\nfunction makeToSignalEqual<T>(\n  userEquality: ValueEqualityFn<T> = Object.is,\n): ValueEqualityFn<State<T>> {\n  return (a, b) =>\n    a.kind === StateKind.Value && b.kind === StateKind.Value && userEquality(a.value, b.value);\n}\n\nconst enum StateKind {\n  NoValue,\n  Value,\n  Error,\n}\n\ninterface NoValueState {\n  kind: StateKind.NoValue;\n}\n\ninterface ValueState<T> {\n  kind: StateKind.Value;\n  value: T;\n}\n\ninterface ErrorState {\n  kind: StateKind.Error;\n  error: unknown;\n}\n\ntype State<T> = NoValueState | ValueState<T> | ErrorState;\n","import { BreakpointObserver } from '@angular/cdk/layout';\nimport { inject, Injectable, signal } from '@angular/core';\nimport { map, Observable, shareReplay, tap } from 'rxjs';\nimport { toSignal } from '@angular/core/rxjs-interop';\n\ntype ScreenSize = {\n  isCompact: boolean;\n  isMedium: boolean;\n  isExpanded: boolean;\n  //  islargeBP: boolean;\n  //  isextraLargeBP: boolean;\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenSizeService {\n  private breakpointObserver = inject(BreakpointObserver);\n\n  // Breakpoints\n  private compactBP = '(max-width: 599px)';\n  private mediumBP = '(min-width: 600px) and (max-width: 839px)';\n  private expandedBP = '(min-width: 840px) and (max-width: 1199px)';\n  // private largeBP = '(min-width: 1200px) and (max-width: 1599px)';\n  // private extraLargeBP = '(min-width: 1600px)';\n\n  screenSize = toSignal(\n    this.breakpointObserver\n      .observe([this.compactBP, this.mediumBP, this.expandedBP])\n      .pipe(\n        map(result => ({\n          isCompact: result.breakpoints[this.compactBP],\n          isMedium: result.breakpoints[this.mediumBP],\n          isExpanded: result.breakpoints[this.expandedBP],\n        })),\n        shareReplay({ bufferSize: 1, refCount: true }),\n        tap(result => console.log(result)),\n      ),\n  );\n}\n","import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { environment } from '@env/environment';\nimport { Observable } from 'rxjs';\n\ninterface Country {\n  id: string;\n  name: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CountriesLibService {\n  private http = inject(HttpClient);\n\n  apiURLCountriesLib = environment.apiURL + 'countriesLib';\n\n  getCountriesLib(lang: string): Observable<Country[]> {\n    return this.http.get<Country[]>(`${this.apiURLCountriesLib}/${lang}`);\n  }\n}\n","import { Component, EventEmitter, input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n@Component({\n    selector: 'ui-dynamic-fab-button',\n    imports: [CommonModule, MatButtonModule, MatIconModule, MatTooltipModule],\n    templateUrl: './dynamic-fab-button.component.html',\n    styleUrl: './dynamic-fab-button.component.scss'\n})\nexport class DynamicFabButtonComponent {\n  isScrolling = input.required<boolean>();\n  matTooltip = input<string>('');\n  newButtonString = input<string>('');\n\n  @Output() newFabEvent = new EventEmitter<void>();\n}\n","<button\n  mat-fab\n  class=\"floating-fab-button\"\n  [extended]=\"!isScrolling()\"\n  [matTooltip]=\"matTooltip()\"\n  (click)=\"newFabEvent.emit()\"\n>\n  <mat-icon>add</mat-icon>\n  {{ isScrolling() ? '' : newButtonString() }}\n</button>\n","<div class=\"page-toolbar-container\">\n  <div>\n    @if (editMode) {\n      <div class=\"title-edit-mode\">\n        <button\n          mat-icon-button\n          matTooltip=\"Back\"\n          i18n-matTooltip=\"@@PageToolbar.backBtnTooltip\"\n          aria-label=\"Arrow back icon button\"\n          i18n-aria-label=\"@@PageToolbar.backButtonAriaLabel\"\n          (click)=\"cancelEvent.emit()\"\n        >\n          <mat-icon>arrow_back</mat-icon>\n        </button>\n        @if (itemName) {\n          <span class=\"mat-title-large\">{{\n            getDynamicPageTypeString('edit')\n          }}</span>\n          @if (clientName) {\n            <span class=\"edit-client-name mat-title-large\">\n              {{ clientName }} /\n            </span>\n          }\n          <span\n            class=\"edit-program-name mat-title-large\"\n            [ngStyle]=\"{ 'flex-grow': editMode ? '0' : '1' }\"\n            >{{ itemName }}</span\n          >\n          <div class=\"program-options-wrapper\">\n            <mat-divider\n              vertical\n              style=\"display: inline-block; height: 24px\"\n            ></mat-divider>\n            <!-- Disabled in DEMO ! ! ! -->\n            <!-- <button\n              mat-icon-button\n              matTooltip=\"Send mail\"\n              i18n-matTooltip=\"@@PageToolbar.emailBtnTooltip\"\n              aria-label=\"Email icon button\"\n              i18n-aria-label=\"@@PageToolbar.emailBtnAriaLabel\"\n            >\n              <mat-icon>mail_outline</mat-icon>\n            </button>\n            <button\n              mat-icon-button\n              matTooltip=\"Share\"\n              i18n-matTooltip=\"@@PageToolbar.shareBtnTooltip\"\n              aria-label=\"Share icon button\"\n              i18n-aria-label=\"@@PageToolbar.shareBtnAriaLabel\"\n            >\n              <mat-icon>share</mat-icon>\n            </button> -->\n            @if (pageType !== 'client') {\n              <button\n                mat-icon-button\n                matTooltip=\"Print\"\n                i18n-matTooltip=\"@@PageToolbar.printBtnTooltip\"\n                aria-label=\"Print icon button\"\n                i18n-aria-label=\"@@PageToolbar.printBtnAriaLabel\"\n                (click)=\"printEvent.emit()\"\n              >\n                <mat-icon>print_outline</mat-icon>\n              </button>\n            }\n            <button\n              mat-icon-button\n              [matTooltip]=\"getDynamicPageTypeString('delete')\"\n              i18n-matTooltip=\"@@PageToolbar.deleteBtnTooltip\"\n              aria-label=\"Delete icon button\"\n              i18n-aria-label=\"@@PageToolbar.deleteBtnAriaLabel\"\n              (click)=\"deleteEvent.emit()\"\n              [disabled]=\"reuseProgram\"\n            >\n              <mat-icon>delete_outline</mat-icon>\n            </button>\n          </div>\n        } @else {\n          <span class=\"mat-title-large\">{{\n            getDynamicPageTypeString('new')\n          }}</span>\n        }\n      </div>\n    } @else {\n      <h2 class=\"hide-page-title\">{{ pageTitle }}</h2>\n    }\n  </div>\n\n  <div class=\"toolbar-btns\">\n    @if (cancelButton) {\n      <button\n        class=\"custom-btn\"\n        mat-stroked-button\n        color=\"primary\"\n        (click)=\"cancelEvent.emit()\"\n        i18n=\"@@PageToolbar.cancelBtn\"\n      >\n        Cancel\n      </button>\n    }\n\n    @if (submitButton) {\n      <button\n        class=\"custom-btn\"\n        [class.spinner]=\"isLoading()\"\n        [disabled]=\"isLoading()\"\n        mat-flat-button\n        color=\"primary\"\n        (click)=\"onSubmit()\"\n        i18n=\"@@PageToolbar.saveBtn\"\n      >\n        Save\n      </button>\n    }\n    @if (newButton) {\n      @if (screenSize()?.isCompact) {\n        <ui-dynamic-fab-button\n          [isScrolling]=\"isScrolling()\"\n          [matTooltip]=\"getDynamicPageTypeString('new')\"\n          (newFabEvent)=\"newFabEvent()\"\n          [newButtonString]=\"newButtonString\"\n        />\n      } @else {\n        <button\n          class=\"custom-btn\"\n          mat-flat-button\n          color=\"primary\"\n          [matTooltip]=\"getDynamicPageTypeString('new')\"\n          (click)=\"newEvent.emit()\"\n        >\n          <mat-icon>add</mat-icon>\n          {{ newButtonString }}\n        </button>\n      }\n    }\n\n    <!-- Insert custom content from parent component -->\n    <ng-content></ng-content>\n  </div>\n</div>\n","/// <reference types=\"@angular/localize\" />\n\nimport {\n  Component,\n  EventEmitter,\n  inject,\n  Input,\n  Output,\n  signal,\n} from '@angular/core';\nimport { CommonModule, NgStyle } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { Router } from '@angular/router';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { ShareStateService } from '@slowautomobile/exercises';\nimport { ScreenSizeService } from '../../services/screen-size.service';\nimport { DynamicFabButtonComponent } from '../dynamic-fab-button/dynamic-fab-button.component';\n\n@Component({\n    selector: 'ui-page-toolbar',\n    imports: [\n        CommonModule,\n        NgStyle,\n        MatButtonModule,\n        MatTooltipModule,\n        MatDividerModule,\n        MatIconModule,\n        DynamicFabButtonComponent,\n    ],\n    templateUrl: './page-toolbar.component.html',\n    styleUrl: './page-toolbar.component.scss'\n})\nexport class PageToolbarComponent {\n  router = inject(Router);\n  private shareStateService = inject(ShareStateService);\n  private screenSizeService = inject(ScreenSizeService);\n\n  screenSize = this.screenSizeService.screenSize;\n  newButtonString = $localize`:@@PageToolbar.newBtn:New`;\n  isLoading = this.shareStateService.isLoading;\n\n  isScrolling = signal<boolean>(false);\n\n  @Input() pageTitle?: string;\n  @Input() pageType?: string;\n  @Input() cancelButton = false;\n  @Input() submitButton = false;\n  @Input() newButton = false;\n  @Input() editMode = false;\n  @Input() itemName = '';\n  @Input() clientName = '';\n  @Input() isClientProgram = false;\n  @Input() reuseProgram = false;\n\n  @Output() submitEvent = new EventEmitter<void>();\n  @Output() newEvent = new EventEmitter<void>();\n  @Output() cancelEvent = new EventEmitter<void>();\n  @Output() deleteEvent = new EventEmitter<void>();\n  @Output() printEvent = new EventEmitter<void>();\n\n  onSubmit() {\n    this.submitEvent.emit();\n  }\n\n  getDynamicPageTypeString(action: string) {\n    // Result will be 'Edit/new/delete program' or 'Edit/new/delete client' (localized)\n    if (this.pageType === 'client') {\n      switch (action) {\n        case 'new':\n          return $localize`:@@PageToolbar.addNewTypeClient:New client`;\n        case 'edit':\n          return $localize`:@@PageToolbar.editPageTypeClient:Edit client / `;\n        case 'delete':\n          return $localize`:@@PageToolbar.deleteNewTypeClient:Delete client`;\n        default:\n          return '';\n      }\n    } else {\n      switch (action) {\n        case 'new':\n          return $localize`:@@PageToolbar.addNewTypeProgram:New program`;\n        case 'edit':\n          return $localize`:@@PageToolbar.editPageTypeProgram:Edit program / `;\n        case 'delete':\n          return $localize`:@@PageToolbar.deleteNewTypeProgram:Delete program`;\n        default:\n          return '';\n      }\n    }\n  }\n\n  newFabEvent() {\n    this.newEvent.emit();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: readonly number[] | ReadonlySet<number>;\n\n  /** Whether icon indicators should be hidden for single-selection. */\n  hideSingleSelectionIndicator?: boolean;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken<MatChipsDefaultOptions>(\n  'mat-chips-default-options',\n  {\n    providedIn: 'root',\n    factory: () => ({\n      separatorKeyCodes: [ENTER],\n    }),\n  },\n);\n\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n\n/**\n * Injection token used to avoid a circular dependency between the `MatChip` and `MatChipAction`.\n */\nexport const MAT_CHIP = new InjectionToken('MatChip');\n","<span class=\"mat-mdc-chip-focus-overlay\"></span>\n\n<span class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--primary\">\n  <span matChipAction [isInteractive]=\"false\">\n    @if (leadingIcon) {\n      <span class=\"mdc-evolution-chip__graphic mat-mdc-chip-graphic\">\n        <ng-content select=\"mat-chip-avatar, [matChipAvatar]\"></ng-content>\n      </span>\n    }\n    <span class=\"mdc-evolution-chip__text-label mat-mdc-chip-action-label\">\n      <ng-content></ng-content>\n      <span class=\"mat-mdc-chip-primary-focus-indicator mat-focus-indicator\"></span>\n    </span>\n  </span>\n</span>\n\n@if (_hasTrailingIcon()) {\n  <span class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--trailing\">\n    <ng-content select=\"mat-chip-trailing-icon,[matChipRemove],[matChipTrailingIcon]\"></ng-content>\n  </span>\n}\n","<span class=\"mat-mdc-chip-focus-overlay\"></span>\n\n<span class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--primary\">\n  <button\n    matChipAction\n    [_allowFocusWhenDisabled]=\"true\"\n    [attr.aria-selected]=\"ariaSelected\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-describedby]=\"_ariaDescriptionId\"\n    role=\"option\">\n    @if (_hasLeadingGraphic()) {\n      <span class=\"mdc-evolution-chip__graphic mat-mdc-chip-graphic\">\n        <ng-content select=\"mat-chip-avatar, [matChipAvatar]\"></ng-content>\n        <span class=\"mdc-evolution-chip__checkmark\">\n          <svg\n            class=\"mdc-evolution-chip__checkmark-svg\"\n            viewBox=\"-2 -3 30 30\"\n            focusable=\"false\"\n            aria-hidden=\"true\">\n            <path class=\"mdc-evolution-chip__checkmark-path\"\n                  fill=\"none\" stroke=\"currentColor\" d=\"M1.73,12.91 8.1,19.28 22.79,4.59\" />\n          </svg>\n        </span>\n      </span>\n    }\n    <span class=\"mdc-evolution-chip__text-label mat-mdc-chip-action-label\">\n      <ng-content></ng-content>\n      <span class=\"mat-mdc-chip-primary-focus-indicator mat-focus-indicator\"></span>\n    </span>\n  </button>\n</span>\n\n@if (_hasTrailingIcon()) {\n  <span class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--trailing\">\n    <ng-content select=\"mat-chip-trailing-icon,[matChipRemove],[matChipTrailingIcon]\"></ng-content>\n  </span>\n}\n\n<span class=\"cdk-visually-hidden\" [id]=\"_ariaDescriptionId\">{{ariaDescription}}</span>\n","@if (!_isEditing) {\n  <span class=\"mat-mdc-chip-focus-overlay\"></span>\n}\n\n<span class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--primary\" role=\"gridcell\"\n    matChipAction\n    [disabled]=\"disabled\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-describedby]=\"_ariaDescriptionId\">\n  @if (leadingIcon) {\n    <span class=\"mdc-evolution-chip__graphic mat-mdc-chip-graphic\">\n      <ng-content select=\"mat-chip-avatar, [matChipAvatar]\"></ng-content>\n    </span>\n  }\n\n  <span class=\"mdc-evolution-chip__text-label mat-mdc-chip-action-label\">\n    @if (_isEditing) {\n      @if (contentEditInput) {\n        <ng-content select=\"[matChipEditInput]\"></ng-content>\n      } @else {\n        <span matChipEditInput></span>\n      }\n    } @else {\n      <ng-content></ng-content>\n    }\n\n    <span class=\"mat-mdc-chip-primary-focus-indicator mat-focus-indicator\" aria-hidden=\"true\"></span>\n  </span>\n</span>\n\n@if (_hasTrailingIcon()) {\n  <span\n    class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--trailing\"\n    role=\"gridcell\">\n    <ng-content select=\"mat-chip-trailing-icon,[matChipRemove],[matChipTrailingIcon]\"></ng-content>\n  </span>\n}\n\n<span class=\"cdk-visually-hidden\" [id]=\"_ariaDescriptionId\">{{ariaDescription}}</span>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  booleanAttribute,\n  numberAttribute,\n  inject,\n} from '@angular/core';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {MAT_CHIP} from './tokens';\nimport {_CdkPrivateStyleLoader} from '@angular/cdk/private';\nimport {_StructuralStylesLoader} from '../core';\n\n/**\n * Section within a chip.\n * @docs-private\n */\n@Directive({\n  selector: '[matChipAction]',\n  host: {\n    'class': 'mdc-evolution-chip__action mat-mdc-chip-action',\n    '[class.mdc-evolution-chip__action--primary]': '_isPrimary',\n    '[class.mdc-evolution-chip__action--presentational]': '!isInteractive',\n    '[class.mdc-evolution-chip__action--trailing]': '!_isPrimary',\n    '[attr.tabindex]': '_getTabindex()',\n    '[attr.disabled]': '_getDisabledAttribute()',\n    '[attr.aria-disabled]': 'disabled',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n})\nexport class MatChipAction {\n  _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  protected _parentChip = inject<{\n    _handlePrimaryActionInteraction(): void;\n    remove(): void;\n    disabled: boolean;\n    _isEditing?: boolean;\n  }>(MAT_CHIP);\n\n  /** Whether the action is interactive. */\n  @Input() isInteractive = true;\n\n  /** Whether this is the primary action in the chip. */\n  _isPrimary = true;\n\n  /** Whether the action is disabled. */\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled || this._parentChip?.disabled || false;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n  }\n  private _disabled = false;\n\n  /** Tab index of the action. */\n  @Input({\n    transform: (value: unknown) => (value == null ? -1 : numberAttribute(value)),\n  })\n  tabIndex: number = -1;\n\n  /**\n   * Private API to allow focusing this chip when it is disabled.\n   */\n  @Input()\n  private _allowFocusWhenDisabled = false;\n\n  /**\n   * Determine the value of the disabled attribute for this chip action.\n   */\n  protected _getDisabledAttribute(): string | null {\n    // When this chip action is disabled and focusing disabled chips is not permitted, return empty\n    // string to indicate that disabled attribute should be included.\n    return this.disabled && !this._allowFocusWhenDisabled ? '' : null;\n  }\n\n  /**\n   * Determine the value of the tabindex attribute for this chip action.\n   */\n  protected _getTabindex(): string | null {\n    return (this.disabled && !this._allowFocusWhenDisabled) || !this.isInteractive\n      ? null\n      : this.tabIndex.toString();\n  }\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n    if (this._elementRef.nativeElement.nodeName === 'BUTTON') {\n      this._elementRef.nativeElement.setAttribute('type', 'button');\n    }\n  }\n\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  _handleClick(event: MouseEvent) {\n    if (!this.disabled && this.isInteractive && this._isPrimary) {\n      event.preventDefault();\n      this._parentChip._handlePrimaryActionInteraction();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    if (\n      (event.keyCode === ENTER || event.keyCode === SPACE) &&\n      !this.disabled &&\n      this.isInteractive &&\n      this._isPrimary &&\n      !this._parentChip._isEditing\n    ) {\n      event.preventDefault();\n      this._parentChip._handlePrimaryActionInteraction();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Directive} from '@angular/core';\nimport {MatChipAction} from './chip-action';\nimport {MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON} from './tokens';\n\n/** Avatar image within a chip. */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {\n    'class': 'mat-mdc-chip-avatar mdc-evolution-chip__icon mdc-evolution-chip__icon--primary',\n    'role': 'img',\n  },\n  providers: [{provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar}],\n})\nexport class MatChipAvatar {}\n\n/** Non-interactive trailing icon in a chip. */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {\n    'class':\n      'mat-mdc-chip-trailing-icon mdc-evolution-chip__icon mdc-evolution-chip__icon--trailing',\n    'aria-hidden': 'true',\n  },\n  providers: [{provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon}],\n})\nexport class MatChipTrailingIcon extends MatChipAction {\n  /**\n   * MDC considers all trailing actions as a remove icon,\n   * but we support non-interactive trailing icons.\n   */\n  override isInteractive = false;\n\n  override _isPrimary = false;\n}\n\n/**\n * Directive to remove the parent chip when the trailing icon is clicked or\n * when the ENTER key is pressed on it.\n *\n * Recommended for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n * ```\n * <mat-chip>\n *   <mat-icon matChipRemove>cancel</mat-icon>\n * </mat-chip>\n * ```\n */\n\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class':\n      'mat-mdc-chip-remove mat-mdc-chip-trailing-icon mat-focus-indicator ' +\n      'mdc-evolution-chip__icon mdc-evolution-chip__icon--trailing',\n    'role': 'button',\n    '[attr.aria-hidden]': 'null',\n  },\n  providers: [{provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove}],\n})\nexport class MatChipRemove extends MatChipAction {\n  override _isPrimary = false;\n\n  override _handleClick(event: MouseEvent): void {\n    if (!this.disabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      this._parentChip.remove();\n    }\n  }\n\n  override _handleKeydown(event: KeyboardEvent) {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !this.disabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {FocusMonitor, _IdGenerator} from '@angular/cdk/a11y';\nimport {BACKSPACE, DELETE} from '@angular/cdk/keycodes';\nimport {_CdkPrivateStyleLoader, _VisuallyHiddenLoader} from '@angular/cdk/private';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ANIMATION_MODULE_TYPE,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Injector,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  MatRippleLoader,\n  RippleGlobalOptions,\n  _StructuralStylesLoader,\n} from '../core';\nimport {Subject, Subscription, merge} from 'rxjs';\nimport {MatChipAction} from './chip-action';\nimport {MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip-icons';\nimport {MAT_CHIP, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON} from './tokens';\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/**\n * Material design styled Chip base component. Used inside the MatChipSet component.\n *\n * Extended by MatChipOption and MatChipRow for different interaction patterns.\n */\n@Component({\n  selector: 'mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]',\n  exportAs: 'matChip',\n  templateUrl: 'chip.html',\n  styleUrl: 'chip.css',\n  host: {\n    'class': 'mat-mdc-chip',\n    '[class]': '\"mat-\" + (color || \"primary\")',\n    '[class.mdc-evolution-chip]': '!_isBasicChip',\n    '[class.mdc-evolution-chip--disabled]': 'disabled',\n    '[class.mdc-evolution-chip--with-trailing-action]': '_hasTrailingIcon()',\n    '[class.mdc-evolution-chip--with-primary-graphic]': 'leadingIcon',\n    '[class.mdc-evolution-chip--with-primary-icon]': 'leadingIcon',\n    '[class.mdc-evolution-chip--with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-basic-chip]': '_isBasicChip',\n    '[class.mat-mdc-standard-chip]': '!_isBasicChip',\n    '[class.mat-mdc-chip-with-trailing-icon]': '_hasTrailingIcon()',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[id]': 'id',\n    '[attr.role]': 'role',\n    '[attr.aria-label]': 'ariaLabel',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: MAT_CHIP, useExisting: MatChip}],\n  imports: [MatChipAction],\n})\nexport class MatChip implements OnInit, AfterViewInit, AfterContentInit, DoCheck, OnDestroy {\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  protected _ngZone = inject(NgZone);\n  private _focusMonitor = inject(FocusMonitor);\n  private _globalRippleOptions = inject<RippleGlobalOptions>(MAT_RIPPLE_GLOBAL_OPTIONS, {\n    optional: true,\n  });\n\n  protected _document = inject(DOCUMENT);\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blurred. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Whether this chip is a basic (unstyled) chip. */\n  _isBasicChip: boolean;\n\n  /** Role for the root of the chip. */\n  @Input() role: string | null = null;\n\n  /** Whether the chip has focus. */\n  private _hasFocusInternal = false;\n\n  /** Whether moving focus into the chip is pending. */\n  private _pendingFocus: boolean;\n\n  /** Subscription to changes in the chip's actions. */\n  private _actionChanges: Subscription | undefined;\n\n  /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  /** All avatars present in the chip. */\n  @ContentChildren(MAT_CHIP_AVATAR, {descendants: true})\n  protected _allLeadingIcons: QueryList<MatChipAvatar>;\n\n  /** All trailing icons present in the chip. */\n  @ContentChildren(MAT_CHIP_TRAILING_ICON, {descendants: true})\n  protected _allTrailingIcons: QueryList<MatChipTrailingIcon>;\n\n  /** All remove icons present in the chip. */\n  @ContentChildren(MAT_CHIP_REMOVE, {descendants: true})\n  protected _allRemoveIcons: QueryList<MatChipRemove>;\n\n  _hasFocus() {\n    return this._hasFocusInternal;\n  }\n\n  /** A unique id for the chip. If none is supplied, it will be auto-generated. */\n  @Input() id: string = inject(_IdGenerator).getId('mat-mdc-chip-');\n\n  // TODO(#26104): Consider deprecating and using `_computeAriaAccessibleName` instead.\n  // `ariaLabel` may be unnecessary, and `_computeAriaAccessibleName` only supports\n  // datepicker's use case.\n  /** ARIA label for the content of the chip. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  // TODO(#26104): Consider deprecating and using `_computeAriaAccessibleName` instead.\n  // `ariaDescription` may be unnecessary, and `_computeAriaAccessibleName` only supports\n  // datepicker's use case.\n  /** ARIA description for the content of the chip. */\n  @Input('aria-description') ariaDescription: string | null = null;\n\n  /** Id of a span that contains this chip's aria description. */\n  _ariaDescriptionId = `${this.id}-aria-description`;\n\n  /** Whether the chip list is disabled. */\n  _chipListDisabled: boolean = false;\n\n  private _textElement!: HTMLElement;\n\n  /**\n   * The value of the chip. Defaults to the content inside\n   * the `mat-mdc-chip-action-label` element.\n   */\n  @Input()\n  get value(): any {\n    return this._value !== undefined ? this._value : this._textElement.textContent!.trim();\n  }\n  set value(value: any) {\n    this._value = value;\n  }\n  protected _value: any;\n\n  // TODO: should be typed as `ThemePalette` but internal apps pass in arbitrary strings.\n  /**\n   * Theme color of the chip. This API is supported in M2 themes only, it has no\n   * effect in M3 themes. For color customization in M3, see https://material.angular.io/components/chips/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  @Input() color?: string | null;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input({transform: booleanAttribute})\n  removable: boolean = true;\n\n  /**\n   * Colors the chip for emphasis as if it were selected.\n   */\n  @Input({transform: booleanAttribute})\n  highlighted: boolean = false;\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input({transform: booleanAttribute})\n  disableRipple: boolean = false;\n\n  /** Whether the chip is disabled. */\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled || this._chipListDisabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n  }\n  private _disabled = false;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The unstyled chip selector for this component. */\n  protected basicChipAttrName = 'mat-basic-chip';\n\n  /** The chip's leading icon. */\n  @ContentChild(MAT_CHIP_AVATAR) leadingIcon: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MAT_CHIP_TRAILING_ICON) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's trailing remove icon. */\n  @ContentChild(MAT_CHIP_REMOVE) removeIcon: MatChipRemove;\n\n  /** Action receiving the primary set of user interactions. */\n  @ViewChild(MatChipAction) primaryAction: MatChipAction;\n\n  /**\n   * Handles the lazy creation of the MatChip ripple.\n   * Used to improve initial load time of large applications.\n   */\n  private _rippleLoader: MatRippleLoader = inject(MatRippleLoader);\n\n  protected _injector = inject(Injector);\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const styleLoader = inject(_CdkPrivateStyleLoader);\n    styleLoader.load(_StructuralStylesLoader);\n    styleLoader.load(_VisuallyHiddenLoader);\n    const animationMode = inject(ANIMATION_MODULE_TYPE, {optional: true});\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n    this._monitorFocus();\n\n    this._rippleLoader?.configureRipple(this._elementRef.nativeElement, {\n      className: 'mat-mdc-chip-ripple',\n      disabled: this._isRippleDisabled(),\n    });\n  }\n\n  ngOnInit() {\n    // This check needs to happen in `ngOnInit` so the overridden value of\n    // `basicChipAttrName` coming from base classes can be picked up.\n    const element = this._elementRef.nativeElement;\n    this._isBasicChip =\n      element.hasAttribute(this.basicChipAttrName) ||\n      element.tagName.toLowerCase() === this.basicChipAttrName;\n  }\n\n  ngAfterViewInit() {\n    this._textElement = this._elementRef.nativeElement.querySelector('.mat-mdc-chip-action-label')!;\n\n    if (this._pendingFocus) {\n      this._pendingFocus = false;\n      this.focus();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    // Since the styling depends on the presence of some\n    // actions, we have to mark for check on changes.\n    this._actionChanges = merge(\n      this._allLeadingIcons.changes,\n      this._allTrailingIcons.changes,\n      this._allRemoveIcons.changes,\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngDoCheck(): void {\n    this._rippleLoader.setDisabled(this._elementRef.nativeElement, this._isRippleDisabled());\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._rippleLoader?.destroyRipple(this._elementRef.nativeElement);\n    this._actionChanges?.unsubscribe();\n    this.destroyed.emit({chip: this});\n    this.destroyed.complete();\n  }\n\n  /**\n   * Allows for programmatic removal of the chip.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Whether or not the ripple should be disabled. */\n  _isRippleDisabled(): boolean {\n    return (\n      this.disabled ||\n      this.disableRipple ||\n      this._animationsDisabled ||\n      this._isBasicChip ||\n      !!this._globalRippleOptions?.disabled\n    );\n  }\n\n  /** Returns whether the chip has a trailing icon. */\n  _hasTrailingIcon() {\n    return !!(this.trailingIcon || this.removeIcon);\n  }\n\n  /** Handles keyboard events on the chip. */\n  _handleKeydown(event: KeyboardEvent) {\n    // Ignore backspace events where the user is holding down the key\n    // so that we don't accidentally remove too many chips.\n    if ((event.keyCode === BACKSPACE && !event.repeat) || event.keyCode === DELETE) {\n      event.preventDefault();\n      this.remove();\n    }\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this.disabled) {\n      // If `focus` is called before `ngAfterViewInit`, we won't have access to the primary action.\n      // This can happen if the consumer tries to focus a chip immediately after it is added.\n      // Queue the method to be called again on init.\n      if (this.primaryAction) {\n        this.primaryAction.focus();\n      } else {\n        this._pendingFocus = true;\n      }\n    }\n  }\n\n  /** Gets the action that contains a specific target node. */\n  _getSourceAction(target: Node): MatChipAction | undefined {\n    return this._getActions().find(action => {\n      const element = action._elementRef.nativeElement;\n      return element === target || element.contains(target);\n    });\n  }\n\n  /** Gets all of the actions within the chip. */\n  _getActions(): MatChipAction[] {\n    const result: MatChipAction[] = [];\n\n    if (this.primaryAction) {\n      result.push(this.primaryAction);\n    }\n\n    if (this.removeIcon) {\n      result.push(this.removeIcon);\n    }\n\n    if (this.trailingIcon) {\n      result.push(this.trailingIcon);\n    }\n\n    return result;\n  }\n\n  /** Handles interactions with the primary action of the chip. */\n  _handlePrimaryActionInteraction() {\n    // Empty here, but is overwritten in child classes.\n  }\n\n  /** Starts the focus monitoring process on the chip. */\n  private _monitorFocus() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n      const hasFocus = origin !== null;\n\n      if (hasFocus !== this._hasFocusInternal) {\n        this._hasFocusInternal = hasFocus;\n\n        if (hasFocus) {\n          this._onFocus.next({chip: this});\n        } else {\n          // When animations are enabled, Angular may end up removing the chip from the DOM a little\n          // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n          // that moves focus to the next item. To work around the issue, we defer marking the chip\n          // as not focused until after the next render.\n          this._changeDetectorRef.markForCheck();\n          setTimeout(() => this._ngZone.run(() => this._onBlur.next({chip: this})));\n        }\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, ElementRef, inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * A directive that makes a span editable and exposes functions to modify and retrieve the\n * element's contents.\n */\n@Directive({\n  selector: 'span[matChipEditInput]',\n  host: {\n    'class': 'mat-chip-edit-input',\n    'role': 'textbox',\n    'tabindex': '-1',\n    'contenteditable': 'true',\n  },\n})\nexport class MatChipEditInput {\n  private readonly _elementRef = inject(ElementRef);\n  private readonly _document = inject(DOCUMENT);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  initialize(initialValue: string) {\n    this.getNativeElement().focus();\n    this.setValue(initialValue);\n  }\n\n  getNativeElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  setValue(value: string) {\n    this.getNativeElement().textContent = value;\n    this._moveCursorToEndOfInput();\n  }\n\n  getValue(): string {\n    return this.getNativeElement().textContent || '';\n  }\n\n  private _moveCursorToEndOfInput() {\n    const range = this._document.createRange();\n    range.selectNodeContents(this.getNativeElement());\n    range.collapse(false);\n    const sel = window.getSelection()!;\n    sel.removeAllRanges();\n    sel.addRange(range);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  afterNextRender,\n} from '@angular/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent} from './chip';\nimport {MatChipAction} from './chip-action';\nimport {MatChipEditInput} from './chip-edit-input';\nimport {MAT_CHIP} from './tokens';\n\n/** Represents an event fired on an individual `mat-chip` when it is edited. */\nexport interface MatChipEditedEvent extends MatChipEvent {\n  /** The final edit value. */\n  value: string;\n}\n\n/**\n * An extension of the MatChip component used with MatChipGrid and\n * the matChipInputFor directive.\n */\n@Component({\n  selector: 'mat-chip-row, [mat-chip-row], mat-basic-chip-row, [mat-basic-chip-row]',\n  templateUrl: 'chip-row.html',\n  styleUrl: 'chip.css',\n  host: {\n    'class': 'mat-mdc-chip mat-mdc-chip-row mdc-evolution-chip',\n    '[class.mat-mdc-chip-with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-disabled]': 'disabled',\n    '[class.mat-mdc-chip-editing]': '_isEditing',\n    '[class.mat-mdc-chip-editable]': 'editable',\n    '[class.mdc-evolution-chip--disabled]': 'disabled',\n    '[class.mdc-evolution-chip--with-trailing-action]': '_hasTrailingIcon()',\n    '[class.mdc-evolution-chip--with-primary-graphic]': 'leadingIcon',\n    '[class.mdc-evolution-chip--with-primary-icon]': 'leadingIcon',\n    '[class.mdc-evolution-chip--with-avatar]': 'leadingIcon',\n    '[class.mat-mdc-chip-highlighted]': 'highlighted',\n    '[class.mat-mdc-chip-with-trailing-icon]': '_hasTrailingIcon()',\n    '[id]': 'id',\n    // Has to have a negative tabindex in order to capture\n    // focus and redirect it to the primary action.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-description]': 'null',\n    '[attr.role]': 'role',\n    '(focus)': '_handleFocus()',\n    '(dblclick)': '_handleDoubleclick($event)',\n  },\n  providers: [\n    {provide: MatChip, useExisting: MatChipRow},\n    {provide: MAT_CHIP, useExisting: MatChipRow},\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [MatChipAction, MatChipEditInput],\n})\nexport class MatChipRow extends MatChip implements AfterViewInit {\n  protected override basicChipAttrName = 'mat-basic-chip-row';\n\n  /**\n   * The editing action has to be triggered in a timeout. While we're waiting on it, a blur\n   * event might occur which will interrupt the editing. This flag is used to avoid interruptions\n   * while the editing action is being initialized.\n   */\n  private _editStartPending = false;\n\n  @Input() editable: boolean = false;\n\n  /** Emitted when the chip is edited. */\n  @Output() readonly edited: EventEmitter<MatChipEditedEvent> =\n    new EventEmitter<MatChipEditedEvent>();\n\n  /** The default chip edit input that is used if none is projected into this chip row. */\n  @ViewChild(MatChipEditInput) defaultEditInput?: MatChipEditInput;\n\n  /** The projected chip edit input. */\n  @ContentChild(MatChipEditInput) contentEditInput?: MatChipEditInput;\n\n  _isEditing = false;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n\n    this.role = 'row';\n    this._onBlur.pipe(takeUntil(this.destroyed)).subscribe(() => {\n      if (this._isEditing && !this._editStartPending) {\n        this._onEditFinish();\n      }\n    });\n  }\n\n  override _hasTrailingIcon() {\n    // The trailing icon is hidden while editing.\n    return !this._isEditing && super._hasTrailingIcon();\n  }\n\n  /** Sends focus to the first gridcell when the user clicks anywhere inside the chip. */\n  _handleFocus() {\n    if (!this._isEditing && !this.disabled) {\n      this.focus();\n    }\n  }\n\n  override _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER && !this.disabled) {\n      if (this._isEditing) {\n        event.preventDefault();\n        this._onEditFinish();\n      } else if (this.editable) {\n        this._startEditing(event);\n      }\n    } else if (this._isEditing) {\n      // Stop the event from reaching the chip set in order to avoid navigating.\n      event.stopPropagation();\n    } else {\n      super._handleKeydown(event);\n    }\n  }\n\n  _handleDoubleclick(event: MouseEvent) {\n    if (!this.disabled && this.editable) {\n      this._startEditing(event);\n    }\n  }\n\n  private _startEditing(event: Event) {\n    if (\n      !this.primaryAction ||\n      (this.removeIcon && this._getSourceAction(event.target as Node) === this.removeIcon)\n    ) {\n      return;\n    }\n\n    // The value depends on the DOM so we need to extract it before we flip the flag.\n    const value = this.value;\n\n    this._isEditing = this._editStartPending = true;\n\n    // Defer initializing the input until after it has been added to the DOM.\n    afterNextRender(\n      () => {\n        this._getEditInput().initialize(value);\n        this._editStartPending = false;\n      },\n      {injector: this._injector},\n    );\n  }\n\n  private _onEditFinish() {\n    this._isEditing = this._editStartPending = false;\n    this.edited.emit({chip: this, value: this._getEditInput().getValue()});\n\n    // If the edit input is still focused or focus was returned to the body after it was destroyed,\n    // return focus to the chip contents.\n    if (\n      this._document.activeElement === this._getEditInput().getNativeElement() ||\n      this._document.activeElement === this._document.body\n    ) {\n      this.primaryAction.focus();\n    }\n  }\n\n  override _isRippleDisabled(): boolean {\n    return super._isRippleDisabled() || this._isEditing;\n  }\n\n  /**\n   * Gets the projected chip edit input, or the default input if none is projected in. One of these\n   * two values is guaranteed to be defined.\n   */\n  private _getEditInput(): MatChipEditInput {\n    return this.contentEditInput || this.defaultEditInput!;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  OnDestroy,\n  QueryList,\n  ViewEncapsulation,\n  booleanAttribute,\n  numberAttribute,\n  inject,\n} from '@angular/core';\nimport {Observable, Subject, merge} from 'rxjs';\nimport {startWith, switchMap, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent} from './chip';\nimport {MatChipAction} from './chip-action';\n\n/**\n * Basic container component for the MatChip component.\n *\n * Extended by MatChipListbox and MatChipGrid for different interaction patterns.\n */\n@Component({\n  selector: 'mat-chip-set',\n  template: `\n    <div class=\"mdc-evolution-chip-set__chips\" role=\"presentation\">\n      <ng-content></ng-content>\n    </div>\n  `,\n  styleUrl: 'chip-set.css',\n  host: {\n    'class': 'mat-mdc-chip-set mdc-evolution-chip-set',\n    '(keydown)': '_handleKeydown($event)',\n    '[attr.role]': 'role',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipSet implements AfterViewInit, OnDestroy {\n  protected _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  protected _changeDetectorRef = inject(ChangeDetectorRef);\n  private _dir = inject(Directionality, {optional: true});\n\n  /** Index of the last destroyed chip that had focus. */\n  private _lastDestroyedFocusedChipIndex: number | null = null;\n\n  /** Used to manage focus within the chip list. */\n  protected _keyManager: FocusKeyManager<MatChipAction>;\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** Role to use if it hasn't been overwritten by the user. */\n  protected _defaultRole = 'presentation';\n\n  /** Combined stream of all of the child chips' focus events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return this._getChipStream(chip => chip._onFocus);\n  }\n\n  /** Combined stream of all of the child chips' destroy events. */\n  get chipDestroyedChanges(): Observable<MatChipEvent> {\n    return this._getChipStream(chip => chip.destroyed);\n  }\n\n  /** Combined stream of all of the child chips' remove events. */\n  get chipRemovedChanges(): Observable<MatChipEvent> {\n    return this._getChipStream(chip => chip.removed);\n  }\n\n  /** Whether the chip set is disabled. */\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Whether the chip list contains chips or not. */\n  get empty(): boolean {\n    return !this._chips || this._chips.length === 0;\n  }\n\n  /** The ARIA role applied to the chip set. */\n  @Input()\n  get role(): string | null {\n    if (this._explicitRole) {\n      return this._explicitRole;\n    }\n\n    return this.empty ? null : this._defaultRole;\n  }\n\n  /** Tabindex of the chip set. */\n  @Input({\n    transform: (value: unknown) => (value == null ? 0 : numberAttribute(value)),\n  })\n  tabIndex: number = 0;\n\n  set role(value: string | null) {\n    this._explicitRole = value;\n  }\n  private _explicitRole: string | null = null;\n\n  /** Whether any of the chips inside of this chip-set has focus. */\n  get focused(): boolean {\n    return this._hasFocusedChip();\n  }\n\n  /** The chips that are part of this chip set. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true,\n  })\n  _chips: QueryList<MatChip>;\n\n  /** Flat list of all the actions contained within the chips. */\n  _chipActions = new QueryList<MatChipAction>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngAfterViewInit() {\n    this._setUpFocusManagement();\n    this._trackChipSetChanges();\n    this._trackDestroyedFocusedChip();\n  }\n\n  ngOnDestroy() {\n    this._keyManager?.destroy();\n    this._chipActions.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Checks whether any of the chips is focused. */\n  protected _hasFocusedChip() {\n    return this._chips && this._chips.some(chip => chip._hasFocus());\n  }\n\n  /** Syncs the chip-set's state with the individual chips. */\n  protected _syncChipsState() {\n    this._chips?.forEach(chip => {\n      chip._chipListDisabled = this._disabled;\n      chip._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Dummy method for subclasses to override. Base chip set cannot be focused. */\n  focus() {}\n\n  /** Handles keyboard events on the chip set. */\n  _handleKeydown(event: KeyboardEvent) {\n    if (this._originatesFromChip(event)) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  protected _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this._chips.length;\n  }\n\n  /**\n   * Removes the `tabindex` from the chip set and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the set from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  protected _allowFocusEscape() {\n    const previous = this._elementRef.nativeElement.tabIndex;\n\n    if (previous !== -1) {\n      // Set the tabindex directly on the element, instead of going through\n      // the data binding, because we aren't guaranteed that change detection\n      // will run quickly enough to allow focus to escape.\n      this._elementRef.nativeElement.tabIndex = -1;\n\n      // Note that this needs to be a `setTimeout`, because a `Promise.resolve`\n      // doesn't allow enough time for the focus to escape.\n      setTimeout(() => (this._elementRef.nativeElement.tabIndex = previous));\n    }\n  }\n\n  /**\n   * Gets a stream of events from all the chips within the set.\n   * The stream will automatically incorporate any newly-added chips.\n   */\n  protected _getChipStream<T, C extends MatChip = MatChip>(\n    mappingFunction: (chip: C) => Observable<T>,\n  ): Observable<T> {\n    return this._chips.changes.pipe(\n      startWith(null),\n      switchMap(() => merge(...(this._chips as QueryList<C>).map(mappingFunction))),\n    );\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  protected _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-mdc-chip')) {\n        return true;\n      }\n      currentElement = currentElement.parentElement;\n    }\n    return false;\n  }\n\n  /** Sets up the chip set's focus management logic. */\n  private _setUpFocusManagement() {\n    // Create a flat `QueryList` containing the actions of all of the chips.\n    // This allows us to navigate both within the chip and move to the next/previous\n    // one using the existing `ListKeyManager`.\n    this._chips.changes.pipe(startWith(this._chips)).subscribe((chips: QueryList<MatChip>) => {\n      const actions: MatChipAction[] = [];\n      chips.forEach(chip => chip._getActions().forEach(action => actions.push(action)));\n      this._chipActions.reset(actions);\n      this._chipActions.notifyOnChanges();\n    });\n\n    this._keyManager = new FocusKeyManager(this._chipActions)\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr')\n      .withHomeAndEnd()\n      .skipPredicate(action => this._skipPredicate(action));\n\n    // Keep the manager active index in sync so that navigation picks\n    // up from the current chip if the user clicks into the list directly.\n    this.chipFocusChanges.pipe(takeUntil(this._destroyed)).subscribe(({chip}) => {\n      const action = chip._getSourceAction(document.activeElement as Element);\n\n      if (action) {\n        this._keyManager.updateActiveItem(action);\n      }\n    });\n\n    this._dir?.change\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(direction => this._keyManager.withHorizontalOrientation(direction));\n  }\n\n  /**\n   * Determines if key manager should avoid putting a given chip action in the tab index. Skip\n   * non-interactive and disabled actions since the user can't do anything with them.\n   */\n  protected _skipPredicate(action: MatChipAction): boolean {\n    // Skip chips that the user cannot interact with. `mat-chip-set` does not permit focusing disabled\n    // chips.\n    return !action.isInteractive || action.disabled;\n  }\n\n  /** Listens to changes in the chip set and syncs up the state of the individual chips. */\n  private _trackChipSetChanges() {\n    this._chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => this._syncChipsState());\n      }\n\n      this._redirectDestroyedChipFocus();\n    });\n  }\n\n  /** Starts tracking the destroyed chips in order to capture the focused one. */\n  private _trackDestroyedFocusedChip() {\n    this.chipDestroyedChanges.pipe(takeUntil(this._destroyed)).subscribe((event: MatChipEvent) => {\n      const chipArray = this._chips.toArray();\n      const chipIndex = chipArray.indexOf(event.chip);\n\n      // If the focused chip is destroyed, save its index so that we can move focus to the next\n      // chip. We only save the index here, rather than move the focus immediately, because we want\n      // to wait until the chip is removed from the chip list before focusing the next one. This\n      // allows us to keep focus on the same index if the chip gets swapped out.\n      if (this._isValidIndex(chipIndex) && event.chip._hasFocus()) {\n        this._lastDestroyedFocusedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /**\n   * Finds the next appropriate chip to move focus to,\n   * if the currently-focused chip is destroyed.\n   */\n  private _redirectDestroyedChipFocus() {\n    if (this._lastDestroyedFocusedChipIndex == null) {\n      return;\n    }\n\n    if (this._chips.length) {\n      const newIndex = Math.min(this._lastDestroyedFocusedChipIndex, this._chips.length - 1);\n      const chipToFocus = this._chips.toArray()[newIndex];\n\n      if (chipToFocus.disabled) {\n        // If we're down to one disabled chip, move focus back to the set.\n        if (this._chips.length === 1) {\n          this.focus();\n        } else {\n          this._keyManager.setPreviousItemActive();\n        }\n      } else {\n        chipToFocus.focus();\n      }\n    } else {\n      this.focus();\n    }\n\n    this._lastDestroyedFocusedChipIndex = null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOWN_ARROW, hasModifierKey, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  booleanAttribute,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  DoCheck,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  inject,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm,\n  Validators,\n} from '@angular/forms';\nimport {_ErrorStateTracker, ErrorStateMatcher} from '../core';\nimport {MatFormFieldControl} from '../form-field';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatChipEvent} from './chip';\nimport {MatChipRow} from './chip-row';\nimport {MatChipSet} from './chip-set';\nimport {MatChipTextControl} from './chip-text-control';\n\n/** Change event object that is emitted when the chip grid value has changed. */\nexport class MatChipGridChange {\n  constructor(\n    /** Chip grid that emitted the event. */\n    public source: MatChipGrid,\n    /** Value of the chip grid when the event was emitted. */\n    public value: any,\n  ) {}\n}\n\n/**\n * An extension of the MatChipSet component used with MatChipRow chips and\n * the matChipInputFor directive.\n */\n@Component({\n  selector: 'mat-chip-grid',\n  template: `\n    <div class=\"mdc-evolution-chip-set__chips\" role=\"presentation\">\n      <ng-content></ng-content>\n    </div>\n  `,\n  styleUrl: 'chip-set.css',\n  host: {\n    'class': 'mat-mdc-chip-set mat-mdc-chip-grid mdc-evolution-chip-set',\n    '[attr.role]': 'role',\n    '[attr.tabindex]': '(disabled || (_chips && _chips.length === 0)) ? -1 : tabIndex',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[class.mat-mdc-chip-list-disabled]': 'disabled',\n    '[class.mat-mdc-chip-list-invalid]': 'errorState',\n    '[class.mat-mdc-chip-list-required]': 'required',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipGrid}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatChipGrid\n  extends MatChipSet\n  implements\n    AfterContentInit,\n    AfterViewInit,\n    ControlValueAccessor,\n    DoCheck,\n    MatFormFieldControl<any>,\n    OnDestroy\n{\n  ngControl = inject(NgControl, {optional: true, self: true})!;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-grid';\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  protected override _defaultRole = 'grid';\n  private _errorStateTracker: _ErrorStateTracker;\n\n  /**\n   * List of element ids to propagate to the chipInput's aria-describedby attribute.\n   */\n  private _ariaDescribedbyIds: string[] = [];\n\n  /**\n   * Function when touched. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onTouched = () => {};\n\n  /**\n   * Function when changed. Set as part of ControlValueAccessor implementation.\n   * @docs-private\n   */\n  _onChange: (value: any) => void = () => {};\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input({transform: booleanAttribute})\n  override get disabled(): boolean {\n    return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n  }\n  override set disabled(value: boolean) {\n    this._disabled = value;\n    this._syncChipsState();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput.id;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  override get empty(): boolean {\n    return (\n      (!this._chipInput || this._chipInput.empty) && (!this._chips || this._chips.length === 0)\n    );\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-grid has focus. */\n  override get focused(): boolean {\n    return this._chipInput.focused || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input({transform: booleanAttribute})\n  get required(): boolean {\n    return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n  }\n  set required(value: boolean) {\n    this._required = value;\n    this.stateChanges.next();\n  }\n  protected _required: boolean | undefined;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return !this.empty || this.focused;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n  set value(value: any) {\n    this._value = value;\n  }\n  protected _value: any[] = [];\n\n  /** An object used to control when error messages are shown. */\n  @Input()\n  get errorStateMatcher() {\n    return this._errorStateTracker.matcher;\n  }\n  set errorStateMatcher(value: ErrorStateMatcher) {\n    this._errorStateTracker.matcher = value;\n  }\n\n  /** Combined stream of all of the child chips' blur events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return this._getChipStream(chip => chip._onBlur);\n  }\n\n  /** Emits when the chip grid value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipGridChange> =\n    new EventEmitter<MatChipGridChange>();\n\n  /**\n   * Emits whenever the raw value of the chip-grid changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  @ContentChildren(MatChipRow, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true,\n  })\n  // We need an initializer here to avoid a TS error. The value will be set in `ngAfterViewInit`.\n  override _chips: QueryList<MatChipRow> = undefined!;\n\n  /**\n   * Emits whenever the component state changes and should cause the parent\n   * form-field to update. Implemented as part of `MatFormFieldControl`.\n   * @docs-private\n   */\n  readonly stateChanges = new Subject<void>();\n\n  /** Whether the chip grid is in an error state. */\n  get errorState() {\n    return this._errorStateTracker.errorState;\n  }\n  set errorState(value: boolean) {\n    this._errorStateTracker.errorState = value;\n  }\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n\n    const parentForm = inject(NgForm, {optional: true});\n    const parentFormGroup = inject(FormGroupDirective, {optional: true});\n    const defaultErrorStateMatcher = inject(ErrorStateMatcher);\n\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._errorStateTracker = new _ErrorStateTracker(\n      defaultErrorStateMatcher,\n      this.ngControl,\n      parentFormGroup,\n      parentForm,\n      this.stateChanges,\n    );\n  }\n\n  ngAfterContentInit() {\n    this.chipBlurChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n\n    merge(this.chipFocusChanges, this._chips.changes)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.stateChanges.next());\n  }\n\n  override ngAfterViewInit() {\n    super.ngAfterViewInit();\n\n    if (!this._chipInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('mat-chip-grid must be used in combination with matChipInputFor.');\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this.stateChanges.complete();\n  }\n\n  /** Associates an HTML input element with this chip grid. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n    this._chipInput.setDescribedByIds(this._ariaDescribedbyIds);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this.disabled && !this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first chip in this chip grid, or the associated input when there\n   * are no eligible chips.\n   */\n  override focus(): void {\n    if (this.disabled || this._chipInput.focused) {\n      return;\n    }\n\n    if (!this._chips.length || this._chips.first.disabled) {\n      // Delay until the next tick, because this can cause a \"changed after checked\"\n      // error if the input does something on focus (e.g. opens an autocomplete).\n      Promise.resolve().then(() => this._chipInput.focus());\n    } else {\n      const activeItem = this._keyManager.activeItem;\n\n      if (activeItem) {\n        activeItem.focus();\n      } else {\n        this._keyManager.setFirstItemActive();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    // We must keep this up to date to handle the case where ids are set\n    // before the chip input is registered.\n    this._ariaDescribedbyIds = ids;\n    this._chipInput?.setDescribedByIds(ids);\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  writeValue(value: any): void {\n    // The user is responsible for creating the child chips, so we just store the value.\n    this._value = value;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * @docs-private\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /** Refreshes the error state of the chip grid. */\n  updateErrorState() {\n    this._errorStateTracker.updateErrorState();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip grid. */\n  _blur() {\n    if (!this.disabled) {\n      // Check whether the focus moved to chip input.\n      // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n      // to chip input, do nothing.\n      // Timeout is needed to wait for the focus() event trigger on chip input.\n      setTimeout(() => {\n        if (!this.focused) {\n          this._propagateChanges();\n          this._markAsTouched();\n        }\n      });\n    }\n  }\n\n  /**\n   * Removes the `tabindex` from the chip grid and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the grid from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  protected override _allowFocusEscape() {\n    if (!this._chipInput.focused) {\n      super._allowFocusEscape();\n    }\n  }\n\n  /** Handles custom keyboard events. */\n  override _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const activeItem = this._keyManager.activeItem;\n\n    if (keyCode === TAB) {\n      if (\n        this._chipInput.focused &&\n        hasModifierKey(event, 'shiftKey') &&\n        this._chips.length &&\n        !this._chips.last.disabled\n      ) {\n        event.preventDefault();\n\n        if (activeItem) {\n          this._keyManager.setActiveItem(activeItem);\n        } else {\n          this._focusLastChip();\n        }\n      } else {\n        // Use the super method here since it doesn't check for the input\n        // focused state. This allows focus to escape if there's only one\n        // disabled chip left in the list.\n        super._allowFocusEscape();\n      }\n    } else if (!this._chipInput.focused) {\n      // The up and down arrows are supposed to navigate between the individual rows in the grid.\n      // We do this by filtering the actions down to the ones that have the same `_isPrimary`\n      // flag as the active action and moving focus between them ourseles instead of delegating\n      // to the key manager. For more information, see #29359 and:\n      // https://www.w3.org/WAI/ARIA/apg/patterns/grid/examples/layout-grids/#ex2_label\n      if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && activeItem) {\n        const eligibleActions = this._chipActions.filter(\n          action => action._isPrimary === activeItem._isPrimary && !this._skipPredicate(action),\n        );\n        const currentIndex = eligibleActions.indexOf(activeItem);\n        const delta = event.keyCode === UP_ARROW ? -1 : 1;\n\n        event.preventDefault();\n        if (currentIndex > -1 && this._isValidIndex(currentIndex + delta)) {\n          this._keyManager.setActiveItem(eligibleActions[currentIndex + delta]);\n        }\n      } else {\n        super._handleKeydown(event);\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  _focusLastChip() {\n    if (this._chips.length) {\n      this._chips.last.focus();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(): void {\n    const valueToEmit = this._chips.length ? this._chips.toArray().map(chip => chip.value) : [];\n    this._value = valueToEmit;\n    this.change.emit(new MatChipGridChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Mark the field as touched */\n  private _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {BACKSPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {_IdGenerator} from '@angular/cdk/a11y';\nimport {MatFormField, MAT_FORM_FIELD} from '../form-field';\nimport {MatChipsDefaultOptions, MAT_CHIPS_DEFAULT_OPTIONS} from './tokens';\nimport {MatChipGrid} from './chip-grid';\nimport {MatChipTextControl} from './chip-text-control';\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /**\n   * The native `<input>` element that the event is being fired for.\n   * @deprecated Use `MatChipInputEvent#chipInput.inputElement` instead.\n   * @breaking-change 13.0.0 This property will be removed.\n   */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n\n  /** Reference to the chip input that emitted the event. */\n  chipInput: MatChipInput;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of a `<mat-chip-grid>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    // TODO: eventually we should remove `mat-input-element` from here since it comes from the\n    // non-MDC version of the input. It's currently being kept for backwards compatibility, because\n    // the MDC chips were landed initially with it.\n    'class': 'mat-mdc-chip-input mat-mdc-input-element mdc-text-field__input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipGrid && _chipGrid.ngControl ? _chipGrid.ngControl.invalid : null',\n    '[attr.aria-required]': '_chipGrid && _chipGrid.required || null',\n    '[attr.required]': '_chipGrid && _chipGrid.required || null',\n  },\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges, OnDestroy {\n  protected _elementRef = inject<ElementRef<HTMLInputElement>>(ElementRef);\n\n  /** Whether the control is focused. */\n  focused: boolean = false;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  get chipGrid(): MatChipGrid {\n    return this._chipGrid;\n  }\n  set chipGrid(value: MatChipGrid) {\n    if (value) {\n      this._chipGrid = value;\n      this._chipGrid.registerInput(this);\n    }\n  }\n  private _chipGrid: MatChipGrid;\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input({alias: 'matChipInputAddOnBlur', transform: booleanAttribute})\n  addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: readonly number[] | ReadonlySet<number>;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  readonly chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = inject(_IdGenerator).getId('mat-mdc-chip-list-input-');\n\n  /** Whether the input is disabled. */\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled || (this._chipGrid && this._chipGrid.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n  }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    return !this.inputElement.value;\n  }\n\n  /** The native input element to which this directive is attached. */\n  readonly inputElement!: HTMLInputElement;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const defaultOptions = inject<MatChipsDefaultOptions>(MAT_CHIPS_DEFAULT_OPTIONS);\n    const formField = inject<MatFormField>(MAT_FORM_FIELD, {optional: true});\n\n    this.inputElement = this._elementRef.nativeElement as HTMLInputElement;\n    this.separatorKeyCodes = defaultOptions.separatorKeyCodes;\n\n    if (formField) {\n      this.inputElement.classList.add('mat-mdc-form-field-input-control');\n    }\n  }\n\n  ngOnChanges() {\n    this._chipGrid.stateChanges.next();\n  }\n\n  ngOnDestroy(): void {\n    this.chipEnd.complete();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event: KeyboardEvent) {\n    if (this.empty && event.keyCode === BACKSPACE) {\n      // Ignore events where the user is holding down backspace\n      // so that we don't accidentally remove too many chips.\n      if (!event.repeat) {\n        this._chipGrid._focusLastChip();\n      }\n      event.preventDefault();\n    } else {\n      this._emitChipEnd(event);\n    }\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipGrid.focused) {\n      this._chipGrid._blur();\n    }\n    this._chipGrid.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!event || (this._isSeparatorKey(event) && !event.repeat)) {\n      this.chipEnd.emit({\n        input: this.inputElement,\n        value: this.inputElement.value,\n        chipInput: this,\n      });\n\n      event?.preventDefault();\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipGrid.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this.inputElement.focus();\n  }\n\n  /** Clears the input */\n  clear(): void {\n    this.inputElement.value = '';\n  }\n\n  setDescribedByIds(ids: string[]): void {\n    const element = this._elementRef.nativeElement;\n\n    // Set the value directly in the DOM since this binding\n    // is prone to \"changed after checked\" errors.\n    if (ids.length) {\n      element.setAttribute('aria-describedby', ids.join(' '));\n    } else {\n      element.removeAttribute('aria-describedby');\n    }\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '../core';\nimport {MatChip} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './tokens';\nimport {MatChipEditInput} from './chip-edit-input';\nimport {MatChipGrid} from './chip-grid';\nimport {MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip-icons';\nimport {MatChipInput} from './chip-input';\nimport {MatChipListbox} from './chip-listbox';\nimport {MatChipRow} from './chip-row';\nimport {MatChipOption} from './chip-option';\nimport {MatChipSet} from './chip-set';\nimport {MatChipAction} from './chip-action';\n\nconst CHIP_DECLARATIONS = [\n  MatChip,\n  MatChipAvatar,\n  MatChipEditInput,\n  MatChipGrid,\n  MatChipInput,\n  MatChipListbox,\n  MatChipOption,\n  MatChipRemove,\n  MatChipRow,\n  MatChipSet,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule, MatChipAction, CHIP_DECLARATIONS],\n  exports: [MatCommonModule, CHIP_DECLARATIONS],\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER],\n      } as MatChipsDefaultOptions,\n    },\n  ],\n})\nexport class MatChipsModule {}\n","export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n","export const isBrowser =\r\n  // deno has the global `window` defined\r\n  typeof window !== 'undefined' &&\r\n  // make sure HTML element is available\r\n  typeof HTMLElement !== 'undefined' &&\r\n  // make sure document is defined\r\n  !!window.document;\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\n\r\nexport const wnd = (isBrowser ? window : {}) as typeof window;\r\nexport const mathMax = Math.max;\r\nexport const mathMin = Math.min;\r\nexport const mathRound = Math.round;\r\nexport const mathFloor = Math.floor;\r\nexport const mathCeil = Math.ceil;\r\nexport const mathAbs = Math.abs;\r\nexport const mathSign = Math.sign;\r\nexport const cAF = wnd.cancelAnimationFrame;\r\nexport const rAF = wnd.requestAnimationFrame;\r\nexport const setT = wnd.setTimeout;\r\nexport const clearT = wnd.clearTimeout;\r\n","import { wnd } from '../utils/alias';\r\n\r\nconst getApi = <T>(name: string) =>\r\n  (typeof wnd[name as keyof typeof wnd] !== 'undefined'\r\n    ? wnd[name as keyof typeof wnd]\r\n    : undefined) as T;\r\n\r\nexport const MutationObserverConstructor = getApi<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  getApi<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = getApi<typeof ResizeObserver>('ResizeObserver');\r\nexport const scrollT = getApi<new (constructor: unknown) => AnimationTimeline>('ScrollTimeline');\r\n","import type { PlainObject } from '~/typings';\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : Object.prototype.toString\r\n        .call(obj)\r\n        .replace(/^\\[object (.+)\\]$/, '$1')\r\n        .toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): obj is object =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> =>\r\n  !!obj && obj.constructor === Object;\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => obj instanceof HTMLElement;\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => obj instanceof Element;\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isArrayLike, isString } from './types';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | false | null | undefined;\r\n\r\nexport function each<T extends Array<unknown> | ReadonlyArray<unknown>>(\r\n  array: T,\r\n  callback: (\r\n    value: T extends Array<infer V> | ReadonlyArray<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends ArrayLike<unknown>>(\r\n  arrayLikeObject: T,\r\n  callback: (\r\n    value: T extends ArrayLike<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends PlainObject>(\r\n  obj: T,\r\n  callback: (value: any, key: string, source: T) => boolean | unknown\r\n): T;\r\nexport function each(\r\n  source: Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | PlainObject,\r\n  callback: (value: any, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | Set<unknown> | PlainObject {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    // cant use support func keys here due to circular dep\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns true when the passed item is in the passed array and false otherwise.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @returns Whether the item is in the array.\r\n */\r\nexport const inArray = <T = any>(arr: T[] | readonly T[], item: T): boolean =>\r\n  arr.indexOf(item) >= 0;\r\n\r\n/**\r\n * Concats two arrays and returns an new array without modifying any of the passed arrays.\r\n * @param a Array A.\r\n * @param b Array B.\r\n * @returns A new array which has the entries of both arrays.\r\n */\r\nexport const concat = <T>(a: T[] | ReadonlyArray<T>, b: T[] | ReadonlyArray<T>): T[] => a.concat(b);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => Array.from(arr || []);\r\n\r\n/**\r\n * Creates an array if the passed value is not an array, or returns the value if it is.\r\n * If the passed value is an array like structure and not a string it will be converted into an array.\r\n * @param value The value.\r\n * @returns An array which represents the passed value(s).\r\n */\r\nexport const createOrKeepArray = <T>(value: T | T[] | ArrayLike<T>): T[] => {\r\n  if (isArray(value)) {\r\n    return value;\r\n  }\r\n  return !isString(value) && isArrayLike(value) ? from(value) : [value];\r\n};\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean => !!array && !array.length;\r\n\r\n/**\r\n * Deduplicates all items of the array.\r\n * @param array The array to be deduplicated.\r\n * @returns The deduplicated array.\r\n */\r\nexport const deduplicateArray = <T extends any[]>(array: T): T => from(new Set(array)) as T;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => (fn ? fn.apply(undefined, args || []) : true); // return true when fn is falsy to not break the loop\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n","export const strPaddingTop = 'paddingTop';\r\nexport const strPaddingRight = 'paddingRight';\r\nexport const strPaddingLeft = 'paddingLeft';\r\nexport const strPaddingBottom = 'paddingBottom';\r\nexport const strMarginLeft = 'marginLeft';\r\nexport const strMarginRight = 'marginRight';\r\nexport const strMarginBottom = 'marginBottom';\r\nexport const strOverflowX = 'overflowX';\r\nexport const strOverflowY = 'overflowY';\r\nexport const strWidth = 'width';\r\nexport const strHeight = 'height';\r\nexport const strVisible = 'visible';\r\nexport const strHidden = 'hidden';\r\nexport const strScroll = 'scroll';\r\n\r\nexport const capitalizeFirstLetter = (str: string | number | false | null | undefined): string => {\r\n  const finalStr = String(str || '');\r\n  return finalStr ? finalStr[0].toUpperCase() + finalStr.slice(1) : '';\r\n};\r\n","import type { WH } from '../dom/dimensions';\r\nimport type { XY } from '../dom/offset';\r\nimport type { TRBL } from '../dom/style';\r\nimport type { PlainObject } from '~/typings';\r\nimport { each } from './array';\r\nimport { mathRound } from './alias';\r\nimport { strHeight, strWidth } from './strings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T> | ReadonlyArray<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: Partial<WH<T>>, b?: Partial<WH<T>>) =>\r\n  equal<Partial<WH<T>>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: Partial<XY<T>>, b?: Partial<XY<T>>) =>\r\n  equal<Partial<XY<T>>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, [strWidth, strHeight], round && ((value) => mathRound(value)));\r\n","export const noop = () => {}; // eslint-disable-line\r\n","import { isNumber, isFunction } from './types';\r\nimport { from } from './array';\r\nimport { rAF, cAF, setT, clearT } from './alias';\r\nimport { noop } from './noop';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Defines the calling on the leading edge of the timeout.\r\n   */\r\n  _leading?: boolean;\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const bind = <A extends any[], B extends any[], R>(\r\n  fn: (...args: [...A, ...B]) => R,\r\n  ...args: A\r\n): ((...args: B) => R) => fn.bind(0, ...args);\r\n\r\n/**\r\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\r\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\r\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\r\n */\r\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(() => callback(), isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  const { _timeout, _maxDelay, _leading, _mergeParams } = options || {};\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let leadingInvoked: boolean | undefined;\r\n  let clear = noop;\r\n\r\n  const invokeFunctionToDebounce = function (args: Parameters<FunctionToDebounce>) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    leadingInvoked = maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n      let timeoutId: number | undefined;\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      if (_leading && !leadingInvoked) {\r\n        boundInvoke();\r\n        leadingInvoked = true;\r\n        // @ts-ignore\r\n        timeoutId = setTimeoutFn(() => (leadingInvoked = undefined), finalTimeout);\r\n      } else {\r\n        // @ts-ignore\r\n        timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n\r\n        if (hasMaxWait && !maxTimeoutId) {\r\n          maxTimeoutId = setT(flush, finalMaxWait as number);\r\n        }\r\n      }\r\n\r\n      clear = () => clearTimeoutFn(timeoutId as number);\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isFunction, isPlainObject, isNull } from './types';\r\nimport { each } from './array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(source, (_, key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && isPlainObject(copy)) {\r\n        const src = target[key as keyof T];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key as keyof T] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key as keyof T] = copyIsArray ? copy.slice() : copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\nexport const removeUndefinedProperties = <T extends PlainObject>(target: T, deep?: boolean): T =>\r\n  each(assignDeep({}, target), (value, key, copy) => {\r\n    if (value === undefined) {\r\n      delete copy[key];\r\n    } else if (deep && value && isPlainObject(value)) {\r\n      copy[key as keyof typeof copy] = removeUndefinedProperties(value, deep) as any;\r\n    }\r\n  });\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => !keys(obj).length;\r\n","import { mathMax, mathMin } from './alias';\r\n\r\n/**\r\n * Caps the passed number between the `min` and `max` bounds.\r\n * @param min The min bound.\r\n * @param max The max bound.\r\n * @param number The number to be capped.\r\n * @returns The capped number between min and max.\r\n */\r\nexport const capNumber = (min: number, max: number, number: number) =>\r\n  mathMax(min, mathMin(max, number));\r\n","import type { HTMLElementTarget } from './types';\r\nimport { bind, deduplicateArray, each, from, isArray } from '../utils';\r\n\r\nexport type AttributeElementTarget = HTMLElementTarget | Element;\r\n\r\nexport type DomTokens = string | string[] | false | null | undefined | void;\r\n\r\nexport const getDomTokensArray = (tokens: DomTokens) =>\r\n  deduplicateArray((isArray(tokens) ? tokens : (tokens || '').split(' ')).filter((token) => token));\r\n\r\n/**\r\n * Gets a attribute with the given attribute of the given element.\r\n * @param elm The element of which the attribute shall be get.\r\n * @param attrName The attribute name which shall be get.\r\n * @returns The attribute value or `null` when the attribute is not set or `false` if the element is undefined.\r\n */\r\nexport const getAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.getAttribute(attrName);\r\n\r\n/**\r\n * Returns whether the given attribute exists on the given element.\r\n * @param elm The element.\r\n * @param attrName The attribute.\r\n * @returns A Truthy value indicates a present attrubte.\r\n */\r\nexport const hasAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.hasAttribute(attrName);\r\n\r\n/**\r\n * Sets the given attributes to the given element.\r\n * @param elm The element of which the attributes shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const setAttrs = (\r\n  elm: AttributeElementTarget,\r\n  attrNames: string | string[],\r\n  value: string | number | false | null | undefined\r\n) => {\r\n  each(getDomTokensArray(attrNames), (attrName) => {\r\n    elm && elm.setAttribute(attrName, String(value || ''));\r\n  });\r\n};\r\n\r\n/**\r\n * Removes the given attributes from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const removeAttrs = (elm: AttributeElementTarget, attrNames: string | string[]): void => {\r\n  each(getDomTokensArray(attrNames), (attrName) => elm && elm.removeAttribute(attrName));\r\n};\r\n\r\nexport const domTokenListAttr = (elm: AttributeElementTarget, attrName: string) => {\r\n  const initialArr = getDomTokensArray(getAttr(elm, attrName));\r\n  const setElmAttr = bind(setAttrs, elm, attrName);\r\n  const domTokenListOperation = (operationTokens: DomTokens, operation: 'add' | 'delete') => {\r\n    const initialArrSet = new Set(initialArr);\r\n    each(getDomTokensArray(operationTokens), (token) => {\r\n      initialArrSet[operation](token);\r\n    });\r\n    return from(initialArrSet).join(' ');\r\n  };\r\n\r\n  return {\r\n    _remove: (removeTokens: DomTokens) => setElmAttr(domTokenListOperation(removeTokens, 'delete')),\r\n    _add: (addTokens: DomTokens) => setElmAttr(domTokenListOperation(addTokens, 'add')),\r\n    _has: (hasTokens: DomTokens) => {\r\n      const tokenSet = getDomTokensArray(hasTokens);\r\n      return tokenSet.reduce(\r\n        (boolean, token) => boolean && initialArr.includes(token),\r\n        tokenSet.length > 0\r\n      );\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be removed.\r\n * @param value The value which shall be removed.\r\n */\r\nexport const removeAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): (() => void) => {\r\n  domTokenListAttr(elm, attrName)._remove(value);\r\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n  return bind(addAttrClass, elm, attrName, value);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds value to it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added.\r\n * @param value The value which shall be added.\r\n */\r\nexport const addAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): (() => void) => {\r\n  domTokenListAttr(elm, attrName)._add(value);\r\n  return bind(removeAttrClass, elm, attrName, value);\r\n};\r\n\r\nexport const addRemoveAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens,\r\n  add?: boolean\r\n) => (add ? addAttrClass : removeAttrClass)(elm, attrName, value);\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): boolean => domTokenListAttr(elm, attrName)._has(value);\r\n","import type { AttributeElementTarget, DomTokens } from './attribute';\r\nimport { each, from } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { domTokenListAttr } from './attribute';\r\n\r\nconst createDomTokenListClass = (elm: AttributeElementTarget) => domTokenListAttr(elm, 'class');\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: AttributeElementTarget, className: DomTokens): boolean =>\r\n  createDomTokenListClass(elm)._has(className);\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: AttributeElementTarget, className: DomTokens): void => {\r\n  createDomTokenListClass(elm)._remove(className);\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: AttributeElementTarget, className: DomTokens): (() => void) => {\r\n  createDomTokenListClass(elm)._add(className);\r\n  return bind(removeClass, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (\r\n  classNameA: string | false | null | undefined,\r\n  classNameB: string | false | null | undefined\r\n) => {\r\n  const set = new Set<string>(classNameA ? classNameA.split(' ') : []);\r\n\r\n  each(classNameB ? classNameB.split(' ') : [], (className) => {\r\n    set.has(className) ? set.delete(className) : set.add(className);\r\n  });\r\n\r\n  return from(set);\r\n};\r\n","import type { NodeElementTarget } from './types';\r\nimport { isElement } from '../utils/types';\r\nimport { push, from } from '../utils/array';\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nexport const find = (selector: string, elm?: NodeElementTarget): Element[] => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n  return rootElm ? from(rootElm.querySelectorAll(selector)) : [];\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nexport const findFirst = (selector: string, elm?: NodeElementTarget): NodeElementTarget => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n  return rootElm && rootElm.querySelector(selector);\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nexport const is = (elm: NodeElementTarget, selector: string): boolean =>\r\n  isElement(elm) && elm.matches(selector);\r\n\r\nexport const isBodyElement = (elm: NodeElementTarget) => is(elm, 'body'); // don't do targetElement === ownerDocument.body in case initialization happens in memory\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nexport const children = (elm: NodeElementTarget, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nexport const contents = (elm: NodeElementTarget): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nexport const parent = (elm: NodeElementTarget): NodeElementTarget => elm && elm.parentElement;\r\n\r\n/**\r\n * Returns the closest element to the passed element which matches the given selector.\r\n * @param elm The element.\r\n * @param selector The selector.\r\n * @returns The closest element to the passed element which matches the given selector.\r\n */\r\nexport const closest = (elm: NodeElementTarget, selector: string): NodeElementTarget =>\r\n  isElement(elm) && elm.closest(selector);\r\n\r\n/**\r\n * Gets the focused element of the passed or default document.\r\n * @returns The focused element of the passed document.\r\n */\r\nexport const getFocusedElement = (doc?: Document) => (doc || document).activeElement;\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nexport const liesBetween = (\r\n  elm: NodeElementTarget,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n  const deepBoundaryIsValid =\r\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        (deepBoundaryIsValid &&\r\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\r\n            closestHighBoundaryElm)\r\n    : false;\r\n};\r\n","import type { NodeElementTarget, NodeElementTargetCollection } from './types';\r\nimport { createOrKeepArray, each } from '../utils/array';\r\nimport { parent } from './traversal';\r\nimport { bind } from '../utils';\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeElementTargetCollection): void => {\r\n  each(createOrKeepArray(nodes), (node) => {\r\n    const parentElm = parent(node);\r\n    node && parentElm && parentElm.removeChild(node);\r\n  });\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const appendChildren = (node: NodeElementTarget, children: NodeElementTargetCollection) =>\r\n  bind(\r\n    removeElements,\r\n    node &&\r\n      children &&\r\n      each(createOrKeepArray(children), (child) => {\r\n        child && node.appendChild(child);\r\n      })\r\n  );\r\n","import { each } from '../utils/array';\r\nimport { setAttrs } from './attribute';\r\nimport { contents } from './traversal';\r\nimport { removeElements } from './manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  setAttrs(div, 'class', classNames);\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import type { PlainObject, StyleObject, StyleObjectKey, StyleObjectValue } from '~/typings';\r\nimport type { XY } from './offset';\r\nimport type { HTMLElementTarget } from './types';\r\nimport { wnd } from '../utils/alias';\r\nimport { each, from } from '../utils/array';\r\nimport { isString, isNumber, isObject, isNull, isBoolean } from '../utils/types';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst getCSSVal = (computedStyle: CSSStyleDeclaration, prop: StyleObjectKey): string =>\r\n  computedStyle.getPropertyValue(prop) || computedStyle[prop as any] || '';\r\n\r\nconst validFiniteNumber = (number: number) => {\r\n  const notNaN = number || 0;\r\n  return isFinite(notNaN) ? notNaN : 0;\r\n};\r\n\r\nconst parseToZeroOrNumber = (value?: string): number => validFiniteNumber(parseFloat(value || ''));\r\n\r\nexport const roundCssNumber = (value: number) => Math.round(value * 10000) / 10000;\r\n\r\nexport const ratioToCssPercent = (ratio: number) =>\r\n  `${roundCssNumber(validFiniteNumber(ratio) * 100)}%`;\r\n\r\nexport const numberToCssPx = (number: number) => `${roundCssNumber(validFiniteNumber(number))}px`;\r\n\r\nexport function setStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: StyleObject | false | null | undefined\r\n): void {\r\n  elm &&\r\n    styles &&\r\n    each(styles, (rawValue: StyleObjectValue, name) => {\r\n      try {\r\n        const elmStyle = elm.style;\r\n        const value =\r\n          isNull(rawValue) || isBoolean(rawValue)\r\n            ? ''\r\n            : isNumber(rawValue)\r\n            ? numberToCssPx(rawValue)\r\n            : rawValue;\r\n\r\n        if (name.indexOf('--') === 0) {\r\n          elmStyle.setProperty(name, value);\r\n        } else {\r\n          elmStyle[name as any] = value;\r\n        }\r\n      } catch {}\r\n    });\r\n}\r\n\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey>,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>>;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): string;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey> | StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>> | string {\r\n  const getSingleStyle = isString(styles);\r\n  let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n\r\n  if (elm) {\r\n    const computedStyle = wnd.getComputedStyle(elm, pseudoElm) || elm.style;\r\n    getStylesResult = getSingleStyle\r\n      ? getCSSVal(computedStyle, styles)\r\n      : from(styles).reduce((result, key) => {\r\n          result[key] = getCSSVal(computedStyle, key);\r\n          return result;\r\n        }, getStylesResult as PlainObject);\r\n  }\r\n  return getStylesResult;\r\n}\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElementTarget,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}` as StyleObjectKey;\r\n  const right = `${finalPrefix}right${finalSuffix}` as StyleObjectKey;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}` as StyleObjectKey;\r\n  const left = `${finalPrefix}left${finalSuffix}` as StyleObjectKey;\r\n  const result = getStyles(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n\r\nexport const getTrasformTranslateValue = (\r\n  value: string | number | XY<string | number>,\r\n  isHorizontal?: boolean\r\n) =>\r\n  `translate${\r\n    isObject(value) ? `(${value.x},${value.y})` : `${isHorizontal ? 'X' : 'Y'}(${value})`\r\n  }`;\r\n","import type { HTMLElementTarget } from './types';\r\nimport { getStyles } from './style';\r\nimport { mathRound, wnd } from '../utils/alias';\r\nimport { bind } from '../utils/function';\r\nimport { strHeight, strWidth } from '../utils/strings';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\nconst getElmWidthHeightProperty = <E extends HTMLElement | Window>(\r\n  property: E extends HTMLElement ? 'client' | 'offset' | 'scroll' : 'inner',\r\n  elm: E | false | null | undefined\r\n): Readonly<WH> =>\r\n  elm\r\n    ? {\r\n        w: (elm as any)[`${property}Width`],\r\n        h: (elm as any)[`${property}Height`],\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const getWindowSize = (customWnd?: Window): Readonly<WH> =>\r\n  getElmWidthHeightProperty('inner', customWnd || wnd);\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const getOffsetSize = bind(getElmWidthHeightProperty<HTMLElement>, 'offset') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const getClientSize = bind(getElmWidthHeightProperty<HTMLElement>, 'client') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const getScrollSize = bind(getElmWidthHeightProperty<HTMLElement>, 'scroll') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const getFractionalSize = (elm: HTMLElementTarget): Readonly<WH> => {\r\n  const cssWidth = parseFloat(getStyles(elm, strWidth)) || 0;\r\n  const cssHeight = parseFloat(getStyles(elm, strHeight)) || 0;\r\n  return {\r\n    w: cssWidth - mathRound(cssWidth),\r\n    h: cssHeight - mathRound(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElementTarget): boolean =>\r\n  !!elm && elementHasDimensions(elm);\r\n\r\n/**\r\n * Determines whether the passed DOM Rect has any dimensions.\r\n */\r\nexport const domRectHasDimensions = (rect?: DOMRectReadOnly | false | null) =>\r\n  !!(rect && (rect[strHeight] || rect[strWidth]));\r\n\r\n/**\r\n * Determines whether current DOM Rect has appeared according the the previous dom rect..\r\n * @param currContentRect The current DOM Rect.\r\n * @param prevContentRect The previous DOM Rect.\r\n * @returns Whether the dom rect appeared.\r\n */\r\nexport const domRectAppeared = (\r\n  currContentRect: DOMRectReadOnly | false | null | undefined,\r\n  prevContentRect: DOMRectReadOnly | false | null | undefined\r\n) => {\r\n  const rectHasDimensions = domRectHasDimensions(currContentRect);\r\n  const rectHadDimensions = domRectHasDimensions(prevContentRect);\r\n  return !rectHadDimensions && rectHasDimensions;\r\n};\r\n","import type { DomTokens } from './attribute';\r\nimport { each, runEachAndClear } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { keys } from '../utils';\r\nimport { getDomTokensArray } from './attribute';\r\n\r\nexport interface EventListenerOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\nexport type EventListenerTarget = EventTarget | false | null | undefined;\r\n\r\nexport type EventListenerMap = {\r\n  [eventNames: string]: ((event: any) => any) | false | null | undefined;\r\n};\r\n\r\n/**\r\n * Removes the passed event listener for the passed event names with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const removeEventListener = <T extends Event = Event>(\r\n  target: EventListenerTarget,\r\n  eventNames: DomTokens,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(getDomTokensArray(eventNames), (eventName) => {\r\n    target && target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const addEventListener = <T extends Event = Event>(\r\n  target: EventListenerTarget,\r\n  eventNames: DomTokens,\r\n  listener: ((event: T) => any) | false | null | undefined,\r\n  options?: EventListenerOptions\r\n): (() => void) => {\r\n  const passive = (options && options._passive) ?? true;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const nativeOptions: AddEventListenerOptions = {\r\n    passive,\r\n    capture,\r\n  };\r\n\r\n  return bind(\r\n    runEachAndClear,\r\n    getDomTokensArray(eventNames).map((eventName) => {\r\n      const finalListener = (\r\n        once\r\n          ? (evt: T) => {\r\n              removeEventListener(target, eventName, finalListener, capture);\r\n              listener && listener(evt);\r\n            }\r\n          : listener\r\n      ) as EventListener;\r\n\r\n      target && target.addEventListener(eventName, finalListener, nativeOptions);\r\n      return bind(removeEventListener, target, eventName, finalListener, capture);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * Adds the passed event listeners for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventListenerMap A map which descirbes the event names and event listeners to be added.\r\n * @param options The options of the added listeners.\r\n */\r\nexport const addEventListeners = (\r\n  target: EventListenerTarget,\r\n  eventListenerMap: EventListenerMap,\r\n  options?: EventListenerOptions\r\n): (() => void) =>\r\n  bind(\r\n    runEachAndClear,\r\n    keys(eventListenerMap).map((eventNames) =>\r\n      addEventListener(target, eventNames, eventListenerMap[eventNames], options)\r\n    )\r\n  );\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import type { XY } from './offset';\r\nimport type { WH } from './dimensions';\r\nimport { capNumber, isNumber, mathAbs, mathSign } from '../utils';\r\n\r\nexport interface ScrollCoordinates {\r\n  /** The start (origin) scroll coordinates for each axis. */\r\n  _start: XY<number>;\r\n  /** The end scroll coordinates for each axis. */\r\n  _end: XY<number>;\r\n}\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const scrollElementTo = (\r\n  elm: HTMLElement,\r\n  position: Partial<XY<number | false | null | undefined>> | number | false | null | undefined\r\n): void => {\r\n  const { x, y } = isNumber(position) ? { x: position, y: position } : position || {};\r\n  isNumber(x) && (elm.scrollLeft = x);\r\n  isNumber(y) && (elm.scrollTop = y);\r\n};\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const getElementScroll = (elm: HTMLElement): Readonly<XY> => ({\r\n  x: elm.scrollLeft,\r\n  y: elm.scrollTop,\r\n});\r\n\r\n/**\r\n * Scroll Coordinates which are 0.\r\n */\r\nexport const getZeroScrollCoordinates = (): ScrollCoordinates => ({\r\n  _start: { x: 0, y: 0 },\r\n  _end: { x: 0, y: 0 },\r\n});\r\n\r\n/**\r\n * Sanatizes raw scroll coordinates.\r\n * The passed `overflowAmount` is used as the \"max\" value for each axis if the sign of the raw max value is not `0`.\r\n * Makes sure that each axis has `0` either in the start or end coordinates.\r\n * @param rawScrollCoordinates The raw scroll coordinates.\r\n * @param overflowAmount The overflow amount.\r\n * @returns\r\n */\r\nexport const sanitizeScrollCoordinates = (\r\n  rawScrollCoordinates: ScrollCoordinates,\r\n  overflowAmount: WH<number>\r\n) => {\r\n  const { _start, _end } = rawScrollCoordinates;\r\n  const { w, h } = overflowAmount;\r\n  const sanitizeAxis = (start: number, end: number, amount: number) => {\r\n    let newStart = mathSign(start) * amount;\r\n    let newEnd = mathSign(end) * amount;\r\n\r\n    if (newStart === newEnd) {\r\n      const startAbs = mathAbs(start);\r\n      const endAbs = mathAbs(end);\r\n\r\n      newEnd = startAbs > endAbs ? 0 : newEnd;\r\n      newStart = startAbs < endAbs ? 0 : newStart;\r\n    }\r\n\r\n    // in doubt set start to 0\r\n    newStart = newStart === newEnd ? 0 : newStart;\r\n\r\n    return [newStart + 0, newEnd + 0] as const; // \"+ 0\" prevents \"-0\" to be in the result\r\n  };\r\n\r\n  const [startX, endX] = sanitizeAxis(_start.x, _end.x, w);\r\n  const [startY, endY] = sanitizeAxis(_start.y, _end.y, h);\r\n\r\n  return {\r\n    _start: {\r\n      x: startX,\r\n      y: startY,\r\n    },\r\n    _end: {\r\n      x: endX,\r\n      y: endY,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Returns whether the passed scroll coordinates represent the browsers default scroll direction.\r\n * For the default scroll direction the following must be true:\r\n * 1. Start value is `0`.\r\n * 2. End value <= Start value.\r\n * @param scrollCoordinates The scroll coordinates.\r\n */\r\nexport const isDefaultDirectionScrollCoordinates = ({\r\n  _start,\r\n  _end,\r\n}: ScrollCoordinates): XY<boolean> => {\r\n  const getAxis = (start: number, end: number) => start === 0 && start <= end;\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x),\r\n    y: getAxis(_start.y, _end.y),\r\n  };\r\n};\r\n\r\n/**\r\n * Gets the current scroll percent between 0..1 for each axis.\r\n * @param scrollCoordinates The scroll coordinates.\r\n * @param currentScroll The current scroll position of the element.\r\n */\r\nexport const getScrollCoordinatesPercent = (\r\n  { _start, _end }: ScrollCoordinates,\r\n  currentScroll: XY<number>\r\n) => {\r\n  const getAxis = (start: number, end: number, current: number) =>\r\n    capNumber(0, 1, (start - current) / (start - end) || 0);\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x, currentScroll.x),\r\n    y: getAxis(_start.y, _end.y, currentScroll.y),\r\n  };\r\n};\r\n\r\n/**\r\n * Gets the scroll position of the given percent.\r\n * @param scrollCoordinates The scroll coordinates.\r\n * @param percent The percentage of the scroll.\r\n */\r\nexport const getScrollCoordinatesPosition = (\r\n  { _start, _end }: ScrollCoordinates,\r\n  percent: XY<number>\r\n) => {\r\n  const getAxis = (start: number, end: number, p: number) => start + (end - start) * p;\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x, percent.x),\r\n    y: getAxis(_start.y, _end.y, percent.y),\r\n  };\r\n};\r\n","import type { NodeElementTarget } from './types';\r\n\r\nexport const focusElement = (element: NodeElementTarget) => {\r\n  if (element && (element as HTMLElement).focus) {\r\n    (element as HTMLElement).focus({ preventScroll: true });\r\n  }\r\n};\r\n","import { isBoolean, isFunction, isString } from './utils/types';\r\nimport { keys } from './utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear, createOrKeepArray } from './utils/array';\r\nimport { bind } from './utils/function';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(createOrKeepArray(listener), callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = (\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure?:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener((currListener) => {\r\n        isFunction(currListener) && eventSet.add(currListener);\r\n      }, listenerOrPure as Exclude<typeof listenerOrPure, boolean>);\r\n\r\n      return bind(\r\n        removeEvent,\r\n        nameOrEventListeners,\r\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\r\n      );\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      eventListener && push(offFns, addEvent(key, eventListener));\r\n    });\r\n\r\n    return bind(runEachAndClear, offFns);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    each(from(events.get(name)), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n","import {\r\n  assignDeep,\r\n  each,\r\n  isObject,\r\n  keys,\r\n  isArray,\r\n  hasOwnProperty,\r\n  isFunction,\r\n  isEmptyObject,\r\n  concat,\r\n} from '~/support';\r\nimport type { DeepPartial, DeepReadonly } from '~/typings';\r\n\r\nexport type OptionsField = string;\r\n\r\nexport type OptionsPrimitiveValue =\r\n  | boolean\r\n  | number\r\n  | string\r\n  | Array<any>\r\n  | ReadonlyArray<any>\r\n  | [any]\r\n  | [any, ...any[]]\r\n  | ((this: any, ...args: any[]) => any)\r\n  | null;\r\n\r\nexport type OptionsObject = {\r\n  [field: OptionsField]: OptionsPrimitiveValue | OptionsObject;\r\n};\r\n\r\ntype OptionsObjectFieldNameTuples<T> = T extends OptionsPrimitiveValue\r\n  ? []\r\n  : {\r\n      [K in Extract<keyof T, OptionsField>]: [K, ...OptionsObjectFieldNameTuples<T[K]>];\r\n    }[Extract<keyof T, OptionsField>];\r\n\r\ntype JoinOptionsObjectFieldTuples<\r\n  T extends OptionsField[],\r\n  IncompletePath extends boolean = false\r\n> = T extends [infer F]\r\n  ? F\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends OptionsField\r\n    ?\r\n        | (IncompletePath extends true ? F : never)\r\n        | `${F}.${JoinOptionsObjectFieldTuples<Extract<R, OptionsField[]>>}`\r\n    : never\r\n  : OptionsField;\r\n\r\ntype SplitJoinedOptionsObjectFieldTuples<S extends string> = string extends S\r\n  ? OptionsField[]\r\n  : S extends ''\r\n  ? []\r\n  : S extends `${infer T}.${infer U}`\r\n  ? [T, ...SplitJoinedOptionsObjectFieldTuples<U>]\r\n  : [S];\r\n\r\ntype OptionsObjectFieldTuplesType<O, T extends OptionsField[]> = T extends [infer F]\r\n  ? F extends keyof O\r\n    ? O[F]\r\n    : never\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends keyof O\r\n    ? O[F] extends OptionsPrimitiveValue\r\n      ? O[F]\r\n      : OptionsObjectFieldTuplesType<O[F], Extract<R, OptionsField[]>>\r\n    : never\r\n  : never;\r\n\r\ntype OptionsObjectFieldPath<O extends OptionsObject> = JoinOptionsObjectFieldTuples<\r\n  OptionsObjectFieldNameTuples<O>,\r\n  true\r\n>;\r\n\r\ntype OptionsObjectFieldPathType<\r\n  O extends OptionsObject,\r\n  P extends string\r\n> = OptionsObjectFieldTuplesType<O, SplitJoinedOptionsObjectFieldTuples<P>>;\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw 0;\r\n    }\r\n    return val;\r\n  });\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? `${path}`\r\n        .split('.')\r\n        .reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\n/**\r\n * The overflow behavior of an axis.\r\n */\r\nexport type OverflowBehavior =\r\n  /** No scrolling is possible and the content is clipped. */\r\n  | 'hidden'\r\n  /** No scrolling is possible and the content isn't clipped. */\r\n  | 'visible'\r\n  /** Scrolling is possible if there is an overflow. */\r\n  | 'scroll'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `hidden`.\r\n   */\r\n  | 'visible-hidden'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `scroll`.\r\n   */\r\n  | 'visible-scroll';\r\n\r\n/**\r\n * The scrollbars visibility behavior.\r\n */\r\nexport type ScrollbarsVisibilityBehavior =\r\n  /** The scrollbars are always visible. */\r\n  | 'visible'\r\n  /** The scrollbars are always hidden. */\r\n  | 'hidden'\r\n  /** The scrollbars are only visibile if there is overflow. */\r\n  | 'auto';\r\n\r\n/**\r\n * The scrollbars auto hide behavior\r\n */\r\nexport type ScrollbarsAutoHideBehavior =\r\n  /** The scrollbars are never hidden automatically. */\r\n  | 'never'\r\n  /** The scrollbars are hidden unless the user scrolls. */\r\n  | 'scroll'\r\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\r\n  | 'move'\r\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\r\n  | 'leave';\r\n\r\n/**\r\n * The scrollbar click scroll behavior.\r\n */\r\nexport type ScrollbarsClickScrollBehavior = boolean | 'instant';\r\n\r\n/**\r\n * The options of a OverlayScrollbars instance.\r\n */\r\nexport type Options = {\r\n  /** Whether the padding shall be absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\r\n  showNativeOverlaidScrollbars: boolean;\r\n  /** Customizes the automatic update behavior. */\r\n  update: {\r\n    /**\r\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\r\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\r\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\r\n     */\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    /**\r\n     * The debounce which is used to detect content changes.\r\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\r\n     * If a single number customizes only the `timeout`.\r\n     *\r\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\r\n     */\r\n    debounce: [timeout: number, maxWait: number] | number | null;\r\n    /**\r\n     * HTML attributes which will trigger an update if they're changed.\r\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\r\n     */\r\n    attributes: string[] | null;\r\n    /**\r\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\r\n     * @param mutation The MutationRecord from the MutationObserver.\r\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\r\n     */\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  /** Customizes the overflow behavior per axis. */\r\n  overflow: {\r\n    /** The overflow behavior of the horizontal (x) axis. */\r\n    x: OverflowBehavior;\r\n    /** The overflow behavior of the vertical (y) axis. */\r\n    y: OverflowBehavior;\r\n  };\r\n  /** Customizes appearance of the scrollbars. */\r\n  scrollbars: {\r\n    /**\r\n     * The scrollbars theme.\r\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\r\n     */\r\n    theme: string | null;\r\n    /** The scrollbars visibility behavior. */\r\n    visibility: ScrollbarsVisibilityBehavior;\r\n    /** The scrollbars auto hide behavior. */\r\n    autoHide: ScrollbarsAutoHideBehavior;\r\n    /** The scrollbars auto hide delay in milliseconds. */\r\n    autoHideDelay: number;\r\n    /** Whether the scrollbars auto hide behavior is suspended until a scroll happened. */\r\n    autoHideSuspend: boolean;\r\n    /** Whether it is possible to drag the handle of a scrollbar to scroll the viewport. */\r\n    dragScroll: boolean;\r\n    /** Whether it is possible to click the track of a scrollbar to scroll the viewport. */\r\n    clickScroll: ScrollbarsClickScrollBehavior;\r\n    /**\r\n     * An array of pointer types which shall be supported.\r\n     * Common pointer types are: `mouse`, `pen` and `touch`.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\r\n     */\r\n    pointers: string[] | null;\r\n  };\r\n};\r\n\r\nexport type ReadonlyOptions = DeepReadonly<Options>;\r\n\r\nexport type PartialOptions = DeepPartial<Options>;\r\n\r\nexport type OptionsCheckFn<O extends OptionsObject> = <P extends OptionsObjectFieldPath<O>>(\r\n  path: P\r\n) => [value: OptionsObjectFieldPathType<O, P>, changed: boolean];\r\n\r\nexport const defaultOptions: ReadonlyOptions = {\r\n  paddingAbsolute: false,\r\n  showNativeOverlaidScrollbars: false,\r\n  update: {\r\n    elementEvents: [['img', 'load']],\r\n    debounce: [0, 33],\r\n    attributes: null,\r\n    ignoreMutation: null,\r\n  },\r\n  overflow: {\r\n    x: 'scroll',\r\n    y: 'scroll',\r\n  },\r\n  scrollbars: {\r\n    theme: 'os-theme-dark',\r\n    visibility: 'auto',\r\n    autoHide: 'never',\r\n    autoHideDelay: 1300,\r\n    autoHideSuspend: false,\r\n    dragScroll: true,\r\n    clickScroll: false,\r\n    pointers: ['mouse', 'touch', 'pen'],\r\n  },\r\n} satisfies OptionsObject & Options;\r\n\r\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\r\n  const diff: DeepPartial<T> = {};\r\n  const optionsKeys = concat(keys(newOptions), keys(currOptions)) as Array<\r\n    keyof T & keyof DeepPartial<T>\r\n  >;\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {} as any), getOptionsDiff(currOptionValue, newOptionValue));\r\n      // delete empty nested objects\r\n      if (isEmptyObject(diff[optionKey])) {\r\n        delete diff[optionKey];\r\n      }\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        // @ts-ignore\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n\r\nexport const createOptionCheck =\r\n  <T extends OptionsObject>(\r\n    options: T,\r\n    changedOptions: DeepPartial<T>,\r\n    force?: boolean\r\n  ): OptionsCheckFn<T> =>\r\n  (path) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n","import { strOverflowX, strOverflowY } from './support';\r\n\r\nconst dataAttributePrefix = `data-overlayscrollbars`;\r\n\r\n// environment\r\nexport const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentScrollbarHidden = `${classNameEnvironment}-scrollbar-hidden`;\r\n\r\n// initialize\r\nexport const dataAttributeInitialize = `${dataAttributePrefix}-initialize`;\r\n\r\n// shared\r\nexport const dataValueNoClipping = 'noClipping';\r\n\r\n// body\r\nexport const dataAttributeHtmlBody = `${dataAttributePrefix}-body`;\r\n\r\n// host\r\nexport const dataAttributeHost = dataAttributePrefix;\r\nexport const dataValueHostIsHost = 'host';\r\n\r\n// viewport\r\nexport const dataAttributeViewport = `${dataAttributePrefix}-viewport`;\r\nexport const dataValueViewportOverflowXPrefix = strOverflowX;\r\nexport const dataValueViewportOverflowYPrefix = strOverflowY;\r\nexport const dataValueViewportArrange = 'arrange';\r\nexport const dataValueViewportMeasuring = 'measuring';\r\nexport const dataValueViewportScrolling = 'scrolling';\r\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueViewportNoContent = 'noContent';\r\n\r\n// padding\r\nexport const dataAttributePadding = `${dataAttributePrefix}-padding`;\r\n\r\n// content\r\nexport const dataAttributeContent = `${dataAttributePrefix}-content`;\r\n\r\n// size observer\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\n// trinsic observer\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\n// scrollbars\r\nexport const classNameScrollbarThemeNone = 'os-theme-none';\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\r\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\r\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\r\nexport const classNameScrollbarAutoHide = `${classNameScrollbar}-auto-hide`;\r\nexport const classNameScrollbarAutoHideHidden = `${classNameScrollbarAutoHide}-hidden`;\r\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\r\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\r\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\r\n","let nonce: string | undefined;\r\n\r\nexport const getNonce = () => nonce;\r\nexport const setNonce = (newNonce: string | undefined) => {\r\n  nonce = newNonce;\r\n};\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  appendChildren,\r\n  getFractionalSize,\r\n  getClientSize,\r\n  getOffsetSize,\r\n  removeAttrs,\r\n  removeElements,\r\n  assignDeep,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  scrollT,\r\n  bind,\r\n  wnd,\r\n  getStyles,\r\n  isBodyElement,\r\n  isFunction,\r\n  addEventListener,\r\n} from '~/support';\r\nimport { classNameEnvironment, classNameEnvironmentScrollbarHidden } from '~/classnames';\r\nimport { defaultOptions } from '~/options';\r\nimport type { XY, EventListener } from '~/support';\r\nimport type { Options, PartialOptions } from '~/options';\r\nimport type { Initialization, PartialInitialization } from '~/initialization';\r\nimport type { StyleObjectKey } from './typings';\r\nimport { getNonce } from './nonce';\r\n\r\ntype EnvironmentEventArgs = {\r\n  r: [scrollbarSizeChanged?: boolean];\r\n};\r\n\r\nexport interface Env {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _scrollTimeline: boolean;\r\n  readonly _staticDefaultInitialization: Initialization;\r\n  readonly _staticDefaultOptions: Options;\r\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\r\n  _getDefaultInitialization(): Initialization;\r\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nlet environmentInstance: Env;\r\n\r\nconst createEnvironment = (): Env => {\r\n  const getNativeScrollbarSize = (\r\n    measureElm: HTMLElement,\r\n    measureElmChild: HTMLElement,\r\n    clear?: boolean\r\n  ): XY => {\r\n    // fix weird safari issue where getComputedStyle returns all empty styles by appending twice\r\n    appendChildren(document.body, measureElm);\r\n    appendChildren(document.body, measureElm);\r\n\r\n    const cSize = getClientSize(measureElm);\r\n    const oSize = getOffsetSize(measureElm);\r\n    const fSize = getFractionalSize(measureElmChild);\r\n\r\n    clear && removeElements(measureElm);\r\n\r\n    return {\r\n      x: oSize.h - cSize.h + fSize.h,\r\n      y: oSize.w - cSize.w + fSize.w,\r\n    };\r\n  };\r\n\r\n  const getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n    let result = false;\r\n    const revertClass = addClass(testElm, classNameEnvironmentScrollbarHidden);\r\n    try {\r\n      result =\r\n        getStyles(testElm, 'scrollbar-width' as StyleObjectKey) === 'none' ||\r\n        getStyles(testElm, 'display', '::-webkit-scrollbar') === 'none';\r\n    } catch {}\r\n    revertClass();\r\n    return result;\r\n  };\r\n\r\n  // changes to this styles need to be reflected in the \"hide native scrollbars\" section of the structure styles\r\n  const envStyle = `.${classNameEnvironment}{scroll-behavior:auto!important;position:fixed;opacity:0;visibility:hidden;overflow:scroll;height:200px;width:200px;z-index:-1}.${classNameEnvironment} div{width:200%;height:200%;margin:10px 0}.${classNameEnvironmentScrollbarHidden}{scrollbar-width:none!important}.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar,.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar-corner{appearance:none!important;display:none!important;width:0!important;height:0!important}`;\r\n  const envDOM = createDOM(\r\n    `<div class=\"${classNameEnvironment}\"><div></div><style>${envStyle}</style></div>`\r\n  );\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const styleElm = envElm.lastChild as HTMLStyleElement;\r\n  const nonce = getNonce();\r\n\r\n  if (nonce) {\r\n    styleElm.nonce = nonce;\r\n  }\r\n\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    bind(getNativeScrollbarSize, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const staticDefaultInitialization: Initialization = {\r\n    elements: {\r\n      host: null,\r\n      padding: !nativeScrollbarsHiding,\r\n      viewport: (target) => nativeScrollbarsHiding && isBodyElement(target) && target,\r\n      content: false,\r\n    },\r\n    scrollbars: {\r\n      slot: true,\r\n    },\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: false,\r\n      body: null,\r\n    },\r\n  };\r\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\r\n  const getDefaultOptions = bind(\r\n    assignDeep as typeof assignDeep<Options, Options>,\r\n    {} as Options,\r\n    staticDefaultOptions\r\n  );\r\n  const getDefaultInitialization = bind(\r\n    assignDeep as typeof assignDeep<Initialization, Initialization>,\r\n    {} as Initialization,\r\n    staticDefaultInitialization\r\n  );\r\n\r\n  const env: Env = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _scrollTimeline: !!scrollT,\r\n    _addResizeListener: bind(addEvent, 'r'),\r\n    _getDefaultInitialization: getDefaultInitialization,\r\n    _setDefaultInitialization: (newInitializationStrategy) =>\r\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\r\n      getDefaultInitialization(),\r\n    _getDefaultOptions: getDefaultOptions,\r\n    _setDefaultOptions: (newDefaultOptions) =>\r\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\r\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\r\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\r\n  };\r\n\r\n  removeAttrs(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  // needed in case content has css viewport units\r\n  addEventListener(wnd, 'resize', () => {\r\n    triggerEvent('r', []);\r\n  });\r\n\r\n  if (\r\n    isFunction(wnd.matchMedia) &&\r\n    !nativeScrollbarsHiding &&\r\n    (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)\r\n  ) {\r\n    const addZoomListener = (onZoom: () => void) => {\r\n      const media = wnd.matchMedia(`(resolution: ${wnd.devicePixelRatio}dppx)`);\r\n      addEventListener(\r\n        media,\r\n        'change',\r\n        () => {\r\n          onZoom();\r\n          addZoomListener(onZoom);\r\n        },\r\n        {\r\n          _once: true,\r\n        }\r\n      );\r\n    };\r\n    addZoomListener(() => {\r\n      const [updatedNativeScrollbarSize, nativeScrollbarSizeChanged] =\r\n        updateNativeScrollbarSizeCache();\r\n\r\n      assignDeep(env._nativeScrollbarsSize, updatedNativeScrollbarSize); // keep the object and just re-assign!\r\n      triggerEvent('r', [nativeScrollbarSizeChanged]);\r\n    });\r\n  }\r\n\r\n  return env;\r\n};\r\n\r\nexport const getEnvironment = (): Env => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n","import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { DeepPartial } from '~/typings';\r\n\r\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\r\n  StaticInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\r\n  DynamicInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\nexport type StaticInitialization = HTMLElement | false | null;\r\nexport type DynamicInitialization = HTMLElement | boolean | null;\r\n\r\n/**\r\n * Static elements are elements which MUST be present in the final DOM.\r\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\r\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the StaticInitialization value. */\r\n  | ((...args: Args) => StaticInitialization)\r\n  /** The StaticInitialization value. */\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic elements are elements which CAN be present in the final DOM.\r\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\r\n * With `true` an appropriate element is generated automatically.\r\n * With `false`, `null` or `undefined` the element won't be in the DOM.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the DynamicInitialization value. */\r\n  | ((...args: Args) => DynamicInitialization)\r\n  /** The DynamicInitialization value. */\r\n  | DynamicInitialization;\r\n\r\n/**\r\n * Describes how a OverlayScrollbar instance should initialize.\r\n */\r\nexport type Initialization = {\r\n  /**\r\n   * Customizes which elements are generated and used.\r\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\r\n   * Any passed function should be a \"pure\" function. (same input produces same output)\r\n   */\r\n  elements: {\r\n    /**\r\n     * Assign a custom element as the host element.\r\n     * Only relevant if the target element is a Textarea.\r\n     */\r\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the viewport element. */\r\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the padding element or force the element not to be generated. */\r\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the content element or force the element not to be generated. */\r\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n  };\r\n  /**\r\n   * Customizes elements related to the scrollbars.\r\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\r\n   */\r\n  scrollbars: {\r\n    slot: DynamicInitializationElement<\r\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\r\n    >;\r\n  };\r\n  /**\r\n   * Customizes the cancelation behavior.\r\n   */\r\n  cancel: {\r\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\r\n    nativeScrollbarsOverlaid: boolean;\r\n    /**\r\n     * Whether the initialization shall be canceled if its applied to a body element.\r\n     * With `true` an initialization is always canceled, with `false` its never canceled.\r\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\r\n     */\r\n    body: boolean | null;\r\n  };\r\n};\r\n\r\nexport type PartialInitialization = DeepPartial<Initialization>;\r\n\r\n/** The initialization target element. */\r\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\r\n\r\n/**\r\n * The initialization target object.\r\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\r\n */\r\nexport type InitializationTargetObject = PartialInitialization & {\r\n  target: InitializationTargetElement;\r\n};\r\n\r\n/** The initialization target. */\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\r\n  args: any,\r\n  value: any\r\n): T => (isFunction(value) ? value.apply(0, args) : value);\r\n\r\nexport const staticInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\r\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\r\n  staticInitializationElementValue?: StaticInitializationElement<Args>\r\n): HTMLElement => {\r\n  const staticInitialization = isUndefined(staticInitializationElementValue)\r\n    ? defaultStaticInitializationElement\r\n    : staticInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\r\n    args,\r\n    staticInitialization\r\n  );\r\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\r\n};\r\n\r\nexport const dynamicInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\r\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\r\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\r\n): HTMLElement | false => {\r\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\r\n    ? defaultDynamicInitializationElement\r\n    : dynamicInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\r\n    args,\r\n    dynamicInitialization\r\n  );\r\n  return (\r\n    !!resolvedInitialization &&\r\n    (isHTMLElement(resolvedInitialization)\r\n      ? resolvedInitialization\r\n      : fallbackDynamicInitializationElement.apply(0, args))\r\n  );\r\n};\r\n\r\nexport const cancelInitialization = (\r\n  isBody: boolean,\r\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\r\n): boolean => {\r\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\r\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding, _getDefaultInitialization } =\r\n    getEnvironment();\r\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\r\n    _getDefaultInitialization().cancel;\r\n\r\n  const resolvedNativeScrollbarsOverlaid =\r\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\r\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\r\n\r\n  const finalNativeScrollbarsOverlaid =\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\r\n    resolvedNativeScrollbarsOverlaid;\r\n  const finalDocumentScrollingElement =\r\n    isBody &&\r\n    (isNull(resolvedDocumentScrollingElement)\r\n      ? !_nativeScrollbarsHiding\r\n      : resolvedDocumentScrollingElement);\r\n\r\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\r\n};\r\n","import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  MutationObserverConstructor,\r\n  addEventListener,\r\n  is,\r\n  find,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  isEmptyArray,\r\n  deduplicateArray,\r\n  inArray,\r\n  concat,\r\n  getAttr,\r\n  isString,\r\n} from '~/support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\r\n  /**\r\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\r\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\r\n   */\r\n  _styleChangingAttributes?: string[] | readonly string[];\r\n}\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  construct: () => () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (\r\n  getElements?: (selector: string) => Node[],\r\n  removed?: boolean\r\n) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: HTMLElement,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let destroyed = false;\r\n  const map = eventContentChange ? new WeakMap<Node, (() => any)[]>() : false; // weak map to prevent memory leak for detached elements\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\r\n    if (map && eventContentChange) {\r\n      const eventElmList = eventContentChange.map((item) => {\r\n        const [selector, eventNames] = item || [];\r\n        const elements = eventNames && selector ? (getElements || find)(selector, target) : [];\r\n        return [elements, eventNames] as const;\r\n      });\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entries = map.get(elm) || [];\r\n          const isTargetChild = target.contains(elm);\r\n\r\n          if (isTargetChild && eventNames) {\r\n            const removeListener = addEventListener(elm, eventNames, (event: Event) => {\r\n              if (destroyed) {\r\n                removeListener();\r\n                map.delete(elm);\r\n              } else {\r\n                callback(event);\r\n              }\r\n            });\r\n            map.set(elm, push(entries, removeListener));\r\n          } else {\r\n            runEachAndClear(entries);\r\n            map.delete(elm);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  updateElements();\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => isConnected && (callback as DOMContentObserverCallback)(true),\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = concat(finalAttributes, finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    fromRecords: boolean,\r\n    mutations: MutationRecord[]\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    if (!isEmptyArray(mutations)) {\r\n      const ignoreTargetChange = _ignoreTargetChange || noop;\r\n      const ignoreContentChange = _ignoreContentChange || noop;\r\n      const totalChangedNodes: Node[] = [];\r\n      const targetChangedAttrs: string[] = [];\r\n      let targetStyleChanged: boolean | '' | null | undefined = false;\r\n      let contentChanged: boolean | '' | null | undefined = false;\r\n      let childListChanged: boolean | '' | null | undefined = false;\r\n\r\n      each(mutations, (mutation) => {\r\n        const {\r\n          attributeName,\r\n          target: mutationTarget,\r\n          type,\r\n          oldValue,\r\n          addedNodes,\r\n          removedNodes,\r\n        } = mutation;\r\n        const isAttributesType = type === 'attributes';\r\n        const isChildListType = type === 'childList';\r\n        const targetIsMutationTarget = target === mutationTarget;\r\n        const isAttrChange = isAttributesType && attributeName;\r\n        const newValue =\r\n          isAttrChange && getAttr(mutationTarget as HTMLElement, attributeName || '');\r\n        // narrow down attributeValue type to `string` or `null` but don't overwrite `<empty string>` with `null`\r\n        const attributeValue = isString(newValue) ? newValue : null;\r\n        const attributeChanged = isAttrChange && oldValue !== attributeValue;\r\n        const styleChangingAttrChanged =\r\n          inArray(finalStyleChangingAttributes, attributeName) && attributeChanged;\r\n\r\n        // if is content observer and something changed in children\r\n        if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\r\n          const contentAttrChanged = isAttributesType && attributeChanged;\r\n          const isNestedTarget =\r\n            contentAttrChanged &&\r\n            _nestedTargetSelector &&\r\n            is(mutationTarget, _nestedTargetSelector);\r\n          const baseAssertion = isNestedTarget\r\n            ? !ignoreTargetChange(mutationTarget, attributeName, oldValue, attributeValue)\r\n            : !isAttributesType || contentAttrChanged;\r\n          const contentFinalChanged =\r\n            baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n          each(addedNodes, (node) => push(totalChangedNodes, node));\r\n          each(removedNodes, (node) => push(totalChangedNodes, node));\r\n\r\n          contentChanged = contentChanged || contentFinalChanged;\r\n          childListChanged = childListChanged || isChildListType;\r\n        }\r\n        // if is target observer and target attr changed\r\n        if (\r\n          !isContentObserver &&\r\n          targetIsMutationTarget &&\r\n          attributeChanged &&\r\n          !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n        ) {\r\n          push(targetChangedAttrs, attributeName);\r\n          targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n        }\r\n      });\r\n\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector: string) =>\r\n        deduplicateArray(totalChangedNodes).reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n\r\n      if (isContentObserver) {\r\n        !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n        return [false] satisfies Parameters<DOMObserverCallback<true>> as Parameters<\r\n          DOMObserverCallback<ContentObserver>\r\n        >;\r\n      }\r\n\r\n      if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n        const args = [\r\n          deduplicateArray(targetChangedAttrs),\r\n          targetStyleChanged,\r\n        ] satisfies Parameters<DOMTargetObserverCallback> & Parameters<DOMObserverCallback<false>>;\r\n        !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\r\n\r\n        return args as Parameters<DOMObserverCallback<ContentObserver>>;\r\n      }\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(\r\n    bind(observerCallback, false)\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      mutationObserver.observe(target, {\r\n        attributes: true,\r\n        attributeOldValue: true,\r\n        attributeFilter: observedAttributes,\r\n        subtree: isContentObserver,\r\n        childList: isContentObserver,\r\n        characterData: isContentObserver,\r\n      });\r\n      isConnected = true;\r\n\r\n      return () => {\r\n        if (isConnected) {\r\n          destroyEventContentChange();\r\n          mutationObserver.disconnect();\r\n          isConnected = false;\r\n        }\r\n      };\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n        return observerCallback(true, mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import { each, keys } from '~/support';\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\r\nimport type { EventListener, EventListenerArgs, EventListeners } from '..';\r\n\r\nexport type PluginModuleInstance = Record<string | number | symbol, any>;\r\n\r\nexport type InstancePluginEvent = {\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  (eventListeners: EventListeners): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbars plugin module.\r\n * Plugin modules must be side-effect free and deterministic. (same input produces same output)\r\n */\r\nexport type PluginModule<\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = (S extends PluginModuleInstance\r\n  ? {\r\n      /**\r\n       * Creates a plugin which is bound to the static object.\r\n       * The function will be called once with the static object as soon as the plugin is registered.\r\n       * The plugin can add new methods or fields to the passed static object.\r\n       * @param osStatic The static object the plugin is bound to.\r\n       * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n       */\r\n      static: (osStatic: OverlayScrollbarsStatic) => S | void;\r\n    }\r\n  : object) &\r\n  (I extends PluginModuleInstance\r\n    ? {\r\n        /**\r\n         * Creates a A plugin which is bound to an instance.\r\n         * The function will be called each time a new instance is created.\r\n         * The plugin can add new methods or fields to the passed instance object.\r\n         * @param osInstance The instance object the plugin is bound to.\r\n         * @param event A function which adds events to the instance which can't be removed from outside the plugin. (instance events added with the `on` function can be removed with the optional `pure` parameter)\r\n         * @param osStatic The static object the plugin is bound to.\r\n         * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n         */\r\n        instance: (\r\n          osInstance: OverlayScrollbars,\r\n          event: InstancePluginEvent,\r\n          osStatic: OverlayScrollbarsStatic\r\n        ) => I | void;\r\n      }\r\n    : object);\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin.\r\n */\r\nexport type Plugin<\r\n  Name extends string = string,\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = {\r\n  /** The field is the plugins name. Plugin names must be globally unique, please choose wisely. */\r\n  [pluginName in Name]: PluginModule<S, I>;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a static module.\r\n */\r\nexport type StaticPlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, T, void>;\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a instance module.\r\n */\r\nexport type InstancePlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, void, T>;\r\n\r\n/**\r\n * Infers the type of the static modules instance of the passed plugin.\r\n */\r\nexport type InferStaticPluginModuleInstance<T extends StaticPlugin> = T extends StaticPlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['static'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['static']>\r\n    : void\r\n  : void;\r\n\r\n/**\r\n * Infers the type of the instance modules instance of the passed plugin.\r\n */\r\nexport type InferInstancePluginModuleInstance<T extends InstancePlugin> = T extends InstancePlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['instance'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['instance']>\r\n    : void\r\n  : void;\r\n\r\n/** All registered plugin modules. */\r\nexport const pluginModules: Record<string, PluginModule> = {};\r\n\r\n/** All static plugin module instances. */\r\nexport const staticPluginModuleInstances: Record<string, PluginModuleInstance | void> = {};\r\n\r\n/**\r\n * Adds plugins.\r\n * @param addedPlugin The plugin(s) to add.\r\n * @returns The added plugin modules of the registered plugins.\r\n */\r\nexport const addPlugins = (addedPlugin: Plugin[]) => {\r\n  each(addedPlugin, (plugin) =>\r\n    each(plugin, (_, key) => {\r\n      pluginModules[key] = plugin[key];\r\n    })\r\n  );\r\n};\r\n\r\nexport const registerPluginModuleInstances = (\r\n  plugin: Plugin,\r\n  staticObj: OverlayScrollbarsStatic,\r\n  instanceInfo?: [\r\n    instanceObj: OverlayScrollbars,\r\n    event: InstancePluginEvent,\r\n    instancePluginMap?: Record<string, PluginModuleInstance>\r\n  ]\r\n): Array<PluginModuleInstance | void> =>\r\n  keys(plugin).map((name) => {\r\n    const { static: osStatic, instance: osInstance } = (\r\n      plugin as Plugin<string, PluginModuleInstance, PluginModuleInstance>\r\n    )[name];\r\n    const [instanceObj, event, instancePluginMap] = instanceInfo || [];\r\n    const ctor = instanceInfo ? osInstance : osStatic;\r\n    if (ctor) {\r\n      const instance = instanceInfo\r\n        ? (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (\r\n                osInstance: OverlayScrollbars,\r\n                event: InstancePluginEvent,\r\n                osStatic: OverlayScrollbarsStatic\r\n              ) => PluginModuleInstance | void\r\n            >\r\n          )(instanceObj!, event!, staticObj)\r\n        : (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (osStatic: OverlayScrollbarsStatic) => PluginModuleInstance | void\r\n            >\r\n          )(staticObj);\r\n      return ((instancePluginMap || staticPluginModuleInstances)[name] = instance);\r\n    }\r\n  });\r\n\r\nexport const getStaticPluginModuleInstance = <T extends StaticPlugin>(\r\n  pluginModuleName: T extends StaticPlugin<infer N> ? N : never\r\n): InferStaticPluginModuleInstance<T> | undefined =>\r\n  staticPluginModuleInstances[pluginModuleName] as InferStaticPluginModuleInstance<T> | undefined;\r\n","import type {\r\n  Options,\r\n  PartialOptions,\r\n  OverflowBehavior,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n  ScrollbarsClickScrollBehavior,\r\n} from '~/options';\r\nimport type { OptionsTemplate, OptionsTemplateValue } from './validation';\r\nimport type { StaticPlugin } from '~/plugins';\r\nimport { validateOptions, optionsTemplateTypes as oTypes } from './validation';\r\n\r\nexport const optionsValidationPluginModuleName = '__osOptionsValidationPlugin';\r\n\r\nexport const OptionsValidationPlugin = /* @__PURE__ */ (() => ({\r\n  [optionsValidationPluginModuleName]: {\r\n    static: () => {\r\n      const numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\n      const booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\n      const arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [\r\n        oTypes.array,\r\n        oTypes.null,\r\n      ];\r\n      const overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n        'hidden scroll visible visible-hidden';\r\n      const scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\r\n        'visible hidden auto';\r\n      const scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\r\n        'never scroll leavemove';\r\n      const scrollbarsClickScrollAllowedValues: OptionsTemplateValue<ScrollbarsClickScrollBehavior> =\r\n        [booleanAllowedValues, oTypes.string];\r\n\r\n      const optionsTemplate: OptionsTemplate<Options> = {\r\n        paddingAbsolute: booleanAllowedValues, // true || false\r\n        showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\r\n        update: {\r\n          elementEvents: arrayNullValues, // array of tuples || null\r\n          attributes: arrayNullValues,\r\n          debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n          ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n        },\r\n        overflow: {\r\n          x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scroll\r\n          y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scroll\r\n        },\r\n        scrollbars: {\r\n          theme: [oTypes.string, oTypes.null], // string || null\r\n          visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto\r\n          autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n          autoHideDelay: numberAllowedValues, // number\r\n          autoHideSuspend: booleanAllowedValues, // true || false\r\n          dragScroll: booleanAllowedValues, // true || false\r\n          clickScroll: scrollbarsClickScrollAllowedValues, // true || false || instant\r\n          pointers: [oTypes.array, oTypes.null], // string array\r\n        },\r\n        /*\r\n        textarea: {\r\n          dynWidth: booleanAllowedValues, // true || false\r\n          dynHeight: booleanAllowedValues, // true || false\r\n          inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n        },\r\n        */\r\n      };\r\n      return (options: PartialOptions, doWriteErrors?: boolean): PartialOptions => {\r\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n        return { ...foreign, ...validated };\r\n      };\r\n    },\r\n  },\r\n}))() satisfies StaticPlugin<typeof optionsValidationPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  appendChildren,\r\n  getOffsetSize,\r\n  addEventListener,\r\n  addClass,\r\n  equalWH,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n  bind,\r\n  scrollElementTo,\r\n  strWidth,\r\n  strHeight,\r\n  setStyles,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from '~/classnames';\r\nimport type { StaticPlugin } from '../plugins';\r\n\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const SizeObserverPlugin = /* @__PURE__ */ (() => ({\r\n  [sizeObserverPluginName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        listenerElement: HTMLElement,\r\n        onSizeChangedCallback: (appear: boolean) => any,\r\n        observeAppearChange: boolean | null | undefined\r\n      ): [appearCallback: () => void, offFns: (() => any)[]] => {\r\n        const scrollAmount = 3333333;\r\n        const scrollEventName = 'scroll';\r\n        const observerElementChildren = createDOM(\r\n          `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n        );\r\n        const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n        const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n        const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n        const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n        let cacheSize = getOffsetSize(observerElementChildrenRoot);\r\n        let currSize = cacheSize;\r\n        let isDirty = false;\r\n        let rAFId: number;\r\n\r\n        const reset = () => {\r\n          scrollElementTo(expandElement, scrollAmount);\r\n          scrollElementTo(shrinkElement, scrollAmount);\r\n        };\r\n        const onResized = (appear?: unknown) => {\r\n          rAFId = 0;\r\n          if (isDirty) {\r\n            cacheSize = currSize;\r\n            onSizeChangedCallback(appear === true);\r\n          }\r\n        };\r\n        const onScroll = (scrollEvent?: Event | false) => {\r\n          currSize = getOffsetSize(observerElementChildrenRoot);\r\n          isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n          if (scrollEvent) {\r\n            stopPropagation(scrollEvent);\r\n\r\n            if (isDirty && !rAFId) {\r\n              cAF!(rAFId);\r\n              rAFId = rAF!(onResized);\r\n            }\r\n          } else {\r\n            onResized(scrollEvent === false);\r\n          }\r\n\r\n          reset();\r\n        };\r\n        const destroyFns = [\r\n          appendChildren(listenerElement, observerElementChildren),\r\n          addEventListener(expandElement, scrollEventName, onScroll),\r\n          addEventListener(shrinkElement, scrollEventName, onScroll),\r\n        ];\r\n\r\n        addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n\r\n        // lets assume that the divs will never be that large and a constant value is enough\r\n        setStyles(expandElementChild, {\r\n          [strWidth]: scrollAmount,\r\n          [strHeight]: scrollAmount,\r\n        });\r\n\r\n        rAF!(reset);\r\n\r\n        return [observeAppearChange ? bind(onScroll, false) : reset, destroyFns];\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof sizeObserverPluginName>;\r\n","import { strHidden, strScroll, strVisible } from '~/support';\r\nimport type { Env } from '~/environment';\r\nimport type { XY } from '~/support';\r\nimport type { Options, OptionsCheckFn, OverflowBehavior } from '~/options';\r\nimport type { OverflowStyle } from '~/typings';\r\n\r\nexport interface ViewportOverflowState {\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport const getShowNativeOverlaidScrollbars = (checkOption: OptionsCheckFn<Options>, env: Env) => {\r\n  const { _nativeScrollbarsOverlaid } = env;\r\n  const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] = checkOption(\r\n    'showNativeOverlaidScrollbars'\r\n  );\r\n\r\n  return [\r\n    showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y,\r\n    showNativeOverlaidScrollbarsChanged,\r\n  ] as const;\r\n};\r\n\r\nexport const overflowIsVisible = (overflowBehavior: string) =>\r\n  overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n/**\r\n * Creates a viewport overflow state object.\r\n * @param hasOverflow The information whether an axis has overflow.\r\n * @param overflowBehavior The overflow behavior according to the options.\r\n * @returns A object which represents the newly set overflow state.\r\n */\r\nexport const createViewportOverflowState = (\r\n  hasOverflow: Partial<XY<boolean>>,\r\n  overflowBehavior: XY<OverflowBehavior>\r\n): ViewportOverflowState => {\r\n  const getAxisOverflowStyle = (\r\n    axisBehavior: OverflowBehavior,\r\n    axisHasOverflow: boolean | undefined,\r\n    perpendicularBehavior: OverflowBehavior,\r\n    perpendicularOverflow: boolean | undefined\r\n  ): OverflowStyle => {\r\n    // convert behavior to style:\r\n    // 'visible'        -> 'hidden'\r\n    // 'hidden'         -> 'hidden'\r\n    // 'scroll'         -> 'scroll'\r\n    // 'visible-hidden' -> 'hidden'\r\n    // 'visible-scroll' -> 'scroll'\r\n    const behaviorStyle =\r\n      axisBehavior === strVisible\r\n        ? strHidden\r\n        : (axisBehavior.replace(`${strVisible}-`, '') as OverflowStyle);\r\n    const axisOverflowVisible = overflowIsVisible(axisBehavior);\r\n    const perpendicularOverflowVisible = overflowIsVisible(perpendicularBehavior);\r\n\r\n    // if no axis has overflow set 'hidden'\r\n    if (!axisHasOverflow && !perpendicularOverflow) {\r\n      return strHidden;\r\n    }\r\n\r\n    // if both axis have a visible behavior ('visible', 'visible-hidden', 'visible-scroll') set 'visible'\r\n    if (axisOverflowVisible && perpendicularOverflowVisible) {\r\n      return strVisible;\r\n    }\r\n\r\n    // this this axis has a visible behavior\r\n    if (axisOverflowVisible) {\r\n      const nonPerpendicularOverflow = axisHasOverflow ? strVisible : strHidden;\r\n      return axisHasOverflow && perpendicularOverflow\r\n        ? behaviorStyle // if both axis have an overflow set ('hidden' or 'scroll')\r\n        : nonPerpendicularOverflow; // if only this axis has an overflow set 'visible', if no axis has an overflow set 'hidden'\r\n    }\r\n\r\n    const nonOverflow =\r\n      perpendicularOverflowVisible && perpendicularOverflow ? strVisible : strHidden;\r\n    return axisHasOverflow\r\n      ? behaviorStyle // if this axis has an overflow\r\n      : nonOverflow; // if the perp. axis has a visible behavior and has an overflow set 'visible', otherwise set 'hidden'\r\n  };\r\n\r\n  const _overflowStyle = {\r\n    x: getAxisOverflowStyle(overflowBehavior.x, hasOverflow.x, overflowBehavior.y, hasOverflow.y),\r\n    y: getAxisOverflowStyle(overflowBehavior.y, hasOverflow.y, overflowBehavior.x, hasOverflow.x),\r\n  };\r\n\r\n  return {\r\n    _overflowStyle,\r\n    _overflowScroll: {\r\n      x: _overflowStyle.x === strScroll,\r\n      y: _overflowStyle.y === strScroll,\r\n    },\r\n  };\r\n};\r\n","import {\r\n  keys,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  getStyles,\r\n  setStyles,\r\n  removeAttrClass,\r\n  strWidth,\r\n  strOverflowY,\r\n  strOverflowX,\r\n  strScroll,\r\n} from '~/support';\r\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\r\nimport { getShowNativeOverlaidScrollbars } from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { ObserversSetupState } from '~/setups';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\r\nimport type { ViewportOverflowState } from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { Env } from '~/environment';\r\nimport type { WH } from '~/support';\r\nimport type { OverflowStyle, StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupState } from '~/setups/structureSetup';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const ScrollbarsHidingPlugin = /* @__PURE__ */ (() => ({\r\n  [scrollbarsHidingPluginName]: {\r\n    static: () => ({\r\n      _viewportArrangement: (\r\n        structureSetupElements: StructureSetupElementsObj,\r\n        structureSetupState: StructureSetupState,\r\n        observersSetupState: ObserversSetupState,\r\n        env: Env,\r\n        checkOptions: OptionsCheckFn<Options>\r\n      ) => {\r\n        const { _viewportIsTarget, _viewport } = structureSetupElements;\r\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _nativeScrollbarsSize } = env;\r\n        const doViewportArrange =\r\n          !_viewportIsTarget &&\r\n          !_nativeScrollbarsHiding &&\r\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n        const [showNativeOverlaidScrollbars] = getShowNativeOverlaidScrollbars(checkOptions, env);\r\n\r\n        /**\r\n         * Gets the current overflow state of the viewport.\r\n         */\r\n        const readViewportOverflowState = (): ViewportOverflowState => {\r\n          const getStatePerAxis = (styleKey: StyleObjectKey) => {\r\n            const overflowStyle = getStyles(_viewport, styleKey) as OverflowStyle;\r\n            const overflowScroll = overflowStyle === strScroll;\r\n\r\n            return [overflowStyle, overflowScroll] as const;\r\n          };\r\n\r\n          const [xOverflowStyle, xOverflowScroll] = getStatePerAxis(strOverflowX);\r\n          const [yOverflowStyle, yOverflowScroll] = getStatePerAxis(strOverflowY);\r\n\r\n          return {\r\n            _overflowStyle: {\r\n              x: xOverflowStyle,\r\n              y: yOverflowStyle,\r\n            },\r\n            _overflowScroll: {\r\n              x: xOverflowScroll,\r\n              y: yOverflowScroll,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Gets the hide offset matching the passed overflow state.\r\n         * @param viewportOverflowState The overflow state of the viewport\r\n         */\r\n        const _getViewportOverflowHideOffset = (viewportOverflowState: ViewportOverflowState) => {\r\n          const { _overflowScroll } = viewportOverflowState;\r\n          const arrangeHideOffset =\r\n            _nativeScrollbarsHiding || showNativeOverlaidScrollbars ? 0 : 42;\r\n\r\n          const getHideOffsetPerAxis = (\r\n            isOverlaid: boolean,\r\n            overflowScroll: boolean,\r\n            nativeScrollbarSize: number\r\n          ) => {\r\n            const nonScrollbarStylingHideOffset = isOverlaid\r\n              ? arrangeHideOffset\r\n              : nativeScrollbarSize;\r\n            const scrollbarsHideOffset =\r\n              overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n            const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n            return [scrollbarsHideOffset, scrollbarsHideOffsetArrange] as const;\r\n          };\r\n\r\n          const [xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.x,\r\n            _overflowScroll.x,\r\n            _nativeScrollbarsSize.x\r\n          );\r\n          const [yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.y,\r\n            _overflowScroll.y,\r\n            _nativeScrollbarsSize.y\r\n          );\r\n\r\n          return {\r\n            _scrollbarsHideOffset: {\r\n              x: xScrollbarsHideOffset,\r\n              y: yScrollbarsHideOffset,\r\n            },\r\n            _scrollbarsHideOffsetArrange: {\r\n              x: xScrollbarsHideOffsetArrange,\r\n              y: yScrollbarsHideOffsetArrange,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Hides the native scrollbars according to the passed parameters.\r\n         * @param viewportOverflowState The viewport overflow state.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n         * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n         */\r\n        const _hideNativeScrollbars = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          { _directionIsRTL }: ObserversSetupState,\r\n          viewportArrange: boolean\r\n        ): StyleObject | undefined => {\r\n          if (!_viewportIsTarget) {\r\n            const viewportStyleObj: StyleObject = assignDeep(\r\n              {},\r\n              {\r\n                [strMarginRight]: 0,\r\n                [strMarginBottom]: 0,\r\n                [strMarginLeft]: 0,\r\n              }\r\n            );\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const horizontalMarginKey: keyof StyleObject = _directionIsRTL\r\n              ? strMarginLeft\r\n              : strMarginRight;\r\n            const viewportHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingLeft\r\n              : strPaddingRight;\r\n            const horizontalMarginValue = _viewportPaddingStyle[horizontalMarginKey] as number;\r\n            const verticalMarginValue = _viewportPaddingStyle[strMarginBottom] as number;\r\n            const horizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportHorizontalPaddingKey\r\n            ] as number;\r\n            const verticalPaddingValue = _viewportPaddingStyle[strPaddingBottom] as number;\r\n\r\n            // horizontal\r\n            viewportStyleObj[strWidth] = `calc(100% + ${\r\n              hideOffsetY + horizontalMarginValue * -1\r\n            }px)`;\r\n            viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n            // vertical\r\n            viewportStyleObj[strMarginBottom] = -hideOffsetX + verticalMarginValue;\r\n\r\n            // viewport arrange additional styles\r\n            if (viewportArrange) {\r\n              viewportStyleObj[viewportHorizontalPaddingKey] =\r\n                horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n              viewportStyleObj[strPaddingBottom] =\r\n                verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n            }\r\n\r\n            return viewportStyleObj;\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Sets the styles of the viewport arrange element.\r\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n         * @param viewportScrollSize The content scroll size.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n         */\r\n        const _arrangeViewport = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          viewportScrollSize: WH<number>,\r\n          sizeFraction: WH<number>\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _directionIsRTL } = observersSetupState;\r\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingRight\r\n              : strPaddingLeft;\r\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportArrangeHorizontalPaddingKey\r\n            ] as number;\r\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n            const arrangeSize = {\r\n              w:\r\n                hideOffsetY && arrangeY\r\n                  ? `${\r\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                    }px`\r\n                  : '',\r\n              h:\r\n                hideOffsetX && arrangeX\r\n                  ? `${\r\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\r\n                    }px`\r\n                  : '',\r\n            };\r\n\r\n            setStyles(_viewport, {\r\n              '--os-vaw': arrangeSize.w,\r\n              '--os-vah': arrangeSize.h,\r\n            });\r\n          }\r\n\r\n          return doViewportArrange;\r\n        };\r\n\r\n        /**\r\n         * Removes all styles applied because of the viewport arrange strategy.\r\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n         */\r\n        const _undoViewportArrange = (viewportOverflowState?: ViewportOverflowState) => {\r\n          if (doViewportArrange) {\r\n            const finalViewportOverflowState = viewportOverflowState || readViewportOverflowState();\r\n            const { _viewportPaddingStyle: viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffsetArrange } = _getViewportOverflowHideOffset(\r\n              finalViewportOverflowState\r\n            );\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const finalPaddingStyle: StyleObject = {};\r\n            const assignProps = (props: string[]) =>\r\n              each(props, (prop) => {\r\n                finalPaddingStyle[prop as StyleObjectKey] =\r\n                  viewportPaddingStyle[prop as StyleObjectKey];\r\n              });\r\n\r\n            if (arrangeX) {\r\n              assignProps([strMarginBottom, strPaddingTop, strPaddingBottom]);\r\n            }\r\n\r\n            if (arrangeY) {\r\n              assignProps([strMarginLeft, strMarginRight, strPaddingLeft, strPaddingRight]);\r\n            }\r\n\r\n            const prevStyle = getStyles(_viewport, keys(finalPaddingStyle) as StyleObjectKey[]);\r\n            const addArrange = removeAttrClass(\r\n              _viewport,\r\n              dataAttributeViewport,\r\n              dataValueViewportArrange\r\n            );\r\n\r\n            setStyles(_viewport, finalPaddingStyle);\r\n\r\n            return [\r\n              () => {\r\n                setStyles(\r\n                  _viewport,\r\n                  assignDeep(\r\n                    {},\r\n                    prevStyle,\r\n                    _hideNativeScrollbars(\r\n                      finalViewportOverflowState,\r\n                      observersSetupState,\r\n                      doViewportArrange\r\n                    )\r\n                  )\r\n                );\r\n                addArrange();\r\n              },\r\n              finalViewportOverflowState,\r\n            ] as const;\r\n          }\r\n          return [noop] as const;\r\n        };\r\n\r\n        return {\r\n          _getViewportOverflowHideOffset,\r\n          _arrangeViewport,\r\n          _undoViewportArrange,\r\n          _hideNativeScrollbars,\r\n        };\r\n      },\r\n    }),\r\n  },\r\n}))() satisfies StaticPlugin<typeof scrollbarsHidingPluginName>;\r\n","import { animateNumber, noop, selfClearTimeout } from '~/support';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const clickScrollPluginModuleName = '__osClickScrollPlugin';\r\n\r\nexport const ClickScrollPlugin = /* @__PURE__ */ (() => ({\r\n  [clickScrollPluginModuleName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        moveHandleRelative: (deltaMovement: number) => void,\r\n        targetOffset: number,\r\n        handleLength: number,\r\n        onClickScrollCompleted: (stopped: boolean) => void\r\n      ) => {\r\n        // click scroll animation has 2 main parts:\r\n        // 1. the \"click\" which scrolls 100% of the viewport in a certain amount of time\r\n        // 2. the \"press\" which scrolls to the point where the cursor is located, the \"press\" always waits for the \"click\" to finish\r\n        // The \"click\" should not be canceled by a \"pointerup\" event because very fast clicks or taps would cancel it too fast\r\n        // The \"click\" should only be canceled by a subsequent \"pointerdown\" event because otherwise 2 animations would run\r\n        // The \"press\" should be canceld by the next \"pointerup\" event\r\n\r\n        let stopped = false;\r\n        let stopPressAnimation = noop;\r\n        const linearScrollMs = 133;\r\n        const easedScrollMs = 222;\r\n        const [setPressAnimationTimeout, clearPressAnimationTimeout] =\r\n          selfClearTimeout(linearScrollMs);\r\n        const targetOffsetSign = Math.sign(targetOffset);\r\n        const handleLengthWithTargetSign = handleLength * targetOffsetSign;\r\n        const handleLengthWithTargetSignHalf = handleLengthWithTargetSign / 2;\r\n        const easing = (x: number) => 1 - (1 - x) * (1 - x); // easeOutQuad;\r\n        const easedEndPressAnimation = (from: number, to: number) =>\r\n          animateNumber(from, to, easedScrollMs, moveHandleRelative, easing);\r\n        const linearPressAnimation = (linearFrom: number, msFactor: number) =>\r\n          animateNumber(\r\n            linearFrom,\r\n            targetOffset - handleLengthWithTargetSign,\r\n            linearScrollMs * msFactor,\r\n            (progress, _, completed) => {\r\n              moveHandleRelative(progress);\r\n\r\n              if (completed) {\r\n                stopPressAnimation = easedEndPressAnimation(progress, targetOffset);\r\n              }\r\n            }\r\n          );\r\n        const stopClickAnimation = animateNumber(\r\n          0,\r\n          handleLengthWithTargetSign,\r\n          easedScrollMs,\r\n          (clickAnimationProgress, _, clickAnimationCompleted) => {\r\n            moveHandleRelative(clickAnimationProgress);\r\n\r\n            if (clickAnimationCompleted) {\r\n              onClickScrollCompleted(stopped);\r\n\r\n              if (!stopped) {\r\n                const remainingScrollDistance = targetOffset - clickAnimationProgress;\r\n                const continueWithPress =\r\n                  Math.sign(remainingScrollDistance - handleLengthWithTargetSignHalf) ===\r\n                  targetOffsetSign;\r\n\r\n                continueWithPress &&\r\n                  setPressAnimationTimeout(() => {\r\n                    const remainingLinearScrollDistance =\r\n                      remainingScrollDistance - handleLengthWithTargetSign;\r\n                    const linearBridge =\r\n                      Math.sign(remainingLinearScrollDistance) === targetOffsetSign;\r\n\r\n                    stopPressAnimation = linearBridge\r\n                      ? linearPressAnimation(\r\n                          clickAnimationProgress,\r\n                          Math.abs(remainingLinearScrollDistance) / handleLength\r\n                        )\r\n                      : easedEndPressAnimation(clickAnimationProgress, targetOffset);\r\n                  });\r\n              }\r\n            }\r\n          },\r\n          easing\r\n        );\r\n\r\n        return (stopClick?: boolean) => {\r\n          stopped = true;\r\n\r\n          if (stopClick) {\r\n            stopClickAnimation();\r\n          }\r\n\r\n          clearPressAnimationTimeout();\r\n          stopPressAnimation();\r\n        };\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof clickScrollPluginModuleName>;\r\n","import {\r\n  createCache,\r\n  createDOM,\r\n  runEachAndClear,\r\n  addEventListener,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  appendChildren,\r\n  domRectHasDimensions,\r\n  bind,\r\n  noop,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, sizeObserverPluginName } from '~/plugins';\r\nimport type { SizeObserverPlugin } from '~/plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  /** Whether appearing should be observed. */\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = () => () => void;\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const { _appear: observeAppearChange } = options || {};\r\n  const sizeObserverPlugin =\r\n    getStaticPluginModuleInstance<typeof SizeObserverPlugin>(sizeObserverPluginName);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | false>({\r\n    _initialValue: false,\r\n    _alwaysUpdateValues: true,\r\n  });\r\n\r\n  return () => {\r\n    const destroyFns: (() => void)[] = [];\r\n    const baseElements = createDOM(\r\n      `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n    );\r\n    const sizeObserver = baseElements[0] as HTMLElement;\r\n    const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n    const onSizeChangedCallbackProxy = (sizeChangedContext?: ResizeObserverEntry | boolean) => {\r\n      const isResizeObserverCall = sizeChangedContext instanceof ResizeObserverEntry;\r\n\r\n      let skip = false;\r\n      let appear = false;\r\n\r\n      // if triggered from RO.\r\n      if (isResizeObserverCall) {\r\n        const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n          sizeChangedContext.contentRect\r\n        );\r\n        const hasDimensions = domRectHasDimensions(currRContentRect);\r\n        appear = domRectAppeared(currRContentRect, prevContentRect);\r\n        skip = !appear && !hasDimensions; // skip if display is none or when window resize\r\n      }\r\n      // else if it triggered with appear from polyfill\r\n      else {\r\n        appear = sizeChangedContext === true;\r\n      }\r\n\r\n      if (!skip) {\r\n        onSizeChangedCallback({\r\n          _sizeChanged: true,\r\n          _appear: appear,\r\n        });\r\n      }\r\n    };\r\n\r\n    if (ResizeObserverConstructor) {\r\n      const resizeObserverInstance = new ResizeObserverConstructor((entries) =>\r\n        onSizeChangedCallbackProxy(entries.pop())\r\n      );\r\n      resizeObserverInstance.observe(listenerElement);\r\n      push(destroyFns, () => {\r\n        resizeObserverInstance.disconnect();\r\n      });\r\n    } else if (sizeObserverPlugin) {\r\n      const [pluginAppearCallback, pluginDestroyFns] = sizeObserverPlugin(\r\n        listenerElement,\r\n        onSizeChangedCallbackProxy,\r\n        observeAppearChange\r\n      );\r\n      push(\r\n        destroyFns,\r\n        concat(\r\n          [\r\n            addClass(sizeObserver, classNameSizeObserverAppear),\r\n            addEventListener(sizeObserver, 'animationstart', pluginAppearCallback),\r\n          ],\r\n          pluginDestroyFns\r\n        )\r\n      );\r\n    } else {\r\n      return noop;\r\n    }\r\n\r\n    return bind(runEachAndClear, push(destroyFns, appendChildren(target, sizeObserver)));\r\n  };\r\n};\r\n","import {\r\n  createDiv,\r\n  getOffsetSize,\r\n  runEachAndClear,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n  bind,\r\n} from '~/support';\r\nimport { createSizeObserver } from '~/observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from '~/classnames';\r\nimport type { WH, CacheValues } from '~/support';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  construct: () => () => void,\r\n  update: () => void | false | null | undefined | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n    (ioEntryOrSize as WH<number>).h === 0 ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue: IntersectionObserverEntry | WH<number> | undefined,\r\n    fromRecords?: boolean\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n      return (\r\n        heightIntrinsicChanged &&\r\n        !fromRecords &&\r\n        onTrinsicChangedCallback(heightIntrinsic) && [heightIntrinsic]\r\n      );\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    fromRecords: boolean,\r\n    entries: IntersectionObserverEntry[]\r\n  ) => triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n\r\n  return [\r\n    () => {\r\n      const destroyFns: (() => void)[] = [];\r\n\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          bind(intersectionObserverCallback, false),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(destroyFns, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = getOffsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        push(destroyFns, createSizeObserver(trinsicObserver, onSizeChanged)());\r\n        onSizeChanged();\r\n      }\r\n\r\n      return bind(runEachAndClear, push(destroyFns, appendChildren(target, trinsicObserver)));\r\n    },\r\n    () =>\r\n      intersectionObserverInstance &&\r\n      intersectionObserverCallback(true, intersectionObserverInstance.takeRecords()),\r\n  ];\r\n};\r\n","import {\r\n  ResizeObserverConstructor,\r\n  assignDeep,\r\n  closest,\r\n  createCache,\r\n  debounce,\r\n  equalWH,\r\n  getFractionalSize,\r\n  isArray,\r\n  isFunction,\r\n  isNumber,\r\n  keys,\r\n  liesBetween,\r\n  getScrollSize,\r\n  getElementScroll,\r\n  scrollElementTo,\r\n  domRectAppeared,\r\n  concat,\r\n  getStyles,\r\n  hasAttrClass,\r\n} from '~/support';\r\nimport { createDOMObserver, createSizeObserver, createTrinsicObserver } from '~/observers';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbar,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueViewportMeasuring,\r\n  dataValueViewportArrange,\r\n  dataValueNoClipping,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { SizeObserverCallbackParams } from '~/observers';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { Setup, SetupUpdateInfo, StructureSetupState } from '~/setups';\r\nimport type { CacheValues, WH } from '~/support';\r\nimport type { PlainObject } from '~/typings';\r\n\r\nexport interface ObserversSetupState {\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface ObserversSetupUpdateInfo extends SetupUpdateInfo {\r\n  _takeRecords?: boolean;\r\n}\r\n\r\nexport type ObserversSetupUpdateHints = {\r\n  _sizeChanged?: boolean;\r\n  _directionChanged?: boolean;\r\n  _heightIntrinsicChanged?: boolean;\r\n  _hostMutation?: boolean;\r\n  _contentMutation?: boolean;\r\n  _appear?: boolean;\r\n  _scrollbarSizeChanged?: boolean;\r\n};\r\n\r\nexport type ObserversSetup = Setup<\r\n  ObserversSetupUpdateInfo,\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints\r\n>;\r\n\r\nexport const createObserversSetup = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  getCurrentOption: OptionsCheckFn<Options>,\r\n  onObserversUpdated: (updateHints: ObserversSetupUpdateHints) => void\r\n): ObserversSetup => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let updateContentMutationObserver: (() => void) | undefined;\r\n  let destroyContentMutationObserver: (() => void) | undefined;\r\n  let prevContentRect: DOMRectReadOnly | undefined;\r\n  let prevDirectionIsRTL: boolean | undefined;\r\n  const hostSelector = `[${dataAttributeHost}]`;\r\n\r\n  // TODO: observer textarea attrs if textarea\r\n\r\n  const viewportSelector = `[${dataAttributeViewport}]`;\r\n  const baseStyleChangingAttrs = ['id', 'class', 'style', 'open', 'wrap', 'cols', 'rows'];\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _scrollOffsetElement,\r\n    _content,\r\n    _viewportIsTarget,\r\n    _isBody,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n    _removeScrollObscuringStyles,\r\n  } = structureSetupElements;\r\n\r\n  const getDirectionIsRTL = (elm: HTMLElement): boolean => getStyles(elm, 'direction') === 'rtl';\r\n\r\n  const state: ObserversSetupState = {\r\n    _heightIntrinsic: false,\r\n    _directionIsRTL: getDirectionIsRTL(_target),\r\n  };\r\n  const env = getEnvironment();\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const _undoViewportArrange =\r\n        scrollbarsHidingPlugin &&\r\n        scrollbarsHidingPlugin._viewportArrangement(\r\n          structureSetupElements,\r\n          structureSetupState,\r\n          state,\r\n          env,\r\n          getCurrentOption\r\n        )._undoViewportArrange;\r\n\r\n      const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n      const noClipping =\r\n        !viewportIsTargetBody && hasAttrClass(_host, dataAttributeHost, dataValueNoClipping);\r\n      const isArranged = !_viewportIsTarget && _viewportHasClass(dataValueViewportArrange);\r\n      const scrollOffset = isArranged && getElementScroll(_scrollOffsetElement);\r\n      const revertScrollObscuringStyles = scrollOffset && _removeScrollObscuringStyles();\r\n\r\n      const revertMeasuring = _viewportAddRemoveClass(dataValueViewportMeasuring, noClipping);\r\n      const redoViewportArrange = isArranged && _undoViewportArrange && _undoViewportArrange()[0];\r\n      const viewportScroll = getScrollSize(_viewport);\r\n      const fractional = getFractionalSize(_viewport);\r\n\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\r\n      revertScrollObscuringStyles && revertScrollObscuringStyles();\r\n      noClipping && revertMeasuring();\r\n\r\n      return {\r\n        w: viewportScroll.w + fractional.w,\r\n        h: viewportScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n\r\n  const onObserversUpdatedDebounced = debounce(onObserversUpdated, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        concat(keys(prevObj), keys(currObj)).reduce((obj, key) => {\r\n          obj[key] = prevObj[key as keyof typeof prevObj] || currObj[key as keyof typeof currObj];\r\n          return obj;\r\n        }, {} as PlainObject),\r\n      ] as [Partial<ObserversSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const setDirection = (updateHints: ObserversSetupUpdateHints) => {\r\n    const newDirectionIsRTL = getDirectionIsRTL(_target);\r\n    assignDeep(updateHints, { _directionChanged: prevDirectionIsRTL !== newDirectionIsRTL });\r\n    assignDeep(state, { _directionIsRTL: newDirectionIsRTL });\r\n    prevDirectionIsRTL = newDirectionIsRTL;\r\n  };\r\n\r\n  const onTrinsicChanged = (\r\n    heightIntrinsicCache: CacheValues<boolean>,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n\r\n    assignDeep(state, { _heightIntrinsic: heightIntrinsic });\r\n    !fromRecords && onObserversUpdated(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onSizeChanged = ({ _sizeChanged, _appear }: SizeObserverCallbackParams) => {\r\n    const exclusiveSizeChange = _sizeChanged && !_appear;\r\n    const updateFn =\r\n      // use debounceed update:\r\n      // if native scrollbars hiding is supported\r\n      // and if the update is more than just a exclusive sizeChange (e.g. size change + appear, or size change + direction)\r\n      !exclusiveSizeChange && env._nativeScrollbarsHiding\r\n        ? onObserversUpdatedDebounced\r\n        : onObserversUpdated;\r\n\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _sizeChanged: _sizeChanged || _appear,\r\n      _appear,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    updateFn(updateHints);\r\n  };\r\n\r\n  const onContentMutation = (\r\n    contentChangedThroughEvent: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [, _contentMutation] = updateContentSizeCache();\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _contentMutation,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent ? onObserversUpdated : onObserversUpdatedDebounced;\r\n\r\n    _contentMutation && !fromRecords && updateFn(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _hostMutation: targetStyleChanged,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    if (targetStyleChanged && !fromRecords) {\r\n      onObserversUpdatedDebounced(updateHints);\r\n    }\r\n    /*\r\n    else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n    */\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const [constructTrinsicObserver, updateTrinsicObserver] = _content\r\n    ? createTrinsicObserver(_host, onTrinsicChanged)\r\n    : [];\r\n\r\n  const constructSizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n    });\r\n\r\n  const [constructHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: baseStyleChangingAttrs,\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor((entries) => {\r\n      const currContentRect = entries[entries.length - 1].contentRect;\r\n      onSizeChanged({\r\n        _sizeChanged: true,\r\n        _appear: domRectAppeared(currContentRect, prevContentRect),\r\n      });\r\n      prevContentRect = currContentRect;\r\n    });\r\n  const onWindowResizeDebounced = debounce(\r\n    () => {\r\n      const [, _contentMutation] = updateContentSizeCache();\r\n      onObserversUpdated({ _contentMutation });\r\n    },\r\n    {\r\n      _timeout: 222,\r\n      _leading: true,\r\n    }\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      // order is matter!\r\n      // updateViewportAttrsFromHost();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n      const destroySizeObserver = constructSizeObserver && constructSizeObserver();\r\n      const destroyTrinsicObserver = constructTrinsicObserver && constructTrinsicObserver();\r\n      const destroyHostMutationObserver = constructHostMutationObserver();\r\n      const removeResizeListener = env._addResizeListener((_scrollbarSizeChanged) => {\r\n        if (_scrollbarSizeChanged) {\r\n          onObserversUpdatedDebounced({ _scrollbarSizeChanged });\r\n        } else {\r\n          onWindowResizeDebounced();\r\n        }\r\n      });\r\n\r\n      return () => {\r\n        viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n        destroySizeObserver && destroySizeObserver();\r\n        destroyTrinsicObserver && destroyTrinsicObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n        destroyHostMutationObserver();\r\n        removeResizeListener();\r\n      };\r\n    },\r\n    ({ _checkOption, _takeRecords, _force }) => {\r\n      const updateHints: ObserversSetupUpdateHints = {};\r\n\r\n      const [ignoreMutation] = _checkOption('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = _checkOption('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = _checkOption('update.elementEvents');\r\n      const [debounceValue, debounceChanged] = _checkOption('update.debounce');\r\n      const contentMutationObserverChanged = elementEventsChanged || attributesChanged;\r\n      const takeRecords = _takeRecords || _force;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (contentMutationObserverChanged) {\r\n        updateContentMutationObserver && updateContentMutationObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n\r\n        const [construct, update] = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: concat(baseStyleChangingAttrs, attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target: mutationTarget, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(mutationTarget, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(mutationTarget, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n\r\n        destroyContentMutationObserver = construct();\r\n        updateContentMutationObserver = update;\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        onObserversUpdatedDebounced._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n\r\n      if (takeRecords) {\r\n        const hostUpdateResult = updateHostMutationObserver();\r\n        const trinsicUpdateResult = updateTrinsicObserver && updateTrinsicObserver();\r\n        const contentUpdateResult =\r\n          updateContentMutationObserver && updateContentMutationObserver();\r\n\r\n        hostUpdateResult &&\r\n          assignDeep(\r\n            updateHints,\r\n            onHostMutation(hostUpdateResult[0], hostUpdateResult[1], takeRecords)\r\n          );\r\n\r\n        trinsicUpdateResult &&\r\n          assignDeep(updateHints, onTrinsicChanged(trinsicUpdateResult[0], takeRecords));\r\n\r\n        contentUpdateResult &&\r\n          assignDeep(updateHints, onContentMutation(contentUpdateResult[0], takeRecords));\r\n      }\r\n\r\n      setDirection(updateHints);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n  ];\r\n};\r\n","import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  each,\r\n  getTrasformTranslateValue,\r\n  isBoolean,\r\n  parent,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  scrollT,\r\n  bind,\r\n  getElementScroll,\r\n  numberToCssPx,\r\n  setStyles,\r\n  capNumber,\r\n  getScrollCoordinatesPercent,\r\n  isDefaultDirectionScrollCoordinates,\r\n  roundCssNumber,\r\n} from '~/support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\r\nimport type { XY } from '~/support';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { StructureSetupState } from '../structureSetup';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _style: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: () => void;\r\n  _refreshScrollbarsHandleOffset: () => void;\r\n  _refreshScrollbarsScrollbarOffset: () => void;\r\n  _refreshScrollbarsScrollCoordinates: () => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => () => void\r\n];\r\n\r\ntype ScrollbarStyleFn = (\r\n  scrollbarStructure: ScrollbarStructure\r\n) => [HTMLElement | false | null | undefined, StyleObject | false | null | undefined];\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const cssCustomPropViewportPercent = '--os-viewport-percent';\r\n  const cssCustomPropScrollPercent = '--os-scroll-percent';\r\n  const cssCustomPropScrollDirection = '--os-scroll-direction';\r\n  const { _getDefaultInitialization } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n\r\n  const initScrollTimeline = (axis: keyof XY<unknown>) => {\r\n    if (scrollT) {\r\n      const timeline = new scrollT({\r\n        source: _scrollOffsetElement,\r\n        axis,\r\n      });\r\n\r\n      const _addScrollPercentAnimation = (structure: ScrollbarStructure) => {\r\n        const scrollPercentAnimation = structure._scrollbar.animate(\r\n          {\r\n            // dummy keyframe which fixes bug where the scrollbar handle is reverted to origin position when it should be at its max position\r\n            clear: ['left'],\r\n            [cssCustomPropScrollPercent]: [0, 1],\r\n          },\r\n          {\r\n            timeline,\r\n          }\r\n        );\r\n        return () => scrollPercentAnimation.cancel();\r\n      };\r\n\r\n      return {\r\n        _addScrollPercentAnimation,\r\n      };\r\n    }\r\n  };\r\n  const scrollTimeline = {\r\n    x: initScrollTimeline('x'),\r\n    y: initScrollTimeline('y'),\r\n  };\r\n  const getViewportPercent = () => {\r\n    const { _overflowAmount, _overflowEdge } = structureSetupState;\r\n    const getAxisValue = (axisViewportSize: number, axisOverflowAmount: number) =>\r\n      capNumber(0, 1, axisViewportSize / (axisViewportSize + axisOverflowAmount) || 0);\r\n\r\n    return {\r\n      x: getAxisValue(_overflowEdge.x, _overflowAmount.x),\r\n      y: getAxisValue(_overflowEdge.y, _overflowAmount.y),\r\n    };\r\n  };\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: ScrollbarStyleFn\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      setStyles(elm, styles);\r\n    });\r\n  };\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = () => {\r\n    const viewportPercent = getViewportPercent();\r\n    const createScrollbarStyleFn =\r\n      (axisViewportPercent: number): ScrollbarStyleFn =>\r\n      (structure: ScrollbarStructure) =>\r\n        [\r\n          structure._scrollbar,\r\n          {\r\n            [cssCustomPropViewportPercent]: roundCssNumber(axisViewportPercent) + '',\r\n          },\r\n        ];\r\n\r\n    scrollbarStyle(horizontalScrollbars, createScrollbarStyleFn(viewportPercent.x));\r\n    scrollbarStyle(verticalScrollbars, createScrollbarStyleFn(viewportPercent.y));\r\n  };\r\n  const refreshScrollbarsHandleOffset = () => {\r\n    if (!scrollT) {\r\n      const { _scrollCoordinates } = structureSetupState;\r\n      const scrollPercent = getScrollCoordinatesPercent(\r\n        _scrollCoordinates,\r\n        getElementScroll(_scrollOffsetElement)\r\n      );\r\n      const createScrollbarStyleFn =\r\n        (axisScrollPercent: number): ScrollbarStyleFn =>\r\n        (structure: ScrollbarStructure) =>\r\n          [\r\n            structure._scrollbar,\r\n            {\r\n              [cssCustomPropScrollPercent]: roundCssNumber(axisScrollPercent) + '',\r\n            },\r\n          ];\r\n\r\n      scrollbarStyle(horizontalScrollbars, createScrollbarStyleFn(scrollPercent.x));\r\n      scrollbarStyle(verticalScrollbars, createScrollbarStyleFn(scrollPercent.y));\r\n    }\r\n  };\r\n  const refreshScrollbarsScrollCoordinates = () => {\r\n    const { _scrollCoordinates } = structureSetupState;\r\n    const defaultDirectionScroll = isDefaultDirectionScrollCoordinates(_scrollCoordinates);\r\n    const createScrollbarStyleFn =\r\n      (axisIsDefaultDirectionScrollCoordinates: boolean): ScrollbarStyleFn =>\r\n      (structure: ScrollbarStructure) =>\r\n        [\r\n          structure._scrollbar,\r\n          {\r\n            [cssCustomPropScrollDirection]: axisIsDefaultDirectionScrollCoordinates ? '0' : '1',\r\n          },\r\n        ];\r\n\r\n    scrollbarStyle(horizontalScrollbars, createScrollbarStyleFn(defaultDirectionScroll.x));\r\n    scrollbarStyle(verticalScrollbars, createScrollbarStyleFn(defaultDirectionScroll.y));\r\n  };\r\n  const refreshScrollbarsScrollbarOffset = () => {\r\n    if (_viewportIsTarget && !_isBody) {\r\n      const { _overflowAmount, _scrollCoordinates } = structureSetupState;\r\n      const isDefaultDirectionScroll = isDefaultDirectionScrollCoordinates(_scrollCoordinates);\r\n      const scrollPercent = getScrollCoordinatesPercent(\r\n        _scrollCoordinates,\r\n        getElementScroll(_scrollOffsetElement)\r\n      );\r\n      const styleScrollbarPosition: ScrollbarStyleFn = (structure: ScrollbarStructure) => {\r\n        const { _scrollbar } = structure;\r\n        const elm = parent(_scrollbar) === _viewport && _scrollbar;\r\n        const getTranslateValue = (\r\n          axisScrollPercent: number,\r\n          axisOverflowAmount: number,\r\n          axisIsDefaultCoordinates: boolean\r\n        ) => {\r\n          const px = axisOverflowAmount * axisScrollPercent;\r\n          return numberToCssPx(axisIsDefaultCoordinates ? px : -px);\r\n        };\r\n\r\n        return [\r\n          elm,\r\n          elm && {\r\n            transform: getTrasformTranslateValue({\r\n              x: getTranslateValue(scrollPercent.x, _overflowAmount.x, isDefaultDirectionScroll.x),\r\n              y: getTranslateValue(scrollPercent.y, _overflowAmount.y, isDefaultDirectionScroll.y),\r\n            }),\r\n          },\r\n        ];\r\n      };\r\n\r\n      scrollbarStyle(horizontalScrollbars, styleScrollbarPosition);\r\n      scrollbarStyle(verticalScrollbars, styleScrollbarPosition);\r\n    }\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const xyKey = isHorizontal ? 'x' : 'y';\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const scrollbar = createDiv(`${classNameScrollbar} ${scrollbarClassName}`);\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n    const timeline = scrollTimeline[xyKey];\r\n\r\n    push(isHorizontal ? horizontalScrollbars : verticalScrollbars, result);\r\n    push(destroyFns, [\r\n      appendChildren(scrollbar, track),\r\n      appendChildren(track, handle),\r\n      bind(removeElements, scrollbar),\r\n      timeline && timeline._addScrollPercentAnimation(result),\r\n      scrollbarsSetupEvents(result, scrollbarsAddRemoveClass, isHorizontal),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = bind(generateScrollbarDOM, true);\r\n  const generateVerticalScrollbarStructure = bind(generateScrollbarDOM, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    return bind(runEachAndClear, destroyFns);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _refreshScrollbarsScrollCoordinates: refreshScrollbarsScrollCoordinates,\r\n      _refreshScrollbarsScrollbarOffset: refreshScrollbarsScrollbarOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  getOffsetSize,\r\n  addEventListener,\r\n  preventDefault,\r\n  runEachAndClear,\r\n  selfClearTimeout,\r\n  parent,\r\n  closest,\r\n  push,\r\n  bind,\r\n  mathRound,\r\n  strWidth,\r\n  strHeight,\r\n  getElementScroll,\r\n  scrollElementTo,\r\n  getFocusedElement,\r\n  setT,\r\n  hasAttr,\r\n  stopAndPrevent,\r\n  isFunction,\r\n  mathAbs,\r\n  focusElement,\r\n} from '~/support';\r\nimport { clickScrollPluginModuleName, getStaticPluginModuleInstance } from '~/plugins';\r\nimport {\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarInteraction,\r\n  classNameScrollbarWheel,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n} from '~/classnames';\r\nimport type { XY } from '~/support';\r\nimport type { ClickScrollPlugin } from '~/plugins';\r\nimport type { ReadonlyOptions } from '~/options';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarsSetupElementsObj, ScrollbarStructure } from './scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\n\r\nexport type ScrollbarsSetupEvents = (\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\r\n  isHorizontal?: boolean\r\n) => () => void;\r\n\r\nexport const createScrollbarsSetupEvents = (\r\n  options: ReadonlyOptions,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarHandlePointerInteraction: (event: PointerEvent) => void\r\n): ScrollbarsSetupEvents => {\r\n  return (scrollbarStructure, scrollbarsAddRemoveClass, isHorizontal) => {\r\n    const {\r\n      _host,\r\n      _viewport,\r\n      _viewportIsTarget,\r\n      _scrollOffsetElement,\r\n      _documentElm,\r\n      _removeScrollObscuringStyles,\r\n    } = structureSetupElements;\r\n    const { _scrollbar, _track, _handle } = scrollbarStructure;\r\n    const [wheelTimeout, clearWheelTimeout] = selfClearTimeout(333);\r\n    const [scrollSnapScrollTransitionTimeout, clearScrollSnapScrollTransitionTimeout] =\r\n      selfClearTimeout(444);\r\n    const scrollOffsetElementScrollBy = (coordinates: XY<number>) => {\r\n      isFunction(_scrollOffsetElement.scrollBy) &&\r\n        _scrollOffsetElement.scrollBy({\r\n          behavior: 'smooth',\r\n          left: coordinates.x,\r\n          top: coordinates.y,\r\n        });\r\n    };\r\n\r\n    const createInteractiveScrollEvents = () => {\r\n      const releasePointerCaptureEvents = 'pointerup pointercancel lostpointercapture';\r\n      const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}` as 'clientX' | 'clientY';\r\n      const widthHeightKey = isHorizontal ? strWidth : strHeight;\r\n      const leftTopKey = isHorizontal ? 'left' : 'top';\r\n      const whKey = isHorizontal ? 'w' : 'h';\r\n      const xyKey = isHorizontal ? 'x' : 'y';\r\n\r\n      const createRelativeHandleMove =\r\n        (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\r\n          const { _overflowAmount } = structureSetupState;\r\n          const handleTrackDiff = getOffsetSize(_track)[whKey] - getOffsetSize(_handle)[whKey];\r\n          const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\r\n          const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\r\n\r\n          scrollElementTo(_scrollOffsetElement, {\r\n            [xyKey]: mouseDownScroll + scrollDelta,\r\n          });\r\n        };\r\n      const pointerdownCleanupFns: Array<() => void> = [];\r\n\r\n      return addEventListener(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\r\n        const isDragScroll =\r\n          closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\r\n        const pointerCaptureElement = isDragScroll ? _handle : _track;\r\n\r\n        const scrollbarOptions = options.scrollbars;\r\n        const dragClickScrollOption = scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'];\r\n        const { button, isPrimary, pointerType } = pointerDownEvent;\r\n        const { pointers } = scrollbarOptions;\r\n\r\n        const continuePointerDown =\r\n          button === 0 &&\r\n          isPrimary &&\r\n          dragClickScrollOption &&\r\n          (pointers || []).includes(pointerType);\r\n\r\n        if (continuePointerDown) {\r\n          runEachAndClear(pointerdownCleanupFns);\r\n          clearScrollSnapScrollTransitionTimeout();\r\n\r\n          const instantClickScroll =\r\n            !isDragScroll && (pointerDownEvent.shiftKey || dragClickScrollOption === 'instant');\r\n          const getHandleRect = bind(getBoundingClientRect, _handle);\r\n          const getTrackRect = bind(getBoundingClientRect, _track);\r\n          const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\r\n            (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\r\n          const axisScale =\r\n            mathRound(getBoundingClientRect(_scrollOffsetElement)[widthHeightKey]) /\r\n              getOffsetSize(_scrollOffsetElement)[whKey] || 1;\r\n          const moveHandleRelative = createRelativeHandleMove(\r\n            getElementScroll(_scrollOffsetElement)[xyKey],\r\n            1 / axisScale\r\n          );\r\n          const pointerDownOffset = pointerDownEvent[clientXYKey];\r\n          const handleRect = getHandleRect();\r\n          const trackRect = getTrackRect();\r\n          const handleLength = handleRect[widthHeightKey];\r\n          const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\r\n          const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\r\n          const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\r\n          const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            runEachAndClear(pointerupCleanupFns);\r\n            pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\r\n          };\r\n          const nonAnimatedScroll = isDragScroll || instantClickScroll;\r\n          const revertScrollObscuringStyles = _removeScrollObscuringStyles();\r\n\r\n          const pointerupCleanupFns = [\r\n            addEventListener(_documentElm, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_documentElm, 'selectstart', (event: Event) => preventDefault(event), {\r\n              _passive: false,\r\n            }),\r\n            addEventListener(_track, releasePointerCaptureEvents, releasePointerCapture),\r\n            nonAnimatedScroll &&\r\n              addEventListener(_track, 'pointermove', (pointerMoveEvent: PointerEvent) =>\r\n                moveHandleRelative(\r\n                  startOffset + (pointerMoveEvent[clientXYKey] - pointerDownOffset)\r\n                )\r\n              ),\r\n            nonAnimatedScroll &&\r\n              (() => {\r\n                const withoutSnapScrollOffset = getElementScroll(_scrollOffsetElement);\r\n                revertScrollObscuringStyles();\r\n                const withSnapScrollOffset = getElementScroll(_scrollOffsetElement);\r\n                const snapScrollDiff = {\r\n                  x: withSnapScrollOffset.x - withoutSnapScrollOffset.x,\r\n                  y: withSnapScrollOffset.y - withoutSnapScrollOffset.y,\r\n                };\r\n\r\n                if (mathAbs(snapScrollDiff.x) > 3 || mathAbs(snapScrollDiff.y) > 3) {\r\n                  _removeScrollObscuringStyles();\r\n                  scrollElementTo(_scrollOffsetElement, withoutSnapScrollOffset);\r\n                  scrollOffsetElementScrollBy(snapScrollDiff);\r\n                  scrollSnapScrollTransitionTimeout(revertScrollObscuringStyles);\r\n                }\r\n              }),\r\n          ];\r\n\r\n          pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\r\n\r\n          if (instantClickScroll) {\r\n            moveHandleRelative(startOffset);\r\n          } else if (!isDragScroll) {\r\n            const animateClickScroll = getStaticPluginModuleInstance<typeof ClickScrollPlugin>(\r\n              clickScrollPluginModuleName\r\n            );\r\n            if (animateClickScroll) {\r\n              const stopClickScrollAnimation = animateClickScroll(\r\n                moveHandleRelative,\r\n                startOffset,\r\n                handleLength,\r\n                (stopped) => {\r\n                  // if the scroll animation doesn't continue with a press\r\n                  if (stopped) {\r\n                    revertScrollObscuringStyles();\r\n                  } else {\r\n                    push(pointerupCleanupFns, revertScrollObscuringStyles);\r\n                  }\r\n                }\r\n              );\r\n\r\n              push(pointerupCleanupFns, stopClickScrollAnimation);\r\n              push(pointerdownCleanupFns, bind(stopClickScrollAnimation, true));\r\n            }\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    let wheelScrollBy = true;\r\n\r\n    return bind(runEachAndClear, [\r\n      addEventListener(_handle, 'pointermove pointerleave', scrollbarHandlePointerInteraction),\r\n      addEventListener(_scrollbar, 'pointerenter', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\r\n      }),\r\n      addEventListener(_scrollbar, 'pointerleave pointercancel', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, false);\r\n      }),\r\n      // focus viewport when clicking on a scrollbar (mouse only)\r\n      !_viewportIsTarget &&\r\n        addEventListener(_scrollbar, 'mousedown', () => {\r\n          const focusedElement = getFocusedElement();\r\n          if (\r\n            hasAttr(focusedElement, dataAttributeViewport) ||\r\n            hasAttr(focusedElement, dataAttributeHost) ||\r\n            focusedElement === document.body\r\n          ) {\r\n            setT(bind(focusElement, _viewport), 25);\r\n          }\r\n        }),\r\n      // propagate wheel events to viewport when mouse is over scrollbar\r\n      addEventListener(\r\n        _scrollbar,\r\n        'wheel',\r\n        (wheelEvent: WheelEvent) => {\r\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\r\n\r\n          // the first wheel event is swallowed, simulate scroll to compensate for it\r\n          if (wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === _host) {\r\n            scrollOffsetElementScrollBy({\r\n              x: deltaX,\r\n              y: deltaY,\r\n            });\r\n          }\r\n\r\n          wheelScrollBy = false;\r\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\r\n          wheelTimeout(() => {\r\n            wheelScrollBy = true;\r\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\r\n          });\r\n\r\n          preventDefault(wheelEvent);\r\n        },\r\n        { _passive: false, _capture: true }\r\n      ),\r\n      // solve problem of interaction causing click events\r\n      addEventListener(\r\n        _scrollbar,\r\n        'pointerdown',\r\n        // stopPropagation for stopping event propagation (causing click listeners to be invoked)\r\n        // preventDefault to prevent the pointer to cause any actions (e.g. releasing mouse button over an <a> tag causes an navigation)\r\n        bind(addEventListener, _documentElm, 'click', stopAndPrevent, {\r\n          _once: true,\r\n          _capture: true,\r\n          _passive: false,\r\n        }),\r\n        { _capture: true }\r\n      ),\r\n      createInteractiveScrollEvents(),\r\n      clearWheelTimeout,\r\n      clearScrollSnapScrollTransitionTimeout,\r\n    ]);\r\n  };\r\n};\r\n","import {\r\n  bind,\r\n  noop,\r\n  addEventListener,\r\n  push,\r\n  runEachAndClear,\r\n  selfClearTimeout,\r\n  strScroll,\r\n  strVisible,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHideHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n  classNameScrollbarAutoHide,\r\n} from '~/classnames';\r\nimport type { OverflowBehavior, ReadonlyOptions } from '~/options';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n  StructureSetupState,\r\n  StructureSetupUpdateHints,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport { createScrollbarsSetupElements } from './scrollbarsSetup.elements';\r\nimport { createScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n  _structureUpdateHints?: StructureSetupUpdateHints;\r\n}\r\n\r\nexport type ScrollbarsSetup = [\r\n  ...Setup<ScrollbarsSetupUpdateInfo, ScrollbarsSetupState, void>,\r\n  /** The elements created by the scrollbars setup. */\r\n  ScrollbarsSetupElementsObj\r\n];\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  observersSetupState: ObserversSetupState,\r\n  structureSetupState: StructureSetupState,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onScroll: (event: Event) => void\r\n): ScrollbarsSetup => {\r\n  let mouseInHost: boolean | undefined;\r\n  let autoHideIsMove: boolean | undefined;\r\n  let autoHideIsLeave: boolean | undefined;\r\n  let autoHideIsNever: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let instanceAutoHideSuspendScrollDestroyFn = noop;\r\n  let instanceAutoHideDelay = 0;\r\n\r\n  // needed to not fire unnecessary operations for pointer events on safari which will cause side effects: https://github.com/KingSora/OverlayScrollbars/issues/560\r\n  const isHoverablePointerType = (event: PointerEvent) => event.pointerType === 'mouse';\r\n\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [autoHideInstantInteractionTimeout, clearAutoHideInstantInteractionTimeout] =\r\n    selfClearTimeout(100);\r\n  const [autoHideSuspendTimeout, clearAutoHideSuspendTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoHideTimeout] = selfClearTimeout(() => instanceAutoHideDelay);\r\n  const [elements, appendElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    createScrollbarsSetupEvents(\r\n      options,\r\n      structureSetupElements,\r\n      structureSetupState,\r\n      (event) =>\r\n        isHoverablePointerType(event) &&\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        manageScrollbarsAutoHideInstantInteraction()\r\n    )\r\n  );\r\n  const { _host, _scrollEventElement, _isBody } = structureSetupElements;\r\n  const {\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n    _refreshScrollbarsScrollCoordinates,\r\n    _refreshScrollbarsScrollbarOffset,\r\n  } = elements;\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoHideTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHideHidden);\r\n    } else {\r\n      const hide = bind(_scrollbarsAddRemoveClass, classNameScrollbarAutoHideHidden, true);\r\n      if (instanceAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n  const manageScrollbarsAutoHideInstantInteraction = () => {\r\n    if (autoHideIsLeave ? !mouseInHost : !autoHideIsNever) {\r\n      manageScrollbarsAutoHide(true);\r\n      autoHideInstantInteractionTimeout(() => {\r\n        manageScrollbarsAutoHide(false);\r\n      });\r\n    }\r\n  };\r\n  const manageAutoHideSuspension = (add: boolean) => {\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, true);\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, false);\r\n  };\r\n  const onHostMouseEnter = (event: PointerEvent) => {\r\n    if (isHoverablePointerType(event)) {\r\n      mouseInHost = autoHideIsLeave;\r\n      autoHideIsLeave && manageScrollbarsAutoHide(true);\r\n    }\r\n  };\r\n  const destroyFns: (() => void)[] = [\r\n    clearAutoHideTimeout,\r\n    clearAutoHideInstantInteractionTimeout,\r\n    clearAutoHideSuspendTimeout,\r\n    cancelScrollAnimationFrame,\r\n    () => instanceAutoHideSuspendScrollDestroyFn(),\r\n\r\n    addEventListener(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    addEventListener(_host, 'pointerenter', onHostMouseEnter),\r\n    addEventListener(_host, 'pointerleave', (event: PointerEvent) => {\r\n      if (isHoverablePointerType(event)) {\r\n        mouseInHost = false;\r\n        autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n      }\r\n    }),\r\n    addEventListener(_host, 'pointermove', (event: PointerEvent) => {\r\n      isHoverablePointerType(event) &&\r\n        autoHideIsMove &&\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n    }),\r\n    addEventListener(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset();\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _refreshScrollbarsScrollbarOffset();\r\n    }),\r\n  ];\r\n\r\n  return [\r\n    () => bind(runEachAndClear, push(destroyFns, appendElements())),\r\n    ({ _checkOption, _force, _observersUpdateHints, _structureUpdateHints }) => {\r\n      const {\r\n        _overflowEdgeChanged,\r\n        _overflowAmountChanged,\r\n        _overflowStyleChanged,\r\n        _scrollCoordinatesChanged,\r\n      } = _structureUpdateHints || {};\r\n      const { _directionChanged, _appear } = _observersUpdateHints || {};\r\n      const { _directionIsRTL } = observersSetupState;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const { _overflowStyle, _hasOverflow } = structureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        _checkOption('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = _checkOption('scrollbars.theme');\r\n      const [visibility, visibilityChanged] = _checkOption('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] = _checkOption('scrollbars.autoHide');\r\n      const [autoHideSuspend, autoHideSuspendChanged] = _checkOption('scrollbars.autoHideSuspend');\r\n      const [autoHideDelay] = _checkOption('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = _checkOption('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = _checkOption('scrollbars.clickScroll');\r\n      const [overflow, overflowChanged] = _checkOption('overflow');\r\n      const trulyAppeared = _appear && !_force;\r\n      const hasOverflow = _hasOverflow.x || _hasOverflow.y;\r\n      const updateScrollbars =\r\n        _overflowEdgeChanged ||\r\n        _overflowAmountChanged ||\r\n        _scrollCoordinatesChanged ||\r\n        _directionChanged ||\r\n        _force;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged || overflowChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (\r\n        overflowBehavior: OverflowBehavior,\r\n        overflowStyle: OverflowStyle,\r\n        isHorizontal: boolean\r\n      ) => {\r\n        const isVisible =\r\n          overflowBehavior.includes(strScroll) &&\r\n          (visibility === strVisible || (visibility === 'auto' && overflowStyle === strScroll));\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n\r\n        return isVisible;\r\n      };\r\n\r\n      instanceAutoHideDelay = autoHideDelay;\r\n\r\n      if (trulyAppeared) {\r\n        if (autoHideSuspend && hasOverflow) {\r\n          manageAutoHideSuspension(false);\r\n          instanceAutoHideSuspendScrollDestroyFn();\r\n          autoHideSuspendTimeout(() => {\r\n            instanceAutoHideSuspendScrollDestroyFn = addEventListener(\r\n              _scrollEventElement,\r\n              'scroll',\r\n              bind(manageAutoHideSuspension, true),\r\n              {\r\n                _once: true,\r\n              }\r\n            );\r\n          });\r\n        } else {\r\n          manageAutoHideSuspension(true);\r\n        }\r\n      }\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n\r\n      if (autoHideSuspendChanged && !autoHideSuspend) {\r\n        manageAutoHideSuspension(true);\r\n      }\r\n\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideIsNever = autoHide === 'never';\r\n        manageScrollbarsAutoHide(autoHideIsNever, true);\r\n      }\r\n\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, !!clickScroll);\r\n      }\r\n\r\n      // always update scrollbar visibility before scrollbar size\r\n      // the scrollbar size is influenced whether both or just one scrollbar is visible (because of the corner element)\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(overflow.x, _overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(overflow.y, _overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n\r\n      // always update scrollbar sizes after the visibility\r\n      if (updateScrollbars) {\r\n        _refreshScrollbarsHandleOffset();\r\n        _refreshScrollbarsHandleLength();\r\n        _refreshScrollbarsScrollbarOffset();\r\n        _scrollCoordinatesChanged && _refreshScrollbarsScrollCoordinates();\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    {},\r\n    elements,\r\n  ];\r\n};\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  contents,\r\n  parent,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  removeAttrs,\r\n  hasAttrClass,\r\n  addEventListener,\r\n  bind,\r\n  inArray,\r\n  addAttrClass,\r\n  addRemoveAttrClass,\r\n  setAttrs,\r\n  getAttr,\r\n  isBodyElement,\r\n  getFocusedElement,\r\n  wnd,\r\n  focusElement,\r\n  stopAndPrevent,\r\n  getOffsetSize,\r\n  getScrollSize,\r\n  getStyles,\r\n  strOverflowX,\r\n  strOverflowY,\r\n} from '~/support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n  dataAttributeHtmlBody,\r\n  dataValueHostIsHost,\r\n  dataValueViewportScrolling,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n} from '~/initialization';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport { overflowIsVisible } from './structureSetup.utils';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => () => void,\r\n  canceled: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  _originalScrollOffsetElement: HTMLElement;\r\n  // ctx ----\r\n  _isBody: boolean;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _windowElm: () => Window;\r\n  _viewportHasClass: (viewportAttributeClassName: string) => boolean;\r\n  _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) => () => void;\r\n  _removeScrollObscuringStyles: () => () => void;\r\n}\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isBody = isBodyElement(targetElement);\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const getDocumentWindow = () => ownerDocument.defaultView || wnd;\r\n  const staticInitializationElement = bind(generalStaticInitializationElement, [targetElement]);\r\n  const dynamicInitializationElement = bind(generalDynamicInitializationElement, [targetElement]);\r\n  const createNewDiv = bind(createDiv, '');\r\n  const generateViewportElement = bind(\r\n    staticInitializationElement,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = bind(\r\n    dynamicInitializationElement,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const elementHasOverflow = (elm: HTMLElement) => {\r\n    const offsetSize = getOffsetSize(elm);\r\n    const scrollSize = getScrollSize(elm);\r\n    const overflowX = getStyles(elm, strOverflowX);\r\n    const overflowY = getStyles(elm, strOverflowY);\r\n\r\n    return (\r\n      (scrollSize.w - offsetSize.w > 0 && !overflowIsVisible(overflowX)) ||\r\n      (scrollSize.h - offsetSize.h > 0 && !overflowIsVisible(overflowY))\r\n    );\r\n  };\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // viewport element has higher priority and content element will not be generated\r\n  // will act the same way as initialization: `{ elements: { viewport, content: false } }`\r\n  const viewportIsContent = !viewportIsTarget && possibleViewportElement === possibleContentElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : possibleViewportElement;\r\n  const hostElement = viewportIsTargetBody ? viewportElement : targetElement;\r\n  const paddingElement =\r\n    !viewportIsTarget &&\r\n    dynamicInitializationElement(createNewDiv, defaultPaddingInitialization, paddingInitialization);\r\n  const contentElement = !viewportIsContent && possibleContentElement;\r\n  const generatedElements = [contentElement, viewportElement, paddingElement, hostElement].map(\r\n    (elm) => isHTMLElement(elm) && !parent(elm) && elm\r\n  );\r\n  const elementIsGenerated = (elm: HTMLElement | false) => elm && inArray(generatedElements, elm);\r\n  const originalNonBodyScrollOffsetElement =\r\n    !elementIsGenerated(viewportElement) && elementHasOverflow(viewportElement)\r\n      ? viewportElement\r\n      : targetElement;\r\n  const scrollOffsetElement = viewportIsTargetBody ? docElement : viewportElement;\r\n  const scrollEventElement = viewportIsTargetBody ? ownerDocument : viewportElement;\r\n\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding: paddingElement,\r\n    _content: contentElement,\r\n    _scrollOffsetElement: scrollOffsetElement,\r\n    _scrollEventElement: scrollEventElement,\r\n    _originalScrollOffsetElement: isBody ? docElement : originalNonBodyScrollOffsetElement,\r\n    _documentElm: ownerDocument,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _windowElm: getDocumentWindow,\r\n    _viewportHasClass: (viewportAttributeClassName: string) =>\r\n      hasAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName),\r\n    _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) =>\r\n      addRemoveAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName, add),\r\n    _removeScrollObscuringStyles: () =>\r\n      addRemoveAttrClass(\r\n        scrollOffsetElement,\r\n        dataAttributeViewport,\r\n        dataValueViewportScrolling,\r\n        true\r\n      ),\r\n  };\r\n  const { _target, _host, _padding, _viewport, _content } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttrs(_host, [dataAttributeHost, dataAttributeInitialize]);\r\n      removeAttrs(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttrs(docElement, [dataAttributeInitialize, dataAttributeHost]);\r\n      }\r\n    },\r\n  ];\r\n  let targetContents = contents(\r\n    [_content, _viewport, _padding, _host, _target].find((elm) => elm && !elementIsGenerated(elm))\r\n  );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const destroy = bind(runEachAndClear, destroyFns);\r\n  const appendElements = () => {\r\n    const docWnd = getDocumentWindow();\r\n    const initActiveElm = getFocusedElement();\r\n    const unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n      appendChildren(parent(elm), contents(elm));\r\n      removeElements(elm);\r\n    };\r\n    // wrapping / unwrapping will cause the focused element to blur, this should prevent those events to surface\r\n    const prepareWrapUnwrapFocus = (activeElement: Element | false | null | undefined) =>\r\n      addEventListener(activeElement, 'focusin focusout focus blur', stopAndPrevent, {\r\n        _capture: true,\r\n        _passive: false,\r\n      });\r\n    const tabIndexStr = 'tabindex';\r\n    const originalViewportTabIndex = getAttr(_viewport, tabIndexStr);\r\n    const undoInitWrapUndwrapFocus = prepareWrapUnwrapFocus(initActiveElm);\r\n    setAttrs(_host, dataAttributeHost, viewportIsTarget ? '' : dataValueHostIsHost);\r\n    setAttrs(_padding, dataAttributePadding, '');\r\n    setAttrs(_viewport, dataAttributeViewport, '');\r\n    setAttrs(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      setAttrs(_viewport, tabIndexStr, originalViewportTabIndex || '-1');\r\n      isBody && setAttrs(docElement, dataAttributeHtmlBody, '');\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, [\r\n      undoInitWrapUndwrapFocus,\r\n      () => {\r\n        const destroyActiveElm = getFocusedElement();\r\n        const viewportIsGenerated = elementIsGenerated(_viewport);\r\n        // if the focused element is viewport and viewport will be destroyed shift the focus to target\r\n        // otherwise keep the focused element\r\n        const destroyFocusElement =\r\n          viewportIsGenerated && destroyActiveElm === _viewport ? _target : destroyActiveElm;\r\n        const undoDestroyWrapUndwrapFocus = prepareWrapUnwrapFocus(destroyFocusElement);\r\n        removeAttrs(_padding, dataAttributePadding);\r\n        removeAttrs(_content, dataAttributeContent);\r\n        removeAttrs(_viewport, dataAttributeViewport);\r\n        isBody && removeAttrs(docElement, dataAttributeHtmlBody);\r\n        originalViewportTabIndex\r\n          ? setAttrs(_viewport, tabIndexStr, originalViewportTabIndex)\r\n          : removeAttrs(_viewport, tabIndexStr);\r\n\r\n        elementIsGenerated(_content) && unwrap(_content);\r\n        viewportIsGenerated && unwrap(_viewport);\r\n        elementIsGenerated(_padding) && unwrap(_padding);\r\n        focusElement(destroyFocusElement);\r\n        undoDestroyWrapUndwrapFocus();\r\n      },\r\n    ]);\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      addAttrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden);\r\n      push(destroyFns, bind(removeAttrs, _viewport, dataAttributeViewport));\r\n    }\r\n\r\n    // keep the original focused element focused except when\r\n    // the target is body and viewport is not target, then shift the focus to the viewport element\r\n    focusElement(\r\n      !viewportIsTarget && isBody && initActiveElm === _target && docWnd.top === docWnd\r\n        ? _viewport\r\n        : initActiveElm\r\n    );\r\n    undoInitWrapUndwrapFocus();\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n\r\n    return destroy;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, destroy];\r\n};\r\n","import { setStyles, strHeight } from '~/support';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment =\r\n  ({ _content }) =>\r\n  ({ _observersUpdateHints, _observersState, _force }) => {\r\n    const { _heightIntrinsicChanged } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const heightIntrinsicChanged = _content && (_heightIntrinsicChanged || _force);\r\n\r\n    if (heightIntrinsicChanged) {\r\n      setStyles(_content, {\r\n        [strHeight]: _heightIntrinsic && '100%',\r\n      });\r\n    }\r\n  };\r\n","import {\r\n  createCache,\r\n  topRightBottomLeft,\r\n  equalTRBL,\r\n  assignDeep,\r\n  bind,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  setStyles,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  { _host, _padding, _viewport, _viewportIsTarget },\r\n  state\r\n) => {\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    bind(topRightBottomLeft, _host, 'padding', '')\r\n  );\r\n\r\n  return ({ _checkOption, _observersUpdateHints, _observersState, _force }) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(_force);\r\n    const { _nativeScrollbarsHiding } = getEnvironment();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = _observersUpdateHints || {};\r\n    const { _directionIsRTL } = _observersState;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = _checkOption('paddingAbsolute');\r\n    const contentMutation = _force || _contentMutation;\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(_force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_viewportIsTarget && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarsHiding);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        [strMarginRight]: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        [strMarginBottom]: paddingRelative ? -paddingVertical : 0,\r\n        [strMarginLeft]: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        [strWidth]: paddingRelative && `calc(100% + ${paddingHorizontal}px)`,\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        [strPaddingTop]: paddingRelative ? padding.t : 0,\r\n        [strPaddingRight]: paddingRelative ? padding.r : 0,\r\n        [strPaddingBottom]: paddingRelative ? padding.b : 0,\r\n        [strPaddingLeft]: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      setStyles(_padding || _viewport, paddingStyle);\r\n      setStyles(_viewport, viewportStyle);\r\n\r\n      assignDeep(state, {\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  getScrollSize,\r\n  getFractionalSize,\r\n  equalWH,\r\n  getClientSize,\r\n  equalXY,\r\n  assignDeep,\r\n  bind,\r\n  wnd,\r\n  mathMax,\r\n  getWindowSize,\r\n  addRemoveAttrClass,\r\n  capitalizeFirstLetter,\r\n  setStyles,\r\n  strVisible,\r\n  strHidden,\r\n  keys,\r\n  strScroll,\r\n  scrollElementTo,\r\n  getElementScroll,\r\n  sanitizeScrollCoordinates,\r\n  getStyles,\r\n  equal,\r\n  getZeroScrollCoordinates,\r\n  hasDimensions,\r\n  addEventListener,\r\n  stopPropagation,\r\n  rAF,\r\n  hasAttrClass,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataValueNoClipping,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataValueViewportOverflowXPrefix,\r\n  dataValueViewportOverflowYPrefix,\r\n  dataValueViewportNoContent,\r\n  dataValueViewportMeasuring,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { ScrollCoordinates, WH, XY } from '~/support';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins/scrollbarsHidingPlugin';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\nimport {\r\n  createViewportOverflowState,\r\n  getShowNativeOverlaidScrollbars,\r\n  overflowIsVisible,\r\n} from '../structureSetup.utils';\r\n\r\ninterface FlowDirectionStyles {\r\n  display?: string;\r\n  direction?: string;\r\n  flexDirection?: string;\r\n  writingMode?: string;\r\n}\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  structureSetupState\r\n) => {\r\n  const env = getEnvironment();\r\n  const {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportIsTarget,\r\n    _scrollEventElement,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportAddRemoveClass,\r\n    _windowElm,\r\n  } = structureSetupElements;\r\n  const { _nativeScrollbarsHiding } = env;\r\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n  const max0 = bind(mathMax, 0);\r\n  const flowDirectionCanBeNonDefaultMap: Record<\r\n    keyof FlowDirectionStyles,\r\n    (styleValue: string) => boolean\r\n  > = {\r\n    display: () => false,\r\n    direction: (directionStyle) => directionStyle !== 'ltr',\r\n    flexDirection: (flexDirectionStyle) => flexDirectionStyle.endsWith('-reverse'),\r\n    writingMode: (writingModeStyle) => writingModeStyle !== 'horizontal-tb',\r\n  };\r\n  const flowDirectionStyleArr = keys(flowDirectionCanBeNonDefaultMap) as Array<\r\n    keyof FlowDirectionStyles\r\n  >;\r\n  const whCacheOptions = {\r\n    _equal: equalWH,\r\n    _initialValue: { w: 0, h: 0 },\r\n  };\r\n  const partialXYOptions = {\r\n    _equal: equalXY,\r\n    _initialValue: {},\r\n  };\r\n\r\n  const setMeasuringMode = (active: boolean) => {\r\n    // viewportIsTargetBody never needs measuring\r\n    _viewportAddRemoveClass(dataValueViewportMeasuring, !viewportIsTargetBody && active);\r\n  };\r\n\r\n  const getMeasuredScrollCoordinates = (flowDirectionStyles: FlowDirectionStyles) => {\r\n    const flowDirectionCanBeNonDefault = flowDirectionStyleArr.some((styleName) => {\r\n      const styleValue = flowDirectionStyles[styleName];\r\n      return styleValue && flowDirectionCanBeNonDefaultMap[styleName](styleValue);\r\n    });\r\n\r\n    // if the direction can not be non-default return default scroll coordinates (only the sign of the numbers matters)\r\n    if (!flowDirectionCanBeNonDefault) {\r\n      return {\r\n        _start: { x: 0, y: 0 },\r\n        _end: { x: 1, y: 1 },\r\n      };\r\n    }\r\n\r\n    setMeasuringMode(true);\r\n\r\n    const originalScrollOffset = getElementScroll(_scrollOffsetElement);\r\n    const removeNoContent = _viewportAddRemoveClass(dataValueViewportNoContent, true);\r\n    const removeScrollBlock = addEventListener(\r\n      _scrollEventElement,\r\n      strScroll,\r\n      (event) => {\r\n        const scrollEventScrollOffset = getElementScroll(_scrollOffsetElement);\r\n        // if scroll offset didnt change\r\n        if (\r\n          event.isTrusted &&\r\n          scrollEventScrollOffset.x === originalScrollOffset.x &&\r\n          scrollEventScrollOffset.y === originalScrollOffset.y\r\n        ) {\r\n          stopPropagation(event);\r\n        }\r\n      },\r\n      {\r\n        _capture: true,\r\n        _once: true,\r\n      }\r\n    );\r\n\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      x: 0,\r\n      y: 0,\r\n    });\r\n    removeNoContent();\r\n\r\n    const _start = getElementScroll(_scrollOffsetElement);\r\n    const scrollSize = getScrollSize(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      x: scrollSize.w,\r\n      y: scrollSize.h,\r\n    });\r\n\r\n    const tmp = getElementScroll(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      // if tmp is very close start there porbably wasn't any scroll happening so scroll again in different direction\r\n      x: tmp.x - _start.x < 1 && -scrollSize.w,\r\n      y: tmp.y - _start.y < 1 && -scrollSize.h,\r\n    });\r\n\r\n    const _end = getElementScroll(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, originalScrollOffset);\r\n    rAF(() => removeScrollBlock());\r\n\r\n    return {\r\n      _start,\r\n      _end,\r\n    };\r\n  };\r\n  const getOverflowAmount = (\r\n    viewportScrollSize: WH<number>,\r\n    viewportClientSize: WH<number>\r\n  ): WH<number> => {\r\n    const tollerance = wnd.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n    const amount = {\r\n      w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n      h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n    };\r\n\r\n    return {\r\n      w: amount.w > tollerance ? amount.w : 0,\r\n      h: amount.h > tollerance ? amount.h : 0,\r\n    };\r\n  };\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    bind(getFractionalSize, _viewport)\r\n  );\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, bind(getScrollSize, _viewport));\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n  const [updateHasOverflowCache] = createCache<Partial<XY<boolean>>>(partialXYOptions);\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n  const [updateOverflowStyleCache] = createCache<Partial<XY<OverflowStyle>>>(partialXYOptions);\r\n  const [updateFlowDirectionStyles] = createCache<FlowDirectionStyles>(\r\n    {\r\n      _equal: (currVal, newValu) => equal(currVal, newValu, flowDirectionStyleArr),\r\n      _initialValue: {},\r\n    },\r\n    () => (hasDimensions(_viewport) ? getStyles(_viewport, flowDirectionStyleArr) : {})\r\n  );\r\n  const [updateMeasuredScrollCoordinates, getCurrentMeasuredScrollCoordinates] =\r\n    createCache<ScrollCoordinates>({\r\n      _equal: (currVal, newVal) =>\r\n        equalXY(currVal._start, newVal._start) && equalXY(currVal._end, newVal._end),\r\n      _initialValue: getZeroScrollCoordinates(),\r\n    });\r\n\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const createViewportOverflowStyleClassName = (\r\n    overflowStyle: OverflowStyle,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const prefix = isHorizontal\r\n      ? dataValueViewportOverflowXPrefix\r\n      : dataValueViewportOverflowYPrefix;\r\n    return `${prefix}${capitalizeFirstLetter(overflowStyle)}`;\r\n  };\r\n  const setViewportOverflowStyle = (viewportOverflowStyle: XY<OverflowStyle>) => {\r\n    // `createAllOverflowStyleClassNames` and `allOverflowStyleClassNames` could be one scope further up but would increase bundle size\r\n    const createAllOverflowStyleClassNames = (isHorizontal?: boolean) =>\r\n      ([strVisible, strHidden, strScroll] as OverflowStyle[]).map((style) =>\r\n        createViewportOverflowStyleClassName(style, isHorizontal)\r\n      );\r\n    const allOverflowStyleClassNames = createAllOverflowStyleClassNames(true)\r\n      .concat(createAllOverflowStyleClassNames())\r\n      .join(' ');\r\n\r\n    _viewportAddRemoveClass(allOverflowStyleClassNames);\r\n    _viewportAddRemoveClass(\r\n      (keys(viewportOverflowStyle) as Array<keyof typeof viewportOverflowStyle>)\r\n        .map((axis) =>\r\n          createViewportOverflowStyleClassName(viewportOverflowStyle[axis], axis === 'x')\r\n        )\r\n        .join(' '),\r\n      true\r\n    );\r\n  };\r\n\r\n  return (\r\n    { _checkOption, _observersUpdateHints, _observersState, _force },\r\n    { _paddingStyleChanged }\r\n  ) => {\r\n    const { _sizeChanged, _contentMutation, _directionChanged, _appear, _scrollbarSizeChanged } =\r\n      _observersUpdateHints || {};\r\n    const scrollbarsHidingPluginViewportArrangement =\r\n      scrollbarsHidingPlugin &&\r\n      scrollbarsHidingPlugin._viewportArrangement(\r\n        structureSetupElements,\r\n        structureSetupState,\r\n        _observersState,\r\n        env,\r\n        _checkOption\r\n      );\r\n\r\n    const { _arrangeViewport, _undoViewportArrange, _hideNativeScrollbars } =\r\n      scrollbarsHidingPluginViewportArrangement || {};\r\n\r\n    const [showNativeOverlaidScrollbars, showNativeOverlaidScrollbarsChanged] =\r\n      getShowNativeOverlaidScrollbars(_checkOption, env);\r\n    const [overflow, overflowChanged] = _checkOption('overflow');\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n\r\n    const viewportChanged =\r\n      true ||\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      showNativeOverlaidScrollbarsChanged;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(_force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(_force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(_force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(_force);\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(dataValueViewportScrollbarHidden, !showNativeOverlaidScrollbars);\r\n    }\r\n\r\n    if (viewportChanged) {\r\n      if (hasAttrClass(_host, dataAttributeHost, dataValueNoClipping)) {\r\n        setMeasuringMode(true);\r\n      }\r\n\r\n      const [redoViewportArrange] = _undoViewportArrange ? _undoViewportArrange() : [];\r\n\r\n      const [sizeFraction] = (sizeFractionCache = updateSizeFraction(_force));\r\n      const [viewportScrollSize] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(_force));\r\n      const viewportClientSize = getClientSize(_viewport);\r\n      const windowInnerSize = viewportIsTargetBody && getWindowSize(_windowElm());\r\n      const overflowAmountScrollSize = {\r\n        w: max0(viewportScrollSize.w + sizeFraction.w),\r\n        h: max0(viewportScrollSize.h + sizeFraction.h),\r\n      };\r\n\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          (windowInnerSize\r\n            ? windowInnerSize.w\r\n            : viewportClientSize.w + max0(viewportClientSize.w - viewportScrollSize.w)) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          (windowInnerSize\r\n            ? windowInnerSize.h\r\n            : viewportClientSize.h + max0(viewportClientSize.h - viewportScrollSize.h)) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        _force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const [hasOverflow, hasOverflowChanged] = updateHasOverflowCache({\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    });\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n    const adjustViewportStyle =\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      viewportChanged;\r\n    const viewportOverflowState = createViewportOverflowState(hasOverflow, overflow);\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      viewportOverflowState._overflowStyle\r\n    );\r\n    const [flowDirectionStyles, flowDirectionStylesChanged] = updateFlowDirectionStyles(_force);\r\n\r\n    const adjustMeasuredScrollCoordinates =\r\n      _directionChanged || _appear || flowDirectionStylesChanged || hasOverflowChanged || _force;\r\n    const [scrollCoordinates, scrollCoordinatesChanged] = adjustMeasuredScrollCoordinates\r\n      ? updateMeasuredScrollCoordinates(getMeasuredScrollCoordinates(flowDirectionStyles), _force)\r\n      : getCurrentMeasuredScrollCoordinates();\r\n\r\n    if (adjustViewportStyle) {\r\n      overflowStyleChanged && setViewportOverflowStyle(viewportOverflowState._overflowStyle);\r\n\r\n      if (_hideNativeScrollbars && _arrangeViewport) {\r\n        setStyles(\r\n          _viewport,\r\n          _hideNativeScrollbars(\r\n            viewportOverflowState,\r\n            _observersState,\r\n            _arrangeViewport(viewportOverflowState, viewportScrollSize, sizeFraction)\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    setMeasuringMode(false);\r\n\r\n    addRemoveAttrClass(_host, dataAttributeHost, dataValueNoClipping, removeClipping);\r\n    addRemoveAttrClass(_padding, dataAttributePadding, dataValueNoClipping, removeClipping);\r\n\r\n    assignDeep(structureSetupState, {\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n      _scrollCoordinates: sanitizeScrollCoordinates(scrollCoordinates, overflowAmount),\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n      _scrollCoordinatesChanged: scrollCoordinatesChanged || overflowAmountChanged,\r\n      _scrolled: adjustMeasuredScrollCoordinates,\r\n    };\r\n  };\r\n};\r\n","import { getEnvironment } from '~/environment';\r\nimport {\r\n  assignDeep,\r\n  each,\r\n  getElementScroll,\r\n  getZeroScrollCoordinates,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  type TRBL,\r\n  type XY,\r\n} from '~/support';\r\nimport type { ScrollCoordinates } from '~/support';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport { createStructureSetupElements } from './structureSetup.elements';\r\nimport {\r\n  createOverflowUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createTrinsicUpdateSegment,\r\n} from './updateSegments';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n  _scrollCoordinates: ScrollCoordinates;\r\n}\r\n\r\nexport interface StructureSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersState: ObserversSetupState;\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n}\r\n\r\nexport type StructureSetupUpdateHints = {\r\n  _overflowEdgeChanged?: boolean;\r\n  _overflowAmountChanged?: boolean;\r\n  _overflowStyleChanged?: boolean;\r\n  _paddingStyleChanged?: boolean;\r\n  _scrollCoordinatesChanged?: boolean;\r\n};\r\n\r\nexport type StructureSetup = [\r\n  ...Setup<StructureSetupUpdateInfo, StructureSetupState, StructureSetupUpdateHints>,\r\n  /** The elements created by the structure setup. */\r\n  StructureSetupElementsObj,\r\n  /** Function to be called when the initialization was canceled. */\r\n  () => void\r\n];\r\n\r\nexport type StructureUpdateSegment = (\r\n  updateInfo: StructureSetupUpdateInfo,\r\n  updateHints: Readonly<StructureSetupUpdateHints>\r\n) => StructureSetupUpdateHints | void;\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: StructureSetupState\r\n) => StructureUpdateSegment;\r\n\r\nexport const createStructureSetup = (target: InitializationTarget): StructureSetup => {\r\n  const [elements, appendStructureElements, canceled] = createStructureSetupElements(target);\r\n  const state: StructureSetupState = {\r\n    _padding: {\r\n      t: 0,\r\n      r: 0,\r\n      b: 0,\r\n      l: 0,\r\n    },\r\n    _paddingAbsolute: false,\r\n    _viewportPaddingStyle: {\r\n      [strMarginRight]: 0,\r\n      [strMarginBottom]: 0,\r\n      [strMarginLeft]: 0,\r\n      [strPaddingTop]: 0,\r\n      [strPaddingRight]: 0,\r\n      [strPaddingBottom]: 0,\r\n      [strPaddingLeft]: 0,\r\n    },\r\n    _overflowEdge: { x: 0, y: 0 },\r\n    _overflowAmount: { x: 0, y: 0 },\r\n    _overflowStyle: {\r\n      x: strHidden,\r\n      y: strHidden,\r\n    },\r\n    _hasOverflow: {\r\n      x: false,\r\n      y: false,\r\n    },\r\n    _scrollCoordinates: getZeroScrollCoordinates(),\r\n  };\r\n  const { _target, _scrollOffsetElement, _viewportIsTarget, _removeScrollObscuringStyles } =\r\n    elements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const updateSegments: StructureUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(elements, state),\r\n    createPaddingUpdateSegment(elements, state),\r\n    createOverflowUpdateSegment(elements, state),\r\n  ];\r\n\r\n  return [\r\n    appendStructureElements,\r\n    (updateInfo) => {\r\n      const updateHints: StructureSetupUpdateHints = {};\r\n      const adjustScrollOffset = doViewportArrange;\r\n      const scrollOffset = adjustScrollOffset && getElementScroll(_scrollOffsetElement);\r\n      const revertScrollObscuringStyles = scrollOffset && _removeScrollObscuringStyles();\r\n\r\n      each(updateSegments, (updateSegment) => {\r\n        assignDeep(updateHints, updateSegment(updateInfo, updateHints) || {});\r\n      });\r\n\r\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\r\n      revertScrollObscuringStyles && revertScrollObscuringStyles();\r\n      !_viewportIsTarget && scrollElementTo(_target, 0);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n    elements,\r\n    canceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  bind,\r\n  getElementScroll,\r\n  isEmptyObject,\r\n  keys,\r\n  runEachAndClear,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { createOptionCheck } from '~/options';\r\nimport type { OptionsCheckFn, Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { DeepReadonly } from '~/typings';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { ObserversSetupState, ObserversSetupUpdateHints } from './observersSetup';\r\nimport type { StructureSetupState, StructureSetupUpdateHints } from './structureSetup';\r\nimport type { StructureSetupElementsObj } from './structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { createObserversSetup } from './observersSetup';\r\nimport { createScrollbarsSetup } from './scrollbarsSetup';\r\nimport { createStructureSetup } from './structureSetup';\r\n\r\nexport type SetupUpdateHints = Partial<Record<string, boolean>>;\r\n\r\nexport type SetupUpdateInfo = {\r\n  _checkOption: OptionsCheckFn<Options>;\r\n  _changedOptions: PartialOptions;\r\n  _force: boolean;\r\n};\r\n\r\nexport type Setup<\r\n  U extends SetupUpdateInfo,\r\n  S extends Readonly<Record<string, any>>,\r\n  H extends SetupUpdateHints | void\r\n> = [\r\n  /** The create function which returns the `destroy` function. */\r\n  _create: () => () => void,\r\n  /** Function which updates the setup and returns the update result. */\r\n  _update: (updateInfo: U) => H,\r\n  /** Function which returns the current state. */\r\n  _state: S\r\n];\r\n\r\nexport interface SetupsUpdateInfo {\r\n  /** The options that changed or `undefined` if none changed. */\r\n  _changedOptions?: PartialOptions;\r\n  /** Whether chache should be ignored. */\r\n  _force?: boolean;\r\n  /** Whether observers should take their records and thus update as well. */\r\n  _takeRecords?: boolean;\r\n  /** Whether one or more scrollbars has been cloned. */\r\n  _cloneScrollbar?: boolean;\r\n}\r\n\r\nexport interface SetupsUpdateHints {\r\n  readonly _observersUpdateHints: DeepReadonly<ObserversSetupUpdateHints>;\r\n  readonly _structureUpdateHints: DeepReadonly<StructureSetupUpdateHints>;\r\n}\r\n\r\nexport interface SetupsState {\r\n  readonly _observersSetupState: DeepReadonly<ObserversSetupState>;\r\n  readonly _structureSetupState: DeepReadonly<StructureSetupState>;\r\n}\r\n\r\nexport interface SetupsElements {\r\n  readonly _structureSetupElements: DeepReadonly<StructureSetupElementsObj>;\r\n  readonly _scrollbarsSetupElements: DeepReadonly<ScrollbarsSetupElementsObj>;\r\n}\r\n\r\nexport type Setups = [\r\n  construct: () => () => void,\r\n  update: (updateInfo: SetupsUpdateInfo) => boolean,\r\n  getState: () => SetupsState,\r\n  elements: SetupsElements,\r\n  canceled: () => void\r\n];\r\n\r\nexport const createSetups = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  isDestroyed: () => boolean,\r\n  onUpdated: (updateInfo: SetupsUpdateInfo, updateHints: SetupsUpdateHints) => void,\r\n  onScroll: (scrollEvent: Event) => void\r\n): Setups => {\r\n  let cacheAndOptionsInitialized = false;\r\n  const getCurrentOption = createOptionCheck(options, {});\r\n  const [\r\n    structureSetupCreate,\r\n    structureSetupUpdate,\r\n    structureSetupState,\r\n    structureSetupElements,\r\n    structureSetupCanceled,\r\n  ] = createStructureSetup(target);\r\n  const [observersSetupCreate, observersSetupUpdate, observersSetupState] = createObserversSetup(\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    getCurrentOption,\r\n    (observersUpdateHints) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      update({}, observersUpdateHints);\r\n    }\r\n  );\r\n  const [scrollbarsSetupCreate, scrollbarsSetupUpdate, , scrollbarsSetupElements] =\r\n    createScrollbarsSetup(\r\n      target,\r\n      options,\r\n      observersSetupState,\r\n      structureSetupState,\r\n      structureSetupElements,\r\n      onScroll\r\n    );\r\n\r\n  const updateHintsAreTruthy = (hints: SetupUpdateHints) =>\r\n    keys(hints).some((key) => !!hints[key as keyof typeof hints]);\r\n\r\n  const update = (\r\n    updateInfo: SetupsUpdateInfo,\r\n    observerUpdateHints?: ObserversSetupUpdateHints\r\n  ): boolean => {\r\n    if (isDestroyed()) {\r\n      return false;\r\n    }\r\n\r\n    const {\r\n      _changedOptions: rawChangedOptions,\r\n      _force: rawForce,\r\n      _takeRecords,\r\n      _cloneScrollbar,\r\n    } = updateInfo;\r\n\r\n    const _changedOptions = rawChangedOptions || {};\r\n    const _force = !!rawForce || !cacheAndOptionsInitialized;\r\n    const baseUpdateInfoObj: SetupUpdateInfo = {\r\n      _checkOption: createOptionCheck(options, _changedOptions, _force),\r\n      _changedOptions,\r\n      _force,\r\n    };\r\n\r\n    if (_cloneScrollbar) {\r\n      scrollbarsSetupUpdate(baseUpdateInfoObj);\r\n      return false;\r\n    }\r\n\r\n    const observersHints =\r\n      observerUpdateHints ||\r\n      observersSetupUpdate(\r\n        assignDeep({}, baseUpdateInfoObj, {\r\n          _takeRecords,\r\n        })\r\n      );\r\n\r\n    const structureHints = structureSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersState: observersSetupState,\r\n        _observersUpdateHints: observersHints,\r\n      })\r\n    );\r\n\r\n    scrollbarsSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      })\r\n    );\r\n\r\n    const truthyObserversHints = updateHintsAreTruthy(observersHints);\r\n    const truthyStructureHints = updateHintsAreTruthy(structureHints);\r\n    const changed =\r\n      truthyObserversHints || truthyStructureHints || !isEmptyObject(_changedOptions) || _force;\r\n\r\n    cacheAndOptionsInitialized = true;\r\n\r\n    changed &&\r\n      onUpdated(updateInfo, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      });\r\n\r\n    return changed;\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      const { _originalScrollOffsetElement, _scrollOffsetElement, _removeScrollObscuringStyles } =\r\n        structureSetupElements;\r\n      const initialScroll = getElementScroll(_originalScrollOffsetElement);\r\n      const destroyFns = [observersSetupCreate(), structureSetupCreate(), scrollbarsSetupCreate()];\r\n      const revertScrollObscuringStyles = _removeScrollObscuringStyles();\r\n\r\n      scrollElementTo(_scrollOffsetElement, initialScroll);\r\n      revertScrollObscuringStyles();\r\n\r\n      return bind(runEachAndClear, destroyFns);\r\n    },\r\n    update,\r\n    () => ({\r\n      _observersSetupState: observersSetupState,\r\n      _structureSetupState: structureSetupState,\r\n    }),\r\n    {\r\n      _structureSetupElements: structureSetupElements,\r\n      _scrollbarsSetupElements: scrollbarsSetupElements,\r\n    },\r\n    structureSetupCanceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  isFunction,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n  keys,\r\n  isArray,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  removeUndefinedProperties,\r\n} from '~/support';\r\nimport { getOptionsDiff } from '~/options';\r\nimport { getEnvironment } from '~/environment';\r\nimport { cancelInitialization } from '~/initialization';\r\nimport { addInstance, getInstance, removeInstance } from '~/instances';\r\nimport { createSetups } from '~/setups';\r\nimport {\r\n  addPlugins,\r\n  getStaticPluginModuleInstance,\r\n  optionsValidationPluginModuleName,\r\n  pluginModules,\r\n  registerPluginModuleInstances,\r\n} from '~/plugins';\r\nimport type { XY, TRBL } from '~/support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type {\r\n  InferInstancePluginModuleInstance,\r\n  InferStaticPluginModuleInstance,\r\n  InstancePlugin,\r\n  OptionsValidationPlugin,\r\n  Plugin,\r\n  PluginModuleInstance,\r\n  StaticPlugin,\r\n} from '~/plugins';\r\nimport type { Initialization, InitializationTarget, PartialInitialization } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { setNonce } from './nonce';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * Describes the OverlayScrollbars environment.\r\n */\r\nexport interface Environment {\r\n  /** The native scrollbars size of the browser / system. */\r\n  scrollbarsSize: XY<number>;\r\n  /** Whether the native scrollbars are overlaid. */\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  /** Whether the browser supports native scrollbars hiding. */\r\n  scrollbarsHiding: boolean;\r\n  /** Whether the browser supports the ScrollTimeline API. */\r\n  scrollTimeline: boolean;\r\n  /** The default Initialization to use if nothing else is specified. */\r\n  staticDefaultInitialization: Initialization;\r\n  /** The default Options to use if nothing else is specified. */\r\n  staticDefaultOptions: Options;\r\n\r\n  /** Returns the current default Initialization. */\r\n  getDefaultInitialization(): Initialization;\r\n  /** Returns the current default Options. */\r\n  getDefaultOptions(): Options;\r\n\r\n  /**\r\n   * Sets a new default Initialization.\r\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\r\n   * @param newDefaultInitialization The new default Initialization.\r\n   * @returns The current default Initialization.\r\n   */\r\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\r\n  /**\r\n   * Sets new default Options.\r\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\r\n   * @param newDefaultOptions The new default Options.\r\n   * @returns The current default options.\r\n   */\r\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Gets the environment.\r\n   */\r\n  env(): Environment;\r\n  /**\r\n   * Sets the nonce attribute for inline styles.\r\n   */\r\n  nonce(newNonce: string | undefined): void;\r\n  /**\r\n   * Adds a single plugin.\r\n   * @param plugin The plugin to be added.\r\n   * @returns The plugins static modules instance or `void` if no instance was found.\r\n   */\r\n  plugin<P extends Plugin>(\r\n    plugin: P\r\n  ): P extends StaticPlugin ? InferStaticPluginModuleInstance<P> : void;\r\n  /**\r\n   * Adds multiple plugins.\r\n   * @param plugins The plugins to be added.\r\n   * @returns The plugins static modules instances or `void` if no instance was found.\r\n   */\r\n  plugin<P extends [Plugin, ...Plugin[]]>(\r\n    plugins: P\r\n  ): P extends [Plugin, ...Plugin[]]\r\n    ? {\r\n        [K in keyof P]: P[K] extends StaticPlugin ? InferStaticPluginModuleInstance<P[K]> : void;\r\n      }\r\n    : void;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** The scroll coordinates of the viewport. */\r\n  scrollCoordinates: {\r\n    /** The start (origin) scroll coordinates for each axis. */\r\n    start: XY<number>;\r\n    /** The end scroll coordinates for each axis. */\r\n    end: XY<number>;\r\n  };\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Gets the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options which should be applied.\r\n   * @param pure Whether the options should be reset before the new options are added.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure Whether all already added event listeners should be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes a single event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance and removes all added elements. */\r\n  destroy(): void;\r\n  /** Returns the instance of the passed plugin or `undefined` if no instance was found. */\r\n  plugin<P extends InstancePlugin>(osPlugin: P): InferInstancePluginModuleInstance<P> | undefined;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions } = getEnvironment();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const destroyFns: (() => void)[] = [];\r\n    const instancePluginModuleInstances: Record<string, PluginModuleInstance> = {};\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const newOptionsWithoutUndefined = removeUndefinedProperties(newOptions, true);\r\n      const pluginValidate = getStaticPluginModuleInstance<typeof OptionsValidationPlugin>(\r\n        optionsValidationPluginModuleName\r\n      );\r\n      return pluginValidate\r\n        ? pluginValidate(newOptionsWithoutUndefined, true)\r\n        : newOptionsWithoutUndefined;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addPluginEvent, removePluginEvents, triggerPluginEvent] =\r\n      createEventListenerHub<EventListenerArgs>();\r\n    const [addInstanceEvent, removeInstanceEvents, triggerInstanceEvent] =\r\n      createEventListenerHub(eventListeners);\r\n    const triggerEvent: typeof triggerPluginEvent = (name, args) => {\r\n      triggerInstanceEvent(name, args);\r\n      triggerPluginEvent(name, args);\r\n    };\r\n    const [setupsConstruct, setupsUpdate, setupsState, setupsElements, setupsCanceled] =\r\n      createSetups(\r\n        target,\r\n        currentOptions,\r\n        () => destroyed,\r\n        ({ _changedOptions, _force }, { _observersUpdateHints, _structureUpdateHints }) => {\r\n          const {\r\n            _sizeChanged,\r\n            _directionChanged,\r\n            _heightIntrinsicChanged,\r\n            _contentMutation,\r\n            _hostMutation,\r\n            _appear,\r\n          } = _observersUpdateHints;\r\n\r\n          const {\r\n            _overflowEdgeChanged,\r\n            _overflowAmountChanged,\r\n            _overflowStyleChanged,\r\n            _scrollCoordinatesChanged,\r\n          } = _structureUpdateHints;\r\n\r\n          triggerEvent('updated', [\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            instance,\r\n            {\r\n              updateHints: {\r\n                sizeChanged: !!_sizeChanged,\r\n                directionChanged: !!_directionChanged,\r\n                heightIntrinsicChanged: !!_heightIntrinsicChanged,\r\n                overflowEdgeChanged: !!_overflowEdgeChanged,\r\n                overflowAmountChanged: !!_overflowAmountChanged,\r\n                overflowStyleChanged: !!_overflowStyleChanged,\r\n                scrollCoordinatesChanged: !!_scrollCoordinatesChanged,\r\n                contentMutation: !!_contentMutation,\r\n                hostMutation: !!_hostMutation,\r\n                appear: !!_appear,\r\n              },\r\n              changedOptions: _changedOptions || {},\r\n              force: !!_force,\r\n            },\r\n          ]);\r\n        },\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n      );\r\n\r\n    const destroy = (canceled: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      runEachAndClear(destroyFns);\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, canceled]);\r\n      removePluginEvents();\r\n      removeInstanceEvents();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            setupsUpdate({ _changedOptions: changedOptions });\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addInstanceEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeInstanceEvents(name, listener);\r\n      },\r\n      state() {\r\n        const { _observersSetupState, _structureSetupState } = setupsState();\r\n        const { _directionIsRTL } = _observersSetupState;\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n          _scrollCoordinates,\r\n        } = _structureSetupState;\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            scrollCoordinates: {\r\n              start: _scrollCoordinates._start,\r\n              end: _scrollCoordinates._end,\r\n            },\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = setupsElements._structureSetupElements;\r\n        const { _horizontal, _vertical } = setupsElements._scrollbarsSetupElements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              setupsUpdate({ _cloneScrollbar: true });\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (_force?: boolean) => setupsUpdate({ _force, _takeRecords: true }),\r\n      destroy: bind(destroy, false),\r\n      plugin: <P extends InstancePlugin>(plugin: P) =>\r\n        instancePluginModuleInstances[keys(plugin)[0]] as\r\n          | InferInstancePluginModuleInstance<P>\r\n          | undefined,\r\n    };\r\n\r\n    push(destroyFns, [setupsCanceled]);\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    registerPluginModuleInstances(pluginModules, OverlayScrollbars, [\r\n      instance,\r\n      addPluginEvent,\r\n      instancePluginModuleInstances,\r\n    ]);\r\n\r\n    if (\r\n      cancelInitialization(\r\n        setupsElements._structureSetupElements._isBody,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    push(destroyFns, setupsConstruct());\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    instance.update();\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  const isArr = isArray(plugins);\r\n  const pluginsToAdd: Plugin<string, void | PluginModuleInstance, void | PluginModuleInstance>[] =\r\n    isArr ? plugins : [plugins];\r\n  const result = pluginsToAdd.map(\r\n    (plugin) => registerPluginModuleInstances(plugin, OverlayScrollbars)[0]\r\n  );\r\n  addPlugins(pluginsToAdd);\r\n  return isArr ? result : (result[0] as any);\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _scrollTimeline,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      scrollTimeline: _scrollTimeline,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\nOverlayScrollbars.nonce = setNonce;\r\n","/* eslint-disable @typescript-eslint/consistent-type-imports */\r\nimport { Directive, Input, OnChanges, SimpleChanges, NgZone } from '@angular/core';\r\nimport { OverlayScrollbars } from 'overlayscrollbars';\r\nimport type { InitializationTarget } from 'overlayscrollbars';\r\nimport type { OverlayScrollbarsComponent } from './overlayscrollbars.component';\r\n\r\ntype Defer = [\r\n  requestDefer: (callback: () => any, options?: OverlayScrollbarsComponent['defer']) => void,\r\n  cancelDefer: () => void\r\n];\r\n\r\nconst createDefer = (): Defer => {\r\n  /* istanbul ignore next */\r\n  if (typeof window === 'undefined') {\r\n    // mock ssr calls with \"noop\"\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    const noop = () => {};\r\n    return [noop, noop];\r\n  }\r\n\r\n  let idleId: number;\r\n  let rafId: number;\r\n  const wnd = window;\r\n  const idleSupported = typeof wnd.requestIdleCallback === 'function';\r\n  const rAF = wnd.requestAnimationFrame;\r\n  const cAF = wnd.cancelAnimationFrame;\r\n  const rIdle = idleSupported ? wnd.requestIdleCallback : rAF;\r\n  const cIdle = idleSupported ? wnd.cancelIdleCallback : cAF;\r\n  const clear = () => {\r\n    cIdle(idleId);\r\n    cAF(rafId);\r\n  };\r\n\r\n  return [\r\n    (callback, options) => {\r\n      clear();\r\n      idleId = rIdle(\r\n        idleSupported\r\n          ? () => {\r\n              clear();\r\n              // inside idle its best practice to use rAF to change DOM for best performance\r\n              rafId = rAF(callback);\r\n            }\r\n          : callback,\r\n        // @ts-ignore\r\n        typeof options === 'object' ? options : { timeout: 2233 }\r\n      );\r\n    },\r\n    clear,\r\n  ];\r\n};\r\n\r\n@Directive({\r\n  selector: '[overlayScrollbars]', // https://angular.io/guide/styleguide#directive-selectors\r\n})\r\nexport class OverlayScrollbarsDirective implements OnChanges {\r\n  private instanceRef: OverlayScrollbars | null = null;\r\n  private requestDefer: ReturnType<typeof createDefer>[0];\r\n  private cancelDefer: ReturnType<typeof createDefer>[1];\r\n\r\n  @Input('options')\r\n  options?: OverlayScrollbarsComponent['options'];\r\n  @Input('events')\r\n  events?: OverlayScrollbarsComponent['events'];\r\n  @Input('defer')\r\n  defer?: OverlayScrollbarsComponent['defer'];\r\n\r\n  constructor(private ngZone: NgZone) {\r\n    const [requestDefer, cancelDefer] = createDefer();\r\n    this.requestDefer = requestDefer;\r\n    this.cancelDefer = cancelDefer;\r\n  }\r\n\r\n  osInitialize(target: InitializationTarget): void {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      const init = () => {\r\n        this.instanceRef = OverlayScrollbars(\r\n          target,\r\n          this.options || {},\r\n          /* istanbul ignore next */\r\n          this.events || {}\r\n        );\r\n      };\r\n\r\n      if (this.defer) {\r\n        this.requestDefer(init, this.defer);\r\n      } else {\r\n        init();\r\n      }\r\n    });\r\n  }\r\n\r\n  osInstance(): OverlayScrollbars | null {\r\n    return this.instanceRef;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const optionsChange = changes.options;\r\n    const eventsChange = changes.events;\r\n\r\n    if (optionsChange) {\r\n      const curr = optionsChange.currentValue;\r\n\r\n      this.options = curr;\r\n\r\n      if (OverlayScrollbars.valid(this.instanceRef)) {\r\n        this.instanceRef.options(curr || {}, true);\r\n      }\r\n    }\r\n    /* istanbul ignore else */\r\n    if (eventsChange) {\r\n      const curr = eventsChange.currentValue;\r\n\r\n      this.events = curr;\r\n\r\n      if (OverlayScrollbars.valid(this.instanceRef)) {\r\n        this.instanceRef.on(\r\n          /* istanbul ignore next */\r\n          curr || {},\r\n          true\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.cancelDefer();\r\n  }\r\n}\r\n","/* eslint-disable @typescript-eslint/consistent-type-imports */\r\nimport {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  ElementRef,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n  NgZone,\r\n} from '@angular/core';\r\nimport { OverlayScrollbars } from 'overlayscrollbars';\r\nimport type { PartialOptions, EventListeners, EventListenerArgs } from 'overlayscrollbars';\r\nimport { OverlayScrollbarsDirective } from './overlayscrollbars.directive';\r\n\r\nconst mergeEventListeners = (emits: EventListeners, events: EventListeners) =>\r\n  (Object.keys(emits) as (keyof EventListeners)[]).reduce<EventListeners>(\r\n    <N extends keyof EventListeners>(obj: EventListeners, name: N) => {\r\n      const emitListener = emits[name];\r\n      const eventListener = events[name];\r\n      /* istanbul ignore next */\r\n      obj[name] = [\r\n        emitListener,\r\n        ...(Array.isArray(eventListener) ? eventListener : [eventListener]).filter(Boolean),\r\n      ];\r\n      return obj;\r\n    },\r\n    {}\r\n  );\r\n\r\n@Component({\r\n  selector: 'overlay-scrollbars, [overlay-scrollbars]', // https://angular.io/guide/styleguide#component-selectors\r\n  host: { 'data-overlayscrollbars-initialize': '' },\r\n  template: `\r\n    <div\r\n      overlayScrollbars\r\n      data-overlayscrollbars-contents=\"\"\r\n      [options]=\"options\"\r\n      [events]=\"mergeEvents(events)\"\r\n      [defer]=\"defer\"\r\n      #content\r\n    >\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `,\r\n})\r\nexport class OverlayScrollbarsComponent implements OnDestroy, AfterViewInit {\r\n  /** OverlayScrollbars options. */\r\n  @Input('options')\r\n  options?: PartialOptions | false | null;\r\n  /** OverlayScrollbars events. */\r\n  @Input('events')\r\n  events?: EventListeners | false | null;\r\n  /** Whether to defer the initialization to a point in time when the browser is idle. (or to the next frame if `window.requestIdleCallback` is not supported) */\r\n  @Input('defer')\r\n  defer?: boolean | IdleRequestOptions;\r\n\r\n  @Output('osInitialized')\r\n  onInitialized = new EventEmitter<EventListenerArgs['initialized']>();\r\n  @Output('osUpdated')\r\n  onUpdated = new EventEmitter<EventListenerArgs['updated']>();\r\n  @Output('osDestroyed')\r\n  onDestroyed = new EventEmitter<EventListenerArgs['destroyed']>();\r\n  @Output('osScroll')\r\n  onScroll = new EventEmitter<EventListenerArgs['scroll']>();\r\n\r\n  @ViewChild('content')\r\n  private contentRef?: ElementRef<HTMLDivElement>;\r\n  @ViewChild('content', { read: OverlayScrollbarsDirective })\r\n  private osDirective?: OverlayScrollbarsDirective;\r\n\r\n  constructor(private ngZone: NgZone, private targetRef: ElementRef<HTMLElement>) {}\r\n\r\n  osInstance(): OverlayScrollbars | null {\r\n    return this.osDirective!.osInstance();\r\n  }\r\n\r\n  getElement(): HTMLElement {\r\n    return this.targetRef.nativeElement;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    const targetElm = this.getElement();\r\n    const contentElm = this.contentRef!.nativeElement;\r\n\r\n    /* istanbul ignore else */\r\n    if (targetElm && contentElm) {\r\n      this.osDirective!.osInitialize({\r\n        target: targetElm,\r\n        elements: {\r\n          viewport: contentElm,\r\n          content: contentElm,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.osDirective?.osInstance()?.destroy();\r\n  }\r\n\r\n  mergeEvents(originalEvents: OverlayScrollbarsComponent['events']) {\r\n    return mergeEventListeners(\r\n      {\r\n        initialized: (...args) => this.dispatchEventIfHasObservers(this.onInitialized, args),\r\n        updated: (...args) => this.dispatchEventIfHasObservers(this.onUpdated, args),\r\n        destroyed: (...args) => this.dispatchEventIfHasObservers(this.onDestroyed, args),\r\n        scroll: (...args) => this.dispatchEventIfHasObservers(this.onScroll, args),\r\n      },\r\n      originalEvents || {}\r\n    );\r\n  }\r\n\r\n  private dispatchEventIfHasObservers<T>(eventEmitter: EventEmitter<T>, args: T): void {\r\n    // `observed` is available since RxJS@7.2 because `observers` is being deprecated.\r\n    if ((eventEmitter as any).observed || eventEmitter.observers.length > 0) {\r\n      // This is required to re-enter the Angular zone to call the event handler in the Angular\r\n      // zone too. This will not re-enter the Angular zone if emitter doesn't have any observers,\r\n      // for instance, it's being listened: `<overlay-scrollbars (osInitialized)=\"...\"`.\r\n      // Events are dispatched outside of the Angular zone because instance is created in the\r\n      // `<root>` zone, see `OverlayScrollbarsDirective#osInitialize`.\r\n      this.ngZone.run(() => eventEmitter.emit(args));\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { OverlayScrollbarsDirective } from './overlayscrollbars.directive';\r\nimport { OverlayScrollbarsComponent } from './overlayscrollbars.component';\r\n\r\n@NgModule({\r\n  declarations: [OverlayScrollbarsComponent, OverlayScrollbarsDirective],\r\n  exports: [OverlayScrollbarsComponent, OverlayScrollbarsDirective],\r\n})\r\nexport class OverlayscrollbarsModule {}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\n\n/**\n * Internal shared component used as a container in form field controls.\n * Not to be confused with `mat-form-field` which MDC calls a \"text field\".\n * @docs-private\n */\n@Component({\n  // Use a `div` selector to match the old markup closer.\n  selector: 'div[mat-internal-form-field]',\n  template: '<ng-content></ng-content>',\n  styleUrl: 'internal-form-field.css',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mdc-form-field mat-internal-form-field',\n    '[class.mdc-form-field--align-end]': 'labelPosition === \"before\"',\n  },\n})\nexport class _MatInternalFormField {\n  /** Position of the label relative to the content. */\n  @Input({required: true}) labelPosition: 'before' | 'after';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<{}>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function MAT_DATE_LOCALE_FACTORY(): {} {\n  return inject(LOCALE_ID);\n}\n\nconst NOT_IMPLEMENTED = 'Method not implemented';\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D, L = any> {\n  /** The locale to use for all dates. */\n  protected locale: L;\n  protected readonly _localeChanges = new Subject<void>();\n\n  /** A stream that emits when the locale changes. */\n  readonly localeChanges: Observable<void> = this._localeChanges;\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Sets the time of one date to the time of another.\n   * @param target Date whose time will be set.\n   * @param hours New hours to set on the date object.\n   * @param minutes New minutes to set on the date object.\n   * @param seconds New seconds to set on the date object.\n   */\n  setTime(target: D, hours: number, minutes: number, seconds: number): D {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n\n  /**\n   * Gets the hours component of the given date.\n   * @param date The date to extract the hours from.\n   */\n  getHours(date: D): number {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n\n  /**\n   * Gets the minutes component of the given date.\n   * @param date The date to extract the minutes from.\n   */\n  getMinutes(date: D): number {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n\n  /**\n   * Gets the seconds component of the given date.\n   * @param date The date to extract the seconds from.\n   */\n  getSeconds(date: D): number {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n\n  /**\n   * Parses a date with a specific time from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   */\n  parseTime(value: any, parseFormat: any): D | null {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n\n  /**\n   * Adds an amount of seconds to the specified date.\n   * @param date Date to which to add the seconds.\n   * @param amount Amount of seconds to add to the date.\n   */\n  addSeconds(date: D, amount: number): D {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n\n  /**\n   * Given a potential date object, returns that same date object if it is\n   * a valid date, or `null` if it's not a valid date.\n   * @param obj The object to check.\n   * @returns A date or `null`.\n   */\n  getValidDateOrNull(obj: unknown): D | null {\n    return this.isDateInstance(obj) && this.isValid(obj as D) ? (obj as D) : null;\n  }\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || (this.isDateInstance(value) && this.isValid(value))) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: L) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return (\n      this.getYear(first) - this.getYear(second) ||\n      this.getMonth(first) - this.getMonth(second) ||\n      this.getDate(first) - this.getDate(second)\n    );\n  }\n\n  /**\n   * Compares the time values of two dates.\n   * @param first First date to compare.\n   * @param second Second date to compare.\n   * @returns 0 if the times are equal, a number less than 0 if the first time is earlier,\n   *     a number greater than 0 if the first time is later.\n   */\n  compareTime(first: D, second: D): number {\n    return (\n      this.getHours(first) - this.getHours(second) ||\n      this.getMinutes(first) - this.getMinutes(second) ||\n      this.getSeconds(first) - this.getSeconds(second)\n    );\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Checks if the times of two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the times of the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameTime(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      const firstValid = this.isValid(first);\n      const secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareTime(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any;\n    timeInput?: any;\n  };\n  display: {\n    dateInput: any;\n    monthLabel?: any;\n    monthYearLabel: any;\n    dateA11yLabel: any;\n    monthYearA11yLabel: any;\n    timeInput?: any;\n    timeOptionLabel?: any;\n  };\n};\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, Injectable} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings with an out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n  /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n/**\n * Matches a time string. Supported formats:\n * - {{hours}}:{{minutes}}\n * - {{hours}}:{{minutes}}:{{seconds}}\n * - {{hours}}:{{minutes}} AM/PM\n * - {{hours}}:{{minutes}}:{{seconds}} AM/PM\n * - {{hours}}.{{minutes}}\n * - {{hours}}.{{minutes}}.{{seconds}}\n * - {{hours}}.{{minutes}} AM/PM\n * - {{hours}}.{{minutes}}.{{seconds}} AM/PM\n */\nconst TIME_REGEX = /^(\\d?\\d)[:.](\\d?\\d)(?:[:.](\\d?\\d))?\\s*(AM|PM)?$/i;\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /**\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 14.0.0\n   */\n  useUtcForDisplay: boolean = false;\n\n  /** The injected locale. */\n  private readonly _matDateLocale = inject(MAT_DATE_LOCALE, {optional: true});\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n\n    const matDateLocale = inject(MAT_DATE_LOCALE, {optional: true});\n\n    if (matDateLocale !== undefined) {\n      this._matDateLocale = matDateLocale;\n    }\n\n    super.setLocale(this._matDateLocale);\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n    return range(12, i => this._format(dtf, new Date(2017, i, 1)));\n  }\n\n  getDateNames(): string[] {\n    const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n    return range(31, i => this._format(dtf, new Date(2017, 0, i + 1)));\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n    return range(7, i => this._format(dtf, new Date(2017, 0, i + 1)));\n  }\n\n  getYearName(date: Date): string {\n    const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n    return this._format(dtf, date);\n  }\n\n  getFirstDayOfWeek(): number {\n    // At the time of writing `Intl.Locale` isn't available\n    // in the internal types so we need to cast to `any`.\n    if (typeof Intl !== 'undefined' && (Intl as any).Locale) {\n      const locale = new (Intl as any).Locale(this.locale) as {\n        getWeekInfo?: () => {firstDay: number};\n        weekInfo?: {firstDay: number};\n      };\n\n      // Some browsers implement a `getWeekInfo` method while others have a `weekInfo` getter.\n      // Note that this isn't supported in all browsers so we need to null check it.\n      const firstDay = (locale.getWeekInfo?.() || locale.weekInfo)?.firstDay ?? 0;\n\n      // `weekInfo.firstDay` is a number between 1 and 7 where, starting from Monday,\n      // whereas our representation is 0 to 6 where 0 is Sunday so we need to normalize it.\n      return firstDay === 7 ? 0 : firstDay;\n    }\n\n    // Default to Sunday if the browser doesn't provide the week information.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(\n      this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0),\n    );\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // Check for invalid month and date (except upper bound on date which we have to check after\n      // creating the Date).\n      if (month < 0 || month > 11) {\n        throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n      }\n\n      if (date < 1) {\n        throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n      }\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any, parseFormat?: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    const dtf = new Intl.DateTimeFormat(this.locale, {...displayFormat, timeZone: 'utc'});\n    return this._format(dtf, date);\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n      this.getYear(date),\n      this.getMonth(date) + months,\n      this.getDate(date),\n    );\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != (((this.getMonth(date) + months) % 12) + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n      this.getYear(date),\n      this.getMonth(date),\n      this.getDate(date) + days,\n    );\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate()),\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  override deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  override setTime(target: Date, hours: number, minutes: number, seconds: number): Date {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!inRange(hours, 0, 23)) {\n        throw Error(`Invalid hours \"${hours}\". Hours value must be between 0 and 23.`);\n      }\n\n      if (!inRange(minutes, 0, 59)) {\n        throw Error(`Invalid minutes \"${minutes}\". Minutes value must be between 0 and 59.`);\n      }\n\n      if (!inRange(seconds, 0, 59)) {\n        throw Error(`Invalid seconds \"${seconds}\". Seconds value must be between 0 and 59.`);\n      }\n    }\n\n    const clone = this.clone(target);\n    clone.setHours(hours, minutes, seconds, 0);\n    return clone;\n  }\n\n  override getHours(date: Date): number {\n    return date.getHours();\n  }\n\n  override getMinutes(date: Date): number {\n    return date.getMinutes();\n  }\n\n  override getSeconds(date: Date): number {\n    return date.getSeconds();\n  }\n\n  override parseTime(userValue: any, parseFormat?: any): Date | null {\n    if (typeof userValue !== 'string') {\n      return userValue instanceof Date ? new Date(userValue.getTime()) : null;\n    }\n\n    const value = userValue.trim();\n\n    if (value.length === 0) {\n      return null;\n    }\n\n    // Attempt to parse the value directly.\n    let result = this._parseTimeString(value);\n\n    // Some locales add extra characters around the time, but are otherwise parseable\n    // (e.g. `00:05 ч.` in bg-BG). Try replacing all non-number and non-colon characters.\n    if (result === null) {\n      const withoutExtras = value.replace(/[^0-9:(AM|PM)]/gi, '').trim();\n\n      if (withoutExtras.length > 0) {\n        result = this._parseTimeString(withoutExtras);\n      }\n    }\n\n    return result || this.invalid();\n  }\n\n  override addSeconds(date: Date, amount: number): Date {\n    return new Date(date.getTime() + amount * 1000);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setFullYear` and `setHours` instead.\n    const d = new Date();\n    d.setFullYear(year, month, date);\n    d.setHours(0, 0, 0, 0);\n    return d;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containing the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\n    const d = new Date();\n    d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n    return dtf.format(d);\n  }\n\n  /**\n   * Attempts to parse a time string into a date object. Returns null if it cannot be parsed.\n   * @param value Time string to parse.\n   */\n  private _parseTimeString(value: string): Date | null {\n    // Note: we can technically rely on the browser for the time parsing by generating\n    // an ISO string and appending the string to the end of it. We don't do it, because\n    // browsers aren't consistent in what they support. Some examples:\n    // - Safari doesn't support AM/PM.\n    // - Firefox produces a valid date object if the time string has overflows (e.g. 12:75) while\n    //   other browsers produce an invalid date.\n    // - Safari doesn't allow padded numbers.\n    const parsed = value.toUpperCase().match(TIME_REGEX);\n\n    if (parsed) {\n      let hours = parseInt(parsed[1]);\n      const minutes = parseInt(parsed[2]);\n      let seconds: number | undefined = parsed[3] == null ? undefined : parseInt(parsed[3]);\n      const amPm = parsed[4] as 'AM' | 'PM' | undefined;\n\n      if (hours === 12) {\n        hours = amPm === 'AM' ? 0 : hours;\n      } else if (amPm === 'PM') {\n        hours += 12;\n      }\n\n      if (\n        inRange(hours, 0, 23) &&\n        inRange(minutes, 0, 59) &&\n        (seconds == null || inRange(seconds, 0, 59))\n      ) {\n        return this.setTime(this.today(), hours, minutes, seconds || 0);\n      }\n    }\n\n    return null;\n  }\n}\n\n/** Checks whether a number is within a certain range. */\nfunction inRange(value: number, min: number, max: number): boolean {\n  return !isNaN(value) && value >= min && value <= max;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n    timeInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    timeInput: {hour: 'numeric', minute: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n    timeOptionLabel: {hour: 'numeric', minute: 'numeric'},\n  },\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule, Provider} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS, MatDateFormats} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n@NgModule({\n  providers: [{provide: DateAdapter, useClass: NativeDateAdapter}],\n})\nexport class NativeDateModule {}\n\n@NgModule({\n  providers: [provideNativeDateAdapter()],\n})\nexport class MatNativeDateModule {}\n\nexport function provideNativeDateAdapter(\n  formats: MatDateFormats = MAT_NATIVE_DATE_FORMATS,\n): Provider[] {\n  return [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    {provide: MAT_DATE_FORMATS, useValue: formats},\n  ];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {ThemePalette} from '../core';\n\n/** Default `mat-checkbox` options that can be overridden. */\nexport interface MatCheckboxDefaultOptions {\n  /**\n   * Default theme color of the checkbox. This API is supported in M2 themes\n   * only, it has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/checkbox/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  color?: ThemePalette;\n\n  /** Default checkbox click action for checkboxes. */\n  clickAction?: MatCheckboxClickAction;\n\n  /** Whether disabled checkboxes should be interactive. */\n  disabledInteractive?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nexport const MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken<MatCheckboxDefaultOptions>(\n  'mat-checkbox-default-options',\n  {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n  },\n);\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY(): MatCheckboxDefaultOptions {\n  return {\n    color: 'accent',\n    clickAction: 'check-indeterminate',\n    disabledInteractive: false,\n  };\n}\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {_IdGenerator, FocusableOption} from '@angular/cdk/a11y';\nimport {\n  ANIMATION_MODULE_TYPE,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n  booleanAttribute,\n  forwardRef,\n  numberAttribute,\n  inject,\n  HostAttributeToken,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n} from '@angular/forms';\nimport {MatRipple, _MatInternalFormField, _StructuralStylesLoader} from '../core';\nimport {\n  MAT_CHECKBOX_DEFAULT_OPTIONS,\n  MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n  MatCheckboxDefaultOptions,\n} from './checkbox-config';\nimport {_CdkPrivateStyleLoader} from '@angular/cdk/private';\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate,\n}\n\n/**\n * @deprecated Will stop being exported.\n * @breaking-change 19.0.0\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true,\n};\n\n/** Change event object emitted by checkbox. */\nexport class MatCheckboxChange {\n  /** The source checkbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n\n@Component({\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrl: 'checkbox.css',\n  host: {\n    'class': 'mat-mdc-checkbox',\n    '[attr.tabindex]': 'null',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[class.mdc-checkbox--disabled]': 'disabled',\n    '[id]': 'id',\n    // Add classes that users can use to more easily target disabled or checked checkboxes.\n    '[class.mat-mdc-checkbox-disabled]': 'disabled',\n    '[class.mat-mdc-checkbox-checked]': 'checked',\n    '[class.mat-mdc-checkbox-disabled-interactive]': 'disabledInteractive',\n    '[class]': 'color ? \"mat-\" + color : \"mat-accent\"',\n  },\n  providers: [\n    MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR,\n    {\n      provide: NG_VALIDATORS,\n      useExisting: MatCheckbox,\n      multi: true,\n    },\n  ],\n  exportAs: 'matCheckbox',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [MatRipple, _MatInternalFormField],\n})\nexport class MatCheckbox\n  implements AfterViewInit, OnChanges, ControlValueAccessor, Validator, FocusableOption\n{\n  _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  private _ngZone = inject(NgZone);\n  _animationMode? = inject(ANIMATION_MODULE_TYPE, {optional: true});\n  private _options = inject<MatCheckboxDefaultOptions>(MAT_CHECKBOX_DEFAULT_OPTIONS, {\n    optional: true,\n  });\n\n  /** Focuses the checkbox. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Creates the change event that will be emitted by the checkbox. */\n  protected _createChangeEvent(isChecked: boolean) {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = isChecked;\n    return event;\n  }\n\n  /** Gets the element on which to add the animation CSS classes. */\n  protected _getAnimationTargetElement() {\n    return this._inputElement?.nativeElement;\n  }\n\n  /** CSS classes to add when transitioning between the different checkbox states. */\n  protected _animationClasses = {\n    uncheckedToChecked: 'mdc-checkbox--anim-unchecked-checked',\n    uncheckedToIndeterminate: 'mdc-checkbox--anim-unchecked-indeterminate',\n    checkedToUnchecked: 'mdc-checkbox--anim-checked-unchecked',\n    checkedToIndeterminate: 'mdc-checkbox--anim-checked-indeterminate',\n    indeterminateToChecked: 'mdc-checkbox--anim-indeterminate-checked',\n    indeterminateToUnchecked: 'mdc-checkbox--anim-indeterminate-unchecked',\n  };\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /**\n   * Users can specify the `aria-expanded` attribute which will be forwarded to the input element\n   */\n  @Input({alias: 'aria-expanded', transform: booleanAttribute}) ariaExpanded: boolean;\n\n  /**\n   * Users can specify the `aria-controls` attribute which will be forwarded to the input element\n   */\n  @Input('aria-controls') ariaControls: string;\n\n  /** Users can specify the `aria-owns` attribute which will be forwarded to the input element */\n  @Input('aria-owns') ariaOwns: string;\n\n  private _uniqueId: string;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  /** Whether the checkbox is required. */\n  @Input({transform: booleanAttribute}) required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** Whether the checkbox has a ripple. */\n  @Input({transform: booleanAttribute}) disableRipple: boolean;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** The native `<label>` element */\n  @ViewChild('label') _labelElement: ElementRef<HTMLInputElement>;\n\n  /** Tabindex for the checkbox. */\n  @Input({transform: (value: unknown) => (value == null ? undefined : numberAttribute(value))})\n  tabIndex: number;\n\n  // TODO(crisbeto): this should be a ThemePalette, but some internal apps were abusing\n  // the lack of type checking previously and assigning random strings.\n  /**\n   * Theme color of the checkbox. This API is supported in M2 themes only, it\n   * has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/checkbox/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  @Input() color: string | undefined;\n\n  /** Whether the checkbox should remain interactive when it is disabled. */\n  @Input({transform: booleanAttribute})\n  disabledInteractive: boolean;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n  private _validatorChangeFn = () => {};\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n    const tabIndex = inject(new HostAttributeToken('tabindex'), {optional: true});\n    this._options = this._options || defaults;\n    this.color = this._options.color || defaults.color;\n    this.tabIndex = tabIndex == null ? 0 : parseInt(tabIndex) || 0;\n    this.id = this._uniqueId = inject(_IdGenerator).getId('mat-mdc-checkbox-');\n    this.disabledInteractive = this._options?.disabledInteractive ?? false;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['required']) {\n      this._validatorChangeFn();\n    }\n  }\n\n  ngAfterViewInit() {\n    this._syncIndeterminate(this._indeterminate);\n  }\n\n  /** Whether the checkbox is checked. */\n  @Input({transform: booleanAttribute})\n  get checked(): boolean {\n    return this._checked;\n  }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /** Whether the checkbox is disabled. */\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input({transform: booleanAttribute})\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked,\n        );\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n\n    this._syncIndeterminate(this._indeterminate);\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  // Implemented as a part of Validator.\n  validate(control: AbstractControl<boolean>): ValidationErrors | null {\n    return this.required && control.value !== true ? {'required': true} : null;\n  }\n\n  // Implemented as a part of Validator.\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorChangeFn = fn;\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element = this._getAnimationTargetElement();\n\n    if (oldState === newState || !element) {\n      return;\n    }\n    if (this._currentAnimationClass) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n      oldState,\n      newState,\n    );\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element!.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(this._createChangeEvent(this.checked));\n\n    // Assigning the value again here is redundant, but we have to do it in case it was\n    // changed inside the `change` listener which will cause the input to be out of sync.\n    if (this._inputElement) {\n      this._inputElement.nativeElement.checked = this.checked;\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._controlValueAccessorChangeFn(this.checked);\n  }\n\n  protected _handleInputClick() {\n    const clickAction = this._options?.clickAction;\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && clickAction !== 'check') {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this._checked = !this._checked;\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked,\n      );\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (\n      (this.disabled && this.disabledInteractive) ||\n      (!this.disabled && clickAction === 'noop')\n    ) {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  _onBlur() {\n    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n    // Angular does not expect events to be raised during change detection, so any state change\n    // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n    // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n    // telling the form control it has been touched until the next tick.\n    Promise.resolve().then(() => {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n    oldState: TransitionCheckState,\n    newState: TransitionCheckState,\n  ): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          return this._animationClasses.uncheckedToChecked;\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          return this._checked\n            ? this._animationClasses.checkedToIndeterminate\n            : this._animationClasses.uncheckedToIndeterminate;\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        return newState === TransitionCheckState.Checked\n          ? this._animationClasses.uncheckedToChecked\n          : this._animationClasses.uncheckedToIndeterminate;\n      case TransitionCheckState.Checked:\n        return newState === TransitionCheckState.Unchecked\n          ? this._animationClasses.checkedToUnchecked\n          : this._animationClasses.checkedToIndeterminate;\n      case TransitionCheckState.Indeterminate:\n        return newState === TransitionCheckState.Checked\n          ? this._animationClasses.indeterminateToChecked\n          : this._animationClasses.indeterminateToUnchecked;\n    }\n\n    return '';\n  }\n\n  /**\n   * Syncs the indeterminate value with the checkbox DOM node.\n   *\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n   * server-side rendering.\n   */\n  private _syncIndeterminate(value: boolean) {\n    const nativeCheckbox = this._inputElement;\n\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value;\n    }\n  }\n\n  _onInputClick() {\n    this._handleInputClick();\n  }\n\n  _onTouchTargetClick() {\n    this._handleInputClick();\n\n    if (!this.disabled) {\n      // Normally the input should be focused already, but if the click\n      // comes from the touch target, then we might have to focus it ourselves.\n      this._inputElement.nativeElement.focus();\n    }\n  }\n\n  /**\n   *  Prevent click events that come from the `<label/>` element from bubbling. This prevents the\n   *  click handler on the host from triggering twice when clicking on the `<label/>` element. After\n   *  the click event on the `<label/>` propagates, the browsers dispatches click on the associated\n   *  `<input/>`. By preventing clicks on the label by bubbling, we ensure only one click event\n   *  bubbles when the label is clicked.\n   */\n  _preventBubblingFromLabel(event: MouseEvent) {\n    if (!!event.target && this._labelElement.nativeElement.contains(event.target as HTMLElement)) {\n      event.stopPropagation();\n    }\n  }\n}\n","<div mat-internal-form-field [labelPosition]=\"labelPosition\" (click)=\"_preventBubblingFromLabel($event)\">\n  <div #checkbox class=\"mdc-checkbox\">\n    <!-- Render this element first so the input is on top. -->\n    <div class=\"mat-mdc-checkbox-touch-target\" (click)=\"_onTouchTargetClick()\"></div>\n    <input #input\n           type=\"checkbox\"\n           class=\"mdc-checkbox__native-control\"\n           [class.mdc-checkbox--selected]=\"checked\"\n           [attr.aria-label]=\"ariaLabel || null\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-describedby]=\"ariaDescribedby\"\n           [attr.aria-checked]=\"indeterminate ? 'mixed' : null\"\n           [attr.aria-controls]=\"ariaControls\"\n           [attr.aria-disabled]=\"disabled && disabledInteractive ? true : null\"\n           [attr.aria-expanded]=\"ariaExpanded\"\n           [attr.aria-owns]=\"ariaOwns\"\n           [attr.name]=\"name\"\n           [attr.value]=\"value\"\n           [checked]=\"checked\"\n           [indeterminate]=\"indeterminate\"\n           [disabled]=\"disabled && !disabledInteractive\"\n           [id]=\"inputId\"\n           [required]=\"required\"\n           [tabIndex]=\"disabled && !disabledInteractive ? -1 : tabIndex\"\n           (blur)=\"_onBlur()\"\n           (click)=\"_onInputClick()\"\n           (change)=\"_onInteractionEvent($event)\"/>\n    <div class=\"mdc-checkbox__ripple\"></div>\n    <div class=\"mdc-checkbox__background\">\n      <svg class=\"mdc-checkbox__checkmark\"\n           focusable=\"false\"\n           viewBox=\"0 0 24 24\"\n           aria-hidden=\"true\">\n        <path class=\"mdc-checkbox__checkmark-path\"\n              fill=\"none\"\n              d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"/>\n      </svg>\n      <div class=\"mdc-checkbox__mixedmark\"></div>\n    </div>\n    <div class=\"mat-mdc-checkbox-ripple mat-focus-indicator\" mat-ripple\n      [matRippleTrigger]=\"checkbox\"\n      [matRippleDisabled]=\"disableRipple || disabled\"\n      [matRippleCentered]=\"true\"></div>\n  </div>\n  <!--\n    Avoid putting a click handler on the <label/> to fix duplicate navigation stop on Talk Back\n    (#14385). Putting a click handler on the <label/> caused this bug because the browser produced\n    an unnecessary accessibility tree node.\n  -->\n  <label class=\"mdc-label\" #label [for]=\"inputId\">\n    <ng-content></ng-content>\n  </label>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '../core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/**\n * @deprecated No longer used, `MatCheckbox` implements required validation directly.\n * @breaking-change 19.0.0\n */\n@NgModule({\n  imports: [MatCheckboxRequiredValidator],\n  exports: [MatCheckboxRequiredValidator],\n})\nexport class _MatCheckboxRequiredValidatorModule {}\n\n@NgModule({\n  imports: [MatCheckbox, MatCommonModule],\n  exports: [MatCheckbox, MatCommonModule],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  InjectionToken,\n  Input,\n  ViewChild,\n  ViewEncapsulation,\n  numberAttribute,\n  ANIMATION_MODULE_TYPE,\n  inject,\n} from '@angular/core';\nimport {ThemePalette} from '../core';\nimport {NgTemplateOutlet} from '@angular/common';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /**\n   * Default theme color of the progress spinner. This API is supported in M2 themes only, it\n   * has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/progress-spinner/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  color?: ThemePalette;\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n  new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n  });\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n/**\n * Base reference size of the spinner.\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n */\nconst BASE_STROKE_WIDTH = 10;\n\n@Component({\n  selector: 'mat-progress-spinner, mat-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-mdc-progress-spinner mdc-circular-progress',\n    // set tab index to -1 so screen readers will read the aria-label\n    // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n    'tabindex': '-1',\n    '[class]': '\"mat-\" + color',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[class.mdc-circular-progress--indeterminate]': 'mode === \"indeterminate\"',\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[style.--mdc-circular-progress-size]': 'diameter + \"px\"',\n    '[style.--mdc-circular-progress-active-indicator-width]': 'diameter + \"px\"',\n    '[attr.aria-valuemin]': '0',\n    '[attr.aria-valuemax]': '100',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  templateUrl: 'progress-spinner.html',\n  styleUrl: 'progress-spinner.css',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  imports: [NgTemplateOutlet],\n})\nexport class MatProgressSpinner {\n  readonly _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  // TODO: should be typed as `ThemePalette` but internal apps pass in arbitrary strings.\n  /**\n   * Theme color of the progress spinner. This API is supported in M2 themes only, it\n   * has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/progress-spinner/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  @Input()\n  get color() {\n    return this._color || this._defaultColor;\n  }\n  set color(value: string | null | undefined) {\n    this._color = value;\n  }\n  private _color: string | null | undefined;\n  private _defaultColor: ThemePalette = 'primary';\n\n  /** The element of the determinate spinner. */\n  @ViewChild('determinateSpinner') _determinateCircle: ElementRef<HTMLElement>;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const animationMode = inject(ANIMATION_MODULE_TYPE, {optional: true});\n    const defaults = inject<MatProgressSpinnerDefaultOptions>(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS);\n\n    this._noopAnimations =\n      animationMode === 'NoopAnimations' && !!defaults && !defaults._forceAnimations;\n    this.mode =\n      this._elementRef.nativeElement.nodeName.toLowerCase() === 'mat-spinner'\n        ? 'indeterminate'\n        : 'determinate';\n\n    if (defaults) {\n      if (defaults.color) {\n        this.color = this._defaultColor = defaults.color;\n      }\n\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n  }\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: ProgressSpinnerMode;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input({transform: numberAttribute})\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(v: number) {\n    this._value = Math.max(0, Math.min(100, v || 0));\n  }\n  private _value = 0;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input({transform: numberAttribute})\n  get diameter(): number {\n    return this._diameter;\n  }\n  set diameter(size: number) {\n    this._diameter = size || 0;\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input({transform: numberAttribute})\n  get strokeWidth(): number {\n    return this._strokeWidth ?? this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = value || 0;\n  }\n  private _strokeWidth: number;\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  _circleRadius(): number {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  _viewBox() {\n    const viewBox = this._circleRadius() * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius();\n  }\n\n  /** The dash offset of the svg circle. */\n  _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return (this._strokeCircumference() * (100 - this._value)) / 100;\n    }\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  _circleStrokeWidth() {\n    return (this.strokeWidth / this.diameter) * 100;\n  }\n}\n\n/**\n * @deprecated Import Progress Spinner instead. Note that the\n *    `mat-spinner` selector isn't deprecated.\n * @breaking-change 16.0.0\n */\n// tslint:disable-next-line:variable-name\nexport const MatSpinner = MatProgressSpinner;\n","<ng-template #circle>\n  <svg [attr.viewBox]=\"_viewBox()\" class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n       xmlns=\"http://www.w3.org/2000/svg\" focusable=\"false\">\n    <circle [attr.r]=\"_circleRadius()\"\n            [style.stroke-dasharray.px]=\"_strokeCircumference()\"\n            [style.stroke-dashoffset.px]=\"_strokeCircumference() / 2\"\n            [style.stroke-width.%]=\"_circleStrokeWidth()\"\n            cx=\"50%\" cy=\"50%\"/>\n  </svg>\n</ng-template>\n\n<!--\n  All children need to be hidden for screen readers in order to support ChromeVox.\n  More context in the issue: https://github.com/angular/components/issues/22165.\n-->\n<div class=\"mdc-circular-progress__determinate-container\" aria-hidden=\"true\" #determinateSpinner>\n  <svg [attr.viewBox]=\"_viewBox()\" class=\"mdc-circular-progress__determinate-circle-graphic\"\n       xmlns=\"http://www.w3.org/2000/svg\" focusable=\"false\">\n    <circle [attr.r]=\"_circleRadius()\"\n            [style.stroke-dasharray.px]=\"_strokeCircumference()\"\n            [style.stroke-dashoffset.px]=\"_strokeDashOffset()\"\n            [style.stroke-width.%]=\"_circleStrokeWidth()\"\n            class=\"mdc-circular-progress__determinate-circle\"\n            cx=\"50%\" cy=\"50%\"/>\n  </svg>\n</div>\n<!--TODO: figure out why there are 3 separate svgs-->\n<div class=\"mdc-circular-progress__indeterminate-container\" aria-hidden=\"true\">\n  <div class=\"mdc-circular-progress__spinner-layer\">\n    <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-left\">\n      <ng-container [ngTemplateOutlet]=\"circle\"></ng-container>\n    </div>\n    <div class=\"mdc-circular-progress__gap-patch\">\n      <ng-container [ngTemplateOutlet]=\"circle\"></ng-container>\n    </div>\n    <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-right\">\n      <ng-container [ngTemplateOutlet]=\"circle\"></ng-container>\n    </div>\n  </div>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '../core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatProgressSpinner, MatSpinner],\n  exports: [MatProgressSpinner, MatSpinner, MatCommonModule],\n})\nexport class MatProgressSpinnerModule {}\n","import { Directive } from '@angular/core';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\n@Directive({\n    selector: '[ngxMatSelectSearchClear]',\n    standalone: false\n})\nexport class MatSelectSearchClearDirective {}\n","<!--\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n-->\n<!-- Placeholder to adjust vertical offset of the mat-option elements -->\n<input matInput class=\"mat-select-search-input mat-select-search-hidden\"/>\n\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\n<div\n      #innerSelectSearch\n      class=\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\"\n      [ngClass]=\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\">\n\n  <div class=\"mat-select-search-inner-row\">\n    <mat-checkbox *ngIf=\"_isToggleAllCheckboxVisible()\"\n                  [color]=\"matFormField?.color\"\n                  class=\"mat-select-search-toggle-all-checkbox\"\n                  [checked]=\"toggleAllCheckboxChecked\"\n                  [indeterminate]=\"toggleAllCheckboxIndeterminate\"\n                  [matTooltip]=\"toggleAllCheckboxTooltipMessage\"\n                  matTooltipClass=\"ngx-mat-select-search-toggle-all-tooltip\"\n                  [matTooltipPosition]=\"toggleAllCheckboxTooltipPosition\"\n                  (change)=\"_emitSelectAllBooleanToParent($event.checked)\"\n    ></mat-checkbox>\n\n    <input class=\"mat-select-search-input\"\n           autocomplete=\"off\"\n           [type]=\"type\"\n           [formControl]=\"_formControl\"\n           #searchSelectInput\n           (keydown)=\"_handleKeydown($event)\"\n           (keyup)=\"_handleKeyup($event)\"\n           (blur)=\"onBlur()\"\n           [placeholder]=\"placeholderLabel\"\n           [attr.aria-label]=\"ariaLabel\"\n    />\n    <mat-spinner *ngIf=\"searching\"\n            class=\"mat-select-search-spinner\"\n            diameter=\"16\"></mat-spinner>\n\n    <button *ngIf=\"!hideClearSearchButton && value && !searching\"\n            mat-icon-button\n            aria-label=\"Clear\"\n            (click)=\"_reset(true)\"\n            class=\"mat-select-search-clear\">\n      <ng-content *ngIf=\"clearIcon; else defaultIcon\" select=\"[ngxMatSelectSearchClear]\"></ng-content>\n      <ng-template #defaultIcon>\n        <mat-icon [svgIcon]=\"closeSvgIcon\">\n          {{!closeSvgIcon ? closeIcon : null}}\n        </mat-icon>\n      </ng-template>\n    </button>\n\n    <ng-content select=\".mat-select-search-custom-header-content\"></ng-content>\n  </div>\n\n  <mat-divider></mat-divider>\n</div>\n\n<div *ngIf=\"_showNoEntriesFound$ | async\"\n     class=\"mat-select-search-no-entries-found\">\n  <ng-content *ngIf=\"noEntriesFound; else defaultNoEntriesFound\"\n              select=\"[ngxMatSelectNoEntriesFound]\"></ng-content>\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\n</div>\n\n","import { InjectionToken } from '@angular/core';\nimport { MatSelectSearchComponent } from './mat-select-search.component';\n\n/** List of inputs of NgxMatSelectSearchComponent that can be configured with a global default. */\nexport const configurableDefaultOptions = [\n  'ariaLabel',\n  'clearSearchInput',\n  'closeIcon',\n  'closeSvgIcon',\n  'disableInitialFocus',\n  'disableScrollToActiveOnOptionsChanged',\n  'enableClearOnEscapePressed',\n  'hideClearSearchButton',\n  'noEntriesFoundLabel',\n  'placeholderLabel',\n  'preventHomeEndKeyPropagation',\n  'searching',\n] as const;\n\nexport type ConfigurableDefaultOptions = typeof configurableDefaultOptions[number];\n\n/**\n * InjectionToken that can be used to specify global options. e.g.\n *\n * ```typescript\n * providers: [\n *   {\n *     provide: MAT_SELECTSEARCH_DEFAULT_OPTIONS,\n *     useValue: <MatSelectSearchOptions>{\n *       closeIcon: 'delete',\n *       noEntriesFoundLabel: 'No options found'\n *     }\n *   }\n * ]\n * ```\n *\n * See the corresponding inputs of `MatSelectSearchComponent` for documentation.\n */\nexport const MAT_SELECTSEARCH_DEFAULT_OPTIONS = new InjectionToken<MatSelectSearchOptions>('mat-selectsearch-default-options');\n\n/** Global configurable options for MatSelectSearch. */\nexport type MatSelectSearchOptions = Readonly<Partial<Pick<MatSelectSearchComponent, ConfigurableDefaultOptions>>>;\n","import { Directive } from '@angular/core';\n\n/**\n * Directive for providing a custom no entries found element.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <span ngxMatSelectNoEntriesFound>\n *     No entries found <button>Add</button>\n *   </span>\n * </ngx-mat-select-search>\n */\n@Directive({\n  selector: '[ngxMatSelectNoEntriesFound]',\n  standalone: false\n})\nexport class MatSelectNoEntriesFoundDirective {}\n","/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatOption } from '@angular/material/core';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MatSelect } from '@angular/material/select';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport { delay, filter, map, startWith, switchMap, take, takeUntil, tap } from 'rxjs/operators';\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\nimport { configurableDefaultOptions, MAT_SELECTSEARCH_DEFAULT_OPTIONS, MatSelectSearchOptions } from './default-options';\nimport { MatSelectNoEntriesFoundDirective } from './mat-select-no-entries-found.directive';\n\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\n@Component({\n  selector: 'ngx-mat-select-search',\n  standalone: false,\n  templateUrl: './mat-select-search.component.html',\n  styleUrls: ['./mat-select-search.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSelectSearchComponent),\n      multi: true\n    }\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectSearchComponent implements OnInit, OnDestroy, ControlValueAccessor {\n\n  /** Label of the search placeholder */\n  @Input() placeholderLabel = 'Suche';\n\n  /** Type of the search input field */\n  @Input() type = 'text';\n\n  /** Font-based icon used for displaying Close-Icon */\n  @Input() closeIcon = 'close';\n\n  /** SVG-based icon used for displaying Close-Icon. If set, closeIcon is overridden */\n  @Input() closeSvgIcon?: string;\n\n  /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n  @Input() noEntriesFoundLabel = 'Keine Optionen gefunden';\n\n  /**\n    * Whether the search field should be cleared after the dropdown menu is closed.\n    * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n    */\n  @Input() clearSearchInput = true;\n\n  /** Whether to show the search-in-progress indicator */\n  @Input() searching = false;\n\n  /** Disables initial focusing of the input field */\n  @Input() disableInitialFocus = false;\n\n  /** Enable clear input on escape pressed */\n  @Input() enableClearOnEscapePressed = false;\n\n  /**\n   * Prevents home / end key being propagated to mat-select,\n   * allowing to move the cursor within the search input instead of navigating the options\n   */\n  @Input() preventHomeEndKeyPropagation = false;\n\n  /** Disables scrolling to active options when option list changes. Useful for server-side search */\n  @Input() disableScrollToActiveOnOptionsChanged = false;\n\n  /** Adds 508 screen reader support for search box */\n  @Input() ariaLabel = 'dropdown search';\n\n  /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n  @Input() showToggleAllCheckbox = false;\n\n  /** Select all checkbox checked state */\n  @Input() toggleAllCheckboxChecked = false;\n\n  /** select all checkbox indeterminate state */\n  @Input() toggleAllCheckboxIndeterminate = false;\n\n  /** Display a message in a tooltip on the toggle-all checkbox */\n  @Input() toggleAllCheckboxTooltipMessage = '';\n\n  /** Define the position of the tooltip on the toggle-all checkbox. */\n  @Input() toggleAllCheckboxTooltipPosition: 'left' | 'right' | 'above' | 'below' | 'before' | 'after' = 'below';\n\n  /** Show/Hide the search clear button of the search input */\n  @Input() hideClearSearchButton = false;\n\n  /**\n   * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n   * Defaults to false, so selected options are only restored while filtering is active.\n   */\n  @Input() alwaysRestoreSelectedOptionsMulti = false;\n\n  /**\n   * Recreate array of selected values for multi-selects.\n   *\n   * This is useful if the selected values are stored in an immutable data structure.\n   */\n  @Input() recreateValuesArray = false;\n\n  /** Output emitter to send to parent component with the toggle all boolean */\n  @Output() toggleAll = new EventEmitter<boolean>();\n\n  /** Reference to the search input field */\n  @ViewChild('searchSelectInput', { read: ElementRef, static: true }) searchSelectInput: ElementRef;\n\n  /** Reference to the search input field */\n  @ViewChild('innerSelectSearch', { read: ElementRef, static: true }) innerSelectSearch: ElementRef;\n\n  /** Reference to custom search input clear icon */\n  @ContentChild(MatSelectSearchClearDirective) clearIcon: MatSelectSearchClearDirective;\n\n  /** Reference to custom no entries found element */\n  @ContentChild(MatSelectNoEntriesFoundDirective) noEntriesFound: MatSelectNoEntriesFoundDirective;\n\n  /** Current search value */\n  get value(): string {\n    return this._formControl.value;\n  }\n  private _lastExternalInputValue?: string;\n\n  onTouched: Function = (_: any) => { };\n\n  /** Reference to the MatSelect options */\n  public set _options(_options: QueryList<MatOption>) {\n    this._options$.next(_options);\n  }\n  public get _options(): QueryList<MatOption> {\n    return this._options$.getValue();\n  }\n  public _options$: BehaviorSubject<QueryList<MatOption>> = new BehaviorSubject<QueryList<MatOption>>(null as any);\n\n  private optionsList$: Observable<MatOption[] | null> = this._options$.pipe(\n    switchMap(_options => _options ?\n      _options.changes.pipe(\n        map(options => options.toArray()),\n        startWith<MatOption[]>(_options.toArray()),\n      ) : of(null)\n    )\n  );\n\n  private optionsLength$: Observable<number> = this.optionsList$.pipe(\n    map(options => options ? options.length : 0)\n  );\n\n  /** Previously selected values when using <mat-select [multiple]=\"true\">*/\n  private previousSelectedValues: any[];\n\n  public _formControl: FormControl<string> = new FormControl<string>('', {nonNullable: true});\n\n  /** Whether to show the no entries found message */\n  public _showNoEntriesFound$: Observable<boolean> = combineLatest([\n    this._formControl.valueChanges,\n    this.optionsLength$\n  ]).pipe(\n    map(([value, optionsLength]) => !!(this.noEntriesFoundLabel && value\n      && optionsLength === this.getOptionsLengthOffset()))\n  );\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  /** Reference to active descendant for ARIA Support. */\n  private activeDescendant: HTMLElement;\n\n  constructor(@Inject(MatSelect) public matSelect: MatSelect,\n    public changeDetectorRef: ChangeDetectorRef,\n    private _viewportRuler: ViewportRuler,\n    @Optional() @Inject(MatOption) public matOption: MatOption,\n    @Optional() @Inject(MatFormField) public matFormField: MatFormField,\n    @Optional() @Inject(MAT_SELECTSEARCH_DEFAULT_OPTIONS) defaultOptions?: MatSelectSearchOptions\n  ) {\n    this.applyDefaultOptions(defaultOptions);\n  }\n\n  private applyDefaultOptions(defaultOptions?: MatSelectSearchOptions) {\n    if (!defaultOptions) {\n      return;\n    }\n    for (const key of configurableDefaultOptions) {\n      if (defaultOptions.hasOwnProperty(key)) {\n        (this[key] as any) = defaultOptions[key];\n      }\n    }\n  }\n\n  ngOnInit() {\n    // set custom mat-option class if the component was placed inside a mat-option\n    if (this.matOption) {\n      this.matOption.disabled = true;\n      this.matOption._getHostElement().classList.add('contains-mat-select-search');\n      this.matOption._getHostElement().setAttribute('role', 'presentation');\n    } else {\n      console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n    }\n\n    // when the select dropdown panel is opened or closed\n    this.matSelect.openedChange\n      .pipe(\n        delay(1),\n        takeUntil(this._onDestroy)\n      )\n      .subscribe((opened) => {\n        if (opened) {\n          this.updateInputWidth();\n          // focus the search field when opening\n          if (!this.disableInitialFocus) {\n            this._focus();\n          }\n        } else {\n          // clear it when closing\n          if (this.clearSearchInput) {\n            this._reset();\n          }\n        }\n      });\n\n\n\n    // set the first item active after the options changed\n    this.matSelect.openedChange\n      .pipe(\n        take(1),\n        switchMap((_) => {\n        this._options = this.matSelect.options;\n\n        // Closure variable for tracking the most recent first option.\n        // In order to avoid causing the list to\n        // scroll to the top when options are added to the bottom of\n        // the list (eg: infinite scroll), we compare only\n        // the changes to the first options to determine if we\n        // should set the first item as active.\n        // This prevents unnecessary scrolling to the top of the list\n        // when options are appended, but allows the first item\n        // in the list to be set as active by default when there\n        // is no active selection\n        let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n\n        return this._options.changes\n          .pipe(tap(() => {\n            // avoid \"expression has been changed\" error\n            setTimeout(() => {\n              // Convert the QueryList to an array\n              const options = this._options.toArray();\n\n              // The true first item is offset by 1\n              const currentFirstOption = options[this.getOptionsLengthOffset()];\n\n              const keyManager = this.matSelect._keyManager;\n              if (keyManager && this.matSelect.panelOpen && currentFirstOption) {\n\n                // set first item active and input width\n\n                // Check to see if the first option in these changes is different from the previous.\n                const firstOptionIsChanged = !previousFirstOption\n                  || !this.matSelect.compareWith(previousFirstOption.value, currentFirstOption.value);\n\n                // CASE: The first option is different now.\n                // Indicates we should set it as active and scroll to the top.\n                if (firstOptionIsChanged\n                  || !keyManager.activeItem\n                  || !options.find(option => this.matSelect.compareWith(option.value, keyManager.activeItem?.value))) {\n                  keyManager.setActiveItem(this.getOptionsLengthOffset());\n                }\n\n                // wait for panel width changes\n                setTimeout(() => {\n                  this.updateInputWidth();\n                });\n              }\n\n              // Update our reference\n              previousFirstOption = currentFirstOption;\n            });\n          }));\n        })\n      )\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe();\n\n    // add or remove css class depending on whether to show the no entries found message\n    // note: this is hacky\n    this._showNoEntriesFound$.pipe(\n      takeUntil(this._onDestroy)\n    ).subscribe(showNoEntriesFound => {\n      // set no entries found class on mat option\n      if (this.matOption) {\n        if (showNoEntriesFound) {\n          this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n        } else {\n          this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n        }\n      }\n    });\n\n    // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        if (this.matSelect.panelOpen) {\n          this.updateInputWidth();\n        }\n      });\n\n    this.initMultipleHandling();\n\n    this.optionsList$.pipe(\n      takeUntil(this._onDestroy)\n    ).subscribe(() => {\n      // update view when available options change\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n\n  _emitSelectAllBooleanToParent(state: boolean) {\n    this.toggleAll.emit(state);\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  _isToggleAllCheckboxVisible(): boolean {\n    return this.matSelect.multiple && this.showToggleAllCheckbox;\n  }\n\n  /**\n   * Handles the key down event with MatSelect.\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n   * @param event\n   */\n  _handleKeydown(event: KeyboardEvent) {\n    // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n\n    // tslint:disable-next-line:max-line-length\n    // Needed to avoid handling in https://github.com/angular/components/blob/5439460d1fe166f8ec34ab7d48f05e0dd7f6a946/src/material/select/select.ts#L965\n    if ((event.key && event.key.length === 1)\n      || (this.preventHomeEndKeyPropagation && (event.key === 'Home' || event.key === 'End'))\n    ) {\n      event.stopPropagation();\n    }\n\n    if (this.matSelect.multiple && event.key && event.key === 'Enter') {\n      // Regain focus after multiselect, so we can further type\n      setTimeout(() => this._focus());\n    }\n\n    // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n    if (this.enableClearOnEscapePressed && event.key === 'Escape' && this.value) {\n      this._reset(true);\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * Handles the key up event with MatSelect.\n   * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n   */\n  _handleKeyup(event: KeyboardEvent) {\n    if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {\n      const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n      const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n      if (index !== -1) {\n        this.unselectActiveDescendant();\n        this.activeDescendant = this._options.toArray()[index]._getHostElement();\n        this.activeDescendant.setAttribute('aria-selected', 'true');\n        this.searchSelectInput.nativeElement.setAttribute('aria-activedescendant', ariaActiveDescendantId);\n      }\n    }\n  }\n\n  writeValue(value: string) {\n    this._lastExternalInputValue = value;\n    this._formControl.setValue(value);\n    this.changeDetectorRef.markForCheck();\n  }\n\n  onBlur() {\n    this.unselectActiveDescendant();\n    this.onTouched();\n  }\n\n  registerOnChange(fn: (value: string) => void) {\n    this._formControl.valueChanges.pipe(\n      filter(value => value !== this._lastExternalInputValue),\n      tap(() => this._lastExternalInputValue = undefined),\n      takeUntil(this._onDestroy)\n    ).subscribe(fn);\n  }\n\n  registerOnTouched(fn: Function) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Focuses the search input field\n   */\n  public _focus() {\n    if (!this.searchSelectInput || !this.matSelect.panel) {\n      return;\n    }\n    // save and restore scrollTop of panel, since it will be reset by focus()\n    // note: this is hacky\n    const panel = this.matSelect.panel.nativeElement;\n    const scrollTop = panel.scrollTop;\n\n    // focus\n    this.searchSelectInput.nativeElement.focus();\n\n    panel.scrollTop = scrollTop;\n  }\n\n  /**\n   * Resets the current search value\n   * @param focus whether to focus after resetting\n   */\n  public _reset(focus?: boolean) {\n    this._formControl.setValue('');\n    if (focus) {\n      this._focus();\n    }\n  }\n\n\n  /**\n   * Initializes handling <mat-select [multiple]=\"true\">\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n   */\n  private initMultipleHandling() {\n    if (!this.matSelect.ngControl) {\n      if (this.matSelect.multiple) {\n        // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n        // is necessary to properly work in multi-selection mode.\n        console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n      }\n      return;\n    }\n    // if <mat-select [multiple]=\"true\">\n    // store previously selected values and restore them when they are deselected\n    // because the option is not available while we are currently filtering\n    this.previousSelectedValues = this.matSelect.ngControl.value;\n\n    if (!this.matSelect.ngControl.valueChanges) {\n      return;\n    }\n\n    this.matSelect.ngControl.valueChanges\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe((values) => {\n        let restoreSelectedValues = false;\n        if (this.matSelect.multiple) {\n          if ((this.alwaysRestoreSelectedOptionsMulti || (this._formControl.value && this._formControl.value.length))\n            && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n            if (!values || !Array.isArray(values)) {\n              values = [];\n            }\n            const optionValues = this.matSelect.options.map(option => option.value);\n            this.previousSelectedValues.forEach(previousValue => {\n              if (!values.some(v => this.matSelect.compareWith(v, previousValue))\n                && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n                // if a value that was selected before is deselected and not found in the options, it was deselected\n                // due to the filtering, so we restore it.\n                if (this.recreateValuesArray) {\n                  values = [...values, previousValue];\n                } else {\n                  values.push(previousValue);\n                }\n                restoreSelectedValues = true;\n              }\n            });\n          }\n        }\n        this.previousSelectedValues = values;\n\n        if (restoreSelectedValues) {\n          this.matSelect._onChange(values);\n        }\n      });\n  }\n\n  /**\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\n   *  And support all Operating Systems\n   */\n  public updateInputWidth() {\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n      return;\n    }\n    let element: HTMLElement | null = this.innerSelectSearch.nativeElement;\n    let panelElement: HTMLElement | null = null;\n    while (element && element.parentElement) {\n      element = element.parentElement;\n      if (element.classList.contains('mat-select-panel')) {\n        panelElement = element;\n        break;\n      }\n    }\n    if (panelElement) {\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n    }\n  }\n\n  /**\n   * Determine the offset to length that can be caused by the optional matOption used as a search input.\n   */\n  private getOptionsLengthOffset(): number {\n    if (this.matOption) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  private unselectActiveDescendant() {\n    this.activeDescendant?.removeAttribute('aria-selected');\n    this.searchSelectInput.nativeElement.removeAttribute('aria-activedescendant');\n  }\n\n}\n","/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { NgModule } from '@angular/core';\nimport { MatSelectSearchComponent } from './mat-select-search.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { CommonModule } from '@angular/common';\n\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatSelectNoEntriesFoundDirective } from './mat-select-no-entries-found.directive';\nimport { MatDividerModule } from '@angular/material/divider';\n\nexport const MatSelectSearchVersion = '8.0.0';\nexport { MatSelectSearchClearDirective };\nexport { MatSelectNoEntriesFoundDirective };\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    MatTooltipModule,\n    MatDividerModule,\n  ],\n  declarations: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective,\n    MatSelectNoEntriesFoundDirective\n  ],\n  exports: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective,\n    MatSelectNoEntriesFoundDirective\n  ]\n})\nexport class NgxMatSelectSearchModule {\n}\n","<form [formGroup]=\"form\">\n  <!-- <div class=\"flex-container\"> -->\n  <div class=\"inputs-wrapper\" [class.small-width]=\"isClient\">\n    <div class=\"left-input-column\">\n      <h3 class=\"mat-title-large-margin-plus\" i18n=\"@@ClientForm.personalInfoSubtitle\">\n        Personal info\n      </h3>\n      <div class=\"inputs-flex-group\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label i18n=\"@@ClientForm.firstnameLabel\">Firstname</mat-label>\n          <input\n            matInput\n            formControlName=\"firstName\"\n            type=\"text\"\n            placeholder=\"Enter clients first name\"\n            i18n-placeholder=\"@@ClientForm.firstnamePlaceholder\"\n          />\n          @if (form.get('firstName')?.invalid) {\n            <mat-error i18n=\"@@ClientForm.firstnameError\"\n              >Please enter first name</mat-error\n            >\n          }\n        </mat-form-field>\n        <!-- @if (!programForm['name'].value.length) {\n                <mat-hint>*required</mat-hint>\n              } -->\n        <mat-form-field appearance=\"outline\">\n          <mat-label i18n=\"@@ClientForm.lastnameLabel\">Lastname</mat-label>\n          <input\n            matInput\n            formControlName=\"lastName\"\n            type=\"text\"\n            placeholder=\"Enter clients last name\"\n            i18n-placeholder=\"@@ClientForm.lastnamePlaceholder\"\n          />\n          @if (form.get('lastName')?.invalid) {\n            <mat-error i18n=\"@@ClientForm.lastnameError\"\n              >Please enter last name</mat-error\n            >\n          }\n        </mat-form-field>\n      </div>\n      <div class=\"inputs-flex-group\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label i18n=\"@@ClientForm.emailLabel\">Email</mat-label>\n          <input\n            matInput\n            formControlName=\"email\"\n            type=\"text\"\n            placeholder=\"Enter clients email\"\n            i18n-placeholder=\"@@ClientForm.emailPlaceholder\"\n          />\n          @if (form.get('email')?.invalid) {\n            <mat-error i18n=\"@@ClientForm.emailError\"\n              >Please enter email</mat-error\n            >\n          }\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n          <mat-label i18n=\"@@ClientForm.phoneLabel\">Phone</mat-label>\n          <input\n            matInput\n            formControlName=\"phone\"\n            type=\"text\"\n            placeholder=\"Enter clients phone number\"\n            i18n-placeholder=\"@@ClientForm.phonePlaceholder\"\n          />\n          @if (form.get('phone')?.invalid) {\n            <mat-error i18n=\"@@ClientForm.phoneError\"\n              >Please enter phone number</mat-error\n            >\n          }\n        </mat-form-field>\n      </div>\n      <h3 class=\"mat-title-large-margin-plus address-margin\" i18n=\"@@ClientForm.addressSubtitle\">\n        Address\n      </h3>\n      <div formGroupName=\"address\">\n        <div class=\"inputs-flex-group\">\n          <mat-form-field appearance=\"outline\" class=\"street\">\n            <mat-label i18n=\"@@ClientForm.streetNameLabel\"\n              >Street name</mat-label\n            >\n            <input\n              matInput\n              formControlName=\"street\"\n              type=\"text\"\n              placeholder=\"Enter street name\"\n              i18n-placeholder=\"@@ClientForm.streetNamePlaceholder\"\n            />\n            <!-- @if (form.get('email')?.invalid) {\n                <mat-error>Please enter email</mat-error>\n              } -->\n          </mat-form-field>\n          <mat-form-field appearance=\"outline\" class=\"street-number\">\n            <mat-label i18n=\"@@ClientForm.streetNumberLabel\"\n              >Street no.</mat-label\n            >\n            <input\n              matInput\n              formControlName=\"streetNumber\"\n              type=\"text\"\n              placeholder=\"Street no.\"\n              i18n-placeholder=\"@@ClientForm.streetNumberPlaceholder\"\n            />\n            <!-- @if (form.get('phone')?.invalid) {\n                <mat-error>Please enter phone number</mat-error>\n              } -->\n          </mat-form-field>\n        </div>\n        <div class=\"inputs-flex-group\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label i18n=\"@@ClientForm.cityLabel\">City</mat-label>\n            <input\n              matInput\n              formControlName=\"city\"\n              type=\"text\"\n              placeholder=\"City\"\n              i18n-placeholder=\"@@ClientForm.cityPlaceholder\"\n            />\n            <!-- @if (form.get('email')?.invalid) {\n                <mat-error>Please enter email</mat-error>\n              } -->\n          </mat-form-field>\n          <mat-form-field appearance=\"outline\">\n            <mat-label i18n=\"@@ClientForm.zipCodeLabel\">Zip code</mat-label>\n            <input\n              matInput\n              formControlName=\"zipCode\"\n              type=\"text\"\n              placeholder=\"Zip code\"\n              i18n-placeholder=\"@@ClientForm.zipCodePlaceholder\"\n            />\n            <!-- @if (form.get('phone')?.invalid) {\n                <mat-error>Please enter phone number</mat-error>\n              } -->\n          </mat-form-field>\n          <mat-form-field appearance=\"outline\">\n            <mat-label i18n=\"@@ClientForm.countryLabel\">Country</mat-label>\n            <mat-select\n              [formControl]=\"countryCtrl\"\n              placeholder=\"Country\"\n              i18n-placeholder=\"@@ClientForm.countryPlaceholder\"\n              #singleSelect\n            >\n              <mat-option>\n                <ngx-mat-select-search\n                  [formControl]=\"countryFilterCtrl\"\n                  placeholderLabel=\"Find country...\"\n                  i18n-placeholderLabel=\"@@ClientForm.findCountryPlaceholder\"\n                  noEntriesFoundLabel=\"No matching country found.\"\n                  i18n-noEntriesFoundLabel=\"@@ClientForm.noEntriesFoundLabel\"\n                ></ngx-mat-select-search\n              ></mat-option>\n              @for (country of filteredCountries | async; track country) {\n                <mat-option [value]=\"country.id\">\n                  {{ country.name }}\n                </mat-option>\n              }\n            </mat-select>\n          </mat-form-field>\n        </div>\n      </div>\n    </div>\n    @if (isUserForm) {\n      <div\n        overlay-scrollbars\n        [options]=\"themeSignal()\"\n        [defer]\n        class=\"right-input-column\"\n      >\n        @if (isUserForm) {\n          <h3\n            class=\"mat-title-large-margin-plus\"\n            i18n=\"@@ClientForm.profilePictureSubtitle\"\n          >\n            Profile picture\n          </h3>\n          @defer {\n            <ui-upload-image></ui-upload-image>\n          } @placeholder (minimum 1000ms) {\n            <div class=\"upload-image-placeholder\">\n              <div class=\"upload-image-skeleton\"></div>\n            </div>\n          }\n        }\n        <h3 class=\"mat-title-large-margin-plus\" i18n=\"@@ClientForm.credentialsSubtitle\">\n          Credentials\n        </h3>\n        <div formGroupName=\"credentials\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label i18n=\"@@ClientForm.credentialsTitleLabel\"\n              >Title</mat-label\n            >\n            <input\n              matInput\n              formControlName=\"title\"\n              type=\"text\"\n              placeholder=\"E.g. 'Physiotherapist'\"\n              i18n-placeholder=\"@@ClientForm.credentialsTitlePlaceholder\"\n            />\n          </mat-form-field>\n          <mat-form-field appearance=\"outline\">\n            <mat-label i18n=\"@@ClientForm.credentialsQualificationsLabel\"\n              >Qualifications</mat-label\n            >\n            <mat-chip-grid\n              #qualificationsChipGrid\n              aria-label=\"Enter keywords\"\n              i18n-aria-label=\"@@ClientForm.credentialsQualificationsChipsLabel\"\n              [formControl]=\"qualificationsFormCtrl\"\n            >\n              @for (qualification of qualifications; track qualification) {\n                <mat-chip-row\n                  (removed)=\"removeQualification(qualification)\"\n                  [editable]=\"true\"\n                  (edited)=\"editQualification(qualification, $event)\"\n                  aria-description=\"Press enter to edit qualification\"\n                  i18n-aria-label=\"\n                    @@ClientForm.credentialsQualificationsEditChipLabel\"\n                >\n                  {{ qualification }}\n                  <button\n                    matChipRemove\n                    aria-label=\"Remove qualification\"\n                    i18n-aria-label=\"\n                      @@ClientForm.credentialsQualificationsRemoveChipLabel\"\n                  >\n                    <mat-icon>cancel</mat-icon>\n                  </button>\n                </mat-chip-row>\n              }\n            </mat-chip-grid>\n            <input\n              placeholder=\"E.g. 'Doctor of Physical Therapy'\"\n              i18n-placeholder=\"\n                @@ClientForm.credentialsQualificationsPlaceholder\"\n              [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n              [matChipInputAddOnBlur]=\"addOnBlur\"\n              [matChipInputFor]=\"qualificationsChipGrid\"\n              (matChipInputTokenEnd)=\"addQualification($event)\"\n            />\n          </mat-form-field>\n          <mat-form-field appearance=\"outline\">\n            <mat-label i18n=\"@@ClientForm.credentialsLicencesLabel\"\n              >Licences</mat-label\n            >\n            <mat-chip-grid\n              #licencesChipGrid\n              aria-label=\"Enter keywords\"\n              i18n-aria-label=\"@@ClientForm.credentialsLicencesChipLabel\"\n              [formControl]=\"licencesFormCtrl\"\n            >\n              @for (licence of licences; track licence) {\n                <mat-chip-row\n                  (removed)=\"removeLicence(licence)\"\n                  [editable]=\"true\"\n                  (edited)=\"editLicence(licence, $event)\"\n                  aria-description=\"Press enter to edit licence\"\n                  i18n-aria-label=\"\n                    @@ClientForm.credentialsLicencesEditChipLabel\"\n                >\n                  {{ licence }}\n                  <button\n                    matChipRemove\n                    aria-label=\"Remove licence\"\n                    i18n-aria-label=\"\n                      @@ClientForm.credentialsLicencesRemoveChipLabel\"\n                  >\n                    <mat-icon>cancel</mat-icon>\n                  </button>\n                </mat-chip-row>\n              }\n            </mat-chip-grid>\n            <input\n              placeholder=\"E.g. 'Orthopedic Manual Therapy Certification'\"\n              i18n-placeholder=\"@@ClientForm.credentialsLicencesPlaceholder\"\n              [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n              [matChipInputAddOnBlur]=\"addOnBlur\"\n              [matChipInputFor]=\"licencesChipGrid\"\n              (matChipInputTokenEnd)=\"addLicence($event)\"\n            />\n          </mat-form-field>\n          <mat-form-field appearance=\"outline\">\n            <mat-label i18n=\"@@ClientForm.credentialsCompanyLabel\"\n              >Company</mat-label\n            >\n            <input\n              matInput\n              formControlName=\"company\"\n              type=\"text\"\n              placeholder=\"Enter company name\"\n              i18n-placeholder=\"@@ClientForm.credentialsCompanyPlaceholder\"\n            />\n          </mat-form-field>\n        </div>\n      </div>\n    }\n  </div>\n  <!-- </div> -->\n</form>\n","import {\n  AfterViewInit,\n  Component,\n  inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlContainer,\n  FormControl,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { MatSelect } from '@angular/material/select';\nimport { ReplaySubject, Subject, take, takeUntil } from 'rxjs';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport {\n  MatChipEditedEvent,\n  MatChipInputEvent,\n  MatChipGrid,\n  MatChipRow,\n  MatChipRemove,\n  MatChipInput,\n} from '@angular/material/chips';\nimport { ThemeManagerService } from '../../services/theme-manager.service';\nimport { MatIcon } from '@angular/material/icon';\nimport { UploadImageComponent } from '../upload-image/upload-image.component';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\nimport { AsyncPipe } from '@angular/common';\nimport { NgxMatSelectSearchModule } from 'ngx-mat-select-search';\nimport { MatOption } from '@angular/material/core';\nimport { MatInput } from '@angular/material/input';\nimport { MatFormField, MatLabel, MatError } from '@angular/material/form-field';\nimport { LocalstorageService } from '@slowautomobile/users';\nimport { CountriesLibService } from '../../services/countries-lib.service';\n\ninterface Country {\n  id: string;\n  name: string;\n}\n\n@Component({\n  selector: 'ui-client-full-edit-form',\n  templateUrl: './client-full-edit-form.component.html',\n  styleUrl: './client-full-edit-form.component.scss',\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    MatFormField,\n    MatLabel,\n    MatInput,\n    MatError,\n    MatSelect,\n    MatOption,\n    NgxMatSelectSearchModule,\n    OverlayscrollbarsModule,\n    UploadImageComponent,\n    MatChipGrid,\n    MatChipRow,\n    MatChipRemove,\n    MatIcon,\n    MatChipInput,\n    AsyncPipe,\n  ],\n})\nexport class ClientFullEditFormComponent\n  implements OnInit, OnDestroy, AfterViewInit\n{\n  private controlContainer = inject(ControlContainer);\n  private announcer = inject(LiveAnnouncer);\n  private localStorageService = inject(LocalstorageService);\n  private countriesLibService = inject(CountriesLibService);\n\n  @Input() isClient = false;\n  form!: FormGroup;\n  countries: Country[] = [];\n  countryCtrl!: FormControl;\n  countryFilterCtrl: FormControl = new FormControl();\n  public filteredCountries: ReplaySubject<Country[]> = new ReplaySubject<\n    Country[]\n  >(1);\n  isUserForm = false;\n  qualifications: string[] = [];\n  licences: string[] = [];\n  qualificationsFormCtrl!: FormControl;\n  licencesFormCtrl!: FormControl;\n  addOnBlur = true;\n  readonly separatorKeysCodes = [ENTER, COMMA] as const;\n\n  @ViewChild('singleSelect', { static: true }) singleSelect!: MatSelect;\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _onDestroy = new Subject<void>();\n\n  themeManager = inject(ThemeManagerService);\n  themeSignal = this.themeManager.themeSignal;\n\n  ngOnInit(): void {\n    this._getCountries();\n\n    // listen for search field value changes\n    this.countryFilterCtrl.valueChanges\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        this.filterCountries();\n      });\n\n    this._initForm();\n\n    // setTimeout(() => {\n    // set initial selection\n    // This is not needed because form is initialized in _initForm()\n    // const currentCountry = this.form.get('address.country')?.value;\n    // this.countryCtrl.setValue({ name: currentCountry });\n  }\n\n  private _getCountries() {\n    // Dinamically check localeService for language in use and coresponding countriesLib.regsterLocale call\n    const lang = <string>(\n      this.localStorageService.getToken('userLanguage')?.split('-')[0]\n    );\n\n    this.countriesLibService\n      .getCountriesLib(lang)\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(countries => {\n        this.countries = countries;\n        this.countries.sort((a, b) => a.name.localeCompare(b.name));\n\n        // load the initial country list\n        this.filteredCountries.next(this.countries.slice());\n      });\n  }\n\n  _initForm() {\n    const clientInfoForm = this.controlContainer.control?.get(\n      'clientInfo',\n    ) as FormGroup;\n\n    // Check if form is coming from client-form or user-edit-form component\n    if (clientInfoForm) {\n      this.form = clientInfoForm as FormGroup;\n      this.countryCtrl = this.form.get('address.country') as FormControl;\n    } else {\n      this.isUserForm = true;\n      this.form = this.controlContainer.control as FormGroup;\n      this.countryCtrl = this.form.get('address.country') as FormControl;\n      this.qualificationsFormCtrl = this.form.get(\n        'credentials.qualifications',\n      ) as FormControl;\n      this.licencesFormCtrl = this.form.get(\n        'credentials.licences',\n      ) as FormControl;\n\n      setTimeout(() => {\n        this.qualifications = this.qualificationsFormCtrl.value as string[];\n        this.licences = this.licencesFormCtrl.value as string[];\n      }, 500);\n    }\n  }\n\n  ngAfterViewInit() {\n    this.setInitialValue();\n  }\n\n  /**\n   * Sets the initial value after the filteredBanks are loaded initially\n   */\n  protected setInitialValue() {\n    this.filteredCountries\n      .pipe(take(1), takeUntil(this._onDestroy))\n      .subscribe(() => {\n        // setting the compareWith property to a comparison function\n        // triggers initializing the selection according to the initial value of\n        // the form control (i.e. _initializeSelection())\n        // this needs to be done after the filteredCountries are loaded initially\n        // and after the mat-option elements are available\n        this.singleSelect.compareWith = (a: Country, b: Country) =>\n          a && b && a === b;\n      });\n  }\n\n  protected filterCountries() {\n    if (!this.countries) {\n      return;\n    }\n    // get the search keyword\n    let search = this.countryFilterCtrl.value;\n    if (!search) {\n      this.filteredCountries.next(this.countries.slice());\n      return;\n    } else {\n      search = search.toLowerCase();\n    }\n    // filter the countries\n    this.filteredCountries.next(\n      this.countries.filter(\n        country => country.name.toLowerCase().indexOf(search) > -1,\n      ),\n    );\n  }\n\n  removeQualification(qualification: string) {\n    const index = this.qualifications.indexOf(qualification);\n    if (index >= 0) {\n      this.qualifications.splice(index, 1);\n\n      this.announcer.announce(`removed ${qualification}`);\n    }\n  }\n\n  addQualification(event: MatChipInputEvent): void {\n    const value = (event.value || '').trim();\n\n    // Add our qualification\n    if (value) {\n      this.qualifications.push(value);\n    }\n\n    // Clear the input value\n    event.chipInput!.clear();\n  }\n\n  editQualification(qualification: string, event: MatChipEditedEvent) {\n    const value = event.value.trim();\n\n    // Remove qualification if it no longer has a name\n    if (!value) {\n      this.removeQualification(qualification);\n      return;\n    }\n\n    // Edit existing qualification\n    const index = this.qualifications.indexOf(qualification);\n    if (index >= 0) {\n      this.qualifications[index] = value;\n    }\n  }\n\n  removeLicence(licence: string) {\n    const index = this.licences.indexOf(licence);\n    if (index >= 0) {\n      this.licences.splice(index, 1);\n\n      this.announcer.announce(`removed ${licence}`);\n    }\n  }\n\n  addLicence(event: MatChipInputEvent): void {\n    const value = (event.value || '').trim();\n    console.log(event);\n\n    // Add our licence\n    if (value) {\n      this.licences.push(value);\n    }\n\n    // Clear the input value\n    event.chipInput!.clear();\n  }\n\n  editLicence(licence: string, event: MatChipEditedEvent) {\n    const value = event.value.trim();\n\n    // Remove licence if it no longer has a name\n    if (!value) {\n      this.removeQualification(licence);\n      return;\n    }\n\n    // Edit existing licence\n    const index = this.licences.indexOf(licence);\n    if (index >= 0) {\n      this.licences[index] = value;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n}\n","import { Component, inject } from '@angular/core';\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogRef,\n  MatDialogTitle,\n  MatDialogContent,\n  MatDialogActions,\n} from '@angular/material/dialog';\nimport { MatButton } from '@angular/material/button';\nimport { CdkScrollable } from '@angular/cdk/scrolling';\nimport { MatIcon } from '@angular/material/icon';\n\ninterface DialogData {\n  title: string;\n  message: string;\n}\n\n@Component({\n    selector: 'ui-delete-confirmation-dialog',\n    templateUrl: './deleteConfirmationDialog.component.html',\n    styleUrl: './deleteConfirmationDialog.component.scss',\n    imports: [\n        MatIcon,\n        MatDialogTitle,\n        CdkScrollable,\n        MatDialogContent,\n        MatDialogActions,\n        MatButton,\n    ]\n})\nexport class DeleteConfirmationDialogComponent {\n  dialogRef =\n    inject<MatDialogRef<DeleteConfirmationDialogComponent>>(MatDialogRef);\n  data = inject<DialogData>(MAT_DIALOG_DATA);\n\n  onConfirm(): void {\n    this.dialogRef.close(true);\n  }\n\n  onClose(): void {\n    this.dialogRef.close();\n  }\n}\n","<div class=\"confirmation-dialog-wrapper\">\n  <div class=\"dialog-icon\">\n    <mat-icon>delete_outline</mat-icon>\n  </div>\n  <h1 mat-dialog-title class=\"dialog-title mat-title-large\">\n    {{ data.title }}\n  </h1>\n  <div mat-dialog-content class=\"dialog-content\">{{ data.message }}</div>\n  <div mat-dialog-actions class=\"dialog-actions\">\n    <button\n      mat-button\n      (click)=\"onClose()\"\n      class=\"dialog-buttons\"\n      i18n=\"@@DeleteConfirmationDialog.cancelButton\"\n    >\n      Cancel\n    </button>\n    <button\n      mat-button\n      class=\"dialog-buttons\"\n      (click)=\"onConfirm()\"\n      i18n=\"@@DeleteConfirmationDialog.deleteButton\"\n    >\n      Delete\n    </button>\n  </div>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {_IdGenerator} from '../a11y';\nimport {Subject} from 'rxjs';\n\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_ACCORDION = new InjectionToken<CdkAccordion>('CdkAccordion');\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n  providers: [{provide: CDK_ACCORDION, useExisting: CdkAccordion}],\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id: string = inject(_IdGenerator).getId('cdk-accordion-');\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input({transform: booleanAttribute}) multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    if (this.multi) {\n      this._openCloseAllActions.next(true);\n    }\n  }\n\n  /** Closes all enabled accordion items. */\n  closeAll(): void {\n    this._openCloseAllActions.next(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._openCloseAllActions.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  ChangeDetectorRef,\n  booleanAttribute,\n  inject,\n  OnInit,\n} from '@angular/core';\nimport {_IdGenerator} from '../a11y';\nimport {UniqueSelectionDispatcher} from '../collections';\nimport {CDK_ACCORDION, CdkAccordion} from './accordion';\nimport {Subscription} from 'rxjs';\n\n/**\n * A basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n    // registering to the same accordion.\n    {provide: CDK_ACCORDION, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnInit, OnDestroy {\n  accordion = inject<CdkAccordion>(CDK_ACCORDION, {optional: true, skipSelf: true})!;\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  protected _expansionDispatcher = inject(UniqueSelectionDispatcher);\n\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() readonly destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() readonly expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = inject(_IdGenerator).getId('cdk-accordion-child-');\n\n  /** Whether the AccordionItem is expanded. */\n  @Input({transform: booleanAttribute})\n  get expanded(): boolean {\n    return this._expanded;\n  }\n  set expanded(expanded: boolean) {\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input({transform: booleanAttribute}) disabled: boolean = false;\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    this._removeUniqueSelectionListener = this._expansionDispatcher.listen(\n      (id: string, accordionId: string) => {\n        if (\n          this.accordion &&\n          !this.accordion.multi &&\n          this.accordion.id === accordionId &&\n          this.id !== id\n        ) {\n          this.expanded = false;\n        }\n      },\n    );\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","<span class=\"mat-content\" [class.mat-content-hide-toggle]=\"!_showToggle()\">\n  <ng-content select=\"mat-panel-title\"></ng-content>\n  <ng-content select=\"mat-panel-description\"></ng-content>\n  <ng-content></ng-content>\n</span>\n\n@if (_showToggle()) {\n  <span class=\"mat-expansion-indicator\">\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 -960 960 960\"\n      aria-hidden=\"true\"\n      focusable=\"false\">\n      <path d=\"M480-345 240-585l56-56 184 184 184-184 56 56-240 240Z\"/>\n    </svg>\n  </span>\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\n\n/**\n * Base interface for a `MatExpansionPanel`.\n * @docs-private\n */\nexport interface MatExpansionPanelBase extends CdkAccordionItem {\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Token used to provide a `MatExpansionPanel` to `MatExpansionPanelContent`.\n * Used to avoid circular imports between `MatExpansionPanel` and `MatExpansionPanelContent`.\n */\nexport const MAT_EXPANSION_PANEL = new InjectionToken<MatExpansionPanelBase>('MAT_EXPANSION_PANEL');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, TemplateRef, inject} from '@angular/core';\nimport {MAT_EXPANSION_PANEL, MatExpansionPanelBase} from './expansion-panel-base';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]',\n})\nexport class MatExpansionPanelContent {\n  _template = inject<TemplateRef<any>>(TemplateRef);\n  _expansionPanel = inject<MatExpansionPanelBase>(MAT_EXPANSION_PANEL, {optional: true});\n\n  constructor(...args: unknown[]);\n  constructor() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CdkPortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  booleanAttribute,\n  ANIMATION_MODULE_TYPE,\n  inject,\n  NgZone,\n  Renderer2,\n} from '@angular/core';\nimport {_IdGenerator} from '@angular/cdk/a11y';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordionBase, MatAccordionTogglePosition, MAT_ACCORDION} from './accordion-base';\nimport {MAT_EXPANSION_PANEL} from './expansion-panel-base';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n  new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  styleUrl: 'expansion-panel.css',\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: 'expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n    {provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  imports: [CdkPortalOutlet],\n})\nexport class MatExpansionPanel\n  extends CdkAccordionItem\n  implements AfterContentInit, OnChanges, OnDestroy\n{\n  private _viewContainerRef = inject(ViewContainerRef);\n  private readonly _animationsDisabled =\n    inject(ANIMATION_MODULE_TYPE, {optional: true}) === 'NoopAnimations';\n  private _document = inject(DOCUMENT);\n  private _ngZone = inject(NgZone);\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _renderer = inject(Renderer2);\n  private _cleanupTransitionEnd: (() => void) | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input({transform: booleanAttribute})\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = value;\n  }\n  private _hideToggle = false;\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() readonly afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() readonly afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  override accordion = inject<MatAccordionBase>(MAT_ACCORDION, {optional: true, skipSelf: true})!;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Element wrapping the panel body. */\n  @ViewChild('bodyWrapper')\n  protected _bodyWrapper: ElementRef<HTMLElement> | undefined;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId: string = inject(_IdGenerator).getId('mat-expansion-panel-header-');\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n\n    const defaultOptions = inject<MatExpansionPanelDefaultOptions>(\n      MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n      {optional: true},\n    );\n\n    this._expansionDispatcher = inject(UniqueSelectionDispatcher);\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  /** Toggles the expanded state of the expansion panel. */\n  override toggle(): void {\n    this.expanded = !this.expanded;\n  }\n\n  /** Sets the expanded state of the expansion panel to false. */\n  override close(): void {\n    this.expanded = false;\n  }\n\n  /** Sets the expanded state of the expansion panel to true. */\n  override open(): void {\n    this.expanded = true;\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent && this._lazyContent._expansionPanel === this) {\n      // Render the content as soon as the panel becomes open.\n      this.opened\n        .pipe(\n          startWith(null),\n          filter(() => this.expanded && !this._portal),\n          take(1),\n        )\n        .subscribe(() => {\n          this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n        });\n    }\n\n    this._setupAnimationEvents();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this._cleanupTransitionEnd?.();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n\n  private _transitionEndListener = ({target, propertyName}: TransitionEvent) => {\n    if (target === this._bodyWrapper?.nativeElement && propertyName === 'grid-template-rows') {\n      this._ngZone.run(() => {\n        if (this.expanded) {\n          this.afterExpand.emit();\n        } else {\n          this.afterCollapse.emit();\n        }\n      });\n    }\n  };\n\n  protected _setupAnimationEvents() {\n    // This method is defined separately, because we need to\n    // disable this logic in some internal components.\n    this._ngZone.runOutsideAngular(() => {\n      if (this._animationsDisabled) {\n        this.opened.subscribe(() => this._ngZone.run(() => this.afterExpand.emit()));\n        this.closed.subscribe(() => this._ngZone.run(() => this.afterCollapse.emit()));\n      } else {\n        setTimeout(() => {\n          const element = this._elementRef.nativeElement;\n          this._cleanupTransitionEnd = this._renderer.listen(\n            element,\n            'transitionend',\n            this._transitionEndListener,\n          );\n          element.classList.add('mat-expansion-panel-animations-enabled');\n        }, 200);\n      }\n    });\n  }\n}\n\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row',\n  },\n})\nexport class MatExpansionPanelActionRow {}\n","<ng-content select=\"mat-expansion-panel-header\"></ng-content>\n<div class=\"mat-expansion-panel-content-wrapper\" [attr.inert]=\"expanded ? null : ''\" #bodyWrapper>\n  <div class=\"mat-expansion-panel-content\"\n       role=\"region\"\n       [attr.aria-labelledby]=\"_headerId\"\n       [id]=\"id\"\n       #body>\n    <div class=\"mat-expansion-panel-body\">\n      <ng-content></ng-content>\n      <ng-template [cdkPortalOutlet]=\"_portal\"></ng-template>\n    </div>\n    <ng-content select=\"mat-action-row\"></ng-content>\n  </div>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Input,\n  numberAttribute,\n  OnDestroy,\n  ViewEncapsulation,\n  inject,\n  HostAttributeToken,\n} from '@angular/core';\nimport {EMPTY, merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {MatAccordionTogglePosition} from './accordion-base';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\nimport {_CdkPrivateStyleLoader} from '@angular/cdk/private';\nimport {_StructuralStylesLoader} from '../core';\n\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\n@Component({\n  selector: 'mat-expansion-panel-header',\n  styleUrl: 'expansion-panel-header.css',\n  templateUrl: 'expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-expansion-panel-header mat-focus-indicator',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '[style.height]': '_getHeaderHeight()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n  },\n})\nexport class MatExpansionPanelHeader implements AfterViewInit, OnDestroy, FocusableOption {\n  panel = inject(MatExpansionPanel, {host: true});\n  private _element = inject(ElementRef);\n  private _focusMonitor = inject(FocusMonitor);\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n    const panel = this.panel;\n    const defaultOptions = inject<MatExpansionPanelDefaultOptions>(\n      MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n      {optional: true},\n    );\n    const tabIndex = inject(new HostAttributeToken('tabindex'), {optional: true});\n\n    const accordionHideToggleChange = panel.accordion\n      ? panel.accordion._stateChanges.pipe(\n          filter(changes => !!(changes['hideToggle'] || changes['togglePosition'])),\n        )\n      : EMPTY;\n    this.tabIndex = parseInt(tabIndex || '') || 0;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(\n        filter(changes => {\n          return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n        }),\n      ),\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => this._focusMonitor.focusVia(this._element, 'program'));\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Tab index of the header. */\n  @Input({\n    transform: (value: unknown) => (value == null ? 0 : numberAttribute(value)),\n  })\n  tabIndex: number = 0;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled(): boolean {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /**\n   * Gets the current height of the header. Null if no custom height has been\n   * specified, and if the default height from the stylesheet should be used.\n   */\n  _getHeaderHeight(): string | null {\n    const isExpanded = this._isExpanded();\n    if (isExpanded && this.expandedHeight) {\n      return this.expandedHeight;\n    } else if (!isExpanded && this.collapsedHeight) {\n      return this.collapsedHeight;\n    }\n    return null;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin?: FocusOrigin, options?: FocusOptions) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._element).subscribe(origin => {\n      if (origin && this.panel.accordion) {\n        this.panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description',\n  },\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title',\n  },\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  OnDestroy,\n  booleanAttribute,\n} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {startWith} from 'rxjs/operators';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition,\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  providers: [\n    {\n      provide: MAT_ACCORDION,\n      useExisting: MatAccordion,\n    },\n  ],\n  host: {\n    class: 'mat-accordion',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if multiple panel support is enabled.\n    '[class.mat-accordion-multi]': 'this.multi',\n  },\n})\nexport class MatAccordion\n  extends CdkAccordion\n  implements MatAccordionBase, AfterContentInit, OnDestroy\n{\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  /** Headers belonging to this accordion. */\n  private _ownHeaders = new QueryList<MatExpansionPanelHeader>();\n\n  /** All headers inside the accordion. Includes headers inside nested accordions. */\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input({transform: booleanAttribute})\n  hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._headers.changes\n      .pipe(startWith(this._headers))\n      .subscribe((headers: QueryList<MatExpansionPanelHeader>) => {\n        this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n        this._ownHeaders.notifyOnChanges();\n      });\n\n    this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    this._keyManager.onKeydown(event);\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this._keyManager?.destroy();\n    this._ownHeaders.destroy();\n  }\n}\n","<div class=\"confirmation-dialog-wrapper\">\n  <div class=\"header-container program-header\">\n    <div>\n      <h2 mat-dialog-title class=\"dialog-title mat-headline-small\">\n        {{ data.title }}\n      </h2>\n    </div>\n    <!-- <button\n      mat-icon-button\n      (click)=\"onClose()\"\n      aria-label=\"Icon button with a close icon\"\n    >\n      <mat-icon>close</mat-icon>\n    </button> -->\n  </div>\n  <div\n    overlay-scrollbars\n    [options]=\"themeSignal()\"\n    [defer]\n    class=\"dialog-content dialog-content-wrapper\"\n  >\n    <span class=\"label\" i18n=\"@@ProgramModal.programName\">Program name</span>\n    <h2 class=\"program-name mat-title-medium\">\n      {{ data.program.name }}\n    </h2>\n    <span class=\"label\" i18n=\"@@ProgramModal.programDiagnosis\">Diagnosis</span>\n    <h2 class=\"program-name mat-title-medium\">{{ data.program.diagnosis }}</h2>\n\n    <span class=\"label\" i18n=\"@@ProgramModal.programExercises\"\n      >Program exercises</span\n    >\n\n    <!-- This should be refactored to use selected-expansion-panel component!!! -->\n    <mat-accordion>\n      @for (\n        selectedExercise of data.program.selectedExercises;\n        track selectedExercise;\n        let i = $index\n      ) {\n        <mat-expansion-panel\n          class=\"exer-expansion-panel program-panel\"\n          style=\"border-bottom: none\"\n          [expanded]=\"isExpanded\"\n        >\n          <mat-expansion-panel-header\n            collapsedHeight=\"80px\"\n            class=\"exer-expansion-panel-header\"\n          >\n            <div class=\"expansion-panel-handle no-handle\">\n              <span>{{ i + 1 }}</span>\n            </div>\n            <mat-panel-title class=\"no-margin\">\n              <div class=\"program-img-wrapper expanded-panels\">\n                <img\n                  class=\"selected-exercise-img\"\n                  [src]=\"selectedExercise.images?.mainImg\"\n                  [alt]=\"selectedExercise.name[data.selectedLang]\"\n                />\n              </div>\n              <span class=\"title-name mat-body-medium\">{{\n                selectedExercise.name[data.selectedLang]\n              }}</span>\n              <!-- <button\n              (click)=\" $event.stopPropagation(); showExerciseModal(selectedExercise.id, selectedExercise)\"\n              mat-icon-button\n              matTooltip=\"Details\"\n              aria-label=\"Info icon-button with a info icon\"\n            >\n              <mat-icon>info</mat-icon>\n            </button> -->\n            </mat-panel-title>\n            <mat-panel-description\n              class=\"panel-description program-panel-description\"\n            >\n              <button\n                (click)=\"\n                  $event.stopPropagation();\n                  showExerciseModal(selectedExercise.id, selectedExercise, true)\n                \"\n                mat-icon-button\n                matTooltip=\"Details\"\n                i18n-matTooltip=\"@@ProgramModal.exerciseDetailsTooltip\"\n                aria-label=\"Info button with a info icon\"\n                i18n-aria-label=\"@@ProgramModal.exerciseDetailsAriaLabel\"\n              >\n                <mat-icon>info_outline</mat-icon>\n              </button>\n              <!-- <div class=\"session-overview\">\n                <div>\n                  <span>Sets: </span>\n                  <span>{{ selectedExercise.sets }}</span>\n                </div>\n                <div>\n                  <span>Reps: </span>\n                  <span>{{ selectedExercise.reps }}</span>\n                </div>\n              </div>\n              <div class=\"options-wrapper\"></div> -->\n            </mat-panel-description>\n          </mat-expansion-panel-header>\n          <div class=\"panel-content program-panel-content\">\n            <div class=\"name-description-label program-description\">\n              <span class=\"label\" i18n=\"@@ProgramModal.exerciseDescription\"\n                >Description</span\n              >\n              <span>{{ selectedExercise.description[data.selectedLang] }}</span>\n            </div>\n            <div class=\"exercise-session program-exercise-session\">\n              <div>\n                <span class=\"label\" i18n=\"@@ProgramModal.exerciseSets\"\n                  >Sets:&nbsp;</span\n                >\n                <span>{{ selectedExercise.sets }}</span>\n              </div>\n              <div>\n                <span class=\"label\" i18n=\"@@ProgramModal.exerciseReps\"\n                  >Reps:&nbsp;</span\n                >\n                <span>{{ selectedExercise.reps }}</span>\n              </div>\n              @if (selectedExercise.pause) {\n                <div>\n                  <span class=\"label\" i18n=\"@@ProgramModal.exercisePause\"\n                    >Pause:&nbsp;</span\n                  >\n                  <span>{{ selectedExercise.pause }}</span>\n                </div>\n              }\n              @if (selectedExercise.weight) {\n                <div>\n                  <span class=\"label\" i18n=\"@@ProgramModal.exerciseWeight\"\n                    >Weight:&nbsp;</span\n                  >\n                  <span>{{ selectedExercise.weight }}</span>\n                </div>\n              }\n              @if (selectedExercise.equipments.length !== 0) {\n                <div>\n                  <span class=\"label\" i18n=\"@@EditProgram.exerciseEquipment\"\n                    >Eq:\n                  </span>\n                  @for (\n                    equipment of selectedExercise.equipments;\n                    track equipment;\n                    let last = $last\n                  ) {\n                    <span>{{ equipment.translations[data.selectedLang] }}</span>\n                    @if (!last) {\n                      <span>, </span>\n                    }\n                  }\n                </div>\n              }\n            </div>\n          </div>\n        </mat-expansion-panel>\n      }\n    </mat-accordion>\n  </div>\n  <mat-dialog-actions class=\"dialog-actions program-dialog-actions\">\n    <button\n      [mat-dialog-close]=\"data.program.id\"\n      mat-fab\n      matTooltip=\"Add to client\"\n      i18n-matTooltip=\"@@ProgramModal.addProgramToClientTooltip\"\n      color=\"primary\"\n      aria-label=\"Add icon button\"\n      i18n-matTooltip=\"@@ProgramModal.addProgramToClientAriaLabel\"\n    >\n      <mat-icon>add</mat-icon>\n    </button>\n  </mat-dialog-actions>\n</div>\n","import { Component, inject, OnDestroy, OnInit } from '@angular/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_DATA,\n  MatDialogRef,\n  MatDialogTitle,\n  MatDialogActions,\n  MatDialogClose,\n} from '@angular/material/dialog';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport {\n  Exercise,\n  ExerciseModalComponent,\n  ExercisesService,\n  Program,\n} from '@slowautomobile/exercises';\nimport { ThemeManagerService } from '../../services/theme-manager.service';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { MatIconButton, MatFabButton } from '@angular/material/button';\nimport {\n  MatAccordion,\n  MatExpansionPanel,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n  MatExpansionPanelDescription,\n} from '@angular/material/expansion';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\nimport { Observable, Subscription } from 'rxjs';\n\ninterface DialogData {\n  title: string;\n  program: Program;\n  programId: string;\n  selectedLang: 'en' | 'de' | 'sr';\n}\n\n@Component({\n    selector: 'ui-program-modal',\n    templateUrl: './program-modal.component.html',\n    styleUrl: './program-modal.component.scss',\n    imports: [\n        MatDialogTitle,\n        OverlayscrollbarsModule,\n        MatAccordion,\n        MatExpansionPanel,\n        MatExpansionPanelHeader,\n        MatExpansionPanelTitle,\n        MatExpansionPanelDescription,\n        MatIconButton,\n        MatTooltip,\n        MatIcon,\n        MatDialogActions,\n        MatFabButton,\n        MatDialogClose,\n    ]\n})\nexport class ProgramModalComponent implements OnInit, OnDestroy {\n  dialogRef = inject<MatDialogRef<ProgramModalComponent>>(MatDialogRef);\n  data = inject<DialogData>(MAT_DIALOG_DATA);\n  dialog = inject(MatDialog);\n  private exercisesService = inject(ExercisesService);\n\n  subscriptions = new Subscription();\n\n  // program!: Program;\n  isExpanded = false;\n  exerciseId!: string;\n\n  themeManager = inject(ThemeManagerService);\n  themeSignal = this.themeManager.themeSignal;\n\n  ngOnInit(): void {\n    //   this.program = this.data.program;\n    console.log(this.data);\n  }\n\n  addProgramToClient(programId: string | undefined) {\n    console.log(programId);\n  }\n\n  private _getExercise(exerciseId: string): Observable<Exercise> {\n    return this.exercisesService.getExercise(exerciseId);\n  }\n\n  showExerciseModal(\n    exerciseId: string,\n    exerciseCard: Exercise,\n    isProgramExercise: boolean,\n  ): void {\n    const subscription = this._getExercise(exerciseId).subscribe(exercise => {\n      this.dialog.open(ExerciseModalComponent, {\n        data: {\n          fullExercise: exercise,\n          exerciseCard: exerciseCard,\n          isProgramExercise: isProgramExercise,\n          selectedLang: this.data.selectedLang,\n        },\n        width: '500px',\n        // height: '736px',\n        panelClass: [\n          'custom-dialog',\n          ...(isProgramExercise\n            ? ['custom-shadow', 'custom-exercise-dialog-content-wrapper']\n            : []),\n        ],\n        // disableClose: isProgramExercise,\n        // hasBackdrop: isProgramExercise ? false : true,\n        backdropClass: isProgramExercise ? 'custom-backdrop' : '',\n        // enterAnimationDuration: 0,\n      });\n    });\n    this.subscriptions.add(subscription);\n  }\n\n  onClose(): void {\n    this.dialogRef.close();\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","<div class=\"table-wrapper clients-program-list-table\">\n  <div class=\"tables-wrapper\">\n    <div>\n      <div class=\"clients-program-list-title\">\n        <h3\n          class=\"mat-title-large\"\n          i18n=\"@@ClientForm.listOfClientProgramsTitle\"\n        >\n          List of client's programs\n        </h3>\n        <mat-divider\n          vertical\n          style=\"display: inline-block; height: 24px\"\n        ></mat-divider>\n        <button\n          mat-flat-button\n          matTooltip=\"Create program\"\n          i18n-matTooltip=\"@@ClientForm.createProgramBtnTooltip\"\n          (click)=\"createProgram()\"\n        >\n          <mat-icon>add</mat-icon>\n          {{ newButtonString }}\n        </button>\n      </div>\n      <form formArray=\"form\">\n        <div\n          overlay-scrollbars\n          [options]=\"themeSignal()\"\n          [defer]\n          class=\"clients-table\"\n        >\n          <!-- @if (dataSource.data.length) { -->\n          <table\n            mat-table\n            class=\"mat-table-background\"\n            [dataSource]=\"dataSourceClientsPrograms\"\n            multiTemplateDataRows\n          >\n            <!-- Checkbox Column -->\n            <!-- <ng-container matColumnDef=\"select\">\n              <th mat-header-cell *matHeaderCellDef>\n                <mat-checkbox\n                  (change)=\"$event ? toggleAllRows() : null\"\n                  [checked]=\"selection.hasValue() && isAllSelected()\"\n                  [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                >\n                </mat-checkbox>\n              </th>\n              <td mat-cell *matCellDef=\"let row\">\n                <mat-checkbox\n                  (click)=\"$event.stopPropagation()\"\n                  (change)=\"$event ? selection.toggle(row) : null\"\n                  [checked]=\"selection.isSelected(row)\"\n                >\n                </mat-checkbox>\n              </td>\n            </ng-container> -->\n            <!-- Position Column -->\n            @for (column of columnsToDisplay; track column) {\n              <ng-container matColumnDef=\"{{ column }}\">\n                <th\n                  mat-header-cell\n                  *matHeaderCellDef\n                  i18n=\"@@ClientFormProgramsTable.column\"\n                >\n                  @if (column === 'position') {\n                    No.\n                  } @else if (column === 'name') {\n                    Name\n                  } @else if (column === 'dateRange') {\n                    Date\n                  } @else if (column === 'noExercises') {\n                    No. of exercises\n                  } @else {\n                    Status\n                  }\n                </th>\n                <td mat-cell *matCellDef=\"let element\">\n                  @if (column === 'status') {\n                    <div class=\"status-chip-wrapper\">\n                      @if (element.isProgramCompleted) {\n                        <div class=\"status-chip status-completed\">\n                          <span i18n=\"@@ClientFormProgramsTable.rowCompleted\"\n                            >Completed</span\n                          >\n                        </div>\n                      } @else {\n                        <div class=\"status-chip status-inprogress\">\n                          <span i18n=\"@@ClientFormProgramsTable.rowInProgress\"\n                            >In progress</span\n                          >\n                        </div>\n                      }\n                    </div>\n                  } @else if (column === 'noExercises') {\n                    {{ element.selectedExercises.length }}\n                  } @else if (column === 'dateRange') {\n                    {{ element.dateRange.start | date: 'dd/MM/yyyy' }} -\n                    {{ element.dateRange.end | date: 'dd/MM/yyyy' }}\n                  } @else {\n                    {{ element[column] }}\n                  }\n                </td>\n              </ng-container>\n            }\n            <ng-container matColumnDef=\"expand\">\n              <th mat-header-cell *matHeaderCellDef aria-label=\"row actions\">\n                &nbsp;\n              </th>\n              <td mat-cell *matCellDef=\"let element\">\n                <div class=\"client-options\">\n                  @if (!element.isProgramCompleted) {\n                    <button\n                      mat-icon-button\n                      matTooltip=\"Edit\"\n                      i18n-matTooltip=\"\n                        @@ClientFormProgramsTable.editProgramButton\"\n                      aria-label=\"Edit icon button\"\n                      i18m-aria-label=\"@@ClientFormProgramsTable.editProgramBtnAriaLabel\"\n                      (click)=\"\n                        $event.stopPropagation();\n                        openEditClientProgramDialog(element.position)\n                      \"\n                    >\n                      <mat-icon>edit</mat-icon>\n                    </button>\n                  }\n                  <button\n                    mat-icon-button\n                    matTooltip=\"Add to client\"\n                    i18n-matTooltip=\"\n                      @@ClientFormProgramsTable.addToClientButton\"\n                    aria-label=\"Add to client icon button\"\n                    i18m-aria-label=\"@@ClientFormProgramsTable.addToClientAriaLabel\"\n                    (click)=\"\n                      $event.stopPropagation();\n                      reuseEditProgram(element.position)\n                    \"\n                  >\n                    <mat-icon>person_add</mat-icon>\n                    <!-- <mat-icon>content_copy</mat-icon> -->\n                  </button>\n                  <button\n                    mat-icon-button\n                    matTooltip=\"Delete\"\n                    i18n-matTooltip=\"\n                      @@ClientFormProgramsTable.deleteClientProgramButton\"\n                    aria-label=\"Delete icon button\"\n                    i18m-aria-label=\"@@ClientFormProgramsTable.deleteClientProgramAriaLabel\"\n                    (click)=\"\n                      $event.stopPropagation();\n                      openDeleteConfirmationDialog(element.position)\n                    \"\n                  >\n                    <mat-icon>delete_outline</mat-icon>\n                  </button>\n                  <button\n                    mat-icon-button\n                    aria-label=\"expand row\"\n                    (click)=\"\n                      expandedElement =\n                        expandedElement === element ? null : element;\n                      $event.stopPropagation()\n                    \"\n                  >\n                    @if (expandedElement === element) {\n                      <mat-icon>keyboard_arrow_up</mat-icon>\n                    } @else {\n                      <mat-icon>keyboard_arrow_down</mat-icon>\n                    }\n                  </button>\n                </div>\n              </td>\n            </ng-container>\n            <ng-container matColumnDef=\"expandedDetail\">\n              <td\n                mat-cell\n                *matCellDef=\"let element\"\n                [attr.colspan]=\"columnsToDisplayWithExpand.length\"\n              >\n                <div\n                  class=\"client-program-element-detail\"\n                  [@detailExpand]=\"\n                    element === expandedElement ? 'expanded' : 'collapsed'\n                  \"\n                >\n                  <div class=\"table-client-program-wrapper\">\n                    <!-- @for (\n                      selectedExercise of element.selectedExercises;\n                      track selectedExercise\n                    ) {\n                      <div>{{ selectedExercise.name }}</div>\n                    } -->\n                    <!-- <mat-list> -->\n                    @for (\n                      selectedExercise of element.selectedExercises;\n                      track selectedExercise;\n                      let i = $index\n                    ) {\n                      <div class=\"list-item\">\n                        <div class=\"list-item-flex\">\n                          <img\n                            [src]=\"selectedExercise.images?.mainImg\"\n                            [alt]=\"selectedExercise.name[selectedLanguage]\"\n                            style=\"width: 50px\"\n                          />\n                          <div class=\"list-info\">\n                            <span class=\"list-info-title\">{{\n                              selectedExercise.name[selectedLanguage]\n                            }}</span>\n                            <span class=\"list-info-details\">\n                              <span i18n=\"@@ClientFormProgramsTable.sets\"\n                                >Sets: {{ selectedExercise.sets }} |\n                              </span>\n                              <span i18n=\"@@ClientFormProgramsTable.reps\"\n                                >Reps: {{ selectedExercise.reps }} |\n                              </span>\n                              @if (selectedExercise.pause) {\n                                <span i18n=\"@@ClientFormProgramsTable.pause\"\n                                  >Pause: {{ selectedExercise.pause }} |\n                                </span>\n                              }\n                              @if (selectedExercise.weight) {\n                                <span i18n=\"@@ClientFormProgramsTable.weight\"\n                                  >Weight: {{ selectedExercise.weight }} |\n                                </span>\n                              }\n                              @if (selectedExercise.equipments.length !== 0) {\n                                <span i18n=\"@@EditProgram.exerciseEquipment\"\n                                  >Eq:\n                                  @for (\n                                    equipment of selectedExercise.equipments;\n                                    track equipment;\n                                    let last = $last\n                                  ) {\n                                    <span>{{\n                                      equipment.translations[selectedLanguage]\n                                    }}</span>\n                                    @if (!last) {\n                                      <span>, </span>\n                                    }\n                                  }\n                                </span>\n                              }\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                      <!-- <mat-list-item>\n                          <div matListItemAvatar class=\"mat-list-custom-avatar\">\n                            <img\n                              [src]=\"selectedExercise.images?.mainImg\"\n                              [alt]=\"selectedExercise.name\"\n                              style=\"width: 50px\"\n                            />\n                          </div>\n                          <div matListItemTitle>{{ selectedExercise.name }}</div>\n                          <div matListItemLine>\n                            {{\n                              'Sets: ' +\n                                selectedExercise.sets +\n                                '   |   ' +\n                                'Reps: ' +\n                                selectedExercise.reps\n                            }}\n                          </div>\n                        </mat-list-item> -->\n                    }\n                    <!-- <mat-divider></mat-divider> -->\n                    <!-- </mat-list> -->\n                  </div>\n                  <!-- <div class=\"client-program-element-diagram\">\n                    <div class=\"client-program-element-position\">\n                      {{ element.position }}\n                    </div>\n                    <div class=\"client-program-element-name\">{{ element.name }}</div>\n                    <div class=\"client-program-element-date\">{{ element.date }}</div>\n                    <div class=\"client-program-element-isCompleted\">\n                      {{ element.isProgramCompleted }}\n                    </div>\n                  </div> -->\n                  <!-- <div class=\"client-program-element-description\">\n                    {{ element.description }}\n                    <span class=\"client-program-element-description-attribution\">\n                      -- Wikipedia\n                    </span>\n                  </div> -->\n                </div>\n              </td>\n            </ng-container>\n            <tr\n              mat-header-row\n              *matHeaderRowDef=\"columnsToDisplayWithExpand\"\n            ></tr>\n            <tr\n              mat-row\n              *matRowDef=\"let element; columns: columnsToDisplayWithExpand\"\n              class=\"client-program-element-row table-rows\"\n              [class.client-program-expanded-row]=\"expandedElement === element\"\n              (click)=\"\n                expandedElement = expandedElement === element ? null : element\n              \"\n            ></tr>\n            <tr\n              mat-row\n              *matRowDef=\"let row; columns: ['expandedDetail']\"\n              class=\"client-program-detail-row\"\n            ></tr>\n            <tr class=\"mat-row\" *matNoDataRow>\n              <td\n                class=\"mat-cell no-data-cell\"\n                colspan=\"4\"\n                i18n=\"@@ClientFormProgramsTable.noProgramsAssigned\"\n              >\n                No programs assigned to clients\n              </td>\n            </tr>\n          </table>\n          <!-- } -->\n        </div>\n      </form>\n    </div>\n    <div>\n      <!-- <div class=\"clients-program-list-title\">\n        <h3>List of client's programs</h3>\n        <mat-divider\n          vertical\n          style=\"display: inline-block; height: 24px\"\n        ></mat-divider>\n      </div> -->\n      @defer {\n        <ui-basic-programs-table\n          class=\"ui-programs-table\"\n          [dataSource]=\"dataSourceAllPrograms\"\n          (getProgramsEvent)=\"getPrograms($event)\"\n          (viewProgramEvent)=\"viewProgramModal($event)\"\n          (addProgramToClientEvent)=\"addProgramToClient($event)\"\n        ></ui-basic-programs-table>\n      } @placeholder {\n        <div class=\"basic-programs-table-placeholder\">\n          <div class=\"basic-programs-title-placeholder\">\n            <h3\n              class=\"basic-programs-title-skeleton mat-title-large\"\n              i18n=\"@@ClientFormBasicProgramsTable.titlePlaceholder\"\n            >\n              List of program templates\n            </h3>\n            <div class=\"input-placeholder animate-skeleton\"></div>\n          </div>\n          <div class=\"basic-program-skeleton-container\">\n            <div class=\"basic-programs-table-skeleton animate-skeleton\"></div>\n            <div class=\"basic-programs-table-skeleton animate-skeleton\"></div>\n            <div class=\"basic-programs-table-skeleton animate-skeleton\"></div>\n            <div class=\"basic-programs-table-skeleton animate-skeleton\"></div>\n            <div class=\"basic-programs-table-skeleton animate-skeleton\"></div>\n            <div class=\"basic-programs-table-skeleton animate-skeleton\"></div>\n            <div class=\"basic-programs-table-skeleton animate-skeleton\"></div>\n            <div class=\"basic-programs-table-skeleton animate-skeleton\"></div>\n            <div class=\"basic-programs-table-skeleton animate-skeleton\"></div>\n          </div>\n          <div class=\"basic-programs-table-skeleton animate-skeleton\"></div>\n        </div>\n      }\n      <!-- <ui-programs-table\n        class=\"ui-programs-table\"\n        [mainProgramsList]=\"false\"\n        [dataSource]=\"dataSourceAllPrograms\"\n        (getProgramsEvent)=\"getPrograms($event)\"\n      ></ui-programs-table> -->\n    </div>\n  </div>\n</div>\n","import { SelectionModel } from '@angular/cdk/collections';\nimport { DatePipe } from '@angular/common';\nimport { Component, inject, OnDestroy, OnInit } from '@angular/core';\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\nimport {\n  ControlContainer,\n  FormArray,\n  FormControl,\n  FormGroup,\n  FormGroupDirective,\n  FormsModule,\n} from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nimport {\n  Client,\n  ClientsService,\n  Program,\n  ProgramsService,\n  ShareClientsDataService,\n  ShareStateService,\n} from '@slowautomobile/exercises';\nimport { Subscription } from 'rxjs';\nimport { DeleteConfirmationDialogComponent } from '../deleteConfirmationDialog/deleteConfirmationDialog.component';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport { ProgramModalComponent } from '../program-modal/program-modal.component';\nimport { ThemeManagerService } from '../../services/theme-manager.service';\nimport { BasicProgramsTableComponent } from '../basic-programs-table/basic-programs-table.component';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LocalstorageService } from '@slowautomobile/users';\n\nexport interface AdaptedProgram {\n  name: string;\n  id: string;\n  selectedExercises: object[];\n  // program: object;\n  isProgramCompleted: boolean;\n  // date: string;\n  dateRange: { start: string; end: string };\n  position: number;\n}\n\n@Component({\n  selector: 'ui-client-full-edit-programs',\n  templateUrl: './client-full-edit-programs.component.html',\n  styleUrl: './client-full-edit-programs.component.scss',\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed,void', style({ height: '0px', minHeight: '0' })),\n      state('expanded', style({ height: '*' })),\n      transition(\n        'expanded <=> collapsed',\n        animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'),\n      ),\n    ]),\n  ],\n  imports: [\n    MatDividerModule,\n    MatButtonModule,\n    MatTooltipModule,\n    MatIconModule,\n    FormsModule,\n    OverlayscrollbarsModule,\n    MatTableModule,\n    BasicProgramsTableComponent,\n    DatePipe,\n  ],\n  providers: [DatePipe],\n})\nexport class ClientFullEditProgramsComponent implements OnInit, OnDestroy {\n  private programsService = inject(ProgramsService);\n  private controlContainer = inject(ControlContainer);\n  private datePipe = inject(DatePipe);\n  dialog = inject(MatDialog);\n  private _snackBar = inject(MatSnackBar);\n  private router = inject(Router);\n  private formGroupDirective = inject(FormGroupDirective);\n  private shareClientsDataService = inject(ShareClientsDataService);\n  private clientsService = inject(ClientsService);\n  private localstorageService = inject(LocalstorageService);\n  private shareStateService = inject(ShareStateService);\n\n  isFetchingData = this.shareStateService.isFetchingData;\n\n  newButtonString = $localize`:@@PageToolbar.newBtn:New`;\n\n  columnsToDisplay: string[] = [\n    // 'select',\n    'position',\n    'name',\n    'noExercises',\n    'dateRange',\n    'status',\n  ];\n  dataSourceClientsPrograms = new MatTableDataSource<Program>();\n  dataSourceAllPrograms = new MatTableDataSource<Program>();\n\n  columnsToDisplayWithExpand = [...this.columnsToDisplay, 'expand'];\n  expandedElement!: AdaptedProgram | null;\n\n  selectedLanguage!: 'en' | 'de' | 'sr';\n  selection = new SelectionModel<Program>(true, []);\n  clientsPrograms: any[] = [];\n  allPrograms: any[] = [];\n  subscriptions = new Subscription();\n  position!: number;\n  form!: FormArray;\n  isProgramCompleted: boolean[] = [];\n  clientId!: string;\n  clientName!: string;\n  client!: Client;\n  // isClientProgram = this.shareClientsDataService.isClientProgram;\n  clientInfo = this.shareClientsDataService.clientInfo;\n  reuseProgram = this.shareClientsDataService.reuseProgram;\n  isBrandNewClientsProgram =\n    this.shareClientsDataService.isBrandNewClientsProgram;\n\n  parentForm!: FormGroup;\n\n  themeManager = inject(ThemeManagerService);\n  themeSignal = this.themeManager.themeSignal;\n\n  constructor() {\n    // Get data and assign the data to the data source for the table to render\n    this.getPrograms('template');\n  }\n\n  ngOnInit(): void {\n    this.selectedLanguage = this._getUserLanguageToken();\n    console.log(this.selectedLanguage);\n\n    this.form = this.controlContainer.control?.get('programs') as FormArray;\n    console.log(this.form);\n\n    this.clientId = this.formGroupDirective.form.get('clientInfo.id')?.value;\n    console.log(this.formGroupDirective.form);\n    this.clientName =\n      this.formGroupDirective.form.get('clientInfo.name')?.value;\n    this.client = this.formGroupDirective.form.get('clientInfo')?.value;\n    this.parentForm = this.formGroupDirective.form;\n    console.log(this.parentForm.value);\n    this.getClientsPrograms();\n    console.log(this.clientInfo());\n\n    // this.form.valueChanges.subscribe(() => );\n\n    // this.dataSourceClientsPrograms.data = this.form.get('programs')?.value;\n  }\n\n  private getClientsPrograms() {\n    this.clientsPrograms = [];\n    let adaptedProgram: AdaptedProgram;\n    this.form.value.forEach((programData: any, i: number) => {\n      console.log(programData);\n      // const startDate = this.datePipe.transform(\n      //   programData.dateRange.start,\n      //   'dd/MM/yyyy',\n      // );\n      // const endDate = this.datePipe.transform(\n      //   programData.dateRange.end,\n      //   'dd/MM/yyyy',\n      // );\n\n      const currentDate = new Date();\n      const programEndDate = new Date(programData.dateRange.end);\n      let isProgramCompleted;\n      if (programEndDate < currentDate) {\n        isProgramCompleted = true;\n        console.log('This program is completed');\n      } else {\n        isProgramCompleted = false;\n        console.log('This program is in progress');\n      }\n\n      adaptedProgram = {\n        id: programData.program.id,\n        name: programData.program.name,\n        selectedExercises: programData.program.selectedExercises,\n        // program: programData.program,\n        // date: `${startDate} - ${endDate}`,\n        dateRange: programData.dateRange,\n        position: i + 1,\n        isProgramCompleted: isProgramCompleted,\n      };\n      this.clientsPrograms.push(adaptedProgram);\n      console.log(adaptedProgram);\n    });\n    // const subscription = this.programsService\n    //   .getPrograms()\n    //   .subscribe(programsList => {\n    //     this.programs = [];\n    //     programsList.forEach((program, i) => {\n    //       program.position = i + 1;\n    //       this.programs.push(program);\n    //       // this.programs = programsList;\n    //     });\n    console.log(this.clientsPrograms);\n    this.dataSourceClientsPrograms.data = this.clientsPrograms;\n    //   });\n    // this.subscriptions.add(subscription);\n  }\n\n  openEditClientProgramDialog(programPosition: number) {\n    // console.log(programPosition);\n    // console.log(this.programs[programPosition - 1]);\n    // this.isClientProgram.set(true);\n    this.reuseProgram.set(false);\n    const programId = this.clientsPrograms[programPosition - 1].id;\n    const programName = this.clientsPrograms[programPosition - 1].name;\n\n    const dateRange = this.clientsPrograms[programPosition - 1].dateRange;\n    console.log(dateRange);\n\n    console.log(this.clientName);\n\n    this.clientInfo.set({\n      clientId: this.clientId,\n      clientName: this.clientName,\n      programPosition: programPosition - 1,\n      programId: programId,\n      programName: programName,\n      dateRange: dateRange,\n    });\n    console.log(this.clientInfo());\n\n    // this.router.navigateByUrl(`programs/form/${programId}`);\n    // this.router.navigateByUrl(\n    //   `clients/form/${this.clientId}/programs/${programId}`,\n    // );\n    this.router.navigate([`programs/form/${programId}`], {\n      queryParams: { programName: `${programName}`, isClientProgram: 'true' },\n    });\n  }\n\n  reuseEditProgram(programPosition: number) {\n    this.reuseProgram.set(true);\n    // this.isClientProgram.set(true);\n\n    const programId = this.clientsPrograms[programPosition - 1].id;\n    const programName = this.clientsPrograms[programPosition - 1].name;\n\n    this.clientInfo.set({\n      clientId: this.clientId,\n      clientName: this.clientName,\n      programPosition: programPosition - 1,\n      programId: programId,\n      programName: programName,\n      dateRange: { start: '', end: '' },\n    });\n\n    // this.router.navigateByUrl(`programs/form/${programId}`);\n    this.router.navigate([`programs/form/${programId}`], {\n      queryParams: { programName: `${programName}`, isClientProgram: 'true' },\n    });\n  }\n\n  openDeleteConfirmationDialog(programPosition: number) {\n    const dialogRef = this.dialog.open(DeleteConfirmationDialogComponent, {\n      width: '312px',\n      data: {\n        title: $localize`:@@DeleteConfirmationDialog.deleteTitleProgram:Delete selected program?`,\n        message: $localize`:@@DeleteConfirmationDialog.deleteTitleClientProgram:Deleting the selected program will remove it from clients profile.`,\n      },\n      panelClass: 'custom-dialog',\n    });\n\n    // SHOULD THERE BE A DIALOG, SINCE ANOTHER ACTION IS NEEDED FOR SAVING CHANGES(CLICKING SAVE BTN)???\n\n    const subscription = dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        // User confirmed deletion, handle deletion logic here\n        console.log('User confirmed deletion');\n        // this.deleteProgram(programPosition);\n        const subscription = this.clientsService\n          .deleteClientProgram(this.clientId, programPosition - 1)\n          .subscribe(res => {\n            this.form.removeAt(programPosition - 1);\n            this.getClientsPrograms();\n\n            // this.programs.splice(programPosition - 1, 1);\n            // this.dataSourceClientsPrograms.data = this.programs;\n\n            console.log(res);\n          });\n        this.subscriptions.add(subscription);\n\n        dialogRef.close();\n      } else {\n        // User canceled deletion\n        console.log('User canceled deletion');\n        dialogRef.close();\n      }\n    });\n    this.subscriptions.add(subscription);\n  }\n\n  /* private deleteProgram(programPosition: number) {\n    // console.log(programPosition - 1);\n    // console.log(this.form.value[programPosition - 1]);\n    this.form.removeAt(programPosition - 1);\n    this.getPrograms();\n\n    this._snackBar.open('Program deleted', '', {\n      duration: 2000,\n      panelClass: ['custom-snackbar-style'],\n    });\n    // this.programs.splice(programPosition - 1, 1);\n\n    // this.dataSourceClientsPrograms.data = this.programs;\n\n    // console.log(this.form.value);\n  } */\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSourceClientsPrograms.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  toggleAllRows() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSourceClientsPrograms.data);\n  }\n\n  // getProgram(programId: string) {\n  //   this.programsService.getProgram(programId).subscribe(program => {\n  //     console.log(program);\n  //   });\n  // }\n\n  /** The label for the checkbox on the passed row */\n  // checkboxLabel(row?: Program): string {\n  //   console.log('checkbox label dont work');\n  //   if (!row) {\n  //     return `${this.isAllSelected() ? 'deselect' : 'select'} all`;\n  //   }\n  //   return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${\n  //     row.position + 1\n  //   }`;\n  // }\n\n  createProgram() {\n    // console.log('add program to client');\n    // console.log(this.form);\n    // this.isClientProgram.set(true);\n\n    this.isBrandNewClientsProgram.set(true);\n    // this.clientInfo.set({\n    //   clientId: this.clientId,\n    //   clientName: this.clientName,\n    //   programPosition: 0,\n    //   programId: '',\n    //   programName: '',\n    //   dateRange: { start: '', end: '' },\n    // });\n\n    this.router.navigateByUrl(`programs/form`);\n  }\n\n  getPrograms(listOption: string) {\n    this.isFetchingData.set(true);\n\n    if (listOption === 'template') {\n      const subscription = this.programsService\n        .getPrograms()\n        .subscribe(programsList => {\n          this.allPrograms = [];\n          this.allPrograms = programsList;\n          this.allPrograms.sort((a, b) => {\n            return a.name.localeCompare(b.name);\n          });\n          console.log(this.allPrograms);\n\n          this.dataSourceAllPrograms.data = this.allPrograms;\n          this.isFetchingData.set(false);\n        });\n      this.subscriptions.add(subscription);\n    }\n  }\n\n  viewProgramModal(programId: string) {\n    const subscription = this.programsService\n      .getProgram(programId)\n      .subscribe(program => {\n        const dialogRef = this.dialog.open(ProgramModalComponent, {\n          width: '500px',\n          // height: '736px',\n          data: {\n            title: $localize`:@@ProgramModal.modalTitle:Program info`,\n            program: program,\n            selectedLang: this.selectedLanguage,\n          },\n          // disableClose: true, // Disable closing when clicked outside\n          panelClass: 'custom-dialog',\n          // enterAnimationDuration: 0,\n        });\n\n        const subscription = dialogRef.afterClosed().subscribe(result => {\n          if (result) {\n            this.addProgramToClient(result);\n          } else {\n            console.log('Program modal exited');\n          }\n        });\n        this.subscriptions.add(subscription);\n      });\n    this.subscriptions.add(subscription);\n  }\n\n  addProgramToClient(programId: string) {\n    console.log(programId);\n    const subscription = this.programsService\n      .getProgram(programId)\n      .subscribe(program => {\n        program.isTemplate = false;\n        console.log(program);\n        // Create independent program that belongs to client with its unique id and configuration\n        let startDate = this.form.get('clientInfo.dateRange.start')?.value;\n        console.log(startDate === null);\n        let endDate = this.form.get('clientInfo.dateRange.end')?.value;\n        startDate === undefined ? (startDate = new Date()) : startDate;\n        endDate === undefined\n          ? (endDate = startDate.getTime() + 7 * 24 * 60 * 60 * 1000)\n          : endDate;\n        const newProgram = {\n          // programId: createdProgram.id,\n          // programName: createdProgram.name,\n          program: {\n            name: program.name,\n            diagnosis: program.diagnosis,\n            notes: program.notes,\n            selectedExercises: program.selectedExercises,\n            templateProgramId: program.id,\n            isTemplate: false,\n          },\n          dateRange: {\n            // start: dateRange.start,\n            // end: dateRange.end,\n            start: startDate,\n            end: endDate,\n          },\n        };\n        console.log(newProgram);\n        const programs = this.form.value;\n        const updatedPrograms = [...programs, newProgram];\n        console.log(updatedPrograms);\n        const updatedClient = {\n          firstName: this.client.firstName,\n          lastName: this.client.lastName,\n          name: this.client.name,\n          email: this.client.email,\n          phone: this.client.phone,\n          address: {\n            street: this.client.address?.street,\n            streetNumber: this.client.address?.streetNumber,\n            city: this.client.address?.city,\n            zipCode: this.client.address?.zipCode,\n            country: this.client.address?.country,\n          },\n          programs: updatedPrograms,\n        };\n\n        const subscription = this.clientsService\n          .updateClient(updatedClient, this.clientId)\n          .subscribe(updatedClient => {\n            // Add full newly added client's program to form\n            const newAddedProgram = updatedClient.programs?.pop();\n            const programsArray = this.form as FormArray;\n            programsArray.push(new FormControl(newAddedProgram));\n\n            // this.parentForm.updateValueAndValidity();\n            this.getClientsPrograms();\n\n            const message = $localize`:@@Snackbar.programAddedToClient:Program added to client`;\n            this._snackBar.open(message, '', {\n              duration: 2000,\n              panelClass: ['custom-snackbar-style'],\n            });\n          });\n        this.subscriptions.add(subscription);\n\n        // lastValueFrom(timer(2100)).then(() => {\n        //   this.router.navigateByUrl(`clients/form/${this.clientId}`);\n        // });\n      });\n    this.subscriptions.add(subscription);\n  }\n\n  private _getUserLanguageToken(): 'en' | 'de' | 'sr' {\n    return <'en' | 'de' | 'sr'>(\n      this.localstorageService.getToken('userLanguage')?.split('-')[0]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {_IdGenerator, FocusMonitor} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {_CdkPrivateStyleLoader} from '@angular/cdk/private';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ANIMATION_MODULE_TYPE,\n  booleanAttribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  HostAttributeToken,\n  inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {_StructuralStylesLoader, MatPseudoCheckbox, MatRipple} from '../core';\n\n/**\n * @deprecated No longer used.\n * @breaking-change 11.0.0\n */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  /**\n   * Default appearance to be used by button toggles. Can be overridden by explicitly\n   * setting an appearance on a button toggle or group.\n   */\n  appearance?: MatButtonToggleAppearance;\n  /** Whether icon indicators should be hidden for single-selection button toggle groups. */\n  hideSingleSelectionIndicator?: boolean;\n  /** Whether icon indicators should be hidden for multiple-selection button toggle groups. */\n  hideMultipleSelectionIndicator?: boolean;\n  /** Whether disabled toggle buttons should be interactive. */\n  disabledInteractive?: boolean;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken<MatButtonToggleDefaultOptions>(\n  'MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS',\n  {\n    providedIn: 'root',\n    factory: MAT_BUTTON_TOGGLE_GROUP_DEFAULT_OPTIONS_FACTORY,\n  },\n);\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function MAT_BUTTON_TOGGLE_GROUP_DEFAULT_OPTIONS_FACTORY(): MatButtonToggleDefaultOptions {\n  return {\n    hideSingleSelectionIndicator: false,\n    hideMultipleSelectionIndicator: false,\n    disabledInteractive: false,\n  };\n}\n\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nexport const MAT_BUTTON_TOGGLE_GROUP = new InjectionToken<MatButtonToggleGroup>(\n  'MatButtonToggleGroup',\n);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true,\n};\n\n/** Change event object emitted by button toggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The button toggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the button toggle. */\n    public value: any,\n  ) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '(keydown)': '_keydown($event)',\n    '[attr.role]': \"multiple ? 'group' : 'radiogroup'\",\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _changeDetector = inject(ChangeDetectorRef);\n  private _dir = inject(Directionality, {optional: true});\n\n  private _multiple = false;\n  private _disabled = false;\n  private _disabledInteractive = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle), {\n    // Note that this would technically pick up toggles\n    // from nested groups, but that's not a case that we support.\n    descendants: true,\n  })\n  _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n  set name(value: string) {\n    this._name = value;\n    this._markButtonsForCheck();\n  }\n  private _name = inject(_IdGenerator).getId('mat-button-toggle-group-');\n\n  /** Whether the toggle group is vertical. */\n  @Input({transform: booleanAttribute}) vertical: boolean;\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected(): MatButtonToggle | MatButtonToggle[] {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    return this.multiple ? selected : selected[0] || null;\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input({transform: booleanAttribute})\n  get multiple(): boolean {\n    return this._multiple;\n  }\n  set multiple(value: boolean) {\n    this._multiple = value;\n    this._markButtonsForCheck();\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._markButtonsForCheck();\n  }\n\n  /** Whether buttons in the group should be interactive while they're disabled. */\n  @Input({transform: booleanAttribute})\n  get disabledInteractive(): boolean {\n    return this._disabledInteractive;\n  }\n  set disabledInteractive(value: boolean) {\n    this._disabledInteractive = value;\n    this._markButtonsForCheck();\n  }\n\n  /** The layout direction of the toggle button group. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n    new EventEmitter<MatButtonToggleChange>();\n\n  /** Whether checkmark indicator for single-selection button toggle groups is hidden. */\n  @Input({transform: booleanAttribute})\n  get hideSingleSelectionIndicator(): boolean {\n    return this._hideSingleSelectionIndicator;\n  }\n  set hideSingleSelectionIndicator(value: boolean) {\n    this._hideSingleSelectionIndicator = value;\n    this._markButtonsForCheck();\n  }\n  private _hideSingleSelectionIndicator: boolean;\n\n  /** Whether checkmark indicator for multiple-selection button toggle groups is hidden. */\n  @Input({transform: booleanAttribute})\n  get hideMultipleSelectionIndicator(): boolean {\n    return this._hideMultipleSelectionIndicator;\n  }\n  set hideMultipleSelectionIndicator(value: boolean) {\n    this._hideMultipleSelectionIndicator = value;\n    this._markButtonsForCheck();\n  }\n  private _hideMultipleSelectionIndicator: boolean;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const defaultOptions = inject<MatButtonToggleDefaultOptions>(\n      MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,\n      {optional: true},\n    );\n\n    this.appearance =\n      defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    this.hideSingleSelectionIndicator = defaultOptions?.hideSingleSelectionIndicator ?? false;\n    this.hideMultipleSelectionIndicator = defaultOptions?.hideMultipleSelectionIndicator ?? false;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    if (!this.multiple) {\n      this._initializeTabIndex();\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Handle keydown event calling to single-select button toggle. */\n  protected _keydown(event: KeyboardEvent) {\n    if (this.multiple || this.disabled) {\n      return;\n    }\n\n    const target = event.target as HTMLButtonElement;\n    const buttonId = target.id;\n    const index = this._buttonToggles.toArray().findIndex(toggle => {\n      return toggle.buttonId === buttonId;\n    });\n\n    let nextButton: MatButtonToggle | null = null;\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        nextButton = this._buttonToggles.get(index) || null;\n        break;\n      case UP_ARROW:\n        nextButton = this._getNextButton(index, -1);\n        break;\n      case LEFT_ARROW:\n        nextButton = this._getNextButton(index, this.dir === 'ltr' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        nextButton = this._getNextButton(index, 1);\n        break;\n      case RIGHT_ARROW:\n        nextButton = this._getNextButton(index, this.dir === 'ltr' ? 1 : -1);\n        break;\n      default:\n        return;\n    }\n\n    if (nextButton) {\n      event.preventDefault();\n      nextButton._onButtonClick();\n      nextButton.focus();\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(toggle: MatButtonToggle): void {\n    const event = new MatButtonToggleChange(toggle, this.value);\n    this._rawValue = event.value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(\n    toggle: MatButtonToggle,\n    select: boolean,\n    isUserInput = false,\n    deferEvents = false,\n  ) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (this._selectionModel) {\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      }\n    } else {\n      deferEvents = true;\n    }\n\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve().then(() => this._updateModelValue(toggle, isUserInput));\n    } else {\n      this._updateModelValue(toggle, isUserInput);\n    }\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel && this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Initializes the tabindex attribute using the radio pattern. */\n  private _initializeTabIndex() {\n    this._buttonToggles.forEach(toggle => {\n      toggle.tabIndex = -1;\n    });\n    if (this.selected) {\n      (this.selected as MatButtonToggle).tabIndex = 0;\n    } else {\n      for (let i = 0; i < this._buttonToggles.length; i++) {\n        const toggle = this._buttonToggles.get(i)!;\n\n        if (!toggle.disabled) {\n          toggle.tabIndex = 0;\n          break;\n        }\n      }\n    }\n    this._markButtonsForCheck();\n  }\n\n  /** Obtain the subsequent toggle to which the focus shifts. */\n  private _getNextButton(startIndex: number, offset: number): MatButtonToggle | null {\n    const items = this._buttonToggles;\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (startIndex + offset * i + items.length) % items.length;\n      const item = items.get(index);\n\n      if (item && !item.disabled) {\n        return item;\n      }\n    }\n\n    return null;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any | any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    const toggles = this._buttonToggles.toArray();\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, toggles));\n    } else {\n      this._clearSelection();\n      this._selectValue(value, toggles);\n    }\n\n    // In single selection mode we need at least one enabled toggle to always be focusable.\n    if (!this.multiple && toggles.every(toggle => toggle.tabIndex === -1)) {\n      for (const toggle of toggles) {\n        if (!toggle.disabled) {\n          toggle.tabIndex = 0;\n          break;\n        }\n      }\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => {\n      toggle.checked = false;\n      // If the button toggle is in single select mode, initialize the tabIndex.\n      if (!this.multiple) {\n        toggle.tabIndex = -1;\n      }\n    });\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any, toggles: MatButtonToggle[]) {\n    for (const toggle of toggles) {\n      if (toggle.value === value) {\n        toggle.checked = true;\n        this._selectionModel.select(toggle);\n        if (!this.multiple) {\n          // If the button toggle is in single select mode, reset the tabIndex.\n          toggle.tabIndex = 0;\n        }\n        break;\n      }\n    }\n  }\n\n  /** Syncs up the group's value with the model and emits the change event. */\n  private _updateModelValue(toggle: MatButtonToggle, isUserInput: boolean) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent(toggle);\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Marks all of the child button toggles to be checked. */\n  private _markButtonsForCheck() {\n    this._buttonToggles?.forEach(toggle => toggle._markForCheck());\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrl: 'button-toggle.css',\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-disabled-interactive]': 'disabledInteractive',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[attr.id]': 'id',\n    '[attr.name]': 'null',\n    '(focus)': 'focus()',\n    'role': 'presentation',\n  },\n  imports: [MatRipple, MatPseudoCheckbox],\n})\nexport class MatButtonToggle implements OnInit, AfterViewInit, OnDestroy {\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _focusMonitor = inject(FocusMonitor);\n  private _idGenerator = inject(_IdGenerator);\n  private _animationMode = inject(ANIMATION_MODULE_TYPE, {optional: true});\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Underlying native `button` element. */\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string {\n    return `${this.id}-button`;\n  }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex of the toggle. */\n  @Input()\n  get tabIndex(): number | null {\n    return this._tabIndex;\n  }\n  set tabIndex(value: number | null) {\n    if (value !== this._tabIndex) {\n      this._tabIndex = value;\n      this._markForCheck();\n    }\n  }\n  private _tabIndex: number | null;\n\n  /** Whether ripples are disabled on the button toggle. */\n  @Input({transform: booleanAttribute}) disableRipple: boolean;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input({transform: booleanAttribute})\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    if (value !== this._checked) {\n      this._checked = value;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n  }\n  private _disabled: boolean = false;\n\n  /** Whether the button should remain interactive when it is disabled. */\n  @Input({transform: booleanAttribute})\n  get disabledInteractive(): boolean {\n    return (\n      this._disabledInteractive ||\n      (this.buttonToggleGroup !== null && this.buttonToggleGroup.disabledInteractive)\n    );\n  }\n  set disabledInteractive(value: boolean) {\n    this._disabledInteractive = value;\n  }\n  private _disabledInteractive: boolean;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n    new EventEmitter<MatButtonToggleChange>();\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n    const toggleGroup = inject<MatButtonToggleGroup>(MAT_BUTTON_TOGGLE_GROUP, {optional: true})!;\n    const defaultTabIndex = inject(new HostAttributeToken('tabindex'), {optional: true}) || '';\n    const defaultOptions = inject<MatButtonToggleDefaultOptions>(\n      MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,\n      {optional: true},\n    );\n\n    this._tabIndex = parseInt(defaultTabIndex) || 0;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n      defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    this.disabledInteractive = defaultOptions?.disabledInteractive ?? false;\n  }\n\n  ngOnInit() {\n    const group = this.buttonToggleGroup;\n    this.id = this.id || this._idGenerator.getId('mat-button-toggle-');\n\n    if (group) {\n      if (group._isPrechecked(this)) {\n        this.checked = true;\n      } else if (group._isSelected(this) !== this._checked) {\n        // As side effect of the circular dependency between the toggle group and the button,\n        // we may end up in a state where the button is supposed to be checked on init, but it\n        // isn't, because the checked value was assigned too early. This can happen when Ivy\n        // assigns the static input value before the `ngOnInit` has run.\n        group._syncButtonToggle(this, this._checked);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // This serves two purposes:\n    // 1. We don't want the animation to fire on the first render for pre-checked toggles so we\n    //    delay adding the class until the view is rendered.\n    // 2. We don't want animation if the `NoopAnimationsModule` is provided.\n    if (this._animationMode !== 'NoopAnimations') {\n      this._elementRef.nativeElement.classList.add('mat-button-toggle-animations-enabled');\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n\n  /** Focuses the button. */\n  focus(options?: FocusOptions): void {\n    this._buttonElement.nativeElement.focus(options);\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    if (this.disabled) {\n      return;\n    }\n\n    const newChecked = this.isSingleSelector() ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n\n    if (this.isSingleSelector()) {\n      const focusable = this.buttonToggleGroup._buttonToggles.find(toggle => {\n        return toggle.tabIndex === 0;\n      });\n      // Modify the tabindex attribute of the last focusable button toggle to -1.\n      if (focusable) {\n        focusable.tabIndex = -1;\n      }\n      // Modify the tabindex attribute of the presently selected button toggle to 0.\n      this.tabIndex = 0;\n    }\n\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the name that should be assigned to the inner DOM node. */\n  _getButtonName(): string | null {\n    if (this.isSingleSelector()) {\n      return this.buttonToggleGroup.name;\n    }\n    return this.name || null;\n  }\n\n  /** Whether the toggle is in single selection mode. */\n  isSingleSelector(): boolean {\n    return this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n  }\n}\n","<button #button class=\"mat-button-toggle-button mat-focus-indicator\"\n        type=\"button\"\n        [id]=\"buttonId\"\n        [attr.role]=\"isSingleSelector() ? 'radio' : 'button'\"\n        [attr.tabindex]=\"disabled && !disabledInteractive ? -1 : tabIndex\"\n        [attr.aria-pressed]=\"!isSingleSelector() ? checked : null\"\n        [attr.aria-checked]=\"isSingleSelector() ? checked : null\"\n        [disabled]=\"(disabled && !disabledInteractive) || null\"\n        [attr.name]=\"_getButtonName()\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.aria-labelledby]=\"ariaLabelledby\"\n        [attr.aria-disabled]=\"disabled && disabledInteractive ? 'true' : null\"\n        (click)=\"_onButtonClick()\">\n  @if (buttonToggleGroup && (\n    !buttonToggleGroup.multiple && !buttonToggleGroup.hideSingleSelectionIndicator ||\n    buttonToggleGroup.multiple && !buttonToggleGroup.hideMultipleSelectionIndicator)\n  ) {\n    <div class=\"mat-button-toggle-checkbox-wrapper\">\n      <mat-pseudo-checkbox\n        [disabled]=\"disabled\"\n        state=\"checked\"\n        aria-hidden=\"true\"\n        appearance=\"minimal\"/>\n    </div>\n  }\n\n  <span class=\"mat-button-toggle-label-content\">\n    <ng-content></ng-content>\n  </span>\n</button>\n\n<span class=\"mat-button-toggle-focus-overlay\"></span>\n<span class=\"mat-button-toggle-ripple\" matRipple\n     [matRippleTrigger]=\"button\"\n     [matRippleDisabled]=\"this.disableRipple || this.disabled\">\n</span>\n","<div class=\"table-wrapper\">\n  <mat-form-field>\n    <mat-label i18n=\"@@ProgramsList.inputFilterLabel\">Filter</mat-label>\n    <input\n      matInput\n      (keyup)=\"applyFilter($event)\"\n      placeholder=\"E.g. Seated back stretch\"\n      i18n-placeholder=\"@@ProgramsList.inputPlaceholder\"\n      #input\n    />\n  </mat-form-field>\n\n  <div class=\"search-segmented-btns\">\n    <mat-button-toggle-group\n      class=\"segmented-btns\"\n      [(ngModel)]=\"listOption\"\n      name=\"listOption\"\n      aria-label=\"List Option\"\n      i18n-aria-label=\"@@ProgramsList.listOptionAriaLabel\"\n      (change)=\"getPrograms(listOption)\"\n      hideSingleSelectionIndicator=\"true\"\n    >\n      <mat-button-toggle value=\"all\" i18n=\"@@ProgramsList.listOptionAll\"\n        >All</mat-button-toggle\n      >\n      <mat-button-toggle\n        value=\"template\"\n        i18n=\"@@ProgramsList.listOptionTemplate\"\n        >Template</mat-button-toggle\n      >\n\n      <mat-button-toggle value=\"client\" i18n=\"@@ProgramsList.listOptionClient\"\n        >Client</mat-button-toggle\n      >\n      <mat-button-toggle\n        value=\"favorite\"\n        i18n=\"@@ProgramsList.listOptionFavorite\"\n        >Favorite</mat-button-toggle\n      >\n    </mat-button-toggle-group>\n  </div>\n\n  <!-- <div class=\"mat-elevation-z8 programs-table\"> -->\n  <div class=\"programs-table-container\">\n    <div\n      class=\"programs-table table-scroll-container\"\n      overlay-scrollbars\n      [options]=\"themeSignal()\"\n      [defer]\n    >\n      <!-- @if (!isFetchingData()) { -->\n        <table\n          mat-table\n          class=\"mat-table-background\"\n          [dataSource]=\"dataSource\"\n          matSort\n        >\n          <!-- ID Column -->\n          <!-- <ng-container matColumnDef=\"id\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>ID</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.id }}</td>\n          </ng-container> -->\n          <!-- Name Column -->\n          <ng-container matColumnDef=\"name\">\n            <th\n              mat-header-cell\n              *matHeaderCellDef\n              mat-sort-header\n              i18n=\"@@ProgramsList.tableColumnName\"\n            >\n              Name\n            </th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.name }}</td>\n          </ng-container>\n          <!-- Program Type Column -->\n          <ng-container matColumnDef=\"type\">\n            <th\n              mat-header-cell\n              *matHeaderCellDef\n              i18n=\"@@ProgramsList.tableColumnType\"\n            >\n              Type\n            </th>\n            <td mat-cell *matCellDef=\"let row\">\n              @if (row.isTemplate) {\n                <span i18n=\"@@ProgramsList.tableColumnTemplate\">Template</span>\n                @if (row.isAdminProgram) {\n                  <span\n                    class=\"template-icon\"\n                    matTooltip=\"Default program\"\n                    i18n-matTooltip=\"@@ProgramsList.defaultProgramTooltip\"\n                    ><img width=\"16\" src=\"assets/images/leaf-img.svg\" alt=\"\"\n                  /></span>\n                } @else {\n                  <span\n                    class=\"template-icon\"\n                    matTooltip=\"User's program\"\n                    i18n-matTooltip=\"@@ProgramsList.UsersProgramTooltip\"\n                    ><img\n                      width=\"14\"\n                      src=\"assets/images/blue-user-icon.svg\"\n                      alt=\"\"\n                  /></span>\n                }\n              } @else {\n                <span>{{ row.clientName }}</span>\n              }\n              <!-- {{ row.isTemplate ? 'Template' : row.clientName }} -->\n            </td>\n          </ng-container>\n          <!-- Number of Exercises Column -->\n          <ng-container matColumnDef=\"numberOfExercises\">\n            <th\n              mat-header-cell\n              *matHeaderCellDef\n              i18n=\"@@ProgramsList.tableColumnNumberOfExercises\"\n            >\n              No. exercises\n            </th>\n            <td mat-cell *matCellDef=\"let row\">\n              {{ row.selectedExercises.length }}\n            </td>\n          </ng-container>\n          <!-- Options Column -->\n          <ng-container matColumnDef=\"options\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let row\">\n              <div class=\"program-options\">\n                @if (row.clientName) {\n                  <button\n                    mat-icon-button\n                    matTooltip=\"Add to client\"\n                    i18n-matTooltip=\"@@ProgramsList.addToClientTooltip\"\n                    aria-label=\"Add to client icon button\"\n                    i18n-aria-label=\"@@ProgramsList.addToClientAriaLabel\"\n                    (click)=\"\n                      $event.stopPropagation();\n                      reuseEditProgram(row.position, row.id)\n                    \"\n                  >\n                    <!-- <mat-icon>content_copy</mat-icon> -->\n                    <mat-icon>person_add</mat-icon>\n                  </button>\n                } @else {\n                  @if (!(row.isAdminProgram && !isAdmin)) {\n                    <button\n                      mat-icon-button\n                      matTooltip=\"Edit\"\n                      i18n-matTooltip=\"@@ProgramsList.editProgramTooltip\"\n                      aria-label=\"Edit icon button\"\n                      i18n-aria-label=\"@@ProgramsList.editProgramAriaLabel\"\n                      (click)=\"openEditProgram(row.id)\"\n                      [disabled]=\"row.isAdminProgram && !isAdmin\"\n                    >\n                      <mat-icon>edit</mat-icon>\n                    </button>\n                  }\n                }\n                @if (!row.clientName) {\n                  <button\n                    mat-icon-button\n                    matTooltip=\"Add to client\"\n                    i18n-matTooltip=\"@@ProgramsList.addToClientTooltip\"\n                    aria-label=\"Add to client icon button\"\n                    i18n-aria-label=\"@@ProgramsList.addToClientAriaLabel\"\n                    (click)=\"\n                      $event.stopPropagation();\n                      reuseEditProgram(row.position, row.id)\n                    \"\n                  >\n                    <!-- <mat-icon>content_copy</mat-icon> -->\n                    <mat-icon>person_add</mat-icon>\n                  </button>\n                }\n                @if (!(row.isAdminProgram && !isAdmin)) {\n                  <button\n                    mat-icon-button\n                    matTooltip=\"Delete\"\n                    i18n-matTooltip=\"@@ProgramsList.deleteProgramTooltip\"\n                    aria-label=\"Delete icon button\"\n                    i18n-aria-label=\"@@ProgramsList.deleteProgramAriaLabel\"\n                    (click)=\"openDeleteConfirmationDialog(row.id, listOption)\"\n                    [disabled]=\"row.isAdminProgram && !isAdmin\"\n                  >\n                    <mat-icon>delete_outline</mat-icon>\n                  </button>\n                }\n                @if (row.isFavorite) {\n                  <button\n                    (click)=\"removeFromFavorites(row)\"\n                    mat-icon-button\n                    class=\"favorite-program-star\"\n                    matTooltip=\"Remove from favorites\"\n                    i18n-matTooltip=\"\n                      @@ProgramsList.removeProgramFromFavoritesTooltip\"\n                    aria-label=\"Favorite icon-button with a star icon\"\n                    i18n-aria-label=\"\n                      @@ProgramsList.removeProgramFromFavoritesAriaLabel\"\n                  >\n                    <mat-icon>star</mat-icon>\n                  </button>\n                } @else {\n                  <button\n                    (click)=\"addToFavorites(row)\"\n                    mat-icon-button\n                    matTooltip=\"Add to favorites\"\n                    i18n-matTooltip=\"\n                      @@ProgramsList.addProgramToFavoritesTooltip\"\n                    aria-label=\"Favorite icon-button with a star icon\"\n                    i18n-aria-label=\"\n                      @@ProgramsList.addProgramToFavoritesAriaLabel\"\n                  >\n                    <mat-icon>star_border</mat-icon>\n                  </button>\n                }\n              </div>\n            </td>\n          </ng-container>\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr\n            mat-row\n            *matRowDef=\"let row; columns: displayedColumns\"\n            class=\"table-rows\"\n          ></tr>\n          <!-- Row shown when there is no matching data. -->\n          <tr class=\"mat-row\" *matNoDataRow>\n            <td\n              class=\"mat-cell\"\n              colspan=\"4\"\n              i18n=\"@@ProgramsList.noMatchingFilter\"\n            >\n              No data matching the filter \"{{ input.value }}\"\n            </td>\n          </tr>\n        </table>\n      <!-- } @else {\n        <div class=\"programs-table-skeleton\">\n          <div class=\"row-skeleton\" style=\"height: 48px; margin-top: 8px\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n          <div class=\"row-skeleton\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n          <div class=\"row-skeleton\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n          <div class=\"row-skeleton\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n          <div class=\"row-skeleton\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n          <div class=\"row-skeleton\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n          <div class=\"row-skeleton\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n          <div class=\"row-skeleton\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n          <div class=\"row-skeleton\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n        </div>\n      } -->\n    </div>\n    <mat-paginator\n      class=\"mat-paginator-background\"\n      pageSize=\"10\"\n      [pageSizeOptions]=\"[5, 10, 25, 100]\"\n      aria-label=\"Select page of programs\"\n      i18n-aria-label=\"@@ProgramsList.selectPageOfPrograms\"\n    ></mat-paginator>\n  </div>\n</div>\n","import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  inject,\n  Input,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport {MatSort, Sort, MatSortModule} from '@angular/material/sort';\nimport {MatTableDataSource, MatTableModule} from '@angular/material/table';\nimport {MatPaginator, MatPaginatorModule} from '@angular/material/paginator';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { Program, ShareStateService } from '@slowautomobile/exercises';\nimport { ThemeManagerService } from '../../services/theme-manager.service';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { MatIconButton } from '@angular/material/button';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonToggleGroup, MatButtonToggle } from '@angular/material/button-toggle';\nimport { MatInput } from '@angular/material/input';\nimport { MatFormField, MatLabel } from '@angular/material/form-field';\n\n@Component({\n    selector: 'ui-programs-table',\n    templateUrl: './programs-table.component.html',\n    styleUrl: './programs-table.component.scss',\n    imports: [\n        MatFormField,\n        MatLabel,\n        MatInput,\n        MatButtonToggleGroup,\n        FormsModule,\n        MatButtonToggle,\n        OverlayscrollbarsModule,\n        MatTableModule,\n        MatSort,\n        MatSortModule,\n        MatIconButton,\n        MatTooltip,\n        MatIcon,\n        MatPaginatorModule\n    ]\n})\nexport class ProgramsTableComponent implements AfterViewInit {\n  // private shareStateService = inject(ShareStateService);\n \n  // isFetchingData = this.shareStateService.isFetchingData;\n  \n  displayedColumns: string[] = ['name', 'numberOfExercises', 'type', 'options'];\n  @Input() isAdmin  = false;\n  @Input() isAdminProgram = false;\n  @Input() dataSource = new MatTableDataSource<Program>();\n  @Input() listOption = 'all';\n  @Input() mainProgramsList = false;\n  @ViewChild(MatSort) sort!: MatSort;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n\n  @Output() getProgramsEvent: EventEmitter<string> = new EventEmitter();\n  @Output() reuseEditProgramEvent: EventEmitter<any> = new EventEmitter();\n  @Output() openEditProgramEvent: EventEmitter<any> = new EventEmitter();\n  @Output() openDeleteConfirmationDialogEvent: EventEmitter<any> =\n    new EventEmitter();\n\n  @Output() favoriteProgram = new EventEmitter<Program>();\n  @Output() removeFavoriteProgram = new EventEmitter<Program>();\n\n  themeManager = inject(ThemeManagerService);\n  themeSignal = this.themeManager.themeSignal;\n\n  // @Output() viewProgramEvent: EventEmitter<any> = new EventEmitter();\n  // @Output() addProgramToClientEvent: EventEmitter<any> = new EventEmitter();\n\n  getPrograms(listOption: string) {\n    console.log(this.dataSource.data);\n    this.getProgramsEvent.emit(listOption);\n    console.log(this.dataSource.data);\n  }\n\n  reuseEditProgram(programPosition: number, programId: string) {\n    this.reuseEditProgramEvent.emit({ programPosition, programId });\n  }\n\n  openEditProgram(programId: string) {\n    this.openEditProgramEvent.emit(programId);\n  }\n\n  openDeleteConfirmationDialog(itemId: string, listOption: string) {\n    this.openDeleteConfirmationDialogEvent.emit({ itemId, listOption });\n  }\n\n  // viewProgram(programId: string) {\n  //   this.viewProgramEvent.emit(programId);\n  //   console.log('this is open view program', programId);\n  // }\n\n  // addProgramToClient(programId: string) {\n  //   this.addProgramToClientEvent.emit(programId);\n  // }\n\n  addToFavorites(program: Program) {\n    program.isFavorite = true;\n    this.favoriteProgram.emit(program);\n    console.log(program);\n  }\n\n  removeFromFavorites(program: Program) {\n    program.isFavorite = false;\n    this.removeFavoriteProgram.emit(program);\n    console.log(program);\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n}\n","<mat-form-field appearance=\"outline\" class=\"add-clients\">\n  <mat-label i18n=\"@@FilterSelectClients.addClientsLabel\"\n    >Add client(s)</mat-label\n  >\n  <mat-icon matPrefix>people_outline</mat-icon>\n  <mat-select\n    [formControl]=\"clientCtrl\"\n    placeholder=\"Add client(s)\"\n    i18n-placeholder=\"@@FilterSelectClients.addClientsInputPlaceholder\"\n    [multiple]=\"true\"\n    #singleSelect\n  >\n    <mat-option>\n      <ngx-mat-select-search\n        [formControl]=\"clientFilterCtrl\"\n        placeholderLabel=\"Find clients...\"\n        i18n-placeholderLabel=\"@@FilterSelectClients.addClientsPlaceholderLabel\"\n        noEntriesFoundLabel=\"No entries found\"\n        i18n-noEntriesFoundLabel=\"@@FilterSelectClients.noEntriesFoundLabel\"\n        [showToggleAllCheckbox]=\"true\"\n        toggleAllCheckboxTooltipMessage=\"Select / Unselect All\"\n        i18n-toggleAllCheckboxTooltipMessage=\"\n          @@FilterSelectClients.toggleAllCheckboxTooltipMessage\"\n        [toggleAllCheckboxIndeterminate]=\"isIndeterminate\"\n        [toggleAllCheckboxChecked]=\"isChecked\"\n        (toggleAll)=\"toggleSelectAll($event)\"\n      >\n        <mat-icon ngxMatSelectSearchClear>close</mat-icon>\n      </ngx-mat-select-search>\n    </mat-option>\n\n    @for (client of filteredClients | async; track client) {\n      <mat-option [value]=\"client\">\n        {{ client.name }}\n      </mat-option>\n    }\n  </mat-select>\n\n  <!-- Add this if attribute is set to \"required\" -->\n  <!-- @if (clientCtrl.invalid) {\n    <mat-hint>*required</mat-hint>\n  } -->\n</mat-form-field>\n<!-- <div class=\"inner-wrap\">\n    <h3>Selected Values</h3>\n    <ul *ngFor=\"let client of clientCtrl?.value\">\n      <li>{{ client.id }}</li>\n    </ul>\n  </div> -->\n","import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  inject,\n} from '@angular/core';\nimport {\n  ControlContainer,\n  FormControl,\n  Validators,\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { MatSelect } from '@angular/material/select';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport {\n  Client,\n  ClientsService,\n  ShareClientsDataService,\n} from '@slowautomobile/exercises';\nimport { ReplaySubject, Subject, Subscription, take, takeUntil } from 'rxjs';\nimport { AsyncPipe } from '@angular/common';\nimport { NgxMatSelectSearchModule } from 'ngx-mat-select-search';\nimport { MatOption } from '@angular/material/core';\nimport { MatIcon } from '@angular/material/icon';\nimport {\n  MatFormField,\n  MatLabel,\n  MatPrefix,\n} from '@angular/material/form-field';\n\n// export interface Client {\n//   id: string | undefined;\n//   name: string;\n// }\n\n/** list of clients */\n// export const CLIENTS: Client[] = [\n//   { name: 'John Doe', id: 'A' },\n//   { name: 'Lucy Jay', id: 'B' },\n//   { name: 'Jimmy Jeep', id: 'C' },\n//   { name: 'Vince Bretton', id: 'D' },\n// ];\n\n@Component({\n    selector: 'ui-filter-select-clients',\n    templateUrl: './filter-select-clients.component.html',\n    styleUrl: './filter-select-clients.component.scss',\n    imports: [\n        MatFormField,\n        MatLabel,\n        MatIcon,\n        MatPrefix,\n        MatSelect,\n        FormsModule,\n        ReactiveFormsModule,\n        MatOption,\n        NgxMatSelectSearchModule,\n        AsyncPipe,\n    ]\n})\nexport class FilterSelectClientsComponent\n  implements OnInit, OnDestroy, AfterViewInit\n{\n  private shareClientsDataService = inject(ShareClientsDataService);\n  private clientsService = inject(ClientsService);\n  private controlContainer = inject(ControlContainer);\n\n  /** list of clients */\n  clients: Client[] = [];\n  // clients = this.shareClientsDataService.clients;\n  /** control for the selected client */\n  public clientCtrl!: FormControl;\n  subscriptions = new Subscription();\n\n  /** control for the MatSelect filter keyword */\n  public clientFilterCtrl: FormControl = new FormControl();\n\n  /** list of clients filtered by search keyword */\n  public filteredClients: ReplaySubject<Client[]> = new ReplaySubject<Client[]>(\n    1,\n  );\n\n  reuseProgram = this.shareClientsDataService.reuseProgram;\n\n  // Emit new value to parent on change\n  // @Output() valueChange = new EventEmitter<string>();\n\n  @ViewChild('singleSelect', { static: true })\n  singleSelect!: MatSelect;\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _onDestroy = new Subject<void>();\n\n  /** flags to set the toggle all checkbox state */\n  isIndeterminate = false;\n  isChecked = false;\n\n  isClientProgramSignal = this.shareClientsDataService.isClientProgram;\n  clientInfo = this.shareClientsDataService.clientInfo;\n\n  ngOnInit() {\n    this.clientCtrl = this.controlContainer.control?.get(\n      'selectedClients',\n    ) as FormControl;\n    console.log(this.clientCtrl);\n    console.log(this.clientInfo());\n\n    // this.clientCtrl.setValidators([Validators.required]);\n    // this.clientCtrl.updateValueAndValidity();\n    // set initial selection\n    // this.clientCtrl.setValue([this.clients[1], this.clients[2]]);\n    if (this.isClientProgramSignal() && !this.reuseProgram()) {\n      const subscription = this.clientsService\n        .getClient(this.clientInfo().clientId)\n        .subscribe(client => {\n          // Return a whole client document, so that createProgram/updateProgram can have programs property\n          console.log('this is client', client);\n\n          this.clientCtrl.setValue([\n            client,\n            // { name: this.clientInfo().clientName, id: this.clientInfo().clientId },\n          ]);\n        });\n      this.subscriptions.add(subscription);\n    }\n\n    const subscription = this.clientsService\n      .getClients()\n      .subscribe(clientsList => {\n        // clientsList.forEach(client => {\n        //   this.clients.push({\n        //     id: client.id,\n        //     name: `${client.lastName} ${client.firstName}`,\n        //   });\n        // });\n        this.clients = clientsList;\n        console.log(this.clients);\n        // load the initial client list\n        this.filteredClients.next(this.clients.slice());\n      });\n    this.subscriptions.add(subscription);\n\n    // this.clientCtrl.valueChanges.subscribe(clients => {\n    //   this.valueChange.emit(clients)\n    // });\n\n    // listen for search field value changes\n    this.clientFilterCtrl.valueChanges\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        this.filterClients();\n      });\n  }\n\n  ngAfterViewInit() {\n    this.setInitialValue();\n    // this.filteredClients.next(this.clients().slice());\n    // console.log(this.clients());\n    /// TRY TO LAZY LOAD COMPONENT, MODULE OR TO MAKE STEPS IN STEPPER DIFFERENT COMPONENTS??? IT WORKS, REFACTOR MORE ELEGANTLY!\n  }\n\n  /**\n   * Sets the initial value after the filteredClients are loaded initially\n   */\n  protected setInitialValue() {\n    this.filteredClients\n      .pipe(take(1), takeUntil(this._onDestroy))\n      .subscribe(() => {\n        this.singleSelect.compareWith = (a: Client, b: Client) =>\n          a && b && a.id === b.id;\n      });\n  }\n\n  protected filterClients() {\n    if (!this.clients) {\n      return;\n    }\n    // get the search keyword\n    let search = this.clientFilterCtrl.value;\n    if (!search) {\n      this.filteredClients.next(this.clients.slice());\n      return;\n    } else {\n      search = search.toLowerCase();\n    }\n    // filter the clients\n    this.filteredClients.next(\n      this.clients.filter(\n        client => client.name.toLowerCase().indexOf(search) > -1,\n      ),\n    );\n  }\n\n  toggleSelectAll(selectAllValue: boolean) {\n    this.filteredClients\n      .pipe(take(1), takeUntil(this._onDestroy))\n      .subscribe(val => {\n        if (selectAllValue) {\n          this.clientCtrl.patchValue(val);\n        } else {\n          this.clientCtrl.patchValue([]);\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n    this.subscriptions.unsubscribe();\n  }\n}\n","<!-- <div class=\"search-container\">\n  <form [formGroup]=\"options\">\n    <div class=\"search-form-fields\">\n      <mat-form-field\n        [hideRequiredMarker]=\"hideRequiredControl.value\"\n      >\n        <input matInput placeholder=\"Search exercises\" required />\n         <button mat-icon-button aria-label=\"Example icon button with a vertical three dot icon\">\n        <mat-icon>more_vert</mat-icon>\n      </button>\n      </mat-form-field>\n    </div>\n  </form>\n</div> -->\n\n<div class=\"search-container\">\n  <div class=\"search-form-fields\">\n    <!-- <input type=\"text\" [formControl]=\"term\"/> -->\n    <mat-form-field class=\"search-input\">\n      <input\n        matInput\n        [formControl]=\"searchTerm\"\n        placeholder=\"Search exercises\"\n        i18n-placeholder=\"@@SearchSegmentedBtns.searchExercisesPlaceholder\"\n      />\n      @if (searchTerm.value) {\n        <button\n          matSuffix\n          mat-icon-button\n          matTooltip=\"Clear\"\n          i18n-matTooltip=\"@@SearchSegmentedBtns.clearSearch\"\n          aria-label=\"Clear\"\n          i18n-aria-label=\"@@SearchSegmentedBtns.clearSearchAriaLabel\"\n          (click)=\"clearSearch()\"\n        >\n          <mat-icon>close</mat-icon>\n        </button>\n      }\n      <button\n        matTooltip=\"Filter\"\n        i18n-matTooltip=\"@@SearchSegmentedBtns.filterSearch\"\n        aria-label=\"Filter button\"\n        i18n-aria-label=\"@@SearchSegmentedBtns.filterSearchAriaLabel\"\n        (click)=\"toggleDrawer()\"\n        mat-icon-button\n        matSuffix\n      >\n        <mat-icon>tune</mat-icon>\n      </button>\n      <!-- <button\n        mat-icon-button\n        matPrefix\n        aria-label=\"Filter button\"\n        style=\"color: black\"\n      >\n        <mat-icon>search</mat-icon>\n      </button> -->\n      <mat-icon matPrefix>search</mat-icon>\n    </mat-form-field>\n  </div>\n</div>\n","import { Component, OnDestroy, OnInit, inject } from '@angular/core';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\n// import { FloatLabelType } from '@angular/material/form-field';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport {\n  SearchService,\n  ShareDataService,\n  ShareStateService,\n} from '@slowautomobile/exercises';\nimport {\n  Subscription,\n  combineLatest,\n  concat,\n  debounceTime,\n  delay,\n  distinctUntilChanged,\n  of,\n  startWith,\n  switchMap,\n  tap,\n} from 'rxjs';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { MatIconButton } from '@angular/material/button';\nimport { MatInput } from '@angular/material/input';\nimport {\n  MatFormField,\n  MatSuffix,\n  MatPrefix,\n} from '@angular/material/form-field';\nimport { LocalstorageService } from '@slowautomobile/users';\n\n@Component({\n    selector: 'ui-search',\n    templateUrl: './search.component.html',\n    styleUrl: './search.component.scss',\n    imports: [\n        MatFormField,\n        MatInput,\n        FormsModule,\n        ReactiveFormsModule,\n        MatIconButton,\n        MatSuffix,\n        MatTooltip,\n        MatIcon,\n        MatPrefix,\n    ]\n})\nexport class SearchComponent implements OnInit, OnDestroy {\n  private searchService = inject(SearchService);\n  private shareDataService = inject(ShareDataService);\n  private shareStateService = inject(ShareStateService);\n  private localstorageService = inject(LocalstorageService);\n\n  searchTerm = new FormControl();\n  // @Output() toggleDrawerSignal = new EventEmitter<void>();\n  filter?: any;\n  drawerOpen = false;\n  subscriptions = new Subscription();\n  selectedLanguage!: string;\n  isFetchingData = this.shareStateService.isFetchingData;\n\n  // constructor(\n  //   private searchService: SearchService,\n  //   private shareDataService: ShareDataService,\n  //   private shareStateService: ShareStateService,\n  // ) {\n  //   // this.searchTerm.valueChanges.pipe(\n  //   //   debounceTime(400),\n  //   //   distinctUntilChanged(),\n  //   //   switchMap(async (searchTerm) => this.searchService\n  //   //       .searchExercises(searchTerm)\n  //   //       .subscribe(exercises => console.log(exercises)),\n  //   //   ),\n  //   // );\n  //   // let filterData = this.shareDataService.filterData$.subscribe(filterData => console.log(filterData))\n  //   // this.searchTerm.valueChanges\n  //   //   .pipe(\n  //   //     debounceTime(400),\n  //   //     distinctUntilChanged(),\n  //   //     switchMap(() => searchService.searchExercises(this.searchTerm.value)),\n  //   //   )\n  //   //   .subscribe(searchResult =>\n  //   //     shareDataService.updateSearchResults(searchResult),\n  //   //   );\n  //   // combineLatest([\n  //   //   this.searchTerm.valueChanges,\n  //   //   this.shareDataService.filterData$,\n  //   // ])\n  //   //   .pipe(\n  //   //     debounceTime(400),\n  //   //     distinctUntilChanged(),\n  //   //     switchMap(([searchTerm, filterData]) =>\n  //   //       searchService.searchExercises(searchTerm, filterData),\n  //   //     ),\n  //   //   )\n  //   //   .subscribe(searchResult =>\n  //   //     shareDataService.updateSearchResults(searchResult),\n  //   //   );\n  // }\n\n  ngOnInit(): void {\n    this.selectedLanguage = this._getUserLanguageToken();\n    console.log('running from search');\n    const subscription = combineLatest([\n      // concat(of(''), this.searchTerm.valueChanges),\n      this.searchTerm.valueChanges.pipe(\n        startWith(''),\n        tap(() => this.isFetchingData.set(true)),\n      ),\n      this.shareDataService.filterData$,\n    ])\n      .pipe(\n        debounceTime(400),\n        distinctUntilChanged(),\n        switchMap(([searchTerm, filterData]) =>\n          this.searchService.searchExercises(\n            searchTerm,\n            filterData,\n            this.selectedLanguage,\n          ),\n        ),\n      )\n      .subscribe(searchResult =>\n        this.shareDataService.updateSearchResults(searchResult),\n      );\n    this.subscriptions.add(subscription);\n  }\n\n  clearSearch() {\n    this.searchTerm.setValue('');\n  }\n\n  // hideRequiredControl = new FormControl(false);\n  // floatLabelControl = new FormControl('auto' as FloatLabelType);\n  // options = this._formBuilder.group({\n  //   hideRequired: this.hideRequiredControl,\n  //   floatLabel: this.floatLabelControl,\n  // });\n  // hide = true;\n  // constructor(private _formBuilder: FormBuilder) {}\n\n  // getFloatLabelValue(): FloatLabelType {\n  //   return this.floatLabelControl.value || 'auto';\n  // }\n\n  // get formValue(): FormControl {\n  //   return this.searchTerm.get('images') as FormArray;\n  // }\n  toggleDrawer() {\n    // BehaviorSubject toggle drawer state\n    // this.shareDataService.toggleDrawerSignal$.subscribe(\n    //   drawerSignal => {\n    //     this.drawerOpen = drawerSignal;\n    //   },\n    // );\n    // this.shareDataService.updateToggleDrawerResults(!this.drawerOpen);\n\n    // Toggle signal drawer state\n    this.shareStateService.drawerSignal.update(value => !value);\n  }\n\n  private _getUserLanguageToken(): string {\n    return <string>(\n      this.localstorageService.getToken('userLanguage')?.split('-')[0]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {SelectionModel} from '../../collections';\nimport {Observable} from 'rxjs';\nimport {TreeControl} from './tree-control';\n\n/**\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\n *\n * @deprecated Use one of levelAccessor or childrenAccessor. To be removed in a future version.\n * @breaking-change 21.0.0\n */\nexport abstract class BaseTreeControl<T, K = T> implements TreeControl<T, K> {\n  /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\n  abstract getDescendants(dataNode: T): T[];\n\n  /** Expands all data nodes in the tree. */\n  abstract expandAll(): void;\n\n  /** Saved data node for `expandAll` action. */\n  dataNodes: T[];\n\n  /** A selection model with multi-selection to track expansion status. */\n  expansionModel: SelectionModel<K> = new SelectionModel<K>(true);\n\n  /**\n   * Returns the identifier by which a dataNode should be tracked, should its\n   * reference change.\n   *\n   * Similar to trackBy for *ngFor\n   */\n  trackBy?: (dataNode: T) => K;\n\n  /** Get depth of a given data node, return the level number. This is for flat tree node. */\n  getLevel: (dataNode: T) => number;\n\n  /**\n   * Whether the data node is expandable. Returns true if expandable.\n   * This is for flat tree node.\n   */\n  isExpandable: (dataNode: T) => boolean;\n\n  /** Gets a stream that emits whenever the given data node's children change. */\n  getChildren: (dataNode: T) => Observable<T[]> | T[] | undefined | null;\n\n  /** Toggles one single data node's expanded/collapsed state. */\n  toggle(dataNode: T): void {\n    this.expansionModel.toggle(this._trackByValue(dataNode));\n  }\n\n  /** Expands one single data node. */\n  expand(dataNode: T): void {\n    this.expansionModel.select(this._trackByValue(dataNode));\n  }\n\n  /** Collapses one single data node. */\n  collapse(dataNode: T): void {\n    this.expansionModel.deselect(this._trackByValue(dataNode));\n  }\n\n  /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n  isExpanded(dataNode: T): boolean {\n    return this.expansionModel.isSelected(this._trackByValue(dataNode));\n  }\n\n  /** Toggles a subtree rooted at `node` recursively. */\n  toggleDescendants(dataNode: T): void {\n    this.expansionModel.isSelected(this._trackByValue(dataNode))\n      ? this.collapseDescendants(dataNode)\n      : this.expandDescendants(dataNode);\n  }\n\n  /** Collapse all dataNodes in the tree. */\n  collapseAll(): void {\n    this.expansionModel.clear();\n  }\n\n  /** Expands a subtree rooted at given data node recursively. */\n  expandDescendants(dataNode: T): void {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\n  }\n\n  /** Collapses a subtree rooted at given data node recursively. */\n  collapseDescendants(dataNode: T): void {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\n  }\n\n  protected _trackByValue(value: T | K): K {\n    return this.trackBy ? this.trackBy(value as T) : (value as K);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {BaseTreeControl} from './base-tree-control';\n\n/** Optional set of configuration that can be provided to the FlatTreeControl. */\nexport interface FlatTreeControlOptions<T, K> {\n  trackBy?: (dataNode: T) => K;\n}\n\n/**\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\n *\n * @deprecated Use one of levelAccessor or childrenAccessor instead. To be removed in a future\n * version.\n * @breaking-change 21.0.0\n */\nexport class FlatTreeControl<T, K = T> extends BaseTreeControl<T, K> {\n  /** Construct with flat tree data node functions getLevel and isExpandable. */\n  constructor(\n    public override getLevel: (dataNode: T) => number,\n    public override isExpandable: (dataNode: T) => boolean,\n    public options?: FlatTreeControlOptions<T, K>,\n  ) {\n    super();\n\n    if (this.options) {\n      this.trackBy = this.options.trackBy;\n    }\n  }\n\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   */\n  getDescendants(dataNode: T): T[] {\n    const startIndex = this.dataNodes.indexOf(dataNode);\n    const results: T[] = [];\n\n    // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n    // The level of descendants of a tree node must be greater than the level of the given\n    // tree node.\n    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n    // If we reach a node whose level is greater than the level of the tree node, we hit a\n    // sibling of an ancestor.\n    for (\n      let i = startIndex + 1;\n      i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]);\n      i++\n    ) {\n      results.push(this.dataNodes[i]);\n    }\n    return results;\n  }\n\n  /**\n   * Expands all data nodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n   * data nodes of the tree.\n   */\n  expandAll(): void {\n    this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {Directive, InjectionToken, ViewContainerRef, inject} from '@angular/core';\n\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nexport const CDK_TREE_NODE_OUTLET_NODE = new InjectionToken<{}>('CDK_TREE_NODE_OUTLET_NODE');\n\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[cdkTreeNodeOutlet]',\n})\nexport class CdkTreeNodeOutlet {\n  viewContainer = inject(ViewContainerRef);\n  _node? = inject(CDK_TREE_NODE_OUTLET_NODE, {optional: true});\n\n  constructor(...args: unknown[]);\n  constructor() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, TemplateRef, inject} from '@angular/core';\n\n/** Context provided to the tree node component. */\nexport class CdkTreeNodeOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n@Directive({\n  selector: '[cdkTreeNodeDef]',\n  inputs: [{name: 'when', alias: 'cdkTreeNodeDefWhen'}],\n})\nexport class CdkTreeNodeDef<T> {\n  /** @docs-private */\n  template = inject<TemplateRef<any>>(TemplateRef);\n\n  /**\n   * Function that should return true if this node template should be used for the provided node\n   * data and index. If left undefined, this node will be considered the default node template to\n   * use when no other when functions return true for the data.\n   * For every node, there must be at least one when function that passes or an undefined to\n   * default.\n   */\n  when: (index: number, nodeData: T) => boolean;\n\n  constructor(...args: unknown[]);\n  constructor() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nexport function getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nexport function getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nexport function getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n\n/**\n * Returns an error to be thrown when there is no tree control.\n * @docs-private\n */\nexport function getTreeControlMissingError() {\n  return Error(`Could not find a tree control, levelAccessor, or childrenAccessor for the tree.`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple ways of specifying children or level\n * provided to the tree.\n * @docs-private\n */\nexport function getMultipleTreeControlsError() {\n  return Error(`More than one of tree control, levelAccessor, or childrenAccessor were provided.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {\n  TREE_KEY_MANAGER,\n  TreeKeyManagerFactory,\n  TreeKeyManagerItem,\n  TreeKeyManagerOptions,\n  TreeKeyManagerStrategy,\n} from '../a11y';\nimport {Directionality} from '../bidi';\nimport {\n  CollectionViewer,\n  DataSource,\n  isDataSource,\n  SelectionChange,\n  SelectionModel,\n} from '../collections';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  EmbeddedViewRef,\n  Input,\n  IterableChangeRecord,\n  IterableDiffer,\n  IterableDiffers,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  TrackByFunction,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  numberAttribute,\n  inject,\n  booleanAttribute,\n} from '@angular/core';\nimport {coerceObservable} from '../coercion/private';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  EMPTY,\n  Observable,\n  Subject,\n  Subscription,\n  isObservable,\n  of as observableOf,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  concatMap,\n  map,\n  reduce,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n} from 'rxjs/operators';\nimport {TreeControl} from './control/tree-control';\nimport {CdkTreeNodeDef, CdkTreeNodeOutletContext} from './node';\nimport {CdkTreeNodeOutlet} from './outlet';\nimport {\n  getMultipleTreeControlsError,\n  getTreeControlMissingError,\n  getTreeMissingMatchingNodeDefError,\n  getTreeMultipleDefaultNodeDefsError,\n  getTreeNoValidDataSourceError,\n} from './tree-errors';\n\ntype RenderingData<T> =\n  | {\n      flattenedNodes: null;\n      nodeType: null;\n      renderNodes: readonly T[];\n    }\n  | {\n      flattenedNodes: readonly T[];\n      nodeType: 'nested' | 'flat';\n      renderNodes: readonly T[];\n    };\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n@Component({\n  selector: 'cdk-tree',\n  exportAs: 'cdkTree',\n  template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'cdk-tree',\n    'role': 'tree',\n    '(keydown)': '_sendKeydownToKeyManager($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n  // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n  // declared elsewhere, they are checked when their declaration points are checked.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  imports: [CdkTreeNodeOutlet],\n})\nexport class CdkTree<T, K = T>\n  implements\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    CollectionViewer,\n    OnDestroy,\n    OnInit\n{\n  private _differs = inject(IterableDiffers);\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  private _elementRef = inject(ElementRef);\n\n  private _dir = inject(Directionality);\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  /** Differ used to find the changes in the data provided by the data source. */\n  private _dataDiffer: IterableDiffer<T>;\n\n  /** Stores the node definition that does not have a when predicate. */\n  private _defaultNodeDef: CdkTreeNodeDef<T> | null;\n\n  /** Data subscription */\n  private _dataSubscription: Subscription | null;\n\n  /** Level of nodes */\n  private _levels: Map<K, number> = new Map<K, number>();\n\n  /** The immediate parents for a node. This is `null` if there is no parent. */\n  private _parents: Map<K, T | null> = new Map<K, T | null>();\n\n  /**\n   * Nodes grouped into each set, which is a list of nodes displayed together in the DOM.\n   *\n   * Lookup key is the parent of a set. Root nodes have key of null.\n   *\n   * Values is a 'set' of tree nodes. Each tree node maps to a treeitem element. Sets are in the\n   * order that it is rendered. Each set maps directly to aria-posinset and aria-setsize attributes.\n   */\n  private _ariaSets: Map<K | null, T[]> = new Map<K | null, T[]>();\n\n  /**\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\n   * stream of view window (what dataNodes are currently on screen).\n   * Data source can be an observable of data array, or a data array to render.\n   */\n  @Input()\n  get dataSource(): DataSource<T> | Observable<T[]> | T[] {\n    return this._dataSource;\n  }\n  set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  private _dataSource: DataSource<T> | Observable<T[]> | T[];\n\n  /**\n   * The tree controller\n   *\n   * @deprecated Use one of `levelAccessor` or `childrenAccessor` instead. To be removed in a\n   * future version.\n   * @breaking-change 21.0.0\n   */\n  @Input() treeControl?: TreeControl<T, K>;\n\n  /**\n   * Given a data node, determines what tree level the node is at.\n   *\n   * One of levelAccessor or childrenAccessor must be specified, not both.\n   * This is enforced at run-time.\n   */\n  @Input() levelAccessor?: (dataNode: T) => number;\n\n  /**\n   * Given a data node, determines what the children of that node are.\n   *\n   * One of levelAccessor or childrenAccessor must be specified, not both.\n   * This is enforced at run-time.\n   */\n  @Input() childrenAccessor?: (dataNode: T) => T[] | Observable<T[]>;\n\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\n   * relative to the function to know if a node should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n  @Input() trackBy: TrackByFunction<T>;\n\n  /**\n   * Given a data node, determines the key by which we determine whether or not this node is expanded.\n   */\n  @Input() expansionKey?: (dataNode: T) => K;\n\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(CdkTreeNodeOutlet, {static: true}) _nodeOutlet: CdkTreeNodeOutlet;\n\n  /** The tree node template for the tree */\n  @ContentChildren(CdkTreeNodeDef, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true,\n  })\n  _nodeDefs: QueryList<CdkTreeNodeDef<T>>;\n\n  // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n  //     Remove the MAX_VALUE in viewChange\n  /**\n   * Stream containing the latest information on what rows are being displayed on screen.\n   * Can be used by the data source to as a heuristic of what data should be provided.\n   */\n  readonly viewChange = new BehaviorSubject<{start: number; end: number}>({\n    start: 0,\n    end: Number.MAX_VALUE,\n  });\n\n  /** Keep track of which nodes are expanded. */\n  private _expansionModel?: SelectionModel<K>;\n\n  /**\n   * Maintain a synchronous cache of flattened data nodes. This will only be\n   * populated after initial render, and in certain cases, will be delayed due to\n   * relying on Observable `getChildren` calls.\n   */\n  private _flattenedNodes: BehaviorSubject<readonly T[]> = new BehaviorSubject<readonly T[]>([]);\n\n  /** The automatically determined node type for the tree. */\n  private _nodeType: BehaviorSubject<'flat' | 'nested' | null> = new BehaviorSubject<\n    'flat' | 'nested' | null\n  >(null);\n\n  /** The mapping between data and the node that is rendered. */\n  private _nodes: BehaviorSubject<Map<K, CdkTreeNode<T, K>>> = new BehaviorSubject(\n    new Map<K, CdkTreeNode<T, K>>(),\n  );\n\n  /**\n   * Synchronous cache of nodes for the `TreeKeyManager`. This is separate\n   * from `_flattenedNodes` so they can be independently updated at different\n   * times.\n   */\n  private _keyManagerNodes: BehaviorSubject<readonly T[]> = new BehaviorSubject<readonly T[]>([]);\n\n  private _keyManagerFactory = inject(TREE_KEY_MANAGER) as TreeKeyManagerFactory<CdkTreeNode<T, K>>;\n\n  /** The key manager for this tree. Handles focus and activation based on user keyboard input. */\n  _keyManager: TreeKeyManagerStrategy<CdkTreeNode<T, K>>;\n  private _viewInit = false;\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngAfterContentInit() {\n    this._initializeKeyManager();\n  }\n\n  ngAfterContentChecked() {\n    this._updateDefaultNodeDefinition();\n    this._subscribeToDataChanges();\n  }\n\n  ngOnDestroy() {\n    this._nodeOutlet.viewContainer.clear();\n\n    this.viewChange.complete();\n    this._onDestroy.next();\n    this._onDestroy.complete();\n\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n      (this.dataSource as DataSource<T>).disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n\n    // In certain tests, the tree might be destroyed before this is initialized\n    // in `ngAfterContentInit`.\n    this._keyManager?.destroy();\n  }\n\n  ngOnInit() {\n    this._checkTreeControlUsage();\n    this._initializeDataDiffer();\n  }\n\n  ngAfterViewInit() {\n    this._viewInit = true;\n  }\n\n  private _updateDefaultNodeDefinition() {\n    const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n    if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeMultipleDefaultNodeDefsError();\n    }\n    this._defaultNodeDef = defaultNodeDefs[0];\n  }\n\n  /**\n   * Sets the node type for the tree, if it hasn't been set yet.\n   *\n   * This will be called by the first node that's rendered in order for the tree\n   * to determine what data transformations are required.\n   */\n  _setNodeTypeIfUnset(newType: 'flat' | 'nested') {\n    const currentType = this._nodeType.value;\n\n    if (currentType === null) {\n      this._nodeType.next(newType);\n    } else if ((typeof ngDevMode === 'undefined' || ngDevMode) && currentType !== newType) {\n      console.warn(\n        `Tree is using conflicting node types which can cause unexpected behavior. ` +\n          `Please use tree nodes of the same type (e.g. only flat or only nested). ` +\n          `Current node type: \"${currentType}\", new node type \"${newType}\".`,\n      );\n    }\n  }\n\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the node outlet. Otherwise start listening for new data.\n   */\n  private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n      (this.dataSource as DataSource<T>).disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n\n    // Remove the all dataNodes if there is now no data source\n    if (!dataSource) {\n      this._nodeOutlet.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n    if (this._nodeDefs) {\n      this._subscribeToDataChanges();\n    }\n  }\n\n  _getExpansionModel() {\n    if (!this.treeControl) {\n      this._expansionModel ??= new SelectionModel<K>(true);\n      return this._expansionModel;\n    }\n    return this.treeControl.expansionModel;\n  }\n\n  /** Set up a subscription for the data provided by the data source. */\n  private _subscribeToDataChanges() {\n    if (this._dataSubscription) {\n      return;\n    }\n\n    let dataStream: Observable<readonly T[]> | undefined;\n\n    if (isDataSource(this._dataSource)) {\n      dataStream = this._dataSource.connect(this);\n    } else if (isObservable(this._dataSource)) {\n      dataStream = this._dataSource;\n    } else if (Array.isArray(this._dataSource)) {\n      dataStream = observableOf(this._dataSource);\n    }\n\n    if (!dataStream) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throw getTreeNoValidDataSourceError();\n      }\n      return;\n    }\n\n    this._dataSubscription = this._getRenderData(dataStream)\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(renderingData => {\n        this._renderDataChanges(renderingData);\n      });\n  }\n\n  /** Given an Observable containing a stream of the raw data, returns an Observable containing the RenderingData */\n  private _getRenderData(dataStream: Observable<readonly T[]>): Observable<RenderingData<T>> {\n    const expansionModel = this._getExpansionModel();\n    return combineLatest([\n      dataStream,\n      this._nodeType,\n      // We don't use the expansion data directly, however we add it here to essentially\n      // trigger data rendering when expansion changes occur.\n      expansionModel.changed.pipe(\n        startWith(null),\n        tap(expansionChanges => {\n          this._emitExpansionChanges(expansionChanges);\n        }),\n      ),\n    ]).pipe(\n      switchMap(([data, nodeType]) => {\n        if (nodeType === null) {\n          return observableOf({renderNodes: data, flattenedNodes: null, nodeType} as const);\n        }\n\n        // If we're here, then we know what our node type is, and therefore can\n        // perform our usual rendering pipeline, which necessitates converting the data\n        return this._computeRenderingData(data, nodeType).pipe(\n          map(convertedData => ({...convertedData, nodeType}) as const),\n        );\n      }),\n    );\n  }\n\n  private _renderDataChanges(data: RenderingData<T>) {\n    if (data.nodeType === null) {\n      this.renderNodeChanges(data.renderNodes);\n      return;\n    }\n\n    // If we're here, then we know what our node type is, and therefore can\n    // perform our usual rendering pipeline.\n    this._updateCachedData(data.flattenedNodes);\n    this.renderNodeChanges(data.renderNodes);\n    this._updateKeyManagerItems(data.flattenedNodes);\n  }\n\n  private _emitExpansionChanges(expansionChanges: SelectionChange<K> | null) {\n    if (!expansionChanges) {\n      return;\n    }\n\n    const nodes = this._nodes.value;\n    for (const added of expansionChanges.added) {\n      const node = nodes.get(added);\n      node?._emitExpansionState(true);\n    }\n    for (const removed of expansionChanges.removed) {\n      const node = nodes.get(removed);\n      node?._emitExpansionState(false);\n    }\n  }\n\n  private _initializeKeyManager() {\n    const items = combineLatest([this._keyManagerNodes, this._nodes]).pipe(\n      map(([keyManagerNodes, renderNodes]) =>\n        keyManagerNodes.reduce<CdkTreeNode<T, K>[]>((items, data) => {\n          const node = renderNodes.get(this._getExpansionKey(data));\n          if (node) {\n            items.push(node);\n          }\n          return items;\n        }, []),\n      ),\n    );\n\n    const keyManagerOptions: TreeKeyManagerOptions<CdkTreeNode<T, K>> = {\n      trackBy: node => this._getExpansionKey(node.data),\n      skipPredicate: node => !!node.isDisabled,\n      typeAheadDebounceInterval: true,\n      horizontalOrientation: this._dir.value,\n    };\n\n    this._keyManager = this._keyManagerFactory(items, keyManagerOptions);\n  }\n\n  private _initializeDataDiffer() {\n    // Provide a default trackBy based on `_getExpansionKey` if one isn't provided.\n    const trackBy = this.trackBy ?? ((_index: number, item: T) => this._getExpansionKey(item));\n    this._dataDiffer = this._differs.find([]).create(trackBy);\n  }\n\n  private _checkTreeControlUsage() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // Verify that Tree follows API contract of using one of TreeControl, levelAccessor or\n      // childrenAccessor. Throw an appropriate error if contract is not met.\n      let numTreeControls = 0;\n\n      if (this.treeControl) {\n        numTreeControls++;\n      }\n      if (this.levelAccessor) {\n        numTreeControls++;\n      }\n      if (this.childrenAccessor) {\n        numTreeControls++;\n      }\n\n      if (!numTreeControls) {\n        throw getTreeControlMissingError();\n      } else if (numTreeControls > 1) {\n        throw getMultipleTreeControlsError();\n      }\n    }\n  }\n\n  /** Check for changes made in the data and render each change (node added/removed/moved). */\n  renderNodeChanges(\n    data: readonly T[],\n    dataDiffer: IterableDiffer<T> = this._dataDiffer,\n    viewContainer: ViewContainerRef = this._nodeOutlet.viewContainer,\n    parentData?: T,\n  ) {\n    const changes = dataDiffer.diff(data);\n\n    // Some tree consumers expect change detection to propagate to nodes\n    // even when the array itself hasn't changed; we explicitly detect changes\n    // anyways in order for nodes to update their data.\n    //\n    // However, if change detection is called while the component's view is\n    // still initing, then the order of child views initing will be incorrect;\n    // to prevent this, we only exit early if the view hasn't initialized yet.\n    if (!changes && !this._viewInit) {\n      return;\n    }\n\n    changes?.forEachOperation(\n      (\n        item: IterableChangeRecord<T>,\n        adjustedPreviousIndex: number | null,\n        currentIndex: number | null,\n      ) => {\n        if (item.previousIndex == null) {\n          this.insertNode(data[currentIndex!], currentIndex!, viewContainer, parentData);\n        } else if (currentIndex == null) {\n          viewContainer.remove(adjustedPreviousIndex!);\n        } else {\n          const view = viewContainer.get(adjustedPreviousIndex!);\n          viewContainer.move(view!, currentIndex);\n        }\n      },\n    );\n\n    // If the data itself changes, but keeps the same trackBy, we need to update the templates'\n    // context to reflect the new object.\n    changes?.forEachIdentityChange((record: IterableChangeRecord<T>) => {\n      const newData = record.item;\n      if (record.currentIndex != undefined) {\n        const view = viewContainer.get(record.currentIndex);\n        (view as EmbeddedViewRef<any>).context.$implicit = newData;\n      }\n    });\n\n    // Note: we only `detectChanges` from a top-level call, otherwise we risk overflowing\n    // the call stack since this method is called recursively (see #29733.)\n    // TODO: change to `this._changeDetectorRef.markForCheck()`,\n    // or just switch this component to use signals.\n    if (parentData) {\n      this._changeDetectorRef.markForCheck();\n    } else {\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Finds the matching node definition that should be used for this node data. If there is only\n   * one node definition, it is returned. Otherwise, find the node definition that has a when\n   * predicate that returns true with the data. If none return true, return the default node\n   * definition.\n   */\n  _getNodeDef(data: T, i: number): CdkTreeNodeDef<T> {\n    if (this._nodeDefs.length === 1) {\n      return this._nodeDefs.first!;\n    }\n\n    const nodeDef =\n      this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n\n    if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeMissingMatchingNodeDefError();\n    }\n\n    return nodeDef!;\n  }\n\n  /**\n   * Create the embedded view for the data node template and place it in the correct index location\n   * within the data node view container.\n   */\n  insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\n    const levelAccessor = this._getLevelAccessor();\n\n    const node = this._getNodeDef(nodeData, index);\n    const key = this._getExpansionKey(nodeData);\n\n    // Node context that will be provided to created embedded view\n    const context = new CdkTreeNodeOutletContext<T>(nodeData);\n\n    parentData ??= this._parents.get(key) ?? undefined;\n    // If the tree is flat tree, then use the `getLevel` function in flat tree control\n    // Otherwise, use the level of parent node.\n    if (levelAccessor) {\n      context.level = levelAccessor(nodeData);\n    } else if (parentData !== undefined && this._levels.has(this._getExpansionKey(parentData))) {\n      context.level = this._levels.get(this._getExpansionKey(parentData))! + 1;\n    } else {\n      context.level = 0;\n    }\n    this._levels.set(key, context.level);\n\n    // Use default tree nodeOutlet, or nested node's nodeOutlet\n    const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n    container.createEmbeddedView(node.template, context, index);\n\n    // Set the data to just created `CdkTreeNode`.\n    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n    if (CdkTreeNode.mostRecentTreeNode) {\n      CdkTreeNode.mostRecentTreeNode.data = nodeData;\n    }\n  }\n\n  /** Whether the data node is expanded or collapsed. Returns true if it's expanded. */\n  isExpanded(dataNode: T): boolean {\n    return !!(\n      this.treeControl?.isExpanded(dataNode) ||\n      this._expansionModel?.isSelected(this._getExpansionKey(dataNode))\n    );\n  }\n\n  /** If the data node is currently expanded, collapse it. Otherwise, expand it. */\n  toggle(dataNode: T): void {\n    if (this.treeControl) {\n      this.treeControl.toggle(dataNode);\n    } else if (this._expansionModel) {\n      this._expansionModel.toggle(this._getExpansionKey(dataNode));\n    }\n  }\n\n  /** Expand the data node. If it is already expanded, does nothing. */\n  expand(dataNode: T): void {\n    if (this.treeControl) {\n      this.treeControl.expand(dataNode);\n    } else if (this._expansionModel) {\n      this._expansionModel.select(this._getExpansionKey(dataNode));\n    }\n  }\n\n  /** Collapse the data node. If it is already collapsed, does nothing. */\n  collapse(dataNode: T): void {\n    if (this.treeControl) {\n      this.treeControl.collapse(dataNode);\n    } else if (this._expansionModel) {\n      this._expansionModel.deselect(this._getExpansionKey(dataNode));\n    }\n  }\n\n  /**\n   * If the data node is currently expanded, collapse it and all its descendants.\n   * Otherwise, expand it and all its descendants.\n   */\n  toggleDescendants(dataNode: T): void {\n    if (this.treeControl) {\n      this.treeControl.toggleDescendants(dataNode);\n    } else if (this._expansionModel) {\n      if (this.isExpanded(dataNode)) {\n        this.collapseDescendants(dataNode);\n      } else {\n        this.expandDescendants(dataNode);\n      }\n    }\n  }\n\n  /**\n   * Expand the data node and all its descendants. If they are already expanded, does nothing.\n   */\n  expandDescendants(dataNode: T): void {\n    if (this.treeControl) {\n      this.treeControl.expandDescendants(dataNode);\n    } else if (this._expansionModel) {\n      const expansionModel = this._expansionModel;\n      expansionModel.select(this._getExpansionKey(dataNode));\n      this._getDescendants(dataNode)\n        .pipe(take(1), takeUntil(this._onDestroy))\n        .subscribe(children => {\n          expansionModel.select(...children.map(child => this._getExpansionKey(child)));\n        });\n    }\n  }\n\n  /** Collapse the data node and all its descendants. If it is already collapsed, does nothing. */\n  collapseDescendants(dataNode: T): void {\n    if (this.treeControl) {\n      this.treeControl.collapseDescendants(dataNode);\n    } else if (this._expansionModel) {\n      const expansionModel = this._expansionModel;\n      expansionModel.deselect(this._getExpansionKey(dataNode));\n      this._getDescendants(dataNode)\n        .pipe(take(1), takeUntil(this._onDestroy))\n        .subscribe(children => {\n          expansionModel.deselect(...children.map(child => this._getExpansionKey(child)));\n        });\n    }\n  }\n\n  /** Expands all data nodes in the tree. */\n  expandAll(): void {\n    if (this.treeControl) {\n      this.treeControl.expandAll();\n    } else if (this._expansionModel) {\n      this._forEachExpansionKey(keys => this._expansionModel?.select(...keys));\n    }\n  }\n\n  /** Collapse all data nodes in the tree. */\n  collapseAll(): void {\n    if (this.treeControl) {\n      this.treeControl.collapseAll();\n    } else if (this._expansionModel) {\n      this._forEachExpansionKey(keys => this._expansionModel?.deselect(...keys));\n    }\n  }\n\n  /** Level accessor, used for compatibility between the old Tree and new Tree */\n  _getLevelAccessor() {\n    return this.treeControl?.getLevel?.bind(this.treeControl) ?? this.levelAccessor;\n  }\n\n  /** Children accessor, used for compatibility between the old Tree and new Tree */\n  _getChildrenAccessor() {\n    return this.treeControl?.getChildren?.bind(this.treeControl) ?? this.childrenAccessor;\n  }\n\n  /**\n   * Gets the direct children of a node; used for compatibility between the old tree and the\n   * new tree.\n   */\n  _getDirectChildren(dataNode: T): Observable<T[]> {\n    const levelAccessor = this._getLevelAccessor();\n    const expansionModel = this._expansionModel ?? this.treeControl?.expansionModel;\n    if (!expansionModel) {\n      return observableOf([]);\n    }\n\n    const key = this._getExpansionKey(dataNode);\n\n    const isExpanded = expansionModel.changed.pipe(\n      switchMap(changes => {\n        if (changes.added.includes(key)) {\n          return observableOf(true);\n        } else if (changes.removed.includes(key)) {\n          return observableOf(false);\n        }\n        return EMPTY;\n      }),\n      startWith(this.isExpanded(dataNode)),\n    );\n\n    if (levelAccessor) {\n      return combineLatest([isExpanded, this._flattenedNodes]).pipe(\n        map(([expanded, flattenedNodes]) => {\n          if (!expanded) {\n            return [];\n          }\n          return this._findChildrenByLevel(levelAccessor, flattenedNodes, dataNode, 1);\n        }),\n      );\n    }\n    const childrenAccessor = this._getChildrenAccessor();\n    if (childrenAccessor) {\n      return coerceObservable(childrenAccessor(dataNode) ?? []);\n    }\n    throw getTreeControlMissingError();\n  }\n\n  /**\n   * Given the list of flattened nodes, the level accessor, and the level range within\n   * which to consider children, finds the children for a given node.\n   *\n   * For example, for direct children, `levelDelta` would be 1. For all descendants,\n   * `levelDelta` would be Infinity.\n   */\n  private _findChildrenByLevel(\n    levelAccessor: (node: T) => number,\n    flattenedNodes: readonly T[],\n    dataNode: T,\n    levelDelta: number,\n  ): T[] {\n    const key = this._getExpansionKey(dataNode);\n    const startIndex = flattenedNodes.findIndex(node => this._getExpansionKey(node) === key);\n    const dataNodeLevel = levelAccessor(dataNode);\n    const expectedLevel = dataNodeLevel + levelDelta;\n    const results: T[] = [];\n\n    // Goes through flattened tree nodes in the `flattenedNodes` array, and get all\n    // descendants within a certain level range.\n    //\n    // If we reach a node whose level is equal to or less than the level of the tree node,\n    // we hit a sibling or parent's sibling, and should stop.\n    for (let i = startIndex + 1; i < flattenedNodes.length; i++) {\n      const currentLevel = levelAccessor(flattenedNodes[i]);\n      if (currentLevel <= dataNodeLevel) {\n        break;\n      }\n      if (currentLevel <= expectedLevel) {\n        results.push(flattenedNodes[i]);\n      }\n    }\n    return results;\n  }\n\n  /**\n   * Adds the specified node component to the tree's internal registry.\n   *\n   * This primarily facilitates keyboard navigation.\n   */\n  _registerNode(node: CdkTreeNode<T, K>) {\n    this._nodes.value.set(this._getExpansionKey(node.data), node);\n    this._nodes.next(this._nodes.value);\n  }\n\n  /** Removes the specified node component from the tree's internal registry. */\n  _unregisterNode(node: CdkTreeNode<T, K>) {\n    this._nodes.value.delete(this._getExpansionKey(node.data));\n    this._nodes.next(this._nodes.value);\n  }\n\n  /**\n   * For the given node, determine the level where this node appears in the tree.\n   *\n   * This is intended to be used for `aria-level` but is 0-indexed.\n   */\n  _getLevel(node: T) {\n    return this._levels.get(this._getExpansionKey(node));\n  }\n\n  /**\n   * For the given node, determine the size of the parent's child set.\n   *\n   * This is intended to be used for `aria-setsize`.\n   */\n  _getSetSize(dataNode: T) {\n    const set = this._getAriaSet(dataNode);\n    return set.length;\n  }\n\n  /**\n   * For the given node, determine the index (starting from 1) of the node in its parent's child set.\n   *\n   * This is intended to be used for `aria-posinset`.\n   */\n  _getPositionInSet(dataNode: T) {\n    const set = this._getAriaSet(dataNode);\n    const key = this._getExpansionKey(dataNode);\n    return set.findIndex(node => this._getExpansionKey(node) === key) + 1;\n  }\n\n  /** Given a CdkTreeNode, gets the node that renders that node's parent's data. */\n  _getNodeParent(node: CdkTreeNode<T, K>) {\n    const parent = this._parents.get(this._getExpansionKey(node.data));\n    return parent && this._nodes.value.get(this._getExpansionKey(parent));\n  }\n\n  /** Given a CdkTreeNode, gets the nodes that renders that node's child data. */\n  _getNodeChildren(node: CdkTreeNode<T, K>) {\n    return this._getDirectChildren(node.data).pipe(\n      map(children =>\n        children.reduce<CdkTreeNode<T, K>[]>((nodes, child) => {\n          const value = this._nodes.value.get(this._getExpansionKey(child));\n          if (value) {\n            nodes.push(value);\n          }\n\n          return nodes;\n        }, []),\n      ),\n    );\n  }\n\n  /** `keydown` event handler; this just passes the event to the `TreeKeyManager`. */\n  protected _sendKeydownToKeyManager(event: KeyboardEvent): void {\n    // Only handle events directly on the tree or directly on one of the nodes, otherwise\n    // we risk interfering with events in the projected content (see #29828).\n    if (event.target === this._elementRef.nativeElement) {\n      this._keyManager.onKeydown(event);\n    } else {\n      const nodes = this._nodes.getValue();\n      for (const [, node] of nodes) {\n        if (event.target === node._elementRef.nativeElement) {\n          this._keyManager.onKeydown(event);\n          break;\n        }\n      }\n    }\n  }\n\n  /** Gets all nested descendants of a given node. */\n  private _getDescendants(dataNode: T): Observable<T[]> {\n    if (this.treeControl) {\n      return observableOf(this.treeControl.getDescendants(dataNode));\n    }\n    if (this.levelAccessor) {\n      const results = this._findChildrenByLevel(\n        this.levelAccessor,\n        this._flattenedNodes.value,\n        dataNode,\n        Infinity,\n      );\n      return observableOf(results);\n    }\n    if (this.childrenAccessor) {\n      return this._getAllChildrenRecursively(dataNode).pipe(\n        reduce((allChildren: T[], nextChildren) => {\n          allChildren.push(...nextChildren);\n          return allChildren;\n        }, []),\n      );\n    }\n    throw getTreeControlMissingError();\n  }\n\n  /**\n   * Gets all children and sub-children of the provided node.\n   *\n   * This will emit multiple times, in the order that the children will appear\n   * in the tree, and can be combined with a `reduce` operator.\n   */\n  private _getAllChildrenRecursively(dataNode: T): Observable<T[]> {\n    if (!this.childrenAccessor) {\n      return observableOf([]);\n    }\n\n    return coerceObservable(this.childrenAccessor(dataNode)).pipe(\n      take(1),\n      switchMap(children => {\n        // Here, we cache the parents of a particular child so that we can compute the levels.\n        for (const child of children) {\n          this._parents.set(this._getExpansionKey(child), dataNode);\n        }\n        return observableOf(...children).pipe(\n          concatMap(child => concat(observableOf([child]), this._getAllChildrenRecursively(child))),\n        );\n      }),\n    );\n  }\n\n  private _getExpansionKey(dataNode: T): K {\n    // In the case that a key accessor function was not provided by the\n    // tree user, we'll default to using the node object itself as the key.\n    //\n    // This cast is safe since:\n    // - if an expansionKey is provided, TS will infer the type of K to be\n    //   the return type.\n    // - if it's not, then K will be defaulted to T.\n    return this.expansionKey?.(dataNode) ?? (dataNode as unknown as K);\n  }\n\n  private _getAriaSet(node: T) {\n    const key = this._getExpansionKey(node);\n    const parent = this._parents.get(key);\n    const parentKey = parent ? this._getExpansionKey(parent) : null;\n    const set = this._ariaSets.get(parentKey);\n    return set ?? [node];\n  }\n\n  /**\n   * Finds the parent for the given node. If this is a root node, this\n   * returns null. If we're unable to determine the parent, for example,\n   * if we don't have cached node data, this returns undefined.\n   */\n  private _findParentForNode(node: T, index: number, cachedNodes: readonly T[]): T | null {\n    // In all cases, we have a mapping from node to level; all we need to do here is backtrack in\n    // our flattened list of nodes to determine the first node that's of a level lower than the\n    // provided node.\n    if (!cachedNodes.length) {\n      return null;\n    }\n    const currentLevel = this._levels.get(this._getExpansionKey(node)) ?? 0;\n    for (let parentIndex = index - 1; parentIndex >= 0; parentIndex--) {\n      const parentNode = cachedNodes[parentIndex];\n      const parentLevel = this._levels.get(this._getExpansionKey(parentNode)) ?? 0;\n\n      if (parentLevel < currentLevel) {\n        return parentNode;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Given a set of root nodes and the current node level, flattens any nested\n   * nodes into a single array.\n   *\n   * If any nodes are not expanded, then their children will not be added into the array.\n   * This will still traverse all nested children in order to build up our internal data\n   * models, but will not include them in the returned array.\n   */\n  private _flattenNestedNodesWithExpansion(nodes: readonly T[], level = 0): Observable<T[]> {\n    const childrenAccessor = this._getChildrenAccessor();\n    // If we're using a level accessor, we don't need to flatten anything.\n    if (!childrenAccessor) {\n      return observableOf([...nodes]);\n    }\n\n    return observableOf(...nodes).pipe(\n      concatMap(node => {\n        const parentKey = this._getExpansionKey(node);\n        if (!this._parents.has(parentKey)) {\n          this._parents.set(parentKey, null);\n        }\n        this._levels.set(parentKey, level);\n\n        const children = coerceObservable(childrenAccessor(node));\n        return concat(\n          observableOf([node]),\n          children.pipe(\n            take(1),\n            tap(childNodes => {\n              this._ariaSets.set(parentKey, [...(childNodes ?? [])]);\n              for (const child of childNodes ?? []) {\n                const childKey = this._getExpansionKey(child);\n                this._parents.set(childKey, node);\n                this._levels.set(childKey, level + 1);\n              }\n            }),\n            switchMap(childNodes => {\n              if (!childNodes) {\n                return observableOf([]);\n              }\n              return this._flattenNestedNodesWithExpansion(childNodes, level + 1).pipe(\n                map(nestedNodes => (this.isExpanded(node) ? nestedNodes : [])),\n              );\n            }),\n          ),\n        );\n      }),\n      reduce((results, children) => {\n        results.push(...children);\n        return results;\n      }, [] as T[]),\n    );\n  }\n\n  /**\n   * Converts children for certain tree configurations.\n   *\n   * This also computes parent, level, and group data.\n   */\n  private _computeRenderingData(\n    nodes: readonly T[],\n    nodeType: 'flat' | 'nested',\n  ): Observable<{\n    renderNodes: readonly T[];\n    flattenedNodes: readonly T[];\n  }> {\n    // The only situations where we have to convert children types is when\n    // they're mismatched; i.e. if the tree is using a childrenAccessor and the\n    // nodes are flat, or if the tree is using a levelAccessor and the nodes are\n    // nested.\n    if (this.childrenAccessor && nodeType === 'flat') {\n      // clear previously generated data so we don't keep end up retaining data overtime causing\n      // memory leaks.\n      this._clearPreviousCache();\n      // This flattens children into a single array.\n      this._ariaSets.set(null, [...nodes]);\n      return this._flattenNestedNodesWithExpansion(nodes).pipe(\n        map(flattenedNodes => ({\n          renderNodes: flattenedNodes,\n          flattenedNodes,\n        })),\n      );\n    } else if (this.levelAccessor && nodeType === 'nested') {\n      // In the nested case, we only look for root nodes. The CdkNestedNode\n      // itself will handle rendering each individual node's children.\n      const levelAccessor = this.levelAccessor;\n      return observableOf(nodes.filter(node => levelAccessor(node) === 0)).pipe(\n        map(rootNodes => ({\n          renderNodes: rootNodes,\n          flattenedNodes: nodes,\n        })),\n        tap(({flattenedNodes}) => {\n          this._calculateParents(flattenedNodes);\n        }),\n      );\n    } else if (nodeType === 'flat') {\n      // In the case of a TreeControl, we know that the node type matches up\n      // with the TreeControl, and so no conversions are necessary. Otherwise,\n      // we've already confirmed that the data model matches up with the\n      // desired node type here.\n      return observableOf({renderNodes: nodes, flattenedNodes: nodes}).pipe(\n        tap(({flattenedNodes}) => {\n          this._calculateParents(flattenedNodes);\n        }),\n      );\n    } else {\n      // clear previously generated data so we don't keep end up retaining data overtime causing\n      // memory leaks.\n      this._clearPreviousCache();\n      // For nested nodes, we still need to perform the node flattening in order\n      // to maintain our caches for various tree operations.\n      this._ariaSets.set(null, [...nodes]);\n      return this._flattenNestedNodesWithExpansion(nodes).pipe(\n        map(flattenedNodes => ({\n          renderNodes: nodes,\n          flattenedNodes,\n        })),\n      );\n    }\n  }\n\n  private _updateCachedData(flattenedNodes: readonly T[]) {\n    this._flattenedNodes.next(flattenedNodes);\n  }\n\n  private _updateKeyManagerItems(flattenedNodes: readonly T[]) {\n    this._keyManagerNodes.next(flattenedNodes);\n  }\n\n  /** Traverse the flattened node data and compute parents, levels, and group data. */\n  private _calculateParents(flattenedNodes: readonly T[]): void {\n    const levelAccessor = this._getLevelAccessor();\n    if (!levelAccessor) {\n      return;\n    }\n\n    // clear previously generated data so we don't keep end up retaining data overtime causing\n    // memory leaks.\n    this._clearPreviousCache();\n\n    for (let index = 0; index < flattenedNodes.length; index++) {\n      const dataNode = flattenedNodes[index];\n      const key = this._getExpansionKey(dataNode);\n      this._levels.set(key, levelAccessor(dataNode));\n      const parent = this._findParentForNode(dataNode, index, flattenedNodes);\n      this._parents.set(key, parent);\n      const parentKey = parent ? this._getExpansionKey(parent) : null;\n\n      const group = this._ariaSets.get(parentKey) ?? [];\n      group.splice(index, 0, dataNode);\n      this._ariaSets.set(parentKey, group);\n    }\n  }\n\n  /** Invokes a callback with all node expansion keys. */\n  private _forEachExpansionKey(callback: (keys: K[]) => void) {\n    const toToggle: K[] = [];\n    const observables: Observable<T[]>[] = [];\n\n    this._nodes.value.forEach(node => {\n      toToggle.push(this._getExpansionKey(node.data));\n      observables.push(this._getDescendants(node.data));\n    });\n\n    if (observables.length > 0) {\n      combineLatest(observables)\n        .pipe(take(1), takeUntil(this._onDestroy))\n        .subscribe(results => {\n          results.forEach(inner => inner.forEach(r => toToggle.push(this._getExpansionKey(r))));\n          callback(toToggle);\n        });\n    } else {\n      callback(toToggle);\n    }\n  }\n\n  /** Clears the maps we use to store parents, level & aria-sets in. */\n  private _clearPreviousCache() {\n    this._parents.clear();\n    this._levels.clear();\n    this._ariaSets.clear();\n  }\n}\n\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n@Directive({\n  selector: 'cdk-tree-node',\n  exportAs: 'cdkTreeNode',\n  host: {\n    'class': 'cdk-tree-node',\n    '[attr.aria-expanded]': '_getAriaExpanded()',\n    '[attr.aria-level]': 'level + 1',\n    '[attr.aria-posinset]': '_getPositionInSet()',\n    '[attr.aria-setsize]': '_getSetSize()',\n    '[tabindex]': '_tabindex',\n    'role': 'treeitem',\n    '(click)': '_setActiveItem()',\n    '(focus)': '_focusItem()',\n  },\n})\nexport class CdkTreeNode<T, K = T> implements OnDestroy, OnInit, TreeKeyManagerItem {\n  _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  protected _tree = inject<CdkTree<T, K>>(CdkTree);\n  protected _tabindex: number | null = -1;\n  protected readonly _type: 'flat' | 'nested' = 'flat';\n\n  /**\n   * The role of the tree node.\n   *\n   * @deprecated This will be ignored; the tree will automatically determine the appropriate role\n   * for tree node. This input will be removed in a future version.\n   * @breaking-change 21.0.0\n   */\n  @Input() get role(): 'treeitem' | 'group' {\n    return 'treeitem';\n  }\n\n  set role(_role: 'treeitem' | 'group') {\n    // ignore any role setting, we handle this internally.\n  }\n\n  /**\n   * Whether or not this node is expandable.\n   *\n   * If not using `FlatTreeControl`, or if `isExpandable` is not provided to\n   * `NestedTreeControl`, this should be provided for correct node a11y.\n   */\n  @Input({transform: booleanAttribute})\n  get isExpandable() {\n    return this._isExpandable();\n  }\n  set isExpandable(isExpandable: boolean) {\n    this._inputIsExpandable = isExpandable;\n    if ((this.data && !this._isExpandable) || !this._inputIsExpandable) {\n      return;\n    }\n    // If the node is being set to expandable, ensure that the status of the\n    // node is propagated\n    if (this._inputIsExpanded) {\n      this.expand();\n    } else if (this._inputIsExpanded === false) {\n      this.collapse();\n    }\n  }\n\n  @Input()\n  get isExpanded(): boolean {\n    return this._tree.isExpanded(this._data);\n  }\n  set isExpanded(isExpanded: boolean) {\n    this._inputIsExpanded = isExpanded;\n    if (isExpanded) {\n      this.expand();\n    } else {\n      this.collapse();\n    }\n  }\n\n  /**\n   * Whether or not this node is disabled. If it's disabled, then the user won't be able to focus\n   * or activate this node.\n   */\n  @Input({transform: booleanAttribute}) isDisabled: boolean;\n\n  /**\n   * The text used to locate this item during typeahead. If not specified, the `textContent` will\n   * will be used.\n   */\n  @Input('cdkTreeNodeTypeaheadLabel') typeaheadLabel: string | null;\n\n  getLabel(): string {\n    return this.typeaheadLabel || this._elementRef.nativeElement.textContent?.trim() || '';\n  }\n\n  /** This emits when the node has been programatically activated or activated by keyboard. */\n  @Output()\n  readonly activation: EventEmitter<T> = new EventEmitter<T>();\n\n  /** This emits when the node's expansion status has been changed. */\n  @Output()\n  readonly expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /**\n   * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n   * in `CdkTree` and set the data to it.\n   */\n  static mostRecentTreeNode: CdkTreeNode<any> | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  protected readonly _destroyed = new Subject<void>();\n\n  /** Emits when the node's data has changed. */\n  readonly _dataChanges = new Subject<void>();\n\n  private _inputIsExpandable: boolean = false;\n  private _inputIsExpanded: boolean | undefined = undefined;\n  /**\n   * Flag used to determine whether or not we should be focusing the actual element based on\n   * some user interaction (click or focus). On click, we don't forcibly focus the element\n   * since the click could trigger some other component that wants to grab its own focus\n   * (e.g. menu, dialog).\n   */\n  private _shouldFocus = true;\n  private _parentNodeAriaLevel: number;\n\n  /** The tree node's data. */\n  get data(): T {\n    return this._data;\n  }\n  set data(value: T) {\n    if (value !== this._data) {\n      this._data = value;\n      this._dataChanges.next();\n    }\n  }\n  protected _data: T;\n\n  /* If leaf node, return true to not assign aria-expanded attribute */\n  get isLeafNode(): boolean {\n    // If flat tree node data returns false for expandable property, it's a leaf node\n    if (\n      this._tree.treeControl?.isExpandable !== undefined &&\n      !this._tree.treeControl.isExpandable(this._data)\n    ) {\n      return true;\n\n      // If nested tree node data returns 0 descendants, it's a leaf node\n    } else if (\n      this._tree.treeControl?.isExpandable === undefined &&\n      this._tree.treeControl?.getDescendants(this._data).length === 0\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  get level(): number {\n    // If the tree has a levelAccessor, use it to get the level. Otherwise read the\n    // aria-level off the parent node and use it as the level for this node (note aria-level is\n    // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n    return this._tree._getLevel(this._data) ?? this._parentNodeAriaLevel;\n  }\n\n  /** Determines if the tree node is expandable. */\n  _isExpandable(): boolean {\n    if (this._tree.treeControl) {\n      if (this.isLeafNode) {\n        return false;\n      }\n\n      // For compatibility with trees created using TreeControl before we added\n      // CdkTreeNode#isExpandable.\n      return true;\n    }\n    return this._inputIsExpandable;\n  }\n\n  /**\n   * Determines the value for `aria-expanded`.\n   *\n   * For non-expandable nodes, this is `null`.\n   */\n  _getAriaExpanded(): string | null {\n    if (!this._isExpandable()) {\n      return null;\n    }\n    return String(this.isExpanded);\n  }\n\n  /**\n   * Determines the size of this node's parent's child set.\n   *\n   * This is intended to be used for `aria-setsize`.\n   */\n  _getSetSize(): number {\n    return this._tree._getSetSize(this._data);\n  }\n\n  /**\n   * Determines the index (starting from 1) of this node in its parent's child set.\n   *\n   * This is intended to be used for `aria-posinset`.\n   */\n  _getPositionInSet(): number {\n    return this._tree._getPositionInSet(this._data);\n  }\n\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    CdkTreeNode.mostRecentTreeNode = this as CdkTreeNode<T, K>;\n  }\n\n  ngOnInit(): void {\n    this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n    this._tree\n      ._getExpansionModel()\n      .changed.pipe(\n        map(() => this.isExpanded),\n        distinctUntilChanged(),\n      )\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n    this._tree._setNodeTypeIfUnset(this._type);\n    this._tree._registerNode(this);\n  }\n\n  ngOnDestroy() {\n    // If this is the last tree node being destroyed,\n    // clear out the reference to avoid leaking memory.\n    if (CdkTreeNode.mostRecentTreeNode === this) {\n      CdkTreeNode.mostRecentTreeNode = null;\n    }\n\n    this._dataChanges.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  getParent(): CdkTreeNode<T, K> | null {\n    return this._tree._getNodeParent(this) ?? null;\n  }\n\n  getChildren(): CdkTreeNode<T, K>[] | Observable<CdkTreeNode<T, K>[]> {\n    return this._tree._getNodeChildren(this);\n  }\n\n  /** Focuses this data node. Implemented for TreeKeyManagerItem. */\n  focus(): void {\n    this._tabindex = 0;\n    if (this._shouldFocus) {\n      this._elementRef.nativeElement.focus();\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Defocus this data node. */\n  unfocus(): void {\n    this._tabindex = -1;\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an activation event. Implemented for TreeKeyManagerItem. */\n  activate(): void {\n    if (this.isDisabled) {\n      return;\n    }\n    this.activation.next(this._data);\n  }\n\n  /** Collapses this data node. Implemented for TreeKeyManagerItem. */\n  collapse(): void {\n    if (this.isExpandable) {\n      this._tree.collapse(this._data);\n    }\n  }\n\n  /** Expands this data node. Implemented for TreeKeyManagerItem. */\n  expand(): void {\n    if (this.isExpandable) {\n      this._tree.expand(this._data);\n    }\n  }\n\n  /** Makes the node focusable. Implemented for TreeKeyManagerItem. */\n  makeFocusable(): void {\n    this._tabindex = 0;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _focusItem() {\n    if (this.isDisabled) {\n      return;\n    }\n    this._tree._keyManager.focusItem(this);\n  }\n\n  _setActiveItem() {\n    if (this.isDisabled) {\n      return;\n    }\n    this._shouldFocus = false;\n    this._tree._keyManager.focusItem(this);\n    this._shouldFocus = true;\n  }\n\n  _emitExpansionState(expanded: boolean) {\n    this.expandedChange.emit(expanded);\n  }\n}\n\nfunction getParentNodeAriaLevel(nodeElement: HTMLElement): number {\n  let parent = nodeElement.parentElement;\n  while (parent && !isNodeElement(parent)) {\n    parent = parent.parentElement;\n  }\n  if (!parent) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw Error('Incorrect tree structure containing detached node.');\n    } else {\n      return -1;\n    }\n  } else if (parent.classList.contains('cdk-nested-tree-node')) {\n    return numberAttribute(parent.getAttribute('aria-level')!);\n  } else {\n    // The ancestor element is the cdk-tree itself\n    return 0;\n  }\n}\n\nfunction isNodeElement(element: HTMLElement) {\n  const classList = element.classList;\n  return !!(classList?.contains('cdk-nested-tree-node') || classList?.contains('cdk-tree'));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directionality} from '../bidi';\nimport {Directive, ElementRef, Input, numberAttribute, OnDestroy, inject} from '@angular/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\nimport {CdkTree, CdkTreeNode} from './tree';\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n@Directive({\n  selector: '[cdkTreeNodePadding]',\n})\nexport class CdkTreeNodePadding<T, K = T> implements OnDestroy {\n  private _treeNode = inject<CdkTreeNode<T, K>>(CdkTreeNode);\n  private _tree = inject<CdkTree<T, K>>(CdkTree);\n  private _element = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _dir = inject(Directionality, {optional: true});\n\n  /** Current padding value applied to the element. Used to avoid unnecessarily hitting the DOM. */\n  private _currentPadding: string | null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** CSS units used for the indentation value. */\n  indentUnits = 'px';\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input({alias: 'cdkTreeNodePadding', transform: numberAttribute})\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    this._setLevelInput(value);\n  }\n  _level: number;\n\n  /**\n   * The indent for each level. Can be a number or a CSS string.\n   * Default number 40px from material design menu sub-menu spec.\n   */\n  @Input('cdkTreeNodePaddingIndent')\n  get indent(): number | string {\n    return this._indent;\n  }\n  set indent(indent: number | string) {\n    this._setIndentInput(indent);\n  }\n  _indent: number = 40;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    this._setPadding();\n    this._dir?.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n\n    // In Ivy the indentation binding might be set before the tree node's data has been added,\n    // which means that we'll miss the first render. We have to subscribe to changes in the\n    // data to ensure that everything is up to date.\n    this._treeNode._dataChanges.subscribe(() => this._setPadding());\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n  _paddingIndent(): string | null {\n    const nodeLevel = (this._treeNode.data && this._tree._getLevel(this._treeNode.data)) ?? null;\n    const level = this._level == null ? nodeLevel : this._level;\n    return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n  }\n\n  _setPadding(forceChange = false) {\n    const padding = this._paddingIndent();\n\n    if (padding !== this._currentPadding || forceChange) {\n      const element = this._element.nativeElement;\n      const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n      const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n      element.style[paddingProp] = padding || '';\n      element.style[resetProp] = '';\n      this._currentPadding = padding;\n    }\n  }\n\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  protected _setLevelInput(value: number) {\n    // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n    // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n    // they set 0 explicitly.\n    this._level = isNaN(value) ? null! : value;\n    this._setPadding();\n  }\n\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  protected _setIndentInput(indent: number | string) {\n    let value = indent;\n    let units = 'px';\n\n    if (typeof indent === 'string') {\n      const parts = indent.split(cssUnitPattern);\n      value = parts[0];\n      units = parts[1] || units;\n    }\n\n    this.indentUnits = units;\n    this._indent = numberAttribute(value);\n    this._setPadding();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, Input, booleanAttribute, inject} from '@angular/core';\n\nimport {CdkTree, CdkTreeNode} from './tree';\n\n/**\n * Node toggle to expand and collapse the node.\n */\n@Directive({\n  selector: '[cdkTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle(); $event.stopPropagation();',\n    '(keydown.Enter)': '_toggle(); $event.preventDefault();',\n    '(keydown.Space)': '_toggle(); $event.preventDefault();',\n    'tabindex': '-1',\n  },\n})\nexport class CdkTreeNodeToggle<T, K = T> {\n  protected _tree = inject<CdkTree<T, K>>(CdkTree);\n  protected _treeNode = inject<CdkTreeNode<T, K>>(CdkTreeNode);\n\n  /** Whether expand/collapse the node recursively. */\n  @Input({alias: 'cdkTreeNodeToggleRecursive', transform: booleanAttribute})\n  recursive: boolean = false;\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  // Toggle the expanded or collapsed state of this node.\n  //\n  // Focus this node with expanding or collapsing it. This ensures that the active node will always\n  // be visible when expanding and collapsing.\n  _toggle(): void {\n    this.recursive\n      ? this._tree.toggleDescendants(this._treeNode.data)\n      : this._tree.toggle(this._treeNode.data);\n\n    this._tree._keyManager.focusItem(this._treeNode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Directive,\n  Input,\n  OnDestroy,\n  OnInit,\n  booleanAttribute,\n  numberAttribute,\n  inject,\n  HostAttributeToken,\n} from '@angular/core';\nimport {NoopTreeKeyManager, TreeKeyManagerItem, TreeKeyManagerStrategy} from '@angular/cdk/a11y';\n\n/**\n * Determinte if argument TreeKeyManager is the NoopTreeKeyManager. This function is safe to use with SSR.\n */\nfunction isNoopTreeKeyManager<T extends TreeKeyManagerItem>(\n  keyManager: TreeKeyManagerStrategy<T>,\n): keyManager is NoopTreeKeyManager<T> {\n  return !!(keyManager as any)._isNoopTreeKeyManager;\n}\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  outputs: ['activation', 'expandedChange'],\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}],\n  host: {\n    'class': 'mat-tree-node',\n    '[attr.aria-expanded]': '_getAriaExpanded()',\n    '[attr.aria-level]': 'level + 1',\n    '[attr.aria-posinset]': '_getPositionInSet()',\n    '[attr.aria-setsize]': '_getSetSize()',\n    '(click)': '_focusItem()',\n    '[tabindex]': '_getTabindexAttribute()',\n  },\n})\nexport class MatTreeNode<T, K = T> extends CdkTreeNode<T, K> implements OnInit, OnDestroy {\n  /**\n   * The tabindex of the tree node.\n   *\n   * @deprecated By default MatTreeNode manages focus using TreeKeyManager instead of tabIndex.\n   *   Recommend to avoid setting tabIndex directly to prevent TreeKeyManager form getting into\n   *   an unexpected state. Tabindex to be removed in a future version.\n   * @breaking-change 21.0.0 Remove this attribute.\n   */\n  @Input({\n    transform: (value: unknown) => (value == null ? 0 : numberAttribute(value)),\n    alias: 'tabIndex',\n  })\n  get tabIndexInputBinding(): number {\n    return this._tabIndexInputBinding;\n  }\n  set tabIndexInputBinding(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndexInputBinding = value;\n  }\n  private _tabIndexInputBinding: number;\n\n  /**\n   * The default tabindex of the tree node.\n   *\n   * @deprecated By default MatTreeNode manages focus using TreeKeyManager instead of tabIndex.\n   *   Recommend to avoid setting tabIndex directly to prevent TreeKeyManager form getting into\n   *   an unexpected state. Tabindex to be removed in a future version.\n   * @breaking-change 21.0.0 Remove this attribute.\n   */\n  defaultTabIndex = 0;\n\n  protected _getTabindexAttribute() {\n    if (isNoopTreeKeyManager(this._tree._keyManager)) {\n      return this.tabIndexInputBinding;\n    }\n    return this._tabindex;\n  }\n\n  /**\n   * Whether the component is disabled.\n   *\n   * @deprecated This is an alias for `isDisabled`.\n   * @breaking-change 21.0.0 Remove this input\n   */\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return this.isDisabled;\n  }\n  set disabled(value: boolean) {\n    this.isDisabled = value;\n  }\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n\n    const tabIndex = inject(new HostAttributeToken('tabindex'), {optional: true});\n    this.tabIndexInputBinding = Number(tabIndex) || this.defaultTabIndex;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  override ngOnInit() {\n    super.ngOnInit();\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [{name: 'when', alias: 'matTreeNodeDefWhen'}],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}],\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  outputs: ['activation', 'expandedChange'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode},\n  ],\n  host: {\n    'class': 'mat-nested-tree-node',\n  },\n})\nexport class MatNestedTreeNode<T, K = T>\n  extends CdkNestedTreeNode<T, K>\n  implements AfterContentInit, OnDestroy, OnInit\n{\n  @Input('matNestedTreeNode') node: T;\n\n  /**\n   * Whether the node is disabled.\n   *\n   * @deprecated This is an alias for `isDisabled`.\n   * @breaking-change 21.0.0 Remove this input\n   */\n  @Input({transform: booleanAttribute})\n  get disabled(): boolean {\n    return this.isDisabled;\n  }\n  set disabled(value: boolean) {\n    this.isDisabled = value;\n  }\n\n  /** Tabindex of the node. */\n  @Input({\n    transform: (value: unknown) => (value == null ? 0 : numberAttribute(value)),\n  })\n  get tabIndex(): number {\n    return this.isDisabled ? -1 : this._tabIndex;\n  }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value;\n  }\n  private _tabIndex: number;\n\n  // This is a workaround for https://github.com/angular/angular/issues/19145\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n  override ngOnInit() {\n    super.ngOnInit();\n  }\n\n  override ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input, numberAttribute} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}],\n})\nexport class MatTreeNodePadding<T, K = T> extends CdkTreeNodePadding<T, K> {\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input({alias: 'matTreeNodePadding', transform: numberAttribute})\n  override get level(): number {\n    return this._level;\n  }\n  override set level(value: number) {\n    this._setLevelInput(value);\n  }\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent')\n  override get indent(): number | string {\n    return this._indent;\n  }\n  override set indent(indent: number | string) {\n    this._setIndentInput(indent);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {Directive, ViewContainerRef, inject} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]',\n  providers: [\n    {\n      provide: CdkTreeNodeOutlet,\n      useExisting: MatTreeNodeOutlet,\n    },\n  ],\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  viewContainer = inject(ViewContainerRef);\n  _node = inject(CDK_TREE_NODE_OUTLET_NODE, {optional: true});\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n  },\n  styleUrl: 'tree.css',\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}],\n  imports: [MatTreeNodeOutlet],\n})\nexport class MatTree<T, K = T> extends CdkTree<T, K> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  // We need an initializer here to avoid a TS error. The value will be set in `ngAfterViewInit`.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) override _nodeOutlet: MatTreeNodeOutlet =\n    undefined!;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}],\n  inputs: [{name: 'recursive', alias: 'matTreeNodeToggleRecursive'}],\n})\nexport class MatTreeNodeToggle<T, K = T> extends CdkTreeNodeToggle<T, K> {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n *\n * @deprecated Use MatTree#childrenAccessor and MatTreeNode#isExpandable\n * instead. To be removed in a future version.\n * @breaking-change 21.0.0\n */\nexport class MatTreeFlattener<T, F, K = F> {\n  constructor(\n    public transformFunction: (node: T, level: number) => F,\n    public getLevel: (node: F) => number,\n    public isExpandable: (node: F) => boolean,\n    public getChildren: (node: T) => Observable<T[]> | T[] | undefined | null,\n  ) {}\n\n  _flattenNode(node: T, level: number, resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number, resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F, K>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n *\n * @deprecated Use one of levelAccessor or childrenAccessor instead. To be removed in a future\n * version.\n * @breaking-change 21.0.0\n */\nexport class MatTreeFlatDataSource<T, F, K = F> extends DataSource<F> {\n  private readonly _flattenedData = new BehaviorSubject<F[]>([]);\n  private readonly _expandedData = new BehaviorSubject<F[]>([]);\n\n  get data() {\n    return this._data.value;\n  }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n  private readonly _data = new BehaviorSubject<T[]>([]);\n\n  constructor(\n    private _treeControl: FlatTreeControl<F, K>,\n    private _treeFlattener: MatTreeFlattener<T, F, K>,\n    initialData?: T[],\n  ) {\n    super();\n\n    if (initialData) {\n      // Assign the data through the constructor to ensure that all of the logic is executed.\n      this.data = initialData;\n    }\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    return merge(\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.changed,\n      this._flattenedData,\n    ).pipe(\n      map(() => {\n        this._expandedData.next(\n          this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl),\n        );\n        return this._expandedData.value;\n      }),\n    );\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","<div class=\"filter-title-wrapper\">\n  <h3 class=\"title mat-title-large\" i18n=\"@@FilterExercises.title\">Filters</h3>\n  <button\n    (click)=\"toggleDrawer()\"\n    mat-icon-button\n    aria-label=\"Icon button with a close icon\"\n  >\n    <mat-icon>close</mat-icon>\n  </button>\n</div>\n<div class=\"chips-selection-wrapper\">\n  <mat-chip-set aria-label=\"Category selection\">\n    @for (\n      category of addRemoveDataService.dataSignal();\n      track category.name;\n      let i = $index\n    ) {\n      @for (localeName of category.localeNames; track localeName) {\n        <mat-chip\n          >{{ localeName }}\n          <button matChipRemove (click)=\"chipRemoveNode(localeName)\">\n            <mat-icon>cancel</mat-icon>\n          </button></mat-chip\n        >\n      }\n    }\n  </mat-chip-set>\n  <mat-chip\n    class=\"clear-filter\"\n    (click)=\"resetAll()\"\n    i18n=\"@@FilterExercises.clearAllChip\"\n    >Clear all</mat-chip\n  >\n</div>\n<div class=\"category-data\">\n  <mat-tree\n    class=\"custom-mat-tree\"\n    [dataSource]=\"dataSource\"\n    [treeControl]=\"treeControl\"\n  >\n    <!-- This is the tree node template for leaf nodes -->\n    <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\n      <!-- use a disabled button to provide padding for tree leaf -->\n      <!-- <button mat-icon-button disabled></button> -->\n\n      <mat-checkbox\n        color=\"primary\"\n        [(ngModel)]=\"node.isChecked\"\n        (change)=\"onCheckboxChange(node)\"\n      >\n        {{ node.localeName }}\n      </mat-checkbox>\n    </mat-tree-node>\n    <!-- This is the tree node template for expandable nodes -->\n    <mat-tree-node\n      *matTreeNodeDef=\"let node; when: hasChild\"\n      matTreeNodePadding\n    >\n      <button\n        mat-icon-button\n        matTreeNodeToggle\n        [attr.aria-label]=\"'Toggle ' + node.name\"\n      >\n        <mat-icon class=\"mat-icon-rtl-mirror\">\n          {{ treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right' }}\n        </mat-icon>\n      </button>\n      {{ node.name }}\n    </mat-tree-node>\n  </mat-tree>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  inject,\n  signal,\n} from '@angular/core';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport {\n  AddRemoveDataService,\n  BodyArea,\n  BodyAreasService,\n  Equipment,\n  EquipmentService,\n  Movement,\n  MovementsService,\n  ShareDataService,\n  ShareStateService,\n  StartingPosition,\n  StartingPositionsService,\n} from '@slowautomobile/exercises';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport {\n  MatTreeFlatDataSource,\n  MatTreeFlattener,\n  MatTree,\n  MatTreeNodeDef,\n  MatTreeNode,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n} from '@angular/material/tree';\nimport { Observable, Subscription, filter, forkJoin, of, tap } from 'rxjs';\nimport { FormBuilder, FormGroup, FormsModule } from '@angular/forms';\nimport { MatCheckbox } from '@angular/material/checkbox';\nimport { MatChip, MatChipsModule } from '@angular/material/chips';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatIconButton } from '@angular/material/button';\nimport { LocalstorageService } from '@slowautomobile/users';\n\ninterface CategoryNode {\n  name: string;\n  localeName?: string;\n  children?: CategoryNode[];\n  isChecked?: boolean;\n  categoryName?: string;\n  categoryNameLocale?: string;\n  values?: string[];\n  localeNames?: string[];\n}\n\ninterface CategoryFlatNode {\n  expandable: boolean;\n  name: string;\n  // localeName: string;\n  level: number;\n  isChecked: boolean | undefined;\n  categoryName: CategoryNode['categoryName'];\n  // categoryNameLocale: CategoryNode['categoryNameLocale'];\n}\n\ninterface CategoryGroup {\n  name: string;\n  value: string[];\n}\n\n// const TREE_DATA: CategoryNode[] = [\n//   {\n//     name: 'Fruit',\n//     children: [{ name: 'Apple' }, { name: 'Banana' }, { name: 'Fruit loops' }],\n//   },\n//   {\n//     name: 'Vegetables',\n//     children: [\n//       {\n//         name: 'Green',\n//         children: [{ name: 'Broccoli' }, { name: 'Brussels sprouts' }],\n//       },\n//       {\n//         name: 'Orange',\n//         children: [{ name: 'Pumpkins' }, { name: 'Carrots' }],\n//       },\n//     ],\n//   },\n// ];\n\nexport const CATEGORIES = [\n  {\n    categoryName: 'bodyAreas',\n    categoryNameLocale: $localize`:@@SearchFilter.bodyAreas:Body areas`,\n  },\n  {\n    categoryName: 'movements',\n    categoryNameLocale: $localize`:@@SearchFilter.movements:Movements`,\n  },\n  {\n    categoryName: 'startingPositions',\n    categoryNameLocale: $localize`:@@SearchFilter.startingPositions:Starting positions`,\n  },\n  {\n    categoryName: 'equipment',\n    categoryNameLocale: $localize`:@@SearchFilter.equipment:Equipment`,\n  },\n];\n\n@Component({\n    selector: 'ui-search-filter',\n    templateUrl: './search-filter.component.html',\n    styleUrl: './search-filter.component.scss',\n    imports: [\n        MatIconButton,\n        MatIcon,\n        MatChip,\n        MatTree,\n        MatTreeNodeDef,\n        MatTreeNode,\n        MatTreeNodePadding,\n        MatCheckbox,\n        FormsModule,\n        MatTreeNodeToggle,\n        MatChipsModule,\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SearchFilterComponent implements OnInit, OnDestroy {\n  private bodyAreasService = inject(BodyAreasService);\n  private movementsService = inject(MovementsService);\n  private startingPositionsService = inject(StartingPositionsService);\n  private equipmentService = inject(EquipmentService);\n  public addRemoveDataService = inject(AddRemoveDataService);\n  private localstorageService = inject(LocalstorageService);\n  private shareDataService = inject(ShareDataService);\n  private shareStateService = inject(ShareStateService);\n\n  isFetchingData = this.shareStateService.isFetchingData;\n  bodyAreas!: BodyArea[];\n  movements!: Movement[];\n  startingPositions!: StartingPosition[];\n  equipment!: Equipment[];\n  subscriptions = new Subscription();\n  categoryData!: CategoryNode;\n  // TREE_DATA!: CategoryNode[];\n  @Output() toggleDrawerSignal = new EventEmitter<void>();\n  categoriesData: CategoryNode[] = [];\n  filterData: any[] = [];\n  selectedLanguage!: string;\n\n  ngOnInit(): void {\n    // this._getBodyAreas();\n    // this._getMovements();\n    // this._getStartingPositions();\n    this.selectedLanguage = this._getUserLanguageToken();\n    console.log(this.selectedLanguage);\n\n    // console.log(this.categoriesData, TREE_DATA)\n\n    const observables: Observable<any>[] = [\n      this._getBodyAreas(),\n      this._getMovements(),\n      this._getStartingPositions(),\n      this._getEquipment(),\n    ];\n\n    const subscription = forkJoin(observables).subscribe({\n      next: data => {\n        // console.log(data);\n        data.forEach((category, i) => {\n          const categoryNameLocale = CATEGORIES[i].categoryNameLocale;\n          // console.log(categoryNameLocale);\n          // console.log(category);\n\n          const categoryChildren: any[] = [];\n          category.forEach((nameValue: any) => {\n            // console.log(nameValue);\n            categoryChildren.push({\n              name: nameValue.name,\n              localeName: nameValue.translations[this.selectedLanguage],\n              isChecked: false,\n              categoryName: CATEGORIES[i].categoryName,\n            });\n          });\n          // console.log(categoryChildren);\n\n          this.categoriesData.push({\n            name: categoryNameLocale,\n            children: categoryChildren,\n          });\n        });\n        // console.log(this.categoriesData);\n        // console.log(TREE_DATA);\n        // for(let i = 0; i < 4; i++) {\n        //   this.categoriesData[i].children?.forEach(value => value.isChecked = true)\n        // }\n        // console.log(this.treeControl);\n        this.dataSource.data = this.categoriesData;\n        // console.log(this.dataSource);\n      },\n      error: error => {\n        console.error(error);\n      },\n    });\n    this.subscriptions.add(subscription);\n  }\n\n  // addDataItem(name: string | undefined, value: string): void {\n  //   const itemIndex = this.data.findIndex(item => item.name === name);\n\n  //   if (itemIndex !== -1) {\n  //     // If the item already exists, add the value to its array\n  //     this.data[itemIndex].values.push(value);\n  //   } else {\n  //     // If the item does not exist, create a new one\n  //     this.data.push({ name, values: [value] });\n  //   }\n  // }\n\n  // removeDataItem(name: string | undefined, value: string): void {\n  //   const itemIndex = this.data.findIndex(item => item.name === name);\n\n  //   if (itemIndex !== -1) {\n  //     // If the item exists, remove the value from its array\n  //     this.data[itemIndex].values = this.data[itemIndex].values.filter(\n  //       (v: any) => v !== value,\n  //     );\n\n  //     // Remove the entire item if the values array is empty\n  //     if (this.data[itemIndex].values.length === 0) {\n  //       this.data.splice(itemIndex, 1);\n  //     }\n  //   }\n  // }\n\n  chipRemoveNode(localeNameToRemove: string) {\n    // console.log(localeName);\n    let indexToRemove = 0;\n    let nodeToRemove;\n    this.addRemoveDataService.dataSignal().forEach(category => {\n      nodeToRemove = category.localeNames.find((localeName, i) => {\n        indexToRemove = i;\n        return localeName === localeNameToRemove;\n      });\n      if (nodeToRemove) {\n        this.onCheckboxChange(category as CategoryNode, indexToRemove, true);\n      }\n    });\n  }\n\n  onCheckboxChange(\n    node: CategoryNode,\n    indexToRemove = 0,\n    toggleChecked?: boolean,\n  ) {\n    const { name, localeName, categoryName } = node;\n    console.log(node);\n    console.log(indexToRemove);\n\n    this.isFetchingData.set(true);\n\n    // When node is removed when clicking on chip remove icon\n    if (toggleChecked) {\n      // node.isChecked = false;\n      const valueChipRemove = node.values?.[indexToRemove];\n      const localeNameChipRemove = node.localeNames?.[indexToRemove];\n\n      this.addRemoveDataService.removeDataItem(\n        node.name,\n        valueChipRemove as string,\n        localeNameChipRemove as string,\n      );\n\n      this.treeControl.dataNodes?.forEach(x => {\n        if (x.expandable === false && x.name === valueChipRemove) {\n          console.log(x);\n          x.isChecked = false;\n        }\n      });\n    }\n\n    if (node.isChecked) {\n      this.addRemoveDataService.addDataItem(\n        categoryName,\n        name,\n        localeName as string,\n      );\n    } else {\n      this.addRemoveDataService.removeDataItem(\n        categoryName,\n        name,\n        localeName as string,\n      );\n    }\n    // console.log(this.addRemoveDataService.getData());\n\n    // this.filterData = this.addRemoveDataService.getData();\n    // console.log(this.dataSource._flattenedData._value);\n  }\n\n  resetAll() {\n    // this.categoriesData.forEach(category => {\n    //   category.forEach(value => value.isChecked = false)\n    // })\n    // this.dataSource._flattenedData._value\n    // for (const rootNode of this.categoriesData) {\n    //   this.updateCheckedProperty(rootNode, false);\n    //   console.log(rootNode)\n    // }\n    this.isFetchingData.set(true);\n\n    this.treeControl.dataNodes?.forEach(x => {\n      // console.log(x)\n      if (x.expandable === false) {\n        x.isChecked = false;\n      }\n    });\n    // console.log(this.addRemoveDataService.getData());\n    this.addRemoveDataService.resetAll();\n    //  console.log(this.addRemoveDataService.getData());\n\n    //  console.log(this.treeControl.dataNodes);\n  }\n\n  // updateCheckedProperty(node: CategoryNode, isChecked: boolean): void {\n  //   node.isChecked = false;\n\n  //   if (node.children) {\n  //     for (const child of node.children) {\n  //       this.updateCheckedProperty(child, false);\n  //     }\n  //   }\n  // }\n\n  private _transformer = (node: CategoryNode, level: number) => {\n    /*  const combinedName = node.categoryName\n      ?.split(' ')\n      .map((word, i) =>\n        i === 0 ? word.toLowerCase() : word[0].toUpperCase() + word.slice(1),\n      )\n      .join(''); */\n    // console.log(combinedName);\n    // console.log(node);\n\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name: node.name,\n      localeName: node.localeName,\n      level: level,\n      categoryName: node.categoryName,\n      isChecked: node.isChecked,\n    } as CategoryFlatNode;\n  };\n\n  treeControl = new FlatTreeControl<CategoryFlatNode>(\n    node => node.level,\n    node => node.expandable,\n  );\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer,\n    node => node.level,\n    node => node.expandable,\n    node => node.children,\n  );\n\n  dataSource = new MatTreeFlatDataSource<CategoryNode, CategoryFlatNode>(\n    this.treeControl,\n    this.treeFlattener,\n  );\n\n  hasChild = (_: number, node: CategoryFlatNode) => node.expandable;\n\n  private _getBodyAreas(): Observable<any> {\n    return this.bodyAreasService.getBodyAreas().pipe(\n      tap(bodyAreasList => {\n        this.bodyAreas = bodyAreasList;\n        this.bodyAreas = this.bodyAreas.sort((a, b) =>\n          a.name.localeCompare(b.name),\n        );\n        // this.bodyAreas.forEach((bodyArea: any) => {\n        //   if (this.lang) {\n        //     bodyArea.combinedName = `${bodyArea.translations[this.lang]} (${\n        //       bodyArea.name\n        //     })`;\n        //   }\n        // });\n      }),\n    );\n  }\n\n  private _getMovements(): Observable<any> {\n    return this.movementsService.getMovements().pipe(\n      tap(movementsList => {\n        this.movements = movementsList;\n        this.movements = this.movements.sort((a, b) =>\n          a.name.localeCompare(b.name),\n        );\n\n        // this.movements.forEach((movement: any) => {\n        //   if (this.lang) {\n        //     movement.combinedName = `${movement.translations[this.lang]} (${\n        //       movement.name\n        //     })`;\n        //   }\n        // });\n      }),\n    );\n  }\n\n  private _getStartingPositions(): Observable<any> {\n    return this.startingPositionsService.getStartingPositions().pipe(\n      tap(startingPositionsList => {\n        this.startingPositions = startingPositionsList;\n        this.startingPositions = this.startingPositions.sort((a, b) =>\n          a.name.localeCompare(b.name),\n        );\n\n        // this.startingPositions.forEach((startingPosition: any) => {\n        //   if (this.lang) {\n        //     startingPosition.translatedName =\n        //       startingPosition.translations[this.lang];\n        //   }\n        // });\n      }),\n    );\n  }\n\n  private _getEquipment(): Observable<any> {\n    return this.equipmentService.getEquipments().pipe(\n      tap(equipmentList => {\n        this.equipment = equipmentList;\n        this.equipment = this.equipment.sort((a, b) =>\n          a.name.localeCompare(b.name),\n        );\n\n        // this.equipment.forEach((movement: any) => {\n        //   if (this.lang) {\n        //     movement.combinedName = `${movement.translations[this.lang]} (${\n        //       movement.name\n        //     })`;\n        //   }\n        // });\n      }),\n    );\n  }\n\n  // private _getMovements() {\n  //   this.movementsService.getMovements().subscribe(movementList => {\n  //     console.log(movementList);\n  //     this.movements = movementList;\n  //   });\n  // }\n\n  private _getUserLanguageToken(): string {\n    return <string>(\n      this.localstorageService.getToken('userLanguage')?.split('-')[0]\n    );\n  }\n\n  toggleDrawer() {\n    this.toggleDrawerSignal.emit();\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    console.log(this.categoriesData);\n\n    this.resetAll();\n\n    console.log(this.categoriesData);\n  }\n}\n","import {\n  Component,\n  effect,\n  EventEmitter,\n  inject,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  MatButtonToggle,\n  MatButtonToggleGroup,\n} from '@angular/material/button-toggle';\nimport { SearchComponent } from '../../pages/search/search.component';\nimport { FormsModule } from '@angular/forms';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { ShareStateService } from '@slowautomobile/exercises';\n\ntype ListOption = 'all' | 'selected' | 'favorite';\n\n@Component({\n    selector: 'ui-exercise-search-btns-wrapper',\n    imports: [\n        CommonModule,\n        FormsModule,\n        MatButtonToggleGroup,\n        MatButtonToggle,\n        SearchComponent,\n    ],\n    templateUrl: './exercise-search-btns-wrapper.component.html',\n    styleUrl: './exercise-search-btns-wrapper.component.scss'\n})\nexport class ExerciseSearchBtnsWrapperComponent {\n  private shareStateService = inject(ShareStateService);\n\n  listOptionSignal = this.shareStateService.listOption;\n  drawerOpen!: boolean;\n  listOption!: ListOption;\n\n  @Output() listOptionValue = new EventEmitter<ListOption>();\n\n  constructor() {\n    effect(() => {\n      this.listOption = this.listOptionSignal();\n    });\n  }\n\n  changeListOption(listOptionValue: ListOption) {\n    this.listOptionSignal.set(listOptionValue);\n    this.listOptionValue.emit(listOptionValue);\n  }\n\n  toggleDrawer() {\n    this.drawerOpen = !this.drawerOpen;\n  }\n}\n","<div class=\"search-segmented-btns\">\n  <ui-search (toggleDrawerSignal)=\"toggleDrawer()\"></ui-search>\n  <mat-button-toggle-group\n    class=\"segmented-btns\"\n    [(ngModel)]=\"listOption\"\n    name=\"listOption\"\n    aria-label=\"List Option\"\n    i18n-aria-label=\"@@SearchSegmentedBtns.listOptionAriaLabel\"\n    (change)=\"changeListOption($event.value)\"\n    hideSingleSelectionIndicator=\"true\"\n  >\n    <mat-button-toggle value=\"all\" i18n=\"@@SearchSegmentedBtns.listOptionAll\"\n      >All</mat-button-toggle\n    >\n    <mat-button-toggle\n      value=\"selected\"\n      i18n=\"@@SearchSegmentedBtns.listOptionSelected\"\n      >Selected</mat-button-toggle\n    >\n    <mat-button-toggle\n      value=\"favorite\"\n      i18n=\"@@SearchSegmentedBtns.listOptionFavorite\"\n      >Favorite</mat-button-toggle\n    >\n  </mat-button-toggle-group>\n</div>\n\n<!-- (change)=\"testOption($event.value)\" -->\n","<div\n  [class.img-wrapper]=\"!isModal\"\n  (mouseenter)=\"onMouseEnter()\"\n  (mouseleave)=\"onMouseLeave()\"\n>\n  <!-- Thumbnail Image -->\n  @if (!isModal && !isPlaying) {\n    <img [src]=\"thumbnail\" alt=\"Video Thumbnail\" class=\"exercise-img\" />\n  }\n\n  <video\n    #videoPlayer\n    muted\n    disablepictureinpicture\n    controlslist=\"nodownload nofullscreen noplaybackrate\"\n    [controls]=\"isModal\"\n    [preload]=\"isModal ? 'auto' : 'none'\"\n    playsinline\n    [poster]=\"isModal ? '' : thumbnail\"\n    [ngClass]=\"{\n      'exercise-img': !isModal,\n      'exercise-video': !isModal,\n      'modal-img': isModal,\n    }\"\n    [class.video-hidden]=\"!isModal && !isPlaying\"\n  >\n    @if (videoSrc) {\n      <source [src]=\"videoSrc\" type=\"video/mp4\" />\n    }\n    <p>Your browser does not support the video tag.</p>\n  </video>\n</div>\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n    selector: 'ui-video-player',\n    imports: [CommonModule],\n    templateUrl: './video-player.component.html',\n    styleUrl: './video-player.component.scss'\n})\nexport class VideoPlayerComponent implements AfterViewInit {\n  @ViewChild('videoPlayer', { static: false })\n  videoPlayer!: ElementRef<HTMLVideoElement>;\n  @Input() videoSrc!: string | undefined;\n  @Input() thumbnail?: string | undefined;\n  @Input() isModal? = true;\n  private video!: HTMLVideoElement;\n  isPlaying = false;\n  private hoverTimeout: any;\n\n  ngAfterViewInit() {\n    this.video = this.videoPlayer.nativeElement;\n  }\n\n  onMouseEnter() {\n    if (!this.isModal) {\n      this.hoverTimeout = setTimeout(() => {\n        this.playVideo();\n      }, 500);\n    }\n  }\n\n  onMouseLeave() {\n    if (!this.isModal) {\n      clearTimeout(this.hoverTimeout);\n      this.pauseVideo();\n    }\n  }\n\n  // Play video on mouse enter\n  async playVideo() {\n    // if (this.isPlaying) return; // Prevents unnecessary restarts\n    if (!this.isModal && !this.isPlaying) {\n      try {\n        // Load the video explicitly\n        this.video.load();\n\n        // Wait for the video to be ready\n        await new Promise<void>(resolve => {\n          this.video.addEventListener('canplay', () => resolve(), {\n            once: true,\n          });\n        });\n\n        // Attempt to play the video\n        this.isPlaying = true;\n        await this.video.play();\n        this.video.loop = true;\n        // console.log('Video is playing');\n      } catch (error) {\n        console.error('Video playback failed:', error);\n      }\n    }\n  }\n\n  // Pause video on mouse leave\n  pauseVideo() {\n    this.isPlaying = false;\n    this.video.pause();\n    this.video.loop = false;\n    // console.log('Video is paused');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  readonly close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n\n  /**\n   * @deprecated No longer used and will be removed.\n   * @breaking-change 21.0.0\n   */\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  overlayPanelClass?: string | string[];\n  hasBackdrop?: boolean;\n  readonly panelId?: string;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  addItem?: (item: T) => void;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  removeItem?: (item: T) => void;\n}\n","<ng-content select=\"mat-icon, [matMenuItemIcon]\"></ng-content>\n<span class=\"mat-mdc-menu-item-text\"><ng-content></ng-content></span>\n<div class=\"mat-mdc-menu-ripple\" matRipple\n     [matRippleDisabled]=\"disableRipple || disabled\"\n     [matRippleTrigger]=\"_getHostElement()\">\n</div>\n\n@if (_triggersSubmenu) {\n     <svg\n       class=\"mat-mdc-menu-submenu-icon\"\n       viewBox=\"0 0 5 10\"\n       focusable=\"false\"\n       aria-hidden=\"true\"><polygon points=\"0,0 5,5 0,10\"/></svg>\n}\n","<ng-template>\n  <div\n    class=\"mat-mdc-menu-panel\"\n    [id]=\"panelId\"\n    [class]=\"_classList\"\n    [class.mat-menu-panel-animations-disabled]=\"_animationsDisabled\"\n    [class.mat-menu-panel-exit-animation]=\"_panelAnimationState === 'void'\"\n    [class.mat-menu-panel-animating]=\"_isAnimating\"\n    (click)=\"closed.emit('click')\"\n    tabindex=\"-1\"\n    role=\"menu\"\n    (animationstart)=\"_onAnimationStart($event.animationName)\"\n    (animationend)=\"_onAnimationDone($event.animationName)\"\n    (animationcancel)=\"_onAnimationDone($event.animationName)\"\n    [attr.aria-label]=\"ariaLabel || null\"\n    [attr.aria-labelledby]=\"ariaLabelledby || null\"\n    [attr.aria-describedby]=\"ariaDescribedby || null\">\n    <div class=\"mat-mdc-menu-content\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</ng-template>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Input,\n  AfterViewInit,\n  ChangeDetectorRef,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MatMenuPanel, MAT_MENU_PANEL} from './menu-panel';\nimport {_StructuralStylesLoader, MatRipple} from '../core';\nimport {_CdkPrivateStyleLoader} from '@angular/cdk/private';\n\n/**\n * Single item inside a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\n@Component({\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-mdc-menu-item mat-focus-indicator',\n    '[class.mat-mdc-menu-item-highlighted]': '_highlighted',\n    '[class.mat-mdc-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n  imports: [MatRipple],\n})\nexport class MatMenuItem implements FocusableOption, AfterViewInit, OnDestroy {\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _document = inject(DOCUMENT);\n  private _focusMonitor = inject(FocusMonitor);\n  _parentMenu? = inject<MatMenuPanel<MatMenuItem>>(MAT_MENU_PANEL, {optional: true});\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  /** Whether the menu item is disabled. */\n  @Input({transform: booleanAttribute}) disabled: boolean = false;\n\n  /** Whether ripples are disabled on the menu item. */\n  @Input({transform: booleanAttribute}) disableRipple: boolean = false;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Stream that emits when the menu item is focused. */\n  readonly _focused = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n    this._parentMenu?.addItem?.(this);\n  }\n\n  /** Focuses the menu item. */\n  focus(origin?: FocusOrigin, options?: FocusOptions): void {\n    if (this._focusMonitor && origin) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n\n    this._focused.next(this);\n  }\n\n  ngAfterViewInit() {\n    if (this._focusMonitor) {\n      // Start monitoring the element, so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      this._focusMonitor.monitor(this._elementRef, false);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n    this._focused.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const clone = this._elementRef.nativeElement.cloneNode(true) as HTMLElement;\n    const icons = clone.querySelectorAll('mat-icon, .material-icons');\n\n    // Strip away icons, so they don't show up in the text.\n    for (let i = 0; i < icons.length; i++) {\n      icons[i].remove();\n    }\n\n    return clone.textContent?.trim() || '';\n  }\n\n  _setHighlighted(isHighlighted: boolean) {\n    // We need to mark this for check for the case where the content is coming from a\n    // `matMenuContent` whose change detection tree is at the declaration position,\n    // not the insertion position. See #23175.\n    this._highlighted = isHighlighted;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _setTriggersSubmenu(triggersSubmenu: boolean) {\n    this._triggersSubmenu = triggersSubmenu;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _hasFocus(): boolean {\n    return this._document && this._document.activeElement === this._getHostElement();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DomPortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ChangeDetectorRef,\n  Directive,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n  inject,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_MENU_CONTENT = new InjectionToken<MatMenuContent>('MatMenuContent');\n\n/** Menu content that will be rendered lazily once the menu is opened. */\n@Directive({\n  selector: 'ng-template[matMenuContent]',\n  providers: [{provide: MAT_MENU_CONTENT, useExisting: MatMenuContent}],\n})\nexport class MatMenuContent implements OnDestroy {\n  private _template = inject<TemplateRef<any>>(TemplateRef);\n  private _appRef = inject(ApplicationRef);\n  private _injector = inject(Injector);\n  private _viewContainerRef = inject(ViewContainerRef);\n  private _document = inject(DOCUMENT);\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n\n  private _portal: TemplatePortal<any> | undefined;\n  private _outlet: DomPortalOutlet | undefined;\n\n  /** Emits when the menu content has been attached. */\n  readonly _attached = new Subject<void>();\n\n  constructor(...args: unknown[]);\n\n  constructor() {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(\n        this._document.createElement('div'),\n        null,\n        this._appRef,\n        this._injector,\n      );\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n\n    // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n    // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n    // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n    // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n    this._changeDetectorRef.markForCheck();\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal?.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    this.detach();\n    this._outlet?.dispose();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n  ChangeDetectorRef,\n  booleanAttribute,\n  afterNextRender,\n  AfterRenderRef,\n  inject,\n  Injector,\n  ANIMATION_MODULE_TYPE,\n} from '@angular/core';\nimport {_IdGenerator, FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {startWith, switchMap} from 'rxjs/operators';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel, MAT_MENU_PANEL} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuContent, MAT_MENU_CONTENT} from './menu-content';\n\n/** Reason why the menu was closed. */\nexport type MenuCloseReason = void | 'click' | 'keydown' | 'tab';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Class or list of classes to be applied to the menu's overlay panel. */\n  overlayPanelClass?: string | string[];\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS = new InjectionToken<MatMenuDefaultOptions>(\n  'mat-menu-default-options',\n  {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY,\n  },\n);\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n\n/** Name of the enter animation `@keyframes`. */\nconst ENTER_ANIMATION = '_mat-menu-enter';\n\n/** Name of the exit animation `@keyframes`. */\nconst EXIT_ANIMATION = '_mat-menu-exit';\n\n@Component({\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrl: 'menu.css',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  host: {\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[attr.aria-describedby]': 'null',\n  },\n  providers: [{provide: MAT_MENU_PANEL, useExisting: MatMenu}],\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  private _injector = inject(Injector);\n\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX;\n  private _yPosition: MenuPositionY;\n  private _firstItemFocusRef?: AfterRenderRef;\n  private _exitFallbackTimeout: ReturnType<typeof setTimeout> | undefined;\n\n  /** Whether animations are currently disabled. */\n  protected _animationsDisabled: boolean;\n\n  /** All items inside the menu. Includes items nested inside another menu. */\n  @ContentChildren(MatMenuItem, {descendants: true}) _allItems: QueryList<MatMenuItem>;\n\n  /** Only the direct descendant menu items. */\n  _directDescendantItems = new QueryList<MatMenuItem>();\n\n  /** Classes to be applied to the menu panel. */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  readonly _animationDone = new Subject<'void' | 'enter'>();\n\n  /** Whether the menu is animating. */\n  _isAnimating = false;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class or list of classes to be added to the overlay panel. */\n  overlayPanelClass: string | string[];\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string;\n\n  /** aria-label for the menu panel. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** aria-labelledby for the menu panel. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** aria-describedby for the menu panel. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX {\n    return this._xPosition;\n  }\n  set xPosition(value: MenuPositionX) {\n    if (\n      value !== 'before' &&\n      value !== 'after' &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY {\n    return this._yPosition;\n  }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem, {descendants: false}) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MAT_MENU_CONTENT) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input({transform: booleanAttribute}) overlapTrigger: boolean;\n\n  /** Whether the menu has a backdrop. */\n  @Input({transform: (value: any) => (value == null ? null : booleanAttribute(value))})\n  hasBackdrop?: boolean;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n    const newClassList = {...this._classList};\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        newClassList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        newClassList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n\n    this._classList = newClassList;\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string {\n    return this.panelClass;\n  }\n  set classList(classes: string) {\n    this.panelClass = classes;\n  }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<MenuCloseReason> = new EventEmitter<MenuCloseReason>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() readonly close: EventEmitter<MenuCloseReason> = this.closed;\n\n  readonly panelId: string = inject(_IdGenerator).getId('mat-menu-panel-');\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const defaultOptions = inject<MatMenuDefaultOptions>(MAT_MENU_DEFAULT_OPTIONS);\n    this.overlayPanelClass = defaultOptions.overlayPanelClass || '';\n    this._xPosition = defaultOptions.xPosition;\n    this._yPosition = defaultOptions.yPosition;\n    this.backdropClass = defaultOptions.backdropClass;\n    this.overlapTrigger = defaultOptions.overlapTrigger;\n    this.hasBackdrop = defaultOptions.hasBackdrop;\n    this._animationsDisabled = inject(ANIMATION_MODULE_TYPE, {optional: true}) === 'NoopAnimations';\n  }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n    this._keyManager = new FocusKeyManager(this._directDescendantItems)\n      .withWrap()\n      .withTypeAhead()\n      .withHomeAndEnd();\n    this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n\n    // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n    // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n    // is internal and we know that it gets completed on destroy.\n    this._directDescendantItems.changes\n      .pipe(\n        startWith(this._directDescendantItems),\n        switchMap(items => merge(...items.map((item: MatMenuItem) => item._focused))),\n      )\n      .subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem as MatMenuItem));\n\n    this._directDescendantItems.changes.subscribe((itemsList: QueryList<MatMenuItem>) => {\n      // Move focus to another item, if the active item is removed from the list.\n      // We need to debounce the callback, because multiple items might be removed\n      // in quick succession.\n      const manager = this._keyManager;\n\n      if (this._panelAnimationState === 'enter' && manager.activeItem?._hasFocus()) {\n        const items = itemsList.toArray();\n        const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n\n        if (items[index] && !items[index].disabled) {\n          manager.setActiveItem(index);\n        } else {\n          manager.setNextItemActive();\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._keyManager?.destroy();\n    this._directDescendantItems.destroy();\n    this.closed.complete();\n    this._firstItemFocusRef?.destroy();\n    clearTimeout(this._exitFallbackTimeout);\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    const itemChanges = this._directDescendantItems.changes as Observable<QueryList<MatMenuItem>>;\n    return itemChanges.pipe(\n      startWith(this._directDescendantItems),\n      switchMap(items => merge(...items.map((item: MatMenuItem) => item._hovered))),\n    ) as Observable<MatMenuItem>;\n  }\n\n  /*\n   * Registers a menu item with the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  addItem(_item: MatMenuItem) {}\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  removeItem(_item: MatMenuItem) {}\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n        break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n        break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n        break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n        return;\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // Wait for `afterNextRender` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n    this._firstItemFocusRef?.destroy();\n    this._firstItemFocusRef = afterNextRender(\n      () => {\n        const menuPanel = this._resolvePanel();\n\n        // If an item in the menuPanel is already focused, avoid overriding the focus.\n        if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n          const manager = this._keyManager;\n          manager.setFocusOrigin(origin).setFirstItemActive();\n\n          // If there's no active item at this point, it means that all the items are disabled.\n          // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n          // give _some_ feedback to screen readers.\n          if (!manager.activeItem && menuPanel) {\n            menuPanel.focus();\n          }\n        }\n      },\n      {injector: this._injector},\n    );\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * @deprecated No longer used and will be removed.\n   * @breaking-change 21.0.0\n   */\n  setElevation(_depth: number): void {}\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList = {\n      ...this._classList,\n      ['mat-menu-before']: posX === 'before',\n      ['mat-menu-after']: posX === 'after',\n      ['mat-menu-above']: posY === 'above',\n      ['mat-menu-below']: posY === 'below',\n    };\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  protected _onAnimationDone(state: string) {\n    const isExit = state === EXIT_ANIMATION;\n\n    if (isExit || state === ENTER_ANIMATION) {\n      if (isExit) {\n        clearTimeout(this._exitFallbackTimeout);\n        this._exitFallbackTimeout = undefined;\n      }\n      this._animationDone.next(isExit ? 'void' : 'enter');\n      this._isAnimating = false;\n    }\n  }\n\n  protected _onAnimationStart(state: string) {\n    if (state === ENTER_ANIMATION || state === EXIT_ANIMATION) {\n      this._isAnimating = true;\n    }\n  }\n\n  _setIsOpen(isOpen: boolean) {\n    this._panelAnimationState = isOpen ? 'enter' : 'void';\n\n    if (isOpen) {\n      if (this._keyManager.activeItemIndex === 0) {\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        const menuPanel = this._resolvePanel();\n\n        if (menuPanel) {\n          menuPanel.scrollTop = 0;\n        }\n      }\n    } else if (!this._animationsDisabled) {\n      // Some apps do `* { animation: none !important; }` in tests which will prevent the\n      // `animationend` event from firing. Since the exit animation is loading-bearing for\n      // removing the content from the DOM, add a fallback timer.\n      this._exitFallbackTimeout = setTimeout(() => this._onAnimationDone(EXIT_ANIMATION), 200);\n    }\n\n    // Animation events won't fire when animations are disabled so we simulate them.\n    if (this._animationsDisabled) {\n      setTimeout(() => {\n        this._onAnimationDone(isOpen ? ENTER_ANIMATION : EXIT_ANIMATION);\n      });\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   */\n  private _updateDirectDescendants() {\n    this._allItems.changes\n      .pipe(startWith(this._allItems))\n      .subscribe((items: QueryList<MatMenuItem>) => {\n        this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n        this._directDescendantItems.notifyOnChanges();\n      });\n  }\n\n  /** Gets the menu panel DOM node. */\n  private _resolvePanel(): HTMLElement | null {\n    let menuPanel: HTMLElement | null = null;\n\n    if (this._directDescendantItems.length) {\n      // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n      // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n      // because the panel is inside an `ng-template`. We work around it by starting from one of\n      // the items and walking up the DOM.\n      menuPanel = this._directDescendantItems.first!._getHostElement().closest('[role=\"menu\"]');\n    }\n\n    return menuPanel;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  FocusMonitor,\n  FocusOrigin,\n  isFakeMousedownFromScreenReader,\n  isFakeTouchstartFromScreenReader,\n} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {_bindEventWithOptions} from '@angular/cdk/platform';\nimport {merge, Observable, of as observableOf, Subscription} from 'rxjs';\nimport {filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu, MenuCloseReason} from './menu';\nimport {throwMatMenuRecursiveError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>(\n  'mat-menu-scroll-strategy',\n  {\n    providedIn: 'root',\n    factory: () => {\n      const overlay = inject(Overlay);\n      return () => overlay.scrollStrategies.reposition();\n    },\n  },\n);\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = {passive: true};\n\n/**\n * Default top padding of the menu panel.\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 15.0.0\n */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Mapping between menu panels and the last trigger that opened them. */\nconst PANELS_TO_TRIGGERS = new WeakMap<MatMenuPanel, MatMenuTrigger>();\n\n/** Directive applied to an element that should trigger a `mat-menu`. */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'class': 'mat-mdc-menu-trigger',\n    '[attr.aria-haspopup]': 'menu ? \"menu\" : null',\n    '[attr.aria-expanded]': 'menuOpen',\n    '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n    '(click)': '_handleClick($event)',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matMenuTrigger',\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _overlay = inject(Overlay);\n  private _element = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _viewContainerRef = inject(ViewContainerRef);\n  private _menuItemInstance = inject(MatMenuItem, {optional: true, self: true})!;\n  private _dir = inject(Directionality, {optional: true});\n  private _focusMonitor = inject(FocusMonitor);\n  private _ngZone = inject(NgZone);\n  private _scrollStrategy = inject(MAT_MENU_SCROLL_STRATEGY);\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  private _cleanupTouchstart: () => void;\n\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _pendingRemoval: Subscription | undefined;\n\n  /**\n   * We're specifically looking for a `MatMenu` here since the generic `MatMenuPanel`\n   * interface lacks some functionality around nested menus and animations.\n   */\n  private _parentMaterialMenu: MatMenu | undefined;\n\n  /**\n   * Cached value of the padding of the parent menu panel.\n   * Used to offset sub-menus to compensate for the padding.\n   */\n  private _parentInnerPadding: number | undefined;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: Exclude<FocusOrigin, 'program' | null> | undefined = undefined;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel | null {\n    return this.menu;\n  }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel | null) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu(): MatMenuPanel | null {\n    return this._menu;\n  }\n  set menu(menu: MatMenuPanel | null) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatMenuRecursiveError();\n      }\n\n      this._menuCloseSubscription = menu.close.subscribe((reason: MenuCloseReason) => {\n        this._destroyMenu(reason);\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n          this._parentMaterialMenu.closed.emit(reason);\n        }\n      });\n    }\n\n    this._menuItemInstance?._setTriggersSubmenu(this.triggersSubmenu());\n  }\n  private _menu: MatMenuPanel | null;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const parentMenu = inject<MatMenuPanel>(MAT_MENU_PANEL, {optional: true});\n    const renderer = inject(Renderer2);\n\n    this._parentMaterialMenu = parentMenu instanceof MatMenu ? parentMenu : undefined;\n    this._cleanupTouchstart = _bindEventWithOptions(\n      renderer,\n      this._element.nativeElement,\n      'touchstart',\n      (event: TouchEvent) => {\n        if (!isFakeTouchstartFromScreenReader(event)) {\n          this._openedBy = 'touch';\n        }\n      },\n      passiveEventListenerOptions,\n    );\n  }\n\n  ngAfterContentInit() {\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this.menu && this._ownsMenu(this.menu)) {\n      PANELS_TO_TRIGGERS.delete(this.menu);\n    }\n\n    this._cleanupTouchstart();\n    this._pendingRemoval?.unsubscribe();\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMaterialMenu && this.menu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    const menu = this.menu;\n\n    if (this._menuOpen || !menu) {\n      return;\n    }\n\n    this._pendingRemoval?.unsubscribe();\n    const previousTrigger = PANELS_TO_TRIGGERS.get(menu);\n    PANELS_TO_TRIGGERS.set(menu, this);\n\n    // If the same menu is currently attached to another trigger,\n    // we need to close it so it doesn't end up in a broken state.\n    if (previousTrigger && previousTrigger !== this) {\n      previousTrigger.closeMenu();\n    }\n\n    const overlayRef = this._createOverlay(menu);\n    const overlayConfig = overlayRef.getConfig();\n    const positionStrategy = overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy;\n\n    this._setPosition(menu, positionStrategy);\n    overlayConfig.hasBackdrop =\n      menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;\n\n    // We need the `hasAttached` check for the case where the user kicked off a removal animation,\n    // but re-entered the menu. Re-attaching the same portal will trigger an error otherwise.\n    if (!overlayRef.hasAttached()) {\n      overlayRef.attach(this._getPortal(menu));\n      menu.lazyContent?.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n    menu.direction = this.dir;\n    menu.focusFirstItem(this._openedBy || 'program');\n    this._setIsMenuOpen(true);\n\n    if (menu instanceof MatMenu) {\n      menu._setIsOpen(true);\n      menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(() => {\n        // Re-adjust the position without locking when the amount of items\n        // changes so that the overlay is allowed to pick a new optimal position.\n        positionStrategy.withLockedPosition(false).reapplyLastPosition();\n        positionStrategy.withLockedPosition(true);\n      });\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu?.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin?: FocusOrigin, options?: FocusOptions) {\n    if (this._focusMonitor && origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  /**\n   * Updates the position of the menu to ensure that it fits all options within the viewport.\n   */\n  updatePosition(): void {\n    this._overlayRef?.updatePosition();\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu(reason: MenuCloseReason) {\n    const overlayRef = this._overlayRef;\n    const menu = this._menu;\n\n    if (!overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    this._closingActionsSubscription.unsubscribe();\n    this._pendingRemoval?.unsubscribe();\n\n    // Note that we don't wait for the animation to finish if another trigger took\n    // over the menu, because the panel will end up empty which looks glitchy.\n    if (menu instanceof MatMenu && this._ownsMenu(menu)) {\n      this._pendingRemoval = menu._animationDone.pipe(take(1)).subscribe(() => {\n        overlayRef.detach();\n        menu.lazyContent?.detach();\n      });\n      menu._setIsOpen(false);\n    } else {\n      overlayRef.detach();\n      menu?.lazyContent?.detach();\n    }\n\n    if (menu && this._ownsMenu(menu)) {\n      PANELS_TO_TRIGGERS.delete(menu);\n    }\n\n    // Always restore focus if the user is navigating using the keyboard or the menu was opened\n    // programmatically. We don't restore for non-root triggers, because it can prevent focus\n    // from making it back to the root trigger when closing a long chain of menus by clicking\n    // on the backdrop.\n    if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = undefined;\n    this._setIsMenuOpen(false);\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    if (isOpen !== this._menuOpen) {\n      this._menuOpen = isOpen;\n      this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n      if (this.triggersSubmenu()) {\n        this._menuItemInstance._setHighlighted(isOpen);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(menu: MatMenuPanel): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig(menu);\n      this._subscribeToPositions(\n        menu,\n        config.positionStrategy as FlexibleConnectedPositionStrategy,\n      );\n      this._overlayRef = this._overlay.create(config);\n      this._overlayRef.keydownEvents().subscribe(event => {\n        if (this.menu instanceof MatMenu) {\n          this.menu._handleKeydown(event);\n        }\n      });\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(menu: MatMenuPanel): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay\n        .position()\n        .flexibleConnectedTo(this._element)\n        .withLockedPosition()\n        .withGrowAfterOpen()\n        .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      panelClass: menu.overlayPanelClass,\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir || 'ltr',\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(menu: MatMenuPanel, position: FlexibleConnectedPositionStrategy) {\n    if (menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        this._ngZone.run(() => {\n          const posX: MenuPositionX =\n            change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n          const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n          menu.setPositionClasses!(posX, posY);\n        });\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(menu: MatMenuPanel, positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n      menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n      menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n\n      if (this._parentMaterialMenu) {\n        if (this._parentInnerPadding == null) {\n          const firstItem = this._parentMaterialMenu.items.first;\n          this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;\n        }\n\n        offsetY = overlayY === 'bottom' ? this._parentInnerPadding : -this._parentInnerPadding;\n      }\n    } else if (!menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY,\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY,\n      },\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : observableOf();\n    const hover = this._parentMaterialMenu\n      ? this._parentMaterialMenu\n          ._hovered()\n          .pipe(filter(active => this._menuOpen && active !== this._menuItemInstance))\n      : observableOf();\n\n    return merge(backdrop, parentClose as Observable<MenuCloseReason>, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : undefined;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Pressing enter on the trigger will trigger the click handler later.\n    if (keyCode === ENTER || keyCode === SPACE) {\n      this._openedBy = 'keyboard';\n    }\n\n    if (\n      this.triggersSubmenu() &&\n      ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n        (keyCode === LEFT_ARROW && this.dir === 'rtl'))\n    ) {\n      this._openedBy = 'keyboard';\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (this.triggersSubmenu() && this._parentMaterialMenu) {\n      this._hoverSubscription = this._parentMaterialMenu._hovered().subscribe(active => {\n        if (active === this._menuItemInstance && !active.disabled) {\n          this._openedBy = 'mouse';\n          this.openMenu();\n        }\n      });\n    }\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(menu: MatMenuPanel): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== menu.templateRef) {\n      this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n  /**\n   * Determines whether the trigger owns a specific menu panel, at the current point in time.\n   * This allows us to distinguish the case where the same panel is passed into multiple triggers\n   * and multiple are open at a time.\n   */\n  private _ownsMenu(menu: MatMenuPanel): boolean {\n    return PANELS_TO_TRIGGERS.get(menu) === this;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '../core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuContent} from './menu-content';\nimport {MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MatMenuTrigger} from './menu-trigger';\n\n@NgModule({\n  imports: [\n    MatRippleModule,\n    MatCommonModule,\n    OverlayModule,\n    MatMenu,\n    MatMenuItem,\n    MatMenuContent,\n    MatMenuTrigger,\n  ],\n  exports: [\n    CdkScrollableModule,\n    MatMenu,\n    MatCommonModule,\n    MatMenuItem,\n    MatMenuContent,\n    MatMenuTrigger,\n  ],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: any;\n  readonly fadeInItems: any;\n} = {\n  // Represents:\n  // trigger('transformMenu', [\n  //   state(\n  //     'void',\n  //     style({\n  //       opacity: 0,\n  //       transform: 'scale(0.8)',\n  //     }),\n  //   ),\n  //   transition(\n  //     'void => enter',\n  //     animate(\n  //       '120ms cubic-bezier(0, 0, 0.2, 1)',\n  //       style({\n  //         opacity: 1,\n  //         transform: 'scale(1)',\n  //       }),\n  //     ),\n  //   ),\n  //   transition('* => void', animate('100ms 25ms linear', style({opacity: 0}))),\n  // ])\n\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: {\n    type: 7,\n    name: 'transformMenu',\n    definitions: [\n      {\n        type: 0,\n        name: 'void',\n        styles: {type: 6, styles: {opacity: 0, transform: 'scale(0.8)'}, offset: null},\n      },\n      {\n        type: 1,\n        expr: 'void => enter',\n        animation: {\n          type: 4,\n          styles: {type: 6, styles: {opacity: 1, transform: 'scale(1)'}, offset: null},\n          timings: '120ms cubic-bezier(0, 0, 0.2, 1)',\n        },\n        options: null,\n      },\n      {\n        type: 1,\n        expr: '* => void',\n        animation: {\n          type: 4,\n          styles: {type: 6, styles: {opacity: 0}, offset: null},\n          timings: '100ms 25ms linear',\n        },\n        options: null,\n      },\n    ],\n    options: {},\n  },\n\n  // Represents:\n  // trigger('fadeInItems', [\n  //   // TODO(crisbeto): this is inside the `transformMenu`\n  //   // now. Remove next time we do breaking changes.\n  //   state('showing', style({opacity: 1})),\n  //   transition('void => *', [\n  //     style({opacity: 0}),\n  //     animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n  //   ]),\n  // ])\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: {\n    type: 7,\n    name: 'fadeInItems',\n    definitions: [\n      {\n        type: 0,\n        name: 'showing',\n        styles: {type: 6, styles: {opacity: 1}, offset: null},\n      },\n      {\n        type: 1,\n        expr: 'void => *',\n        animation: [\n          {type: 6, styles: {opacity: 0}, offset: null},\n          {type: 4, styles: null, timings: '400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'},\n        ],\n        options: null,\n      },\n    ],\n    options: {},\n  },\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  QueryList,\n  ViewEncapsulation,\n  inject,\n} from '@angular/core';\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrl: 'toolbar.css',\n  host: {\n    'class': 'mat-toolbar',\n    '[class]': 'color ? \"mat-\" + color : \"\"',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar implements AfterViewInit {\n  protected _elementRef = inject(ElementRef);\n  private _platform = inject(Platform);\n  private _document = inject(DOCUMENT);\n\n  // TODO: should be typed as `ThemePalette` but internal apps pass in arbitrary strings.\n  /**\n   * Theme color of the toolbar. This API is supported in M2 themes only, it has\n   * no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/toolbar/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  @Input() color?: string | null;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow, {descendants: true}) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._checkToolbarMixedModes();\n      this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n    }\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      // Check if there are any other DOM nodes that can display content but aren't inside of\n      // a <mat-toolbar-row> element.\n      const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n        .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n        .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n        .some(node => !!(node.textContent && node.textContent.trim()));\n\n      if (isCombinedUsage) {\n        throwToolbarMixedModesError();\n      }\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error(\n    'MatToolbar: Attempting to combine different toolbar modes. ' +\n      'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n      'inside of a `<mat-toolbar>` for a single row.',\n  );\n}\n","<ng-content></ng-content>\n<ng-content select=\"mat-toolbar-row\"></ng-content>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '../core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, MatToolbar, MatToolbarRow],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n})\nexport class MatToolbarModule {}\n","<mat-toolbar\n  class=\"mat-toolbar\"\n  [class.back-navigation-flex]=\"backNavigation()\"\n>\n  <div class=\"menu-logo-wrapper\" [class.back-nav-item]=\"backNavigation()\">\n    <!-- THIS IS SUSPENDED (NOT VISIBLE)IN DEMO -->\n    <!-- <button\n      type=\"button\"\n      aria-label=\"Toggle sidenav\"\n      i18n-aria-label=\"@@NavigationRail.toggleSidenav\"\n      mat-icon-button\n      (click)=\"toggleNavDrawer()\"\n      style=\"display: none\"\n    >\n      <mat-icon>menu</mat-icon>\n    </button> -->\n    <div class=\"logo\">\n      <!-- <img src=\"assets/images/text-logo-placeholder.png\" alt=\"\" /> -->\n      <!-- <img src=\"assets/images/leaf-sanare-thin-logo-2.svg\" alt=\"\" /> -->\n      @if (screenSize()?.isCompact) {\n        @if (backNavigation()) {\n          <button\n            mat-icon-button\n            matTooltip=\"Back\"\n            class=\"back-button\"\n            i18n-matTooltip=\"@@PageToolbar.backBtnTooltip\"\n            aria-label=\"Arrow back icon button\"\n            i18n-aria-label=\"@@PageToolbar.backButtonAriaLabel\"\n            (click)=\"onBack()\"\n          >\n            <mat-icon>arrow_back</mat-icon>\n          </button>\n        } @else {\n          <img src=\"assets/images/leaf-img.svg\" alt=\"\" />\n        }\n      } @else {\n        @if (isDark()) {\n          <img\n            src=\"assets/images/leaf-sanare-thin-dark-logo-2-DEMO.svg\"\n            alt=\"\"\n          />\n        } @else {\n          <img\n            src=\"assets/images/leaf-sanare-thin-light-logo-2-DEMO.svg\"\n            alt=\"\"\n          />\n        }\n      }\n    </div>\n  </div>\n  @if (screenSize()?.isCompact) {\n    <span class=\"page-title mat-headline-small\">{{ pageTitle() }}</span>\n  }\n  <div\n    class=\"toolbar-buttons-container\"\n    [class.back-nav-margin]=\"backNavigation()\"\n  >\n    @if (screenSize()?.isCompact === false) {\n      <button\n        mat-icon-button\n        matTooltip=\"Settings\"\n        routerLink=\"/settings\"\n        i18n-matTooltip=\"@@NavigationRail.settings\"\n        aria-label=\"Settings icon-button\"\n        i18n-aria-label=\"@@NavigationRail.settingsAriaLabel\"\n        class=\"user-icon\"\n      >\n        <mat-icon>settings</mat-icon>\n      </button>\n    }\n    <button\n      mat-icon-button\n      [matMenuTriggerFor]=\"menu\"\n      matTooltip=\"Profile\"\n      i18n-matTooltip=\"@@NavigationRail.profile\"\n      aria-label=\"User icon-button with a menu\"\n      i18n-aria-label=\"@@NavigationRail.profileAriaLabel\"\n      class=\"user-icon\"\n    >\n      @if (screenSize()?.isCompact) {\n        <mat-icon>more_vert</mat-icon>\n      } @else {\n        <mat-icon>person</mat-icon>\n      }\n    </button>\n    <mat-menu #menu=\"matMenu\">\n      <div class=\"menu-username\">\n        <span class=\"circle\">\n          {{ getInitial(userName()) }}\n        </span>\n        <span class=\"mat-title-small\">{{ userName() }}</span>\n      </div>\n      @if (screenSize()?.isCompact) {\n        <button mat-menu-item routerLink=\"/settings\" style=\"min-width: 200px\">\n          <mat-icon>settings</mat-icon>\n          <span i18n=\"@@NavigationRail.settings\">Settings</span>\n        </button>\n      }\n      <button mat-menu-item routerLink=\"/profile\" style=\"min-width: 200px\">\n        <mat-icon>account_circle</mat-icon>\n        <span i18n=\"@@NavigationRail.profileMenuItem\">Profile</span>\n      </button>\n      <!-- <button mat-menu-item disabled>\n    <mat-icon>edit</mat-icon>\n    <span>Edit profile</span>\n    </button> -->\n      <button mat-menu-item (click)=\"logoutUser()\">\n        <mat-icon>logout</mat-icon>\n        <span i18n=\"@@NavigationRail.logoutMenuItem\">Logout</span>\n      </button>\n    </mat-menu>\n  </div>\n</mat-toolbar>\n","import { Component, inject } from '@angular/core';\nimport { CommonModule, Location } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { AuthService, UsersService } from '@slowautomobile/users';\nimport { Router, RouterLink } from '@angular/router';\nimport { ThemeManagerService } from '../../services/theme-manager.service';\nimport { ActivePageService } from '../../services/active-page.service';\nimport { ScreenSizeService } from '../../services/screen-size.service';\n\n@Component({\n    selector: 'ui-toolbar-buttons',\n    imports: [\n        CommonModule,\n        MatIconModule,\n        MatButtonModule,\n        MatToolbarModule,\n        MatMenuModule,\n        RouterLink,\n    ],\n    templateUrl: './toolbar-buttons.component.html',\n    styleUrl: './toolbar-buttons.component.scss'\n})\nexport class ToolbarButtonsComponent {\n  private usersService = inject(UsersService);\n  private authService = inject(AuthService);\n  themeManager = inject(ThemeManagerService);\n  private activePageTitle = inject(ActivePageService);\n  private location = inject(Location);\n  private router = inject(Router);\n  private screenSizeService = inject(ScreenSizeService);\n\n  // @Input() pageTitle?: string;\n  screenSize = this.screenSizeService.screenSize;\n  pageTitle = this.activePageTitle.pageTitle;\n  backNavigation = this.activePageTitle.backNavigation;\n\n  isDark = this.themeManager.isDark;\n  userName = this.usersService.userName;\n\n  getInitial(name: string): string {\n    return name.trim().charAt(0).toUpperCase();\n  }\n\n  onBack() {\n    // this.location.back();\n    this.router.navigateByUrl('/');\n  }\n\n  logoutUser() {\n    this.authService.logout();\n  }\n}\n","<!-- <div class=\"custom-modal\"> -->\n<div class=\"confirmation-dialog-wrapper\">\n  <div\n    class=\"title-wrapper\"\n    [ngClass]=\"{ 'program-exercise': data.isProgramExercise }\"\n  >\n    @if (data.isProgramExercise) {\n      <button\n        mat-icon-button\n        matTooltip=\"Back to programs\"\n        i18n-matTooltip=\"@@ExerciseModal.backToProgramsTooltip\"\n        aria-label=\"Arrow back icon-button\"\n        i18n-aria-label=\"@@ExerciseModal.backToProgramsAriaLabel\"\n        mat-dialog-close\n      >\n        <mat-icon>arrow_back</mat-icon>\n      </button>\n    }\n    @if (!data.isProgramExercise) {\n      <h1\n        mat-dialog-title\n        class=\"mat-title-large\"\n        i18n=\"@@ExerciseModal.exerciseDetails\"\n      >\n        Exercise details\n      </h1>\n      <button\n        mat-icon-button\n        mat-dialog-close\n        aria-label=\"Icon button with a close icon\"\n        i18n-aria-label=\"@@ExerciseModal.closeModalIconAriaLabel\"\n      >\n        <mat-icon>close</mat-icon>\n      </button>\n    }\n  </div>\n  <div\n    overlay-scrollbars\n    [options]=\"themeSignal()\"\n    [defer]\n    class=\"dialog-content-wrapper\"\n    [ngClass]=\"{ 'program-exercise': data.isProgramExercise }\"\n  >\n    <div class=\"modal-img-wrapper\">\n      <!-- <img class=\"modal-img\" [src]=\"data.fullExercise.images?.mainImg\" /> -->\n      <ui-video-player\n      [videoSrc]=\"data.fullExercise.video\"\n      [thumbnail]=\"data.fullExercise.images?.mainImg\"\n    />\n    </div>\n    <div class=\"category-labels\">\n      <span i18n=\"@@ExerciseModal.exerciseName\" class=\"label\"\n        >Exercise name:\n      </span>\n      <span class=\"category-value\">{{\n        data.fullExercise.name[selectedLang]\n      }}</span>\n    </div>\n    <div class=\"category-labels\">\n      <span i18n=\"@@ExerciseModal.exerciseDescription\" class=\"label\"\n        >Description:\n      </span>\n      <span class=\"category-value\">{{\n        data.fullExercise.description[selectedLang]\n      }}</span>\n    </div>\n    <div class=\"category-labels\">\n      <span i18n=\"@@ExerciseModal.muscles\" class=\"label\">Muscles: </span>\n      <mat-chip-set>\n        @for (muscle of data.fullExercise.muscles; track muscle) {\n          <mat-chip class=\"chips-category\">{{ muscle }}</mat-chip>\n        }\n      </mat-chip-set>\n    </div>\n    <div class=\"category-labels\">\n      <span i18n=\"@@ExerciseModal.bodyAreas\" class=\"label\">Body areas: </span>\n      <mat-chip-set>\n        @for (bodyArea of data.fullExercise.bodyAreas; track bodyArea) {\n          <mat-chip class=\"chips-category\">{{\n            bodyArea.translations?.[selectedLang]\n          }}</mat-chip>\n        }\n      </mat-chip-set>\n    </div>\n    <div class=\"category-labels\">\n      <span i18n=\"@@ExerciseModal.movements\" class=\"label\">Movements: </span>\n      <mat-chip-set>\n        @for (movement of data.fullExercise.movements; track movement) {\n          <mat-chip class=\"chips-category\">{{\n            movement.translations?.[selectedLang]\n          }}</mat-chip>\n        }\n      </mat-chip-set>\n    </div>\n    <div class=\"category-labels\">\n      <span i18n=\"@@ExerciseModal.startingPositions\" class=\"label\"\n        >Starting positions:\n      </span>\n      <mat-chip-set>\n        @for (\n          startingPosition of data.fullExercise.startingPositions;\n          track startingPosition\n        ) {\n          <mat-chip class=\"chips-category\">{{\n            startingPosition.translations?.[selectedLang]\n          }}</mat-chip>\n        }\n      </mat-chip-set>\n    </div>\n    <div class=\"category-labels\">\n      <span i18n=\"@@ExerciseModal.equipment\" class=\"label\">Equipment: </span>\n      <mat-chip-set>\n        @for (equipment of data.fullExercise.equipments; track equipment) {\n          <mat-chip class=\"chips-category\">{{\n            equipment.translations[selectedLang]\n          }}</mat-chip>\n        }\n      </mat-chip-set>\n    </div>\n  </div>\n  @if (!data.isProgramExercise) {\n    <mat-dialog-actions class=\"exercise-modal-actions\">\n      @if (data.exerciseCard.isSelected) {\n        <button\n          (click)=\"removeFromSelected(data.exerciseCard)\"\n          (mouseenter)=\"showHoverIcon(true)\"\n          (mouseleave)=\"showHoverIcon(false)\"\n          mat-fab\n          [color]=\"isHovered ? 'warn' : 'primary'\"\n          matTooltip=\"Remove exercise\"\n          i18n-matTooltip=\"@@ExerciseModal.removeExerciseTooltip\"\n          aria-label=\"Remove icon-button with a close icon\"\n          i18n-aria-label=\"@@ExerciseModal.removeExerciseAriaLabel\"\n        >\n          <mat-icon>{{ isHovered ? 'close' : 'done' }}</mat-icon>\n        </button>\n      } @else {\n        <button\n          (click)=\"addToSelected(data.exerciseCard)\"\n          mat-fab\n          matTooltip=\"Add exercise\"\n          i18n-matTooltip=\"@@ExerciseModal.addExerciseTooltip\"\n          color=\"primary\"\n          aria-label=\"Add icon button with a add icon\"\n          i18n-aria-label=\"@@ExerciseModal.addExerciseAriaLabel\"\n        >\n          <mat-icon>add</mat-icon>\n        </button>\n        <!-- <mat-chip-option color=\"primary\"\n                  ><mat-icon>add</mat-icon></mat-chip-option\n                > -->\n      }\n    </mat-dialog-actions>\n  } @else {\n    <mat-dialog-actions></mat-dialog-actions>\n  }\n</div>\n<!-- </div> -->\n","import { Component, inject } from '@angular/core';\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogClose,\n  MatDialogTitle,\n  MatDialogActions,\n} from '@angular/material/dialog';\nimport { Exercise } from '../../models/exercise';\nimport { SelectedExercisesService } from '../../services/selected-exercises.service';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { ThemeManagerService, VideoPlayerComponent } from '@slowautomobile/ui';\nimport { MatChipSet, MatChip } from '@angular/material/chips';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { MatIconButton, MatFabButton } from '@angular/material/button';\nimport { NgClass } from '@angular/common';\n\nexport interface DialogData {\n  fullExercise: Exercise;\n  exerciseCard: Exercise;\n  isProgramExercise: boolean;\n  selectedLang: 'en' | 'de' | 'sr';\n}\n\n@Component({\n    selector: 'exercises-single-modal',\n    templateUrl: './exercise-modal.component.html',\n    imports: [\n        NgClass,\n        MatIconButton,\n        MatTooltip,\n        MatDialogClose,\n        MatIcon,\n        MatDialogTitle,\n        OverlayscrollbarsModule,\n        MatChipSet,\n        MatChip,\n        MatDialogActions,\n        MatFabButton,\n        VideoPlayerComponent\n    ]\n})\nexport class ExerciseModalComponent {\n  data = inject<DialogData>(MAT_DIALOG_DATA);\n  private selectedExercisesService = inject(SelectedExercisesService);\n  themeManager = inject(ThemeManagerService);\n\n  selectedLang: 'en' | 'de' | 'sr' = this.data.selectedLang;\n  themeSignal = this.themeManager.themeSignal;\n  isHovered = false;\n\n  addToSelected(exercise: Exercise) {\n    this.selectedExercisesService.addToSelected(exercise);\n    console.log(this.selectedExercisesService.selectedExercises());\n  }\n\n  removeFromSelected(exercise: Exercise) {\n    this.selectedExercisesService.removeFromSelected(exercise);\n    console.log(this.selectedExercisesService.selectedExercises());\n  }\n\n  showHoverIcon(isHovered: boolean): void {\n    this.isHovered = isHovered;\n    // console.log(isHovered)\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Creates a deep clone of an element. */\nexport function deepCloneNode(node: HTMLElement): HTMLElement {\n  const clone = node.cloneNode(true) as HTMLElement;\n  const descendantsWithId = clone.querySelectorAll('[id]');\n  const nodeName = node.nodeName.toLowerCase();\n\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n\n  for (let i = 0; i < descendantsWithId.length; i++) {\n    descendantsWithId[i].removeAttribute('id');\n  }\n\n  if (nodeName === 'canvas') {\n    transferCanvasData(node as HTMLCanvasElement, clone as HTMLCanvasElement);\n  } else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n    transferInputData(node as HTMLInputElement, clone as HTMLInputElement);\n  }\n\n  transferData('canvas', node, clone, transferCanvasData);\n  transferData('input, textarea, select', node, clone, transferInputData);\n  return clone;\n}\n\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData<T extends Element>(\n  selector: string,\n  node: HTMLElement,\n  clone: HTMLElement,\n  callback: (source: T, clone: T) => void,\n) {\n  const descendantElements = node.querySelectorAll<T>(selector);\n\n  if (descendantElements.length) {\n    const cloneElements = clone.querySelectorAll<T>(selector);\n\n    for (let i = 0; i < descendantElements.length; i++) {\n      callback(descendantElements[i], cloneElements[i]);\n    }\n  }\n}\n\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n\n/** Transfers the data of one input element to another. */\nfunction transferInputData(\n  source: Element & {value: string},\n  clone: Element & {value: string; name: string; type: string},\n) {\n  // Browsers throw an error when assigning the value of a file input programmatically.\n  if (clone.type !== 'file') {\n    clone.value = source.value;\n  }\n\n  // Radio button `name` attributes must be unique for radio button groups\n  // otherwise original radio buttons can lose their checked state\n  // once the clone is inserted in the DOM.\n  if (clone.type === 'radio' && clone.name) {\n    clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n  }\n}\n\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source: HTMLCanvasElement, clone: HTMLCanvasElement) {\n  const context = clone.getContext('2d');\n\n  if (context) {\n    // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n    // We can't do much about it so just ignore the error.\n    try {\n      context.drawImage(source, 0, 0);\n    } catch {}\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Gets a mutable version of an element's bounding `DOMRect`. */\nexport function getMutableClientRect(element: Element): DOMRect {\n  const rect = element.getBoundingClientRect();\n\n  // We need to clone the `clientRect` here, because all the values on it are readonly\n  // and we need to be able to update them. Also we can't use a spread here, because\n  // the values on a `DOMRect` aren't own properties. See:\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n  return {\n    top: rect.top,\n    right: rect.right,\n    bottom: rect.bottom,\n    left: rect.left,\n    width: rect.width,\n    height: rect.height,\n    x: rect.x,\n    y: rect.y,\n  } as DOMRect;\n}\n\n/**\n * Checks whether some coordinates are within a `DOMRect`.\n * @param clientRect DOMRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nexport function isInsideClientRect(clientRect: DOMRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n\n/**\n * Updates the top/left positions of a `DOMRect`, as well as their bottom/right counterparts.\n * @param domRect `DOMRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nexport function adjustDomRect(\n  domRect: {\n    top: number;\n    bottom: number;\n    left: number;\n    right: number;\n    width: number;\n    height: number;\n  },\n  top: number,\n  left: number,\n) {\n  domRect.top += top;\n  domRect.bottom = domRect.top + domRect.height;\n\n  domRect.left += left;\n  domRect.right = domRect.left + domRect.width;\n}\n\n/**\n * Checks whether the pointer coordinates are close to a DOMRect.\n * @param rect DOMRect to check against.\n * @param threshold Threshold around the DOMRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nexport function isPointerNearDomRect(\n  rect: DOMRect,\n  threshold: number,\n  pointerX: number,\n  pointerY: number,\n): boolean {\n  const {top, right, bottom, left, width, height} = rect;\n  const xThreshold = width * threshold;\n  const yThreshold = height * threshold;\n\n  return (\n    pointerY > top - yThreshold &&\n    pointerY < bottom + yThreshold &&\n    pointerX > left - xThreshold &&\n    pointerX < right + xThreshold\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {_getEventTarget} from '../../platform';\nimport {getMutableClientRect, adjustDomRect} from './dom-rect';\n\n/** Object holding the scroll position of something. */\ninterface ScrollPosition {\n  top: number;\n  left: number;\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nexport class ParentPositionTracker {\n  /** Cached positions of the scrollable parent elements. */\n  readonly positions = new Map<\n    Document | HTMLElement,\n    {\n      scrollPosition: ScrollPosition;\n      clientRect?: DOMRect;\n    }\n  >();\n\n  constructor(private _document: Document) {}\n\n  /** Clears the cached positions. */\n  clear() {\n    this.positions.clear();\n  }\n\n  /** Caches the positions. Should be called at the beginning of a drag sequence. */\n  cache(elements: readonly HTMLElement[]) {\n    this.clear();\n    this.positions.set(this._document, {\n      scrollPosition: this.getViewportScrollPosition(),\n    });\n\n    elements.forEach(element => {\n      this.positions.set(element, {\n        scrollPosition: {top: element.scrollTop, left: element.scrollLeft},\n        clientRect: getMutableClientRect(element),\n      });\n    });\n  }\n\n  /** Handles scrolling while a drag is taking place. */\n  handleScroll(event: Event): ScrollPosition | null {\n    const target = _getEventTarget<HTMLElement | Document>(event)!;\n    const cachedPosition = this.positions.get(target);\n\n    if (!cachedPosition) {\n      return null;\n    }\n\n    const scrollPosition = cachedPosition.scrollPosition;\n    let newTop: number;\n    let newLeft: number;\n\n    if (target === this._document) {\n      const viewportScrollPosition = this.getViewportScrollPosition();\n      newTop = viewportScrollPosition.top;\n      newLeft = viewportScrollPosition.left;\n    } else {\n      newTop = (target as HTMLElement).scrollTop;\n      newLeft = (target as HTMLElement).scrollLeft;\n    }\n\n    const topDifference = scrollPosition.top - newTop;\n    const leftDifference = scrollPosition.left - newLeft;\n\n    // Go through and update the cached positions of the scroll\n    // parents that are inside the element that was scrolled.\n    this.positions.forEach((position, node) => {\n      if (position.clientRect && target !== node && target.contains(node)) {\n        adjustDomRect(position.clientRect, topDifference, leftDifference);\n      }\n    });\n\n    scrollPosition.top = newTop;\n    scrollPosition.left = newLeft;\n\n    return {top: topDifference, left: leftDifference};\n  }\n\n  /**\n   * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n   * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n   * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n   * if the element is offset by something like the `BlockScrollStrategy`.\n   */\n  getViewportScrollPosition() {\n    return {top: window.scrollY, left: window.scrollX};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EmbeddedViewRef} from '@angular/core';\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nexport function getRootNode(viewRef: EmbeddedViewRef<any>, _document: Document): HTMLElement {\n  const rootNodes: Node[] = viewRef.rootNodes;\n\n  if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n    return rootNodes[0] as HTMLElement;\n  }\n\n  const wrapper = _document.createElement('div');\n  rootNodes.forEach(node => wrapper.appendChild(node));\n  return wrapper;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\nexport interface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  msScrollSnapType: string;\n  scrollSnapType: string;\n  webkitTapHighlightColor: string;\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nexport function extendStyles(\n  dest: CSSStyleDeclaration,\n  source: Record<string, string>,\n  importantProperties?: Set<string>,\n) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      const value = source[key];\n\n      if (value) {\n        dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n      } else {\n        dest.removeProperty(key);\n      }\n    }\n  }\n\n  return dest;\n}\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    'touch-action': enable ? '' : 'none',\n    '-webkit-user-drag': enable ? '' : 'none',\n    '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n    'user-select': userSelect,\n    '-ms-user-select': userSelect,\n    '-webkit-user-select': userSelect,\n    '-moz-user-select': userSelect,\n  });\n}\n\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nexport function toggleVisibility(\n  element: HTMLElement,\n  enable: boolean,\n  importantProperties?: Set<string>,\n) {\n  extendStyles(\n    element.style,\n    {\n      position: enable ? '' : 'fixed',\n      top: enable ? '' : '0',\n      opacity: enable ? '' : '0',\n      left: enable ? '' : '-999em',\n    },\n    importantProperties,\n  );\n}\n\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nexport function combineTransforms(transform: string, initialTransform?: string): string {\n  return initialTransform && initialTransform != 'none'\n    ? transform + ' ' + initialTransform\n    : transform;\n}\n\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nexport function matchElementSize(target: HTMLElement, sourceRect: DOMRect): void {\n  target.style.width = `${sourceRect.width}px`;\n  target.style.height = `${sourceRect.height}px`;\n  target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nexport function getTransform(x: number, y: number): string {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return (\n    parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n    parseCssTimeUnitsToMs(rawDelays[propertyIndex])\n  );\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EmbeddedViewRef, Renderer2, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {Direction} from '../bidi';\nimport {\n  extendStyles,\n  getTransform,\n  matchElementSize,\n  toggleNativeDragInteractions,\n} from './dom/styling';\nimport {deepCloneNode} from './dom/clone-node';\nimport {getRootNode} from './dom/root-node';\nimport {getTransformTransitionDurationInMs} from './dom/transition-duration';\n\n/** Template that can be used to create a drag preview element. */\nexport interface DragPreviewTemplate<T = any> {\n  matchSize?: boolean;\n  template: TemplateRef<T> | null;\n  viewContainer: ViewContainerRef;\n  context: T;\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst importantProperties = new Set([\n  // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n  'position',\n]);\n\nexport class PreviewRef {\n  /** Reference to the view of the preview element. */\n  private _previewEmbeddedView: EmbeddedViewRef<any> | null;\n\n  /** Reference to the preview element. */\n  private _preview: HTMLElement;\n\n  get element(): HTMLElement {\n    return this._preview;\n  }\n\n  constructor(\n    private _document: Document,\n    private _rootElement: HTMLElement,\n    private _direction: Direction,\n    private _initialDomRect: DOMRect,\n    private _previewTemplate: DragPreviewTemplate | null,\n    private _previewClass: string | string[] | null,\n    private _pickupPositionOnPage: {\n      x: number;\n      y: number;\n    },\n    private _initialTransform: string | null,\n    private _zIndex: number,\n    private _renderer: Renderer2,\n  ) {}\n\n  attach(parent: HTMLElement): void {\n    this._preview = this._createPreview();\n    parent.appendChild(this._preview);\n\n    // The null check is necessary for browsers that don't support the popover API.\n    // Note that we use a string access for compatibility with Closure.\n    if (supportsPopover(this._preview)) {\n      this._preview['showPopover']();\n    }\n  }\n\n  destroy(): void {\n    this._preview.remove();\n    this._previewEmbeddedView?.destroy();\n    this._preview = this._previewEmbeddedView = null!;\n  }\n\n  setTransform(value: string): void {\n    this._preview.style.transform = value;\n  }\n\n  getBoundingClientRect(): DOMRect {\n    return this._preview.getBoundingClientRect();\n  }\n\n  addClass(className: string): void {\n    this._preview.classList.add(className);\n  }\n\n  getTransitionDuration(): number {\n    return getTransformTransitionDurationInMs(this._preview);\n  }\n\n  addEventListener(name: string, handler: (event: any) => void): () => void {\n    return this._renderer.listen(this._preview, name, handler);\n  }\n\n  private _createPreview(): HTMLElement {\n    const previewConfig = this._previewTemplate;\n    const previewClass = this._previewClass;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview: HTMLElement;\n\n    if (previewTemplate && previewConfig) {\n      // Measure the element before we've inserted the preview\n      // since the insertion could throw off the measurement.\n      const rootRect = previewConfig.matchSize ? this._initialDomRect : null;\n      const viewRef = previewConfig.viewContainer.createEmbeddedView(\n        previewTemplate,\n        previewConfig.context,\n      );\n      viewRef.detectChanges();\n      preview = getRootNode(viewRef, this._document);\n      this._previewEmbeddedView = viewRef;\n      if (previewConfig.matchSize) {\n        matchElementSize(preview, rootRect!);\n      } else {\n        preview.style.transform = getTransform(\n          this._pickupPositionOnPage.x,\n          this._pickupPositionOnPage.y,\n        );\n      }\n    } else {\n      preview = deepCloneNode(this._rootElement);\n      matchElementSize(preview, this._initialDomRect!);\n\n      if (this._initialTransform) {\n        preview.style.transform = this._initialTransform;\n      }\n    }\n\n    extendStyles(\n      preview.style,\n      {\n        // It's important that we disable the pointer events on the preview, because\n        // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n        'pointer-events': 'none',\n        // If the preview has a margin, it can throw off our positioning so we reset it. The reset\n        // value for `margin-right` needs to be `auto` when opened as a popover, because our\n        // positioning is always top/left based, but native popover seems to position itself\n        // to the top/right if `<html>` or `<body>` have `dir=\"rtl\"` (see #29604). Setting it\n        // to `auto` pushed it to the top/left corner in RTL and is a noop in LTR.\n        'margin': supportsPopover(preview) ? '0 auto 0 0' : '0',\n        'position': 'fixed',\n        'top': '0',\n        'left': '0',\n        'z-index': this._zIndex + '',\n      },\n      importantProperties,\n    );\n\n    toggleNativeDragInteractions(preview, false);\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('popover', 'manual');\n    preview.setAttribute('dir', this._direction);\n\n    if (previewClass) {\n      if (Array.isArray(previewClass)) {\n        previewClass.forEach(className => preview.classList.add(className));\n      } else {\n        preview.classList.add(previewClass);\n      }\n    }\n\n    return preview;\n  }\n}\n\n/** Checks whether a specific element supports the popover API. */\nfunction supportsPopover(element: HTMLElement): boolean {\n  return 'showPopover' in element;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader} from '../a11y';\nimport {Direction} from '../bidi';\nimport {coerceElement} from '../coercion';\nimport {_getEventTarget, _getShadowRoot, _bindEventWithOptions} from '../platform';\nimport {ViewportRuler} from '../scrolling';\nimport {\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  Renderer2,\n  TemplateRef,\n  ViewContainerRef,\n  signal,\n} from '@angular/core';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {deepCloneNode} from './dom/clone-node';\nimport {adjustDomRect, getMutableClientRect} from './dom/dom-rect';\nimport {ParentPositionTracker} from './dom/parent-position-tracker';\nimport {getRootNode} from './dom/root-node';\nimport {\n  DragCSSStyleDeclaration,\n  combineTransforms,\n  getTransform,\n  toggleNativeDragInteractions,\n  toggleVisibility,\n} from './dom/styling';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport type {DropListRef} from './drop-list-ref';\nimport {DragPreviewTemplate, PreviewRef} from './preview-ref';\n\n/** Object that can be used to configure the behavior of DragRef. */\nexport interface DragRefConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n\n  /** `z-index` for the absolutely-positioned elements that are created by the drag item. */\n  zIndex?: number;\n\n  /** Ref that the current drag item is nested in. */\n  parentDragRef?: DragRef;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = {passive: true};\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = {passive: false};\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = {\n  passive: false,\n  capture: true,\n};\n\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/** Template that can be used to create a drag helper element (e.g. a preview or a placeholder). */\ninterface DragHelperTemplate<T = any> {\n  template: TemplateRef<T> | null;\n  viewContainer: ViewContainerRef;\n  context: T;\n}\n\n/** Point on the page or within an element. */\nexport interface Point {\n  x: number;\n  y: number;\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n  // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n  'position',\n]);\n\n/**\n * Possible places into which the preview of a drag item can be inserted.\n * - `global` - Preview will be inserted at the bottom of the `<body>`. The advantage is that\n * you don't have to worry about `overflow: hidden` or `z-index`, but the item won't retain\n * its inherited styles.\n * - `parent` - Preview will be inserted into the parent of the drag item. The advantage is that\n * inherited styles will be preserved, but it may be clipped by `overflow: hidden` or not be\n * visible due to `z-index`. Furthermore, the preview is going to have an effect over selectors\n * like `:nth-child` and some flexbox configurations.\n * - `ElementRef<HTMLElement> | HTMLElement` - Preview will be inserted into a specific element.\n * Same advantages and disadvantages as `parent`.\n */\nexport type PreviewContainer = 'global' | 'parent' | ElementRef<HTMLElement> | HTMLElement;\n\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nexport class DragRef<T = any> {\n  private _rootElementCleanups: (() => void)[] | undefined;\n  private _cleanupShadowRootSelectStart: (() => void) | undefined;\n\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: PreviewRef | null;\n\n  /** Container into which to insert the preview. */\n  private _previewContainer: PreviewContainer | undefined;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Anchor node used to save the place in the DOM where the element was\n   * picked up so that it can be restored at the end of the drag sequence.\n   */\n  private _anchor: Comment;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  private _hasStartedDragging = signal(false);\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the DragRef resided when dragging began. */\n  private _initialContainer: DropListRef;\n\n  /** Index at which the item started in its initial container. */\n  private _initialIndex: number;\n\n  /** Cached positions of scrollable parent elements. */\n  private _parentPositions: ParentPositionTracker;\n\n  /** Emits when the item is being moved. */\n  private readonly _moveEvents = new Subject<{\n    source: DragRef;\n    pointerPosition: {x: number; y: number};\n    event: MouseEvent | TouchEvent;\n    distance: Point;\n    delta: {x: -1 | 0 | 1; y: -1 | 0 | 1};\n  }>();\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1; y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /** Position of the pointer at the last pointer event. */\n  private _lastKnownPointerPosition: Point;\n\n  /**\n   * Root DOM node of the drag instance. This is the element that will\n   * be moved around as the user is dragging.\n   */\n  private _rootElement: HTMLElement;\n\n  /**\n   * Nearest ancestor SVG, relative to which coordinates are calculated if dragging SVGElement\n   */\n  private _ownerSVGElement: SVGSVGElement | null;\n\n  /**\n   * Inline style value of `-webkit-tap-highlight-color` at the time the\n   * dragging was started. Used to restore the value once we're done dragging.\n   */\n  private _rootElementTapHighlight: string;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /** Subscription to the viewport being scrolled. */\n  private _scrollSubscription = Subscription.EMPTY;\n\n  /** Subscription to the viewport being resized. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /**\n   * Time at which the last touch event occurred. Used to avoid firing the same\n   * events multiple times on touch devices where the browser will fire a fake\n   * mouse event for each touch event, after a certain time.\n   */\n  private _lastTouchEventTime: number;\n\n  /** Time at which the last dragging sequence was started. */\n  private _dragStartTime: number;\n\n  /** Cached reference to the boundary element. */\n  private _boundaryElement: HTMLElement | null = null;\n\n  /** Whether the native dragging interactions have been enabled on the root element. */\n  private _nativeInteractionsEnabled = true;\n\n  /** Client rect of the root element when the dragging sequence has started. */\n  private _initialDomRect?: DOMRect;\n\n  /** Cached dimensions of the preview element. Should be read via `_getPreviewRect`. */\n  private _previewRect?: DOMRect;\n\n  /** Cached dimensions of the boundary element. */\n  private _boundaryRect?: DOMRect;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  private _previewTemplate?: DragPreviewTemplate | null;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  private _placeholderTemplate?: DragHelperTemplate | null;\n\n  /** Elements that can be used to drag the draggable item. */\n  private _handles: HTMLElement[] = [];\n\n  /** Registered handles that are currently disabled. */\n  private _disabledHandles = new Set<HTMLElement>();\n\n  /** Droppable container that the draggable is a part of. */\n  private _dropContainer?: DropListRef;\n\n  /** Layout direction of the item. */\n  private _direction: Direction = 'ltr';\n\n  /** Ref that the current drag item is nested in. */\n  private _parentDragRef: DragRef<unknown> | null;\n\n  /**\n   * Cached shadow root that the element is placed in. `null` means that the element isn't in\n   * the shadow DOM and `undefined` means that it hasn't been resolved yet. Should be read via\n   * `_getShadowRoot`, not directly.\n   */\n  private _cachedShadowRoot: ShadowRoot | null | undefined;\n\n  /** Axis along which dragging is locked. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  dragStartDelay: number | {touch: number; mouse: number} = 0;\n\n  /** Class to be added to the preview element. */\n  previewClass: string | string[] | undefined;\n\n  /**\n   * If the parent of the dragged element has a `scale` transform, it can throw off the\n   * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n   */\n  scale: number = 1;\n\n  /** Whether starting to drag this element is disabled. */\n  get disabled(): boolean {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    if (value !== this._disabled) {\n      this._disabled = value;\n      this._toggleNativeDragInteractions();\n      this._handles.forEach(handle => toggleNativeDragInteractions(handle, value));\n    }\n  }\n  private _disabled = false;\n\n  /** Emits as the drag sequence is being prepared. */\n  readonly beforeStarted = new Subject<void>();\n\n  /** Emits when the user starts dragging the item. */\n  readonly started = new Subject<{source: DragRef; event: MouseEvent | TouchEvent}>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  readonly released = new Subject<{source: DragRef; event: MouseEvent | TouchEvent}>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  readonly ended = new Subject<{\n    source: DragRef;\n    distance: Point;\n    dropPoint: Point;\n    event: MouseEvent | TouchEvent;\n  }>();\n\n  /** Emits when the user has moved the item into a new container. */\n  readonly entered = new Subject<{container: DropListRef; item: DragRef; currentIndex: number}>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  readonly exited = new Subject<{container: DropListRef; item: DragRef}>();\n\n  /** Emits when the user drops the item inside a container. */\n  readonly dropped = new Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    item: DragRef;\n    container: DropListRef;\n    previousContainer: DropListRef;\n    distance: Point;\n    dropPoint: Point;\n    isPointerOverContainer: boolean;\n    event: MouseEvent | TouchEvent;\n  }>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  readonly moved: Observable<{\n    source: DragRef;\n    pointerPosition: {x: number; y: number};\n    event: MouseEvent | TouchEvent;\n    distance: Point;\n    delta: {x: -1 | 0 | 1; y: -1 | 0 | 1};\n  }> = this._moveEvents;\n\n  /** Arbitrary data that can be attached to the drag item. */\n  data: T;\n\n  /**\n   * Function that can be used to customize the logic of how the position of the drag item\n   * is limited while it's being dragged. Gets called with a point containing the current position\n   * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n   * Should return a point describing where the item should be rendered.\n   */\n  constrainPosition?: (\n    userPointerPosition: Point,\n    dragRef: DragRef,\n    dimensions: DOMRect,\n    pickupPositionInElement: Point,\n  ) => Point;\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _config: DragRefConfig,\n    private _document: Document,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry,\n    private _renderer: Renderer2,\n  ) {\n    this.withRootElement(element).withParent(_config.parentDragRef || null);\n    this._parentPositions = new ParentPositionTracker(_document);\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /**\n   * Gets the currently-visible element that represents the drag item.\n   * While dragging this is the placeholder, otherwise it's the root element.\n   */\n  getVisibleElement(): HTMLElement {\n    return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n  }\n\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles: (HTMLElement | ElementRef<HTMLElement>)[]): this {\n    this._handles = handles.map(handle => coerceElement(handle));\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n    this._toggleNativeDragInteractions();\n\n    // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n    // the set, rather than iterate over it and filter out the destroyed handles, because while\n    // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n    // use an array internally which may throw an error.\n    const disabledHandles = new Set<HTMLElement>();\n    this._disabledHandles.forEach(handle => {\n      if (this._handles.indexOf(handle) > -1) {\n        disabledHandles.add(handle);\n      }\n    });\n    this._disabledHandles = disabledHandles;\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   */\n  withPreviewTemplate(template: DragPreviewTemplate | null): this {\n    this._previewTemplate = template;\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   */\n  withPlaceholderTemplate(template: DragHelperTemplate | null): this {\n    this._placeholderTemplate = template;\n    return this;\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    const element = coerceElement(rootElement);\n\n    if (element !== this._rootElement) {\n      this._removeRootElementListeners();\n      this._rootElementCleanups = this._ngZone.runOutsideAngular(() => [\n        _bindEventWithOptions(\n          this._renderer,\n          element,\n          'mousedown',\n          this._pointerDown,\n          activeEventListenerOptions,\n        ),\n        _bindEventWithOptions(\n          this._renderer,\n          element,\n          'touchstart',\n          this._pointerDown,\n          passiveEventListenerOptions,\n        ),\n        _bindEventWithOptions(\n          this._renderer,\n          element,\n          'dragstart',\n          this._nativeDragStart,\n          activeEventListenerOptions,\n        ),\n      ]);\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n\n    if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n      this._ownerSVGElement = this._rootElement.ownerSVGElement;\n    }\n\n    return this;\n  }\n\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n    this._resizeSubscription.unsubscribe();\n    if (boundaryElement) {\n      this._resizeSubscription = this._viewportRuler\n        .change(10)\n        .subscribe(() => this._containInsideBoundaryOnResize());\n    }\n    return this;\n  }\n\n  /** Sets the parent ref that the ref is nested in.  */\n  withParent(parent: DragRef<unknown> | null): this {\n    this._parentDragRef = parent;\n    return this;\n  }\n\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners();\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      this._rootElement?.remove();\n    }\n\n    this._anchor?.remove();\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeListeners();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._disabledHandles.clear();\n    this._dropContainer = undefined;\n    this._resizeSubscription.unsubscribe();\n    this._parentPositions.clear();\n    this._boundaryElement =\n      this._rootElement =\n      this._ownerSVGElement =\n      this._placeholderTemplate =\n      this._previewTemplate =\n      this._anchor =\n      this._parentDragRef =\n        null!;\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  isDragging(): boolean {\n    return this._hasStartedDragging() && this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform = {x: 0, y: 0};\n  }\n\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n  disableHandle(handle: HTMLElement) {\n    if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n      toggleNativeDragInteractions(handle, true);\n    }\n  }\n\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n  enableHandle(handle: HTMLElement) {\n    if (this._disabledHandles.has(handle)) {\n      this._disabledHandles.delete(handle);\n      toggleNativeDragInteractions(handle, this.disabled);\n    }\n  }\n\n  /** Sets the layout direction of the draggable item. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /** Sets the container that the item is part of. */\n  _withDropContainer(container: DropListRef) {\n    this._dropContainer = container;\n  }\n\n  /**\n   * Gets the current position in pixels the draggable outside of a drop container.\n   */\n  getFreeDragPosition(): Readonly<Point> {\n    const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n    return {x: position.x, y: position.y};\n  }\n\n  /**\n   * Sets the current position in pixels the draggable outside of a drop container.\n   * @param value New position to be set.\n   */\n  setFreeDragPosition(value: Point): this {\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform.x = value.x;\n    this._passiveTransform.y = value.y;\n\n    if (!this._dropContainer) {\n      this._applyRootElementTransform(value.x, value.y);\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the container into which to insert the preview element.\n   * @param value Container into which to insert the preview.\n   */\n  withPreviewContainer(value: PreviewContainer): this {\n    this._previewContainer = value;\n    return this;\n  }\n\n  /** Updates the item's sort order based on the last-known pointer position. */\n  _sortFromLastPointerPosition() {\n    const position = this._lastKnownPointerPosition;\n\n    if (position && this._dropContainer) {\n      this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n    }\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeListeners() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n    this._scrollSubscription.unsubscribe();\n    this._cleanupShadowRootSelectStart?.();\n    this._cleanupShadowRootSelectStart = undefined;\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    this._preview?.destroy();\n    this._preview = null;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    this._placeholder?.remove();\n    this._placeholderRef?.destroy();\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this.beforeStarted.next();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._getTargetHandle(event);\n\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n        this._initializeDragSequence(targetHandle, event);\n      }\n    } else if (!this.disabled) {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  };\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    const pointerPosition = this._getPointerPositionOnPage(event);\n\n    if (!this._hasStartedDragging()) {\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n      const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (isOverThreshold) {\n        const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n        const container = this._dropContainer;\n\n        if (!isDelayElapsed) {\n          this._endDragSequence(event);\n          return;\n        }\n\n        // Prevent other drag sequences from starting while something in the container is still\n        // being dragged. This can happen while we're waiting for the drop animation to finish\n        // and can cause errors, because some elements might still be moving around.\n        if (!container || (!container.isDragging() && !container.isReceiving())) {\n          // Prevent the default action as soon as the dragging sequence is considered as\n          // \"started\" since waiting for the next event can allow the device to begin scrolling.\n          if (event.cancelable) {\n            event.preventDefault();\n          }\n          this._hasStartedDragging.set(true);\n          this._ngZone.run(() => this._startDragSequence(event));\n        }\n      }\n\n      return;\n    }\n\n    // We prevent the default action down here so that we know that dragging has started. This is\n    // important for touch devices where doing this too early can unnecessarily block scrolling,\n    // if there's a dragging delay.\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n    this._hasMoved = true;\n    this._lastKnownPointerPosition = pointerPosition;\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n    if (this._dropContainer) {\n      this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n    } else {\n      // If there's a position constraint function, we want the element's top/left to be at the\n      // specific position on the page. Use the initial position as a reference if that's the case.\n      const offset = this.constrainPosition ? this._initialDomRect! : this._pickupPositionOnPage;\n      const activeTransform = this._activeTransform;\n      activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n      activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n      this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEvents.observers.length) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition: constrainedPointerPosition,\n          event,\n          distance: this._getDragDistance(constrainedPointerPosition),\n          delta: this._pointerDirectionDelta,\n        });\n      });\n    }\n  };\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\n    this._endDragSequence(event);\n  };\n\n  /**\n   * Clears subscriptions and stops the dragging sequence.\n   * @param event Browser event object that ended the sequence.\n   */\n  private _endDragSequence(event: MouseEvent | TouchEvent) {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._removeListeners();\n    this._dragDropRegistry.stopDragging(this);\n    this._toggleNativeDragInteractions();\n\n    if (this._handles) {\n      (this._rootElement.style as DragCSSStyleDeclaration).webkitTapHighlightColor =\n        this._rootElementTapHighlight;\n    }\n\n    if (!this._hasStartedDragging()) {\n      return;\n    }\n\n    this.released.next({source: this, event});\n\n    if (this._dropContainer) {\n      // Stop scrolling immediately, instead of waiting for the animation to finish.\n      this._dropContainer._stopScrolling();\n      this._animatePreviewToPlaceholder().then(() => {\n        this._cleanupDragArtifacts(event);\n        this._cleanupCachedDimensions();\n        this._dragDropRegistry.stopDragging(this);\n      });\n    } else {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => {\n        this.ended.next({\n          source: this,\n          distance: this._getDragDistance(pointerPosition),\n          dropPoint: pointerPosition,\n          event,\n        });\n      });\n      this._cleanupCachedDimensions();\n      this._dragDropRegistry.stopDragging(this);\n    }\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    this._toggleNativeDragInteractions();\n\n    // Needs to happen before the root element is moved.\n    const shadowRoot = this._getShadowRoot();\n    const dropContainer = this._dropContainer;\n\n    if (shadowRoot) {\n      // In some browsers the global `selectstart` that we maintain in the `DragDropRegistry`\n      // doesn't cross the shadow boundary so we have to prevent it at the shadow root (see #28792).\n      this._ngZone.runOutsideAngular(() => {\n        this._cleanupShadowRootSelectStart = _bindEventWithOptions(\n          this._renderer,\n          shadowRoot,\n          'selectstart',\n          shadowDomSelectStart,\n          activeCapturingEventOptions,\n        );\n      });\n    }\n\n    if (dropContainer) {\n      const element = this._rootElement;\n      const parent = element.parentNode as HTMLElement;\n      const placeholder = (this._placeholder = this._createPlaceholderElement());\n      const anchor = (this._anchor =\n        this._anchor ||\n        this._document.createComment(\n          typeof ngDevMode === 'undefined' || ngDevMode ? 'cdk-drag-anchor' : '',\n        ));\n\n      // Insert an anchor node so that we can restore the element's position in the DOM.\n      parent.insertBefore(anchor, element);\n\n      // There's no risk of transforms stacking when inside a drop container so\n      // we can keep the initial transform up to date any time dragging starts.\n      this._initialTransform = element.style.transform || '';\n\n      // Create the preview after the initial transform has\n      // been cached, because it can be affected by the transform.\n      this._preview = new PreviewRef(\n        this._document,\n        this._rootElement,\n        this._direction,\n        this._initialDomRect!,\n        this._previewTemplate || null,\n        this.previewClass || null,\n        this._pickupPositionOnPage,\n        this._initialTransform,\n        this._config.zIndex || 1000,\n        this._renderer,\n      );\n      this._preview.attach(this._getPreviewInsertionPoint(parent, shadowRoot));\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      toggleVisibility(element, false, dragImportantProperties);\n      this._document.body.appendChild(parent.replaceChild(placeholder, element));\n      this.started.next({source: this, event}); // Emit before notifying the container.\n      dropContainer.start();\n      this._initialContainer = dropContainer;\n      this._initialIndex = dropContainer.getItemIndex(this);\n    } else {\n      this.started.next({source: this, event});\n      this._initialContainer = this._initialIndex = undefined!;\n    }\n\n    // Important to run after we've called `start` on the parent container\n    // so that it has had time to resolve its scrollable parents.\n    this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Stop propagation if the item is inside another\n    // draggable so we don't start multiple drag sequences.\n    if (this._parentDragRef) {\n      event.stopPropagation();\n    }\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\n    const rootElement = this._rootElement;\n    const target = _getEventTarget(event);\n    const isSyntheticEvent =\n      !isTouchSequence &&\n      this._lastTouchEventTime &&\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n    const isFakeEvent = isTouchSequence\n      ? isFakeTouchstartFromScreenReader(event as TouchEvent)\n      : isFakeMousedownFromScreenReader(event as MouseEvent);\n\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (target && (target as HTMLElement).draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n      return;\n    }\n\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n    if (this._handles.length) {\n      const rootStyles = rootElement.style as DragCSSStyleDeclaration;\n      this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n      rootStyles.webkitTapHighlightColor = 'transparent';\n    }\n\n    this._hasMoved = false;\n    this._hasStartedDragging.set(this._hasMoved);\n\n    // Avoid multiple subscriptions and memory leaks when multi touch\n    // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n    this._removeListeners();\n    this._initialDomRect = this._rootElement.getBoundingClientRect();\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollSubscription = this._dragDropRegistry\n      .scrolled(this._getShadowRoot())\n      .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n\n    if (this._boundaryElement) {\n      this._boundaryRect = getMutableClientRect(this._boundaryElement);\n    }\n\n    // If we have a custom preview we can't know ahead of time how large it'll be so we position\n    // it next to the cursor. The exception is when the consumer has opted into making the preview\n    // the same size as the root element, in which case we do know the size.\n    const previewTemplate = this._previewTemplate;\n    this._pickupPositionInElement =\n      previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n        ? {x: 0, y: 0}\n        : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);\n    const pointerPosition =\n      (this._pickupPositionOnPage =\n      this._lastKnownPointerPosition =\n        this._getPointerPositionOnPage(event));\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragStartTime = Date.now();\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    toggleVisibility(this._rootElement, true, dragImportantProperties);\n    this._anchor.parentNode!.replaceChild(this._rootElement, this._anchor);\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._initialDomRect =\n      this._boundaryRect =\n      this._previewRect =\n      this._initialTransform =\n        undefined;\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this._dropContainer!;\n      const currentIndex = container.getItemIndex(this);\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distance = this._getDragDistance(pointerPosition);\n      const isPointerOverContainer = container._isOverContainer(\n        pointerPosition.x,\n        pointerPosition.y,\n      );\n\n      this.ended.next({source: this, distance, dropPoint: pointerPosition, event});\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialIndex,\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer,\n        distance,\n        dropPoint: pointerPosition,\n        event,\n      });\n      container.drop(\n        this,\n        currentIndex,\n        this._initialIndex,\n        this._initialContainer,\n        isPointerOverContainer,\n        distance,\n        pointerPosition,\n        event,\n      );\n      this._dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point, {x: rawX, y: rawY}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left its\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (\n      !newContainer &&\n      this._dropContainer !== this._initialContainer &&\n      this._initialContainer._isOverContainer(x, y)\n    ) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({item: this, container: this._dropContainer!});\n        this._dropContainer!.exit(this);\n        // Notify the new container that the item has entered.\n        this._dropContainer = newContainer!;\n        this._dropContainer.enter(\n          this,\n          x,\n          y,\n          newContainer === this._initialContainer &&\n            // If we're re-entering the initial container and sorting is disabled,\n            // put item the into its starting index to begin with.\n            newContainer.sortingDisabled\n            ? this._initialIndex\n            : undefined,\n        );\n        this.entered.next({\n          item: this,\n          container: newContainer!,\n          currentIndex: newContainer!.getItemIndex(this),\n        });\n      });\n    }\n\n    // Dragging may have been interrupted as a result of the events above.\n    if (this.isDragging()) {\n      this._dropContainer!._startScrollingIfNecessary(rawX, rawY);\n      this._dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\n\n      if (this.constrainPosition) {\n        this._applyPreviewTransform(x, y);\n      } else {\n        this._applyPreviewTransform(\n          x - this._pickupPositionInElement.x,\n          y - this._pickupPositionInElement.y,\n        );\n      }\n    }\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview!.addClass('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = this._preview!.getTransitionDuration();\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = (event: TransitionEvent) => {\n          if (\n            !event ||\n            (this._preview &&\n              _getEventTarget(event) === this._preview.element &&\n              event.propertyName === 'transform')\n          ) {\n            cleanupListener();\n            resolve();\n            clearTimeout(timeout);\n          }\n        };\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        const cleanupListener = this._preview!.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder: HTMLElement;\n\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig!.viewContainer.createEmbeddedView(\n        placeholderTemplate,\n        placeholderConfig!.context,\n      );\n      this._placeholderRef.detectChanges();\n      placeholder = getRootNode(this._placeholderRef, this._document);\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    // Stop pointer events on the preview so the user can't\n    // interact with it while the preview is animating.\n    placeholder.style.pointerEvents = 'none';\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(\n    elementRect: DOMRect,\n    referenceElement: HTMLElement,\n    event: MouseEvent | TouchEvent,\n  ): Point {\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const scrollPosition = this._getViewportScrollPosition();\n    const x = point.pageX - referenceRect.left - scrollPosition.left;\n    const y = point.pageY - referenceRect.top - scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y,\n    };\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    const scrollPosition = this._getViewportScrollPosition();\n    const point = isTouchEvent(event)\n      ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n        // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n        // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n        // throwing an error. The value returned here will be incorrect, but since this only\n        // breaks inside a developer tool and the value is only used for secondary information,\n        // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n        event.touches[0] || event.changedTouches[0] || {pageX: 0, pageY: 0}\n      : event;\n\n    const x = point.pageX - scrollPosition.left;\n    const y = point.pageY - scrollPosition.top;\n\n    // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n    // coordinate system\n    if (this._ownerSVGElement) {\n      const svgMatrix = this._ownerSVGElement.getScreenCTM();\n      if (svgMatrix) {\n        const svgPoint = this._ownerSVGElement.createSVGPoint();\n        svgPoint.x = x;\n        svgPoint.y = y;\n        return svgPoint.matrixTransform(svgMatrix.inverse());\n      }\n    }\n\n    return {x, y};\n  }\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(point: Point): Point {\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n    let {x, y} = this.constrainPosition\n      ? this.constrainPosition(point, this, this._initialDomRect!, this._pickupPositionInElement)\n      : point;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      y =\n        this._pickupPositionOnPage.y -\n        (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      x =\n        this._pickupPositionOnPage.x -\n        (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n    }\n\n    if (this._boundaryRect) {\n      // If not using a custom constrain we need to account for the pickup position in the element\n      // otherwise we do not need to do this, as it has already been accounted for\n      const {x: pickupX, y: pickupY} = !this.constrainPosition\n        ? this._pickupPositionInElement\n        : {x: 0, y: 0};\n\n      const boundaryRect = this._boundaryRect;\n      const {width: previewWidth, height: previewHeight} = this._getPreviewRect();\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewWidth - pickupX);\n\n      x = clamp(x, minX, maxX);\n      y = clamp(y, minY, maxY);\n    }\n\n    return {x, y};\n  }\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  private _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n\n    const shouldEnable = this._handles.length > 0 || !this.isDragging();\n\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n\n  /** Removes the manually-added event listeners from the root element. */\n  private _removeRootElementListeners() {\n    this._rootElementCleanups?.forEach(cleanup => cleanup());\n    this._rootElementCleanups = undefined;\n  }\n\n  /**\n   * Applies a `transform` to the root element, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n  private _applyRootElementTransform(x: number, y: number) {\n    const scale = 1 / this.scale;\n    const transform = getTransform(x * scale, y * scale);\n    const styles = this._rootElement.style;\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    // Should be excluded none because none + translate3d(x, y, x) is invalid css\n    if (this._initialTransform == null) {\n      this._initialTransform =\n        styles.transform && styles.transform != 'none' ? styles.transform : '';\n    }\n\n    // Preserve the previous `transform` value, if there was one. Note that we apply our own\n    // transform before the user's, because things like rotation can affect which direction\n    // the element will be translated towards.\n    styles.transform = combineTransforms(transform, this._initialTransform);\n  }\n\n  /**\n   * Applies a `transform` to the preview, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n  private _applyPreviewTransform(x: number, y: number) {\n    // Only apply the initial transform if the preview is a clone of the original element, otherwise\n    // it could be completely different and the transform might not make sense anymore.\n    const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n    const transform = getTransform(x, y);\n    this._preview!.setTransform(combineTransforms(transform, initialTransform));\n  }\n\n  /**\n   * Gets the distance that the user has dragged during the current drag sequence.\n   * @param currentPosition Current position of the user's pointer.\n   */\n  private _getDragDistance(currentPosition: Point): Point {\n    const pickupPosition = this._pickupPositionOnPage;\n\n    if (pickupPosition) {\n      return {x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y};\n    }\n\n    return {x: 0, y: 0};\n  }\n\n  /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n  private _cleanupCachedDimensions() {\n    this._boundaryRect = this._previewRect = undefined;\n    this._parentPositions.clear();\n  }\n\n  /**\n   * Checks whether the element is still inside its boundary after the viewport has been resized.\n   * If not, the position is adjusted so that the element fits again.\n   */\n  private _containInsideBoundaryOnResize() {\n    let {x, y} = this._passiveTransform;\n\n    if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n      return;\n    }\n\n    // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const boundaryRect = this._boundaryElement.getBoundingClientRect();\n\n    // It's possible that the element got hidden away after dragging (e.g. by switching to a\n    // different tab). Don't do anything in this case so we don't clear the user's position.\n    if (\n      (boundaryRect.width === 0 && boundaryRect.height === 0) ||\n      (elementRect.width === 0 && elementRect.height === 0)\n    ) {\n      return;\n    }\n\n    const leftOverflow = boundaryRect.left - elementRect.left;\n    const rightOverflow = elementRect.right - boundaryRect.right;\n    const topOverflow = boundaryRect.top - elementRect.top;\n    const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n\n    // If the element has become wider than the boundary, we can't\n    // do much to make it fit so we just anchor it to the left.\n    if (boundaryRect.width > elementRect.width) {\n      if (leftOverflow > 0) {\n        x += leftOverflow;\n      }\n\n      if (rightOverflow > 0) {\n        x -= rightOverflow;\n      }\n    } else {\n      x = 0;\n    }\n\n    // If the element has become taller than the boundary, we can't\n    // do much to make it fit so we just anchor it to the top.\n    if (boundaryRect.height > elementRect.height) {\n      if (topOverflow > 0) {\n        y += topOverflow;\n      }\n\n      if (bottomOverflow > 0) {\n        y -= bottomOverflow;\n      }\n    } else {\n      y = 0;\n    }\n\n    if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n      this.setFreeDragPosition({y, x});\n    }\n  }\n\n  /** Gets the drag start delay, based on the event type. */\n  private _getDragStartDelay(event: MouseEvent | TouchEvent): number {\n    const value = this.dragStartDelay;\n\n    if (typeof value === 'number') {\n      return value;\n    } else if (isTouchEvent(event)) {\n      return value.touch;\n    }\n\n    return value ? value.mouse : 0;\n  }\n\n  /** Updates the internal state of the draggable element when scrolling has occurred. */\n  private _updateOnScroll(event: Event) {\n    const scrollDifference = this._parentPositions.handleScroll(event);\n\n    if (scrollDifference) {\n      const target = _getEventTarget<HTMLElement | Document>(event)!;\n\n      // DOMRect dimensions are based on the scroll position of the page and its parent\n      // node so we have to update the cached boundary DOMRect if the user has scrolled.\n      if (\n        this._boundaryRect &&\n        target !== this._boundaryElement &&\n        target.contains(this._boundaryElement)\n      ) {\n        adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n      }\n\n      this._pickupPositionOnPage.x += scrollDifference.left;\n      this._pickupPositionOnPage.y += scrollDifference.top;\n\n      // If we're in free drag mode, we have to update the active transform, because\n      // it isn't relative to the viewport like the preview inside a drop list.\n      if (!this._dropContainer) {\n        this._activeTransform.x -= scrollDifference.left;\n        this._activeTransform.y -= scrollDifference.top;\n        this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n      }\n    }\n  }\n\n  /** Gets the scroll position of the viewport. */\n  private _getViewportScrollPosition() {\n    return (\n      this._parentPositions.positions.get(this._document)?.scrollPosition ||\n      this._parentPositions.getViewportScrollPosition()\n    );\n  }\n\n  /**\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n   * than saving it in property directly on init, because we want to resolve it as late as possible\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n   */\n  private _getShadowRoot(): ShadowRoot | null {\n    if (this._cachedShadowRoot === undefined) {\n      this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n    }\n\n    return this._cachedShadowRoot;\n  }\n\n  /** Gets the element into which the drag preview should be inserted. */\n  private _getPreviewInsertionPoint(\n    initialParent: HTMLElement,\n    shadowRoot: ShadowRoot | null,\n  ): HTMLElement {\n    const previewContainer = this._previewContainer || 'global';\n\n    if (previewContainer === 'parent') {\n      return initialParent;\n    }\n\n    if (previewContainer === 'global') {\n      const documentRef = this._document;\n\n      // We can't use the body if the user is in fullscreen mode,\n      // because the preview will render under the fullscreen element.\n      // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n      return (\n        shadowRoot ||\n        documentRef.fullscreenElement ||\n        (documentRef as any).webkitFullscreenElement ||\n        (documentRef as any).mozFullScreenElement ||\n        (documentRef as any).msFullscreenElement ||\n        documentRef.body\n      );\n    }\n\n    return coerceElement(previewContainer);\n  }\n\n  /** Lazily resolves and returns the dimensions of the preview. */\n  private _getPreviewRect(): DOMRect {\n    // Cache the preview element rect if we haven't cached it already or if\n    // we cached it too early before the element dimensions were computed.\n    if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n      this._previewRect = this._preview\n        ? this._preview!.getBoundingClientRect()\n        : this._initialDomRect!;\n    }\n\n    return this._previewRect;\n  }\n\n  /** Handles a native `dragstart` event. */\n  private _nativeDragStart = (event: DragEvent) => {\n    if (this._handles.length) {\n      const targetHandle = this._getTargetHandle(event);\n\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n        event.preventDefault();\n      }\n    } else if (!this.disabled) {\n      // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n      // but some cases like dragging of links can slip through (see #24403).\n      event.preventDefault();\n    }\n  };\n\n  /** Gets a handle that is the target of an event. */\n  private _getTargetHandle(event: Event): HTMLElement | undefined {\n    return this._handles.find(handle => {\n      return event.target && (event.target === handle || handle.contains(event.target as Node));\n    });\n  }\n}\n\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n\n/** Callback invoked for `selectstart` events inside the shadow DOM. */\nfunction shadowDomSelectStart(event: Event) {\n  event.preventDefault();\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(\n  currentArray: T[],\n  targetArray: T[],\n  currentIndex: number,\n  targetIndex: number,\n): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(\n  currentArray: T[],\n  targetArray: T[],\n  currentIndex: number,\n  targetIndex: number,\n): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Direction} from '../../bidi';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {moveItemInArray} from '../drag-utils';\nimport {combineTransforms} from '../dom/styling';\nimport {adjustDomRect, getMutableClientRect, isInsideClientRect} from '../dom/dom-rect';\nimport {DropListSortStrategy, SortPredicate} from './drop-list-sort-strategy';\nimport type {DragRef} from '../drag-ref';\n\n/**\n * Entry in the position cache for draggable items.\n * @docs-private\n */\ninterface CachedItemPosition<T> {\n  /** Instance of the drag item. */\n  drag: T;\n  /** Dimensions of the item. */\n  clientRect: DOMRect;\n  /** Amount by which the item has been moved since dragging started. */\n  offset: number;\n  /** Inline transform that the drag item had when dragging started. */\n  initialTransform: string;\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nexport class SingleAxisSortStrategy implements DropListSortStrategy {\n  /** Root element container of the drop list. */\n  private _element: HTMLElement;\n\n  /** Function used to determine if an item can be sorted into a specific index. */\n  private _sortPredicate: SortPredicate<DragRef>;\n\n  /** Cache of the dimensions of all the items inside the container. */\n  private _itemPositions: CachedItemPosition<DragRef>[] = [];\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * that were there at the start of the sequence, as well as any items that have been dragged\n   * in, but haven't been dropped yet.\n   */\n  private _activeDraggables: DragRef[];\n\n  /** Direction in which the list is oriented. */\n  orientation: 'vertical' | 'horizontal' = 'vertical';\n\n  /** Layout direction of the drop list. */\n  direction: Direction;\n\n  constructor(private _dragDropRegistry: DragDropRegistry) {}\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n   * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n   * overlap with the swapped item after the swapping occurred.\n   */\n  private _previousSwap = {\n    drag: null as DragRef | null,\n    delta: 0,\n    overlaps: false,\n  };\n\n  /**\n   * To be called when the drag sequence starts.\n   * @param items Items that are currently in the list.\n   */\n  start(items: readonly DragRef[]) {\n    this.withItems(items);\n  }\n\n  /**\n   * To be called when an item is being sorted.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  sort(item: DragRef, pointerX: number, pointerY: number, pointerDelta: {x: number; y: number}) {\n    const siblings = this._itemPositions;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return null;\n    }\n\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem\n        ? item.getPlaceholderElement()\n        : sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      const transformAmount = Math.round(sibling.offset * (1 / sibling.drag.scale));\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = combineTransforms(\n          `translate3d(${transformAmount}px, 0, 0)`,\n          sibling.initialTransform,\n        );\n        adjustDomRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = combineTransforms(\n          `translate3d(0, ${transformAmount}px, 0)`,\n          sibling.initialTransform,\n        );\n        adjustDomRect(sibling.clientRect, offset, 0);\n      }\n    });\n\n    // Note that it's important that we do this after the client rects have been adjusted.\n    this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    return {previousIndex: currentIndex, currentIndex: newIndex};\n  }\n\n  /**\n   * Called when an item is being moved into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\n   *   out automatically.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number, index?: number): void {\n    const newIndex =\n      index == null || index < 0\n        ? // We use the coordinates of where the item entered the drop\n          // zone to figure out at which index it should be inserted.\n          this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n        : index;\n\n    const activeDraggables = this._activeDraggables;\n    const currentIndex = activeDraggables.indexOf(item);\n    const placeholder = item.getPlaceholderElement();\n    let newPositionReference: DragRef | undefined = activeDraggables[newIndex];\n\n    // If the item at the new position is the same as the item that is being dragged,\n    // it means that we're trying to restore the item to its initial position. In this\n    // case we should use the next item from the list as the reference.\n    if (newPositionReference === item) {\n      newPositionReference = activeDraggables[newIndex + 1];\n    }\n\n    // If we didn't find a new position reference, it means that either the item didn't start off\n    // in this container, or that the item requested to be inserted at the end of the list.\n    if (\n      !newPositionReference &&\n      (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n      this._shouldEnterAsFirstChild(pointerX, pointerY)\n    ) {\n      newPositionReference = activeDraggables[0];\n    }\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this._element.appendChild(placeholder);\n      activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that usually `start` is called together with `enter` when an item goes into a new\n    // container. This will cache item positions, but we need to refresh them since the amount\n    // of items has changed.\n    this._cacheItemPositions();\n  }\n\n  /** Sets the items that are currently part of the list. */\n  withItems(items: readonly DragRef[]): void {\n    this._activeDraggables = items.slice();\n    this._cacheItemPositions();\n  }\n\n  /** Assigns a sort predicate to the strategy. */\n  withSortPredicate(predicate: SortPredicate<DragRef>): void {\n    this._sortPredicate = predicate;\n  }\n\n  /** Resets the strategy to its initial state before dragging was started. */\n  reset() {\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables?.forEach(item => {\n      const rootElement = item.getRootElement();\n\n      if (rootElement) {\n        const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n        rootElement.style.transform = initialTransform || '';\n      }\n    });\n\n    this._itemPositions = [];\n    this._activeDraggables = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n    this._previousSwap.overlaps = false;\n  }\n\n  /**\n   * Gets a snapshot of items currently in the list.\n   * Can include items that we dragged in from another list.\n   */\n  getActiveItemsSnapshot(): readonly DragRef[] {\n    return this._activeDraggables;\n  }\n\n  /** Gets the index of a specific item. */\n  getItemIndex(item: DragRef): number {\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items =\n      this.orientation === 'horizontal' && this.direction === 'rtl'\n        ? this._itemPositions.slice().reverse()\n        : this._itemPositions;\n\n    return items.findIndex(currentItem => currentItem.drag === item);\n  }\n\n  /** Used to notify the strategy that the scroll position has changed. */\n  updateOnScroll(topDifference: number, leftDifference: number) {\n    // Since we know the amount that the user has scrolled we can shift all of the\n    // client rectangles ourselves. This is cheaper than re-measuring everything and\n    // we can avoid inconsistent behavior where we might be measuring the element before\n    // its position has changed.\n    this._itemPositions.forEach(({clientRect}) => {\n      adjustDomRect(clientRect, topDifference, leftDifference);\n    });\n\n    // We need two loops for this, because we want all of the cached\n    // positions to be up-to-date before we re-sort the item.\n    this._itemPositions.forEach(({drag}) => {\n      if (this._dragDropRegistry.isDragging(drag)) {\n        // We need to re-sort the item manually, because the pointer move\n        // events won't be dispatched while the user is scrolling.\n        drag._sortFromLastPointerPosition();\n      }\n    });\n  }\n\n  withElementContainer(container: HTMLElement): void {\n    this._element = container;\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cacheItemPositions() {\n    const isHorizontal = this.orientation === 'horizontal';\n\n    this._itemPositions = this._activeDraggables\n      .map(drag => {\n        const elementToMeasure = drag.getVisibleElement();\n        return {\n          drag,\n          offset: 0,\n          initialTransform: elementToMeasure.style.transform || '',\n          clientRect: getMutableClientRect(elementToMeasure),\n        };\n      })\n      .sort((a, b) => {\n        return isHorizontal\n          ? a.clientRect.left - b.clientRect.left\n          : a.clientRect.top - b.clientRect.top;\n      });\n  }\n\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getItemOffsetPx(currentPosition: DOMRect, newPosition: DOMRect, delta: 1 | -1) {\n    const isHorizontal = this.orientation === 'horizontal';\n    let itemOffset = isHorizontal\n      ? newPosition.left - currentPosition.left\n      : newPosition.top - currentPosition.top;\n\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal\n        ? newPosition.width - currentPosition.width\n        : newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getSiblingOffsetPx(\n    currentIndex: number,\n    siblings: CachedItemPosition<DragRef>[],\n    delta: 1 | -1,\n  ) {\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n\n  /**\n   * Checks if pointer is entering in the first position\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   */\n  private _shouldEnterAsFirstChild(pointerX: number, pointerY: number) {\n    if (!this._activeDraggables.length) {\n      return false;\n    }\n\n    const itemPositions = this._itemPositions;\n    const isHorizontal = this.orientation === 'horizontal';\n\n    // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n    // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n    const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n    if (reversed) {\n      const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n      return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n    } else {\n      const firstItemRect = itemPositions[0].clientRect;\n      return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n    }\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(\n    item: DragRef,\n    pointerX: number,\n    pointerY: number,\n    delta?: {x: number; y: number},\n  ): number {\n    const isHorizontal = this.orientation === 'horizontal';\n    const index = this._itemPositions.findIndex(({drag, clientRect}) => {\n      // Skip the item itself.\n      if (drag === item) {\n        return false;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, their cursor hasn't left\n        // the item after we made the swap, and they didn't change the direction in which they're\n        // dragging, we don't consider it a direction swap.\n        if (\n          drag === this._previousSwap.drag &&\n          this._previousSwap.overlaps &&\n          direction === this._previousSwap.delta\n        ) {\n          return false;\n        }\n      }\n\n      return isHorizontal\n        ? // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n        : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n    });\n\n    return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {_getShadowRoot} from '../../platform';\nimport {moveItemInArray} from '../drag-utils';\nimport {DropListSortStrategy, SortPredicate} from './drop-list-sort-strategy';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport type {DragRef} from '../drag-ref';\n\n/**\n * Strategy that only supports sorting on a list that might wrap.\n * Items are reordered by moving their DOM nodes around.\n * @docs-private\n */\nexport class MixedSortStrategy implements DropListSortStrategy {\n  /** Root element container of the drop list. */\n  private _element: HTMLElement;\n\n  /** Function used to determine if an item can be sorted into a specific index. */\n  private _sortPredicate: SortPredicate<DragRef>;\n\n  /** Lazily-resolved root node containing the list. Use `_getRootNode` to read this. */\n  private _rootNode: DocumentOrShadowRoot | undefined;\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * that were there at the start of the sequence, as well as any items that have been dragged\n   * in, but haven't been dropped yet.\n   */\n  private _activeItems: DragRef[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n   * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n   * overlap with the swapped item after the swapping occurred.\n   */\n  private _previousSwap = {\n    drag: null as DragRef | null,\n    deltaX: 0,\n    deltaY: 0,\n    overlaps: false,\n  };\n\n  /**\n   * Keeps track of the relationship between a node and its next sibling. This information\n   * is used to restore the DOM to the order it was in before dragging started.\n   */\n  private _relatedNodes: [node: Node, nextSibling: Node | null][] = [];\n\n  constructor(\n    private _document: Document,\n    private _dragDropRegistry: DragDropRegistry,\n  ) {}\n\n  /**\n   * To be called when the drag sequence starts.\n   * @param items Items that are currently in the list.\n   */\n  start(items: readonly DragRef[]): void {\n    const childNodes = this._element.childNodes;\n    this._relatedNodes = [];\n\n    for (let i = 0; i < childNodes.length; i++) {\n      const node = childNodes[i];\n      this._relatedNodes.push([node, node.nextSibling]);\n    }\n\n    this.withItems(items);\n  }\n\n  /**\n   * To be called when an item is being sorted.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  sort(\n    item: DragRef,\n    pointerX: number,\n    pointerY: number,\n    pointerDelta: {x: number; y: number},\n  ): {previousIndex: number; currentIndex: number} | null {\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    const previousSwap = this._previousSwap;\n\n    if (newIndex === -1 || this._activeItems[newIndex] === item) {\n      return null;\n    }\n\n    const toSwapWith = this._activeItems[newIndex];\n\n    // Prevent too many swaps over the same item.\n    if (\n      previousSwap.drag === toSwapWith &&\n      previousSwap.overlaps &&\n      previousSwap.deltaX === pointerDelta.x &&\n      previousSwap.deltaY === pointerDelta.y\n    ) {\n      return null;\n    }\n\n    const previousIndex = this.getItemIndex(item);\n    const current = item.getPlaceholderElement();\n    const overlapElement = toSwapWith.getRootElement();\n\n    if (newIndex > previousIndex) {\n      overlapElement.after(current);\n    } else {\n      overlapElement.before(current);\n    }\n\n    moveItemInArray(this._activeItems, previousIndex, newIndex);\n\n    const newOverlapElement = this._getRootNode().elementFromPoint(pointerX, pointerY);\n    // Note: it's tempting to save the entire `pointerDelta` object here, however that'll\n    // break this functionality, because the same object is passed for all `sort` calls.\n    previousSwap.deltaX = pointerDelta.x;\n    previousSwap.deltaY = pointerDelta.y;\n    previousSwap.drag = toSwapWith;\n    previousSwap.overlaps =\n      overlapElement === newOverlapElement || overlapElement.contains(newOverlapElement);\n\n    return {\n      previousIndex,\n      currentIndex: newIndex,\n    };\n  }\n\n  /**\n   * Called when an item is being moved into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\n   *   out automatically.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number, index?: number): void {\n    let enterIndex =\n      index == null || index < 0\n        ? this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n        : index;\n\n    // In some cases (e.g. when the container has padding) we might not be able to figure\n    // out which item to insert the dragged item next to, because the pointer didn't overlap\n    // with anything. In that case we find the item that's closest to the pointer.\n    if (enterIndex === -1) {\n      enterIndex = this._getClosestItemIndexToPointer(item, pointerX, pointerY);\n    }\n\n    const targetItem = this._activeItems[enterIndex] as DragRef | undefined;\n    const currentIndex = this._activeItems.indexOf(item);\n\n    if (currentIndex > -1) {\n      this._activeItems.splice(currentIndex, 1);\n    }\n\n    if (targetItem && !this._dragDropRegistry.isDragging(targetItem)) {\n      this._activeItems.splice(enterIndex, 0, item);\n      targetItem.getRootElement().before(item.getPlaceholderElement());\n    } else {\n      this._activeItems.push(item);\n      this._element.appendChild(item.getPlaceholderElement());\n    }\n  }\n\n  /** Sets the items that are currently part of the list. */\n  withItems(items: readonly DragRef[]): void {\n    this._activeItems = items.slice();\n  }\n\n  /** Assigns a sort predicate to the strategy. */\n  withSortPredicate(predicate: SortPredicate<DragRef>): void {\n    this._sortPredicate = predicate;\n  }\n\n  /** Resets the strategy to its initial state before dragging was started. */\n  reset(): void {\n    const root = this._element;\n    const previousSwap = this._previousSwap;\n\n    // Moving elements around in the DOM can break things like the `@for` loop, because it\n    // uses comment nodes to know where to insert elements. To avoid such issues, we restore\n    // the DOM nodes in the list to their original order when the list is reset.\n    // Note that this could be simpler if we just saved all the nodes, cleared the root\n    // and then appended them in the original order. We don't do it, because it can break\n    // down depending on when the snapshot was taken. E.g. we may end up snapshotting the\n    // placeholder element which is removed after dragging.\n    for (let i = this._relatedNodes.length - 1; i > -1; i--) {\n      const [node, nextSibling] = this._relatedNodes[i];\n      if (node.parentNode === root && node.nextSibling !== nextSibling) {\n        if (nextSibling === null) {\n          root.appendChild(node);\n        } else if (nextSibling.parentNode === root) {\n          root.insertBefore(node, nextSibling);\n        }\n      }\n    }\n\n    this._relatedNodes = [];\n    this._activeItems = [];\n    previousSwap.drag = null;\n    previousSwap.deltaX = previousSwap.deltaY = 0;\n    previousSwap.overlaps = false;\n  }\n\n  /**\n   * Gets a snapshot of items currently in the list.\n   * Can include items that we dragged in from another list.\n   */\n  getActiveItemsSnapshot(): readonly DragRef[] {\n    return this._activeItems;\n  }\n\n  /** Gets the index of a specific item. */\n  getItemIndex(item: DragRef): number {\n    return this._activeItems.indexOf(item);\n  }\n\n  /** Used to notify the strategy that the scroll position has changed. */\n  updateOnScroll(): void {\n    this._activeItems.forEach(item => {\n      if (this._dragDropRegistry.isDragging(item)) {\n        // We need to re-sort the item manually, because the pointer move\n        // events won't be dispatched while the user is scrolling.\n        item._sortFromLastPointerPosition();\n      }\n    });\n  }\n\n  withElementContainer(container: HTMLElement): void {\n    if (container !== this._element) {\n      this._element = container;\n      this._rootNode = undefined;\n    }\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(\n    item: DragRef,\n    pointerX: number,\n    pointerY: number,\n  ): number {\n    const elementAtPoint = this._getRootNode().elementFromPoint(\n      Math.floor(pointerX),\n      Math.floor(pointerY),\n    );\n    const index = elementAtPoint\n      ? this._activeItems.findIndex(item => {\n          const root = item.getRootElement();\n          return elementAtPoint === root || root.contains(elementAtPoint);\n        })\n      : -1;\n    return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n  }\n\n  /** Lazily resolves the list's root node. */\n  private _getRootNode(): DocumentOrShadowRoot {\n    // Resolve the root node lazily to ensure that the drop list is in its final place in the DOM.\n    if (!this._rootNode) {\n      this._rootNode = _getShadowRoot(this._element) || this._document;\n    }\n    return this._rootNode;\n  }\n\n  /**\n   * Finds the index of the item that's closest to the item being dragged.\n   * @param item Item being dragged.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   */\n  private _getClosestItemIndexToPointer(item: DragRef, pointerX: number, pointerY: number): number {\n    if (this._activeItems.length === 0) {\n      return -1;\n    }\n\n    if (this._activeItems.length === 1) {\n      return 0;\n    }\n\n    let minDistance = Infinity;\n    let minIndex = -1;\n\n    // Find the Euclidean distance (https://en.wikipedia.org/wiki/Euclidean_distance) between each\n    // item and the pointer, and return the smallest one. Note that this is a bit flawed in that DOM\n    // nodes are rectangles, not points, so we use the top/left coordinates. It should be enough\n    // for our purposes.\n    for (let i = 0; i < this._activeItems.length; i++) {\n      const current = this._activeItems[i];\n      if (current !== item) {\n        const {x, y} = current.getRootElement().getBoundingClientRect();\n        const distance = Math.hypot(pointerX - x, pointerY - y);\n\n        if (distance < minDistance) {\n          minDistance = distance;\n          minIndex = i;\n        }\n      }\n    }\n\n    return minIndex;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Direction} from '../bidi';\nimport {coerceElement} from '../coercion';\nimport {ViewportRuler} from '../scrolling';\nimport {_getShadowRoot} from '../platform';\nimport {Subject, Subscription, interval, animationFrameScheduler} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport type {DragRef, Point} from './drag-ref';\nimport {isPointerNearDomRect, isInsideClientRect} from './dom/dom-rect';\nimport {ParentPositionTracker} from './dom/parent-position-tracker';\nimport {DragCSSStyleDeclaration} from './dom/styling';\nimport {DropListSortStrategy} from './sorting/drop-list-sort-strategy';\nimport {SingleAxisSortStrategy} from './sorting/single-axis-sort-strategy';\nimport {MixedSortStrategy} from './sorting/mixed-sort-strategy';\nimport {DropListOrientation} from './directives/config';\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n\n/** Vertical direction in which we can auto-scroll. */\nenum AutoScrollVerticalDirection {\n  NONE,\n  UP,\n  DOWN,\n}\n\n/** Horizontal direction in which we can auto-scroll. */\nenum AutoScrollHorizontalDirection {\n  NONE,\n  LEFT,\n  RIGHT,\n}\n\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nexport class DropListRef<T = any> {\n  /** Element that the drop list is attached to. */\n  element: HTMLElement | ElementRef<HTMLElement>;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean = false;\n\n  /** Whether sorting items within the list is disabled. */\n  sortingDisabled: boolean = false;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Whether auto-scrolling the view when the user\n   * moves their pointer close to the edges is disabled.\n   */\n  autoScrollDisabled: boolean = false;\n\n  /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n  autoScrollStep: number = 2;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  enterPredicate: (drag: DragRef, drop: DropListRef) => boolean = () => true;\n\n  /** Function that is used to determine whether an item can be sorted into a particular index. */\n  sortPredicate: (index: number, drag: DragRef, drop: DropListRef) => boolean = () => true;\n\n  /** Emits right before dragging has started. */\n  readonly beforeStarted = new Subject<void>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  readonly entered = new Subject<{item: DragRef; container: DropListRef; currentIndex: number}>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  readonly exited = new Subject<{item: DragRef; container: DropListRef}>();\n\n  /** Emits when the user drops an item inside the container. */\n  readonly dropped = new Subject<{\n    item: DragRef;\n    currentIndex: number;\n    previousIndex: number;\n    container: DropListRef;\n    previousContainer: DropListRef;\n    isPointerOverContainer: boolean;\n    distance: Point;\n    dropPoint: Point;\n    event: MouseEvent | TouchEvent;\n  }>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  readonly sorted = new Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    container: DropListRef;\n    item: DragRef;\n  }>();\n\n  /** Emits when a dragging sequence is started in a list connected to the current one. */\n  readonly receivingStarted = new Subject<{\n    receiver: DropListRef;\n    initiator: DropListRef;\n    items: DragRef[];\n  }>();\n\n  /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n  readonly receivingStopped = new Subject<{\n    receiver: DropListRef;\n    initiator: DropListRef;\n  }>();\n\n  /** Arbitrary data that can be attached to the drop list. */\n  data: T;\n\n  /** Element that is the direct parent of the drag items. */\n  private _container: HTMLElement;\n\n  /** Whether an item in the list is being dragged. */\n  private _isDragging = false;\n\n  /** Keeps track of the positions of any parent scrollable elements. */\n  private _parentPositions: ParentPositionTracker;\n\n  /** Strategy being used to sort items within the list. */\n  private _sortStrategy: DropListSortStrategy;\n\n  /** Cached `DOMRect` of the drop list. */\n  private _domRect: DOMRect | undefined;\n\n  /** Draggable items in the container. */\n  private _draggables: readonly DragRef[] = [];\n\n  /** Drop lists that are connected to the current one. */\n  private _siblings: readonly DropListRef[] = [];\n\n  /** Connected siblings that currently have a dragged item. */\n  private _activeSiblings = new Set<DropListRef>();\n\n  /** Subscription to the window being scrolled. */\n  private _viewportScrollSubscription = Subscription.EMPTY;\n\n  /** Vertical direction in which the list is currently scrolling. */\n  private _verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n\n  /** Horizontal direction in which the list is currently scrolling. */\n  private _horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n\n  /** Node that is being auto-scrolled. */\n  private _scrollNode: HTMLElement | Window;\n\n  /** Used to signal to the current auto-scroll sequence when to stop. */\n  private readonly _stopScrollTimers = new Subject<void>();\n\n  /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n  private _cachedShadowRoot: DocumentOrShadowRoot | null = null;\n\n  /** Reference to the document. */\n  private _document: Document;\n\n  /** Elements that can be scrolled while the user is dragging. */\n  private _scrollableElements: HTMLElement[] = [];\n\n  /** Initial value for the element's `scroll-snap-type` style. */\n  private _initialScrollSnap: string;\n\n  /** Direction of the list's layout. */\n  private _direction: Direction = 'ltr';\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _dragDropRegistry: DragDropRegistry,\n    _document: any,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n  ) {\n    const coercedElement = (this.element = coerceElement(element));\n    this._document = _document;\n    this.withOrientation('vertical').withElementContainer(coercedElement);\n    _dragDropRegistry.registerDropContainer(this);\n    this._parentPositions = new ParentPositionTracker(_document);\n  }\n\n  /** Removes the drop list functionality from the DOM element. */\n  dispose() {\n    this._stopScrolling();\n    this._stopScrollTimers.complete();\n    this._viewportScrollSubscription.unsubscribe();\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this.receivingStarted.complete();\n    this.receivingStopped.complete();\n    this._activeSiblings.clear();\n    this._scrollNode = null!;\n    this._parentPositions.clear();\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item from this list is currently being dragged. */\n  isDragging() {\n    return this._isDragging;\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._draggingStarted();\n    this._notifyReceivingSiblings();\n  }\n\n  /**\n   * Attempts to move an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\n   *   out automatically.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number, index?: number): void {\n    this._draggingStarted();\n\n    // If sorting is disabled, we want the item to return to its starting\n    // position if the user is returning it to its initial container.\n    if (index == null && this.sortingDisabled) {\n      index = this._draggables.indexOf(item);\n    }\n\n    this._sortStrategy.enter(item, pointerX, pointerY, index);\n\n    // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n    // can change when the sort strategy moves the item around inside `enter`.\n    this._cacheParentPositions();\n\n    // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n    this._notifyReceivingSiblings();\n    this.entered.next({item, container: this, currentIndex: this.getItemIndex(item)});\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: DragRef): void {\n    this._reset();\n    this.exited.next({item, container: this});\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousIndex Index of the item when dragging started.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   * @param distance Distance the user has dragged since the start of the dragging sequence.\n   * @param event Event that triggered the dropping sequence.\n   *\n   * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n   */\n  drop(\n    item: DragRef,\n    currentIndex: number,\n    previousIndex: number,\n    previousContainer: DropListRef,\n    isPointerOverContainer: boolean,\n    distance: Point,\n    dropPoint: Point,\n    event: MouseEvent | TouchEvent = {} as any,\n  ): void {\n    this._reset();\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex,\n      container: this,\n      previousContainer,\n      isPointerOverContainer,\n      distance,\n      dropPoint,\n      event,\n    });\n  }\n\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n  withItems(items: DragRef[]): this {\n    const previousItems = this._draggables;\n    this._draggables = items;\n    items.forEach(item => item._withDropContainer(this));\n\n    if (this.isDragging()) {\n      const draggedItems = previousItems.filter(item => item.isDragging());\n\n      // If all of the items being dragged were removed\n      // from the list, abort the current drag sequence.\n      if (draggedItems.every(item => items.indexOf(item) === -1)) {\n        this._reset();\n      } else {\n        this._sortStrategy.withItems(this._draggables);\n      }\n    }\n\n    return this;\n  }\n\n  /** Sets the layout direction of the drop list. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    if (this._sortStrategy instanceof SingleAxisSortStrategy) {\n      this._sortStrategy.direction = direction;\n    }\n    return this;\n  }\n\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n  connectedTo(connectedTo: DropListRef[]): this {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n  withOrientation(orientation: DropListOrientation): this {\n    if (orientation === 'mixed') {\n      this._sortStrategy = new MixedSortStrategy(this._document, this._dragDropRegistry);\n    } else {\n      const strategy = new SingleAxisSortStrategy(this._dragDropRegistry);\n      strategy.direction = this._direction;\n      strategy.orientation = orientation;\n      this._sortStrategy = strategy;\n    }\n    this._sortStrategy.withElementContainer(this._container);\n    this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n    return this;\n  }\n\n  /**\n   * Sets which parent elements are can be scrolled while the user is dragging.\n   * @param elements Elements that can be scrolled.\n   */\n  withScrollableParents(elements: HTMLElement[]): this {\n    const element = this._container;\n\n    // We always allow the current element to be scrollable\n    // so we need to ensure that it's in the array.\n    this._scrollableElements =\n      elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n    return this;\n  }\n\n  /**\n   * Configures the drop list so that a different element is used as the container for the\n   * dragged items. This is useful for the cases when one might not have control over the\n   * full DOM that sets up the dragging.\n   * Note that the alternate container needs to be a descendant of the drop list.\n   * @param container New element container to be assigned.\n   */\n  withElementContainer(container: HTMLElement): this {\n    if (container === this._container) {\n      return this;\n    }\n\n    const element = coerceElement(this.element);\n\n    if (\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      container !== element &&\n      !element.contains(container)\n    ) {\n      throw new Error(\n        'Invalid DOM structure for drop list. Alternate container element must be a descendant of the drop list.',\n      );\n    }\n\n    const oldContainerIndex = this._scrollableElements.indexOf(this._container);\n    const newContainerIndex = this._scrollableElements.indexOf(container);\n\n    if (oldContainerIndex > -1) {\n      this._scrollableElements.splice(oldContainerIndex, 1);\n    }\n\n    if (newContainerIndex > -1) {\n      this._scrollableElements.splice(newContainerIndex, 1);\n    }\n\n    if (this._sortStrategy) {\n      this._sortStrategy.withElementContainer(container);\n    }\n\n    this._cachedShadowRoot = null;\n    this._scrollableElements.unshift(container);\n    this._container = container;\n    return this;\n  }\n\n  /** Gets the scrollable parents that are registered with this drop container. */\n  getScrollableParents(): readonly HTMLElement[] {\n    return this._scrollableElements;\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: DragRef): number {\n    return this._isDragging\n      ? this._sortStrategy.getItemIndex(item)\n      : this._draggables.indexOf(item);\n  }\n\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n  isReceiving(): boolean {\n    return this._activeSiblings.size > 0;\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(\n    item: DragRef,\n    pointerX: number,\n    pointerY: number,\n    pointerDelta: {x: number; y: number},\n  ): void {\n    // Don't sort the item if sorting is disabled or it's out of range.\n    if (\n      this.sortingDisabled ||\n      !this._domRect ||\n      !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)\n    ) {\n      return;\n    }\n\n    const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n\n    if (result) {\n      this.sorted.next({\n        previousIndex: result.previousIndex,\n        currentIndex: result.currentIndex,\n        container: this,\n        item,\n      });\n    }\n  }\n\n  /**\n   * Checks whether the user's pointer is close to the edges of either the\n   * viewport or the drop list and starts the auto-scroll sequence.\n   * @param pointerX User's pointer position along the x axis.\n   * @param pointerY User's pointer position along the y axis.\n   */\n  _startScrollingIfNecessary(pointerX: number, pointerY: number) {\n    if (this.autoScrollDisabled) {\n      return;\n    }\n\n    let scrollNode: HTMLElement | Window | undefined;\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n\n    // Check whether we should start scrolling any of the parent containers.\n    this._parentPositions.positions.forEach((position, element) => {\n      // We have special handling for the `document` below. Also this would be\n      // nicer with a  for...of loop, but it requires changing a compiler flag.\n      if (element === this._document || !position.clientRect || scrollNode) {\n        return;\n      }\n\n      if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n        [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(\n          element as HTMLElement,\n          position.clientRect,\n          this._direction,\n          pointerX,\n          pointerY,\n        );\n\n        if (verticalScrollDirection || horizontalScrollDirection) {\n          scrollNode = element as HTMLElement;\n        }\n      }\n    });\n\n    // Otherwise check if we can start scrolling the viewport.\n    if (!verticalScrollDirection && !horizontalScrollDirection) {\n      const {width, height} = this._viewportRuler.getViewportSize();\n      const domRect = {\n        width,\n        height,\n        top: 0,\n        right: width,\n        bottom: height,\n        left: 0,\n      } as DOMRect;\n      verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);\n      horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);\n      scrollNode = window;\n    }\n\n    if (\n      scrollNode &&\n      (verticalScrollDirection !== this._verticalScrollDirection ||\n        horizontalScrollDirection !== this._horizontalScrollDirection ||\n        scrollNode !== this._scrollNode)\n    ) {\n      this._verticalScrollDirection = verticalScrollDirection;\n      this._horizontalScrollDirection = horizontalScrollDirection;\n      this._scrollNode = scrollNode;\n\n      if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n        this._ngZone.runOutsideAngular(this._startScrollInterval);\n      } else {\n        this._stopScrolling();\n      }\n    }\n  }\n\n  /** Stops any currently-running auto-scroll sequences. */\n  _stopScrolling() {\n    this._stopScrollTimers.next();\n  }\n\n  /** Starts the dragging sequence within the list. */\n  private _draggingStarted() {\n    const styles = this._container.style as DragCSSStyleDeclaration;\n    this.beforeStarted.next();\n    this._isDragging = true;\n\n    if (\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      // Prevent the check from running on apps not using an alternate container. Ideally we\n      // would always run it, but introducing it at this stage would be a breaking change.\n      this._container !== coerceElement(this.element)\n    ) {\n      for (const drag of this._draggables) {\n        if (!drag.isDragging() && drag.getVisibleElement().parentNode !== this._container) {\n          throw new Error(\n            'Invalid DOM structure for drop list. All items must be placed directly inside of the element container.',\n          );\n        }\n      }\n    }\n\n    // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n    // scrolling. The browser seems to round the value based on the snapping points which means\n    // that we can't increment/decrement the scroll position.\n    this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n    styles.scrollSnapType = styles.msScrollSnapType = 'none';\n    this._sortStrategy.start(this._draggables);\n    this._cacheParentPositions();\n    this._viewportScrollSubscription.unsubscribe();\n    this._listenToScrollEvents();\n  }\n\n  /** Caches the positions of the configured scrollable parents. */\n  private _cacheParentPositions() {\n    this._parentPositions.cache(this._scrollableElements);\n\n    // The list element is always in the `scrollableElements`\n    // so we can take advantage of the cached `DOMRect`.\n    this._domRect = this._parentPositions.positions.get(this._container)!.clientRect!;\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._isDragging = false;\n    const styles = this._container.style as DragCSSStyleDeclaration;\n    styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n    this._sortStrategy.reset();\n    this._stopScrolling();\n    this._viewportScrollSubscription.unsubscribe();\n    this._parentPositions.clear();\n  }\n\n  /** Starts the interval that'll auto-scroll the element. */\n  private _startScrollInterval = () => {\n    this._stopScrolling();\n\n    interval(0, animationFrameScheduler)\n      .pipe(takeUntil(this._stopScrollTimers))\n      .subscribe(() => {\n        const node = this._scrollNode;\n        const scrollStep = this.autoScrollStep;\n\n        if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n          node.scrollBy(0, -scrollStep);\n        } else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n          node.scrollBy(0, scrollStep);\n        }\n\n        if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n          node.scrollBy(-scrollStep, 0);\n        } else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n          node.scrollBy(scrollStep, 0);\n        }\n      });\n  };\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return this._domRect != null && isInsideClientRect(this._domRect, x, y);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | undefined {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n\n  /**\n   * Checks whether the drop list can receive the passed-in item.\n   * @param item Item that is being dragged into the list.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReceive(item: DragRef, x: number, y: number): boolean {\n    if (\n      !this._domRect ||\n      !isInsideClientRect(this._domRect, x, y) ||\n      !this.enterPredicate(item, this)\n    ) {\n      return false;\n    }\n\n    const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y) as HTMLElement | null;\n\n    // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n    if (!elementFromPoint) {\n      return false;\n    }\n\n    // The `DOMRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n    return elementFromPoint === this._container || this._container.contains(elementFromPoint);\n  }\n\n  /**\n   * Called by one of the connected drop lists when a dragging sequence has started.\n   * @param sibling Sibling in which dragging has started.\n   */\n  _startReceiving(sibling: DropListRef, items: DragRef[]) {\n    const activeSiblings = this._activeSiblings;\n\n    if (\n      !activeSiblings.has(sibling) &&\n      items.every(item => {\n        // Note that we have to add an exception to the `enterPredicate` for items that started off\n        // in this drop list. The drag ref has logic that allows an item to return to its initial\n        // container, if it has left the initial container and none of the connected containers\n        // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n        return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n      })\n    ) {\n      activeSiblings.add(sibling);\n      this._cacheParentPositions();\n      this._listenToScrollEvents();\n      this.receivingStarted.next({\n        initiator: sibling,\n        receiver: this,\n        items,\n      });\n    }\n  }\n\n  /**\n   * Called by a connected drop list when dragging has stopped.\n   * @param sibling Sibling whose dragging has stopped.\n   */\n  _stopReceiving(sibling: DropListRef) {\n    this._activeSiblings.delete(sibling);\n    this._viewportScrollSubscription.unsubscribe();\n    this.receivingStopped.next({initiator: sibling, receiver: this});\n  }\n\n  /**\n   * Starts listening to scroll events on the viewport.\n   * Used for updating the internal state of the list.\n   */\n  private _listenToScrollEvents() {\n    this._viewportScrollSubscription = this._dragDropRegistry\n      .scrolled(this._getShadowRoot())\n      .subscribe(event => {\n        if (this.isDragging()) {\n          const scrollDifference = this._parentPositions.handleScroll(event);\n\n          if (scrollDifference) {\n            this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n          }\n        } else if (this.isReceiving()) {\n          this._cacheParentPositions();\n        }\n      });\n  }\n\n  /**\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n   * than saving it in property directly on init, because we want to resolve it as late as possible\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n   */\n  private _getShadowRoot(): DocumentOrShadowRoot {\n    if (!this._cachedShadowRoot) {\n      const shadowRoot = _getShadowRoot(this._container);\n      this._cachedShadowRoot = shadowRoot || this._document;\n    }\n\n    return this._cachedShadowRoot;\n  }\n\n  /** Notifies any siblings that may potentially receive the item. */\n  private _notifyReceivingSiblings() {\n    const draggedItems = this._sortStrategy\n      .getActiveItemsSnapshot()\n      .filter(item => item.isDragging());\n    this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n  }\n}\n\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect: DOMRect, pointerY: number) {\n  const {top, bottom, height} = clientRect;\n  const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n    return AutoScrollVerticalDirection.UP;\n  } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n    return AutoScrollVerticalDirection.DOWN;\n  }\n\n  return AutoScrollVerticalDirection.NONE;\n}\n\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect: DOMRect, pointerX: number) {\n  const {left, right, width} = clientRect;\n  const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n    return AutoScrollHorizontalDirection.LEFT;\n  } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n    return AutoScrollHorizontalDirection.RIGHT;\n  }\n\n  return AutoScrollHorizontalDirection.NONE;\n}\n\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param direction Layout direction of the drop list.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(\n  element: HTMLElement,\n  clientRect: DOMRect,\n  direction: Direction,\n  pointerX: number,\n  pointerY: number,\n): [AutoScrollVerticalDirection, AutoScrollHorizontalDirection] {\n  const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n  const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n  let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n  let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n\n  // Note that we here we do some extra checks for whether the element is actually scrollable in\n  // a certain direction and we only assign the scroll direction if it is. We do this so that we\n  // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n  // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n  if (computedVertical) {\n    const scrollTop = element.scrollTop;\n\n    if (computedVertical === AutoScrollVerticalDirection.UP) {\n      if (scrollTop > 0) {\n        verticalScrollDirection = AutoScrollVerticalDirection.UP;\n      }\n    } else if (element.scrollHeight - scrollTop > element.clientHeight) {\n      verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n    }\n  }\n\n  if (computedHorizontal) {\n    const scrollLeft = element.scrollLeft;\n\n    if (direction === 'rtl') {\n      if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {\n        // In RTL `scrollLeft` will be negative when scrolled.\n        if (scrollLeft < 0) {\n          horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n        }\n      } else if (element.scrollWidth + scrollLeft > element.clientWidth) {\n        horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n      }\n    } else {\n      if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n        if (scrollLeft > 0) {\n          horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n        }\n      } else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n        horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n      }\n    }\n  }\n\n  return [verticalScrollDirection, horizontalScrollDirection];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  RendererFactory2,\n  ViewEncapsulation,\n  WritableSignal,\n  inject,\n  signal,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {_bindEventWithOptions, _ListenerOptions} from '../platform';\nimport {_CdkPrivateStyleLoader} from '../private';\nimport {Observable, Observer, Subject, merge} from 'rxjs';\nimport type {DropListRef} from './drop-list-ref';\nimport type {DragRef} from './drag-ref';\nimport type {CdkDrag} from './directives/drag';\n\n/** Event options that can be used to bind a capturing event. */\nconst capturingEventOptions = {\n  capture: true,\n};\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = {\n  passive: false,\n  capture: true,\n};\n\n/**\n * Component used to load the drag&drop reset styles.\n * @docs-private\n */\n@Component({\n  styleUrl: 'resets.css',\n  encapsulation: ViewEncapsulation.None,\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'cdk-drag-resets-container': ''},\n})\nexport class _ResetsLoader {}\n\n// TODO(crisbeto): remove generics when making breaking changes.\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<_ = unknown, __ = unknown> implements OnDestroy {\n  private _ngZone = inject(NgZone);\n  private _document = inject(DOCUMENT);\n  private _styleLoader = inject(_CdkPrivateStyleLoader);\n  private _renderer = inject(RendererFactory2).createRenderer(null, null);\n  private _cleanupDocumentTouchmove: (() => void) | undefined;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<DropListRef>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<DragRef>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances: WritableSignal<DragRef[]> = signal([]);\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners: (() => void)[] | undefined;\n\n  /**\n   * Predicate function to check if an item is being dragged.  Moved out into a property,\n   * because it'll be called a lot and we don't want to create a new function every time.\n   */\n  private _draggingPredicate = (item: DragRef) => item.isDragging();\n\n  /**\n   * Map tracking DOM nodes and their corresponding drag directives. Note that this is different\n   * from looking through the `_dragInstances` and getting their root node, because the root node\n   * isn't necessarily the node that the directive is set on.\n   */\n  private _domNodesToDirectives: WeakMap<Node, CdkDrag> | null = null;\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits when the viewport has been scrolled while the user is dragging an item.\n   * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n   * @breaking-change 13.0.0\n   */\n  readonly scroll: Subject<Event> = new Subject<Event>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: DropListRef) {\n    if (!this._dropInstances.has(drop)) {\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: DragRef) {\n    this._dragInstances.add(drag);\n\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._cleanupDocumentTouchmove?.();\n        this._cleanupDocumentTouchmove = _bindEventWithOptions(\n          this._renderer,\n          this._document,\n          'touchmove',\n          this._persistentTouchmoveListener,\n          activeCapturingEventOptions,\n        );\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: DropListRef) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: DragRef) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._cleanupDocumentTouchmove?.();\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: DragRef, event: TouchEvent | MouseEvent) {\n    // Do not process the same drag twice to avoid memory leaks and redundant listeners\n    if (this._activeDragInstances().indexOf(drag) > -1) {\n      return;\n    }\n\n    this._styleLoader.load(_ResetsLoader);\n    this._activeDragInstances.update(instances => [...instances, drag]);\n\n    if (this._activeDragInstances().length === 1) {\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      const isTouchEvent = event.type.startsWith('touch');\n      const endEventHandler = (e: Event) => this.pointerUp.next(e as TouchEvent | MouseEvent);\n\n      const toBind: [name: string, handler: (event: Event) => void, options: _ListenerOptions][] = [\n        // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n        // the document. See https://github.com/angular/components/issues/17144.\n        ['scroll', (e: Event) => this.scroll.next(e), capturingEventOptions],\n\n        // Preventing the default action on `mousemove` isn't enough to disable text selection\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\n        // recalculation which can be expensive on pages with a lot of elements.\n        ['selectstart', this._preventDefaultWhileDragging, activeCapturingEventOptions],\n      ];\n\n      if (isTouchEvent) {\n        toBind.push(\n          ['touchend', endEventHandler, capturingEventOptions],\n          ['touchcancel', endEventHandler, capturingEventOptions],\n        );\n      } else {\n        toBind.push(['mouseup', endEventHandler, capturingEventOptions]);\n      }\n\n      // We don't have to bind a move event for touch drag sequences, because\n      // we already have a persistent global one bound from `registerDragItem`.\n      if (!isTouchEvent) {\n        toBind.push([\n          'mousemove',\n          (e: Event) => this.pointerMove.next(e as MouseEvent),\n          activeCapturingEventOptions,\n        ]);\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners = toBind.map(([name, handler, options]) =>\n          _bindEventWithOptions(this._renderer, this._document, name, handler, options),\n        );\n      });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: DragRef) {\n    this._activeDragInstances.update(instances => {\n      const index = instances.indexOf(drag);\n      if (index > -1) {\n        instances.splice(index, 1);\n        return [...instances];\n      }\n      return instances;\n    });\n\n    if (this._activeDragInstances().length === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: DragRef) {\n    return this._activeDragInstances().indexOf(drag) > -1;\n  }\n\n  /**\n   * Gets a stream that will emit when any element on the page is scrolled while an item is being\n   * dragged.\n   * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n   *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n   *   be used to include an additional top-level listener at the shadow root level.\n   */\n  scrolled(shadowRoot?: DocumentOrShadowRoot | null): Observable<Event> {\n    const streams: Observable<Event>[] = [this.scroll];\n\n    if (shadowRoot && shadowRoot !== this._document) {\n      // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n      // because we want to guarantee that the event is bound outside of the `NgZone`. With\n      // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n      streams.push(\n        new Observable((observer: Observer<Event>) => {\n          return this._ngZone.runOutsideAngular(() => {\n            const cleanup = _bindEventWithOptions(\n              this._renderer,\n              shadowRoot as ShadowRoot,\n              'scroll',\n              (event: Event) => {\n                if (this._activeDragInstances().length) {\n                  observer.next(event);\n                }\n              },\n              capturingEventOptions,\n            );\n\n            return () => {\n              cleanup();\n            };\n          });\n        }),\n      );\n    }\n\n    return merge(...streams);\n  }\n\n  /**\n   * Tracks the DOM node which has a draggable directive.\n   * @param node Node to track.\n   * @param dragRef Drag directive set on the node.\n   */\n  registerDirectiveNode(node: Node, dragRef: CdkDrag): void {\n    this._domNodesToDirectives ??= new WeakMap();\n    this._domNodesToDirectives.set(node, dragRef);\n  }\n\n  /**\n   * Stops tracking a draggable directive node.\n   * @param node Node to stop tracking.\n   */\n  removeDirectiveNode(node: Node): void {\n    this._domNodesToDirectives?.delete(node);\n  }\n\n  /**\n   * Gets the drag directive corresponding to a specific DOM node, if any.\n   * @param node Node for which to do the lookup.\n   */\n  getDragDirectiveForNode(node: Node): CdkDrag | null {\n    return this._domNodesToDirectives?.get(node) || null;\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._domNodesToDirectives = null;\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Event listener that will prevent the default browser action while the user is dragging.\n   * @param event Event whose default action should be prevented.\n   */\n  private _preventDefaultWhileDragging = (event: Event) => {\n    if (this._activeDragInstances().length > 0) {\n      event.preventDefault();\n    }\n  };\n\n  /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n  private _persistentTouchmoveListener = (event: TouchEvent) => {\n    if (this._activeDragInstances().length > 0) {\n      // Note that we only want to prevent the default action after dragging has actually started.\n      // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n      // but it could be pushed back if the user has set up a drag delay or threshold.\n      if (this._activeDragInstances().some(this._draggingPredicate)) {\n        event.preventDefault();\n      }\n\n      this.pointerMove.next(event);\n    }\n  };\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners?.forEach(cleanup => cleanup());\n    this._globalListeners = undefined;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, NgZone, ElementRef, inject, RendererFactory2} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ViewportRuler} from '../scrolling';\nimport {DragRef, DragRefConfig} from './drag-ref';\nimport {DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5,\n};\n\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n@Injectable({providedIn: 'root'})\nexport class DragDrop {\n  private _document = inject(DOCUMENT);\n  private _ngZone = inject(NgZone);\n  private _viewportRuler = inject(ViewportRuler);\n  private _dragDropRegistry = inject(DragDropRegistry);\n  private _renderer = inject(RendererFactory2).createRenderer(null, null);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n  createDrag<T = any>(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    config: DragRefConfig = DEFAULT_CONFIG,\n  ): DragRef<T> {\n    return new DragRef<T>(\n      element,\n      config,\n      this._document,\n      this._ngZone,\n      this._viewportRuler,\n      this._dragDropRegistry,\n      this._renderer,\n    );\n  }\n\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): DropListRef<T> {\n    return new DropListRef<T>(\n      element,\n      this._dragDropRegistry,\n      this._document,\n      this._ngZone,\n      this._viewportRuler,\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport type {CdkDrag} from './directives/drag';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<CdkDrag>('CDK_DRAG_PARENT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport type {CdkDrag} from './drag';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {assertElementNode} from './assertions';\nimport {DragDropRegistry} from '../drag-drop-registry';\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_DRAG_HANDLE = new InjectionToken<CdkDragHandle>('CdkDragHandle');\n\n/** Handle that can be used to drag a CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle',\n  },\n  providers: [{provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle}],\n})\nexport class CdkDragHandle implements AfterViewInit, OnDestroy {\n  element = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  private _parentDrag = inject<CdkDrag>(CDK_DRAG_PARENT, {optional: true, skipSelf: true});\n  private _dragDropRegistry = inject(DragDropRegistry);\n\n  /** Emits when the state of the handle has changed. */\n  readonly _stateChanges = new Subject<CdkDragHandle>();\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input({alias: 'cdkDragHandleDisabled', transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._stateChanges.next(this);\n  }\n  private _disabled = false;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      assertElementNode(this.element.nativeElement, 'cdkDragHandle');\n    }\n\n    this._parentDrag?._addHandle(this);\n  }\n\n  ngAfterViewInit() {\n    if (!this._parentDrag) {\n      let parent = this.element.nativeElement.parentElement;\n      while (parent) {\n        const ref = this._dragDropRegistry.getDragDirectiveForNode(parent);\n        if (ref) {\n          this._parentDrag = ref;\n          ref._addHandle(this);\n          break;\n        }\n        parent = parent.parentElement;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentDrag?._removeHandle(this);\n    this._stateChanges.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {DragRefConfig, Point, DragRef} from '../drag-ref';\n\n/** Possible values that can be used to configure the drag start delay. */\nexport type DragStartDelay = number | {touch: number; mouse: number};\n\n/** Possible axis along which dragging can be locked. */\nexport type DragAxis = 'x' | 'y';\n\n/** Function that can be used to constrain the position of a dragged element. */\nexport type DragConstrainPosition = (point: Point, dragRef: DragRef) => Point;\n\n/** Possible orientations for a drop list. */\nexport type DropListOrientation = 'horizontal' | 'vertical' | 'mixed';\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragDropConfig>('CDK_DRAG_CONFIG');\n\n/**\n * Object that can be used to configure the drag\n * items and drop lists within a module or a component.\n */\nexport interface DragDropConfig extends Partial<DragRefConfig> {\n  lockAxis?: DragAxis;\n  dragStartDelay?: DragStartDelay;\n  constrainPosition?: DragConstrainPosition;\n  previewClass?: string | string[];\n  boundaryElement?: string;\n  rootElementSelector?: string;\n  draggingDisabled?: boolean;\n  sortingDisabled?: boolean;\n  listAutoScrollDisabled?: boolean;\n  listOrientation?: DropListOrientation;\n  zIndex?: number;\n  previewContainer?: 'global' | 'parent';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directionality} from '../../bidi';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n  InjectionToken,\n  booleanAttribute,\n  afterNextRender,\n  AfterViewInit,\n  inject,\n  Injector,\n  numberAttribute,\n} from '@angular/core';\nimport {coerceElement, coerceNumberProperty} from '../../coercion';\nimport {BehaviorSubject, Observable, Observer, Subject, merge} from 'rxjs';\nimport {startWith, take, map, takeUntil, switchMap, tap} from 'rxjs/operators';\nimport type {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n  CdkDragRelease,\n} from '../drag-events';\nimport {CDK_DRAG_HANDLE, CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {DragRef, Point, PreviewContainer} from '../drag-ref';\nimport type {CdkDropList} from './drop-list';\nimport {DragDrop} from '../drag-drop';\nimport {CDK_DRAG_CONFIG, DragDropConfig, DragStartDelay, DragAxis} from './config';\nimport {assertElementNode} from './assertions';\nimport {DragDropRegistry} from '../drag-drop-registry';\n\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_DROP_LIST = new InjectionToken<CdkDropList>('CdkDropList');\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-disabled]': 'disabled',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}],\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\n  element = inject<ElementRef<HTMLElement>>(ElementRef);\n  dropContainer = inject<CdkDropList>(CDK_DROP_LIST, {optional: true, skipSelf: true})!;\n  private _ngZone = inject(NgZone);\n  private _viewContainerRef = inject(ViewContainerRef);\n  private _dir = inject(Directionality, {optional: true});\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  private _selfHandle = inject<CdkDragHandle>(CDK_DRAG_HANDLE, {optional: true, self: true});\n  private _parentDrag = inject<CdkDrag>(CDK_DRAG_PARENT, {optional: true, skipSelf: true});\n  private _dragDropRegistry = inject(DragDropRegistry);\n\n  private readonly _destroyed = new Subject<void>();\n  private _handles = new BehaviorSubject<CdkDragHandle[]>([]);\n  private _previewTemplate: CdkDragPreview | null;\n  private _placeholderTemplate: CdkDragPlaceholder | null;\n\n  /** Reference to the underlying drag instance. */\n  _dragRef: DragRef<CdkDrag<T>>;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: DragAxis;\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /**\n   * Node or selector that will be used to determine the element to which the draggable's\n   * position will be constrained. If a string is passed in, it'll be used as a selector that\n   * will be matched starting from the element's parent and going up the DOM until a match\n   * has been found.\n   */\n  @Input('cdkDragBoundary') boundaryElement: string | ElementRef<HTMLElement> | HTMLElement;\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  @Input('cdkDragStartDelay') dragStartDelay: DragStartDelay;\n\n  /**\n   * Sets the position of a `CdkDrag` that is outside of a drop container.\n   * Can be used to restore the element's position for a returning user.\n   */\n  @Input('cdkDragFreeDragPosition') freeDragPosition: Point;\n\n  /** Whether starting to drag this element is disabled. */\n  @Input({alias: 'cdkDragDisabled', transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled || !!(this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._dragRef.disabled = this._disabled;\n  }\n  private _disabled: boolean;\n\n  /**\n   * Function that can be used to customize the logic of how the position of the drag item\n   * is limited while it's being dragged. Gets called with a point containing the current position\n   * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n   * Should return a point describing where the item should be rendered.\n   */\n  @Input('cdkDragConstrainPosition') constrainPosition?: (\n    userPointerPosition: Point,\n    dragRef: DragRef,\n    dimensions: DOMRect,\n    pickupPositionInElement: Point,\n  ) => Point;\n\n  /** Class to be added to the preview element. */\n  @Input('cdkDragPreviewClass') previewClass: string | string[];\n\n  /**\n   * Configures the place into which the preview of the item will be inserted. Can be configured\n   * globally through `CDK_DROP_LIST`. Possible values:\n   * - `global` - Preview will be inserted at the bottom of the `<body>`. The advantage is that\n   * you don't have to worry about `overflow: hidden` or `z-index`, but the item won't retain\n   * its inherited styles.\n   * - `parent` - Preview will be inserted into the parent of the drag item. The advantage is that\n   * inherited styles will be preserved, but it may be clipped by `overflow: hidden` or not be\n   * visible due to `z-index`. Furthermore, the preview is going to have an effect over selectors\n   * like `:nth-child` and some flexbox configurations.\n   * - `ElementRef<HTMLElement> | HTMLElement` - Preview will be inserted into a specific element.\n   * Same advantages and disadvantages as `parent`.\n   */\n  @Input('cdkDragPreviewContainer') previewContainer: PreviewContainer;\n\n  /**\n   * If the parent of the dragged element has a `scale` transform, it can throw off the\n   * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n   */\n  @Input({alias: 'cdkDragScale', transform: numberAttribute})\n  scale: number = 1;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') readonly started: EventEmitter<CdkDragStart> =\n    new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  @Output('cdkDragReleased') readonly released: EventEmitter<CdkDragRelease> =\n    new EventEmitter<CdkDragRelease>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') readonly ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') readonly entered: EventEmitter<CdkDragEnter<any>> = new EventEmitter<\n    CdkDragEnter<any>\n  >();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') readonly exited: EventEmitter<CdkDragExit<any>> = new EventEmitter<\n    CdkDragExit<any>\n  >();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') readonly dropped: EventEmitter<CdkDragDrop<any>> = new EventEmitter<\n    CdkDragDrop<any>\n  >();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved')\n  readonly moved: Observable<CdkDragMove<T>> = new Observable(\n    (observer: Observer<CdkDragMove<T>>) => {\n      const subscription = this._dragRef.moved\n        .pipe(\n          map(movedEvent => ({\n            source: this,\n            pointerPosition: movedEvent.pointerPosition,\n            event: movedEvent.event,\n            delta: movedEvent.delta,\n            distance: movedEvent.distance,\n          })),\n        )\n        .subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n      };\n    },\n  );\n\n  private _injector = inject(Injector);\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const dropContainer = this.dropContainer;\n    const config = inject<DragDropConfig>(CDK_DRAG_CONFIG, {optional: true});\n    const dragDrop = inject(DragDrop);\n\n    this._dragRef = dragDrop.createDrag(this.element, {\n      dragStartThreshold:\n        config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n      pointerDirectionChangeThreshold:\n        config && config.pointerDirectionChangeThreshold != null\n          ? config.pointerDirectionChangeThreshold\n          : 5,\n      zIndex: config?.zIndex,\n    });\n    this._dragRef.data = this;\n    this._dragDropRegistry.registerDirectiveNode(this.element.nativeElement, this);\n\n    if (config) {\n      this._assignDefaults(config);\n    }\n\n    // Note that usually the container is assigned when the drop list is picks up the item, but in\n    // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n    // where there are no items on the first change detection pass, but the items get picked up as\n    // soon as the user triggers another pass by dragging. This is a problem, because the item would\n    // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n    // is too late since the two modes save different kinds of information. We work around it by\n    // assigning the drop container both from here and the list.\n    if (dropContainer) {\n      this._dragRef._withDropContainer(dropContainer._dropListRef);\n      dropContainer.addItem(this);\n\n      // The drop container reads this so we need to sync it here.\n      dropContainer._dropListRef.beforeStarted.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._dragRef.scale = this.scale;\n      });\n    }\n\n    this._syncInputs(this._dragRef);\n    this._handleEvents(this._dragRef);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._dragRef.getPlaceholderElement();\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._dragRef.getRootElement();\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._dragRef.reset();\n  }\n\n  /**\n   * Gets the pixel coordinates of the draggable outside of a drop container.\n   */\n  getFreeDragPosition(): Readonly<Point> {\n    return this._dragRef.getFreeDragPosition();\n  }\n\n  /**\n   * Sets the current position in pixels the draggable outside of a drop container.\n   * @param value New position to be set.\n   */\n  setFreeDragPosition(value: Point): void {\n    this._dragRef.setFreeDragPosition(value);\n  }\n\n  ngAfterViewInit() {\n    // We need to wait until after render, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position, and then they get transferred to the portal.\n    afterNextRender(\n      () => {\n        this._updateRootElement();\n        this._setupHandlesListener();\n        this._dragRef.scale = this.scale;\n\n        if (this.freeDragPosition) {\n          this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n      },\n      {injector: this._injector},\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const rootSelectorChange = changes['rootElementSelector'];\n    const positionChange = changes['freeDragPosition'];\n\n    // We don't have to react to the first change since it's being\n    // handled in the `afterNextRender` queued up in the constructor.\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    }\n\n    // Scale affects the free drag position so we need to sync it up here.\n    this._dragRef.scale = this.scale;\n\n    // Skip the first change since it's being handled in the `afterNextRender` queued up in the\n    // constructor.\n    if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n      this._dragRef.setFreeDragPosition(this.freeDragPosition);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.dropContainer) {\n      this.dropContainer.removeItem(this);\n    }\n\n    this._dragDropRegistry.removeDirectiveNode(this.element.nativeElement);\n\n    // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n    this._ngZone.runOutsideAngular(() => {\n      this._handles.complete();\n      this._destroyed.next();\n      this._destroyed.complete();\n      this._dragRef.dispose();\n    });\n  }\n\n  _addHandle(handle: CdkDragHandle) {\n    const handles = this._handles.getValue();\n    handles.push(handle);\n    this._handles.next(handles);\n  }\n\n  _removeHandle(handle: CdkDragHandle) {\n    const handles = this._handles.getValue();\n    const index = handles.indexOf(handle);\n\n    if (index > -1) {\n      handles.splice(index, 1);\n      this._handles.next(handles);\n    }\n  }\n\n  _setPreviewTemplate(preview: CdkDragPreview) {\n    this._previewTemplate = preview;\n  }\n\n  _resetPreviewTemplate(preview: CdkDragPreview) {\n    if (preview === this._previewTemplate) {\n      this._previewTemplate = null;\n    }\n  }\n\n  _setPlaceholderTemplate(placeholder: CdkDragPlaceholder) {\n    this._placeholderTemplate = placeholder;\n  }\n\n  _resetPlaceholderTemplate(placeholder: CdkDragPlaceholder) {\n    if (placeholder === this._placeholderTemplate) {\n      this._placeholderTemplate = null;\n    }\n  }\n\n  /** Syncs the root element with the `DragRef`. */\n  private _updateRootElement() {\n    const element = this.element.nativeElement as HTMLElement;\n    let rootElement = element;\n    if (this.rootElementSelector) {\n      rootElement =\n        element.closest !== undefined\n          ? (element.closest(this.rootElementSelector) as HTMLElement)\n          : // Comment tag doesn't have closest method, so use parent's one.\n            (element.parentElement?.closest(this.rootElementSelector) as HTMLElement);\n    }\n\n    if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      assertElementNode(rootElement, 'cdkDrag');\n    }\n\n    this._dragRef.withRootElement(rootElement || element);\n  }\n\n  /** Gets the boundary element, based on the `boundaryElement` value. */\n  private _getBoundaryElement() {\n    const boundary = this.boundaryElement;\n\n    if (!boundary) {\n      return null;\n    }\n\n    if (typeof boundary === 'string') {\n      return this.element.nativeElement.closest<HTMLElement>(boundary);\n    }\n\n    return coerceElement(boundary);\n  }\n\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n  private _syncInputs(ref: DragRef<CdkDrag<T>>) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const dir = this._dir;\n        const dragStartDelay = this.dragStartDelay;\n        const placeholder = this._placeholderTemplate\n          ? {\n              template: this._placeholderTemplate.templateRef,\n              context: this._placeholderTemplate.data,\n              viewContainer: this._viewContainerRef,\n            }\n          : null;\n        const preview = this._previewTemplate\n          ? {\n              template: this._previewTemplate.templateRef,\n              context: this._previewTemplate.data,\n              matchSize: this._previewTemplate.matchSize,\n              viewContainer: this._viewContainerRef,\n            }\n          : null;\n\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.scale = this.scale;\n        ref.dragStartDelay =\n          typeof dragStartDelay === 'object' && dragStartDelay\n            ? dragStartDelay\n            : coerceNumberProperty(dragStartDelay);\n        ref.constrainPosition = this.constrainPosition;\n        ref.previewClass = this.previewClass;\n        ref\n          .withBoundaryElement(this._getBoundaryElement())\n          .withPlaceholderTemplate(placeholder)\n          .withPreviewTemplate(preview)\n          .withPreviewContainer(this.previewContainer || 'global');\n\n        if (dir) {\n          ref.withDirection(dir.value);\n        }\n      }\n    });\n\n    // This only needs to be resolved once.\n    ref.beforeStarted.pipe(take(1)).subscribe(() => {\n      // If we managed to resolve a parent through DI, use it.\n      if (this._parentDrag) {\n        ref.withParent(this._parentDrag._dragRef);\n        return;\n      }\n\n      // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n      // the item was projected into another item by something like `ngTemplateOutlet`.\n      let parent = this.element.nativeElement.parentElement;\n      while (parent) {\n        const parentDrag = this._dragDropRegistry.getDragDirectiveForNode(parent);\n        if (parentDrag) {\n          ref.withParent(parentDrag._dragRef);\n          break;\n        }\n        parent = parent.parentElement;\n      }\n    });\n  }\n\n  /** Handles the events from the underlying `DragRef`. */\n  private _handleEvents(ref: DragRef<CdkDrag<T>>) {\n    ref.started.subscribe(startEvent => {\n      this.started.emit({source: this, event: startEvent.event});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.released.subscribe(releaseEvent => {\n      this.released.emit({source: this, event: releaseEvent.event});\n    });\n\n    ref.ended.subscribe(endEvent => {\n      this.ended.emit({\n        source: this,\n        distance: endEvent.distance,\n        dropPoint: endEvent.dropPoint,\n        event: endEvent.event,\n      });\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(enterEvent => {\n      this.entered.emit({\n        container: enterEvent.container.data,\n        item: this,\n        currentIndex: enterEvent.currentIndex,\n      });\n    });\n\n    ref.exited.subscribe(exitEvent => {\n      this.exited.emit({\n        container: exitEvent.container.data,\n        item: this,\n      });\n    });\n\n    ref.dropped.subscribe(dropEvent => {\n      this.dropped.emit({\n        previousIndex: dropEvent.previousIndex,\n        currentIndex: dropEvent.currentIndex,\n        previousContainer: dropEvent.previousContainer.data,\n        container: dropEvent.container.data,\n        isPointerOverContainer: dropEvent.isPointerOverContainer,\n        item: this,\n        distance: dropEvent.distance,\n        dropPoint: dropEvent.dropPoint,\n        event: dropEvent.event,\n      });\n    });\n  }\n\n  /** Assigns the default input values based on a provided config object. */\n  private _assignDefaults(config: DragDropConfig) {\n    const {\n      lockAxis,\n      dragStartDelay,\n      constrainPosition,\n      previewClass,\n      boundaryElement,\n      draggingDisabled,\n      rootElementSelector,\n      previewContainer,\n    } = config;\n\n    this.disabled = draggingDisabled == null ? false : draggingDisabled;\n    this.dragStartDelay = dragStartDelay || 0;\n\n    if (lockAxis) {\n      this.lockAxis = lockAxis;\n    }\n\n    if (constrainPosition) {\n      this.constrainPosition = constrainPosition;\n    }\n\n    if (previewClass) {\n      this.previewClass = previewClass;\n    }\n\n    if (boundaryElement) {\n      this.boundaryElement = boundaryElement;\n    }\n\n    if (rootElementSelector) {\n      this.rootElementSelector = rootElementSelector;\n    }\n\n    if (previewContainer) {\n      this.previewContainer = previewContainer;\n    }\n  }\n\n  /** Sets up the listener that syncs the handles with the drag ref. */\n  private _setupHandlesListener() {\n    // Listen for any newly-added handles.\n    this._handles\n      .pipe(\n        // Sync the new handles with the DragRef.\n        tap(handles => {\n          const handleElements = handles.map(handle => handle.element);\n\n          // Usually handles are only allowed to be a descendant of the drag element, but if\n          // the consumer defined a different drag root, we should allow the drag element\n          // itself to be a handle too.\n          if (this._selfHandle && this.rootElementSelector) {\n            handleElements.push(this.element);\n          }\n\n          this._dragRef.withHandles(handleElements);\n        }),\n        // Listen if the state of any of the handles changes.\n        switchMap((handles: CdkDragHandle[]) => {\n          return merge(\n            ...handles.map(item => item._stateChanges.pipe(startWith(item))),\n          ) as Observable<CdkDragHandle>;\n        }),\n        takeUntil(this._destroyed),\n      )\n      .subscribe(handleInstance => {\n        // Enabled/disable the handle that changed in the DragRef.\n        const dragRef = this._dragRef;\n        const handle = handleInstance.element.nativeElement;\n        handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n      });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, OnDestroy, Input, InjectionToken, booleanAttribute} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_DROP_LIST_GROUP = new InjectionToken<CdkDropListGroup<unknown>>(\n  'CdkDropListGroup',\n);\n\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n@Directive({\n  selector: '[cdkDropListGroup]',\n  exportAs: 'cdkDropListGroup',\n  providers: [{provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup}],\n})\nexport class CdkDropListGroup<T> implements OnDestroy {\n  /** Drop lists registered inside the group. */\n  readonly _items = new Set<T>();\n\n  /** Whether starting a dragging sequence from inside this group is disabled. */\n  @Input({alias: 'cdkDropListGroupDisabled', transform: booleanAttribute})\n  disabled: boolean = false;\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NumberInput, coerceArray, coerceNumberProperty} from '../../coercion';\nimport {\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  Directive,\n  ChangeDetectorRef,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {Directionality} from '../../bidi';\nimport {_IdGenerator} from '../../a11y';\nimport {ScrollDispatcher} from '../../scrolling';\nimport {CDK_DROP_LIST, CdkDrag} from './drag';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from '../drag-events';\nimport {CDK_DROP_LIST_GROUP, CdkDropListGroup} from './drop-list-group';\nimport {DropListRef} from '../drop-list-ref';\nimport {DragRef} from '../drag-ref';\nimport {DragDrop} from '../drag-drop';\nimport {DropListOrientation, DragAxis, DragDropConfig, CDK_DRAG_CONFIG} from './config';\nimport {merge, Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {assertElementNode} from './assertions';\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    // Prevent child drop lists from picking up the same group as their parent.\n    {provide: CDK_DROP_LIST_GROUP, useValue: undefined},\n    {provide: CDK_DROP_LIST, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[attr.id]': 'id',\n    '[class.cdk-drop-list-disabled]': 'disabled',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  },\n})\nexport class CdkDropList<T = any> implements OnDestroy {\n  element = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  private _scrollDispatcher = inject(ScrollDispatcher);\n  private _dir = inject(Directionality, {optional: true});\n  private _group = inject<CdkDropListGroup<CdkDropList>>(CDK_DROP_LIST_GROUP, {\n    optional: true,\n    skipSelf: true,\n  });\n\n  /** Emits when the list has been destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the element's scrollable parents have been resolved. */\n  private _scrollableParentsResolved: boolean;\n\n  /** Keeps track of the drop lists that are currently on the page. */\n  private static _dropLists: CdkDropList[] = [];\n\n  /** Reference to the underlying drop list instance. */\n  _dropListRef: DropListRef<CdkDropList<T>>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: DropListOrientation;\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = inject(_IdGenerator).getId('cdk-drop-list-');\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: DragAxis;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  @Input({alias: 'cdkDropListDisabled', transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled || (!!this._group && this._group.disabled);\n  }\n  set disabled(value: boolean) {\n    // Usually we sync the directive and ref state right before dragging starts, in order to have\n    // a single point of failure and to avoid having to use setters for everything. `disabled` is\n    // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n    // the user in a disabled state, so we also need to sync it as it's being set.\n    this._dropListRef.disabled = this._disabled = value;\n  }\n  private _disabled: boolean;\n\n  /** Whether sorting within this drop list is disabled. */\n  @Input({alias: 'cdkDropListSortingDisabled', transform: booleanAttribute})\n  sortingDisabled: boolean;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true;\n\n  /** Functions that is used to determine whether an item can be sorted into a particular index. */\n  @Input('cdkDropListSortPredicate')\n  sortPredicate: (index: number, drag: CdkDrag, drop: CdkDropList) => boolean = () => true;\n\n  /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\n  @Input({alias: 'cdkDropListAutoScrollDisabled', transform: booleanAttribute})\n  autoScrollDisabled: boolean;\n\n  /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n  @Input('cdkDropListAutoScrollStep')\n  autoScrollStep: NumberInput;\n\n  /**\n   * Selector that will be used to resolve an alternate element container for the drop list.\n   * Passing an alternate container is useful for the cases where one might not have control\n   * over the parent node of the draggable items within the list (e.g. due to content projection).\n   * This allows for usages like:\n   *\n   * ```\n   * <div cdkDropList cdkDropListElementContainer=\".inner\">\n   *   <div class=\"inner\">\n   *     <div cdkDrag></div>\n   *   </div>\n   * </div>\n   * ```\n   */\n  @Input('cdkDropListElementContainer') elementContainerSelector: string | null;\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  readonly dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  readonly entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  readonly exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  @Output('cdkDropListSorted')\n  readonly sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\n\n  /**\n   * Keeps track of the items that are registered with this container. Historically we used to\n   * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n   * well which means that we can't handle cases like dragging the headers of a `mat-table`\n   * correctly. What we do instead is to have the items register themselves with the container\n   * and then we sort them based on their position in the DOM.\n   */\n  private _unsortedItems = new Set<CdkDrag>();\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const dragDrop = inject(DragDrop);\n    const config = inject<DragDropConfig>(CDK_DRAG_CONFIG, {optional: true});\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      assertElementNode(this.element.nativeElement, 'cdkDropList');\n    }\n\n    this._dropListRef = dragDrop.createDropList(this.element);\n    this._dropListRef.data = this;\n\n    if (config) {\n      this._assignDefaults(config);\n    }\n\n    this._dropListRef.enterPredicate = (drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n\n    this._dropListRef.sortPredicate = (\n      index: number,\n      drag: DragRef<CdkDrag>,\n      drop: DropListRef<CdkDropList>,\n    ) => {\n      return this.sortPredicate(index, drag.data, drop.data);\n    };\n\n    this._setupInputSyncSubscription(this._dropListRef);\n    this._handleEvents(this._dropListRef);\n    CdkDropList._dropLists.push(this);\n\n    if (this._group) {\n      this._group._items.add(this);\n    }\n  }\n\n  /** Registers an items with the drop list. */\n  addItem(item: CdkDrag): void {\n    this._unsortedItems.add(item);\n\n    // Only sync the items while dragging since this method is\n    // called when items are being initialized one-by-one.\n    if (this._dropListRef.isDragging()) {\n      this._syncItemsWithRef();\n    }\n  }\n\n  /** Removes an item from the drop list. */\n  removeItem(item: CdkDrag): void {\n    this._unsortedItems.delete(item);\n\n    // This method might be called on destroy so we always want to sync with the ref.\n    this._syncItemsWithRef();\n  }\n\n  /** Gets the registered items in the list, sorted by their position in the DOM. */\n  getSortedItems(): CdkDrag[] {\n    return Array.from(this._unsortedItems).sort((a: CdkDrag, b: CdkDrag) => {\n      const documentPosition = a._dragRef\n        .getVisibleElement()\n        .compareDocumentPosition(b._dragRef.getVisibleElement());\n\n      // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n      // tslint:disable-next-line:no-bitwise\n      return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n    });\n  }\n\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n\n    this._unsortedItems.clear();\n    this._dropListRef.dispose();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n  private _setupInputSyncSubscription(ref: DropListRef<CdkDropList>) {\n    if (this._dir) {\n      this._dir.change\n        .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n        .subscribe(value => ref.withDirection(value));\n    }\n\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        if (typeof drop === 'string') {\n          const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n\n          if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n          }\n\n          return correspondingDropList!;\n        }\n\n        return drop;\n      });\n\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      }\n\n      // Note that we resolve the scrollable parents here so that we delay the resolution\n      // as long as possible, ensuring that the element is in its final place in the DOM.\n      if (!this._scrollableParentsResolved) {\n        const scrollableParents = this._scrollDispatcher\n          .getAncestorScrollContainers(this.element)\n          .map(scrollable => scrollable.getElementRef().nativeElement);\n        this._dropListRef.withScrollableParents(scrollableParents);\n\n        // Only do this once since it involves traversing the DOM and the parents\n        // shouldn't be able to change without the drop list being destroyed.\n        this._scrollableParentsResolved = true;\n      }\n\n      if (this.elementContainerSelector) {\n        const container = this.element.nativeElement.querySelector(this.elementContainerSelector);\n\n        if (!container && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw new Error(\n            `CdkDropList could not find an element container matching the selector \"${this.elementContainerSelector}\"`,\n          );\n        }\n\n        ref.withElementContainer(container as HTMLElement);\n      }\n\n      ref.disabled = this.disabled;\n      ref.lockAxis = this.lockAxis;\n      ref.sortingDisabled = this.sortingDisabled;\n      ref.autoScrollDisabled = this.autoScrollDisabled;\n      ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n      ref\n        .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n        .withOrientation(this.orientation);\n    });\n  }\n\n  /** Handles events from the underlying DropListRef. */\n  private _handleEvents(ref: DropListRef<CdkDropList>) {\n    ref.beforeStarted.subscribe(() => {\n      this._syncItemsWithRef();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data,\n        currentIndex: event.currentIndex,\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data,\n      });\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data,\n      });\n    });\n\n    ref.dropped.subscribe(dropEvent => {\n      this.dropped.emit({\n        previousIndex: dropEvent.previousIndex,\n        currentIndex: dropEvent.currentIndex,\n        previousContainer: dropEvent.previousContainer.data,\n        container: dropEvent.container.data,\n        item: dropEvent.item.data,\n        isPointerOverContainer: dropEvent.isPointerOverContainer,\n        distance: dropEvent.distance,\n        dropPoint: dropEvent.dropPoint,\n        event: dropEvent.event,\n      });\n\n      // Mark for check since all of these events run outside of change\n      // detection and we're not guaranteed for something else to have triggered it.\n      this._changeDetectorRef.markForCheck();\n    });\n\n    merge(ref.receivingStarted, ref.receivingStopped).subscribe(() =>\n      this._changeDetectorRef.markForCheck(),\n    );\n  }\n\n  /** Assigns the default input values based on a provided config object. */\n  private _assignDefaults(config: DragDropConfig) {\n    const {lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation} =\n      config;\n\n    this.disabled = draggingDisabled == null ? false : draggingDisabled;\n    this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n    this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n    this.orientation = listOrientation || 'vertical';\n\n    if (lockAxis) {\n      this.lockAxis = lockAxis;\n    }\n  }\n\n  /** Syncs up the registered drag items with underlying drop list ref. */\n  private _syncItemsWithRef() {\n    this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, TemplateRef, Input, InjectionToken, inject, OnDestroy} from '@angular/core';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_DRAG_PLACEHOLDER = new InjectionToken<CdkDragPlaceholder>('CdkDragPlaceholder');\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]',\n  providers: [{provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder}],\n})\nexport class CdkDragPlaceholder<T = any> implements OnDestroy {\n  templateRef = inject<TemplateRef<T>>(TemplateRef);\n\n  private _drag = inject(CDK_DRAG_PARENT, {optional: true});\n\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    this._drag?._setPlaceholderTemplate(this);\n  }\n\n  ngOnDestroy(): void {\n    this._drag?._resetPlaceholderTemplate(this);\n  }\n}\n","<div\n  overlay-scrollbars\n  [options]=\"themeSignal()\"\n  [defer]\n  class=\"selected-expansion-panel-wrapper\"\n>\n  <div\n    cdkDropList\n    class=\"edit-program-list\"\n    (cdkDropListDropped)=\"drop($event)\"\n  >\n    <mat-accordion multi>\n      @for (\n        selectedExercise of selectedExercises();\n        track selectedExercise;\n        let i = $index\n      ) {\n        <!-- @for (selectedExercise of exercises; track selectedExercise; let i = $index) { -->\n        <mat-expansion-panel\n          class=\"exer-expansion-panel\"\n          cdkDrag\n          [cdkDragPreviewClass]=\"previewClass\"\n          [hideToggle]=\"false\"\n          [expanded]=\"isExpanded\"\n        >\n          <div\n            class=\"exercise-card-placeholder expansion-panel-placeholder\"\n            *cdkDragPlaceholder\n          ></div>\n          <mat-expansion-panel-header\n            collapsedHeight=\"80px\"\n            class=\"exer-expansion-panel-header\"\n          >\n            <div class=\"expansion-panel-handle\" cdkDragHandle>\n              <span class=\"handle-number\">{{ i + 1 }}</span>\n\n              <span>\n                <!-- <mat-icon>drag_handle</mat-icon> -->\n                <mat-icon>drag_indicator</mat-icon>\n              </span>\n            </div>\n            <mat-panel-title>\n              <div class=\"img-wrapper expanded-panels\">\n                <img\n                  class=\"selected-exercise-img expansion-img\"\n                  [src]=\"selectedExercise.images?.mainImg\"\n                  [alt]=\"selectedExercise.name[selectedLanguage]\"\n                />\n              </div>\n              <span class=\"title-name mat-body-medium\">{{\n                selectedExercise.name[selectedLanguage]\n              }}</span>\n              <!-- <button\n              (click)=\" $event.stopPropagation(); showExerciseModal(selectedExercise.id, selectedExercise)\"\n              mat-icon-button\n              matTooltip=\"Details\"\n              aria-label=\"Info icon-button with a info icon\"\n            >\n              <mat-icon>info</mat-icon>\n            </button> -->\n            </mat-panel-title>\n            <mat-panel-description class=\"panel-description\">\n              <div class=\"session-overview mat-body-medium\">\n                <!-- @if (selectedExercise.sets) { -->\n                <div>\n                  <span i18n=\"@@EditProgram.exerciseSets\">Sets: </span>\n                  <span>{{ selectedExercise.sets }}</span>\n                </div>\n                <!-- } -->\n                <!-- @if (selectedExercise.reps) { -->\n                <div>\n                  <span i18n=\"@@EditProgram.exerciseReps\">Reps: </span>\n                  <span>{{ selectedExercise.reps }}</span>\n                </div>\n                <!-- } -->\n                @if (selectedExercise.pause) {\n                  <div>\n                    <span i18n=\"@@EditProgram.exercisePause\">Pause: </span>\n                    <span>{{ selectedExercise.pause }}</span>\n                  </div>\n                }\n                @if (selectedExercise.weight) {\n                  <div>\n                    <span i18n=\"@@EditProgram.exerciseWeight\">Weight: </span>\n                    <span>{{ selectedExercise.weight }}</span>\n                  </div>\n                }\n                @if (selectedExercise.equipments.length !== 0) {\n                  <div>\n                    <span i18n=\"@@EditProgram.exerciseEquipment\">Eq: </span>\n                    @for (\n                      equipment of selectedExercise.equipments;\n                      track equipment;\n                      let last = $last\n                    ) {\n                      <span>{{\n                        equipment.translations[selectedLanguage]\n                      }}</span>\n                      @if (!last) {\n                        <span>, </span>\n                      }\n                    }\n                  </div>\n                }\n              </div>\n              <div class=\"options-wrapper\">\n                <!-- <button\n                (click)=\"\n                  $event.stopPropagation(); removeFromSelected(selectedExercise);\n                \"\n                mat-icon-button\n                matTooltip=\"Delete\"\n                aria-label=\"Delete icon-button with a delete icon\"\n              >\n                <mat-icon>delete_outline</mat-icon>\n              </button> -->\n                <button\n                  (click)=\"\n                    $event.stopPropagation();\n                    removeFromSelected(selectedExercise)\n                  \"\n                  mat-icon-button\n                  matTooltip=\"Delete\"\n                  i18n-matTooltip=\"@@EditProgram.removeExerciseTooltip\"\n                  aria-label=\"Delete icon-button with a delete icon\"\n                  i18n-aria-label=\"@@EditProgram.removeExerciseAriaLabel\"\n                >\n                  <mat-icon>delete_outline</mat-icon>\n                </button>\n                <button\n                  (click)=\"\n                    $event.stopPropagation();\n                    showExerciseModal(\n                      selectedExercise.id,\n                      selectedExercise,\n                      false\n                    )\n                  \"\n                  mat-icon-button\n                  matTooltip=\"Details\"\n                  i18n-matTooltip=\"@@EditProgram.detailsTooltip\"\n                  aria-label=\"Info icon-button with a info icon\"\n                  i18n-aria-label=\"@@EditProgram.detailsAriaLabel\"\n                >\n                  <mat-icon>info_outline</mat-icon>\n                </button>\n              </div>\n            </mat-panel-description>\n          </mat-expansion-panel-header>\n          <div class=\"panel-content\">\n            <div class=\"name-description-label\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label i18n=\"@@EditProgram.exerciseName\">Name</mat-label>\n                <input\n                  matInput\n                  [(ngModel)]=\"selectedExercise.name[selectedLanguage]\"\n                  type=\"text\"\n                  maxlength=\"100\"\n                  placeholder=\"Enter exercise name\"\n                  i18n-placeholder=\"@@EditProgram.exerciseNamePlaceholder\"\n                />\n              </mat-form-field>\n              <mat-form-field\n                appearance=\"outline\"\n                class=\"description-text-area\"\n              >\n                <mat-label i18n=\"@@EditProgram.exerciseDescription\"\n                  >Description</mat-label\n                >\n                <textarea\n                  matInput\n                  cdkTextareaAutosize\n                  placeholder=\"Enter exercise description\"\n                  i18n-placeholder=\"\n                    @@EditProgram.exerciseDescriptionPlaceholder\"\n                  [(ngModel)]=\"selectedExercise.description[selectedLanguage]\"\n                ></textarea>\n              </mat-form-field>\n            </div>\n            <div class=\"exercise-session\">\n              <mat-form-field appearance=\"outline\" class=\"panel-input\">\n                <mat-label i18n=\"@@EditProgram.exerciseSetsNoDots\"\n                  >Sets</mat-label\n                >\n                <input\n                  matInput\n                  [(ngModel)]=\"selectedExercise.sets\"\n                  type=\"number\"\n                  min=\"0\"\n                  placeholder=\"10\"\n                  value=\"10\"\n                />\n              </mat-form-field>\n              <mat-form-field appearance=\"outline\">\n                <mat-label i18n=\"@@EditProgram.exerciseRepsNoDots\"\n                  >Repetitions</mat-label\n                >\n                <input\n                  matInput\n                  [(ngModel)]=\"selectedExercise.reps\"\n                  type=\"number\"\n                  min=\"0\"\n                  placeholder=\"10\"\n                  value=\"10\"\n                />\n              </mat-form-field>\n              <mat-form-field appearance=\"outline\">\n                <mat-label i18n=\"@@EditProgram.exercisePauseNoDots\"\n                  >Pause</mat-label\n                >\n                <input\n                  matInput\n                  [(ngModel)]=\"selectedExercise.pause\"\n                  type=\"text\"\n                  placeholder=\"30s\"\n                />\n              </mat-form-field>\n              <mat-form-field appearance=\"outline\">\n                <mat-label i18n=\"@@EditProgram.exerciseWeightNoDots\"\n                  >Weight</mat-label\n                >\n                <input\n                  matInput\n                  [(ngModel)]=\"selectedExercise.weight\"\n                  type=\"text\"\n                  placeholder=\"2kg\"\n                />\n              </mat-form-field>\n            </div>\n          </div>\n        </mat-expansion-panel>\n      }\n    </mat-accordion>\n  </div>\n</div>\n","import {\n  AfterViewInit,\n  Component,\n  inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport { Exercise } from '../../models/exercise';\nimport {\n  MatExpansionPanel,\n  MatAccordion,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n  MatExpansionPanelDescription,\n} from '@angular/material/expansion';\nimport {\n  CdkDragDrop,\n  moveItemInArray,\n  CdkDropList,\n  CdkDrag,\n  CdkDragPlaceholder,\n  CdkDragHandle,\n} from '@angular/cdk/drag-drop';\nimport { SelectedExercisesService } from '../../services/selected-exercises.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Observable, Subscription } from 'rxjs';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { ThemeManagerService } from '@slowautomobile/ui';\nimport { CdkTextareaAutosize } from '@angular/cdk/text-field';\nimport { FormsModule } from '@angular/forms';\nimport { MatInput } from '@angular/material/input';\nimport { MatFormField, MatLabel } from '@angular/material/form-field';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { MatIconButton } from '@angular/material/button';\nimport { MatIcon } from '@angular/material/icon';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ExercisesService } from '../../services/exercises.service';\nimport { ExerciseModalComponent } from '../exercise-modal/exercise-modal.component';\nimport { LocalstorageService } from '@slowautomobile/users';\n\n@Component({\n  selector: 'exercises-selected-expansion-panel',\n  templateUrl: './selected-expansion-panel.component.html',\n  styleUrl: './selected-expansion-panel.component.scss',\n  imports: [\n    OverlayscrollbarsModule,\n    CdkDropList,\n    MatAccordion,\n    MatExpansionPanel,\n    CdkDrag,\n    CdkDragPlaceholder,\n    MatExpansionPanelHeader,\n    CdkDragHandle,\n    MatIcon,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatIconButton,\n    MatTooltip,\n    MatFormField,\n    MatLabel,\n    MatInput,\n    FormsModule,\n    CdkTextareaAutosize,\n  ],\n})\nexport class SelectedExpansionPanelComponent implements OnInit, OnDestroy {\n  private selectedExercisesService = inject(SelectedExercisesService);\n  private _snackBar = inject(MatSnackBar);\n  dialog = inject(MatDialog);\n  private exercisesService = inject(ExercisesService);\n  private localstorageService = inject(LocalstorageService);\n\n  @Input() exercise!: Exercise;\n  // @Input() programName!: string;\n  previewClass = 'expansion-panel-custom-preview';\n\n  @ViewChildren(MatExpansionPanel) panels!: QueryList<MatExpansionPanel>;\n  selectedExercises = this.selectedExercisesService.selectedExercises;\n  removedExercise?: Exercise | null;\n  isExpanded = false;\n  subscriptions = new Subscription();\n  selectedLanguage!: 'en' | 'de' | 'sr';\n\n  themeManager = inject(ThemeManagerService);\n  themeSignal = this.themeManager.themeSignal;\n\n  ngOnInit(): void {\n    this.selectedLanguage = this._getUserLanguageToken();\n  }\n\n  togglePanel(index: number) {\n    // Use the index to get the specific panel reference from the array and toggle its state\n    const panelToToggle = this.panels.toArray()[index];\n\n    if (panelToToggle) {\n      panelToToggle.toggle();\n    }\n  }\n\n  private _getExercise(exerciseId: string): Observable<Exercise> {\n    return this.exercisesService.getExercise(exerciseId);\n  }\n\n  showExerciseModal(\n    exerciseId: string,\n    exerciseCard: Exercise,\n    isProgramExercise: boolean,\n  ): void {\n    const subscription = this._getExercise(exerciseId).subscribe(exercise => {\n      this.dialog.open(ExerciseModalComponent, {\n        data: {\n          fullExercise: exercise,\n          exerciseCard: exerciseCard,\n          isProgramExercise: isProgramExercise,\n          selectedLang: this.selectedLanguage,\n        },\n        width: '500px',\n        // height: '736px',\n        panelClass: ['custom-dialog', isProgramExercise ? 'custom-shadow' : ''],\n        // disableClose: isProgramExercise,\n        // hasBackdrop: isProgramExercise ? false : true,\n        backdropClass: isProgramExercise ? 'custom-backdrop' : '',\n        // enterAnimationDuration: 0,\n      });\n    });\n    this.subscriptions.add(subscription);\n  }\n\n  drop(event: CdkDragDrop<string[]>) {\n    moveItemInArray(\n      this.selectedExercises(),\n      event.previousIndex,\n      event.currentIndex,\n    );\n  }\n\n  // Remove and undo with message snackbar\n  removeFromSelected(exercise: Exercise) {\n    this.selectedExercisesService.removeFromSelected(exercise);\n    this.removedExercise = exercise;\n\n    // Can't set custom style correctly; wait for m3 ng material, until then snackBar component or CHANGE COMPLETE MATERIAL THEME!!!\n    const snackBarRef = this._snackBar.open(\n      $localize`:@@Snackbar.exerciseDeleted:Exercise deleted`,\n      $localize`:@@Snackbar.undoButton:Undo`,\n      {\n        duration: 4000,\n        panelClass: ['custom-snackbar-style'],\n      },\n    );\n\n    // Listen for the Undo action\n    const subscription = snackBarRef\n      .onAction()\n      .subscribe(() => this.undoRemove());\n    this.subscriptions.add(subscription);\n\n    console.log(this.selectedExercisesService.selectedExercises());\n  }\n\n  undoRemove(): void {\n    if (this.removedExercise) {\n      // Add the removed item back to its original position\n      // this.items.splice(this.removedItem.index, 0, this.removedItem.value);\n      this.selectedExercisesService.addToSelected(this.removedExercise);\n\n      // Reset the removedItem reference\n      this.removedExercise = null;\n    }\n  }\n\n  private _getUserLanguageToken(): 'en' | 'de' | 'sr' {\n    return <'en' | 'de' | 'sr'>(\n      this.localstorageService.getToken('userLanguage')?.split('-')[0]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","<div class=\"table-wrapper basic-table-wrapper\">\n  <div class=\"programs-filter-container all-programs-input-wrapp\">\n    <div class=\"all-program-list-title\">\n      <h3\n        class=\"mat-title-large\"\n        i18n=\"@@ClientFormBasicProgramsTable.titlePlaceholder\"\n      >\n        List of program templates\n      </h3>\n    </div>\n    <mat-divider\n      vertical\n      style=\"display: inline-block; height: 24px\"\n    ></mat-divider>\n    <mat-form-field appearance=\"outline\" class=\"basic-program-filter\">\n      <mat-label i18n=\"@@ClientFormBasicProgramsTable.searchInputLabel\"\n        >Search</mat-label\n      >\n      <input\n        matInput\n        (keyup)=\"applyFilter($event)\"\n        placeholder=\"Ex. Seated back stretch\"\n        i18n-placeholder=\"@@ClientFormBasicProgramsTable.searchInputPlaceholder\"\n        #input\n      />\n    </mat-form-field>\n  </div>\n\n  <!-- <div class=\"mat-elevation-z8 programs-table\"> -->\n  <div class=\"programs-table\">\n    <div\n      overlay-scrollbars\n      [options]=\"themeSignal()\"\n      [defer]\n      class=\"table-scroll-container\"\n    >\n      <!-- @if (!isFetchingData()) { -->\n        <table\n          mat-table\n          class=\"mat-basic-program-table\"\n          [dataSource]=\"dataSource\"\n          matSort\n        >\n          <!-- ID Column -->\n          <!-- <ng-container matColumnDef=\"id\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>ID</th>\n            <td mat-cell *matCellDef=\"let row\">{{ row.id }}</td>\n          </ng-container> -->\n          <!-- Name Column -->\n          <ng-container matColumnDef=\"name\">\n            <th\n              mat-header-cell\n              *matHeaderCellDef\n              mat-sort-header\n              i18n=\"@@ClientFormBasicProgramsTable.tableColumnName\"\n            >\n              Name\n            </th>\n            <td mat-cell *matCellDef=\"let row\">\n              <span class=\"name-cell-width\">{{ row.name }}</span>\n            </td>\n          </ng-container>\n          <!-- Options Column -->\n          <ng-container matColumnDef=\"options\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let row\">\n              <div class=\"program-options\">\n                <button\n                  mat-icon-button\n                  matTooltip=\"View\"\n                  i18n-matTooltip=\"\n                    @@ClientFormBasicProgramsTable.viewButtonTooltip\"\n                  aria-label=\"View icon button\"\n                  i18n-aria-label=\"\n                    @@ClientFormBasicProgramsTable.viewButtonAriaLabel\"\n                  (click)=\"viewProgramModal(row.id)\"\n                >\n                  <mat-icon>visibility</mat-icon>\n                </button>\n                <button\n                  mat-icon-button\n                  matTooltip=\"Add to client\"\n                  i18n-matTooltip=\"\n                    @@ClientFormBasicProgramsTable.addToClientButtonTooltip\"\n                  aria-label=\"Add icon button\"\n                  i18n-aria-label=\"\n                    @@ClientFormBasicProgramsTable.addToClientButtonAriaLabel\"\n                  (click)=\"addProgramToClient(row.id)\"\n                >\n                  <mat-icon>add</mat-icon>\n                </button>\n              </div>\n            </td>\n          </ng-container>\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr\n            mat-row\n            *matRowDef=\"let row; columns: displayedColumns\"\n            class=\"table-rows truncate\"\n          ></tr>\n          <!-- Row shown when there is no matching data. -->\n          <tr class=\"mat-row\" *matNoDataRow>\n            <td\n              class=\"mat-cell\"\n              colspan=\"4\"\n              i18n=\"@@ClientFormBasicProgramsTable.noDataMatching\"\n            >\n              No data matching the filter \"{{ input.value }}\"\n            </td>\n          </tr>\n        </table>\n      <!-- } @else {\n        <div class=\"programs-table-skeleton\">\n          <div class=\"row-skeleton\" style=\"height: 48px; margin-top: 8px\">\n            <div></div>\n          </div>\n          <div class=\"row-skeleton\">\n            <div></div>\n            <div></div>\n          </div>\n          <div class=\"row-skeleton\">\n            <div></div>\n            <div></div>\n          </div>\n          <div class=\"row-skeleton\">\n            <div></div>\n            <div></div>\n          </div>\n          <div class=\"row-skeleton\">\n            <div></div>\n            <div></div>\n          </div>\n        </div>\n      } -->\n    </div>\n\n    <mat-paginator\n      class=\"mat-basic-program-paginator\"\n      pageSize=\"10\"\n      [pageSizeOptions]=\"[5, 10, 25, 100]\"\n      aria-label=\"Select page of programs\"\n      i18n-aria-label=\"\n        @@ClientFormBasicProgramsTable.selectPageOfProgramsAriaLabel\"\n    ></mat-paginator>\n  </div>\n</div>\n","import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  inject,\n  Input,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport {\n  MatPaginator,\n  MatPaginatorIntl,\n  MatPaginatorModule,\n} from '@angular/material/paginator';\nimport { MatSort, MatSortHeader } from '@angular/material/sort';\nimport {\n  MatTableDataSource,\n  MatTable,\n  MatColumnDef,\n  MatHeaderCellDef,\n  MatHeaderCell,\n  MatCellDef,\n  MatCell,\n  MatHeaderRowDef,\n  MatHeaderRow,\n  MatRowDef,\n  MatRow,\n  MatNoDataRow,\n} from '@angular/material/table';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { Program, ShareStateService } from '@slowautomobile/exercises';\nimport { ThemeManagerService } from '../../services/theme-manager.service';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { MatIconButton } from '@angular/material/button';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\nimport { MatInput } from '@angular/material/input';\nimport { MatFormField, MatLabel } from '@angular/material/form-field';\nimport { MatDivider } from '@angular/material/divider';\nimport { PaginatorI18nService } from '../../services/paginator-i18n.service';\n\n@Component({\n    selector: 'ui-basic-programs-table',\n    templateUrl: './basic-programs-table.component.html',\n    styleUrl: './basic-programs-table.component.scss',\n    imports: [\n        MatDivider,\n        MatFormField,\n        MatLabel,\n        MatInput,\n        OverlayscrollbarsModule,\n        MatTable,\n        MatSort,\n        MatColumnDef,\n        MatHeaderCellDef,\n        MatHeaderCell,\n        MatSortHeader,\n        MatCellDef,\n        MatCell,\n        MatIconButton,\n        MatTooltip,\n        MatIcon,\n        MatHeaderRowDef,\n        MatHeaderRow,\n        MatRowDef,\n        MatRow,\n        MatNoDataRow,\n        MatPaginatorModule,\n    ],\n    providers: [{ provide: MatPaginatorIntl, useClass: PaginatorI18nService }]\n})\nexport class BasicProgramsTableComponent implements AfterViewInit {\n  private shareStateService = inject(ShareStateService);\n\n  // isFetchingData = this.shareStateService.isFetchingData;\n  \n  displayedColumns: string[] = ['name', 'options'];\n  @Input() dataSource = new MatTableDataSource<Program>();\n  @ViewChild(MatSort) sort!: MatSort;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n\n  @Output() getProgramsEvent: EventEmitter<string> = new EventEmitter();\n\n  @Output() viewProgramEvent: EventEmitter<any> = new EventEmitter();\n  @Output() addProgramToClientEvent: EventEmitter<any> = new EventEmitter();\n\n  themeManager = inject(ThemeManagerService);\n  themeSignal = this.themeManager.themeSignal;\n\n  getPrograms(listOption: string) {\n    console.log(this.dataSource.data);\n    this.getProgramsEvent.emit(listOption);\n    console.log(this.dataSource.data);\n  }\n\n  viewProgramModal(programId: string) {\n    this.viewProgramEvent.emit(programId);\n    // console.log('this is open view program', programId);\n  }\n\n  addProgramToClient(programId: string) {\n    this.addProgramToClientEvent.emit(programId);\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n}\n"]}