{"version":3,"mappings":"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","names":["ɵɵelement","ɵɵproperty","ɵɵpipeBind1","ctx_r0","programs$","isProgramCompleted","ɵɵelementStart","ɵɵelementEnd","ShowClientModalComponent","_ShowClientModalComponent","constructor","dialogRef","inject","MatDialogRef","data","MAT_DIALOG_DATA","formBuilder","FormBuilder","clientsService","ClientsService","programsService","ProgramsService","router","Router","_snackBar","MatSnackBar","shareClientsDataService","ShareClientsDataService","programs","subscriptions","Subscription","fullEditButtonString","date","Date","clientInfo","themeManager","ThemeManagerService","themeSignal","ngOnInit","_initForm","subscription","getClient","clientId","subscribe","client","clientForm","setValue","firstName","lastName","email","phone","of","console","log","currentDate","forEach","program","adaptedProgram","programStartDate","dateRange","start","programEndDate","end","totalDuration","getTime","elapsedTime","progress","Math","min","push","add","form","group","Validators","required","name","controls","_updateClient","updateClient","updatedClient","open","duration","panelClass","fullEditMode","clientName","set","programPosition","programId","programName","navigateByUrl","close","onConfirm","value","deleteClientProgram","onClose","ngOnDestroy","unsubscribe","selectors","decls","vars","consts","i18n_0","ɵɵtext","ɵɵi18n","ɵɵtemplate","ShowClientModalComponent_Defer_22_Template","ShowClientModalComponent_DeferPlaceholder_23_Template","ɵɵdefer","ShowClientModalComponent_Defer_24_DepsFn","ɵɵlistener","ShowClientModalComponent_Template_button_click_27_listener","ctx","ShowClientModalComponent_Template_button_click_32_listener","ShowClientModalComponent_Template_button_click_34_listener","ɵɵadvance","ɵɵtextInterpolate1","title","invalid","MatDialogTitle","OverlayscrollbarsModule","OverlayScrollbarsComponent","FormsModule","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","ReactiveFormsModule","FormGroupDirective","FormControlName","MatFormField","MatLabel","MatInput","MatDialogActions","MatButton","MatIcon","styles","className","filePath","lineNumber"],"ignoreList":[],"sources":["libs/clients/src/lib/components/show-client-modal/show-client-modal.component.html","libs/clients/src/lib/components/show-client-modal/show-client-modal.component.ts"],"sourcesContent":["<!-- <div class=\"dialog-icon\">\n  <mat-icon>edit</mat-icon>\n</div> -->\n<div class=\"confirmation-dialog-wrapper\">\n  <div class=\"header-container\">\n    <h2 mat-dialog-title class=\"dialog-title mat-title-large\">\n      {{ data.title }}\n    </h2>\n    <!-- <button\n      mat-icon-button\n      (click)=\"onClose()\"\n      aria-label=\"Icon button with a close icon\"\n    >\n      <mat-icon>close</mat-icon>\n    </button> -->\n  </div>\n  <div\n    overlay-scrollbars\n    [options]=\"themeSignal()\"\n    [defer]\n    class=\"dialog-content-wrapper\"\n  >\n    <form [formGroup]=\"form\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label i18n=\"@@ClientModal.firstNameLabel\">Firstname</mat-label>\n        <input\n          matInput\n          formControlName=\"firstName\"\n          type=\"text\"\n          placeholder=\"Enter clients firstname\"\n          i18n-placeholder=\"@@ClientModal.firstNamePlaceholder\"\n        />\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label i18n=\"@@ClientModal.lastNameLabel\">Lastname</mat-label>\n        <input\n          matInput\n          formControlName=\"lastName\"\n          type=\"text\"\n          placeholder=\"Enter clients lastname\"\n          i18n-placeholder=\"@@ClientModal.lastNamePlaceholder\"\n        />\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label i18n=\"@@ClientModal.emailLabel\">Email</mat-label>\n        <input\n          matInput\n          formControlName=\"email\"\n          type=\"text\"\n          placeholder=\"Enter clients email\"\n          i18n-placeholder=\"@@ClientModal.emailPlaceholder\"\n        />\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label i18n=\"@@ClientModal.phoneLabel\">Phone</mat-label>\n        <input\n          matInput\n          formControlName=\"phone\"\n          type=\"text\"\n          placeholder=\"Enter clients phone number\"\n          i18n-placeholder=\"@@ClientModal.phonePlaceholder\"\n        />\n      </mat-form-field>\n\n      <!-- <mat-label>Programs</mat-label> -->\n\n      <!-- <mat-list class=\"program-list\">\n          @if (programs?.length !== 0) {\n            <div mat-subheader class=\"subheader-text\">Programs</div>\n          }\n          @for (programData of programs; track programData; let i = $index) {\n            <mat-list-item class=\"program-list-item\">\n              <mat-icon matListItemIcon>description</mat-icon>\n              <span matListItemTitle>{{ programData.program.name }}</span>\n              @if (isProgramCompleted[i]) {\n            \n                <span matListItemLine class=\"status-tooltip\">\n                  <span\n                    class=\"status-icon-wrapper\"\n                    style=\"background-color: #3f51b5\"\n                    matTooltip=\"Completed\"\n                  >\n                    <mat-icon\n                      aria-hidden=\"false\"\n                      aria-label=\"Done icon\"\n                      fontIcon=\"done\"\n                    ></mat-icon>\n                  </span>\n\n                  {{\n                    'Ended: ' + (programData.dateRange.end | date: 'd MMM yyyy')\n                  }}</span\n                >\n              } @else {\n\n                <span matListItemLine class=\"status-tooltip\">\n                  <span\n                    class=\"status-icon-wrapper\"\n                    style=\"background-color: #ff4081\"\n                    matTooltip=\"In progress\"\n                  >\n                    <mat-icon\n                      aria-hidden=\"false\"\n                      aria-label=\"In progress icon\"\n                      fontIcon=\"autorenew\"\n                    ></mat-icon>\n                  </span>\n\n                  {{\n                    'Ends: ' + (programData.dateRange.end | date: 'd MMM yyyy')\n                  }}</span\n                >\n              }\n\n\n              <span matListItemMeta class=\"list-action-button\">\n               \n              </span>\n            </mat-list-item>\n            <mat-divider></mat-divider>\n          }\n        </mat-list> -->\n      @defer {\n        <clients-progress\n          [programs]=\"programs$ | async\"\n          [isProgramCompleted]=\"isProgramCompleted\"\n          [isDashboard]=\"false\"\n        ></clients-progress>\n      } @placeholder {\n        <div class=\"programs-list-wrapper-placeholder\">\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n        </div>\n      }\n      <!-- <div class=\"status-toggle\">\n          <mat-label>Status</mat-label>\n          <mat-slide-toggle formControlName=\"completed\">\n            @if (clientForm['completed'].value) {\n              <span>Completed</span>\n            } @else {\n              <span>In progress</span>\n            }\n          </mat-slide-toggle>\n        </div> -->\n    </form>\n  </div>\n  <div mat-dialog-actions class=\"dialog-actions\">\n    <button\n      class=\"custom-btn\"\n      mat-flat-button\n      color=\"primary\"\n      (click)=\"fullEditMode(data.clientId, data.clientName)\"\n    >\n      <mat-icon>edit</mat-icon>\n      {{ fullEditButtonString }}\n    </button>\n    <div class=\"actions-wrapper\">\n      <button\n        mat-button\n        (click)=\"onClose()\"\n        class=\"dialog-buttons\"\n        cdkFocusInitial\n        i18n=\"@@ClientModal.cancelModalBtn\"\n      >\n        Cancel\n      </button>\n      <button\n        mat-button\n        class=\"dialog-buttons\"\n        (click)=\"onConfirm()\"\n        [disabled]=\"form.invalid\"\n        i18n=\"@@ClientModal.saveModalBtn\"\n      >\n        Save\n      </button>\n    </div>\n  </div>\n</div>\n","import { Component, inject, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogRef,\n  MatDialogTitle,\n  MatDialogActions,\n} from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport {\n  Client,\n  ClientsService,\n  ProgramsService,\n  ShareClientsDataService,\n} from '@slowautomobile/exercises';\nimport { ThemeManagerService } from '@slowautomobile/ui';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatButton } from '@angular/material/button';\nimport { ClientsProgressComponent } from '../clients-progress/clients-progress.component';\nimport { MatInput } from '@angular/material/input';\nimport { MatFormField, MatLabel } from '@angular/material/form-field';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\nimport { AsyncPipe } from '@angular/common';\n\ninterface DialogData {\n  title: string;\n  clientId: string;\n  clientName: string;\n}\n\n@Component({\n  selector: 'clients-show-client-modal',\n  templateUrl: './show-client-modal.component.html',\n  styleUrl: './show-client-modal.component.scss',\n  imports: [\n    MatDialogTitle,\n    OverlayscrollbarsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatFormField,\n    MatLabel,\n    MatInput,\n    ClientsProgressComponent,\n    MatDialogActions,\n    MatButton,\n    MatIcon,\n    AsyncPipe,\n  ],\n})\nexport class ShowClientModalComponent implements OnInit, OnDestroy {\n  dialogRef = inject<MatDialogRef<ShowClientModalComponent>>(MatDialogRef);\n  data = inject<DialogData>(MAT_DIALOG_DATA);\n  private formBuilder = inject(FormBuilder);\n  private clientsService = inject(ClientsService);\n  private programsService = inject(ProgramsService);\n  private router = inject(Router);\n  private _snackBar = inject(MatSnackBar);\n  private shareClientsDataService = inject(ShareClientsDataService);\n\n  form!: FormGroup;\n  programs: any[] | undefined = [];\n  programs$!: Observable<any[] | undefined>;\n  subscriptions = new Subscription();\n\n  fullEditButtonString = $localize`:@@ClientModal.fullEditClientBtn:Full edit`;\n\n  date = new Date();\n  isProgramCompleted: boolean[] = [];\n  clientInfo = this.shareClientsDataService.clientInfo;\n\n  themeManager = inject(ThemeManagerService);\n  themeSignal = this.themeManager.themeSignal;\n\n  ngOnInit() {\n    this._initForm();\n\n    const subscription = this.clientsService\n      .getClient(this.data.clientId)\n      .subscribe(client => {\n        this.clientForm['firstName'].setValue(client.firstName);\n        this.clientForm['lastName'].setValue(client.lastName);\n        this.clientForm['email'].setValue(client.email);\n        this.clientForm['phone'].setValue(client.phone);\n        // this.clientForm['completed'].setValue(client.completed);\n\n        this.programs = client.programs;\n        this.programs$ = of(this.programs);\n        console.log(this.programs);\n        // this.programs$.subscribe(res => console.log(res));\n\n        // Make function out of this !!!\n        const currentDate = new Date();\n        this.programs?.forEach(program => {\n          const adaptedProgram = program;\n          const programStartDate = new Date(adaptedProgram.dateRange.start);\n          const programEndDate = new Date(adaptedProgram.dateRange.end);\n\n          const totalDuration =\n            programEndDate.getTime() - programStartDate.getTime();\n          const elapsedTime =\n            currentDate.getTime() - programStartDate.getTime();\n          const progress = Math.min((elapsedTime / totalDuration) * 100, 100); // Ensure progress doesn't exceed 100%\n          adaptedProgram.progress = progress;\n\n          if (programEndDate < currentDate) {\n            this.isProgramCompleted.push(true);\n            console.log('This program is completed');\n          } else {\n            this.isProgramCompleted.push(false);\n            console.log('This program is in progress');\n          }\n        });\n\n        // console.log(client);\n        // console.log(this.programs);\n        // console.log(this.isProgramCompleted);\n      });\n    this.subscriptions.add(subscription);\n  }\n\n  private _initForm() {\n    this.form = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      name: [''],\n      email: [''],\n      phone: ['', Validators.required],\n      // completed: [false],\n    });\n  }\n\n  get clientForm() {\n    return this.form.controls;\n  }\n\n  private _updateClient(client: Client, clientId: string) {\n    const subscription = this.clientsService\n      .updateClient(client, clientId)\n      .subscribe(updatedClient => {\n        this._snackBar.open(\n          $localize`:@@Snackbar.clientUpdated:Client updated`,\n          '',\n          {\n            duration: 2000,\n            panelClass: ['custom-snackbar-style'],\n          },\n        );\n        console.log(updatedClient);\n      });\n    this.subscriptions.add(subscription);\n  }\n\n  fullEditMode(clientId: string, clientName: string) {\n    console.log(clientName);\n    this.clientInfo.set({\n      clientId: clientId,\n      clientName: clientName,\n      programPosition: 0,\n      programId: '',\n      programName: '',\n      dateRange: { start: '', end: '' },\n    });\n    this.router.navigateByUrl(`clients/form/${clientId}`);\n\n    // THIS IS ALTERNATIVE WHICH SHOULD BE IMPLEMENTED WHEN ALL SIGNAL DEPENDENCIES ARE ADJUSTED/REMOVED\n    // this.router.navigate([`clients/form/${clientId}`], {\n    //   queryParams: {\n    //     clientName: `${clientName}`,\n    //   },\n    // });\n\n    this.dialogRef.close(true);\n\n    console.log(clientId);\n  }\n\n  onConfirm(): void {\n    const updatedClient: Client = {\n      firstName: this.clientForm['firstName'].value,\n      lastName: this.clientForm['lastName'].value,\n      name: this.clientForm['name'].value,\n      email: this.clientForm['email'].value,\n      phone: this.clientForm['phone'].value,\n      // completed: this.clientForm['completed'].value,\n    };\n\n    this._updateClient(updatedClient, this.data.clientId);\n\n    this.dialogRef.close(true);\n  }\n\n  // Implement options for viewing/editing. ARE THEY REDUNDANT, SINCE THERE IS \"Switch to full edit\"? Also, where should \"View\" button lead, in clients programs table or in \"Reuse\" program editor???\n  // viewClientProgram() {\n  //   console.log('view client program');\n  // }\n\n  deleteClientProgram() {\n    console.log('delete client program');\n  }\n\n  onClose(): void {\n    this.dialogRef.close();\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n"]}