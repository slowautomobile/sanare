{"version":3,"mappings":"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","names":["UserEditFormComponent","_UserEditFormComponent","constructor","formBuilder","inject","FormBuilder","route","ActivatedRoute","usersService","UsersService","router","Router","_snackBar","MatSnackBar","shareStateService","ShareStateService","activePageTitle","ActivePageService","pageTitle","backNavigation","userName","subscriptions","Subscription","editMode","userId","isLoading","ngOnInit","set","_initForm","_checkEditMode","form","group","id","firstName","Validators","required","lastName","email","phone","profilePicture","address","street","streetNumber","city","zipCode","country","credentials","title","qualifications","licences","company","favorites","favExercises","favPrograms","subscription","getUser","subscribe","user","profileImg","console","log","get","setValue","add","onSubmit","invalid","open","duration","panelClass","userForm","value","userFormData","FormData","Object","keys","map","key","subKey","combinedKey","append","_updateUser","updateUser","createdUser","getFavorites","pipe","take","lastValueFrom","timer","then","navigateByUrl","onBack","controls","ngOnDestroy","unsubscribe","selectors","decls","vars","consts","template","UserEditFormComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","UserEditFormComponent_Template_ui_page_toolbar_cancelEvent_1_listener","UserEditFormComponent_Template_ui_page_toolbar_submitEvent_1_listener","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵproperty","PageToolbarComponent","ClientFullEditFormComponent","FormsModule","ɵNgNoValidate","NgControlStatusGroup","ReactiveFormsModule","FormGroupDirective","styles","className","filePath","lineNumber"],"ignoreList":[],"sources":["apps/sanare-app/src/app/pages/users/user-edit-form/user-edit-form.component.ts","apps/sanare-app/src/app/pages/users/user-edit-form/user-edit-form.component.html"],"sourcesContent":["import { Component, OnDestroy, OnInit, inject } from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { UsersService } from '@slowautomobile/users';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { lastValueFrom, timer, Subscription, share, take } from 'rxjs';\nimport {\n  PageToolbarComponent,\n  ClientFullEditFormComponent,\n  ActivePageService,\n} from '@slowautomobile/ui';\nimport { ShareStateService } from '@slowautomobile/exercises';\n\n@Component({\n  selector: 'sanareapp-edit-form',\n  templateUrl: './user-edit-form.component.html',\n  styleUrl: './user-edit-form.component.scss',\n  imports: [\n    PageToolbarComponent,\n    ClientFullEditFormComponent,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class UserEditFormComponent implements OnInit, OnDestroy {\n  private formBuilder = inject(FormBuilder);\n  private route = inject(ActivatedRoute);\n  private usersService = inject(UsersService);\n  private router = inject(Router);\n  private _snackBar = inject(MatSnackBar);\n  private shareStateService = inject(ShareStateService);\n  private activePageTitle = inject(ActivePageService);\n\n  pageTitle = this.activePageTitle.pageTitle;\n  backNavigation = this.activePageTitle.backNavigation;\n\n  userName = this.usersService.userName;\n  // getFavorites = this.usersService.getFavorites;\n\n  subscriptions = new Subscription();\n\n  form!: FormGroup;\n  editMode = false;\n  userId = this.usersService.userId;\n  isLoading = this.shareStateService.isLoading;\n\n  ngOnInit(): void {\n    this.pageTitle.set($localize`:@@UserForm.pageTitle:User profile`);\n    this.backNavigation.set(true);\n\n    this._initForm();\n    this._checkEditMode();\n\n    // this.form.valueChanges.subscribe(value => console.log(value));\n  }\n\n  // For the sake of form reusability, 'clientInfo' will remain as field name\n  // FINISH THIS SO VALUE CAN BE SET AND SAVED !!! FINISH PROFILE EDIT PAGE ! ! ! !\n  private _initForm() {\n    this.form = this.formBuilder.group({\n      id: [''],\n      // name: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', Validators.required],\n      phone: ['', Validators.required],\n      profilePicture: [''],\n      address: this.formBuilder.group({\n        street: [''],\n        streetNumber: [''],\n        city: [''],\n        zipCode: [''],\n        country: [''],\n      }),\n      credentials: this.formBuilder.group({\n        title: [''],\n        qualifications: [''],\n        // qualifications: new FormControl(),\n        licences: [''],\n\n        // licences: this.formBuilder.array([]),\n        company: [''],\n      }),\n      favorites: this.formBuilder.group({\n        favExercises: [''],\n        favPrograms: [''],\n      }),\n    });\n  }\n\n  private _checkEditMode() {\n    if (this.userId()) {\n      this.editMode = true;\n\n      const subscription = this.usersService\n        .getUser(this.userId())\n        .subscribe(user => {\n          const profileImg = user.profilePicture;\n          // console.log(profileImg);\n          console.log(user);\n\n          this.form.get('id')?.setValue(this.userId());\n          // this.form.get('name')?.setValue(user.name);\n          this.form.get('firstName')?.setValue(user.firstName);\n          this.form.get('lastName')?.setValue(user.lastName);\n          this.form.get('email')?.setValue(user.email);\n          this.form.get('phone')?.setValue(user.phone);\n          this.form.get('profilePicture')?.setValue(user.profilePicture);\n          this.form.get('address.street')?.setValue(user.address?.street);\n          this.form\n            .get('address.streetNumber')\n            ?.setValue(user.address?.streetNumber);\n          this.form.get('address.city')?.setValue(user.address?.city);\n          this.form.get('address.zipCode')?.setValue(user.address?.zipCode);\n          this.form.get('address.country')?.setValue(user.address?.country);\n\n          this.form.get('credentials.title')?.setValue(user.credentials?.title);\n          this.form\n            .get('credentials.qualifications')\n            ?.setValue(user.credentials?.qualifications);\n          this.form\n            .get('credentials.licences')\n            ?.setValue(user.credentials?.licences);\n          this.form\n            .get('credentials.company')\n            ?.setValue(user.credentials?.company);\n\n          this.form\n            .get('favorites.favExercises')\n            ?.setValue(user.favorites?.favExercises);\n          this.form\n            .get('favorites.favPrograms')\n            ?.setValue(user.favorites?.favPrograms);\n        });\n      this.subscriptions.add(subscription);\n    }\n  }\n\n  onSubmit() {\n    if (this.form.invalid) {\n      this._snackBar.open(\n        $localize`:@@Snackbar.enterRequiredFields:Please enter required fields`,\n        '',\n        {\n          duration: 2000,\n          panelClass: ['custom-snackbar-style'],\n        },\n      );\n      return;\n    }\n    this.isLoading.set(true);\n    console.log(this.form);\n\n    /*  const userForm: User = {\n      id: this.userId(),\n      // name: this.form.get('name')?.value,\n      firstName: this.form.get('firstName')?.value,\n      lastName: this.form.get('lastName')?.value,\n      email: this.form.get('email')?.value,\n      phone: this.form.get('phone')?.value,\n      profilePicture: this.form.get('profilePicture')?.value,\n      address: {\n        street: this.form.get('address.street')?.value,\n        streetNumber: this.form.get('address.streetNumber')?.value,\n        city: this.form.get('address.city')?.value,\n        zipCode: this.form.get('address.zipCode')?.value,\n        country: this.form.get('address.country')?.value,\n      },\n    }; */\n    this.userName.set(\n      this.userForm['firstName'].value + ' ' + this.userForm['lastName'].value,\n    );\n\n    const userFormData = new FormData();\n\n    Object.keys(this.userForm).map(key => {\n      if (key === 'address') {\n        Object.keys(this.userForm[key].value).map(subKey => {\n          // Combined key is for example: form.get('address.street)?.value\n          const combinedKey = `${key}.${subKey}`;\n          userFormData.append(subKey, this.form.get(combinedKey)?.value);\n        });\n      } else if (key === 'credentials') {\n        Object.keys(this.userForm[key].value).map(subKey => {\n          // Combined key is for example: form.get('credentials.title)?.value\n          const combinedKey = `${key}.${subKey}`;\n          userFormData.append(subKey, this.form.get(combinedKey)?.value);\n        });\n      } else if (key === 'favorites') {\n        Object.keys(this.userForm[key].value).map(subKey => {\n          // Combined key is for example: form.get('credentials.title)?.value\n          const combinedKey = `${key}.${subKey}`;\n          userFormData.append(subKey, this.form.get(combinedKey)?.value);\n        });\n      } else {\n        userFormData.append(key, this.userForm[key].value);\n      }\n    });\n\n    if (this.editMode) {\n      this._updateUser(userFormData);\n    }\n  }\n\n  private _updateUser(userFormData: FormData) {\n    const subscription = this.usersService\n      .updateUser(userFormData, this.userId())\n      .subscribe(createdUser => {\n        this.usersService\n          .getFavorites(this.userId())\n          .pipe(take(1))\n          .subscribe(() => console.log('Thumbnail updated'));\n\n        console.log(createdUser);\n        this._snackBar.open(\n          $localize`:@@Snackbar.userUpdated:User updated`,\n          '',\n          {\n            duration: 2000,\n            panelClass: ['custom-snackbar-style'],\n          },\n        );\n        lastValueFrom(timer(1000)).then(() => {\n          this.isLoading.set(false);\n          this.router.navigateByUrl(`dashboard`);\n        });\n      });\n    this.subscriptions.add(subscription);\n  }\n\n  onBack() {\n    this.router.navigateByUrl('');\n  }\n\n  get userForm() {\n    return this.form.controls;\n  }\n\n  ngOnDestroy(): void {\n    this.backNavigation.set(false);\n    this.subscriptions.unsubscribe();\n  }\n}\n","<!-- This could be component!!!? -->\n<!-- <div class=\"page-title clients-title new-btn\">\n\n  <h2 class=\"primary-field main-title user-title mat-headline-small\">\n    User profile\n  </h2>\n\n</div>\n\n<div class=\"stepper-btns\">\n\n  <button\n    class=\"custom-btn\"\n    mat-stroked-button\n    color=\"primary\"\n    (click)=\"onBack()\"\n  >\n    Cancel\n  </button>\n\n  <button\n    class=\"custom-btn\"\n    [class.spinner]=\"isLoading\"\n    [disabled]=\"isLoading\"\n    mat-flat-button\n    color=\"primary\"\n    (click)=\"onSubmit()\"\n  >\n    Save\n  </button>\n</div> -->\n<div class=\"page-container\">\n  <ui-page-toolbar\n    [pageTitle]=\"pageTitle()\"\n    [cancelButton]=\"true\"\n    [submitButton]=\"true\"\n    (cancelEvent)=\"onBack()\"\n    (submitEvent)=\"onSubmit()\"\n  ></ui-page-toolbar>\n\n  <form [formGroup]=\"form\" class=\"form-wrapper\">\n    <!-- <div class=\"form-wrapper\"> -->\n    <ui-client-full-edit-form></ui-client-full-edit-form>\n    <!-- CONTINUE HERE!!!!!!!!!!!!! -->\n    <!-- <div class=\"profile-info\">\n        <h3>Profile picture</h3>\n        @defer {\n          <ui-upload-image></ui-upload-image>\n        }\n        <div class=\"info-summary\">\n          <div class=\"summary-row\">\n            <span>Name: </span>\n            <span\n              >{{ form.get('firstName')?.value }}\n              {{ form.get('lastName')?.value }}</span\n            >\n          </div>\n        </div>\n      </div> -->\n    <!-- </div> -->\n  </form>\n</div>\n"]}