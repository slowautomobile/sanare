{"version":3,"mappings":"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","names":["ProgramsListComponent","constructor","programsService","inject","ProgramsService","_snackBar","MatSnackBar","dialog","MatDialog","router","Router","clientsService","ClientsService","shareClientsDataService","ShareClientsDataService","usersService","UsersService","shareStateService","ShareStateService","activePageTitle","ActivePageService","pageTitle","pageType","dataSource","MatTableDataSource","isFetchingData","programs","subscriptions","Subscription","reuseProgram","userFavorites","userId","isAdmin","clientInfo","isAdminProgram","getPrograms","ngOnInit","set","clientId","clientName","programPosition","programId","programName","dateRange","start","end","createProgram","navigateByUrl","listOption","subscription","forkJoin","getAllClientsPrograms","subscribe","programsServiceList","clientsServiceList","clientsProgramList","map","program","forEach","favPrograms","some","favProgram","id","isFavorite","sort","a","b","name","localeCompare","data","add","programsList","_getFavoritePrograms","favoritePrograms","filter","openEditProgram","programToEdit","find","update","currentValue","__spreadProps","__spreadValues","navigate","queryParams","isClientProgram","isTemplate","reuseEditProgram","eventData","console","log","addClient","openDeleteConfirmationDialog","dialogRef","open","DeleteConfirmationDialogComponent","width","title","$localize","message","panelClass","afterClosed","result","deleteProgram","itemId","close","programToDelete","deleteClientProgram","position","duration","_updateFavorites","updatedFavorites","updateFavorites","favorites","addToFavorites","removeFromFavorites","updatedFavPrograms","favProgramId","ngOnDestroy","unsubscribe","ɵfac","r","ɵcmp","P","type","selectors","features","ɵɵProvidersFeature","provide","MatPaginatorIntl","useClass","PaginatorI18nService","decls","vars","consts","template","rf","ctx","ɵɵelementStart","ɵɵlistener","ɵɵelementEnd","$event","ɵɵproperty","ɵɵadvance","dependencies","PageToolbarComponent","ProgramsTableComponent","encapsulation","W"],"ignoreList":[],"sources":["apps/sanare-app/src/app/pages/programs/programs-list/programs-list.component.ts","apps/sanare-app/src/app/pages/programs/programs-list/programs-list.component.html"],"sourcesContent":["import {\n  AfterViewInit,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n  inject,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator, MatPaginatorIntl } from '@angular/material/paginator';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Router } from '@angular/router';\nimport {\n  ClientsService,\n  Program,\n  ProgramsService,\n  ShareClientsDataService,\n  ShareStateService,\n} from '@slowautomobile/exercises';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { Favorites, UsersService } from '@slowautomobile/users';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { DeleteConfirmationDialogComponent } from 'libs/ui/src/lib/components/deleteConfirmationDialog/deleteConfirmationDialog.component';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { Subscription, forkJoin } from 'rxjs';\nimport {\n  ActivePageService,\n  PageToolbarComponent,\n  PaginatorI18nService,\n  ProgramsTableComponent,\n} from '@slowautomobile/ui';\n\nexport interface ClientInfo {\n  clientId: string;\n  clientName: string;\n  programPosition: number;\n  programId: string;\n  programName: string;\n  dateRange: {\n    start: string;\n    end: string;\n  };\n}\n\n@Component({\n    selector: 'sanareapp-programs-list',\n    templateUrl: './programs-list.component.html',\n    styleUrl: './programs-list.component.scss',\n    imports: [PageToolbarComponent, ProgramsTableComponent],\n    providers: [{ provide: MatPaginatorIntl, useClass: PaginatorI18nService }]\n})\nexport class ProgramsListComponent implements OnInit, OnDestroy {\n  private programsService = inject(ProgramsService);\n  private _snackBar = inject(MatSnackBar);\n  dialog = inject(MatDialog);\n  private router = inject(Router);\n  private clientsService = inject(ClientsService);\n  private shareClientsDataService = inject(ShareClientsDataService);\n  private usersService = inject(UsersService);\n  private shareStateService = inject(ShareStateService);\n  private activePageTitle = inject(ActivePageService);\n\n  // Page info and inputs for ui-page-toolbar\n  // pageTitle = $localize`:@@ProgramsList.pageTitle:Programs`;\n  pageTitle = this.activePageTitle.pageTitle;\n  pageType = 'program';\n\n  // displayedColumns: string[] = ['name', 'numberOfExercises', 'type', 'options'];\n  dataSource = new MatTableDataSource<Program>();\n  isFetchingData = this.shareStateService.isFetchingData;\n  programs: Program[] | any[] = [];\n  removedProgram!: any | null;\n  // @ViewChild(MatSort) sort!: MatSort;\n  // @ViewChild(MatPaginator) paginator!: MatPaginator;\n  subscriptions = new Subscription();\n  // listOption: string = 'all';\n  // isClientProgram = this.shareClientsDataService.isClientProgram;\n  reuseProgram = this.shareClientsDataService.reuseProgram;\n  userFavorites = this.usersService.userFavorites;\n  userId = this.usersService.userId;\n  isAdmin = this.usersService.isAdmin;\n  clientInfo = this.shareClientsDataService.clientInfo;\n  isAdminProgram = this.programsService.isAdminProgram;\n\n  constructor() {\n    // Get data and assign the data to the data source for the table to render\n    this.getPrograms('all');\n    // this.changeListedItems();\n  }\n  //  FINISH THIS  COMPONENT !!!!!\n  ngOnInit(): void {\n    this.pageTitle.set($localize`:@@ProgramsList.pageTitle:Programs`);\n    // Reset clientInfo() signal data\n    this.clientInfo.set({\n      clientId: '',\n      clientName: '',\n      programPosition: 0,\n      programId: '',\n      programName: '',\n      dateRange: { start: '', end: '' },\n    });\n  }\n\n  // ngAfterViewInit() {\n  //   this.dataSource.paginator = this.paginator;\n  //   this.dataSource.sort = this.sort;\n  // }\n\n  /*   changeListedItems() {\n    console.log(this.listOption);\n    if (this.listOption === 'all') {\n      const subscription = forkJoin([\n        this.programsService.getPrograms(),\n        this.clientsService.getAllClientsPrograms(),\n      ]).subscribe(([programsServiceList, clientsServiceList]) => {\n        this.programs = [];\n\n        const clientsProgramList = clientsServiceList.map(\n          (clientInfo: any) => clientInfo.program,\n        );\n        this.programs = [...programsServiceList, ...clientsProgramList];\n        console.log(this.programs);\n        this.dataSource.data = this.programs;\n      });\n\n      this.subscriptions.add(subscription);\n    } else if (this.listOption === 'template') {\n      const subscription = this.programsService\n        .getPrograms()\n        .subscribe(programsList => {\n          this.programs = [];\n          this.programs = programsList;\n          this.dataSource.data = this.programs;\n\n          this.subscriptions.add(subscription);\n        });\n    } else if (this.listOption === 'client') {\n      const subscription = this.clientsService\n        .getAllClientsPrograms()\n        .subscribe(programsList => {\n          this.programs = [];\n          const clientsProgramList = programsList.map(\n            (clientInfo: any) => clientInfo.program,\n          );\n\n          this.programs = clientsProgramList;\n          this.dataSource.data = this.programs;\n\n          this.subscriptions.add(subscription);\n        });\n    } else if (this.listOption === 'favorite') {\n      // Implement logic for favorite programs. isFavorite field should be added to program model\n      this.programs = [];\n      this.dataSource.data = this.programs;\n    }\n  } */\n  createProgram() {\n    this.router.navigateByUrl('/programs/form');\n  }\n\n  getPrograms(listOption: string) {\n    this.isFetchingData.set(true);\n    // const subscription = forkJoin([\n    //   this.programsService.getPrograms(),\n    //   this.clientsService.getAllClientsPrograms(),\n    // ]).subscribe(([programsServiceList, clientsServiceList]) => {\n    //   this.programs = [];\n    //   const clientsProgramList = clientsServiceList.map(\n    //     (clientInfo: any) => clientInfo.program,\n    //   );\n    //   this.programs = [...programsServiceList, ...clientsProgramList];\n    //   this.dataSource.data = this.programs;\n    // });\n\n    // this.subscriptions.add(subscription);\n    if (listOption === 'all') {\n      const subscription = forkJoin([\n        this.programsService.getPrograms(),\n        this.clientsService.getAllClientsPrograms(),\n      ]).subscribe(([programsServiceList, clientsServiceList]) => {\n        this.programs = [];\n\n        const clientsProgramList = clientsServiceList.map(\n          (clientInfo: any) => clientInfo.program,\n        );\n        this.programs = [...programsServiceList, ...clientsProgramList];\n\n        this.programs.forEach(program => {\n          // Check if program is favorite for user\n          if (\n            this.userFavorites().favPrograms.some(\n              favProgram => favProgram === program.id,\n            )\n          ) {\n            program.isFavorite = true;\n          } else {\n            program.isFavorite = false;\n          }\n        });\n\n        this.programs.sort((a, b) => {\n          return a.name.localeCompare(b.name);\n        });\n        this.dataSource.data = this.programs;\n        this.isFetchingData.set(false);\n      });\n      this.subscriptions.add(subscription);\n    } else if (listOption === 'template') {\n      this.isFetchingData.set(true);\n      const subscription = this.programsService\n        .getPrograms()\n        .subscribe(programsList => {\n          this.programs = [];\n          this.programs = programsList;\n\n          this.programs.forEach(program => {\n            // Check if program is favorite for user\n            if (\n              this.userFavorites().favPrograms.some(\n                favProgram => favProgram === program.id,\n              )\n            ) {\n              program.isFavorite = true;\n            } else {\n              program.isFavorite = false;\n            }\n          });\n\n          this.programs.sort((a, b) => {\n            return a.name.localeCompare(b.name);\n          });\n          this.dataSource.data = this.programs;\n          this.isFetchingData.set(false);\n        });\n      this.subscriptions.add(subscription);\n    } else if (listOption === 'client') {\n      this.isFetchingData.set(true);\n      const subscription = this.clientsService\n        .getAllClientsPrograms()\n        .subscribe(programsList => {\n          this.programs = [];\n          const clientsProgramList = programsList.map(\n            (clientInfo: any) => clientInfo.program,\n          );\n\n          this.programs = clientsProgramList;\n\n          this.programs.forEach(program => {\n            // Check if program is favorite for user\n            if (\n              this.userFavorites().favPrograms.some(\n                favProgram => favProgram === program.id,\n              )\n            ) {\n              program.isFavorite = true;\n            } else {\n              program.isFavorite = false;\n            }\n          });\n\n          this.programs.sort((a, b) => {\n            return a.name.localeCompare(b.name);\n          });\n          this.dataSource.data = this.programs;\n          this.isFetchingData.set(false);\n        });\n      this.subscriptions.add(subscription);\n    } else if (listOption === 'favorite') {\n      this._getFavoritePrograms();\n    }\n  }\n\n  _getFavoritePrograms() {\n    this.isFetchingData.set(true);\n\n    const subscription = forkJoin([\n      this.programsService.getPrograms(),\n      this.clientsService.getAllClientsPrograms(),\n    ]).subscribe(([programsServiceList, clientsServiceList]) => {\n      this.programs = [];\n      let favoritePrograms = [];\n\n      const clientsProgramList = clientsServiceList.map(\n        (clientInfo: any) => clientInfo.program,\n      );\n      this.programs = [...programsServiceList, ...clientsProgramList];\n\n      favoritePrograms = this.programs.filter(program => {\n        // Check if program is favorite for user\n        if (\n          this.userFavorites().favPrograms.some(\n            favProgram => favProgram === program.id,\n          )\n        ) {\n          program.isFavorite = true;\n          return true;\n        } else {\n          program.isFavorite = false;\n          return false;\n        }\n      });\n\n      favoritePrograms.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n      });\n      this.dataSource.data = favoritePrograms;\n      this.isFetchingData.set(false);\n    });\n    this.subscriptions.add(subscription);\n  }\n\n  // applyFilter(event: Event) {\n  //   const filterValue = (event.target as HTMLInputElement).value;\n  //   this.dataSource.filter = filterValue.trim().toLowerCase();\n\n  //   if (this.dataSource.paginator) {\n  //     this.dataSource.paginator.firstPage();\n  //   }\n  // }\n\n  // openEditProgramDialog(programId: string) {\n  //   const dialogRef = this.dialog.open(ShowProgramModalComponent, {\n  //     width: '500px',\n  //     data: {\n  //       title: 'Edit program',\n  //       programId: programId,\n  //     },\n  //     // disableClose: true, // Disable closing when clicked outside\n  //     panelClass: 'custom-delete-confirmation-dialog',\n  //   });\n\n  //   dialogRef.afterClosed().subscribe(result => {\n  //     if (result) {\n  //       this.getPrograms();\n  //     } else {\n  //       console.log('Program modal exited');\n  //     }\n  //   });\n  // }\n\n  openEditProgram(programId: string) {\n    // Iterate through all programs and find the one for editing, then check if it's template or client's program\n    const programToEdit = this.programs.find(\n      (program: Program) => program.id === programId,\n    );\n\n    // Update clientInfo() signal for new-program-stepper component template rendering\n    this.clientInfo.update((currentValue: ClientInfo) => ({\n      ...currentValue,\n      programName: programToEdit.name,\n    }));\n\n    // if (programToEdit.isTemplate) {\n    //   this.router.navigateByUrl(`programs/form/${programId}`);\n    // } else {\n    //   this.isClientProgram.set(true);\n    //   this.router.navigateByUrl(`programs/form/${programId}`);\n    // }\n    // Alternative\n    this.router.navigate([`programs/form/${programId}`], {\n      queryParams: {\n        programName: `${programToEdit.name}`,\n        isClientProgram: programToEdit.isTemplate ? 'false' : 'true',\n      },\n    });\n  }\n\n  reuseEditProgram(eventData: any) {\n    // Signal that program should be reused, so that mat-stepper goes to last step automatically\n    this.reuseProgram.set(true);\n\n    // Iterate through all programs and find the one for adding to client, then check if it's template or client's program\n\n    const programToEdit = this.programs.find(\n      (program: Program) => program.id === eventData.programId,\n    );\n\n    // Update clientInfo() signal for new-program-stepper component template rendering\n    this.clientInfo.update((currentValue: ClientInfo) => ({\n      ...currentValue,\n      programName: programToEdit.name,\n    }));\n\n    console.log(this.clientInfo());\n    // console.log(\n    //   'position: ' +\n    //     programToEdit.position +\n    //     'programToEdit position:' +\n    //     programToEdit.position,\n    // );\n\n    // REDUNDANT !!! -> eventData.programId === programToEdit.id !!!!\n    // if (programToEdit.isTemplate) {\n    //   this.router.navigateByUrl(`programs/form/${eventData.programId}`);\n    // } else {\n    //   this.isClientProgram.set(true);\n    //   // console.log(this.programs[programPosition].id);\n    //   this.router.navigateByUrl(`programs/form/${programToEdit.id}`);\n    // }\n    this.router.navigate([`programs/form/${programToEdit.id}`], {\n      queryParams: {\n        programName: `${programToEdit.name}`,\n        isClientProgram: programToEdit.isTemplate ? 'false' : 'true',\n      },\n    });\n  }\n\n  addClient(clientId: string) {\n    console.log('open program and add client automatically');\n  }\n\n  openDeleteConfirmationDialog(eventData: any): void {\n    const dialogRef = this.dialog.open(DeleteConfirmationDialogComponent, {\n      width: '312px',\n      data: {\n        title: $localize`:@@DeleteConfirmationDialog.deleteTitleProgram:Delete selected program?`,\n        message: $localize`:@@DeleteConfirmationDialog.deleteTitleUserProgram:Deleting the selected program will remove it from your account.`,\n      },\n      panelClass: 'custom-dialog',\n    });\n\n    const subscription = dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        // User confirmed deletion, handle deletion logic here\n        console.log('User confirmed deletion');\n        this.deleteProgram(eventData.itemId, eventData.listOption);\n        dialogRef.close();\n      } else {\n        // User canceled deletion\n        console.log('User canceled deletion');\n        dialogRef.close();\n      }\n    });\n    this.subscriptions.add(subscription);\n  }\n\n  deleteProgram(programId: string, listOption: string) {\n    // Iterate through all programs and find the one for deleting, then check if it's template or client's program\n    const programToDelete = this.programs.find(\n      (program: Program) => program.id === programId,\n    );\n\n    let subscription;\n    if (programToDelete.isTemplate) {\n      // this.router.navigateByUrl(`programs/form/${programId}`);\n      subscription = this.programsService\n        .deleteProgram(programId)\n        .subscribe(() => {\n          this.getPrograms(listOption);\n          // this.changeListedItems();\n        });\n    } else {\n      subscription = this.clientsService\n        .deleteClientProgram(programToDelete.clientId, programToDelete.position)\n        .subscribe(() => {\n          this.getPrograms(listOption);\n          // this.changeListedItems();\n        });\n    }\n    this.subscriptions.add(subscription);\n\n    this._snackBar.open(\n      $localize`:@@Snackbar.programDeleted:Program deleted`,\n      '',\n      {\n        duration: 2000,\n        panelClass: ['custom-snackbar-style'],\n      },\n    );\n  }\n\n  /*   undoRemove(): void {\n    console.log(this.removedProgram?.program);\n    if (this.removedProgram) {\n      // Add the removed item back to its original position\n      // this.items.splice(this.removedItem.index, 0, this.removedItem.value);\n\n      const restoredProgramSubscription = this.programsService\n        .createProgram(this.removedProgram.program)\n        .subscribe(\n          // NOT LIKE THIS, PUT CONFIRM DIALOG, AND AFTER WITHOUT UNDO, ONLY SNACKBAR INFO!!!! BECAUSE THERE IS NO NEED FOR UNNECCESSARY HTTP REQUESTS AND NEWLY CREATED CLIENT(ALTOUGH SAME) WILL HAVE DIFERENT ID!!!!!!\n          () => {\n            this.getPrograms();\n          },\n        );\n\n      // Reset the removedItem reference\n      this.removedProgram = null;\n      this.subscriptions.add(restoredProgramSubscription);\n    }\n  } */\n\n  // Add/remove favorite programs\n  _updateFavorites(userId: string, updatedFavorites: Favorites) {\n    const subscription = this.usersService\n      .updateFavorites(userId, updatedFavorites)\n      .subscribe(favorites => console.log(favorites));\n    this.subscriptions.add(subscription);\n  }\n\n  addToFavorites(program: Program) {\n    this.userFavorites.update(favorites => {\n      const programId = program.id as string;\n      const updatedFavorites = {\n        ...favorites,\n        favPrograms: [...favorites.favPrograms, programId],\n      };\n      this._updateFavorites(this.userId(), updatedFavorites);\n\n      return updatedFavorites;\n    });\n  }\n\n  removeFromFavorites(program: Program) {\n    const updatedFavPrograms = this.userFavorites().favPrograms.filter(\n      favProgramId => favProgramId !== program.id,\n    );\n\n    this.userFavorites.update(favorites => {\n      const updatedFavorites = {\n        ...favorites,\n        favPrograms: [...updatedFavPrograms],\n      };\n\n      return updatedFavorites;\n    });\n\n    this._updateFavorites(this.userId(), this.userFavorites());\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","<ui-page-toolbar\n  [pageTitle]=\"pageTitle()\"\n  [newButton]=\"true\"\n  [pageType]=\"'program'\"\n  (newEvent)=\"createProgram()\"\n></ui-page-toolbar>\n\n<ui-programs-table\n  [isAdmin]=\"isAdmin()\"\n  [isAdminProgram]=\"isAdminProgram()\"\n  [mainProgramsList]=\"true\"\n  [dataSource]=\"dataSource\"\n  (getProgramsEvent)=\"getPrograms($event)\"\n  (reuseEditProgramEvent)=\"reuseEditProgram($event)\"\n  (openEditProgramEvent)=\"openEditProgram($event)\"\n  (openDeleteConfirmationDialogEvent)=\"openDeleteConfirmationDialog($event)\"\n  (favoriteProgram)=\"addToFavorites($event)\"\n  (removeFavoriteProgram)=\"removeFromFavorites($event)\"\n>\n  <!-- <button\n    deleteBtn\n    mat-icon-button\n    matTooltip=\"Delete\"\n    aria-label=\"Delete icon button\"\n    (click)=\"openDeleteConfirmationDialog($event)\"\n  >\n    <mat-icon>delete_outline</mat-icon>\n  </button> -->\n</ui-programs-table>\n"]}