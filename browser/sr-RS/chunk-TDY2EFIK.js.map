{"version":3,"mappings":"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","names":["isFunction","value","createErrorClass","createImpl","ctorFunc","instance","Error","call","stack","prototype","Object","create","constructor","UnsubscriptionError","_super","errors","message","length","map","err","i","toString","join","name","arrRemove","arr","item","index","indexOf","splice","Subscription","initialTeardown","closed","_parentage","_finalizers","unsubscribe","Array","isArray","parent","remove","initialFinalizer","e","finalizer","execFinalizer","push","add","teardown","n","_hasParent","_addParent","_a","includes","_removeParent","EMPTY","empty","EMPTY_SUBSCRIPTION","isSubscription","EmptyError","lastValueFrom","source","config","hasConfig","Promise","resolve","reject","_hasValue","_value","subscribe","next","error","complete","defaultValue","hasLift","lift","operate","init","liftedSource","TypeError","onUnhandledError","onStoppedNotification","undefined","useDeprecatedSynchronousErrorHandling","useDeprecatedNextContext","timeoutProvider","setTimeout","handler","timeout","args","delegate","clearTimeout","handle","reportUnhandledError","noop","COMPLETE_NOTIFICATION","createNotification","errorNotification","nextNotification","kind","context","errorContext","cb","isRoot","errorThrown","captureError","Subscriber","destination","isStopped","EMPTY_OBSERVER","SafeSubscriber","handleStoppedNotification","_next","_error","_complete","_bind","Function","bind","fn","thisArg","ConsumerObserver","partialObserver","handleUnhandledError","observerOrNext","defaultErrorHandler","notification","subscriber","createOperatorSubscriber","onNext","onComplete","onError","onFinalize","OperatorSubscriber","shouldUnsubscribe","t","project","observable","Symbol","identity","x","pipe","fns","pipeFromArray","input","reduce","prev","Observable","_subscribe","operator","isSubscriber","_trySubscribe","sink","forEach","promiseCtor","getPromiseCtor","r","Symbol_observable","operations","toPromise","isObserver","getPrototypeOf","objectProto","keys","getKeys","argsArgArrayOrObject","first","isPOJO","key","obj","__awaiter","_arguments","P","generator","adopt","fulfilled","step","rejected","throw","result","done","then","apply","__values","o","s","iterator","m","__await","v","__asyncGenerator","asyncIterator","g","q","AsyncIterator","verb","awaitReturn","f","a","b","resume","settle","fulfill","shift","__asyncValues","d","isArrayLike","isPromise","isInteropObservable","isAsyncIterable","createInvalidObservableTypeError","getSymbolIterator","isIterable","Symbol_iterator","readableStreamLikeToAsyncGenerator","readableStream","Qf","arguments","reader","getReader","read","releaseLock","isReadableStreamLike","innerFrom","fromInteropObservable","fromArrayLike","fromPromise","fromAsyncIterable","fromIterable","fromReadableStreamLike","obs","array","promise","iterable","asyncIterable","process","catch","Xf","asyncIterable_1","asyncIterable_1_1","return","isScheduler","schedule","last","popResultSelector","pop","popScheduler","popNumber","callOrApply","mapOneOrManyArgs","createObject","values","forkJoin","resultSelector","sources","remainingCompletions","remainingEmissions","sourceIndex","hasValue","executeSchedule","parentSubscription","scheduler","work","delay","repeat","scheduleSubscription","mergeInternals","concurrent","onBeforeNext","expand","innerSubScheduler","additionalFinalizer","buffer","active","isComplete","checkComplete","outerNext","doInnerSub","innerComplete","innerValue","bufferedValue","mergeMap","Infinity","ii","nodeEventEmitterMethods","eventTargetMethods","jqueryMethods","fromEvent","target","eventName","options","isEventTarget","methodName","isNodeStyleEventEmitter","toCommonHandlerRegistry","isJQueryStyleEventEmitter","subTarget","addListener","removeListener","on","off","addEventListener","removeEventListener","Action","state","intervalProvider","setInterval","clearInterval","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","_id","flush","_scheduler","execute","_execute","_delay","errored","errorValue","actions","dateTimestampProvider","now","Date","Scheduler","schedulerActionCtor","AsyncScheduler","SchedulerAction","_active","action","asyncScheduler","async","isValidDate","isNaN","timer","dueTime","intervalOrScheduler","intervalDuration","due","debounceTime","activeTask","lastValue","lastTime","emit","emitWhenIdle","targetTime","mergeAll","concatAll","observeOn","subscribeOn","scheduleObservable","schedulePromise","scheduleArray","scheduleIterable","scheduleAsyncIterable","scheduleReadableStreamLike","scheduled","from","concat","startWith","refCount","connection","_refCount","refCounter","sharedConnection","_connection","conn","connect","ConnectableObservable","subjectFactory","_subject","getSubject","subject","_teardown","higherOrderRefCount","animationFrameProvider","callback","request","requestAnimationFrame","cancel","cancelAnimationFrame","timestamp","ObjectUnsubscribedError","Subject","currentObservers","observers","hasError","thrownError","AnonymousSubject","_throwIfClosed","observer","observed","_checkFinalizedStatuses","_innerSubscribe","asObservable","_b","BehaviorSubject","getValue","subscription","ReplaySubject","_bufferSize","_windowTime","_timestampProvider","_buffer","_infiniteTimeWindow","Math","max","_trimBuffer","copy","slice","adjustedBufferSize","AnimationFrameAction","_scheduled","AnimationFrameScheduler","flushId","animationFrameScheduler","of","throwError","errorOrErrorFactory","errorFactory","isObservable","combineLatest","observables","combineLatestInit","valueTransform","maybeSchedule","remainingFirstValues","hasFirstValue","defer","observableFactory","interval","period","merge","NEVER","filter","predicate","audit","durationSelector","durationSubscriber","endDuration","cleanupDuration","auditTime","duration","catchError","selector","innerSub","syncUnsub","handledResult","scanInternals","accumulator","seed","hasSeed","emitOnNext","emitBeforeComplete","hasState","concatMap","fromSubscribable","subscribable","DEFAULT_CONFIG","connector","defaultIfEmpty","take","count","seen","ignoreElements","mapTo","delayWhen","delayDurationSelector","subscriptionDelay","distinctUntilChanged","comparator","keySelector","defaultCompare","previousKey","currentKey","throwIfEmpty","defaultErrorFactory","finalize","hasDefaultValue","takeLast","multicast","subjectOrSubjectFactory","pairwise","hasPrev","p","publish","scan","share","resetOnError","resetOnComplete","resetOnRefCountZero","wrapperSource","resetConnection","hasCompleted","hasErrored","cancelReset","reset","resetAndUnsubscribe","dest","handleReset","onSubscriber","shareReplay","configOrBufferSize","windowTime","bufferSize","skip","_","switchMap","innerSubscriber","innerIndex","outerIndex","takeUntil","notifier","takeWhile","inclusive","tap","tapObserver","isUnsub","l","c","defaultEquals","is","activeConsumer","inNotificationPhase","epoch","SIGNAL","setActiveConsumer","consumer","getActiveConsumer","REACTIVE_NODE","version","lastCleanEpoch","dirty","producerNode","producerLastReadVersion","producerIndexOfThis","nextProducerIndex","liveConsumerNode","liveConsumerIndexOfThis","consumerAllowSignalWrites","consumerIsAlwaysLive","producerMustRecompute","producerRecomputeValue","consumerMarkedDirty","consumerOnSignalRead","producerAccessed","node","idx","assertConsumerNode","consumerIsLive","staleProducer","producerRemoveLiveConsumerAtIndex","producerAddLiveConsumer","producerIncrementEpoch","producerUpdateValueVersion","consumerPollProducersForChange","producerMarkClean","producerNotifyConsumers","consumerMarkDirty","producerUpdatesAllowed","consumerBeforeComputation","consumerAfterComputation","prevConsumer","producer","seenVersion","consumerDestroy","indexOfThis","assertProducerNode","isConsumerNode","lastIdx","idxProducer","createComputed","computation","equal","COMPUTED_NODE","computed","ERRORED","UNSET","COMPUTING","__spreadProps","__spreadValues","oldValue","newValue","wasEqual","defaultThrowError","throwInvalidWriteToSignalErrorFn","throwInvalidWriteToSignalError","setThrowInvalidWriteToSignalError","postSignalSetFn","createSignal","initialValue","SIGNAL_NODE","getter","signalSetFn","signalValueChanged","signalUpdateFn","updater","untracked","nonReactiveReadsFn","_currentInjector","getCurrentInjector","setCurrentInjector","injector","former","NOT_FOUND","XSS_SECURITY_URL","RuntimeError","code","formatRuntimeError","abs","REQUIRED_UNSET_VALUE","INPUT_SIGNAL_NODE","transformFn","applyValueToInputSignal","createInputSignal","transform","inputValueFn","noSideEffects","PARAMETERS","makeMetadataCtor","props","propName","makeParamDecorator","parentClass","metaCtor","ParamDecoratorFactory","annotationInstance","ParamDecorator","annotation","cls","unusedKey","parameters","hasOwnProperty","defineProperty","ngMetadataName","annotationCls","_global","globalThis","getClosureSafeProperty","objWithPropertyToExtract","fillProperties","stringify","token","overriddenName","newLineIndex","concatStringsWithSpace","before","after","__forward_ref__","forwardRef","forwardRefFn","resolveForwardRef","type","isForwardRef","assertEqual","actual","expected","msg","comparison","ɵɵdefineInjectable","opts","providedIn","factory","ɵɵdefineInjector","providers","imports","getInjectableDef","getOwnDefinition","NG_PROV_DEF","NG_INJECTABLE_DEF","isInjectable","field","getInheritedInjectableDef","def","getInjectorDef","NG_INJ_DEF","NG_INJECTOR_DEF","ɵprov","ɵinj","ngInjectableDef","ngInjectorDef","InjectionToken","_desc","__NG_ELEMENT_ID__","multi","isEnvironmentProviders","ɵproviders","NG_COMP_DEF","ɵcmp","NG_DIR_DEF","ɵdir","NG_PIPE_DEF","ɵpipe","NG_MOD_DEF","ɵmod","NG_FACTORY_DEF","ɵfac","NG_ELEMENT_ID","NG_ENV_ID","__NG_ENV_ID__","renderStringify","String","stringifyForError","throwCyclicDependencyError","path","throwProviderNotFoundError","injectorName","errorMessage","InjectFlags","Default","Host","Self","SkipSelf","Optional","_injectImplementation","getInjectImplementation","setInjectImplementation","impl","previous","injectRootLimpMode","notFoundValue","flags","injectableDef","_THROW_IF_NOT_FOUND","THROW_IF_NOT_FOUND","DI_DECORATOR_FLAG","RetrievingInjector","retrieve","ngOptions","get","optional","NOT_FOUND$1","NG_TEMP_TOKEN_PATH","NG_TOKEN_PATH","NEW_LINE","NO_NEW_LINE","SOURCE","injectInjectorOnly","ngDevMode","currentInjector","ɵɵinject","inject","convertToBitFlags","host","self","skipSelf","injectArgs","types","arg","j","meta","flag","getInjectFlag","attachInjectFlag","decorator","catchInjectorError","injectorErrorName","tokenPath","unshift","formatError","text","charAt","parts","JSON","replace","getFactoryDef","throwNotFound","hasFactoryDef","arrayEquals","identityAccessor","valueA","valueB","flatten","list","flat","Number","POSITIVE_INFINITY","deepForEach","addToArray","removeFromArray","newArray","size","arraySplice","arrayInsert2","value1","value2","end","previousEnd","keyValueArraySet","keyValueArray","keyValueArrayIndexOf","keyValueArrayGet","_arrayIndexOfSorted","start","middle","current","EMPTY_OBJ","EMPTY_ARRAY","ENVIRONMENT_INITIALIZER","INJECTOR$1","INJECTOR_DEF_TYPES","NullInjector","getNgModuleDef","ngModuleDef","getComponentDef","getDirectiveDef","getPipeDef$1","makeEnvironmentProviders","importProvidersFrom","internalImportProvidersFrom","ɵfromNgModule","checkForStandaloneCmp","providersOut","dedup","Set","injectorTypesWithProviders","collectProviders","provider","internalSource","walkProviderTree","processInjectorTypesWithProviders","typesWithProviders","visitor","ngModule","deepForEachProvider","container","parents","defType","injDef","cmpDef","standalone","isDuplicate","has","dependencies","deps","dep","importTypesWithProviders","imported","provide","useFactory","useValue","defProviders","injectorType","USE_VALUE$1","isValueProvider","isExistingProvider","useExisting","isFactoryProvider","isTypeProvider","isClassProvider","useClass","INJECTOR_SCOPE","NOT_YET","CIRCULAR","NULL_INJECTOR","getNullInjector","EnvironmentInjector","R3Injector","scopes","records","Map","_ngOnDestroyHooks","_onDestroyHooks","destroyed","_destroyed","injectorDefTypes","forEachSingleProvider","processProvider","set","makeRecord","record","destroy","assertNotDestroyed","service","ngOnDestroy","onDestroyHooks","hook","clear","onDestroy","removeOnDestroy","runInContext","previousInjector","previousInjectImplementation","prevInjectContext","couldBeInjectableType","injectableDefInScope","injectableDefOrInjectorDefFactory","hydrate","nextInjector","resolveInjectorInitializers","initializers","initializer","tokens","providerToRecord","multiRecord","hasOnDestroy","destroyCBIdx","getUndecoratedInjectableFactory","inheritedInjectableDef","providerToFactory","ngModuleType","unwrappedProvider","classRef","hasDeps","runInInjectionContext","internalInjector","prevInjectorProfilerContext","prevInjector","isInInjectionContext","assertInInjectionContext","debugFn","isType","HOST","TVIEW","FLAGS","PARENT","NEXT","T_HOST","HYDRATION","CLEANUP","CONTEXT","INJECTOR","ENVIRONMENT","RENDERER","CHILD_HEAD","CHILD_TAIL","DECLARATION_VIEW","DECLARATION_COMPONENT_VIEW","DECLARATION_LCONTAINER","PREORDER_HOOK_FLAGS","QUERIES","ID","EMBEDDED_VIEW_INJECTOR","ON_DESTROY_HOOKS","EFFECTS_TO_SCHEDULE","EFFECTS","REACTIVE_TEMPLATE_CONSUMER","AFTER_RENDER_SEQUENCES_TO_ADD","HEADER_OFFSET","TYPE","DEHYDRATED_VIEWS","NATIVE","VIEW_REFS","MOVED_VIEWS","CONTAINER_HEADER_OFFSET","isLView","isLContainer","isContentQueryHost","tNode","isComponentHost","componentOffset","isDirectiveHost","isComponentDef","template","isRootView","isDestroyed","lView","SimpleChange","previousValue","currentValue","firstChange","isFirstChange","applyValueToInputField","inputSignalNode","privateName","ɵɵNgOnChangesFeature","ɵɵNgOnChangesFeatureImpl","NgOnChangesFeatureImpl","ngInherit","definition","ngOnChanges","setInput","ngOnChangesSetInput","rememberChangeHistoryAndInvokeOnChangesHook","simpleChangesStore","getSimpleChangesStore","publicName","declaredName","declaredInputs","setSimpleChangesStore","previousChange","SIMPLE_CHANGES_STORE","store","profilerCallback","profiler","z","event","hookOrListener","SVG_NAMESPACE","MATH_ML_NAMESPACE","unwrapRNode","getNativeByIndex","getNativeByTNode","getTNode","tView","data","load","view","getComponentLViewByIndex","nodeIndex","hostView","slotValue","isCreationMode","viewAttachedToChangeDetector","viewAttachedToContainer","getConstant","consts","resetPreOrderHookFlags","markViewForRefresh","markAncestorsForTraversal","walkUpViews","nestingLevel","currentView","requiresRefreshOrTraversal","updateAncestorTraversalFlagsOnAttach","changeDetectionScheduler","notify","getLViewParent","storeLViewOnDestroy","onDestroyCallback","removeLViewOnDestroy","getOrCreateLViewCleanup","getOrCreateTViewCleanup","cleanup","storeCleanupWithContext","cleanupFn","lCleanup","firstCreatePass","instructionState","lFrame","createLFrame","bindingsEnabled","skipHydrationRootTNode","_isRefreshingViews","getElementDepthCount","elementDepthCount","increaseElementDepthCount","decreaseElementDepthCount","getBindingsEnabled","isInSkipHydrationBlock$1","isSkipHydrationRootTNode","leaveSkipHydrationBlock","getLView","getTView","ɵɵrestoreView","viewToRestore","contextLView","ɵɵresetView","getCurrentTNode","currentTNode","getCurrentTNodePlaceholderOk","getCurrentParentTNode","isParent","setCurrentTNode","isCurrentTNodeParent","setCurrentTNodeAsNotParent","getContextLView","isRefreshingViews","setIsRefreshingViews","mode","getBindingRoot","bindingRootIndex","bindingStartIndex","getBindingIndex","bindingIndex","setBindingIndex","nextBindingIndex","incrementBindingIndex","isInI18nBlock","inI18n","setInI18nBlock","setBindingRootForHostBindings","currentDirectiveIndex","setCurrentDirectiveIndex","getCurrentDirectiveIndex","getCurrentDirectiveDef","tData","getCurrentQueryIndex","currentQueryIndex","setCurrentQueryIndex","getDeclarationTNode","declTNode","enterDI","parentTNode","parentLView","allocLFrame","enterView","newView","newLFrame","firstChild","currentLFrame","childLFrame","child","selectedIndex","currentNamespace","leaveViewLight","oldLFrame","leaveDI","leaveView","nextContextImpl","level","getSelectedIndex","setSelectedIndex","getSelectedTNode","ɵɵnamespaceSVG","ɵɵnamespaceHTML","namespaceHTMLInternal","getNamespace","_wasLastNodeCreated","wasLastNodeCreated","lastNodeWasCreated","registerPreOrderHooks","directiveIndex","directiveDef","ngOnInit","ngDoCheck","wrappedOnChanges","preOrderHooks","preOrderCheckHooks","registerPostOrderHooks","directiveStart","directiveEnd","lifecycleHooks","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","contentHooks","contentCheckHooks","viewHooks","viewCheckHooks","destroyHooks","executeCheckHooks","hooks","callHooks","executeInitAndCheckHooks","initPhase","incrementInitPhaseFlags","currentNodeIndex","startIndex","nodeIndexLimit","lastNodeIndexFound","callHook","callHookInternal","directive","isInitHook","NO_PARENT_INJECTOR","NodeInjectorFactory","injectImpl","resolving","canSeeViewProviders","componentProviders","providerFactory","isViewProvider","injectImplementation","hasClassInput","hasStyleInput","setUpAttributes","renderer","native","attrs","namespaceURI","attrName","attrVal","setAttribute","isAnimationProp","setProperty","isNameOnlyAttributeMarker","marker","charCodeAt","mergeHostAttrs","dst","src","srcMarker","mergeHostAttribute","key1","key2","markerInsertPosition","dstValue","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","ChainedInjector","parentInjector","hasParentInjector","parentLocation","getParentInjectorIndex","getParentInjectorViewOffset","getParentInjectorView","location","startView","viewOffset","parentView","includeViewProviders","setIncludeViewProviders","BLOOM_SIZE","BLOOM_MASK","BLOOM_BUCKET_BITS","nextNgElementId","bloomAdd","injectorIndex","bloomHash","mask","getOrCreateNodeInjectorForNode","existingInjectorIndex","getInjectorIndex","insertBloom","blueprint","parentLoc","getParentInjectorLocation","parentIndex","parentData","footer","declarationViewOffset","lViewCursor","getTNodeFromLView","diPublicInInjector","injectAttributeImpl","attrNameToInject","classes","styles","attrsLength","notFoundValueOrThrow","lookupTokenUsingModuleInjector","moduleInjector","getOrCreateInjectable","embeddedInjectorValue","lookupTokenUsingEmbeddedInjector","lookupTokenUsingNodeInjector","bloomHashBitOrFactory","previousTView","hostTElementNode","shouldSearchParent","bloomHasToken","searchTokensOnInjector","currentTView","canAccessViewProviders","isHostSpecialCase","injectableIdx","locateDirectiveOrProvider","getNodeInjectable","nodeProviderIndexes","providerIndexes","tInjectables","injectablesStart","directivesStart","cptViewProvidersCount","startingIndex","endIndex","providerTokenOrDef","dirDef","previousIncludeViewProviders","success","tokenId","createNodeInjector","injectorView","isFirstHostTNode","NodeInjector","_tNode","_lView","ɵɵgetInheritedFactory","ownConstructor","ownFactory","getFactoryOf","objectPrototype","currentLView","nodeInjectorValue","embeddedViewInjector","embeddedViewInjectorValue","tViewType","ɵɵinjectAttribute","createInjector","additionalProviders","createInjectorWithoutInjectorInstances","Injector","NULL","HostAttributeToken","attributeName","HOST_TAG_NAME","SCHEDULE_IN_ROOT_ZONE_DEFAULT","DestroyRef","injectDestroyRef","NodeInjectorDestroyRef","ChangeDetectionScheduler","ZONELESS_ENABLED","ZONELESS_SCHEDULER_DISABLED","SCHEDULE_IN_ROOT_ZONE","PendingTasksInternal","taskId","pendingTasks","_hasPendingTasks","hasPendingTasks","delete","EventEmitter_","__isAsync","destroyRef","isAsync","nextFn","errorFn","completeFn","wrapInTimeout","EventEmitter","scheduleCallbackWithRafRace","timeoutId","animationFrameId","scheduleCallbackWithMicrotask","queueMicrotask","isAngularZoneProperty","angularZoneInstanceIdProperty","ngZoneInstanceId","NgZone","hasPendingMacrotasks","hasPendingMicrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","enableLongStackTrace","shouldCoalesceEventChangeDetection","shouldCoalesceRunChangeDetection","scheduleInRootZone","Zone","assertZonePatched","_nesting","_outer","_inner","TaskTrackingZoneSpec","fork","longStackTraceZoneSpec","callbackScheduled","forkInnerZoneWithAngularBehavior","isInAngularZone","assertInAngularZone","assertNotInAngularZone","run","applyThis","applyArgs","runTask","zone","task","scheduleEventTask","EMPTY_PAYLOAD","cancelTask","runGuarded","runOutsideAngular","checkStable","delayChangeDetectionForEvents","isCheckStableRunning","scheduleCheckStable","updateMicroTaskStatus","root","delayChangeDetectionForEventsDelegate","instanceId","properties","onInvokeTask","shouldBeIgnoredByZone","invokeTask","onEnter","onLeave","onInvoke","invoke","isSchedulerTick","onHasTask","hasTaskState","hasTask","change","_hasPendingMicrotasks","microTask","macroTask","onHandleError","handleError","NoopNgZone","hasApplyArgsData","ErrorHandler","_console","console","INTERNAL_APPLICATION_ERROR_HANDLER","userErrorHandler","inputFunction","inputRequiredFunction","required","injectElementRef","createElementRef","ElementRef","nativeElement","unwrapElementRef","isSignal","signal","signalFn","update","updateFn","asReadonly","signalAsReadonlyFn","readonlyFn","isWritableSignal","symbolIterator","_results","QueryList","_emitDistinctChangesOnly","_onDirty","_changesDetected","_changes","changes","find","some","toArray","resultsTree","newResultFlat","notifyOnChanges","onDirty","setDirty","hasInSkipHydrationBlockFlag","ChangeDetectionStrategy","OnPush","TRACKED_LVIEWS","uniqueIdCounter","getUniqueLViewId","registerLView","unregisterLView","MONKEY_PATCH_KEY_NAME","attachPatchData","getFirstLContainer","getNearestLContainer","getNextLContainer","viewOrContainer","DOCUMENT","setDocument","document","getDocument","APP_ID","DEFAULT_APP_ID","PLATFORM_INITIALIZER","PLATFORM_ID","ANIMATION_MODULE_TYPE","CSP_NONCE","body","querySelector","getAttribute","REFERENCE_NODE_HOST","REFERENCE_NODE_BODY","DEFER_BLOCK_ID","DEFER_BLOCK_STATE$1","PRESERVE_HOST_CONTENT_DEFAULT","PRESERVE_HOST_CONTENT","IS_INCREMENTAL_HYDRATION_ENABLED","TracingAction","CHANGE_DETECTION","AFTER_NEXT_RENDER","TracingService","markedFeatures","performanceMarkFeature","feature","performance","mark","detail","ViewContext","injectViewContext","AfterRenderPhase","EarlyRead","Write","MixedReadWrite","Read","AfterRenderManager","AFTER_RENDER_PHASES","AfterRenderImpl","ngZone","errorHandler","sequences","deferredRegistrations","executing","hasSequencesToExecute","phase","sequence","erroredOrDestroyed","pipelinedValue","maybeTrace","hookFn","snapshot","afterRun","once","register","addSequence","unregister","AfterRenderSequence","unregisterOnDestroy","dispose","afterRender","callbackOrSpec","afterRenderImpl","afterNextRender","getHooks","earlyRead","write","mixedReadWrite","manager","tracing","manualCleanup","viewContext","DeferDependenciesLoadingState","NOT_STARTED","IN_PROGRESS","COMPLETE","FAILED","MINIMUM_SLOT","LOADING_AFTER_SLOT","DeferBlockState","Placeholder","Loading","Complete","DeferBlockInternalState","Initial","NEXT_DEFER_BLOCK_STATE","DEFER_BLOCK_STATE","STATE_IS_FROZEN_UNTIL","LOADING_AFTER_CLEANUP_FN","TRIGGER_CLEANUP_FNS","PREFETCH_TRIGGER_CLEANUP_FNS","SSR_UNIQUE_ID","SSR_BLOCK_STATE","ON_COMPLETE_FNS","HYDRATE_TRIGGER_CLEANUP_FNS","DeferBlockBehavior","Manual","Playthrough","storeTriggerCleanupFn","lDetails","getCleanupFnKeyByType","invokeTriggerCleanupFns","cleanupFns","invokeAllTriggerCleanupFns","getDeferBlockDataIndex","deferBlockIndex","getLDeferBlockDetails","slotIndex","setLDeferBlockDetails","getTDeferBlockDetails","setTDeferBlockDetails","deferBlockConfig","getTemplateIndexForState","newState","hostLView","tDetails","primaryTmplIndex","loadingTmplIndex","errorTmplIndex","placeholderTmplIndex","getMinimumDurationForState","currentState","placeholderBlockConfig","loadingBlockConfig","getLoadingBlockAfter","addDepsToRegistry","currentDeps","newDeps","currentDepSet","getPrimaryBlockTNode","adjustedIndex","DEHYDRATED_BLOCK_REGISTRY","_retrieveHydrationInfoImpl","retrieveHydrationInfo","rNode","isIncrementalHydrationEnabled","refreshContentQueries","contentQueries","queryStartIdx","directiveDefIdx","executeViewQueryFn","viewQueryFn","component","executeContentQueries","directiveInstance","ViewEncapsulation","Emulated","None","ShadowDom","policy$1","getPolicy$1","trustedTypes","createPolicy","createHTML","createScript","createScriptURL","trustedHTMLFromString","html","policy","getPolicy","trustedScriptURLFromStringBypass","url","SafeValueImpl","changingThisBreaksApplicationSecurity","SafeHtmlImpl","getTypeName","SafeStyleImpl","SafeScriptImpl","SafeUrlImpl","SafeResourceUrlImpl","unwrapSafeValue","allowSanitizationBypassAndThrow","actualType","getSanitizationBypassType","bypassSanitizationTrustHtml","trustedHtml","bypassSanitizationTrustStyle","trustedStyle","bypassSanitizationTrustScript","trustedScript","bypassSanitizationTrustUrl","trustedUrl","bypassSanitizationTrustResourceUrl","trustedResourceUrl","getInertBodyHelper","defaultDoc","inertDocumentHelper","InertDocumentHelper","isDOMParserAvailable","DOMParserHelper","getInertBodyElement","window","DOMParser","parseFromString","inertDocument","implementation","createHTMLDocument","templateEl","createElement","innerHTML","SAFE_URL_PATTERN","_sanitizeUrl","match","tagSet","tags","res","split","sets","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","BLOCK_ELEMENTS","INLINE_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","HTML_ATTRS","ARIA_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","SanitizingHtmlSerializer","sanitizedSomething","buf","sanitizeChildren","el","traverseContent","parentNodes","nodeType","Node","ELEMENT_NODE","startElement","TEXT_NODE","chars","nodeValue","getFirstChild","endElement","getNextSibling","element","tagName","getNodeName","toLowerCase","elAttrs","attributes","elAttr","lower","encodeEntities","isClobberedElement","parentNode","childNode","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","nextSibling","previousSibling","clobberedElementError","nodeName","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","hi","low","inertBodyHelper","_sanitizeHtml","unsafeHtmlInput","inertBodyElement","unsafeHtml","mXSSAttempts","parsedHtml","safeHtml","getTemplateContent","isTemplateElement","content","SecurityContext","NONE","HTML","STYLE","SCRIPT","URL","RESOURCE_URL","ɵɵsanitizeUrl","unsafeUrl","sanitizer","getSanitizer","sanitize","ɵɵsanitizeResourceUrl","unsafeResourceUrl","getUrlSanitizer","tag","prop","ɵɵsanitizeUrlOrResourceUrl","COMMENT_DISALLOWED","COMMENT_DELIMITER","COMMENT_DELIMITER_ESCAPED","escapeCommentText","maybeUnwrapFn","classIndexOf","className","classToSearch","foundIndex","NG_TEMPLATE_SELECTOR","isCssClassMatching","cssClassToMatch","isProjectionMode","isInlineTemplate","hasTagAndTypeMatch","currentSelector","tagNameToCompare","isNodeMatchingSelector","nodeAttrs","nameOnlyMarkerIdx","getNameOnlyMarkerIndex","skipToNextSelector","isPositive","selectorAttrValue","attrIndexInNode","findAttrIndexInNode","nodeAttrValue","bindingsMode","maybeAttrName","matchTemplateAttribute","isNodeMatchingSelectorList","getProjectAsAttrValue","ngProjectAsAttrIdx","nodeAttr","attr","isSelectorInSelectorList","selectorListLoop","currentSelectorInList","maybeWrapInNotSelector","isNegativeMode","chunk","trim","stringifyCSSSelector","currentChunk","valueOrMarker","attrValue","stringifyCSSSelectorList","selectorList","extractAttrsAndClassesFromSelector","NO_CHANGE","createTextNode","createText","updateTextNode","setValue","createCommentNode","createComment","createElementNode","namespace","nativeInsertBefore","beforeNode","isMove","insertBefore","nativeAppendChild","appendChild","nativeAppendOrInsertBefore","nativeRemoveNode","isHostElement","removeChild","writeDirectStyle","writeDirectClass","removeAttribute","setupStaticAttributes","mergedAttrs","createTView","templateFn","decls","vars","directives","pipes","viewQuery","schemas","constsOrFactory","ssrId","initialViewLength","createViewBlueprint","queries","fill","expandoStartIndex","hostBindingOpCodes","firstUpdatePass","staticViewQueries","staticContentQueries","components","directiveRegistry","pipeRegistry","incompleteFirstPass","getOrCreateComponentTView","directiveDefs","pipeDefs","createLView","tHostNode","environment","hydrationInfo","createComponentLView","hostTNode","rendererFactory","componentView","addToEndOfViewTree","getInitialLViewFlagsFromDef","createRenderer","signals","onPush","allocExpando","numSlotsToAlloc","allocIdx","lViewOrLContainer","ɵɵadvance","delta","selectIndexInternal","checkNoChangesMode","InputFlags","SignalBased","HasDecoratorInputTransform","writeToDirectiveInput","inputs","executeTemplate","rf","prevSelectedIndex","isUpdatePhase","createDirectivesInstances","instantiateAllDirectives","invokeDirectivesHostBindings","saveResolvedLocalsInData","viewData","localRefExtractor","localNames","localIndex","locateHostElement","elementOrSelector","encapsulation","preserveContent","rootElement","selectRootElement","applyRootElementTransform","_applyRootElementTransformImpl","mapPropName","elementPropertyInternal","nativeOnly","setAllInputsForProperty","markDirtyIfOnPush","viewIndex","childComponentLView","initialInputs","setInputsFromAttrs","elementIndex","dirIndex","hostBindings","hostVars","hostAttrs","invokeHostBindingsInCreationMode","findDirectiveDefMatches","registry","matches","selectors","elementAttributeInternal","setElementAttribute","strValue","initialInputData","lookupName","hostDirectiveInputs","hasMatch","renderComponent","componentHostIdx","componentTView","syncViewWithBlueprint","hostRNode","renderView","finishViewCreation","renderChildComponents","createAndRenderEmbeddedLView","declarationLView","templateTNode","embeddedTView","viewFlags","embeddedLView","dehydratedView","declarationLContainer","declarationViewLQueries","createEmbeddedView","shouldAddViewToDom","_icuContainerIterate","icuContainerIterate","tIcuContainerNode","ensureIcuContainerVisitorLoaded","loader","RendererStyleFlags2","Important","DashCase","isDetachedByI18n","applyToElementOrContainer","lNodeToHandle","lContainer","isComponent","destroyNode","applyContainer","removeViewFromDOM","detachViewFromDOM","addViewToDOM","parentNativeNode","applyView","destroyViewTree","rootView","cleanUpView","firstView","detachMovedView","declarationContainer","movedViews","declarationViewIndex","destroyLView","executeOnDestroys","processCleanups","lQueries","detachView","tCleanup","targetIdx","destroyHooksFn","effects","effect","toCall","callContext","getParentRElement","getClosestRElement","getInsertInFrontOfRNode","_getInsertInFrontOfRNodeWithI18n","getInsertInFrontOfRNodeWithNoI18n","_processI18nInsertBefore","setI18nHandling","getInsertInFrontOfRNodeWithI18n","processI18nInsertBefore","childRNode","childTNode","parentRNode","anchorNode","getFirstNativeNode","tNodeType","getBeforeNodeForView","elIcuContainerChild","rNodeOrLContainer","projectionNodes","getProjectionNodes","componentHost","slotIdx","projection","viewIndexInContainer","nextViewIndex","firstTNodeOfView","applyNodes","parentRElement","isProjection","rawSlotValue","nextRNode","applyProjectionRecursive","projectionNext","applyProjection","tProjectionNode","componentLView","nodeToProjectOrRNodes","nodeToProject","projectedComponentLView","anchor","applyStyling","isClassBased","addClass","removeClass","removeStyle","endsWith","setStyle","collectNativeNodes","lNode","collectNativeNodesInLContainer","nodesInSlot","lViewInAContainer","lViewFirstChildTNode","addAfterRenderSequencesForView","freeConsumers","getOrBorrowReactiveLViewConsumer","borrowReactiveLViewConsumer","REACTIVE_LVIEW_CONSUMER_NODE","maybeReturnReactiveLViewConsumer","getOrCreateTemporaryConsumer","TEMPORARY_CONSUMER_NODE","viewShouldHaveReactiveConsumer","runEffectsInView","tryFlushEffects","foundDirtyEffect","MAXIMUM_REFRESH_RERUNS$1","detectChangesInternal","notifyErrorHandler","begin","detectChangesInViewWhileDirty","lastIsRefreshingViewsValue","detectChangesInView","retries","refreshView","isInCheckNoChangesPass","isInExhaustiveCheckNoChangesPass","returnConsumerToPool","currentConsumer","hooksInitPhaseCompleted","markTransplantedViewsForRefresh","detectChangesInEmbeddedViews","processHostBindingOpCodes","detectChangesInChildComponents","notifyEffect","detectChangesInViewIfAttached","movedLView","detectChangesInComponent","shouldRefreshView","opCode","directiveIdx","bindingRootIndx","hostBindingFn","markViewDirty","dirtyBitsToUse","createLContainer","hostNative","getLViewFromLContainer","addLViewToLContainer","addToDOM","insertView","removeLViewFromLContainer","removeIndex","indexInContainer","viewToDetach","removedLView","containerLength","trackMovedView","insertedComponentLView","Co","_cdRefInjectingView","_appRef","_attachedToViewContainer","rootNodes","viewRefs","markForCheck","detach","reattach","detectChanges","checkNoChanges","attachToViewContainerRef","detachFromAppRef","attachToAppRef","appRef","TemplateRef","injectTemplateRef","ViewEngineTemplateRef","R3TemplateRef","_declarationLView","_declarationTContainer","elementRef","createEmbeddedViewImpl","ViewRef$1","createTemplateRef","tNodeInsertBeforeIndex","insertBeforeIndex","i18nParent","anchorRNode","i18nChild","getOrCreateTNode","createTNodeAtIndex","createTNode","linkTNodeInTView","tParent","directiveStylingLast","propertyBindings","outputs","hostDirectiveOutputs","directiveToIndex","stylesWithoutHost","residualStyles","classesWithoutHost","residualClasses","classBindings","styleBindings","addTNodeAndUpdateInsertBeforeIndex","previousTNodes","newTNode","existingTNode","isI18nText","isNewTNodeCreatedBefore","getInsertBeforeIndex","setInsertBeforeIndex","getTIcu","setTIcu","tIcu","setTNodeInsertBeforeIndex","createTNodePlaceholder","getCurrentICUCaseIndex","currentCase","currentCaseLViewIndex","getParentFromIcuCreateOpCode","mergedCode","getRefFromIcuCreateOpCode","icuCreateOpCode","parentIdx","refIdx","isRootTemplateMessage","subTemplateIndex","enterIcu","removes","icuContainerIteratorNext","removeOpCode","tIcuIndex","loadIcuContainerVisitor","_state","icuContainerIteratorStart","REF_EXTRACTOR_REGEXP","RegExp","_prepareI18nBlockForHydrationImpl","prepareI18nBlockForHydration","_claimDehydratedIcuCaseImpl","claimDehydratedIcuCase","icuIndex","caseIndex","_findMatchingDehydratedViewImpl","findMatchingDehydratedView","EI","fy","_NullComponentFactoryResolver","resolveComponentFactory","ua","RendererFactory2","Renderer2","injectRenderer2","nodeAtIndex","Sanitizer","computeStaticStyling","writeToHost","style","styleValue","ɵɵdirectiveInject","ɵɵinvalidFactory","resolveDirectives","localRefs","directiveMatcher","exportsMap","matchedDirectiveDefs","hostDirectiveDefs","hostDirectiveRanges","hostDirectiveResolution","resolveHostDirectives","initializeDirectives","cacheMatchingLocalNames","componentDef","hasHostDirectives","findHostDirectiveDefs","allDirectiveDefs","resolveHostDirectivesForDef","markAsComponentHost","directivesLength","hasSeenComponent","initTNodeFlags","providersResolver","preOrderHooksFound","preOrderCheckHooksFound","configureViewWithDirective","saveNameToExportMap","lifeCycleHooks","initializeInputAndOutputAliases","setupSelectorMatchedInputsOrOutputs","setupInitialInputs","hostDirectiveDef","setupHostDirectiveInputsOrOutputs","aliasMap","bindings","setShadowStylingInputFlags","initialName","isHostDirective","inputsToStore","inputConfig","directiveFactory","nodeInjectorFactory","registerHostBindingOpCodes","directiveVarsIdx","elementIndx","lastSelectedElementIdx","exportAs","numberOfDirectives","elementStartFirstCreatePass","attrsIndex","localRefsIndex","tViewConsts","elementStart","elementEndFirstCreatePass","elementEnd","ComponentFactoryResolver","ComponentFactoryResolver$1","ComponentFactory","toInputRefArray","inputData","templateName","toOutputRefArray","createRootViewInjector","environmentInjector","realEnvironmentInjector","getStandaloneInjector","createRootLViewEnvironment","rootLViewInjector","createHostElement","render","ComponentFactory$1","componentType","ngContentSelectors","isBoundToModule","cachedInputs","cachedOutputs","projectableNodes","rootSelectorOrNode","tAttributes","rootTView","rootViewInjector","hostRenderer","hostElement","rootLView","projectNodes","ComponentRef","ComponentRef$1","_rootLView","changeDetectorRef","previousInputValues","hasSetInput","nodesforSlot","ViewContainerRef","injectViewContainerRef","previousTNode","createContainerRef","VE_ViewContainerRef","R3ViewContainerRef","_lContainer","_hostTNode","_hostLView","getViewRefs","templateRef","indexOrOptions","viewRef","insertImpl","createComponent","componentFactoryOrType","isComponentFactory","ngModuleRef","componentFactory","contextInjector","componentRef","insert","prevIdx","prevLContainer","prevVCRef","adjustedIdx","_adjustIndex","getOrCreateViewRefs","move","newIndex","viewRefsArr","detachedView","_locateOrCreateAnchorNode","insertAnchorNode","commentNode","parentOfHostNative","createAnchorNode","_populateDehydratedViewsInLContainer","populateDehydratedViewsInLContainer","LQuery_","queryList","clone","LQueries_","tQueries","noOfInheritedQueries","viewLQueries","tQuery","getByIndex","parentLQuery","indexInDeclarationView","dirtyQueriesWithMatches","getTQuery","TQueryMetadata_","splitQueryMultiSelectors","TQueries_","queriesForTemplateRef","childQueryIndex","tqueryClone","track","tquery","TQuery_","metadata","crossesNgTemplate","_declarationNodeIndex","_appliesToNextNode","isApplyingToNode","matchTNode","addMatch","declarationNodeIdx","matchTNodeWithReadOption","getIdxOfMatchingSelector","nodeMatchIdx","directiveOrProviderIdx","tNodeIdx","matchIdx","createResultByTNodeType","createResultForNode","matchingIdx","createSpecialToken","materializeViewResults","queryIndex","lQuery","tViewData","tQueryMatches","matchedNodeIdx","collectQueryResults","lViewResults","embeddedLViews","loadQueryInternal","createLQuery","createViewQuery","createTQuery","createContentQuery","saveContentQueryAndDirectiveIndex","locator","tViewContentQueries","lastSavedDirectiveIndex","getQueryResults","createQuerySignalFn","firstOnly","_dirtyCounter","refreshSignalQuery","_flatValue","createSingleResultOptionalQuerySignalFn","createSingleResultRequiredQuerySignalFn","bindQueryToSignal","_queryIndex","_queryList","results","contentChildFn","contentChildRequiredFn","contentChild","sM","NgModuleRef","NgModuleRef$1","_parent","_bootstrapComponents","_r3Injector","destroyCbs","componentFactoryResolver","runInjectorInitializers","bootstrap","NgModuleFactory","NgModuleFactory$1","moduleType","EnvironmentNgModuleRefAdapter","debugName","runEnvironmentInitializers","createEnvironmentInjector","StandaloneService","_injector","cachedInjectors","getOrCreateStandaloneInjector","standaloneInjector","ɵɵdefineComponent","componentDefinition","baseDef","getNgDirectiveDef","changeDetection","getExternalStyles","initFeatures","extractDefListOrFactory","getComponentId","extractDirectiveDef","nonNull","ɵɵdefineNgModule","declarations","exports","transitiveCompileScopes","parseAndConvertInputsForDefinition","newLookup","minifiedKey","inputFlags","parseAndConvertOutputsForDefinition","ɵɵdefineDirective","directiveDefinition","ɵɵdefinePipe","pipeDef","pure","features","hostDirectives","debugInfo","defExtractor","hash","componentDefConsts","hashSelectors","getOwnPropertyNames","char","imul","getSuperType","ɵɵInheritDefinitionFeature","superType","shouldInheritFields","inheritanceChain","superDef","writeableDef","maybeUnwrapEmpty","superHostBindings","inheritHostBindings","superViewQuery","superContentQueries","inheritViewQuery","inheritContentQueries","mergeInputsWithTransforms","animation","defData","mergeHostAttrsAcrossInheritance","prevViewQuery","ctx","prevContentQueries","prevHostBindings","ɵɵHostDirectivesFeature","rawHostDirectives","isEager","createHostDirectiveDef","currentDef","matchedDefs","configOrFn","resolved","trackHostDirectiveDef","patchDeclaredInputs","bindingArrayToMap","exposedInputs","remappedPublicName","isListLikeIterable","isJsObject","iterateListLike","updateBinding","getBinding","bindingUpdated","bindingUpdated2","exp1","exp2","different","bindingUpdated3","exp3","templateFirstCreatePass","declareTemplate","declarationTView","comment","_locateOrCreateContainerAnchor","ɵɵtemplate","createContainerAnchorImpl","onIdle","IdleScheduler","_requestIdleCallback","requestIdleCallback","_cancelIdleCallback","cancelIdleCallback","executingCallbacks","idleId","deferred","requestIdleCallbackFn","cancelIdleCallbackFn","scheduleIdleCallback","scheduleTimerTrigger","TimerScheduler","invokeTimerAt","addToQueue","scheduleTimer","removeFromQueue","invokeAt","insertAtIndex","lastCallbackIndex","FRAME_DURATION_MS","CachedInjectorService","getOrCreateInjector","DEFER_BLOCK_CONFIG","getOrCreateEnvironmentInjector","createDeferBlockInjector","origInjector","parentEnvInjector","envInjector","renderDeferBlockState","skipTimerScheduling","hostTView","ssrState","isValidStateChange","applyStateFn","applyDeferBlockStateWithSchedulingImpl","applyDeferBlockState","findMatchingDehydratedViewForDeferBlock","dehydratedViewIx","findIndex","stateTmplIndex","activeBlockTNode","applyDeferBlockStateWithScheduling","loadingAfter","inLoadingAfterPhase","scheduleDeferBlockUpdate","nextState","renderPlaceholder","renderDeferStateAfterResourceLoading","loadingPromise","loadingState","ɵɵdeferEnableTimerScheduling","placeholderConfigIndex","loadingConfigIndex","Console","log","warn","y","TESTABILITY","EffectScheduler","ZoneAwareEffectScheduler","queuedEffectCount","queues","enqueue","queue","flushQueue","isSubscribable","APP_INITIALIZER","ApplicationInitStatus","initialized","donePromise","rej","appInits","runInitializers","asyncInitPromises","initResult","observableAsPromise","all","APP_BOOTSTRAP_LISTENER","publishSignalConfiguration","cf","MAXIMUM_REFRESH_RERUNS","ApplicationRef","_runningTick","_destroyListeners","_views","internalErrorHandler","afterRenderManager","zonelessEnabled","rootEffectScheduler","dirtyFlags","tracingSnapshot","externalTestViews","afterTick","allViews","componentTypes","whenStable","stable","finally","_rendererFactory","componentOrFactory","selectorOrNode","compRef","testability","registerApplication","unregisterApplication","_loadComponent","tick","_tick","tickImpl","synchronize","runs","synchronizeOnce","useGlobalCheck","Boolean","detectChangesInViewIfRequired","syncDirtyFlagsWithViews","attachView","listener","viewCount","isFirstPass","scheduleDelayedTrigger","scheduleFn","shouldTriggerDeferBlock","triggerDeferBlock","triggerResourceLoading","primaryBlockTNode","dependenciesFn","dependencyResolverFn","allSettled","failed","status","dependency","templateLocation","primaryBlockTView","directiveTypes","triggerType","behavior","shouldAttachTrigger","shouldAttachRegularTrigger","incrementalHydrationEnabled","hasHydrateTriggers","wasServerSideRendered","ɵɵdefer","enableTimerScheduling","hydrateTriggers","debug","ssrBlockState","ssrUniqueId","info","onLViewDestroy","ɵɵdeferWhen","rawValue","renderedState","ɵɵdeferOnIdle","ɵɵattribute","interpolation1","prefix","v0","suffix","interpolation2","i0","v1","toTStylingRange","getTStylingRangePrev","tStylingRange","getTStylingRangePrevDuplicate","setTStylingRangePrev","setTStylingRangePrevDuplicate","getTStylingRangeNext","setTStylingRangeNext","getTStylingRangeNextDuplicate","setTStylingRangeNextDuplicate","insertTStylingBinding","tStylingKeyWithStatic","isHostBinding","isClassBinding","tBindings","tmplHead","tmplTail","isKeyDuplicateOfStatic","tStylingKey","staticKeyValueArray","previousNode","markDuplicates","markDuplicateOfResidualStyling","residual","isPrevDir","tStylingAtIndex","isMap","cursor","foundDuplicate","tStylingValueAtCursor","tStyleRangeAtCursor","isStylingMatch","tStylingKeyCursor","parserState","textEnd","keyEnd","valueEnd","getLastParsedKey","substring","parseClassName","resetParserState","parseClassNameNext","consumeWhitespace","consumeClassToken","ɵɵproperty","setDirectiveInputsWhichShadowsStyling","ɵɵstyleProp","checkStylingProperty","ɵɵclassProp","ɵɵclassMap","checkStylingMap","classKeyValueArraySet","classStringParser","stylingFirstUpdatePass","updateStyling","normalizeSuffix","stringParser","hasStylingInputShadow","isInHostBindings","staticPrefix","updateStylingMap","toStylingKeyValueArray","isHostBindings","wrapInStaticStylingKey","stylingKey","collectStylingFromDirectives","collectStylingFromTAttrs","templateStylingKey","getTemplateHeadTStylingKey","setTemplateHeadTStylingKey","collectResidual","currentDirective","desiredMarker","currentMarker","styleKeyValueArray","unwrappedValue","stringKey","oldKeyValueArray","newKeyValueArray","oldIndex","oldKey","newKey","setKey","tRange","higherPriorityValue","findStylingValue","isStylingValuePresent","isPrevDirection","rawKey","containsStatics","isStylingMap","valueAtLViewIndex","ɵɵclassMapInterpolate1","interpolatedValue","LiveCollection","updateValue","swap","index1","index2","startIdx","min","endIdx","endItem","startItem","attach","prevIndex","newIdx","valuesMatching","liveIdx","liveValue","trackBy","reconcile","liveCollection","newCollection","trackByFn","detachedItems","liveKeysInTheFuture","liveStartIdx","liveEndIdx","duplicateKeys","newEndIdx","liveStartValue","at","newStartValue","isStartMatching","liveEndValue","newEndValue","isEndMatching","liveStartKey","liveEndKey","newStartKey","newEndKey","UniqueValueMultiKeyMap","initLiveItemsInTheFuture","attachPreviouslyDetached","newItem","createOrAttach","newCollectionIterator","newIterationResult","liveKey","prevCollection","kvMap","_vMap","prevValue","vMap","ɵɵconditional","matchingTemplateIndex","contextValue","prevMatchingTemplateIndex","prevContainer","getLContainer","viewInContainerIdx","nextLContainerIndex","nextContainer","getExistingTNode","RepeaterContext","$implicit","$index","$count","ɵɵrepeaterTrackByIdentity","RepeaterMetadata","hasEmptyBlock","ɵɵrepeaterCreate","trackByUsesComponentInstance","emptyTemplateFn","emptyDecls","emptyVars","emptyTagName","emptyAttrsIndex","boundTrackBy","LiveCollectionLContainerImpl","operationsCounter","needsIndexUpdate","detachExistingView","recordCreate","recordDestroy","updateIndexes","getExistingLViewFromLContainer","ɵɵrepeater","collection","metadataSlotIdx","containerIndex","itemTemplateTNode","isCollectionEmpty","emptyTemplateIndex","lContainerForEmpty","emptyTemplateTNode","ɵɵelementStart","_locateOrCreateElementNode","hasDirectives","ɵɵelementEnd","ɵɵelement","elementContainerStartFirstCreatePass","ɵɵelementContainerStart","_locateOrCreateElementContainerNode","ɵɵelementContainerEnd","ɵɵelementContainer","ɵɵgetCurrentView","ɵɵhostProperty","u","plural","val","floor","localeEn","LOCALE_DATA","findLocaleData","locale","normalizedLocale","normalizeLocale","getLocaleData","parentLocale","getLocalePluralCase","LocaleDataIndex","PluralCase","ng","common","locales","LocaleId","DayPeriodsFormat","DayPeriodsStandalone","DaysFormat","DaysStandalone","MonthsFormat","MonthsStandalone","Eras","FirstDayOfWeek","WeekendRange","DateFormat","TimeFormat","DateTimeFormat","NumberSymbols","NumberFormats","CurrencyCode","CurrencySymbol","CurrencyName","Currencies","Directionality","ExtraData","pluralMapping","getPluralCase","parseInt","DEFAULT_LOCALE_ID","ELEMENT_MARKER","ICU_MARKER","I18nCreateOpCode","SHIFT","APPEND_EAGERLY","COMMENT","LOCALE_ID$1","setLocaleId","localeId","getLocaleId","changeMask","changeMaskCounter","setMaskBit","hasChange","applyI18n","tI18n","updateOpCodes","bindingsStartIndex","applyUpdateOpCodes","createNodeWithoutHydration","textOrName","COMMENT_NODE","_locateOrCreateNode","applyCreateOpCodes","createOpCodes","insertInFrontOf","isComment","appendNow","applyMutableOpCodes","mutableOpCodes","rootIdx","rootRNode","textNodeIndex","anchorIdx","elementNodeIndex","commentValue","commentNodeIndex","commentRNode","elementRNode","checkBit","skipCodes","sanitizeFn","tNodeOrTagName","rText","applyIcuSwitchCase","applyIcuUpdateCase","activeCaseIndex","getCaseIndex","applyIcuSwitchCaseRemove","removeCodes","nodeOrIcuIndex","icuExpression","bindingValue","cases","resolvedCase","BINDING_REGEXP","NESTED_ICU","ICU_BLOCK_REGEXP","MARKER","SUBTEMPLATE_REGEXP","PH_REGEXP","NGSP_UNICODE_REGEXP","replaceNgsp","i18nStartFirstCreatePass","parentTNodeIndex","rootTNode","existingTNodeStack","astStack","getTranslationForTemplate","msgParts","i18nParseTextIntoPartsAndICU","part","i18nStartFirstCreatePassProcessTextNode","icuNodeIndex","createTNodeAndAddOpCode","icuStart","isClosing","placeholderNode","children","ast","existingTNodes","isICU","i18nNodeIdx","hasBinding","generateBindingUpdateOpCodes","str","destinationNode","bindingStart","maskIndex","sizeIndex","textParts","textValue","toMaskBit","removeInnerTemplateTranslation","inTemplate","tagMatched","exec","search","bindingMask","addUpdateIcuSwitch","valueArr","nestedIcus","caseAst","parseIcuCase","addUpdateIcuUpdate","parseICUBlock","pattern","icuType","mainBinding","binding","pos","blocks","prevPos","braceStack","braces","lastIndex","block","test","caseName","unsafeCaseHtml","inertRootNode","walkIcuTree","sharedUpdateOpCodes","depth","currentNode","addCreateNodeAndAppend","lowerAttrName","addCreateAttribute","elementNode","addRemoveNode","textContent","isNestedIcu","nestedIcuIndex","addRemoveNestedIcu","appendToParentIdx","createAtIdx","ROOT_TEMPLATE_ID","PP_MULTI_VALUE_PLACEHOLDERS_REGEXP","PP_PLACEHOLDERS_REGEXP","PP_ICU_VARS_REGEXP","PP_ICU_PLACEHOLDERS_REGEXP","PP_ICUS_REGEXP","PP_CLOSE_TEMPLATE_REGEXP","PP_TEMPLATE_ID_REGEXP","i18nPostprocess","replacements","templateIdsStack","phs","tmpl","placeholders","placeholder","templateId","isCloseTemplateTag","currentTemplateId","_type","_idx","ɵɵi18nStart","messageIndex","sameViewParentTNode","ɵɵi18nEnd","ɵɵi18n","ɵɵi18nExp","ɵɵi18nApply","ɵɵi18nPostprocess","stashEventListener","listenerFn","ɵɵlistener","useCapture","eventTargetResolver","listenerInternal","findExistingListener","cleanupEventName","listenerIdxInLCleanup","isTNodeDirectiveHost","processOutputs","lCleanupIndex","idxOrTargetGetter","existingListener","lastListenerFn","__ngLastListenerFn__","__ngNextListenerFn__","wrapListener","listen","outputConfig","hostDirectiveOutputConfig","listenToOutput","propertyName","executeListenerWithErrorHandling","wrapListenerIn_markDirtyAndPreventDefault","nextListenerFn","ɵɵnextContext","matchingProjectionSlotIndex","projectionSlots","wildcardNgContentIndex","ngProjectAsAttrVal","ɵɵprojectionDef","componentNode","numProjectionSlots","projectionHeads","tails","componentChild","ɵɵprojection","selectorIndex","fallbackTemplateFn","fallbackDecls","fallbackVars","fallbackIndex","isNodeCreationMode","insertFallbackContent","fallbackTNode","fallbackLContainer","fallbackLView","ɵɵpropertyInterpolate","ɵɵpropertyInterpolate1","ɵɵcontentQuery","ɵɵviewQuery","ɵɵqueryRefresh","ɵɵloadQuery","ɵɵcontentQuerySignal","ɵɵqueryAdvance","indexOffset","ɵɵreference","ɵɵtext","textNative","_locateOrCreateTextNode","ɵɵtextInterpolate","ɵɵtextInterpolate1","interpolated","textBindingInternal","ɵɵtextInterpolate2","ɵɵtwoWayProperty","ɵɵtwoWayBindingSet","canWrite","ɵɵtwoWayListener","viewProviders","resolveProvider","lInjectablesBlueprint","beginIndex","existingFactoryIndex","registerDestroyHooksIfSupported","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesProvidersFactoryExist","doesViewProvidersFactoryExist","multiFactory","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","indexInFactory","multiFactoryAdd","contextIndex","providerIsTypeProvider","providerIsClassProvider","existingCallbacksIndex","isComponentProvider","lData","multiResolve","factories","componentCount","multiProviders","factoryFn","ɵɵProvidersFeature","processProvidersFn","ɵɵpureFunction0","slotOffset","pureFn","ɵɵpureFunction1","exp","pureFunction1Internal","ɵɵpureFunction2","pureFunction2Internal","ɵɵpureFunction3","pureFunction3Internal","getPureFunctionReturnValue","returnValueIndex","lastReturnValue","bindingRoot","ɵɵpipe","pipeName","getPipeDef","pipeFactory","previousInjectorProfilerContext","pipeInstance","ɵɵpipeBind1","offset","isPure","ɵɵpipeBind2","v2","ɵɵtemplateRefExtractor","Version","full","major","minor","patch","VERSION","ModuleWithComponentFactories","ngModuleFactory","componentFactories","Compiler","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","moduleDef","declaration","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","NgZoneChangeDetectionScheduler","applicationRef","_onMicrotaskEmptySubscription","initialize","runningTick","PROVIDED_NG_ZONE","internalProvideZoneChangeDetection","ngZoneFactory","ignoreChangesOutsideZone","getNgZoneOptions","ngZoneChangeDetectionScheduler","ZoneStablePendingTask","provideZoneChangeDetection","zoneProviders","ngZoneOptions","eventCoalescing","runCoalescing","ChangeDetectionSchedulerImpl","taskService","disableScheduling","zoneIsDefined","schedulerTickApplyArgs","__scheduler_tick__","subscriptions","angularZoneId","cancelScheduledCallback","useMicrotaskScheduler","pendingRenderTaskId","force","shouldScheduleTick","scheduleCallback","getGlobalLocale","$localize","LOCALE_ID","PLATFORM_DESTROY_LISTENERS","ENABLE_ROOT_COMPONENT_BOOTSTRAP","isApplicationBootstrapConfig","moduleRef","r3Injector","exceptionHandler","onErrorSubscription","destroyListener","onPlatformDestroyListeners","platformInjector","allPlatformModules","_callAndReportToErrorHandler","initStatus","rootComponent","moduleDoBootstrap","ngDoBootstrap","_platformInjector","createPlatformInjector","createOrReusePlatformInjector","runPlatformInitializers","inits","isDevMode","ChangeDetectorRef","injectChangeDetectorRef","createViewRef","isPipe","hostComponentView","DefaultIterableDifferFactory","supports","DefaultIterableDiffer","trackByIdentity","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","_removalsTail","_identityChangesHead","_identityChangesTail","_trackByFn","forEachItem","forEachOperation","nextIt","nextRemove","addRemoveOffset","moveOffsets","currentIndex","getPreviousIndex","adjPreviousIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","forEachPreviousItem","_nextPrevious","forEachAddedItem","_nextAdded","forEachMovedItem","_nextMoved","forEachRemovedItem","forEachIdentityChange","_nextIdentityChange","diff","check","_reset","mayBeDirty","itemTrackBy","trackById","_mismatch","_verifyReinsertion","_addIdentityChange","_truncate","isDirty","previousRecord","_prev","_remove","_reinsertAfter","_moveAfter","_addAfter","IterableChangeRecord_","reinsertRecord","_addToMoves","nextRecord","_addToRemovals","_unlink","prevRecord","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","_prevDup","_nextDup","_DuplicateItemRecordList","_head","_tail","atOrAfterIndex","duplicates","recordList","isEmpty","moveOffset","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_records","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","forEachChangedItem","_nextChanged","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","KeyValueChangeRecord_","_addToAdditions","_addToChanges","k","defaultIterableDiffersFactory","IterableDiffers","copied","extend","defaultKeyValueDiffersFactory","KeyValueDiffers","kv","internalCreateApplication","appProviders","platformProviders","allAppProviders","adapter","booleanAttribute","numberAttribute","fallbackValue","NaN","parseFloat","untracked$1","EffectRefImpl","effectFn","forceRoot","createViewEffect","createRootEffect","onDestroyFn","BASE_EFFECT_NODE","hasRun","registerCleanupFn","prevNode","prevRefreshingViews","maybeCleanup","ROOT_EFFECT_NODE","VIEW_EFFECT_NODE","elementInjector","_DOM","getDOM","setRootDomAdapter","DomAdapter","PlatformLocation","historyGo","relativePosition","BrowserPlatformLocation","LOCATION_INITIALIZED","_location","_history","_doc","history","getBaseHrefFromDOM","getBaseHref","onPopState","getGlobalEventTarget","onHashChange","href","protocol","hostname","port","pathname","newPath","pushState","title","replaceState","forward","back","go","getState","joinWithSlash","startsWith","stripTrailingSlash","pathEndIdx","normalizeQueryParams","params","LocationStrategy","PathLocationStrategy","APP_BASE_HREF","_platformLocation","_baseHref","_removeListenerFns","origin","prepareExternalUrl","internal","includeHash","queryParams","externalUrl","__ngFactoryType__","Location","_basePath","_locationStrategy","_urlChangeListeners","_urlChangeSubscription","locationStrategy","baseHref","_stripOrigin","_stripIndexHtml","ev","normalize","isCurrentPathEqualTo","query","_stripBasePath","_notifyUrlChangeListeners","onUrlChange","fnIndex","onThrow","onReturn","createLocation","__inject","basePath","strippedUrl","FormStyle","Format","Standalone","TranslationWidth","Narrow","Abbreviated","Wide","Short","FormatWidth","Medium","Long","Full","NumberSymbol","Decimal","Group","List","PercentSign","PlusSign","MinusSign","Exponential","SuperscriptingExponent","PerMille","TimeSeparator","CurrencyDecimal","CurrencyGroup","_findLocaleData","_LocaleDataIndex","getLocaleDayPeriods","formStyle","width","amPmData","amPm","getLastDefinedValue","getLocaleDayNames","daysData","days","getLocaleMonthNames","monthsData","months","getLocaleEraNames","erasData","getLocaleDateFormat","getLocaleTimeFormat","getLocaleDateTimeFormat","dateTimeFormatData","getLocaleNumberSymbol","symbol","checkFullData","getLocaleExtraDayPeriodRules","rule","extractTime","getLocaleExtraDayPeriods","dayPeriodsData","dayPeriods","time","h","hours","minutes","ISO8601_DATE_REGEX","NAMED_FORMATS","DATE_FORMATS_SPLIT","formatDate","format","timezone","date","toDate","getNamedFormat","dateTimezoneOffset","getTimezoneOffset","timezoneToOffset","convertTimezoneToLocal","dateFormatter","getDateFormatter","createDate","year","month","newDate","setFullYear","setHours","formatValue","shortTime","shortDate","formatDateTime","mediumTime","mediumDate","longTime","longDate","fullTime","fullDate","opt_values","padNumber","num","digits","minusSign","negWrap","neg","strNum","formatFractionalSeconds","milliseconds","dateGetter","getDatePart","localeMinus","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getDay","dateStrGetter","form","extended","getDateTranslation","currentHours","currentMinutes","rules","to","afterFrom","beforeTo","unexpected","timeZoneGetter","ceil","JANUARY","THURSDAY","getFirstThursdayOfYear","firstDayOfYear","getThursdayThisIsoWeek","datetime","currentDay","deltaToThursday","weekGetter","monthBased","nbDaysBefore1stDayOfMonth","today","thisThurs","firstThurs","getTime","round","weekNumberingYearGetter","weekNumberingYear","DATE_FORMATS","formatter","fallback","requestedTimezoneOffset","parse","addDateMinutes","setMinutes","reverse","timezoneOffset","reverseValue","isDate","parsedNb","isoStringToDate","tzHour","tzMin","dateSetter","setUTCFullYear","timeSetter","setUTCHours","ms","valueOf","parseCookieValue","cookieStr","encodeURIComponent","cookie","eqIndex","cookieName","cookieValue","decodeURIComponent","WS_REGEXP","NgClass","_ngEl","_renderer","initialClasses","rawClass","stateMap","klass","ngClass","_updateState","_applyStateDiff","nextEnabled","enabled","changed","touched","stateEntry","_toggleClass","C","F","NgIf","_viewContainer","_context","NgIfContext","_thenTemplateRef","_elseTemplateRef","_thenViewRef","_elseViewRef","ngIf","condition","_updateView","ngIfThen","assertTemplate","ngIfElse","ngIfUseIfTypeGuard","ngTemplateGuard_ngIf","ngTemplateContextGuard","dir","property","_RuntimeError","NgStyle","_differs","_ngStyle","_differ","ngStyle","_applyChanges","_setStyle","nameAndUnit","unit","NgTemplateOutlet","_viewContainerRef","_viewRef","ngTemplateOutletContext","ngTemplateOutlet","ngTemplateOutletInjector","_shouldRecreateView","viewContainerRef","_createContextForwardProxy","Proxy","_target","Reflect","receiver","invalidPipeArgumentError","SubscribableStrategy","createSubscription","updateLatestValue","PromiseStrategy","_promiseStrategy","_subscribableStrategy","AsyncPipe","_ref","_latestValue","markForCheckOnValueUpdate","_subscription","_obj","_strategy","ref","_dispose","_selectStrategy","_updateLatestValue","_isPromise","_isSubscribable","yd","DEFAULT_DATE_FORMAT","DATE_PIPE_DEFAULT_TIMEZONE","DATE_PIPE_DEFAULT_OPTIONS","DatePipe","defaultTimezone","defaultOptions","_format","dateFormat","_timezone","CommonModule","ne","te","PLATFORM_BROWSER_ID","PLATFORM_SERVER_ID","isPlatformBrowser","platformId","isPlatformServer","XhrFactory","HttpHandler","HttpBackend","HttpHeaders","headers","normalizedNames","lazyInit","lazyUpdate","line","addHeaderEntry","Headers","entries","setHeaderEntries","getAll","append","op","maybeSetNormalizedName","lcName","copyFrom","applyUpdate","other","base","toDelete","existing","headerValues","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeValue","paramParser","rawParams","codec","param","eqIdx","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","valueToString","HttpParams","encoder","updates","cloneFrom","fromString","fromObject","appendAll","eKey","HttpContext","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","isUrlSearchParams","URLSearchParams","CONTENT_TYPE_HEADER","ACCEPT_HEADER","X_REQUEST_URL_HEADER","TEXT_CONTENT_TYPE","JSON_CONTENT_TYPE","ACCEPT_HEADER_VALUE","HttpRequest","reportProgress","withCredentials","responseType","urlWithParams","transferCache","third","fourth","toUpperCase","qIdx","sep","serializeBody","detectContentTypeHeader","setHeaders","setParams","HttpEventType","Sent","UploadProgress","ResponseHeader","DownloadProgress","Response","User","HttpResponseBase","statusText","ok","defaultStatus","defaultStatusText","HttpHeaderResponse","HttpResponse","HttpErrorResponse","HTTP_STATUS_CODE_OK","HTTP_STATUS_CODE_NO_CONTENT","addBody","observe","HttpClient","req","events$","res$","head","jsonp","callbackParam","post","N","FETCH_BACKEND","interceptorChainEndFn","finalHandlerFn","adaptLegacyInterceptorToChain","chainTailFn","interceptor","initialRequest","intercept","downstreamRequest","chainedInterceptorFn","interceptorFn","HTTP_INTERCEPTORS","HTTP_INTERCEPTOR_FNS","HTTP_ROOT_INTERCEPTOR_FNS","REQUESTS_CONTRIBUTE_TO_STABILITY","legacyInterceptorFnFactory","chain","reduceRight","_PendingTasksInternal","HttpInterceptorHandler","backend","contributeToStability","dedupedInterceptorFns","nextSequencedFn","XSSI_PREFIX","X_REQUEST_URL_REGEXP","getResponseUrl","xhr","responseURL","getAllResponseHeaders","getResponseHeader","HttpXhrBackend","xhrFactory","ɵloadImpl","build","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","onLoad","response","responseText","originalBody","sentHeaders","onDownProgress","progressEvent","loaded","lengthComputable","total","partialText","onUpProgress","progress","upload","send","readyState","DONE","abort","XSRF_ENABLED","XSRF_DEFAULT_COOKIE_NAME","XSRF_COOKIE_NAME","XSRF_DEFAULT_HEADER_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","lastCookieString","lastToken","parseCount","getToken","cookieString","_parseCookieValue","xsrfInterceptorFn","lcUrl","headerName","HttpFeatureKind","Interceptors","LegacyInterceptors","CustomXsrfConfiguration","NoXsrfProtection","JsonpSupport","RequestsMadeViaParent","Fetch","makeHttpFeature","ɵkind","provideHttpClient","LEGACY_INTERCEPTOR_FN","withInterceptorsFromDi","GenericBrowserDomAdapter","_DomAdapter","supportsDOMEvents","BrowserDomAdapter","makeCurrent","_setRootDomAdapter","onAndCancel","evt","dispatchEvent","getDefaultDocument","createHtmlDocument","isElementNode","isShadowRoot","DocumentFragment","getBaseElementHref","relativePath","resetBaseElement","baseElement","getUserAgent","navigator","userAgent","getCookie","baseURI","BrowserXhr","XMLHttpRequest","EVENT_MANAGER_PLUGINS","EventManager","_zone","_plugins","_eventNameToPlugin","plugins","plugin","_findPluginFor","getZone","EventManagerPlugin","APP_ID_ATTRIBUTE_NAME","removeElements","elements","createStyleElement","styleElement","addServerStyles","appId","inline","external","querySelectorAll","HTMLLinkElement","lastIndexOf","usage","createLinkElement","linkElement","SharedStylesHost","nonce","hosts","isServer","addStyles","urls","addUsage","removeStyles","removeUsage","usages","creator","addElement","addHost","hostNode","removeHost","NAMESPACE_URIS","svg","xhtml","xlink","xml","xmlns","math","COMPONENT_REGEX","COMPONENT_VARIABLE","HOST_ATTR","CONTENT_ATTR","REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT","REMOVE_STYLES_ON_COMPONENT_DESTROY","shimContentAttribute","componentShortId","shimHostAttribute","shimStylesContent","compId","DomRendererFactory2","eventManager","sharedStylesHost","removeStylesOnCompDestroy","tracingService","rendererByCompId","defaultRenderer","platformIsServer","DefaultDomRenderer2","getOrCreateRenderer","EmulatedEncapsulationDomRenderer2","applyToHost","NoneEncapsulationDomRenderer","applyStyles","ShadowDomRenderer","componentReplaced","componentId","_TracingService","throwOnSyntheticProps","createElementNS","newChild","isTemplateNode","refChild","oldChild","namespaceUri","setAttributeNS","removeAttributeNS","classList","removeProperty","_getDOM","wrappedCallback","decoratePreventDefault","wrapEventListener","eventHandler","preventDefault","hostEl","shadowRoot","attachShadow","styleEl","styleUrls","styleUrl","linkEl","nodeOrShadowRoot","contentAttr","hostAttr","DomEventsPlugin","MODIFIER_KEYS","_keyMap","Del","Esc","Left","Right","Up","Down","Menu","Scroll","Win","MODIFIER_KEY_GETTERS","alt","altKey","control","ctrlKey","metaKey","shiftKey","KeyEventsPlugin","parseEventName","parsedEvent","outsideHandler","eventCallback","fullKey","domEventName","_normalizeKey","codeIX","modifierName","matchEventFullKeyCode","fullKeyCode","keycode","modifierGetter","keyName","bootstrapApplication","_internalCreateApplication","createProvidersConfig","BROWSER_MODULE_PROVIDERS","INTERNAL_BROWSER_PLATFORM_PROVIDERS","initDomAdapter","_document","_setDocument","_PLATFORM_BROWSER_ID","_INJECTOR_SCOPE","Title","getTitle","setTitle","newTitle","DomSanitizer","__ngConditionalFactory__","DomSanitizerImpl","_allowSanitizationBypassAndThrow","_unwrapSafeValue","__sanitizeHtml","__sanitizeUrl","bypassSecurityTrustHtml","_bypassSanitizationTrustHtml","bypassSecurityTrustStyle","_bypassSanitizationTrustStyle","bypassSecurityTrustScript","_bypassSanitizationTrustScript","bypassSecurityTrustUrl","_bypassSanitizationTrustUrl","bypassSecurityTrustResourceUrl","_bypassSanitizationTrustResourceUrl","BaseControlValueAccessor","_elementRef","onChange","onTouched","registerOnTouched","registerOnChange","setDisabledState","isDisabled","BuiltInControlValueAccessor","mt","NG_VALUE_ACCESSOR","DEFAULT_VALUE_ACCESSOR","DefaultValueAccessor","_isAndroid","COMPOSITION_BUFFER_MODE","_compositionMode","_composing","writeValue","normalizedValue","_handleInput","_compositionStart","_compositionEnd","Nr","$event","isEmptyInputValue","lengthOrSize","NG_VALIDATORS","NG_ASYNC_VALIDATORS","EMAIL_REGEXP","Validators","minValidator","maxValidator","requiredValidator","requiredTrue","requiredTrueValidator","email","emailValidator","minLength","minLengthValidator","maxLength","maxLengthValidator","patternValidator","nullValidator","compose","validators","composeAsync","minlength","requiredLength","actualLength","maxlength","regex","regexStr","requiredPattern","actualValue","isPresent","toObservable","mergeErrors","arrayOfErrors","executeValidators","validator","isValidatorFn","validate","normalizeValidators","presentValidators","composeValidators","composeAsyncValidators","mergeValidators","controlValidators","dirValidator","getControlValidators","_rawValidators","getControlAsyncValidators","_rawAsyncValidators","makeValidatorsArray","hasValidator","addValidators","currentValidators","validatorsToAdd","removeValidators","AbstractControlDirective","valid","invalid","disabled","pristine","untouched","statusChanges","valueChanges","_composedValidatorFn","_composedAsyncValidatorFn","_setValidators","_setAsyncValidators","asyncValidator","_onDestroyCallbacks","_registerOnDestroy","_invokeOnDestroyCallbacks","errorCode","getError","ControlContainer","formDirective","NgControl","valueAccessor","AbstractControlStatus","_cd","cd","isTouched","_touched","isUntouched","isPristine","_pristine","isValid","_status","isInvalid","isPending","isSubmitted","_submitted","submitted","ngControlStatusHost","ngGroupStatusHost","NgControlStatus","Ho","NgControlStatusGroup","VALID","INVALID","PENDING","DISABLED","ControlEvent","ValueChangeEvent","PristineChangeEvent","TouchedChangeEvent","StatusChangeEvent","FormSubmittedEvent","FormResetEvent","pickValidators","validatorOrOpts","isOptionsObj","coerceToValidator","pickAsyncValidators","asyncValidators","coerceToAsyncValidator","assertControlPresent","isGroup","controls","assertAllValuesPresent","_forEachChild","AbstractControl","_pendingDirty","_hasOwnPendingAsyncValidator","_pendingTouched","_onCollectionChange","_updateOn","_asyncValidationSubscription","_assignValidators","_assignAsyncValidators","validatorFn","asyncValidatorFn","statusReactive","pristineReactive","touchedReactive","_events","events","updateOn","setValidators","setAsyncValidators","addAsyncValidators","removeAsyncValidators","hasAsyncValidator","clearValidators","clearAsyncValidators","markAsTouched","sourceControl","onlySelf","emitEvent","markAllAsTouched","markAsUntouched","_updateTouched","markAsDirty","markAsPristine","_updatePristine","markAsPending","disable","skipPristineCheck","_parentMarkedDirty","_updateValue","_updateAncestors","_onDisabledChange","changeFn","enable","updateValueAndValidity","setParent","getRawValue","_setInitialStatus","shouldHaveEmitted","_cancelExistingSubscription","_runValidator","_calculateStatus","_runAsyncValidator","_updateTreeValidity","ctrl","_allControlsDisabled","setErrors","_updateControlsErrors","currPath","_find","changedControl","_initObservables","_anyControlsHaveStatus","_anyControls","_anyControlsDirty","_anyControlsTouched","newPristine","_registerOnCollectionChange","_setUpdateStrategy","parentDirty","FormGroup","_setUpControls","registerControl","addControl","removeControl","setControl","contains","controlName","patchValue","_reduceChildren","acc","_syncPendingControls","subtreeUpdated","updated","_reduceValue","initValue","FormRecord","CALL_SET_DISABLED_STATE","setDisabledStateDefault","controlPath","setUpControl","callSetDisabledState","setUpValidators","setUpViewChangePipeline","setUpModelChangePipeline","setUpBlurPipeline","setUpDisabledChangeHandler","cleanUpControl","validateControlPresenceOnChange","cleanUpValidators","registerOnValidatorChange","onDisabledChange","registerOnDisabledChange","_unregisterOnDisabledChange","onValidatorChange","isControlUpdated","updatedValidators","updatedAsyncValidators","_pendingValue","_pendingChange","updateControl","emitModelToViewChange","viewToModelUpdate","emitModelEvent","_unregisterOnChange","setUpFormContainer","cleanUpFormContainer","isPropertyUpdated","viewModel","model","isBuiltInAccessor","syncPendingControls","selectValueAccessor","valueAccessors","defaultAccessor","builtinAccessor","customAccessor","removeListItem$1","formDirectiveProvider$1","NgForm","resolvedPromise$1","submittedReactive","_directives","ngSubmit","_findContainer","getControl","addFormGroup","group","removeFormGroup","getFormGroup","updateModel","onSubmit","onReset","resetForm","Ie","removeListItem","isFormControlState","formState","FormControl","_onChange","_applyFormState","nonNullable","initialValueIsDefault","emitViewToModelChange","isFormControl","AbstractFormGroupDirective","_checkParentType","formControlBinding$1","NgModel","resolvedPromise","_changeDetectorRef","ngAcceptInputType_isDisabled","_registered","_checkForErrors","_checkName","oldName","_getPath","_setUpControl","_updateDisabled","_isStandalone","_setUpStandalone","disabledValue","ɵNgNoValidate","NUMBER_VALUE_ACCESSOR","NumberValueAccessor","NG_MODEL_WITH_FORM_CONTROL_WARNING","formControlBinding","FormControlDirective","_ngModelWarningConfig","_ngModelWarningSentOnce","_ngModelWarningSent","_isControlChanged","previousForm","formDirectiveProvider","FormGroupDirective","_submittedReactive","_oldForm","_updateDomValue","_updateValidators","_updateRegistrations","_setUpFormContainer","_cleanUpFormContainer","addFormArray","removeFormArray","getFormArray","oldCtrl","newCtrl","formGroupNameProvider","FormGroupName","hasInvalidParent","formArrayNameProvider","FormArrayName","controlNameBinding","FormControlName","_added","toInteger","toFloat","AbstractValidatorDirective","_validator","_enabled","inputName","normalizeInput","createValidator","MIN_VALIDATOR","MinValidator","Bo","MAX_LENGTH_VALIDATOR","MaxLengthValidator","ɵInternalFormsSharedModule","FormArray","_registerControl","removeAt","isAbstractControlOptions","FormBuilder","useNonNullable","nnfb","reducedControls","_reduceControls","newOptions","createdControls","_createControl","FormsModule","withConfig","ReactiveFormsModule","warnOnNgModelWithFormControl","coerceNumberProperty","_isNumberValue","coerceElement","elementOrRef","coerceArray","coerceCssPixelValue","coerceBooleanProperty","coerceStringArray","separator","sourceValues","sourceValue","trimmedString","hasV8BreakIterator","Intl","v8BreakIterator","Platform","_platformId","isBrowser","EDGE","TRIDENT","BLINK","chrome","CSS","WEBKIT","IOS","FIREFOX","ANDROID","SAFARI","supportsPassiveEvents","supportsPassiveEventListeners","normalizePassiveListenerOptions","capture","RtlScrollAxisType","NORMAL","NEGATED","INVERTED","rtlScrollAxisType","scrollBehaviorSupported","supportsScrollBehavior","Element","documentElement","scrollToFunction","scrollTo","getRtlScrollAxisType","scrollContainer","containerStyle","overflow","visibility","pointerEvents","position","contentStyle","height","scrollLeft","shadowDomIsSupported","_supportsShadowDom","createShadowRoot","_getShadowRoot","rootNode","getRootNode","ShadowRoot","_getFocusedElementPierceShadowDom","activeElement","newActiveElement","_getEventTarget","composedPath","_bindEventWithOptions","_isTestEnvironment","__karma__","jasmine","jest","Mocha","supportedInputTypes","candidateInputTypes","getSupportedInputTypes","featureTestInput","appsWithLoaders","WeakMap","_CdkPrivateStyleLoader","_environmentInjector","loaders","refs","isFakeMousedownFromScreenReader","buttons","isFakeTouchstartFromScreenReader","touch","touches","changedTouches","identifier","radiusX","radiusY","INPUT_MODALITY_DETECTOR_OPTIONS","INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS","ignoreKeys","ALT","CONTROL","MAC_META","META","TOUCH_BUFFER_MS","modalityEventListenerOptions","passive","InputModalityDetector","_platform","_listenerCleanups","modalityDetected","modalityChanged","mostRecentModality","_modality","_mostRecentTarget","_options","_lastTouchMs","_onKeydown","keyCode","_onMousedown","_onTouchstart","FocusMonitorDetectionMode","IMMEDIATE","EVENTUAL","FOCUS_MONITOR_DEFAULT_OPTIONS","captureEventListenerOptions","FocusMonitor","_ngZone","_inputModalityDetector","_origin","_lastFocusOrigin","_windowFocused","_windowFocusTimeoutId","_originTimeoutId","_originFromTouchInteraction","_elementInfo","_monitoredElementCount","_rootNodeFocusListenerCount","_detectionMode","_windowFocusListener","_stopInputModalityDetector","detectionMode","_rootNodeFocusAndBlurListener","parentElement","_onFocus","_onBlur","monitor","checkChildren","_getDocument","cachedInfo","_registerGlobalListeners","stopMonitoring","elementInfo","_setClasses","_removeGlobalListeners","focusVia","focusedElement","_getClosestElementsInfo","currentElement","_originChanged","_setOrigin","focus","_info","_getWindow","defaultView","_getFocusOrigin","focusEventTarget","_shouldBeAttributedToTouch","_isLastInteractionFromInputLabel","toggle","isFromInteraction","relatedTarget","_emitOrigin","rootNodeFocusListeners","modality","mostRecentTarget","labels","CdkMonitorFocus","_focusMonitor","_monitorSubscription","_focusOrigin","cdkFocusChange","focusOrigin","hasAttribute","_VisuallyHiddenLoader","mediaQueriesForWebkitCompatibility","mediaQueryStyleNode","MediaMatcher","_nonce","_matchMedia","matchMedia","noopMatchMedia","createEmptyStyleRule","sheet","insertRule","media","BreakpointObserver","_mediaMatcher","_queries","_destroySubject","isMatched","splitQueries","mediaQuery","_registerQuery","mql","stateObservable","breakpointStates","breakpoints","output","a1","a2","shouldIgnoreRecord","Comment","addedNodes","removedNodes","MutationObserverFactory","MutationObserver","ContentObserver","_mutationObserverFactory","_observedElements","_cleanupObserver","_observeElement","_unobserveElement","stream","mutations","characterData","childList","subtree","disconnect","CdkObserveContent","_contentObserver","_disabled","_unsubscribe","debounce","_debounce","_currentSubscription","ObserversModule","InteractivityChecker","isVisible","hasGeometry","getComputedStyle","isTabbable","frameElement","getFrameElement","getWindow","getTabIndexValue","tabIndexValue","isPotentiallyTabbableIOS","tabIndex","isFocusable","isPotentiallyFocusable","ignoreVisibility","offsetWidth","offsetHeight","getClientRects","isNativeFormElement","isHiddenInput","isInputElement","isAnchorWithHref","isAnchorElement","hasValidTabIndex","inputType","ownerDocument","FocusTrap","_element","_checker","_startAnchor","_endAnchor","_hasAttached","startAnchorListener","focusLastTabbableElement","endAnchorListener","focusFirstTabbableElement","_toggleAnchorTabIndex","deferAnchors","attachAnchors","startAnchor","endAnchor","_createAnchor","focusInitialElementWhenReady","_executeOnStable","focusInitialElement","focusFirstTabbableElementWhenReady","focusLastTabbableElementWhenReady","_getRegionBoundary","bound","markers","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","focusableChild","hasAttached","tabbableChild","isEnabled","toggleAnchors","FocusTrapFactory","deferCaptureElements","CdkTrapFocus","_focusTrapFactory","focusTrap","_previouslyFocusedElement","autoCapture","_captureFocus","autoCaptureChange","LIVE_ANNOUNCER_ELEMENT_TOKEN","LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY","LIVE_ANNOUNCER_DEFAULT_OPTIONS","uniqueIds","LiveAnnouncer","_defaultOptions","_liveElement","_previousTimeout","_currentPromise","_currentResolve","elementToken","_createLiveElement","announce","politeness","_exposeAnnouncerToModals","elementClass","previousElements","getElementsByClassName","liveEl","modals","modal","ariaOwns","HighContrastMode","BLACK_ON_WHITE","WHITE_ON_BLACK","BLACK_ON_WHITE_CSS_CLASS","WHITE_ON_BLACK_CSS_CLASS","HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS","HighContrastModeDetector","_hasCheckedHighContrastMode","_breakpointSubscription","_applyBodyHighContrastModeCssClasses","getHighContrastMode","testElement","backgroundColor","documentWindow","computedStyle","computedColor","bodyClasses","A11yModule","counters","_IdGenerator","_appId","getId","hasModifierKey","modifiers","modifier","DEFAULT_TYPEAHEAD_DEBOUNCE_INTERVAL_MS","Typeahead","_letterKeyStream","_items","_selectedItemIndex","_pressedLetters","_skipPredicateFn","_selectedItem","selectedItem","initialItems","typeAheadInterval","debounceInterval","skipPredicate","setItems","_setupKeyHandler","setCurrentSelectedItemIndex","items","handleKey","toLocaleUpperCase","A","Z","ZERO","NINE","fromCharCode","isTyping","letter","inputString","getLabel","ListKeyManager","_activeItemIndex","_activeItem","_wrap","_typeaheadSubscription","_itemChangesSubscription","_vertical","_horizontal","_allowedModifierKeys","_homeAndEnd","_pageUpAndDown","_effectRef","_typeahead","newItems","_itemsChanged","tabOut","withWrap","shouldWrap","withVerticalOrientation","withHorizontalOrientation","direction","withAllowedModifierKeys","withTypeAhead","_getItemsArray","setActiveItem","cancelTypeahead","withHomeAndEnd","withPageUpDown","previousActiveItem","updateActiveItem","onKeydown","isModifierAllowed","every","TAB","DOWN_ARROW","setNextItemActive","UP_ARROW","setPreviousItemActive","RIGHT_ARROW","LEFT_ARROW","HOME","setFirstItemActive","END","setLastItemActive","PAGE_UP","targetIndex","_setActiveItemByIndex","PAGE_DOWN","itemsLength","activeItemIndex","activeItem","_setActiveItemByDelta","itemArray","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","ActiveDescendantKeyManager","setInactiveStyles","setActiveStyles","FocusKeyManager","setFocusOrigin","coerceObservable","TreeKeyManager","_shouldActivationFollowFocus","_horizontalOrientation","_item","_hasInitialFocused","_initializeFocus","activeIndex","_isItemDisabled","makeFocusable","unfocus","focusItem","_updateActiveItemIndex","shouldActivationFollowFocus","horizontalOrientation","typeAheadDebounceInterval","_setTypeAhead","_focusNextItem","_focusPreviousItem","_collapseCurrentItem","_expandCurrentItem","_focusFirstItem","_focusLastItem","_activateCurrentItem","_expandAllItemsAtCurrentItemLevel","getActiveItemIndex","getActiveItem","_findNextAvailableItemIndex","_findPreviousAvailableItemIndex","itemOrIndex","emitChangeEvent","_isCurrentItemExpanded","collapse","getParent","getChildren","isExpanded","itemsToExpand","activate","TREE_KEY_MANAGER_FACTORY","TREE_KEY_MANAGER","ID_DELIMITER","addAriaReferencedId","ids","getAriaReferenceIds","existingId","removeAriaReferencedId","filteredIds","CDK_DESCRIBEDBY_ID_PREFIX","CDK_DESCRIBEDBY_HOST_ATTRIBUTE","nextId","AriaDescriber","_messageRegistry","_messagesContainer","describe","role","_canBeDescribed","getKey","setMessageId","messageElement","referenceCount","_createMessageElement","_isElementDescribedByMessage","_addMessageReference","removeDescription","_isElementNode","_removeMessageReference","registeredMessage","_deleteMessageElement","childNodes","describedElements","_removeCdkDescribedByReferenceIds","_createMessagesContainer","containerClassName","serverContainers","messagesContainer","originalReferenceIds","referenceIds","messageId","trimmedMessage","ariaLabel","serviceId","DIR_DOCUMENT","DIR_DOCUMENT_FACTORY","RTL_LOCALE_PATTERN","_resolveDirectionality","language","bodyDir","htmlDir","BidiModule","MatCommonModule","Portal","_attachedHost","isAttached","setAttachedHost","ComponentPortal","_componentFactoryResolver","TemplatePortal","DomPortal","BasePortalOutlet","_attachedPortal","_disposeFn","_isDisposed","portal","attachComponentPortal","attachTemplatePortal","attachDomPortal","_invokeDisposeFn","setDisposeFn","DomPortalOutlet","outletElement","_defaultInjector","_unusedComponentFactoryResolver","_getComponentRootNode","viewContainer","replaceChild","CdkPortal","CdkPortalOutlet","_moduleRef","_isInitialized","_attachedRef","attached","attachedRef","_getRootNode","PortalModule","DataSource","isDataSource","_ViewRepeaterOperation","REPLACED","INSERTED","MOVED","REMOVED","_VIEW_REPEATER_STRATEGY","DEFAULT_SCROLL_TIME","ScrollDispatcher","_cleanupGlobalListener","_scrolled","_scrolledCount","scrollContainers","scrollable","elementScrolled","deregister","scrollableReference","scrolled","auditTimeInMs","ancestorScrolled","elementOrElementRef","ancestors","getAncestorScrollContainers","scrollingContainers","_scrollableContainsElement","scrollableElement","getElementRef","CdkScrollable","scrollDispatcher","_scrollElement","_cleanupScroll","_elementScrolled","isRtl","left","right","bottom","top","scrollHeight","clientHeight","scrollWidth","clientWidth","_applyScrollToOptions","scrollTop","measureScrollOffset","LEFT","RIGHT","DEFAULT_RESIZE_TIME","ViewportRuler","_listeners","_viewportSize","_change","changeListener","getViewportSize","_updateViewportSize","getViewportRect","scrollPosition","getViewportScrollPosition","documentRect","getBoundingClientRect","scrollY","scrollX","throttleTime","innerWidth","innerHeight","CdkScrollableModule","ScrollingModule","BlockScrollStrategy","_viewportRuler","_previousHTMLStyles","_previousScrollPosition","_isEnabled","_canBeEnabled","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","scroll","viewport","CloseScrollStrategy","_scrollDispatcher","_config","_scrollSubscription","_overlayRef","_initialScrollPosition","overlayRef","overlayElement","threshold","_detach","updatePosition","NoopScrollStrategy","isElementScrolledOutsideView","containerBounds","outsideAbove","outsideBelow","outsideLeft","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","ScrollStrategyOptions","close","reposition","OverlayConfig","positionStrategy","scrollStrategy","panelClass","hasBackdrop","backdropClass","minWidth","minHeight","maxWidth","maxHeight","disposeOnNavigation","configKeys","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BaseOverlayDispatcher","_attachedOverlays","_isAttached","OverlayKeyboardDispatcher","_cleanupKeydown","_keydownListener","overlays","_keydownEvents","OverlayOutsideClickDispatcher","_cursorOriginalValue","_cursorStyleIsSet","_pointerDownEventTarget","_cleanups","eventOptions","_pointerDownListener","_clickListener","_outsidePointerEvents","containsPierceShadowDom","outsidePointerEvents","supportsShadowRoot","_CdkOverlayStyleLoader","OverlayContainer","_containerElement","_styleLoader","getContainerElement","_loadStyles","_createContainer","containerClass","oppositePlatformContainers","BackdropRef","_cleanupClick","_cleanupTransitionEnd","_fallbackTimeout","onClick","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_outsideClickDispatcher","_animationsDisabled","_backdropClick","_attachments","_detachments","_positionStrategy","_scrollStrategy","_locationChanges","_backdropRef","_previousHostParent","_renders","_afterRenderRef","_afterNextRenderRef","backdropElement","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenEmpty","_disposeScrollStrategy","backdropClick","attachments","detachments","keydownEvents","getConfig","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","addPanelClass","removePanelClass","getDirection","updateScrollStrategy","enablePointer","showingClass","cssClasses","isAdd","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","_overlayContainer","_isInitialRender","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_originRect","_overlayRect","_viewportRect","_containerRect","_viewportMargin","_scrollables","_preferredPositions","_boundingBox","_lastPosition","_lastScrollVisibility","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_transformOriginSelector","_appliedPanelClasses","_previousPushAmount","positionChanges","positions","connectedTo","setOrigin","_validatePositions","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_getNarrowedViewportRect","_getOriginRect","originRect","viewportRect","containerRect","flexibleFits","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","withDefaultOffsetX","withDefaultOffsetY","withTransformOriginOn","originX","startX","_isRtl","endX","originY","overlayStartX","overlayX","overlayStartY","overlayY","point","rawOverlayRect","overlay","getRoundedBoundingClientRect","offsetX","_getOffset","offsetY","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","verticalFit","horizontalFit","_pushOverlayOnScreen","overflowRight","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","scrollVisibility","_getScrollVisibility","compareScrollVisibility","changeEvent","xOrigin","yOrigin","transformOrigin","smallestDistanceToViewportEdge","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","_hasExactPosition","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","documentHeight","horizontalStyleProperty","documentWidth","originBounds","overlayBounds","scrollContainerBounds","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","currentOverflow","axis","cssClass","units","clientRect","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_alignItems","_xPosition","_xOffset","_width","_height","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","xPosition","xOffset","marginLeft","marginRight","marginTop","marginBottom","OverlayPositionBuilder","global","flexibleConnectedTo","Overlay","scrollStrategies","_positionBuilder","_directionality","_animationsModuleType","_idGenerator","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","CdkConnectedOverlay","_overlay","_dir","_templatePortal","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","_position","_scrollStrategyFactory","_disposeOnNavigation","_updatePositionStrategy","viewportMargin","disableClose","transformOriginSelector","lockPosition","positionChange","overlayKeydown","overlayOutsideClick","attachOverlay","detachOverlay","_createOverlay","_buildConfig","ESCAPE","_getOriginElement","_createPositionStrategy","currentPosition","_getOrigin","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","OverlayModule","G","RD","pc","B","LD","Mc","pn","T","gn","Qr","ph","mn","xe","He","sb","Qn","Dt","OD","Q","Sc","Ke","w","Kr","Zt","Cc","Ic","hn","lb","D","Tc","E","ub","he","Oi","H","yh","I","db","J","Fi","K","qt","L","Jr","M","Ue","xc","O","hb","eo","Vi","R","mb","S","Nc","yb","U","bh","V","vb","W","X","Oc","Y","kc","Jn","Xr","$","aa","Ct","ba","no","ca","da","we","ea","fa","ga","NV","ha","ia","ja","ka","la","Ls","ma","Kp","na","js","oa","ge","pa","Us","qa","$s","ra","Le","sa","RV","ta","OV","kV","va","FV","wa","xa","Hg","ya","ee","za","Xh","Aa","Ys","Ba","tn","Ca","Da","Ea","At","Fa","PV","Ga","Ha","Xs","Ia","yt","Ja","Jt","Ka","om","La","Oo","Ma","Vt","Na","Yu","Oa","Ir","Pa","vt","Qa","Zw","Ra","LV","Sa","vC","Ta","tt","Ua","be","Va","Bt","Wa","Xa","zV","Ya","We","Za","WV","$a","Iy","ab","jo","bb","ie","eb","YV","fb","CM","gb","KV","VM","ib","Ar","jb","jM","kb","Fy","nt","XV","nb","QV","ob","JV","pb","qb","rS","rb","Ed","tb","ej","tj","nj","wb","rj","xb","oj","ij","zb","wd","Ab","Cd","Bb","Zy","Cb","Yy","Db","Ky","Eb","yS","Fb","sj","Gb","_S","Hb","t0","Ib","n0","Jb","aj","Kb","r0","Lb","cj","Mb","lj","Nb","Ob","uj","Pb","a0","Qb","c0","Rb","u0","Sb","dj","Tb","d0","Ub","f0","Vb","h0","Wb","fj","Xb","hj","Yb","pj","Zb","gj","m0","$b","dv","ac","y0","bc","cc","mj","dc","_0","ec","fc","yj","gc","vj","hc","_j","ic","Dj","jc","bj","Ej","lc","wj","mc","Cj","nc","Ij","oc","Mj","qc","Sj","rc","Rr","sc","Sd","tc","_e","uc","H0","vc","On","wc","xd","yc","Kj","zc","Ld","Ac","Vd","Bc","Xj","Qj","Dc","Jj","Ec","eB","Fc","tB","Gc","nB","Hc","wT","kT","Jc","VT","Kc","_B","Lc","DB","Jv","BB","HB","Pc","yx","Qc","ti","Rc","m_","zt","s_","Uc","Se","Vc","$t","Wc","s2","Xc","Yc","Vr","Zc","Hx","_c","Jo","$c","Gx","ad","l2","bd","qx","Yx","dd","O_","ed","k_","fd","eA","gd","oA","hd","sA","u2","jd","d2","kd","f2","ld","md","j_","nd","Gt","od","Br","pd","_2","qd","D2","rd","de","sd","mf","td","vf","ud","_f","vd","st","_t","O2","Vn","zd","bf","Ad","Ef","Bd","Z_","aA","Dd","X_","Fd","MH","Gd","eD","Hd","oD","Id","sD","Jd","EA","Kd","CA","IA","Md","Mf","Nd","Od","Sf","Pd","Tf","Qd","xf","Rd","wU","TA","Td","xA","Ud","OU","Gr","Wd","e$","Xd","Yd","Bn","Zd","oi","_d","OA","$d","kA","ae","Of","pD","ce","m$","FA","_$","fe","LA","kf","je","Ff","ke","ai","le","jf","me","oe","ci","pe","Vf","qe","UA","re","GA","se"],"ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115],"sources":["node_modules/rxjs/src/internal/util/isFunction.ts","node_modules/rxjs/src/internal/util/createErrorClass.ts","node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","node_modules/rxjs/src/internal/util/arrRemove.ts","node_modules/rxjs/src/internal/Subscription.ts","node_modules/rxjs/src/internal/util/EmptyError.ts","node_modules/rxjs/src/internal/lastValueFrom.ts","node_modules/rxjs/src/internal/util/lift.ts","node_modules/rxjs/src/internal/config.ts","node_modules/rxjs/src/internal/scheduler/timeoutProvider.ts","node_modules/rxjs/src/internal/util/reportUnhandledError.ts","node_modules/rxjs/src/internal/util/noop.ts","node_modules/rxjs/src/internal/NotificationFactories.ts","node_modules/rxjs/src/internal/util/errorContext.ts","node_modules/rxjs/src/internal/Subscriber.ts","node_modules/rxjs/src/internal/operators/OperatorSubscriber.ts","node_modules/rxjs/src/internal/operators/map.ts","node_modules/rxjs/src/internal/symbol/observable.ts","node_modules/rxjs/src/internal/util/identity.ts","node_modules/rxjs/src/internal/util/pipe.ts","node_modules/rxjs/src/internal/Observable.ts","node_modules/rxjs/src/internal/util/argsArgArrayOrObject.ts","node_modules/tslib/tslib.es6.mjs","node_modules/rxjs/src/internal/util/isArrayLike.ts","node_modules/rxjs/src/internal/util/isPromise.ts","node_modules/rxjs/src/internal/util/isInteropObservable.ts","node_modules/rxjs/src/internal/util/isAsyncIterable.ts","node_modules/rxjs/src/internal/util/throwUnobservableError.ts","node_modules/rxjs/src/internal/symbol/iterator.ts","node_modules/rxjs/src/internal/util/isIterable.ts","node_modules/rxjs/src/internal/util/isReadableStreamLike.ts","node_modules/rxjs/src/internal/observable/innerFrom.ts","node_modules/rxjs/src/internal/util/isScheduler.ts","node_modules/rxjs/src/internal/util/args.ts","node_modules/rxjs/src/internal/util/mapOneOrManyArgs.ts","node_modules/rxjs/src/internal/util/createObject.ts","node_modules/rxjs/src/internal/observable/forkJoin.ts","node_modules/rxjs/src/internal/util/executeSchedule.ts","node_modules/rxjs/src/internal/operators/mergeInternals.ts","node_modules/rxjs/src/internal/operators/mergeMap.ts","node_modules/rxjs/src/internal/observable/fromEvent.ts","node_modules/rxjs/src/internal/scheduler/Action.ts","node_modules/rxjs/src/internal/scheduler/intervalProvider.ts","node_modules/rxjs/src/internal/scheduler/AsyncAction.ts","node_modules/rxjs/src/internal/scheduler/dateTimestampProvider.ts","node_modules/rxjs/src/internal/Scheduler.ts","node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts","node_modules/rxjs/src/internal/scheduler/async.ts","node_modules/rxjs/src/internal/util/isDate.ts","node_modules/rxjs/src/internal/observable/timer.ts","node_modules/rxjs/src/internal/operators/debounceTime.ts","node_modules/rxjs/src/internal/operators/mergeAll.ts","node_modules/rxjs/src/internal/operators/concatAll.ts","node_modules/rxjs/src/internal/operators/observeOn.ts","node_modules/rxjs/src/internal/operators/subscribeOn.ts","node_modules/rxjs/src/internal/scheduled/scheduleObservable.ts","node_modules/rxjs/src/internal/scheduled/schedulePromise.ts","node_modules/rxjs/src/internal/scheduled/scheduleArray.ts","node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts","node_modules/rxjs/src/internal/scheduled/scheduleAsyncIterable.ts","node_modules/rxjs/src/internal/scheduled/scheduleReadableStreamLike.ts","node_modules/rxjs/src/internal/scheduled/scheduled.ts","node_modules/rxjs/src/internal/observable/from.ts","node_modules/rxjs/src/internal/observable/concat.ts","node_modules/rxjs/src/internal/operators/startWith.ts","node_modules/rxjs/src/internal/operators/refCount.ts","node_modules/rxjs/src/internal/observable/ConnectableObservable.ts","node_modules/rxjs/src/internal/scheduler/animationFrameProvider.ts","node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","node_modules/rxjs/src/internal/Subject.ts","node_modules/rxjs/src/internal/BehaviorSubject.ts","node_modules/rxjs/src/internal/ReplaySubject.ts","node_modules/rxjs/src/internal/scheduler/AnimationFrameAction.ts","node_modules/rxjs/src/internal/scheduler/AnimationFrameScheduler.ts","node_modules/rxjs/src/internal/scheduler/animationFrame.ts","node_modules/rxjs/src/internal/observable/empty.ts","node_modules/rxjs/src/internal/observable/of.ts","node_modules/rxjs/src/internal/observable/throwError.ts","node_modules/rxjs/src/internal/util/isObservable.ts","node_modules/rxjs/src/internal/observable/combineLatest.ts","node_modules/rxjs/src/internal/observable/defer.ts","node_modules/rxjs/src/internal/observable/interval.ts","node_modules/rxjs/src/internal/observable/merge.ts","node_modules/rxjs/src/internal/observable/never.ts","node_modules/rxjs/src/internal/operators/filter.ts","node_modules/rxjs/src/internal/operators/audit.ts","node_modules/rxjs/src/internal/operators/auditTime.ts","node_modules/rxjs/src/internal/operators/catchError.ts","node_modules/rxjs/src/internal/operators/scanInternals.ts","node_modules/rxjs/src/internal/operators/reduce.ts","node_modules/rxjs/src/internal/operators/concatMap.ts","node_modules/rxjs/src/internal/observable/fromSubscribable.ts","node_modules/rxjs/src/internal/operators/connect.ts","node_modules/rxjs/src/internal/operators/defaultIfEmpty.ts","node_modules/rxjs/src/internal/operators/take.ts","node_modules/rxjs/src/internal/operators/ignoreElements.ts","node_modules/rxjs/src/internal/operators/mapTo.ts","node_modules/rxjs/src/internal/operators/delayWhen.ts","node_modules/rxjs/src/internal/operators/delay.ts","node_modules/rxjs/src/internal/operators/distinctUntilChanged.ts","node_modules/rxjs/src/internal/operators/throwIfEmpty.ts","node_modules/rxjs/src/internal/operators/finalize.ts","node_modules/rxjs/src/internal/operators/first.ts","node_modules/rxjs/src/internal/operators/takeLast.ts","node_modules/rxjs/src/internal/operators/last.ts","node_modules/rxjs/src/internal/operators/multicast.ts","node_modules/rxjs/src/internal/operators/pairwise.ts","node_modules/rxjs/src/internal/operators/publish.ts","node_modules/rxjs/src/internal/operators/scan.ts","node_modules/rxjs/src/internal/operators/share.ts","node_modules/rxjs/src/internal/operators/shareReplay.ts","node_modules/rxjs/src/internal/operators/skip.ts","node_modules/rxjs/src/internal/operators/switchMap.ts","node_modules/rxjs/src/internal/operators/takeUntil.ts","node_modules/rxjs/src/internal/operators/takeWhile.ts","node_modules/rxjs/src/internal/operators/tap.ts","../../packages/core/primitives/signals/src/equality.ts","../../packages/core/primitives/signals/src/graph.ts","../../packages/core/primitives/signals/src/computed.ts","../../packages/core/primitives/signals/src/errors.ts","../../packages/core/primitives/signals/src/signal.ts","../../packages/core/primitives/signals/src/untracked.ts","../../packages/core/primitives/di/src/injector.ts","../../packages/core/primitives/di/src/not_found.ts","../../packages/core/src/error_details_base_url.ts","../../packages/core/src/errors.ts","../../packages/core/src/authoring/input/input_signal_node.ts","../../packages/core/src/authoring/input/input_signal.ts","../../packages/core/src/util/closure.ts","../../packages/core/src/util/decorators.ts","../../packages/core/src/util/global.ts","../../packages/core/src/util/property.ts","../../packages/core/src/util/stringify.ts","../../packages/core/src/di/forward_ref.ts","../../packages/core/src/util/assert.ts","../../packages/core/src/di/interface/defs.ts","../../packages/core/src/di/injection_token.ts","../../packages/core/src/di/interface/provider.ts","../../packages/core/src/render3/fields.ts","../../packages/core/src/render3/util/stringify_utils.ts","../../packages/core/src/render3/errors_di.ts","../../packages/core/src/di/interface/injector.ts","../../packages/core/src/di/inject_switch.ts","../../packages/core/src/di/injector_compatibility.ts","../../packages/core/src/di/metadata.ts","../../packages/core/src/render3/definition_factory.ts","../../packages/core/src/util/array_utils.ts","../../packages/core/src/util/empty.ts","../../packages/core/src/di/initializer_token.ts","../../packages/core/src/di/injector_token.ts","../../packages/core/src/di/internal_tokens.ts","../../packages/core/src/di/null_injector.ts","../../packages/core/src/render3/def_getters.ts","../../packages/core/src/di/provider_collection.ts","../../packages/core/src/di/scope.ts","../../packages/core/src/di/r3_injector.ts","../../packages/core/src/di/contextual.ts","../../packages/core/src/interface/type.ts","../../packages/core/src/render3/interfaces/view.ts","../../packages/core/src/render3/interfaces/container.ts","../../packages/core/src/render3/interfaces/type_checks.ts","../../packages/core/src/interface/simple_change.ts","../../packages/core/src/render3/apply_value_input_field.ts","../../packages/core/src/render3/features/ng_onchanges_feature.ts","../../packages/core/src/render3/profiler.ts","../../packages/core/src/render3/namespaces.ts","../../packages/core/src/render3/util/view_utils.ts","../../packages/core/src/render3/state.ts","../../packages/core/src/render3/hooks.ts","../../packages/core/src/render3/interfaces/injector.ts","../../packages/core/src/render3/interfaces/node.ts","../../packages/core/src/render3/util/attrs_utils.ts","../../packages/core/src/view/provider_flags.ts","../../packages/core/src/render3/chained_injector.ts","../../packages/core/src/render3/util/injector_utils.ts","../../packages/core/src/render3/di.ts","../../packages/core/src/render3/instructions/di_attr.ts","../../packages/core/src/di/create_injector.ts","../../packages/core/src/di/injector.ts","../../packages/core/src/di/host_attribute_token.ts","../../packages/core/src/di/host_tag_name_token.ts","../../packages/core/src/change_detection/scheduling/flags.ts","../../packages/core/src/linker/destroy_ref.ts","../../packages/core/src/change_detection/scheduling/zoneless_scheduling.ts","../../packages/core/src/pending_tasks.ts","../../packages/core/src/event_emitter.ts","../../packages/core/src/util/noop.ts","../../packages/core/src/util/callback_scheduler.ts","../../packages/core/src/zone/ng_zone.ts","../../packages/core/src/error_handler.ts","../../packages/core/src/authoring/input/input.ts","../../packages/core/src/linker/element_ref.ts","../../packages/core/src/render3/reactivity/api.ts","../../packages/core/src/render3/reactivity/signal.ts","../../packages/core/src/linker/query_list.ts","../../packages/core/src/hydration/skip_hydration.ts","../../packages/core/src/change_detection/constants.ts","../../packages/core/src/render3/interfaces/lview_tracking.ts","../../packages/core/src/render3/context_discovery.ts","../../packages/core/src/render3/util/view_traversal_utils.ts","../../packages/core/src/render3/interfaces/document.ts","../../packages/core/src/application/application_tokens.ts","../../packages/core/src/hydration/interfaces.ts","../../packages/core/src/hydration/tokens.ts","../../packages/core/src/application/tracing.ts","../../packages/core/src/util/performance.ts","../../packages/core/src/render3/reactivity/asserts.ts","../../packages/core/src/render3/view_context.ts","../../packages/core/src/render3/after_render/api.ts","../../packages/core/src/render3/after_render/manager.ts","../../packages/core/src/render3/after_render/hooks.ts","../../packages/core/src/defer/interfaces.ts","../../packages/core/src/defer/cleanup.ts","../../packages/core/src/defer/utils.ts","../../packages/core/src/defer/registry.ts","../../packages/core/src/hydration/utils.ts","../../packages/core/src/render3/queries/query_execution.ts","../../packages/core/src/metadata/view.ts","../../packages/core/src/util/security/trusted_types.ts","../../packages/core/src/util/security/trusted_types_bypass.ts","../../packages/core/src/sanitization/bypass.ts","../../packages/core/src/sanitization/inert_body.ts","../../packages/core/src/sanitization/url_sanitizer.ts","../../packages/core/src/sanitization/html_sanitizer.ts","../../packages/core/src/sanitization/security.ts","../../packages/core/src/sanitization/sanitization.ts","../../packages/core/src/util/dom.ts","../../packages/core/src/render3/util/misc_utils.ts","../../packages/core/src/render3/styling/class_differ.ts","../../packages/core/src/render3/node_selector_matcher.ts","../../packages/core/src/render3/tokens.ts","../../packages/core/src/render3/dom_node_manipulation.ts","../../packages/core/src/render3/view/construction.ts","../../packages/core/src/render3/instructions/advance.ts","../../packages/core/src/render3/interfaces/input_flags.ts","../../packages/core/src/render3/instructions/write_to_directive_input.ts","../../packages/core/src/render3/instructions/shared.ts","../../packages/core/src/render3/instructions/render.ts","../../packages/core/src/render3/view_manipulation.ts","../../packages/core/src/render3/i18n/i18n_tree_shaking.ts","../../packages/core/src/render/api_flags.ts","../../packages/core/src/i18n/utils.ts","../../packages/core/src/render3/node_manipulation.ts","../../packages/core/src/render3/collect_native_nodes.ts","../../packages/core/src/render3/after_render/view.ts","../../packages/core/src/render3/reactive_lview_consumer.ts","../../packages/core/src/render3/reactivity/view_effect_runner.ts","../../packages/core/src/render3/instructions/change_detection.ts","../../packages/core/src/render3/instructions/mark_view_dirty.ts","../../packages/core/src/render3/view/container.ts","../../packages/core/src/render3/view_ref.ts","../../packages/core/src/linker/template_ref.ts","../../packages/core/src/render3/node_manipulation_i18n.ts","../../packages/core/src/render3/tnode_manipulation.ts","../../packages/core/src/render3/i18n/i18n_insert_before_index.ts","../../packages/core/src/render3/i18n/i18n_util.ts","../../packages/core/src/render3/instructions/i18n_icu_container_visitor.ts","../../packages/core/src/hydration/compression.ts","../../packages/core/src/hydration/i18n.ts","../../packages/core/src/hydration/views.ts","../../packages/core/src/linker/component_factory.ts","../../packages/core/src/linker/component_factory_resolver.ts","../../packages/core/src/render/api.ts","../../packages/core/src/sanitization/sanitizer.ts","../../packages/core/src/render3/styling/static_styling.ts","../../packages/core/src/render3/instructions/di.ts","../../packages/core/src/render3/view/directives.ts","../../packages/core/src/render3/view/elements.ts","../../packages/core/src/render3/component_ref.ts","../../packages/core/src/linker/view_container_ref.ts","../../packages/core/src/render3/queries/query.ts","../../packages/core/src/render3/queries/query_reactive.ts","../../packages/core/src/authoring/queries.ts","../../packages/core/src/linker/ng_module_factory.ts","../../packages/core/src/render3/ng_module_ref.ts","../../packages/core/src/render3/standalone_service.ts","../../packages/core/src/render3/definition.ts","../../packages/core/src/render3/features/inherit_definition_feature.ts","../../packages/core/src/render3/features/host_directives_feature.ts","../../packages/core/src/util/iterable.ts","../../packages/core/src/render3/bindings.ts","../../packages/core/src/render3/instructions/template.ts","../../packages/core/src/defer/idle_scheduler.ts","../../packages/core/src/defer/timer_scheduler.ts","../../packages/core/src/cached_injector_service.ts","../../packages/core/src/defer/rendering.ts","../../packages/core/src/render3/metadata.ts","../../packages/core/src/console.ts","../../packages/core/src/testability/testability.ts","../../packages/core/src/render3/reactivity/root_effect_scheduler.ts","../../packages/core/src/util/lang.ts","../../packages/core/src/application/application_init.ts","../../packages/core/src/application/application_ref.ts","../../packages/core/src/defer/triggering.ts","../../packages/core/src/defer/instructions.ts","../../packages/core/src/render3/instructions/attribute.ts","../../packages/core/src/render3/instructions/interpolation.ts","../../packages/core/src/render3/interfaces/styling.ts","../../packages/core/src/render3/styling/style_binding_list.ts","../../packages/core/src/render3/styling/styling_parser.ts","../../packages/core/src/render3/instructions/property.ts","../../packages/core/src/render3/instructions/styling.ts","../../packages/core/src/render3/instructions/class_map_interpolation.ts","../../packages/core/src/render3/list_reconciliation.ts","../../packages/core/src/render3/instructions/control_flow.ts","../../packages/core/src/render3/instructions/element.ts","../../packages/core/src/render3/instructions/element_container.ts","../../packages/core/src/render3/instructions/get_current_view.ts","../../packages/core/src/render3/instructions/host_property.ts","../../packages/core/src/i18n/locale_en.ts","../../packages/core/src/i18n/locale_data_api.ts","../../packages/core/src/i18n/localization.ts","../../packages/core/src/render3/interfaces/i18n.ts","../../packages/core/src/render3/i18n/i18n_locale_id.ts","../../packages/core/src/render3/i18n/i18n_apply.ts","../../packages/core/src/render3/i18n/i18n_parse.ts","../../packages/core/src/render3/i18n/i18n_postprocess.ts","../../packages/core/src/render3/instructions/i18n.ts","../../packages/core/src/render3/instructions/listener.ts","../../packages/core/src/render3/instructions/next_context.ts","../../packages/core/src/render3/instructions/projection.ts","../../packages/core/src/render3/instructions/property_interpolation.ts","../../packages/core/src/render3/instructions/queries.ts","../../packages/core/src/render3/instructions/queries_signals.ts","../../packages/core/src/render3/instructions/storage.ts","../../packages/core/src/render3/instructions/text.ts","../../packages/core/src/render3/instructions/text_interpolation.ts","../../packages/core/src/render3/instructions/two_way.ts","../../packages/core/src/render3/di_setup.ts","../../packages/core/src/render3/features/providers_feature.ts","../../packages/core/src/render3/pure_function.ts","../../packages/core/src/render3/pipe.ts","../../packages/core/src/render3/view_engine_compatibility_prebound.ts","../../packages/core/src/version.ts","../../packages/core/src/linker/compiler.ts","../../packages/core/src/application/application_ngmodule_factory_compiler.ts","../../packages/core/src/change_detection/scheduling/ng_zone_scheduling.ts","../../packages/core/src/change_detection/scheduling/zoneless_scheduling_impl.ts","../../packages/core/src/i18n/tokens.ts","../../packages/core/src/platform/platform_destroy_listeners.ts","../../packages/core/src/platform/bootstrap.ts","../../packages/core/src/platform/platform.ts","../../packages/core/src/util/is_dev_mode.ts","../../packages/core/src/change_detection/change_detector_ref.ts","../../packages/core/src/change_detection/differs/default_iterable_differ.ts","../../packages/core/src/change_detection/differs/default_keyvalue_differ.ts","../../packages/core/src/change_detection/differs/iterable_differs.ts","../../packages/core/src/change_detection/differs/keyvalue_differs.ts","../../packages/core/src/application/create_application.ts","../../packages/core/src/util/coercion.ts","../../packages/core/src/render3/reactivity/untracked.ts","../../packages/core/src/render3/reactivity/computed.ts","../../packages/core/src/render3/reactivity/effect.ts","../../packages/core/src/render3/component.ts","../../packages/common/src/dom_adapter.ts","../../packages/common/src/dom_tokens.ts","../../packages/common/src/location/platform_location.ts","../../packages/common/src/location/util.ts","../../packages/common/src/location/location_strategy.ts","../../packages/common/src/location/location.ts","../../packages/common/src/i18n/locale_data_api.ts","../../packages/common/src/i18n/format_date.ts","../../packages/common/src/cookie.ts","../../packages/common/src/directives/ng_class.ts","../../packages/common/src/directives/ng_if.ts","../../packages/common/src/directives/ng_style.ts","../../packages/common/src/directives/ng_template_outlet.ts","../../packages/common/src/pipes/invalid_pipe_argument_error.ts","../../packages/common/src/pipes/async_pipe.ts","../../packages/common/src/pipes/date_pipe_config.ts","../../packages/common/src/pipes/date_pipe.ts","../../packages/common/src/common_module.ts","../../packages/common/src/platform_id.ts","../../packages/common/src/xhr.ts","../../packages/common/http/src/backend.ts","../../packages/common/http/src/headers.ts","../../packages/common/http/src/params.ts","../../packages/common/http/src/context.ts","../../packages/common/http/src/request.ts","../../packages/common/http/src/response.ts","../../packages/common/http/src/client.ts","../../packages/common/http/src/fetch.ts","../../packages/common/http/src/interceptor.ts","../../packages/common/http/src/xhr.ts","../../packages/common/http/src/xsrf.ts","../../packages/common/http/src/provider.ts","../../packages/platform-browser/src/browser/generic_browser_adapter.ts","../../packages/platform-browser/src/browser/browser_adapter.ts","../../packages/platform-browser/src/browser/xhr.ts","../../packages/platform-browser/src/dom/events/event_manager.ts","../../packages/platform-browser/src/dom/shared_styles_host.ts","../darwin_arm64-fastbuild-ST-2e5f3376adb5/bin/packages/platform-browser/src/dom/dom_renderer.mjs","../../packages/platform-browser/src/dom/events/dom_events.ts","../../packages/platform-browser/src/dom/events/key_events.ts","../../packages/platform-browser/src/browser.ts","../../packages/platform-browser/src/browser/title.ts","../../packages/platform-browser/src/security/dom_sanitization_service.ts","../../packages/forms/src/directives/control_value_accessor.ts","../../packages/forms/src/directives/default_value_accessor.ts","../../packages/forms/src/validators.ts","../../packages/forms/src/directives/abstract_control_directive.ts","../../packages/forms/src/directives/control_container.ts","../../packages/forms/src/directives/ng_control.ts","../../packages/forms/src/directives/ng_control_status.ts","../../packages/forms/src/model/abstract_model.ts","../../packages/forms/src/model/form_group.ts","../../packages/forms/src/directives/shared.ts","../../packages/forms/src/directives/ng_form.ts","../../packages/forms/src/util.ts","../../packages/forms/src/model/form_control.ts","../../packages/forms/src/directives/abstract_form_group_directive.ts","../../packages/forms/src/directives/ng_model.ts","../../packages/forms/src/directives/ng_no_validate_directive.ts","../../packages/forms/src/directives/number_value_accessor.ts","../../packages/forms/src/directives/reactive_directives/form_control_directive.ts","../../packages/forms/src/directives/reactive_directives/form_group_directive.ts","../../packages/forms/src/directives/reactive_directives/form_group_name.ts","../../packages/forms/src/directives/reactive_directives/form_control_name.ts","../../packages/forms/src/directives/validators.ts","../../packages/forms/src/directives.ts","../../packages/forms/src/model/form_array.ts","../../packages/forms/src/form_builder.ts","../../packages/forms/src/form_providers.ts","../../src/cdk/coercion/number-property.ts","../../src/cdk/coercion/element.ts","../../src/cdk/coercion/array.ts","../../src/cdk/coercion/css-pixel-value.ts","../../src/cdk/coercion/boolean-property.ts","../../src/cdk/coercion/string-array.ts","../../src/cdk/platform/platform.ts","../../src/cdk/platform/features/passive-listeners.ts","../../src/cdk/platform/features/scrolling.ts","../../src/cdk/platform/features/shadow-dom.ts","../../src/cdk/platform/features/backwards-compatibility.ts","../../src/cdk/platform/features/test-environment.ts","../../src/cdk/platform/features/input-types.ts","../../src/cdk/private/style-loader.ts","../../src/cdk/a11y/fake-event-detection.ts","../../src/cdk/a11y/input-modality/input-modality-detector.ts","../../src/cdk/a11y/focus-monitor/focus-monitor.ts","../../src/cdk/private/visually-hidden/visually-hidden.ts","../../src/cdk/layout/media-matcher.ts","../../src/cdk/layout/breakpoints-observer.ts","../../src/cdk/observers/observe-content.ts","../../src/cdk/a11y/interactivity-checker/interactivity-checker.ts","../../src/cdk/a11y/focus-trap/focus-trap.ts","../../src/cdk/a11y/live-announcer/live-announcer-tokens.ts","../../src/cdk/a11y/live-announcer/live-announcer.ts","../../src/cdk/a11y/high-contrast-mode/high-contrast-mode-detector.ts","../../src/cdk/a11y/a11y-module.ts","../../src/cdk/a11y/id-generator.ts","../../src/cdk/keycodes/modifiers.ts","../../src/cdk/a11y/key-manager/typeahead.ts","../../src/cdk/a11y/key-manager/list-key-manager.ts","../../src/cdk/a11y/key-manager/activedescendant-key-manager.ts","../../src/cdk/a11y/key-manager/focus-key-manager.ts","../../src/cdk/coercion/private/observable.ts","../../src/cdk/a11y/key-manager/tree-key-manager.ts","../../src/cdk/a11y/aria-describer/aria-reference.ts","../../src/cdk/a11y/aria-describer/aria-describer.ts","../../src/cdk/bidi/dir-document-token.ts","../../src/cdk/bidi/directionality.ts","../../src/cdk/bidi/bidi-module.ts","../../src/material/core/common-behaviors/common-module.ts","../../src/cdk/portal/portal.ts","../../src/cdk/portal/dom-portal-outlet.ts","../../src/cdk/portal/portal-directives.ts","../../src/cdk/collections/data-source.ts","../../src/cdk/collections/view-repeater.ts","../../src/cdk/scrolling/scroll-dispatcher.ts","../../src/cdk/scrolling/scrollable.ts","../../src/cdk/scrolling/viewport-ruler.ts","../../src/cdk/scrolling/scrolling-module.ts","../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../src/cdk/overlay/position/scroll-clip.ts","../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../src/cdk/overlay/overlay-config.ts","../../src/cdk/overlay/position/connected-position.ts","../../src/cdk/overlay/dispatchers/base-overlay-dispatcher.ts","../../src/cdk/overlay/dispatchers/overlay-keyboard-dispatcher.ts","../../src/cdk/overlay/dispatchers/overlay-outside-click-dispatcher.ts","../../src/cdk/overlay/overlay-container.ts","../../src/cdk/overlay/backdrop-ref.ts","../../src/cdk/overlay/overlay-ref.ts","../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../src/cdk/overlay/position/global-position-strategy.ts","../../src/cdk/overlay/position/overlay-position-builder.ts","../../src/cdk/overlay/overlay.ts","../../src/cdk/overlay/overlay-directives.ts","../../src/cdk/overlay/overlay-module.ts"],"sourcesContent":["/**\n * Returns true if the object is a function.\n * @param value The value to check\n */\nexport function isFunction(value: any): value is (...args: any[]) => any {\n  return typeof value === 'function';\n}\n","/**\n * Used to create Error subclasses until the community moves away from ES5.\n *\n * This is because compiling from TypeScript down to ES5 has issues with subclassing Errors\n * as well as other built-in types: https://github.com/Microsoft/TypeScript/issues/12123\n *\n * @param createImpl A factory function to create the actual constructor implementation. The returned\n * function should be a named function that calls `_super` internally.\n */\nexport function createErrorClass<T>(createImpl: (_super: any) => any): T {\n  const _super = (instance: any) => {\n    Error.call(instance);\n    instance.stack = new Error().stack;\n  };\n\n  const ctorFunc = createImpl(_super);\n  ctorFunc.prototype = Object.create(Error.prototype);\n  ctorFunc.prototype.constructor = ctorFunc;\n  return ctorFunc;\n}\n","import { createErrorClass } from './createErrorClass';\n\nexport interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (errors: any[]): UnsubscriptionError;\n}\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = createErrorClass(\n  (_super) =>\n    function UnsubscriptionErrorImpl(this: any, errors: (Error | string)[]) {\n      _super(this);\n      this.message = errors\n        ? `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}`\n        : '';\n      this.name = 'UnsubscriptionError';\n      this.errors = errors;\n    }\n);\n","/**\n * Removes an item from an array, mutating it.\n * @param arr The array to remove the item from\n * @param item The item to remove\n */\nexport function arrRemove<T>(arr: T[] | undefined | null, item: T) {\n  if (arr) {\n    const index = arr.indexOf(item);\n    0 <= index && arr.splice(index, 1);\n  }\n}\n","import { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic, Unsubscribable } from './types';\nimport { arrRemove } from './util/arrRemove';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY = (() => {\n    const empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  })();\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   */\n  public closed = false;\n\n  private _parentage: Subscription[] | Subscription | null = null;\n\n  /**\n   * The list of registered finalizers to execute upon unsubscription. Adding and removing from this\n   * list occurs in the {@link #add} and {@link #remove} methods.\n   */\n  private _finalizers: Exclude<TeardownLogic, void>[] | null = null;\n\n  /**\n   * @param initialTeardown A function executed first as part of the finalization\n   * process that is kicked off when {@link #unsubscribe} is called.\n   */\n  constructor(private initialTeardown?: () => void) {}\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[] | undefined;\n\n    if (!this.closed) {\n      this.closed = true;\n\n      // Remove this from it's parents.\n      const { _parentage } = this;\n      if (_parentage) {\n        this._parentage = null;\n        if (Array.isArray(_parentage)) {\n          for (const parent of _parentage) {\n            parent.remove(this);\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n\n      const { initialTeardown: initialFinalizer } = this;\n      if (isFunction(initialFinalizer)) {\n        try {\n          initialFinalizer();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n\n      const { _finalizers } = this;\n      if (_finalizers) {\n        this._finalizers = null;\n        for (const finalizer of _finalizers) {\n          try {\n            execFinalizer(finalizer);\n          } catch (err) {\n            errors = errors ?? [];\n            if (err instanceof UnsubscriptionError) {\n              errors = [...errors, ...err.errors];\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  }\n\n  /**\n   * Adds a finalizer to this subscription, so that finalization will be unsubscribed/called\n   * when this subscription is unsubscribed. If this subscription is already {@link #closed},\n   * because it has already been unsubscribed, then whatever finalizer is passed to it\n   * will automatically be executed (unless the finalizer itself is also a closed subscription).\n   *\n   * Closed Subscriptions cannot be added as finalizers to any subscription. Adding a closed\n   * subscription to a any subscription will result in no operation. (A noop).\n   *\n   * Adding a subscription to itself, or adding `null` or `undefined` will not perform any\n   * operation at all. (A noop).\n   *\n   * `Subscription` instances that are added to this instance will automatically remove themselves\n   * if they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\n   * will need to be removed manually with {@link #remove}\n   *\n   * @param teardown The finalization logic to add to this subscription.\n   */\n  add(teardown: TeardownLogic): void {\n    // Only add the finalizer if it's not undefined\n    // and don't add a subscription to itself.\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        // If this subscription is already closed,\n        // execute whatever finalizer is handed to it automatically.\n        execFinalizer(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          // We don't add closed subscriptions, and we don't add the same subscription\n          // twice. Subscription unsubscribe is idempotent.\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n          teardown._addParent(this);\n        }\n        (this._finalizers = this._finalizers ?? []).push(teardown);\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a this subscription already has a particular parent.\n   * This will signal that this subscription has already been added to the parent in question.\n   * @param parent the parent to check for\n   */\n  private _hasParent(parent: Subscription) {\n    const { _parentage } = this;\n    return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n  }\n\n  /**\n   * Adds a parent to this subscription so it can be removed from the parent if it\n   * unsubscribes on it's own.\n   *\n   * NOTE: THIS ASSUMES THAT {@link _hasParent} HAS ALREADY BEEN CHECKED.\n   * @param parent The parent subscription to add\n   */\n  private _addParent(parent: Subscription) {\n    const { _parentage } = this;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  }\n\n  /**\n   * Called on a child when it is removed via {@link #remove}.\n   * @param parent The parent to remove\n   */\n  private _removeParent(parent: Subscription) {\n    const { _parentage } = this;\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  }\n\n  /**\n   * Removes a finalizer from this subscription that was previously added with the {@link #add} method.\n   *\n   * Note that `Subscription` instances, when unsubscribed, will automatically remove themselves\n   * from every other `Subscription` they have been added to. This means that using the `remove` method\n   * is not a common thing and should be used thoughtfully.\n   *\n   * If you add the same finalizer instance of a function or an unsubscribable object to a `Subscription` instance\n   * more than once, you will need to call `remove` the same number of times to remove all instances.\n   *\n   * All finalizer instances are removed to free up memory upon unsubscription.\n   *\n   * @param teardown The finalizer to remove from this subscription\n   */\n  remove(teardown: Exclude<TeardownLogic, void>): void {\n    const { _finalizers } = this;\n    _finalizers && arrRemove(_finalizers, teardown);\n\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  }\n}\n\nexport const EMPTY_SUBSCRIPTION = Subscription.EMPTY;\n\nexport function isSubscription(value: any): value is Subscription {\n  return (\n    value instanceof Subscription ||\n    (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe))\n  );\n}\n\nfunction execFinalizer(finalizer: Unsubscribable | (() => void)) {\n  if (isFunction(finalizer)) {\n    finalizer();\n  } else {\n    finalizer.unsubscribe();\n  }\n}\n","import { createErrorClass } from './createErrorClass';\n\nexport interface EmptyError extends Error {}\n\nexport interface EmptyErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): EmptyError;\n}\n\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n * @see {@link firstValueFrom}\n * @see {@link lastValueFrom}\n *\n * @class EmptyError\n */\nexport const EmptyError: EmptyErrorCtor = createErrorClass((_super) => function EmptyErrorImpl(this: any) {\n  _super(this);\n  this.name = 'EmptyError';\n  this.message = 'no elements in sequence';\n});\n","import { Observable } from './Observable';\nimport { EmptyError } from './util/EmptyError';\n\nexport interface LastValueFromConfig<T> {\n  defaultValue: T;\n}\n\nexport function lastValueFrom<T, D>(source: Observable<T>, config: LastValueFromConfig<D>): Promise<T | D>;\nexport function lastValueFrom<T>(source: Observable<T>): Promise<T>;\n\n/**\n * Converts an observable to a promise by subscribing to the observable,\n * waiting for it to complete, and resolving the returned promise with the\n * last value from the observed stream.\n *\n * If the observable stream completes before any values were emitted, the\n * returned promise will reject with {@link EmptyError} or will resolve\n * with the default value if a default was specified.\n *\n * If the observable stream emits an error, the returned promise will reject\n * with that error.\n *\n * **WARNING**: Only use this with observables you *know* will complete. If the source\n * observable does not complete, you will end up with a promise that is hung up, and\n * potentially all of the state of an async function hanging out in memory. To avoid\n * this situation, look into adding something like {@link timeout}, {@link take},\n * {@link takeWhile}, or {@link takeUntil} amongst others.\n *\n * ## Example\n *\n * Wait for the last value from a stream and emit it from a promise in\n * an async function\n *\n * ```ts\n * import { interval, take, lastValueFrom } from 'rxjs';\n *\n * async function execute() {\n *   const source$ = interval(2000).pipe(take(10));\n *   const finalNumber = await lastValueFrom(source$);\n *   console.log(`The final number is ${ finalNumber }`);\n * }\n *\n * execute();\n *\n * // Expected output:\n * // 'The final number is 9'\n * ```\n *\n * @see {@link firstValueFrom}\n *\n * @param source the observable to convert to a promise\n * @param config a configuration object to define the `defaultValue` to use if the source completes without emitting a value\n */\nexport function lastValueFrom<T, D>(source: Observable<T>, config?: LastValueFromConfig<D>): Promise<T | D> {\n  const hasConfig = typeof config === 'object';\n  return new Promise<T | D>((resolve, reject) => {\n    let _hasValue = false;\n    let _value: T;\n    source.subscribe({\n      next: (value) => {\n        _value = value;\n        _hasValue = true;\n      },\n      error: reject,\n      complete: () => {\n        if (_hasValue) {\n          resolve(_value);\n        } else if (hasConfig) {\n          resolve(config!.defaultValue);\n        } else {\n          reject(new EmptyError());\n        }\n      },\n    });\n  });\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\nimport { isFunction } from './isFunction';\n\n/**\n * Used to determine if an object is an Observable with a lift function.\n */\nexport function hasLift(source: any): source is { lift: InstanceType<typeof Observable>['lift'] } {\n  return isFunction(source?.lift);\n}\n\n/**\n * Creates an `OperatorFunction`. Used to define operators throughout the library in a concise way.\n * @param init The logic to connect the liftedSource to the subscriber at the moment of subscription.\n */\nexport function operate<T, R>(\n  init: (liftedSource: Observable<T>, subscriber: Subscriber<R>) => (() => void) | void\n): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    if (hasLift(source)) {\n      return source.lift(function (this: Subscriber<R>, liftedSource: Observable<T>) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}\n","import { Subscriber } from './Subscriber';\nimport { ObservableNotification } from './types';\n\n/**\n * The {@link GlobalConfig} object for RxJS. It is used to configure things\n * like how to react on unhandled errors.\n */\nexport const config: GlobalConfig = {\n  onUnhandledError: null,\n  onStoppedNotification: null,\n  Promise: undefined,\n  useDeprecatedSynchronousErrorHandling: false,\n  useDeprecatedNextContext: false,\n};\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like how to react on unhandled errors. Accessible via {@link config}\n * object.\n */\nexport interface GlobalConfig {\n  /**\n   * A registration point for unhandled errors from RxJS. These are errors that\n   * cannot were not handled by consuming code in the usual subscription path. For\n   * example, if you have this configured, and you subscribe to an observable without\n   * providing an error handler, errors from that subscription will end up here. This\n   * will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onUnhandledError: ((err: any) => void) | null;\n\n  /**\n   * A registration point for notifications that cannot be sent to subscribers because they\n   * have completed, errored or have been explicitly unsubscribed. By default, next, complete\n   * and error notifications sent to stopped subscribers are noops. However, sometimes callers\n   * might want a different behavior. For example, with sources that attempt to report errors\n   * to stopped subscribers, a caller can configure RxJS to throw an unhandled error instead.\n   * This will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onStoppedNotification: ((notification: ObservableNotification<any>, subscriber: Subscriber<any>) => void) | null;\n\n  /**\n   * The promise constructor used by default for {@link Observable#toPromise toPromise} and {@link Observable#forEach forEach}\n   * methods.\n   *\n   * @deprecated As of version 8, RxJS will no longer support this sort of injection of a\n   * Promise constructor. If you need a Promise implementation other than native promises,\n   * please polyfill/patch Promise as you see appropriate. Will be removed in v8.\n   */\n  Promise?: PromiseConstructorLike;\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BUY TIME\n   * FOR MIGRATION REASONS.\n   *\n   * @deprecated As of version 8, RxJS will no longer support synchronous throwing\n   * of unhandled errors. All errors will be thrown on a separate call stack to prevent bad\n   * behaviors described above. Will be removed in v8.\n   */\n  useDeprecatedSynchronousErrorHandling: boolean;\n\n  /**\n   * If true, enables an as-of-yet undocumented feature from v5: The ability to access\n   * `unsubscribe()` via `this` context in `next` functions created in observers passed\n   * to `subscribe`.\n   *\n   * This is being removed because the performance was severely problematic, and it could also cause\n   * issues when types other than POJOs are passed to subscribe as subscribers, as they will likely have\n   * their `this` context overwritten.\n   *\n   * @deprecated As of version 8, RxJS will no longer support altering the\n   * context of next functions provided as part of an observer to Subscribe. Instead,\n   * you will have access to a subscription or a signal or token that will allow you to do things like\n   * unsubscribe and test closed status. Will be removed in v8.\n   */\n  useDeprecatedNextContext: boolean;\n}\n","import type { TimerHandle } from './timerHandle';\ntype SetTimeoutFunction = (handler: () => void, timeout?: number, ...args: any[]) => TimerHandle;\ntype ClearTimeoutFunction = (handle: TimerHandle) => void;\n\ninterface TimeoutProvider {\n  setTimeout: SetTimeoutFunction;\n  clearTimeout: ClearTimeoutFunction;\n  delegate:\n    | {\n        setTimeout: SetTimeoutFunction;\n        clearTimeout: ClearTimeoutFunction;\n      }\n    | undefined;\n}\n\nexport const timeoutProvider: TimeoutProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setTimeout(handler: () => void, timeout?: number, ...args) {\n    const { delegate } = timeoutProvider;\n    if (delegate?.setTimeout) {\n      return delegate.setTimeout(handler, timeout, ...args);\n    }\n    return setTimeout(handler, timeout, ...args);\n  },\n  clearTimeout(handle) {\n    const { delegate } = timeoutProvider;\n    return (delegate?.clearTimeout || clearTimeout)(handle as any);\n  },\n  delegate: undefined,\n};\n","import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\n\n/**\n * Handles an error on another job either with the user-configured {@link onUnhandledError},\n * or by throwing it on that new job so it can be picked up by `window.onerror`, `process.on('error')`, etc.\n *\n * This should be called whenever there is an error that is out-of-band with the subscription\n * or when an error hits a terminal boundary of the subscription and no error handler was provided.\n *\n * @param err the error to report\n */\nexport function reportUnhandledError(err: any) {\n  timeoutProvider.setTimeout(() => {\n    const { onUnhandledError } = config;\n    if (onUnhandledError) {\n      // Execute the user-configured error handler.\n      onUnhandledError(err);\n    } else {\n      // Throw so it is picked up by the runtime's uncaught error mechanism.\n      throw err;\n    }\n  });\n}\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { CompleteNotification, NextNotification, ErrorNotification } from './types';\n\n/**\n * A completion object optimized for memory use and created to be the\n * same \"shape\" as other notifications in v8.\n * @internal\n */\nexport const COMPLETE_NOTIFICATION = (() => createNotification('C', undefined, undefined) as CompleteNotification)();\n\n/**\n * Internal use only. Creates an optimized error notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function errorNotification(error: any): ErrorNotification {\n  return createNotification('E', undefined, error) as any;\n}\n\n/**\n * Internal use only. Creates an optimized next notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function nextNotification<T>(value: T) {\n  return createNotification('N', value, undefined) as NextNotification<T>;\n}\n\n/**\n * Ensures that all notifications created internally have the same \"shape\" in v8.\n *\n * TODO: This is only exported to support a crazy legacy test in `groupBy`.\n * @internal\n */\nexport function createNotification(kind: 'N' | 'E' | 'C', value: any, error: any) {\n  return {\n    kind,\n    value,\n    error,\n  };\n}\n","import { config } from '../config';\n\nlet context: { errorThrown: boolean; error: any } | null = null;\n\n/**\n * Handles dealing with errors for super-gross mode. Creates a context, in which\n * any synchronously thrown errors will be passed to {@link captureError}. Which\n * will record the error such that it will be rethrown after the call back is complete.\n * TODO: Remove in v8\n * @param cb An immediately executed function.\n */\nexport function errorContext(cb: () => void) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    const isRoot = !context;\n    if (isRoot) {\n      context = { errorThrown: false, error: null };\n    }\n    cb();\n    if (isRoot) {\n      const { errorThrown, error } = context!;\n      context = null;\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    // This is the general non-deprecated path for everyone that\n    // isn't crazy enough to use super-gross mode (useDeprecatedSynchronousErrorHandling)\n    cb();\n  }\n}\n\n/**\n * Captures errors only in super-gross mode.\n * @param err the error to capture\n */\nexport function captureError(err: any) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n","import { isFunction } from './util/isFunction';\nimport { Observer, ObservableNotification } from './types';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param next The `next` callback of an Observer.\n   * @param error The `error` callback of an\n   * Observer.\n   * @param complete The `complete` callback of an\n   * Observer.\n   * @return A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   * @deprecated Do not use. Will be removed in v8. There is no replacement for this\n   * method, and there is no reason to be creating instances of `Subscriber` directly.\n   * If you have a specific use case, please file an issue.\n   */\n  static create<T>(next?: (x?: T) => void, error?: (e?: any) => void, complete?: () => void): Subscriber<T> {\n    return new SafeSubscriber(next, error, complete);\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected isStopped: boolean = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected destination: Subscriber<any> | Observer<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * There is no reason to directly create an instance of Subscriber. This type is exported for typings reasons.\n   */\n  constructor(destination?: Subscriber<any> | Observer<any>) {\n    super();\n    if (destination) {\n      this.destination = destination;\n      // Automatically chain subscriptions together here.\n      // if destination is a Subscription, then it is a Subscriber.\n      if (isSubscription(destination)) {\n        destination.add(this);\n      }\n    } else {\n      this.destination = EMPTY_OBSERVER;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (this.isStopped) {\n      handleStoppedNotification(nextNotification(value), this);\n    } else {\n      this._next(value!);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (this.isStopped) {\n      handleStoppedNotification(errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (this.isStopped) {\n      handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (!this.closed) {\n      this.isStopped = true;\n      super.unsubscribe();\n      this.destination = null!;\n    }\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  }\n\n  protected _complete(): void {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  }\n}\n\n/**\n * This bind is captured here because we want to be able to have\n * compatibility with monoid libraries that tend to use a method named\n * `bind`. In particular, a library called Monio requires this.\n */\nconst _bind = Function.prototype.bind;\n\nfunction bind<Fn extends (...args: any[]) => any>(fn: Fn, thisArg: any): Fn {\n  return _bind.call(fn, thisArg);\n}\n\n/**\n * Internal optimization only, DO NOT EXPOSE.\n * @internal\n */\nclass ConsumerObserver<T> implements Observer<T> {\n  constructor(private partialObserver: Partial<Observer<T>>) {}\n\n  next(value: T): void {\n    const { partialObserver } = this;\n    if (partialObserver.next) {\n      try {\n        partialObserver.next(value);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n\n  error(err: any): void {\n    const { partialObserver } = this;\n    if (partialObserver.error) {\n      try {\n        partialObserver.error(err);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    } else {\n      handleUnhandledError(err);\n    }\n  }\n\n  complete(): void {\n    const { partialObserver } = this;\n    if (partialObserver.complete) {\n      try {\n        partialObserver.complete();\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n}\n\nexport class SafeSubscriber<T> extends Subscriber<T> {\n  constructor(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((e?: any) => void) | null,\n    complete?: (() => void) | null\n  ) {\n    super();\n\n    let partialObserver: Partial<Observer<T>>;\n    if (isFunction(observerOrNext) || !observerOrNext) {\n      // The first argument is a function, not an observer. The next\n      // two arguments *could* be observers, or they could be empty.\n      partialObserver = {\n        next: (observerOrNext ?? undefined) as (((value: T) => void) | undefined),\n        error: error ?? undefined,\n        complete: complete ?? undefined,\n      };\n    } else {\n      // The first argument is a partial observer.\n      let context: any;\n      if (this && config.useDeprecatedNextContext) {\n        // This is a deprecated path that made `this.unsubscribe()` available in\n        // next handler functions passed to subscribe. This only exists behind a flag\n        // now, as it is *very* slow.\n        context = Object.create(observerOrNext);\n        context.unsubscribe = () => this.unsubscribe();\n        partialObserver = {\n          next: observerOrNext.next && bind(observerOrNext.next, context),\n          error: observerOrNext.error && bind(observerOrNext.error, context),\n          complete: observerOrNext.complete && bind(observerOrNext.complete, context),\n        };\n      } else {\n        // The \"normal\" path. Just use the partial observer directly.\n        partialObserver = observerOrNext;\n      }\n    }\n\n    // Wrap the partial observer to ensure it's a full observer, and\n    // make sure proper error handling is accounted for.\n    this.destination = new ConsumerObserver(partialObserver);\n  }\n}\n\nfunction handleUnhandledError(error: any) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    captureError(error);\n  } else {\n    // Ideal path, we report this as an unhandled error,\n    // which is thrown on a new call stack.\n    reportUnhandledError(error);\n  }\n}\n\n/**\n * An error handler used when no error handler was supplied\n * to the SafeSubscriber -- meaning no error handler was supplied\n * do the `subscribe` call on our observable.\n * @param err The error to handle\n */\nfunction defaultErrorHandler(err: any) {\n  throw err;\n}\n\n/**\n * A handler for notifications that cannot be sent to a stopped subscriber.\n * @param notification The notification being sent\n * @param subscriber The stopped subscriber\n */\nfunction handleStoppedNotification(notification: ObservableNotification<any>, subscriber: Subscriber<any>) {\n  const { onStoppedNotification } = config;\n  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));\n}\n\n/**\n * The observer used as a stub for subscriptions where the user did not\n * pass any arguments to `subscribe`. Comes with the default error handling\n * behavior.\n */\nexport const EMPTY_OBSERVER: Readonly<Observer<any>> & { closed: true } = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop,\n};\n","import { Subscriber } from '../Subscriber';\n\n/**\n * Creates an instance of an `OperatorSubscriber`.\n * @param destination The downstream subscriber.\n * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n * and send to the `destination` error handler.\n * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n * this handler are sent to the `destination` error handler.\n * @param onFinalize Additional teardown logic here. This will only be called on teardown if the\n * subscriber itself is not already closed. This is called after all other teardown logic is executed.\n */\nexport function createOperatorSubscriber<T>(\n  destination: Subscriber<any>,\n  onNext?: (value: T) => void,\n  onComplete?: () => void,\n  onError?: (err: any) => void,\n  onFinalize?: () => void\n): Subscriber<T> {\n  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\n\n/**\n * A generic helper for allowing operators to be created with a Subscriber and\n * use closures to capture necessary state from the operator function itself.\n */\nexport class OperatorSubscriber<T> extends Subscriber<T> {\n  /**\n   * Creates an instance of an `OperatorSubscriber`.\n   * @param destination The downstream subscriber.\n   * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n   * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n   * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n   * and send to the `destination` error handler.\n   * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n   * this handler are sent to the `destination` error handler.\n   * @param onFinalize Additional finalization logic here. This will only be called on finalization if the\n   * subscriber itself is not already closed. This is called after all other finalization logic is executed.\n   * @param shouldUnsubscribe An optional check to see if an unsubscribe call should truly unsubscribe.\n   * NOTE: This currently **ONLY** exists to support the strange behavior of {@link groupBy}, where unsubscription\n   * to the resulting observable does not actually disconnect from the source if there are active subscriptions\n   * to any grouped observable. (DO NOT EXPOSE OR USE EXTERNALLY!!!)\n   */\n  constructor(\n    destination: Subscriber<any>,\n    onNext?: (value: T) => void,\n    onComplete?: () => void,\n    onError?: (err: any) => void,\n    private onFinalize?: () => void,\n    private shouldUnsubscribe?: () => boolean\n  ) {\n    // It's important - for performance reasons - that all of this class's\n    // members are initialized and that they are always initialized in the same\n    // order. This will ensure that all OperatorSubscriber instances have the\n    // same hidden class in V8. This, in turn, will help keep the number of\n    // hidden classes involved in property accesses within the base class as\n    // low as possible. If the number of hidden classes involved exceeds four,\n    // the property accesses will become megamorphic and performance penalties\n    // will be incurred - i.e. inline caches won't be used.\n    //\n    // The reasons for ensuring all instances have the same hidden class are\n    // further discussed in this blog post from Benedikt Meurer:\n    // https://benediktmeurer.de/2018/03/23/impact-of-polymorphism-on-component-based-frameworks-like-react/\n    super(destination);\n    this._next = onNext\n      ? function (this: OperatorSubscriber<T>, value: T) {\n          try {\n            onNext(value);\n          } catch (err) {\n            destination.error(err);\n          }\n        }\n      : super._next;\n    this._error = onError\n      ? function (this: OperatorSubscriber<T>, err: any) {\n          try {\n            onError(err);\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._error;\n    this._complete = onComplete\n      ? function (this: OperatorSubscriber<T>) {\n          try {\n            onComplete();\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._complete;\n  }\n\n  unsubscribe() {\n    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n      const { closed } = this;\n      super.unsubscribe();\n      // Execute additional teardown if we have any and we didn't already do so.\n      !closed && this.onFinalize?.();\n    }\n  }\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function map<T, R>(project: (value: T, index: number) => R): OperatorFunction<T, R>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function map<T, R, A>(project: (this: A, value: T, index: number) => R, thisArg: A): OperatorFunction<T, R>;\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n *\n * Map every click to the `clientX` position of that click\n *\n * ```ts\n * import { fromEvent, map } from 'rxjs';\n *\n * const clicks = fromEvent<PointerEvent>(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n *\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return A function that returns an Observable that emits the values from the\n * source Observable transformed by the given `project` function.\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return operate((source, subscriber) => {\n    // The index of the value from the source. Used with projection.\n    let index = 0;\n    // Subscribe to the source, all errors and completions are sent along\n    // to the consumer.\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value: T) => {\n        // Call the projection function with the appropriate this context,\n        // and send the resulting value to the consumer.\n        subscriber.next(project.call(thisArg, value, index++));\n      })\n    );\n  });\n}\n","/**\n * Symbol.observable or a string \"@@observable\". Used for interop\n *\n * @deprecated We will no longer be exporting this symbol in upcoming versions of RxJS.\n * Instead polyfill and use Symbol.observable directly *or* use https://www.npmjs.com/package/symbol-observable\n */\nexport const observable: string | symbol = (() => (typeof Symbol === 'function' && Symbol.observable) || '@@observable')();\n","/**\n * This function takes one parameter and just returns it. Simply put,\n * this is like `<T>(x: T): T => x`.\n *\n * ## Examples\n *\n * This is useful in some cases when using things like `mergeMap`\n *\n * ```ts\n * import { interval, take, map, range, mergeMap, identity } from 'rxjs';\n *\n * const source$ = interval(1000).pipe(take(5));\n *\n * const result$ = source$.pipe(\n *   map(i => range(i)),\n *   mergeMap(identity) // same as mergeMap(x => x)\n * );\n *\n * result$.subscribe({\n *   next: console.log\n * });\n * ```\n *\n * Or when you want to selectively apply an operator\n *\n * ```ts\n * import { interval, take, identity } from 'rxjs';\n *\n * const shouldLimit = () => Math.random() < 0.5;\n *\n * const source$ = interval(1000);\n *\n * const result$ = source$.pipe(shouldLimit() ? take(5) : identity);\n *\n * result$.subscribe({\n *   next: console.log\n * });\n * ```\n *\n * @param x Any value that is returned by this function\n * @returns The value passed as the first parameter to this function\n */\nexport function identity<T>(x: T): T {\n  return x;\n}\n","import { identity } from './identity';\nimport { UnaryFunction } from '../types';\n\nexport function pipe(): typeof identity;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>\n): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>\n): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>\n): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>\n): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>\n): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>\n): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>,\n  ...fns: UnaryFunction<any, any>[]\n): UnaryFunction<T, unknown>;\n\n/**\n * pipe() can be called on one or more functions, each of which can take one argument (\"UnaryFunction\")\n * and uses it to return a value.\n * It returns a function that takes one argument, passes it to the first UnaryFunction, and then\n * passes the result to the next one, passes that result to the next one, and so on.  \n */\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (fns.length === 0) {\n    return identity as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","import { Operator } from './Operator';\nimport { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription, Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, Subscribable, Observer } from './types';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  source: Observable<any> | undefined;\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  operator: Operator<any, T> | undefined;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new Observable by calling the Observable constructor\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new observable\n   * @nocollapse\n   * @deprecated Use `new Observable()` instead. Will be removed in v8.\n   */\n  static create: (...args: any[]) => any = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable instance as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param operator the operator defining the operation to take on the observable\n   * @return a new observable with the Operator applied\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * If you have implemented an operator using `lift`, it is recommended that you create an\n   * operator by simply returning `new Observable()` directly. See \"Creating new operators from\n   * scratch\" section here: https://rxjs.dev/guide/operators\n   */\n  lift<R>(operator?: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observerOrNext?: Partial<Observer<T>> | ((value: T) => void)): Subscription;\n  /** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\n  subscribe(next?: ((value: T) => void) | null, error?: ((error: any) => void) | null, complete?: (() => void) | null): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular, do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided and an error happens,\n   * it will be thrown asynchronously. Errors thrown asynchronously cannot be caught using `try`/`catch`. Instead,\n   * use the {@link onUnhandledError} configuration option or use a runtime handler (like `window.onerror` or\n   * `process.on('error)`) to be notified of unhandled errors. Because of this, it's recommended that you provide\n   * an `error` method to avoid missing thrown errors.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of an Observer,\n   * if you do not need to listen for something, you can omit a function by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to the `error` function, as with an Observer, if not provided, errors emitted by an Observable will be thrown asynchronously.\n   *\n   * You can, however, subscribe with no parameters at all. This may be the case where you're not interested in terminal events\n   * and you also handled emissions internally by using operators (e.g. using `tap`).\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * #### Examples\n   *\n   * Subscribe with an {@link guide/observer Observer}\n   *\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // 'Adding: 1'\n   * // 'Adding: 2'\n   * // 'Adding: 3'\n   * // 'Sum equals: 6'\n   * ```\n   *\n   * Subscribe with functions ({@link deprecations/subscribe-arguments deprecated})\n   *\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // 'Adding: 1'\n   * // 'Adding: 2'\n   * // 'Adding: 3'\n   * // 'Sum equals: 6'\n   * ```\n   *\n   * Cancel a subscription\n   *\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe({\n   *   next(num) {\n   *     console.log(num)\n   *   },\n   *   complete() {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * });\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // 'unsubscribed!' after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   * or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   * Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   * the error will be thrown asynchronously as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {Subscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((error: any) => void) | null,\n    complete?: (() => void) | null\n  ): Subscription {\n    const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n\n    errorContext(() => {\n      const { operator, source } = this;\n      subscriber.add(\n        operator\n          ? // We're dealing with a subscription in the\n            // operator chain to one of our lifted operators.\n            operator.call(subscriber, source)\n          : source\n          ? // If `source` has a value, but `operator` does not, something that\n            // had intimate knowledge of our API, like our `Subject`, must have\n            // set it. We're going to just call `_subscribe` directly.\n            this._subscribe(subscriber)\n          : // In all other cases, we're likely wrapping a user-provided initializer\n            // function, so we need to catch errors and handle them appropriately.\n            this._trySubscribe(subscriber)\n      );\n    });\n\n    return subscriber;\n  }\n\n  /** @internal */\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      // We don't need to return anything in this case,\n      // because it's just going to try to `add()` to a subscription\n      // above.\n      sink.error(err);\n    }\n  }\n\n  /**\n   * Used as a NON-CANCELLABLE means of subscribing to an observable, for use with\n   * APIs that expect promises, like `async/await`. You cannot unsubscribe from this.\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * #### Example\n   *\n   * ```ts\n   * import { interval, take } from 'rxjs';\n   *\n   * const source$ = interval(1000).pipe(take(4));\n   *\n   * async function getTotal() {\n   *   let total = 0;\n   *\n   *   await source$.forEach(value => {\n   *     total += value;\n   *     console.log('observable -> ' + value);\n   *   });\n   *\n   *   return total;\n   * }\n   *\n   * getTotal().then(\n   *   total => console.log('Total: ' + total)\n   * );\n   *\n   * // Expected:\n   * // 'observable -> 0'\n   * // 'observable -> 1'\n   * // 'observable -> 2'\n   * // 'observable -> 3'\n   * // 'Total: 6'\n   * ```\n   *\n   * @param next a handler for each value emitted by the observable\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void): Promise<void>;\n\n  /**\n   * @param next a handler for each value emitted by the observable\n   * @param promiseCtor a constructor function used to instantiate the Promise\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   * @deprecated Passing a Promise constructor will no longer be available\n   * in upcoming versions of RxJS. This is because it adds weight to the library, for very\n   * little benefit. If you need this functionality, it is recommended that you either\n   * polyfill Promise, or you create an adapter to convert the returned native promise\n   * to whatever promise implementation you wanted. Will be removed in v8.\n   */\n  forEach(next: (value: T) => void, promiseCtor: PromiseConstructorLike): Promise<void>;\n\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      const subscriber = new SafeSubscriber<T>({\n        next: (value) => {\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscriber.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve,\n      });\n      this.subscribe(subscriber);\n    }) as Promise<void>;\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source?.subscribe(subscriber);\n  }\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>\n  ): Observable<D>;\n  pipe<A, B, C, D, E>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>\n  ): Observable<E>;\n  pipe<A, B, C, D, E, F>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>\n  ): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>\n  ): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>\n  ): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>\n  ): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>,\n    ...operations: OperatorFunction<any, any>[]\n  ): Observable<unknown>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ## Example\n   *\n   * ```ts\n   * import { interval, filter, map, scan } from 'rxjs';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x));\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: typeof Promise): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: PromiseConstructorLike): Promise<T | undefined>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Subscribe to this Observable and get a Promise resolving on\n   * `complete` with the last emission (if any).\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * @method toPromise\n   * @param [promiseCtor] a constructor function used to instantiate\n   * the Promise\n   * @return A Promise that resolves with the last value emit, or\n   * rejects on an error. If there were no emissions, Promise\n   * resolves with undefined.\n   * @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise\n   */\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T | undefined> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: T | undefined;\n      this.subscribe(\n        (x: T) => (value = x),\n        (err: any) => reject(err),\n        () => resolve(value)\n      );\n    }) as Promise<T | undefined>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  return promiseCtor ?? config.Promise ?? Promise;\n}\n\nfunction isObserver<T>(value: any): value is Observer<T> {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\n\nfunction isSubscriber<T>(value: any): value is Subscriber<T> {\n  return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\n}\n","const { isArray } = Array;\nconst { getPrototypeOf, prototype: objectProto, keys: getKeys } = Object;\n\n/**\n * Used in functions where either a list of arguments, a single array of arguments, or a\n * dictionary of arguments can be returned. Returns an object with an `args` property with\n * the arguments in an array, if it is a dictionary, it will also return the `keys` in another\n * property.\n */\nexport function argsArgArrayOrObject<T, O extends Record<string, T>>(args: T[] | [O] | [T[]]): { args: T[]; keys: string[] | null } {\n  if (args.length === 1) {\n    const first = args[0];\n    if (isArray(first)) {\n      return { args: first, keys: null };\n    }\n    if (isPOJO(first)) {\n      const keys = getKeys(first);\n      return {\n        args: keys.map((key) => first[key]),\n        keys,\n      };\n    }\n  }\n\n  return { args: args as T[], keys: null };\n}\n\nfunction isPOJO(obj: any): obj is object {\n  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number' && typeof x !== 'function');","import { isFunction } from \"./isFunction\";\n\n/**\n * Tests to see if the object is \"thennable\".\n * @param value the object to test\n */\nexport function isPromise(value: any): value is PromiseLike<any> {\n  return isFunction(value?.then);\n}\n","import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return isFunction(input[Symbol_observable]);\n}\n","import { isFunction } from './isFunction';\n\nexport function isAsyncIterable<T>(obj: any): obj is AsyncIterable<T> {\n  return Symbol.asyncIterator && isFunction(obj?.[Symbol.asyncIterator]);\n}\n","/**\n * Creates the TypeError to throw if an invalid object is passed to `from` or `scheduled`.\n * @param input The object that was passed.\n */\nexport function createInvalidObservableTypeError(input: any) {\n  // TODO: We should create error codes that can be looked up, so this can be less verbose.\n  return new TypeError(\n    `You provided ${\n      input !== null && typeof input === 'object' ? 'an invalid object' : `'${input}'`\n    } where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`\n  );\n}\n","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return isFunction(input?.[Symbol_iterator]);\n}\n","import { ReadableStreamLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport async function* readableStreamLikeToAsyncGenerator<T>(readableStream: ReadableStreamLike<T>): AsyncGenerator<T> {\n  const reader = readableStream.getReader();\n  try {\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value!;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function isReadableStreamLike<T>(obj: any): obj is ReadableStreamLike<T> {\n  // We don't want to use instanceof checks because they would return\n  // false for instances from another Realm, like an <iframe>.\n  return isFunction(obj?.getReader);\n}\n","import { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { Observable } from '../Observable';\nimport { ObservableInput, ObservedValueOf, ReadableStreamLike } from '../types';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nimport { Subscriber } from '../Subscriber';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function innerFrom<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\nexport function innerFrom<T>(input: ObservableInput<T>): Observable<T> {\n  if (input instanceof Observable) {\n    return input;\n  }\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromInteropObservable(input);\n    }\n    if (isArrayLike(input)) {\n      return fromArrayLike(input);\n    }\n    if (isPromise(input)) {\n      return fromPromise(input);\n    }\n    if (isAsyncIterable(input)) {\n      return fromAsyncIterable(input);\n    }\n    if (isIterable(input)) {\n      return fromIterable(input);\n    }\n    if (isReadableStreamLike(input)) {\n      return fromReadableStreamLike(input);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}\n\n/**\n * Creates an RxJS Observable from an object that implements `Symbol.observable`.\n * @param obj An object that properly implements `Symbol.observable`.\n */\nexport function fromInteropObservable<T>(obj: any) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    const obs = obj[Symbol_observable]();\n    if (isFunction(obs.subscribe)) {\n      return obs.subscribe(subscriber);\n    }\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  });\n}\n\n/**\n * Synchronously emits the values of an array like and completes.\n * This is exported because there are creation functions and operators that need to\n * make direct use of the same logic, and there's no reason to make them run through\n * `from` conditionals because we *know* they're dealing with an array.\n * @param array The array to emit values from\n */\nexport function fromArrayLike<T>(array: ArrayLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    // Loop over the array and emit each value. Note two things here:\n    // 1. We're making sure that the subscriber is not closed on each loop.\n    //    This is so we don't continue looping over a very large array after\n    //    something like a `take`, `takeWhile`, or other synchronous unsubscription\n    //    has already unsubscribed.\n    // 2. In this form, reentrant code can alter that array we're looping over.\n    //    This is a known issue, but considered an edge case. The alternative would\n    //    be to copy the array before executing the loop, but this has\n    //    performance implications.\n    for (let i = 0; i < array.length && !subscriber.closed; i++) {\n      subscriber.next(array[i]);\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromPromise<T>(promise: PromiseLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    promise\n      .then(\n        (value) => {\n          if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n          }\n        },\n        (err: any) => subscriber.error(err)\n      )\n      .then(null, reportUnhandledError);\n  });\n}\n\nexport function fromIterable<T>(iterable: Iterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    for (const value of iterable) {\n      subscriber.next(value);\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromAsyncIterable<T>(asyncIterable: AsyncIterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    process(asyncIterable, subscriber).catch((err) => subscriber.error(err));\n  });\n}\n\nexport function fromReadableStreamLike<T>(readableStream: ReadableStreamLike<T>) {\n  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\n\nasync function process<T>(asyncIterable: AsyncIterable<T>, subscriber: Subscriber<T>) {\n  for await (const value of asyncIterable) {\n    subscriber.next(value);\n    // A side-effect may have closed our subscriber,\n    // check before the next iteration.\n    if (subscriber.closed) {\n      return;\n    }\n  }\n  subscriber.complete();\n}\n","import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && isFunction(value.schedule);\n}\n","import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\n\nfunction last<T>(arr: T[]): T | undefined {\n  return arr[arr.length - 1];\n}\n\nexport function popResultSelector(args: any[]): ((...args: unknown[]) => unknown) | undefined {\n  return isFunction(last(args)) ? args.pop() : undefined;\n}\n\nexport function popScheduler(args: any[]): SchedulerLike | undefined {\n  return isScheduler(last(args)) ? args.pop() : undefined;\n}\n\nexport function popNumber(args: any[], defaultValue: number): number {\n  return typeof last(args) === 'number' ? args.pop()! : defaultValue;\n}\n","import { OperatorFunction } from \"../types\";\nimport { map } from \"../operators/map\";\n\nconst { isArray } = Array;\n\nfunction callOrApply<T, R>(fn: ((...values: T[]) => R), args: T|T[]): R {\n    return isArray(args) ? fn(...args) : fn(args);\n}\n\n/**\n * Used in several -- mostly deprecated -- situations where we need to \n * apply a list of arguments or a single argument to a result selector.\n */\nexport function mapOneOrManyArgs<T, R>(fn: ((...values: T[]) => R)): OperatorFunction<T|T[], R> {\n    return map(args => callOrApply(fn, args))\n}","export function createObject(keys: string[], values: any[]) {\n  return keys.reduce((result, key, i) => ((result[key] = values[i]), result), {} as any);\n}\n","import { Observable } from '../Observable';\nimport { ObservedValueOf, ObservableInputTuple, ObservableInput } from '../types';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './innerFrom';\nimport { popResultSelector } from '../util/args';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nimport { AnyCatcher } from '../AnyCatcher';\n\n// forkJoin(any)\n// We put this first because we need to catch cases where the user has supplied\n// _exactly `any`_ as the argument. Since `any` literally matches _anything_,\n// we don't want it to randomly hit one of the other type signatures below,\n// as we have no idea at build-time what type we should be returning when given an any.\n\n/**\n * You have passed `any` here, we can't figure out if it is\n * an array or an object, so you're getting `unknown`. Use better types.\n * @param arg Something typed as `any`\n */\nexport function forkJoin<T extends AnyCatcher>(arg: T): Observable<unknown>;\n\n// forkJoin(null | undefined)\nexport function forkJoin(scheduler: null | undefined): Observable<never>;\n\n// forkJoin([a, b, c])\nexport function forkJoin(sources: readonly []): Observable<never>;\nexport function forkJoin<A extends readonly unknown[]>(sources: readonly [...ObservableInputTuple<A>]): Observable<A>;\nexport function forkJoin<A extends readonly unknown[], R>(\n  sources: readonly [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R\n): Observable<R>;\n\n// forkJoin(a, b, c)\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function forkJoin<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A>;\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function forkJoin<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelector: [...ObservableInputTuple<A>, (...values: A) => R]\n): Observable<R>;\n\n// forkJoin({a, b, c})\nexport function forkJoin(sourcesObject: { [K in any]: never }): Observable<never>;\nexport function forkJoin<T extends Record<string, ObservableInput<any>>>(\n  sourcesObject: T\n): Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>;\n\n/**\n * Accepts an `Array` of {@link ObservableInput} or a dictionary `Object` of {@link ObservableInput} and returns\n * an {@link Observable} that emits either an array of values in the exact same order as the passed array,\n * or a dictionary of values in the same shape as the passed dictionary.\n *\n * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted;\n * complete immediately if an empty array is passed.</span>\n *\n * ![](forkJoin.png)\n *\n * `forkJoin` is an operator that takes any number of input observables which can be passed either as an array\n * or a dictionary of input observables. If no input observables are provided (e.g. an empty array is passed),\n * then the resulting stream will complete immediately.\n *\n * `forkJoin` will wait for all passed observables to emit and complete and then it will emit an array or an object with last\n * values from corresponding observables.\n *\n * If you pass an array of `n` observables to the operator, then the resulting\n * array will have `n` values, where the first value is the last one emitted by the first observable,\n * second value is the last one emitted by the second observable and so on.\n *\n * If you pass a dictionary of observables to the operator, then the resulting\n * objects will have the same keys as the dictionary passed, with their last values they have emitted\n * located at the corresponding key.\n *\n * That means `forkJoin` will not emit more than once and it will complete after that. If you need to emit combined\n * values not only at the end of the lifecycle of passed observables, but also throughout it, try out {@link combineLatest}\n * or {@link zip} instead.\n *\n * In order for the resulting array to have the same length as the number of input observables, whenever any of\n * the given observables completes without emitting any value, `forkJoin` will complete at that moment as well\n * and it will not emit anything either, even if it already has some last values from other observables.\n * Conversely, if there is an observable that never completes, `forkJoin` will never complete either,\n * unless at any point some other observable completes without emitting a value, which brings us back to\n * the previous case. Overall, in order for `forkJoin` to emit a value, all given observables\n * have to emit something at least once and complete.\n *\n * If any given observable errors at some point, `forkJoin` will error as well and immediately unsubscribe\n * from the other observables.\n *\n * Optionally `forkJoin` accepts a `resultSelector` function, that will be called with values which normally\n * would land in the emitted array. Whatever is returned by the `resultSelector`, will appear in the output\n * observable instead. This means that the default `resultSelector` can be thought of as a function that takes\n * all its arguments and puts them into an array. Note that the `resultSelector` will be called only\n * when `forkJoin` is supposed to emit a result.\n *\n * ## Examples\n *\n * Use `forkJoin` with a dictionary of observable inputs\n *\n * ```ts\n * import { forkJoin, of, timer } from 'rxjs';\n *\n * const observable = forkJoin({\n *   foo: of(1, 2, 3, 4),\n *   bar: Promise.resolve(8),\n *   baz: timer(4000)\n * });\n * observable.subscribe({\n *  next: value => console.log(value),\n *  complete: () => console.log('This is how it ends!'),\n * });\n *\n * // Logs:\n * // { foo: 4, bar: 8, baz: 0 } after 4 seconds\n * // 'This is how it ends!' immediately after\n * ```\n *\n * Use `forkJoin` with an array of observable inputs\n *\n * ```ts\n * import { forkJoin, of, timer } from 'rxjs';\n *\n * const observable = forkJoin([\n *   of(1, 2, 3, 4),\n *   Promise.resolve(8),\n *   timer(4000)\n * ]);\n * observable.subscribe({\n *  next: value => console.log(value),\n *  complete: () => console.log('This is how it ends!'),\n * });\n *\n * // Logs:\n * // [4, 8, 0] after 4 seconds\n * // 'This is how it ends!' immediately after\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n *\n * @param {...ObservableInput} args Any number of Observables provided either as an array or as an arguments\n * passed directly to the operator.\n * @param {function} [project] Function that takes values emitted by input Observables and returns value\n * that will appear in resulting Observable instead of default array.\n * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n * or value from project function.\n */\nexport function forkJoin(...args: any[]): Observable<any> {\n  const resultSelector = popResultSelector(args);\n  const { args: sources, keys } = argsArgArrayOrObject(args);\n  const result = new Observable((subscriber) => {\n    const { length } = sources;\n    if (!length) {\n      subscriber.complete();\n      return;\n    }\n    const values = new Array(length);\n    let remainingCompletions = length;\n    let remainingEmissions = length;\n    for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n      let hasValue = false;\n      innerFrom(sources[sourceIndex]).subscribe(\n        createOperatorSubscriber(\n          subscriber,\n          (value) => {\n            if (!hasValue) {\n              hasValue = true;\n              remainingEmissions--;\n            }\n            values[sourceIndex] = value;\n          },\n          () => remainingCompletions--,\n          undefined,\n          () => {\n            if (!remainingCompletions || !hasValue) {\n              if (!remainingEmissions) {\n                subscriber.next(keys ? createObject(keys, values) : values);\n              }\n              subscriber.complete();\n            }\n          }\n        )\n      );\n    }\n  });\n  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n","import { Subscription } from '../Subscription';\nimport { SchedulerAction, SchedulerLike } from '../types';\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay: number,\n  repeat: true\n): void;\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay?: number,\n  repeat?: false\n): Subscription;\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay = 0,\n  repeat = false\n): Subscription | void {\n  const scheduleSubscription = scheduler.schedule(function (this: SchedulerAction<any>) {\n    work();\n    if (repeat) {\n      parentSubscription.add(this.schedule(null, delay));\n    } else {\n      this.unsubscribe();\n    }\n  }, delay);\n\n  parentSubscription.add(scheduleSubscription);\n\n  if (!repeat) {\n    // Because user-land scheduler implementations are unlikely to properly reuse\n    // Actions for repeat scheduling, we can't trust that the returned subscription\n    // will control repeat subscription scenarios. So we're trying to avoid using them\n    // incorrectly within this library.\n    return scheduleSubscription;\n  }\n}\n","import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subscriber } from '../Subscriber';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * A process embodying the general \"merge\" strategy. This is used in\n * `mergeMap` and `mergeScan` because the logic is otherwise nearly identical.\n * @param source The original source observable\n * @param subscriber The consumer subscriber\n * @param project The projection function to get our inner sources\n * @param concurrent The number of concurrent inner subscriptions\n * @param onBeforeNext Additional logic to apply before nexting to our consumer\n * @param expand If `true` this will perform an \"expand\" strategy, which differs only\n * in that it recurses, and the inner subscription must be schedule-able.\n * @param innerSubScheduler A scheduler to use to schedule inner subscriptions,\n * this is to support the expand strategy, mostly, and should be deprecated\n */\nexport function mergeInternals<T, R>(\n  source: Observable<T>,\n  subscriber: Subscriber<R>,\n  project: (value: T, index: number) => ObservableInput<R>,\n  concurrent: number,\n  onBeforeNext?: (innerValue: R) => void,\n  expand?: boolean,\n  innerSubScheduler?: SchedulerLike,\n  additionalFinalizer?: () => void\n) {\n  // Buffered values, in the event of going over our concurrency limit\n  const buffer: T[] = [];\n  // The number of active inner subscriptions.\n  let active = 0;\n  // An index to pass to our accumulator function\n  let index = 0;\n  // Whether or not the outer source has completed.\n  let isComplete = false;\n\n  /**\n   * Checks to see if we can complete our result or not.\n   */\n  const checkComplete = () => {\n    // If the outer has completed, and nothing is left in the buffer,\n    // and we don't have any active inner subscriptions, then we can\n    // Emit the state and complete.\n    if (isComplete && !buffer.length && !active) {\n      subscriber.complete();\n    }\n  };\n\n  // If we're under our concurrency limit, just start the inner subscription, otherwise buffer and wait.\n  const outerNext = (value: T) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n\n  const doInnerSub = (value: T) => {\n    // If we're expanding, we need to emit the outer values and the inner values\n    // as the inners will \"become outers\" in a way as they are recursively fed\n    // back to the projection mechanism.\n    expand && subscriber.next(value as any);\n\n    // Increment the number of active subscriptions so we can track it\n    // against our concurrency limit later.\n    active++;\n\n    // A flag used to show that the inner observable completed.\n    // This is checked during finalization to see if we should\n    // move to the next item in the buffer, if there is on.\n    let innerComplete = false;\n\n    // Start our inner subscription.\n    innerFrom(project(value, index++)).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (innerValue) => {\n          // `mergeScan` has additional handling here. For example\n          // taking the inner value and updating state.\n          onBeforeNext?.(innerValue);\n\n          if (expand) {\n            // If we're expanding, then just recurse back to our outer\n            // handler. It will emit the value first thing.\n            outerNext(innerValue as any);\n          } else {\n            // Otherwise, emit the inner value.\n            subscriber.next(innerValue);\n          }\n        },\n        () => {\n          // Flag that we have completed, so we know to check the buffer\n          // during finalization.\n          innerComplete = true;\n        },\n        // Errors are passed to the destination.\n        undefined,\n        () => {\n          // During finalization, if the inner completed (it wasn't errored or\n          // cancelled), then we want to try the next item in the buffer if\n          // there is one.\n          if (innerComplete) {\n            // We have to wrap this in a try/catch because it happens during\n            // finalization, possibly asynchronously, and we want to pass\n            // any errors that happen (like in a projection function) to\n            // the outer Subscriber.\n            try {\n              // INNER SOURCE COMPLETE\n              // Decrement the active count to ensure that the next time\n              // we try to call `doInnerSub`, the number is accurate.\n              active--;\n              // If we have more values in the buffer, try to process those\n              // Note that this call will increment `active` ahead of the\n              // next conditional, if there were any more inner subscriptions\n              // to start.\n              while (buffer.length && active < concurrent) {\n                const bufferedValue = buffer.shift()!;\n                // Particularly for `expand`, we need to check to see if a scheduler was provided\n                // for when we want to start our inner subscription. Otherwise, we just start\n                // are next inner subscription.\n                if (innerSubScheduler) {\n                  executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                } else {\n                  doInnerSub(bufferedValue);\n                }\n              }\n              // Check to see if we can complete, and complete if so.\n              checkComplete();\n            } catch (err) {\n              subscriber.error(err);\n            }\n          }\n        }\n      )\n    );\n  };\n\n  // Subscribe to our source observable.\n  source.subscribe(\n    createOperatorSubscriber(subscriber, outerNext, () => {\n      // Outer completed, make a note of it, and check to see if we can complete everything.\n      isComplete = true;\n      checkComplete();\n    })\n  );\n\n  // Additional finalization (for when the destination is torn down).\n  // Other finalization is added implicitly via subscription above.\n  return () => {\n    additionalFinalizer?.();\n  };\n}\n","import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n  concurrent?: number\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n *\n * Map and flatten each letter to an Observable ticking every 1 second\n *\n * ```ts\n * import { of, mergeMap, interval, map } from 'rxjs';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x + i)))\n * );\n *\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a, b, c every second with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and merging\n * the results of the Observables obtained from this transformation.\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Infinity\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  if (isFunction(resultSelector)) {\n    // DEPRECATED PATH\n    return mergeMap((a, i) => map((b: any, ii: number) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\n\n// These constants are used to create handler registry functions using array mapping below.\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'] as const;\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'] as const;\nconst jqueryMethods = ['on', 'off'] as const;\n\nexport interface NodeStyleEventEmitter {\n  addListener(eventName: string | symbol, handler: NodeEventHandler): this;\n  removeListener(eventName: string | symbol, handler: NodeEventHandler): this;\n}\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\n// For APIs that implement `addListener` and `removeListener` methods that may\n// not use the same arguments or return EventEmitter values\n// such as React Native\nexport interface NodeCompatibleEventEmitter {\n  addListener(eventName: string, handler: NodeEventHandler): void | {};\n  removeListener(eventName: string, handler: NodeEventHandler): void | {};\n}\n\n// Use handler types like those in @types/jquery. See:\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/847731ba1d7fa6db6b911c0e43aa0afe596e7723/types/jquery/misc.d.ts#L6395\nexport interface JQueryStyleEventEmitter<TContext, T> {\n  on(eventName: string, handler: (this: TContext, t: T, ...args: any[]) => any): void;\n  off(eventName: string, handler: (this: TContext, t: T, ...args: any[]) => any): void;\n}\n\nexport interface EventListenerObject<E> {\n  handleEvent(evt: E): void;\n}\n\nexport interface HasEventTargetAddRemove<E> {\n  addEventListener(\n    type: string,\n    listener: ((evt: E) => void) | EventListenerObject<E> | null,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: ((evt: E) => void) | EventListenerObject<E> | null,\n    options?: EventListenerOptions | boolean\n  ): void;\n}\n\nexport interface EventListenerOptions {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n}\n\nexport interface AddEventListenerOptions extends EventListenerOptions {\n  once?: boolean;\n  passive?: boolean;\n}\n\nexport function fromEvent<T>(target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>, eventName: string): Observable<T>;\nexport function fromEvent<T, R>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  resultSelector: (event: T) => R\n): Observable<R>;\nexport function fromEvent<T>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  options: EventListenerOptions\n): Observable<T>;\nexport function fromEvent<T, R>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  options: EventListenerOptions,\n  resultSelector: (event: T) => R\n): Observable<R>;\n\nexport function fromEvent(target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>, eventName: string): Observable<unknown>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function fromEvent<T>(target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>, eventName: string): Observable<T>;\nexport function fromEvent<R>(\n  target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>,\n  eventName: string,\n  resultSelector: (...args: any[]) => R\n): Observable<R>;\n\nexport function fromEvent(\n  target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>,\n  eventName: string\n): Observable<unknown>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function fromEvent<T>(target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>, eventName: string): Observable<T>;\nexport function fromEvent<R>(\n  target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>,\n  eventName: string,\n  resultSelector: (...args: any[]) => R\n): Observable<R>;\n\nexport function fromEvent<T>(\n  target: JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>,\n  eventName: string\n): Observable<T>;\nexport function fromEvent<T, R>(\n  target: JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>,\n  eventName: string,\n  resultSelector: (value: T, ...args: any[]) => R\n): Observable<R>;\n\n/**\n * Creates an Observable that emits events of a specific type coming from the\n * given event target.\n *\n * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n * EventEmitter events or others.</span>\n *\n * ![](fromEvent.png)\n *\n * `fromEvent` accepts as a first argument event target, which is an object with methods\n * for registering event handler functions. As a second argument it takes string that indicates\n * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n * which are described in detail below. If your event target does not match any of the ones listed,\n * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n * handler functions have different names, but they all accept a string describing event type\n * and function itself, which will be called whenever said event happens.\n *\n * Every time resulting Observable is subscribed, event handler function will be registered\n * to event target on given event type. When that event fires, value\n * passed as a first argument to registered function will be emitted by output Observable.\n * When Observable is unsubscribed, function will be unregistered from event target.\n *\n * Note that if event target calls registered function with more than one argument, second\n * and following arguments will not appear in resulting stream. In order to get access to them,\n * you can pass to `fromEvent` optional project function, which will be called with all arguments\n * passed to event handler. Output Observable will then emit value returned by project function,\n * instead of the usual value.\n *\n * Remember that event targets listed below are checked via duck typing. It means that\n * no matter what kind of object you have and no matter what environment you work in,\n * you can safely use `fromEvent` on that object if it exposes described methods (provided\n * of course they behave as was described above). So for example if Node.js library exposes\n * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n * a good choice.\n *\n * If the API you use is more callback then event handler oriented (subscribed\n * callback function fires only once and thus there is no need to manually\n * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n * instead.\n *\n * `fromEvent` supports following types of event targets:\n *\n * **DOM EventTarget**\n *\n * This is an object with `addEventListener` and `removeEventListener` methods.\n *\n * In the browser, `addEventListener` accepts - apart from event type string and event\n * handler function arguments - optional third parameter, which is either an object or boolean,\n * both used for additional configuration how and when passed function will be called. When\n * `fromEvent` is used with event target of that type, you can provide this values\n * as third parameter as well.\n *\n * **Node.js EventEmitter**\n *\n * An object with `addListener` and `removeListener` methods.\n *\n * **JQuery-style event target**\n *\n * An object with `on` and `off` methods\n *\n * **DOM NodeList**\n *\n * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n *\n * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n * it contains and install event handler function in every of them. When returned Observable\n * is unsubscribed, function will be removed from all Nodes.\n *\n * **DOM HtmlCollection**\n *\n * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n * installed and removed in each of elements.\n *\n *\n * ## Examples\n *\n * Emit clicks happening on the DOM document\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * clicks.subscribe(x => console.log(x));\n *\n * // Results in:\n * // MouseEvent object logged to console every time a click\n * // occurs on the document.\n * ```\n *\n * Use `addEventListener` with capture option\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const div = document.createElement('div');\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\n * document.body.appendChild(div);\n *\n * // note optional configuration parameter which will be passed to addEventListener\n * const clicksInDocument = fromEvent(document, 'click', { capture: true });\n * const clicksInDiv = fromEvent(div, 'click');\n *\n * clicksInDocument.subscribe(() => console.log('document'));\n * clicksInDiv.subscribe(() => console.log('div'));\n *\n * // By default events bubble UP in DOM tree, so normally\n * // when we would click on div in document\n * // \"div\" would be logged first and then \"document\".\n * // Since we specified optional `capture` option, document\n * // will catch event when it goes DOWN DOM tree, so console\n * // will log \"document\" and then \"div\".\n * ```\n *\n * @see {@link bindCallback}\n * @see {@link bindNodeCallback}\n * @see {@link fromEventPattern}\n *\n * @param {FromEventTarget<T>} target The DOM EventTarget, Node.js\n * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n * @param {string} eventName The event name of interest, being emitted by the\n * `target`.\n * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n * @return {Observable<T>}\n */\nexport function fromEvent<T>(\n  target: any,\n  eventName: string,\n  options?: EventListenerOptions | ((...args: any[]) => T),\n  resultSelector?: (...args: any[]) => T\n): Observable<T> {\n  if (isFunction(options)) {\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    return fromEvent<T>(target, eventName, options as EventListenerOptions).pipe(mapOneOrManyArgs(resultSelector));\n  }\n\n  // Figure out our add and remove methods. In order to do this,\n  // we are going to analyze the target in a preferred order, if\n  // the target matches a given signature, we take the two \"add\" and \"remove\"\n  // method names and apply them to a map to create opposite versions of the\n  // same function. This is because they all operate in duplicate pairs,\n  // `addListener(name, handler)`, `removeListener(name, handler)`, for example.\n  // The call only differs by method name, as to whether or not you're adding or removing.\n  const [add, remove] =\n    // If it is an EventTarget, we need to use a slightly different method than the other two patterns.\n    isEventTarget(target)\n      ? eventTargetMethods.map((methodName) => (handler: any) => target[methodName](eventName, handler, options as EventListenerOptions))\n      : // In all other cases, the call pattern is identical with the exception of the method names.\n      isNodeStyleEventEmitter(target)\n      ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n      : isJQueryStyleEventEmitter(target)\n      ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n      : [];\n\n  // If add is falsy, it's because we didn't match a pattern above.\n  // Check to see if it is an ArrayLike, because if it is, we want to\n  // try to apply fromEvent to all of it's items. We do this check last,\n  // because there are may be some types that are both ArrayLike *and* implement\n  // event registry points, and we'd rather delegate to that when possible.\n  if (!add) {\n    if (isArrayLike(target)) {\n      return mergeMap((subTarget: any) => fromEvent(subTarget, eventName, options as EventListenerOptions))(\n        innerFrom(target)\n      ) as Observable<T>;\n    }\n  }\n\n  // If add is falsy and we made it here, it's because we didn't\n  // match any valid target objects above.\n  if (!add) {\n    throw new TypeError('Invalid event target');\n  }\n\n  return new Observable<T>((subscriber) => {\n    // The handler we are going to register. Forwards the event object, by itself, or\n    // an array of arguments to the event handler, if there is more than one argument,\n    // to the consumer.\n    const handler = (...args: any[]) => subscriber.next(1 < args.length ? args : args[0]);\n    // Do the work of adding the handler to the target.\n    add(handler);\n    // When we finalize, we want to remove the handler and free up memory.\n    return () => remove!(handler);\n  });\n}\n\n/**\n * Used to create `add` and `remove` functions to register and unregister event handlers\n * from a target in the most common handler pattern, where there are only two arguments.\n * (e.g.  `on(name, fn)`, `off(name, fn)`, `addListener(name, fn)`, or `removeListener(name, fn)`)\n * @param target The target we're calling methods on\n * @param eventName The event name for the event we're creating register or unregister functions for\n */\nfunction toCommonHandlerRegistry(target: any, eventName: string) {\n  return (methodName: string) => (handler: any) => target[methodName](eventName, handler);\n}\n\n/**\n * Checks to see if the target implements the required node-style EventEmitter methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isNodeStyleEventEmitter(target: any): target is NodeStyleEventEmitter {\n  return isFunction(target.addListener) && isFunction(target.removeListener);\n}\n\n/**\n * Checks to see if the target implements the required jQuery-style EventEmitter methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isJQueryStyleEventEmitter(target: any): target is JQueryStyleEventEmitter<any, any> {\n  return isFunction(target.on) && isFunction(target.off);\n}\n\n/**\n * Checks to see if the target implements the required EventTarget methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isEventTarget(target: any): target is HasEventTargetAddRemove<any> {\n  return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a `scheduler`. An action is typically\n * created from within a {@link SchedulerLike} and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent {@link SchedulerLike} for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import type { TimerHandle } from './timerHandle';\ntype SetIntervalFunction = (handler: () => void, timeout?: number, ...args: any[]) => TimerHandle;\ntype ClearIntervalFunction = (handle: TimerHandle) => void;\n\ninterface IntervalProvider {\n  setInterval: SetIntervalFunction;\n  clearInterval: ClearIntervalFunction;\n  delegate:\n    | {\n        setInterval: SetIntervalFunction;\n        clearInterval: ClearIntervalFunction;\n      }\n    | undefined;\n}\n\nexport const intervalProvider: IntervalProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setInterval(handler: () => void, timeout?: number, ...args) {\n    const { delegate } = intervalProvider;\n    if (delegate?.setInterval) {\n      return delegate.setInterval(handler, timeout, ...args);\n    }\n    return setInterval(handler, timeout, ...args);\n  },\n  clearInterval(handle) {\n    const { delegate } = intervalProvider;\n    return (delegate?.clearInterval || clearInterval)(handle as any);\n  },\n  delegate: undefined,\n};\n","import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\nimport { TimerHandle } from './timerHandle';\n\nexport class AsyncAction<T> extends Action<T> {\n  public id: TimerHandle | undefined;\n  public state?: T;\n  // @ts-ignore: Property has no initializer and is not definitely assigned\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (this.closed) {\n      return this;\n    }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id ?? this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, _id?: TimerHandle, delay: number = 0): TimerHandle {\n    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(_scheduler: AsyncScheduler, id?: TimerHandle, delay: number | null = 0): TimerHandle | undefined {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay != null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    if (id != null) {\n      intervalProvider.clearInterval(id);\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, _delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      // HACK: Since code elsewhere is relying on the \"truthiness\" of the\n      // return here, we can't have it return \"\" or 0 or false.\n      // TODO: Clean this up when we refactor schedulers mid-version-8 or so.\n      errorValue = e ? e : new Error('Scheduled action threw falsy error');\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      const { id, scheduler } = this;\n      const { actions } = scheduler;\n\n      this.work = this.state = this.scheduler = null!;\n      this.pending = false;\n\n      arrRemove(actions, this);\n      if (id != null) {\n        this.id = this.recycleAsyncId(scheduler, id, null);\n      }\n\n      this.delay = null!;\n      super.unsubscribe();\n    }\n  }\n}\n","import { TimestampProvider } from '../types';\n\ninterface DateTimestampProvider extends TimestampProvider {\n  delegate: TimestampProvider | undefined;\n}\n\nexport const dateTimestampProvider: DateTimestampProvider = {\n  now() {\n    // Use the variable rather than `this` so that the function can be called\n    // without being bound to the provider.\n    return (dateTimestampProvider.delegate || Date).now();\n  },\n  delegate: undefined,\n};\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an `Action`.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}. Will be made internal in v8.\n */\nexport class Scheduler implements SchedulerLike {\n  public static now: () => number = dateTimestampProvider.now;\n\n  constructor(private schedulerActionCtor: typeof Action, now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.schedulerActionCtor<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\nimport { TimerHandle } from './timerHandle';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @internal\n   */\n  public _active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @internal\n   */\n  public _scheduled: TimerHandle | undefined;\n\n  constructor(SchedulerAction: typeof Action, now: () => number = Scheduler.now) {\n    super(SchedulerAction, now);\n  }\n\n  public flush(action: AsyncAction<any>): void {\n    const { actions } = this;\n\n    if (this._active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this._active = true;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions.shift()!)); // exhaust the scheduler queue\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions.shift()!)) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asapScheduler} scheduler.\n *\n * ## Examples\n * Use async scheduler to delay task\n * ```ts\n * import { asyncScheduler } from 'rxjs';\n *\n * const task = () => console.log('it works!');\n *\n * asyncScheduler.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n * ```\n *\n * Use async scheduler to repeat task in intervals\n * ```ts\n * import { asyncScheduler } from 'rxjs';\n *\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * asyncScheduler.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n * ```\n */\n\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\n\n/**\n * @deprecated Renamed to {@link asyncScheduler}. Will be removed in v8.\n */\nexport const async = asyncScheduler;\n","/**\n * Checks to see if a value is not only a `Date` object,\n * but a *valid* `Date` object that can be converted to a\n * number. For example, `new Date('blah')` is indeed an\n * `instanceof Date`, however it cannot be converted to a\n * number.\n */\nexport function isValidDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(value as any);\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { async as asyncScheduler } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isValidDate } from '../util/isDate';\n\n/**\n * Creates an observable that will wait for a specified time period, or exact date, before\n * emitting the number 0.\n *\n * <span class=\"informal\">Used to emit a notification after a delay.</span>\n *\n * This observable is useful for creating delays in code, or racing against other values\n * for ad-hoc timeouts.\n *\n * The `delay` is specified by default in milliseconds, however providing a custom scheduler could\n * create a different behavior.\n *\n * ## Examples\n *\n * Wait 3 seconds and start another observable\n *\n * You might want to use `timer` to delay subscription to an\n * observable by a set amount of time. Here we use a timer with\n * {@link concatMapTo} or {@link concatMap} in order to wait\n * a few seconds and start a subscription to a source.\n *\n * ```ts\n * import { of, timer, concatMap } from 'rxjs';\n *\n * // This could be any observable\n * const source = of(1, 2, 3);\n *\n * timer(3000)\n *   .pipe(concatMap(() => source))\n *   .subscribe(console.log);\n * ```\n *\n * Take all values until the start of the next minute\n *\n * Using a `Date` as the trigger for the first emission, you can\n * do things like wait until midnight to fire an event, or in this case,\n * wait until a new minute starts (chosen so the example wouldn't take\n * too long to run) in order to stop watching a stream. Leveraging\n * {@link takeUntil}.\n *\n * ```ts\n * import { interval, takeUntil, timer } from 'rxjs';\n *\n * // Build a Date object that marks the\n * // next minute.\n * const currentDate = new Date();\n * const startOfNextMinute = new Date(\n *   currentDate.getFullYear(),\n *   currentDate.getMonth(),\n *   currentDate.getDate(),\n *   currentDate.getHours(),\n *   currentDate.getMinutes() + 1\n * );\n *\n * // This could be any observable stream\n * const source = interval(1000);\n *\n * const result = source.pipe(\n *   takeUntil(timer(startOfNextMinute))\n * );\n *\n * result.subscribe(console.log);\n * ```\n *\n * ### Known Limitations\n *\n * - The {@link asyncScheduler} uses `setTimeout` which has limitations for how far in the future it can be scheduled.\n *\n * - If a `scheduler` is provided that returns a timestamp other than an epoch from `now()`, and\n * a `Date` object is passed to the `dueTime` argument, the calculation for when the first emission\n * should occur will be incorrect. In this case, it would be best to do your own calculations\n * ahead of time, and pass a `number` in as the `dueTime`.\n *\n * @param due If a `number`, the amount of time in milliseconds to wait before emitting.\n * If a `Date`, the exact time at which to emit.\n * @param scheduler The scheduler to use to schedule the delay. Defaults to {@link asyncScheduler}.\n */\nexport function timer(due: number | Date, scheduler?: SchedulerLike): Observable<0>;\n\n/**\n * Creates an observable that starts an interval after a specified delay, emitting incrementing numbers -- starting at `0` --\n * on each interval after words.\n *\n * The `delay` and `intervalDuration` are specified by default in milliseconds, however providing a custom scheduler could\n * create a different behavior.\n *\n * ## Example\n *\n * ### Start an interval that starts right away\n *\n * Since {@link interval} waits for the passed delay before starting,\n * sometimes that's not ideal. You may want to start an interval immediately.\n * `timer` works well for this. Here we have both side-by-side so you can\n * see them in comparison.\n *\n * Note that this observable will never complete.\n *\n * ```ts\n * import { timer, interval } from 'rxjs';\n *\n * timer(0, 1000).subscribe(n => console.log('timer', n));\n * interval(1000).subscribe(n => console.log('interval', n));\n * ```\n *\n * ### Known Limitations\n *\n * - The {@link asyncScheduler} uses `setTimeout` which has limitations for how far in the future it can be scheduled.\n *\n * - If a `scheduler` is provided that returns a timestamp other than an epoch from `now()`, and\n * a `Date` object is passed to the `dueTime` argument, the calculation for when the first emission\n * should occur will be incorrect. In this case, it would be best to do your own calculations\n * ahead of time, and pass a `number` in as the `startDue`.\n * @param startDue If a `number`, is the time to wait before starting the interval.\n * If a `Date`, is the exact time at which to start the interval.\n * @param intervalDuration The delay between each value emitted in the interval. Passing a\n * negative number here will result in immediate completion after the first value is emitted, as though\n * no `intervalDuration` was passed at all.\n * @param scheduler The scheduler to use to schedule the delay. Defaults to {@link asyncScheduler}.\n */\nexport function timer(startDue: number | Date, intervalDuration: number, scheduler?: SchedulerLike): Observable<number>;\n\n/**\n * @deprecated The signature allowing `undefined` to be passed for `intervalDuration` will be removed in v8. Use the `timer(dueTime, scheduler?)` signature instead.\n */\nexport function timer(dueTime: number | Date, unused: undefined, scheduler?: SchedulerLike): Observable<0>;\n\nexport function timer(\n  dueTime: number | Date = 0,\n  intervalOrScheduler?: number | SchedulerLike,\n  scheduler: SchedulerLike = asyncScheduler\n): Observable<number> {\n  // Since negative intervalDuration is treated as though no\n  // interval was specified at all, we start with a negative number.\n  let intervalDuration = -1;\n\n  if (intervalOrScheduler != null) {\n    // If we have a second argument, and it's a scheduler,\n    // override the scheduler we had defaulted. Otherwise,\n    // it must be an interval.\n    if (isScheduler(intervalOrScheduler)) {\n      scheduler = intervalOrScheduler;\n    } else {\n      // Note that this *could* be negative, in which case\n      // it's like not passing an intervalDuration at all.\n      intervalDuration = intervalOrScheduler;\n    }\n  }\n\n  return new Observable((subscriber) => {\n    // If a valid date is passed, calculate how long to wait before\n    // executing the first value... otherwise, if it's a number just schedule\n    // that many milliseconds (or scheduler-specified unit size) in the future.\n    let due = isValidDate(dueTime) ? +dueTime - scheduler!.now() : dueTime;\n\n    if (due < 0) {\n      // Ensure we don't schedule in the future.\n      due = 0;\n    }\n\n    // The incrementing value we emit.\n    let n = 0;\n\n    // Start the timer.\n    return scheduler.schedule(function () {\n      if (!subscriber.closed) {\n        // Emit the next value and increment.\n        subscriber.next(n++);\n\n        if (0 <= intervalDuration) {\n          // If we have a interval after the initial timer,\n          // reschedule with the period.\n          this.schedule(undefined, intervalDuration);\n        } else {\n          // We didn't have an interval. So just complete.\n          subscriber.complete();\n        }\n      }\n    }, due);\n  });\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SchedulerAction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits a notification from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent notification from each burst of emissions.</span>\n *\n * ![](debounceTime.png)\n *\n * `debounceTime` delays notifications emitted by the source Observable, but drops\n * previous pending delayed emissions if a new notification arrives on the source\n * Observable. This operator keeps track of the most recent notification from the\n * source Observable, and emits that only when `dueTime` has passed\n * without any other notification appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous notification will be dropped\n * and will not be emitted and a new `dueTime` is scheduled.\n * If the completing event happens during `dueTime` the last cached notification\n * is emitted before the completion event is forwarded to the output observable.\n * If the error event happens during `dueTime` or after it only the error event is\n * forwarded to the output observable. The cache notification is not emitted in this case.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * notification to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link SchedulerLike} for\n * managing timers.\n *\n * ## Example\n *\n * Emit the most recent click after a burst of clicks\n *\n * ```ts\n * import { fromEvent, debounceTime } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(debounceTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link sample}\n * @see {@link sampleTime}\n * @see {@link throttle}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the timeout for each value.\n * @return A function that returns an Observable that delays the emissions of\n * the source Observable by the specified `dueTime`, and may drop some values\n * if they occur too frequently.\n */\nexport function debounceTime<T>(dueTime: number, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let activeTask: Subscription | null = null;\n    let lastValue: T | null = null;\n    let lastTime: number | null = null;\n\n    const emit = () => {\n      if (activeTask) {\n        // We have a value! Free up memory first, then emit the value.\n        activeTask.unsubscribe();\n        activeTask = null;\n        const value = lastValue!;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    };\n    function emitWhenIdle(this: SchedulerAction<unknown>) {\n      // This is called `dueTime` after the first value\n      // but we might have received new values during this window!\n\n      const targetTime = lastTime! + dueTime;\n      const now = scheduler.now();\n      if (now < targetTime) {\n        // On that case, re-schedule to the new target\n        activeTask = this.schedule(undefined, targetTime - now);\n        subscriber.add(activeTask);\n        return;\n      }\n\n      emit();\n    }\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          lastValue = value;\n          lastTime = scheduler.now();\n\n          // Only set up a task if it's not already up\n          if (!activeTask) {\n            activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n            subscriber.add(activeTask);\n          }\n        },\n        () => {\n          // Source completed.\n          // Emit any pending debounced values then complete\n          emit();\n          subscriber.complete();\n        },\n        // Pass all errors through to consumer.\n        undefined,\n        () => {\n          // Finalization.\n          lastValue = activeTask = null;\n        }\n      )\n    );\n  });\n}\n","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](mergeAll.png)\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n *\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n *\n * ```ts\n * import { fromEvent, map, interval, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map(() => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n *\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n *\n * ```ts\n * import { fromEvent, map, interval, take, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(() => interval(1000).pipe(take(10)))\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n *\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concatAll}\n * @see {@link exhaustAll}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Infinity] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits values coming from\n * all the inner Observables emitted by the source Observable.\n */\nexport function mergeAll<O extends ObservableInput<any>>(concurrent: number = Infinity): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeMap(identity, concurrent);\n}\n","import { mergeAll } from './mergeAll';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * ![](concatAll.svg)\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n *\n * ```ts\n * import { fromEvent, map, interval, take, concatAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(() => interval(1000).pipe(take(4)))\n * );\n * const firstOrder = higherOrder.pipe(concatAll());\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaustAll}\n * @see {@link mergeAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @return A function that returns an Observable emitting values from all the\n * inner Observables concatenated.\n */\nexport function concatAll<O extends ObservableInput<any>>(): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeAll(1);\n}\n","/** @prettier */\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n *\n * Ensure values in subscribe are called just before browser repaint\n *\n * ```ts\n * import { interval, observeOn, animationFrameScheduler } from 'rxjs';\n *\n * const someDiv = document.createElement('div');\n * someDiv.style.cssText = 'width: 200px;background: #09c';\n * document.body.appendChild(someDiv);\n * const intervals = interval(10);      // Intervals are scheduled\n *                                      // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler) // ...but we will observe on animationFrame\n * )                                    // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param delay Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return A function that returns an Observable that emits the same\n * notifications as the source Observable, but with provided scheduler.\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay),\n        () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay),\n        (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)\n      )\n    );\n  });\n}\n","import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified {@link SchedulerLike}.\n *\n * With `subscribeOn` you can decide what type of scheduler a specific Observable will be using when it is subscribed to.\n *\n * Schedulers control the speed and order of emissions to observers from an Observable stream.\n *\n * ![](subscribeOn.png)\n *\n * ## Example\n *\n * Given the following code:\n *\n * ```ts\n * import { of, merge } from 'rxjs';\n *\n * const a = of(1, 2, 3);\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 1\n * // 2\n * // 3\n * // 4\n * // 5\n * // 6\n * ```\n *\n * Both Observable `a` and `b` will emit their values directly and synchronously once they are subscribed to.\n *\n * If we instead use the `subscribeOn` operator declaring that we want to use the {@link asyncScheduler} for values emitted by Observable `a`:\n *\n * ```ts\n * import { of, subscribeOn, asyncScheduler, merge } from 'rxjs';\n *\n * const a = of(1, 2, 3).pipe(subscribeOn(asyncScheduler));\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 4\n * // 5\n * // 6\n * // 1\n * // 2\n * // 3\n * ```\n *\n * The reason for this is that Observable `b` emits its values directly and synchronously like before\n * but the emissions from `a` are scheduled on the event loop because we are now using the {@link asyncScheduler} for that specific Observable.\n *\n * @param scheduler The {@link SchedulerLike} to perform subscription actions on.\n * @param delay A delay to pass to the scheduler to delay subscriptions\n * @return A function that returns an Observable modified so that its\n * subscriptions happen on the specified {@link SchedulerLike}.\n */\nexport function subscribeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\n  });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { InteropObservable, SchedulerLike } from '../types';\n\nexport function scheduleObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { SchedulerLike } from '../types';\n\nexport function schedulePromise<T>(input: PromiseLike<T>, scheduler: SchedulerLike) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\nexport function scheduleArray<T>(input: ArrayLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    // The current array index.\n    let i = 0;\n    // Start iterating over the array like on a schedule.\n    return scheduler.schedule(function () {\n      if (i === input.length) {\n        // If we have hit the end of the array like in the\n        // previous job, we can complete.\n        subscriber.complete();\n      } else {\n        // Otherwise let's next the value at the current index,\n        // then increment our index.\n        subscriber.next(input[i++]);\n        // If the last emission didn't cause us to close the subscriber\n        // (via take or some side effect), reschedule the job and we'll\n        // make another pass.\n        if (!subscriber.closed) {\n          this.schedule();\n        }\n      }\n    });\n  });\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\n\n/**\n * Used in {@link scheduled} to create an observable from an Iterable.\n * @param input The iterable to create an observable from\n * @param scheduler The scheduler to use\n */\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    let iterator: Iterator<T, T>;\n\n    // Schedule the initial creation of the iterator from\n    // the iterable. This is so the code in the iterable is\n    // not called until the scheduled job fires.\n    executeSchedule(subscriber, scheduler, () => {\n      // Create the iterator.\n      iterator = (input as any)[Symbol_iterator]();\n\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          let value: T;\n          let done: boolean | undefined;\n          try {\n            // Pull the value out of the iterator\n            ({ value, done } = iterator.next());\n          } catch (err) {\n            // We got an error while pulling from the iterator\n            subscriber.error(err);\n            return;\n          }\n\n          if (done) {\n            // If it is \"done\" we just complete. This mimics the\n            // behavior of JavaScript's `for..of` consumption of\n            // iterables, which will not emit the value from an iterator\n            // result of `{ done: true: value: 'here' }`.\n            subscriber.complete();\n          } else {\n            // The iterable is not done, emit the value.\n            subscriber.next(value);\n          }\n        },\n        0,\n        true\n      );\n    });\n\n    // During finalization, if we see this iterator has a `return` method,\n    // then we know it is a Generator, and not just an Iterator. So we call\n    // the `return()` function. This will ensure that any `finally { }` blocks\n    // inside of the generator we can hit will be hit properly.\n    return () => isFunction(iterator?.return) && iterator.return();\n  });\n}\n","import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\n\nexport function scheduleAsyncIterable<T>(input: AsyncIterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>((subscriber) => {\n    executeSchedule(subscriber, scheduler, () => {\n      const iterator = input[Symbol.asyncIterator]();\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          iterator.next().then((result) => {\n            if (result.done) {\n              // This will remove the subscriptions from\n              // the parent subscription.\n              subscriber.complete();\n            } else {\n              subscriber.next(result.value);\n            }\n          });\n        },\n        0,\n        true\n      );\n    });\n  });\n}\n","import { SchedulerLike, ReadableStreamLike } from '../types';\nimport { Observable } from '../Observable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\n\nexport function scheduleReadableStreamLike<T>(input: ReadableStreamLike<T>, scheduler: SchedulerLike): Observable<T> {\n  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\n\n/**\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n * are scheduled on the provided scheduler.\n *\n * @see {@link from}\n * @see {@link of}\n *\n * @param input The observable, array, promise, iterable, etc you would like to schedule\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\n * the returned observable.\n */\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n  throw createInvalidObservableTypeError(input);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\nimport { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\n\nexport function from<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function from<O extends ObservableInput<any>>(input: O, scheduler: SchedulerLike | undefined): Observable<ObservedValueOf<O>>;\n\n/**\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n *\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\n *\n * ![](from.png)\n *\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\n * converted through this operator.\n *\n * ## Examples\n *\n * Converts an array to an Observable\n *\n * ```ts\n * import { from } from 'rxjs';\n *\n * const array = [10, 20, 30];\n * const result = from(array);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 10\n * // 20\n * // 30\n * ```\n *\n * Convert an infinite iterable (from a generator) to an Observable\n *\n * ```ts\n * import { from, take } from 'rxjs';\n *\n * function* generateDoubles(seed) {\n *    let i = seed;\n *    while (true) {\n *      yield i;\n *      i = 2 * i; // double it\n *    }\n * }\n *\n * const iterator = generateDoubles(3);\n * const result = from(iterator).pipe(take(10));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 3\n * // 6\n * // 12\n * // 24\n * // 48\n * // 96\n * // 192\n * // 384\n * // 768\n * // 1536\n * ```\n *\n * With `asyncScheduler`\n *\n * ```ts\n * import { from, asyncScheduler } from 'rxjs';\n *\n * console.log('start');\n *\n * const array = [10, 20, 30];\n * const result = from(array, asyncScheduler);\n *\n * result.subscribe(x => console.log(x));\n *\n * console.log('end');\n *\n * // Logs:\n * // 'start'\n * // 'end'\n * // 10\n * // 20\n * // 30\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link fromEventPattern}\n *\n * @param {ObservableInput<T>} A subscription object, a Promise, an Observable-like,\n * an Array, an iterable, or an array-like object to be converted.\n * @param {SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values.\n * @return {Observable<T>}\n */\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInputTuple, SchedulerLike } from '../types';\nimport { concatAll } from '../operators/concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\n\nexport function concat<T extends readonly unknown[]>(...inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\nexport function concat<T extends readonly unknown[]>(\n  ...inputsAndScheduler: [...ObservableInputTuple<T>, SchedulerLike]\n): Observable<T[number]>;\n\n/**\n * Creates an output Observable which sequentially emits all values from the first given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * ![](concat.png)\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * ## Examples\n *\n * Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10\n *\n * ```ts\n * import { interval, take, range, concat } from 'rxjs';\n *\n * const timer = interval(1000).pipe(take(4));\n * const sequence = range(1, 10);\n * const result = concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n * ```\n *\n * Concatenate 3 Observables\n *\n * ```ts\n * import { interval, take, concat } from 'rxjs';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n *\n * const result = concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n * ```\n *\n * Concatenate the same Observable to repeat it\n *\n * ```ts\n * import { interval, take, concat } from 'rxjs';\n *\n * const timer = interval(1000).pipe(take(2));\n *\n * concat(timer, timer) // concatenating the same Observable!\n *   .subscribe({\n *     next: value => console.log(value),\n *     complete: () => console.log('...and it is done!')\n *   });\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // '...and it is done!' also after 4s\n * ```\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link startWith}\n * @see {@link endWith}\n *\n * @param args Input Observables to concatenate.\n */\nexport function concat(...args: any[]): Observable<unknown> {\n  return concatAll()(from(args, popScheduler(args)));\n}\n","import { concat } from '../observable/concat';\nimport { OperatorFunction, SchedulerLike, ValueFromArray } from '../types';\nimport { popScheduler } from '../util/args';\nimport { operate } from '../util/lift';\n\n// Devs are more likely to pass null or undefined than they are a scheduler\n// without accompanying values. To make things easier for (naughty) devs who\n// use the `strictNullChecks: false` TypeScript compiler option, these\n// overloads with explicit null and undefined values are included.\n\nexport function startWith<T>(value: null): OperatorFunction<T, T | null>;\nexport function startWith<T>(value: undefined): OperatorFunction<T, T | undefined>;\n\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function startWith<T, A extends readonly unknown[] = T[]>(\n  ...valuesAndScheduler: [...A, SchedulerLike]\n): OperatorFunction<T, T | ValueFromArray<A>>;\nexport function startWith<T, A extends readonly unknown[] = T[]>(...values: A): OperatorFunction<T, T | ValueFromArray<A>>;\n\n/**\n * Returns an observable that, at the moment of subscription, will synchronously emit all\n * values provided to this operator, then subscribe to the source and mirror all of its emissions\n * to subscribers.\n *\n * This is a useful way to know when subscription has occurred on an existing observable.\n *\n * <span class=\"informal\">First emits its arguments in order, and then any\n * emissions from the source.</span>\n *\n * ![](startWith.png)\n *\n * ## Examples\n *\n * Emit a value when a timer starts.\n *\n * ```ts\n * import { timer, map, startWith } from 'rxjs';\n *\n * timer(1000)\n *   .pipe(\n *     map(() => 'timer emit'),\n *     startWith('timer start')\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // results:\n * // 'timer start'\n * // 'timer emit'\n * ```\n *\n * @param values Items you want the modified Observable to emit first.\n * @return A function that returns an Observable that synchronously emits\n * provided values before subscribing to the source Observable.\n *\n * @see {@link endWith}\n * @see {@link finalize}\n * @see {@link concat}\n */\nexport function startWith<T, D>(...values: D[]): OperatorFunction<T, T | D> {\n  const scheduler = popScheduler(values);\n  return operate((source, subscriber) => {\n    // Here we can't pass `undefined` as a scheduler, because if we did, the\n    // code inside of `concat` would be confused by the `undefined`, and treat it\n    // like an invalid observable. So we have to split it two different ways.\n    (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);\n  });\n}\n","import { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Make a {@link ConnectableObservable} behave like a ordinary observable and automates the way\n * you can connect to it.\n *\n * Internally it counts the subscriptions to the observable and subscribes (only once) to the source if\n * the number of subscriptions is larger than 0. If the number of subscriptions is smaller than 1, it\n * unsubscribes from the source. This way you can make sure that everything before the *published*\n * refCount has only a single subscription independently of the number of subscribers to the target\n * observable.\n *\n * Note that using the {@link share} operator is exactly the same as using the `multicast(() => new Subject())` operator\n * (making the observable hot) and the *refCount* operator in a sequence.\n *\n * ![](refCount.png)\n *\n * ## Example\n *\n * In the following example there are two intervals turned into connectable observables\n * by using the *publish* operator. The first one uses the *refCount* operator, the\n * second one does not use it. You will notice that a connectable observable does nothing\n * until you call its connect function.\n *\n * ```ts\n * import { interval, tap, publish, refCount } from 'rxjs';\n *\n * // Turn the interval observable into a ConnectableObservable (hot)\n * const refCountInterval = interval(400).pipe(\n *   tap(num => console.log(`refCount ${ num }`)),\n *   publish(),\n *   refCount()\n * );\n *\n * const publishedInterval = interval(400).pipe(\n *   tap(num => console.log(`publish ${ num }`)),\n *   publish()\n * );\n *\n * refCountInterval.subscribe();\n * refCountInterval.subscribe();\n * // 'refCount 0' -----> 'refCount 1' -----> etc\n * // All subscriptions will receive the same value and the tap (and\n * // every other operator) before the `publish` operator will be executed\n * // only once per event independently of the number of subscriptions.\n *\n * publishedInterval.subscribe();\n * // Nothing happens until you call .connect() on the observable.\n * ```\n *\n * @return A function that returns an Observable that automates the connection\n * to ConnectableObservable.\n * @see {@link ConnectableObservable}\n * @see {@link share}\n * @see {@link publish}\n * @deprecated Replaced with the {@link share} operator. How `share` is used\n * will depend on the connectable observable you created just prior to the\n * `refCount` operator.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let connection: Subscription | null = null;\n\n    (source as any)._refCount++;\n\n    const refCounter = createOperatorSubscriber(subscriber, undefined, undefined, undefined, () => {\n      if (!source || (source as any)._refCount <= 0 || 0 < --(source as any)._refCount) {\n        connection = null;\n        return;\n      }\n\n      ///\n      // Compare the local RefCountSubscriber's connection Subscription to the\n      // connection Subscription on the shared ConnectableObservable. In cases\n      // where the ConnectableObservable source synchronously emits values, and\n      // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n      // execution continues to here before the RefCountOperator has a chance to\n      // supply the RefCountSubscriber with the shared connection Subscription.\n      // For example:\n      // ```\n      // range(0, 10).pipe(\n      //   publish(),\n      //   refCount(),\n      //   take(5),\n      // )\n      // .subscribe();\n      // ```\n      // In order to account for this case, RefCountSubscriber should only dispose\n      // the ConnectableObservable's shared connection Subscription if the\n      // connection Subscription exists, *and* either:\n      //   a. RefCountSubscriber doesn't have a reference to the shared connection\n      //      Subscription yet, or,\n      //   b. RefCountSubscriber's connection Subscription reference is identical\n      //      to the shared connection Subscription\n      ///\n\n      const sharedConnection = (source as any)._connection;\n      const conn = connection;\n      connection = null;\n\n      if (sharedConnection && (!conn || sharedConnection === conn)) {\n        sharedConnection.unsubscribe();\n      }\n\n      subscriber.unsubscribe();\n    });\n\n    source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      connection = (source as ConnectableObservable<T>).connect();\n    }\n  });\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\n\n/**\n * @class ConnectableObservable<T>\n * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n * If you are using the `refCount` method of `ConnectableObservable`, use the {@link share} operator\n * instead.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n  protected _subject: Subject<T> | null = null;\n  protected _refCount: number = 0;\n  protected _connection: Subscription | null = null;\n\n  /**\n   * @param source The source observable\n   * @param subjectFactory The factory that creates the subject used internally.\n   * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n   * `new ConnectableObservable(source, factory)` is equivalent to\n   * `connectable(source, { connector: factory })`.\n   * When the `refCount()` method is needed, the {@link share} operator should be used instead:\n   * `new ConnectableObservable(source, factory).refCount()` is equivalent to\n   * `source.pipe(share({ connector: factory }))`.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  constructor(public source: Observable<T>, protected subjectFactory: () => Subject<T>) {\n    super();\n    // If we have lift, monkey patch that here. This is done so custom observable\n    // types will compose through multicast. Otherwise the resulting observable would\n    // simply be an instance of `ConnectableObservable`.\n    if (hasLift(source)) {\n      this.lift = source.lift;\n    }\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject!;\n  }\n\n  protected _teardown() {\n    this._refCount = 0;\n    const { _connection } = this;\n    this._subject = this._connection = null;\n    _connection?.unsubscribe();\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use {@link connectable} instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      const subject = this.getSubject();\n      connection.add(\n        this.source.subscribe(\n          createOperatorSubscriber(\n            subject as any,\n            undefined,\n            () => {\n              this._teardown();\n              subject.complete();\n            },\n            (err) => {\n              this._teardown();\n              subject.error(err);\n            },\n            () => this._teardown()\n          )\n        )\n      );\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use the {@link share} operator instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n","import { Subscription } from '../Subscription';\n\ninterface AnimationFrameProvider {\n  schedule(callback: FrameRequestCallback): Subscription;\n  requestAnimationFrame: typeof requestAnimationFrame;\n  cancelAnimationFrame: typeof cancelAnimationFrame;\n  delegate:\n    | {\n        requestAnimationFrame: typeof requestAnimationFrame;\n        cancelAnimationFrame: typeof cancelAnimationFrame;\n      }\n    | undefined;\n}\n\nexport const animationFrameProvider: AnimationFrameProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  schedule(callback) {\n    let request = requestAnimationFrame;\n    let cancel: typeof cancelAnimationFrame | undefined = cancelAnimationFrame;\n    const { delegate } = animationFrameProvider;\n    if (delegate) {\n      request = delegate.requestAnimationFrame;\n      cancel = delegate.cancelAnimationFrame;\n    }\n    const handle = request((timestamp) => {\n      // Clear the cancel function. The request has been fulfilled, so\n      // attempting to cancel the request upon unsubscription would be\n      // pointless.\n      cancel = undefined;\n      callback(timestamp);\n    });\n    return new Subscription(() => cancel?.(handle));\n  },\n  requestAnimationFrame(...args) {\n    const { delegate } = animationFrameProvider;\n    return (delegate?.requestAnimationFrame || requestAnimationFrame)(...args);\n  },\n  cancelAnimationFrame(...args) {\n    const { delegate } = animationFrameProvider;\n    return (delegate?.cancelAnimationFrame || cancelAnimationFrame)(...args);\n  },\n  delegate: undefined,\n};\n","import { createErrorClass } from './createErrorClass';\n\nexport interface ObjectUnsubscribedError extends Error {}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): ObjectUnsubscribedError;\n}\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = createErrorClass(\n  (_super) =>\n    function ObjectUnsubscribedErrorImpl(this: any) {\n      _super(this);\n      this.name = 'ObjectUnsubscribedError';\n      this.message = 'object unsubscribed';\n    }\n);\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n  closed = false;\n\n  private currentObservers: Observer<T>[] | null = null;\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  observers: Observer<T>[] = [];\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  isStopped = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  hasError = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  thrownError: any = null;\n\n  /**\n   * Creates a \"subject\" by basically gluing an observer to an observable.\n   *\n   * @nocollapse\n   * @deprecated Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion.\n   */\n  static create: (...args: any[]) => any = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  constructor() {\n    // NOTE: This must be here to obscure Observable's constructor.\n    super();\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator as any;\n    return subject as any;\n  }\n\n  /** @internal */\n  protected _throwIfClosed() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  }\n\n  next(value: T) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        if (!this.currentObservers) {\n          this.currentObservers = Array.from(this.observers);\n        }\n        for (const observer of this.currentObservers) {\n          observer.next(value);\n        }\n      }\n    });\n  }\n\n  error(err: any) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.hasError = this.isStopped = true;\n        this.thrownError = err;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.error(err);\n        }\n      }\n    });\n  }\n\n  complete() {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.isStopped = true;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.complete();\n        }\n      }\n    });\n  }\n\n  unsubscribe() {\n    this.isStopped = this.closed = true;\n    this.observers = this.currentObservers = null!;\n  }\n\n  get observed() {\n    return this.observers?.length > 0;\n  }\n\n  /** @internal */\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    this._throwIfClosed();\n    return super._trySubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._checkFinalizedStatuses(subscriber);\n    return this._innerSubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _innerSubscribe(subscriber: Subscriber<any>) {\n    const { hasError, isStopped, observers } = this;\n    if (hasError || isStopped) {\n      return EMPTY_SUBSCRIPTION;\n    }\n    this.currentObservers = null;\n    observers.push(subscriber);\n    return new Subscription(() => {\n      this.currentObservers = null;\n      arrRemove(observers, subscriber);\n    });\n  }\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<any>) {\n    const { hasError, thrownError, isStopped } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create custom Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable: any = new Observable<T>();\n    observable.source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(\n    /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n    public destination?: Observer<T>,\n    source?: Observable<T>\n  ) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    this.destination?.next?.(value);\n  }\n\n  error(err: any) {\n    this.destination?.error?.(err);\n  }\n\n  complete() {\n    this.destination?.complete?.();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return this.source?.subscribe(subscriber) ?? EMPTY_SUBSCRIPTION;\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * A variant of Subject that requires an initial value and emits its current\n * value whenever it is subscribed to.\n *\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    !subscription.closed && subscriber.next(this._value);\n    return subscription;\n  }\n\n  getValue(): T {\n    const { hasError, thrownError, _value } = this;\n    if (hasError) {\n      throw thrownError;\n    }\n    this._throwIfClosed();\n    return _value;\n  }\n\n  next(value: T): void {\n    super.next((this._value = value));\n  }\n}\n","import { Subject } from './Subject';\nimport { TimestampProvider } from './types';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\n\n/**\n * A variant of {@link Subject} that \"replays\" old values to new subscribers by emitting them when they first subscribe.\n *\n * `ReplaySubject` has an internal buffer that will store a specified number of values that it has observed. Like `Subject`,\n * `ReplaySubject` \"observes\" values by having them passed to its `next` method. When it observes a value, it will store that\n * value for a time determined by the configuration of the `ReplaySubject`, as passed to its constructor.\n *\n * When a new subscriber subscribes to the `ReplaySubject` instance, it will synchronously emit all values in its buffer in\n * a First-In-First-Out (FIFO) manner. The `ReplaySubject` will also complete, if it has observed completion; and it will\n * error if it has observed an error.\n *\n * There are two main configuration items to be concerned with:\n *\n * 1. `bufferSize` - This will determine how many items are stored in the buffer, defaults to infinite.\n * 2. `windowTime` - The amount of time to hold a value in the buffer before removing it from the buffer.\n *\n * Both configurations may exist simultaneously. So if you would like to buffer a maximum of 3 values, as long as the values\n * are less than 2 seconds old, you could do so with a `new ReplaySubject(3, 2000)`.\n *\n * ### Differences with BehaviorSubject\n *\n * `BehaviorSubject` is similar to `new ReplaySubject(1)`, with a couple of exceptions:\n *\n * 1. `BehaviorSubject` comes \"primed\" with a single value upon construction.\n * 2. `ReplaySubject` will replay values, even after observing an error, where `BehaviorSubject` will not.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n * @see {@link shareReplay}\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _buffer: (T | number)[] = [];\n  private _infiniteTimeWindow = true;\n\n  /**\n   * @param bufferSize The size of the buffer to replay on subscription\n   * @param windowTime The amount of time the buffered items will stay buffered\n   * @param timestampProvider An object with a `now()` method that provides the current timestamp. This is used to\n   * calculate the amount of time something has been buffered.\n   */\n  constructor(\n    private _bufferSize = Infinity,\n    private _windowTime = Infinity,\n    private _timestampProvider: TimestampProvider = dateTimestampProvider\n  ) {\n    super();\n    this._infiniteTimeWindow = _windowTime === Infinity;\n    this._bufferSize = Math.max(1, _bufferSize);\n    this._windowTime = Math.max(1, _windowTime);\n  }\n\n  next(value: T): void {\n    const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n    if (!isStopped) {\n      _buffer.push(value);\n      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n    }\n    this._trimBuffer();\n    super.next(value);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._trimBuffer();\n\n    const subscription = this._innerSubscribe(subscriber);\n\n    const { _infiniteTimeWindow, _buffer } = this;\n    // We use a copy here, so reentrant code does not mutate our array while we're\n    // emitting it to a new subscriber.\n    const copy = _buffer.slice();\n    for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n      subscriber.next(copy[i] as T);\n    }\n\n    this._checkFinalizedStatuses(subscriber);\n\n    return subscription;\n  }\n\n  private _trimBuffer() {\n    const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n    // If we don't have an infinite buffer size, and we're over the length,\n    // use splice to truncate the old buffer values off. Note that we have to\n    // double the size for instances where we're not using an infinite time window\n    // because we're storing the values and the timestamps in the same array.\n    const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n\n    // Now, if we're not in an infinite time window, remove all values where the time is\n    // older than what is allowed.\n    if (!_infiniteTimeWindow) {\n      const now = _timestampProvider.now();\n      let last = 0;\n      // Search the array for the first timestamp that isn't expired and\n      // truncate the buffer up to that point.\n      for (let i = 1; i < _buffer.length && (_buffer[i] as number) <= now; i += 2) {\n        last = i;\n      }\n      last && _buffer.splice(0, last + 1);\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nimport { SchedulerAction } from '../types';\nimport { animationFrameProvider } from './animationFrameProvider';\nimport { TimerHandle } from './timerHandle';\n\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n  constructor(protected scheduler: AnimationFrameScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: TimerHandle, delay: number = 0): TimerHandle {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));\n  }\n\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: TimerHandle, delay: number = 0): TimerHandle | undefined {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if (delay != null ? delay > 0 : this.delay > 0) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue has no remaining actions with the same async id,\n    // cancel the requested animation frame and set the scheduled flag to\n    // undefined so the next AnimationFrameAction will request its own.\n    const { actions } = scheduler;\n    if (id != null && actions[actions.length - 1]?.id !== id) {\n      animationFrameProvider.cancelAnimationFrame(id as number);\n      scheduler._scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n    this._active = true;\n    // The async id that effects a call to flush is stored in _scheduled.\n    // Before executing an action, it's necessary to check the action's async\n    // id to determine whether it's supposed to be executed in the current\n    // flush.\n    // Previous implementations of this method used a count to determine this,\n    // but that was unsound, as actions that are unsubscribed - i.e. cancelled -\n    // are removed from the actions array and that can shift actions that are\n    // scheduled to be executed in a subsequent flush into positions at which\n    // they are executed within the current flush.\n    const flushId = this._scheduled;\n    this._scheduled = undefined;\n\n    const { actions } = this;\n    let error: any;\n    action = action || actions.shift()!;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions[0]) && action.id === flushId && actions.shift());\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link asyncScheduler} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * ## Example\n * Schedule div height animation\n * ```ts\n * // html: <div style=\"background: #0ff;\"></div>\n * import { animationFrameScheduler } from 'rxjs';\n *\n * const div = document.querySelector('div');\n *\n * animationFrameScheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see a div element growing in height\n * ```\n */\n\nexport const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\n\n/**\n * @deprecated Renamed to {@link animationFrameScheduler}. Will be removed in v8.\n */\nexport const animationFrame = animationFrameScheduler;\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * A simple Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.</span>\n *\n * ![](empty.png)\n *\n * A simple Observable that only emits the complete notification. It can be used\n * for composing with other Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n *\n * Log complete notification\n *\n * ```ts\n * import { EMPTY } from 'rxjs';\n *\n * EMPTY.subscribe({\n *   next: () => console.log('Next'),\n *   complete: () => console.log('Complete!')\n * });\n *\n * // Outputs\n * // Complete!\n * ```\n *\n * Emit the number 7, then complete\n *\n * ```ts\n * import { EMPTY, startWith } from 'rxjs';\n *\n * const result = EMPTY.pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n *\n * // Outputs\n * // 7\n * ```\n *\n * Map and flatten only odd numbers to the sequence `'a'`, `'b'`, `'c'`\n *\n * ```ts\n * import { interval, mergeMap, of, EMPTY } from 'rxjs';\n *\n * const interval$ = interval(1000);\n * const result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : EMPTY),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval, e.g. (0, 1, 2, 3, ...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1, print a, b, c (each on its own)\n * // if x % 2 is not equal to 1, nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link NEVER}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const EMPTY = new Observable<never>((subscriber) => subscriber.complete());\n\n/**\n * @param scheduler A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @deprecated Replaced with the {@link EMPTY} constant or {@link scheduled} (e.g. `scheduled([], scheduler)`). Will be removed in v8.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nfunction emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { SchedulerLike, ValueFromArray } from '../types';\nimport { Observable } from '../Observable';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\n\n// Devs are more likely to pass null or undefined than they are a scheduler\n// without accompanying values. To make things easier for (naughty) devs who\n// use the `strictNullChecks: false` TypeScript compiler option, these\n// overloads with explicit null and undefined values are included.\n\nexport function of(value: null): Observable<null>;\nexport function of(value: undefined): Observable<undefined>;\n\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of(scheduler: SchedulerLike): Observable<never>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of<A extends readonly unknown[]>(...valuesAndScheduler: [...A, SchedulerLike]): Observable<ValueFromArray<A>>;\n\nexport function of(): Observable<never>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function of<T>(): Observable<T>;\nexport function of<T>(value: T): Observable<T>;\nexport function of<A extends readonly unknown[]>(...values: A): Observable<ValueFromArray<A>>;\n\n/**\n * Converts the arguments to an observable sequence.\n *\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\n *\n * ![](of.png)\n *\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\n * as a separate `next` notification.\n *\n * ## Examples\n *\n * Emit the values `10, 20, 30`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of(10, 20, 30)\n *   .subscribe({\n *     next: value => console.log('next:', value),\n *     error: err => console.log('error:', err),\n *     complete: () => console.log('the end'),\n *   });\n *\n * // Outputs\n * // next: 10\n * // next: 20\n * // next: 30\n * // the end\n * ```\n *\n * Emit the array `[1, 2, 3]`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of([1, 2, 3])\n *   .subscribe({\n *     next: value => console.log('next:', value),\n *     error: err => console.log('error:', err),\n *     complete: () => console.log('the end'),\n *   });\n *\n * // Outputs\n * // next: [1, 2, 3]\n * // the end\n * ```\n *\n * @see {@link from}\n * @see {@link range}\n *\n * @param {...T} values A comma separated list of arguments you want to be emitted\n * @return {Observable} An Observable that emits the arguments\n * described above and then completes.\n */\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  const scheduler = popScheduler(args);\n  return from(args as T[], scheduler);\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { SchedulerLike } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/**\n * Creates an observable that will create an error instance and push it to the consumer as an error\n * immediately upon subscription.\n *\n * <span class=\"informal\">Just errors and does nothing else</span>\n *\n * ![](throw.png)\n *\n * This creation function is useful for creating an observable that will create an error and error every\n * time it is subscribed to. Generally, inside of most operators when you might want to return an errored\n * observable, this is unnecessary. In most cases, such as in the inner return of {@link concatMap},\n * {@link mergeMap}, {@link defer}, and many others, you can simply throw the error, and RxJS will pick\n * that up and notify the consumer of the error.\n *\n * ## Example\n *\n * Create a simple observable that will create a new error with a timestamp and log it\n * and the message every time you subscribe to it\n *\n * ```ts\n * import { throwError } from 'rxjs';\n *\n * let errorCount = 0;\n *\n * const errorWithTimestamp$ = throwError(() => {\n *   const error: any = new Error(`This is error number ${ ++errorCount }`);\n *   error.timestamp = Date.now();\n *   return error;\n * });\n *\n * errorWithTimestamp$.subscribe({\n *   error: err => console.log(err.timestamp, err.message)\n * });\n *\n * errorWithTimestamp$.subscribe({\n *   error: err => console.log(err.timestamp, err.message)\n * });\n *\n * // Logs the timestamp and a new error message for each subscription\n * ```\n *\n * ### Unnecessary usage\n *\n * Using `throwError` inside of an operator or creation function\n * with a callback, is usually not necessary\n *\n * ```ts\n * import { of, concatMap, timer, throwError } from 'rxjs';\n *\n * const delays$ = of(1000, 2000, Infinity, 3000);\n *\n * delays$.pipe(\n *   concatMap(ms => {\n *     if (ms < 10000) {\n *       return timer(ms);\n *     } else {\n *       // This is probably overkill.\n *       return throwError(() => new Error(`Invalid time ${ ms }`));\n *     }\n *   })\n * )\n * .subscribe({\n *   next: console.log,\n *   error: console.error\n * });\n * ```\n *\n * You can just throw the error instead\n *\n * ```ts\n * import { of, concatMap, timer } from 'rxjs';\n *\n * const delays$ = of(1000, 2000, Infinity, 3000);\n *\n * delays$.pipe(\n *   concatMap(ms => {\n *     if (ms < 10000) {\n *       return timer(ms);\n *     } else {\n *       // Cleaner and easier to read for most folks.\n *       throw new Error(`Invalid time ${ ms }`);\n *     }\n *   })\n * )\n * .subscribe({\n *   next: console.log,\n *   error: console.error\n * });\n * ```\n *\n * @param errorFactory A factory function that will create the error instance that is pushed.\n */\nexport function throwError(errorFactory: () => any): Observable<never>;\n\n/**\n * Returns an observable that will error with the specified error immediately upon subscription.\n *\n * @param error The error instance to emit\n * @deprecated Support for passing an error value will be removed in v8. Instead, pass a factory function to `throwError(() => new Error('test'))`. This is\n * because it will create the error at the moment it should be created and capture a more appropriate stack trace. If\n * for some reason you need to create the error ahead of time, you can still do that: `const err = new Error('test'); throwError(() => err);`.\n */\nexport function throwError(error: any): Observable<never>;\n\n/**\n * Notifies the consumer of an error using a given scheduler by scheduling it at delay `0` upon subscription.\n *\n * @param errorOrErrorFactory An error instance or error factory\n * @param scheduler A scheduler to use to schedule the error notification\n * @deprecated The `scheduler` parameter will be removed in v8.\n * Use `throwError` in combination with {@link observeOn}: `throwError(() => new Error('test')).pipe(observeOn(scheduler));`.\n * Details: https://rxjs.dev/deprecations/scheduler-argument\n */\nexport function throwError(errorOrErrorFactory: any, scheduler: SchedulerLike): Observable<never>;\n\nexport function throwError(errorOrErrorFactory: any, scheduler?: SchedulerLike): Observable<never> {\n  const errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;\n  const init = (subscriber: Subscriber<never>) => subscriber.error(errorFactory());\n  return new Observable(scheduler ? (subscriber) => scheduler.schedule(init as any, 0, subscriber) : init);\n}\n","/** prettier */\nimport { Observable } from '../Observable';\nimport { isFunction } from './isFunction';\n\n/**\n * Tests to see if the object is an RxJS {@link Observable}\n * @param obj the object to test\n */\nexport function isObservable(obj: any): obj is Observable<unknown> {\n  // The !! is to ensure that this publicly exposed function returns\n  // `false` if something like `null` or `0` is passed.\n  return !!obj && (obj instanceof Observable || (isFunction(obj.lift) && isFunction(obj.subscribe)));\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike, ObservedValueOf, ObservableInputTuple } from '../types';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { Subscriber } from '../Subscriber';\nimport { from } from './from';\nimport { identity } from '../util/identity';\nimport { Subscription } from '../Subscription';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { popResultSelector, popScheduler } from '../util/args';\nimport { createObject } from '../util/createObject';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { AnyCatcher } from '../AnyCatcher';\nimport { executeSchedule } from '../util/executeSchedule';\n\n// combineLatest(any)\n// We put this first because we need to catch cases where the user has supplied\n// _exactly `any`_ as the argument. Since `any` literally matches _anything_,\n// we don't want it to randomly hit one of the other type signatures below,\n// as we have no idea at build-time what type we should be returning when given an any.\n\n/**\n * You have passed `any` here, we can't figure out if it is\n * an array or an object, so you're getting `unknown`. Use better types.\n * @param arg Something typed as `any`\n */\nexport function combineLatest<T extends AnyCatcher>(arg: T): Observable<unknown>;\n\n// combineLatest([a, b, c])\nexport function combineLatest(sources: []): Observable<never>;\nexport function combineLatest<A extends readonly unknown[]>(sources: readonly [...ObservableInputTuple<A>]): Observable<A>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[], R>(\n  sources: readonly [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R,\n  scheduler: SchedulerLike\n): Observable<R>;\nexport function combineLatest<A extends readonly unknown[], R>(\n  sources: readonly [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R\n): Observable<R>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[]>(\n  sources: readonly [...ObservableInputTuple<A>],\n  scheduler: SchedulerLike\n): Observable<A>;\n\n// combineLatest(a, b, c)\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function combineLatest<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelectorAndScheduler: [...ObservableInputTuple<A>, (...values: A) => R, SchedulerLike]\n): Observable<R>;\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function combineLatest<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelector: [...ObservableInputTuple<A>, (...values: A) => R]\n): Observable<R>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike]\n): Observable<A>;\n\n// combineLatest({a, b, c})\nexport function combineLatest(sourcesObject: { [K in any]: never }): Observable<never>;\nexport function combineLatest<T extends Record<string, ObservableInput<any>>>(\n  sourcesObject: T\n): Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>;\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * ![](combineLatest.png)\n *\n * `combineLatest` combines the values from all the Observables passed in the\n * observables array. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to this operator,\n * the returned Observable will always emit an array of `n` values, in an order\n * corresponding to the order of the passed Observables (the value from the first Observable\n * will be at index 0 of the array and so on).\n *\n * Static version of `combineLatest` accepts an array of Observables. Note that an array of\n * Observables is a good choice, if you don't know beforehand how many Observables\n * you will combine. Passing an empty array will result in an Observable that\n * completes immediately.\n *\n * To ensure the output array always has the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all these values but the last\n * will be lost. On the other hand, if some Observable does not emit a value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will now be impossible to include a value from the\n * completed Observable in the resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, the resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, the result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of a completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * ## Examples\n *\n * Combine two timer Observables\n *\n * ```ts\n * import { timer, combineLatest } from 'rxjs';\n *\n * const firstTimer = timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = combineLatest([firstTimer, secondTimer]);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n * ```\n *\n * Combine a dictionary of Observables\n *\n * ```ts\n * import { of, delay, startWith, combineLatest } from 'rxjs';\n *\n * const observables = {\n *   a: of(1).pipe(delay(1000), startWith(0)),\n *   b: of(5).pipe(delay(5000), startWith(0)),\n *   c: of(10).pipe(delay(10000), startWith(0))\n * };\n * const combined = combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // { a: 0, b: 0, c: 0 } immediately\n * // { a: 1, b: 0, c: 0 } after 1s\n * // { a: 1, b: 5, c: 0 } after 5s\n * // { a: 1, b: 5, c: 10 } after 10s\n * ```\n *\n * Combine an array of Observables\n *\n * ```ts\n * import { of, delay, startWith, combineLatest } from 'rxjs';\n *\n * const observables = [1, 5, 10].map(\n *   n => of(n).pipe(\n *     delay(n * 1000), // emit 0 and then emit n after n seconds\n *     startWith(0)\n *   )\n * );\n * const combined = combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n * ```\n *\n * Use map operator to dynamically calculate the Body-Mass Index\n *\n * ```ts\n * import { of, combineLatest, map } from 'rxjs';\n *\n * const weight = of(70, 72, 76, 79, 75);\n * const height = of(1.76, 1.77, 1.78);\n * const bmi = combineLatest([weight, height]).pipe(\n *   map(([w, h]) => w / (h * h)),\n * );\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} [observables] An array of input Observables to combine with each other.\n * An array of Observables must be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest<O extends ObservableInput<any>, R>(...args: any[]): Observable<R> | Observable<ObservedValueOf<O>[]> {\n  const scheduler = popScheduler(args);\n  const resultSelector = popResultSelector(args);\n\n  const { args: observables, keys } = argsArgArrayOrObject(args);\n\n  if (observables.length === 0) {\n    // If no observables are passed, or someone has passed an empty array\n    // of observables, or even an empty object POJO, we need to just\n    // complete (EMPTY), but we have to honor the scheduler provided if any.\n    return from([], scheduler as any);\n  }\n\n  const result = new Observable<ObservedValueOf<O>[]>(\n    combineLatestInit(\n      observables as ObservableInput<ObservedValueOf<O>>[],\n      scheduler,\n      keys\n        ? // A handler for scrubbing the array of args into a dictionary.\n          (values) => createObject(keys, values)\n        : // A passthrough to just return the array\n          identity\n    )\n  );\n\n  return resultSelector ? (result.pipe(mapOneOrManyArgs(resultSelector)) as Observable<R>) : result;\n}\n\nexport function combineLatestInit(\n  observables: ObservableInput<any>[],\n  scheduler?: SchedulerLike,\n  valueTransform: (values: any[]) => any = identity\n) {\n  return (subscriber: Subscriber<any>) => {\n    // The outer subscription. We're capturing this in a function\n    // because we may have to schedule it.\n    maybeSchedule(\n      scheduler,\n      () => {\n        const { length } = observables;\n        // A store for the values each observable has emitted so far. We match observable to value on index.\n        const values = new Array(length);\n        // The number of currently active subscriptions, as they complete, we decrement this number to see if\n        // we are all done combining values, so we can complete the result.\n        let active = length;\n        // The number of inner sources that still haven't emitted the first value\n        // We need to track this because all sources need to emit one value in order\n        // to start emitting values.\n        let remainingFirstValues = length;\n        // The loop to kick off subscription. We're keying everything on index `i` to relate the observables passed\n        // in to the slot in the output array or the key in the array of keys in the output dictionary.\n        for (let i = 0; i < length; i++) {\n          maybeSchedule(\n            scheduler,\n            () => {\n              const source = from(observables[i], scheduler as any);\n              let hasFirstValue = false;\n              source.subscribe(\n                createOperatorSubscriber(\n                  subscriber,\n                  (value) => {\n                    // When we get a value, record it in our set of values.\n                    values[i] = value;\n                    if (!hasFirstValue) {\n                      // If this is our first value, record that.\n                      hasFirstValue = true;\n                      remainingFirstValues--;\n                    }\n                    if (!remainingFirstValues) {\n                      // We're not waiting for any more\n                      // first values, so we can emit!\n                      subscriber.next(valueTransform(values.slice()));\n                    }\n                  },\n                  () => {\n                    if (!--active) {\n                      // We only complete the result if we have no more active\n                      // inner observables.\n                      subscriber.complete();\n                    }\n                  }\n                )\n              );\n            },\n            subscriber\n          );\n        }\n      },\n      subscriber\n    );\n  };\n}\n\n/**\n * A small utility to handle the couple of locations where we want to schedule if a scheduler was provided,\n * but we don't if there was no scheduler.\n */\nfunction maybeSchedule(scheduler: SchedulerLike | undefined, execute: () => void, subscription: Subscription) {\n  if (scheduler) {\n    executeSchedule(subscription, scheduler, execute);\n  } else {\n    execute();\n  }\n}\n","import { Observable } from '../Observable';\nimport { ObservedValueOf, ObservableInput } from '../types';\nimport { innerFrom } from './innerFrom';\n\n/**\n * Creates an Observable that, on subscribe, calls an Observable factory to\n * make an Observable for each new Observer.\n *\n * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n * is subscribed.\n * </span>\n *\n * ![](defer.png)\n *\n * `defer` allows you to create an Observable only when the Observer\n * subscribes. It waits until an Observer subscribes to it, calls the given\n * factory function to get an Observable -- where a factory function typically\n * generates a new Observable -- and subscribes the Observer to this Observable.\n * In case the factory function returns a falsy value, then EMPTY is used as\n * Observable instead. Last but not least, an exception during the factory\n * function call is transferred to the Observer by calling `error`.\n *\n * ## Example\n *\n * Subscribe to either an Observable of clicks or an Observable of interval, at random\n *\n * ```ts\n * import { defer, fromEvent, interval } from 'rxjs';\n *\n * const clicksOrInterval = defer(() => {\n *   return Math.random() > 0.5\n *     ? fromEvent(document, 'click')\n *     : interval(1000);\n * });\n * clicksOrInterval.subscribe(x => console.log(x));\n *\n * // Results in the following behavior:\n * // If the result of Math.random() is greater than 0.5 it will listen\n * // for clicks anywhere on the \"document\"; when document is clicked it\n * // will log a MouseEvent object to the console. If the result is less\n * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n * ```\n *\n * @see {@link Observable}\n *\n * @param {function(): ObservableInput} observableFactory The Observable\n * factory function to invoke for each Observer that subscribes to the output\n * Observable. May also return a Promise, which will be converted on the fly\n * to an Observable.\n * @return {Observable} An Observable whose Observers' subscriptions trigger\n * an invocation of the given Observable factory function.\n */\nexport function defer<R extends ObservableInput<any>>(observableFactory: () => R): Observable<ObservedValueOf<R>> {\n  return new Observable<ObservedValueOf<R>>((subscriber) => {\n    innerFrom(observableFactory()).subscribe(subscriber);\n  });\n}\n","import { Observable } from '../Observable';\nimport { asyncScheduler } from '../scheduler/async';\nimport { SchedulerLike } from '../types';\nimport { timer } from './timer';\n\n/**\n * Creates an Observable that emits sequential numbers every specified\n * interval of time, on a specified {@link SchedulerLike}.\n *\n * <span class=\"informal\">Emits incremental numbers periodically in time.</span>\n *\n * ![](interval.png)\n *\n * `interval` returns an Observable that emits an infinite sequence of\n * ascending integers, with a constant interval of time of your choosing\n * between those emissions. The first emission is not sent immediately, but\n * only after the first period has passed. By default, this operator uses the\n * `async` {@link SchedulerLike} to provide a notion of time, but you may pass any\n * {@link SchedulerLike} to it.\n *\n * ## Example\n *\n * Emits ascending numbers, one every second (1000ms) up to the number 3\n *\n * ```ts\n * import { interval, take } from 'rxjs';\n *\n * const numbers = interval(1000);\n *\n * const takeFourNumbers = numbers.pipe(take(4));\n *\n * takeFourNumbers.subscribe(x => console.log('Next: ', x));\n *\n * // Logs:\n * // Next: 0\n * // Next: 1\n * // Next: 2\n * // Next: 3\n * ```\n *\n * @see {@link timer}\n * @see {@link delay}\n *\n * @param {number} [period=0] The interval size in milliseconds (by default)\n * or the time unit determined by the scheduler's clock.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a sequential number each time\n * interval.\n */\nexport function interval(period = 0, scheduler: SchedulerLike = asyncScheduler): Observable<number> {\n  if (period < 0) {\n    // We cannot schedule an interval in the past.\n    period = 0;\n  }\n\n  return timer(period, period, scheduler);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, ObservableInputTuple, SchedulerLike } from '../types';\nimport { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\n\nexport function merge<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\nexport function merge<A extends readonly unknown[]>(...sourcesAndConcurrency: [...ObservableInputTuple<A>, number?]): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike?]\n): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndConcurrencyAndScheduler: [...ObservableInputTuple<A>, number?, SchedulerLike?]\n): Observable<A[number]>;\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * ![](merge.png)\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n *\n * Merge together two Observables: 1s interval and clicks\n *\n * ```ts\n * import { merge, fromEvent, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const clicksOrTimer = merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console every time the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n * ```\n *\n * Merge together 3 Observables, but run only 2 concurrently\n *\n * ```ts\n * import { interval, take, merge } from 'rxjs';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n *\n * const concurrent = 2; // the argument\n * const merged = merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits its max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits its max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n * ```\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n */\nexport function merge(...args: (ObservableInput<unknown> | number | SchedulerLike)[]): Observable<unknown> {\n  const scheduler = popScheduler(args);\n  const concurrent = popNumber(args, Infinity);\n  const sources = args as ObservableInput<unknown>[];\n  return !sources.length\n    ? // No source provided\n      EMPTY\n    : sources.length === 1\n    ? // One source? Just return it.\n      innerFrom(sources[0])\n    : // Merge all sources\n      mergeAll(concurrent)(from(sources, scheduler));\n}\n","import { Observable } from '../Observable';\nimport { noop } from '../util/noop';\n\n/**\n * An Observable that emits no items to the Observer and never completes.\n *\n * ![](never.png)\n *\n * A simple Observable that emits neither values nor errors nor the completion\n * notification. It can be used for testing purposes or for composing with other\n * Observables. Please note that by never emitting a complete notification, this\n * Observable keeps the subscription from being disposed automatically.\n * Subscriptions need to be manually disposed.\n *\n * ##  Example\n *\n * Emit the number 7, then never emit anything else (not even complete)\n *\n * ```ts\n * import { NEVER, startWith } from 'rxjs';\n *\n * const info = () => console.log('Will not be called');\n *\n * const result = NEVER.pipe(startWith(7));\n * result.subscribe({\n *   next: x => console.log(x),\n *   error: info,\n *   complete: info\n * });\n * ```\n *\n * @see {@link Observable}\n * @see {@link EMPTY}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const NEVER = new Observable<never>(noop);\n\n/**\n * @deprecated Replaced with the {@link NEVER} constant. Will be removed in v8.\n */\nexport function never() {\n  return NEVER;\n}\n","import { OperatorFunction, MonoTypeOperatorFunction, TruthyTypesOf } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, S extends T, A>(predicate: (this: A, value: T, index: number) => value is S, thisArg: A): OperatorFunction<T, S>;\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport function filter<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, A>(predicate: (this: A, value: T, index: number) => boolean, thisArg: A): MonoTypeOperatorFunction<T>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n *\n * Emit only click events whose target was a DIV element\n *\n * ```ts\n * import { fromEvent, filter } from 'rxjs';\n *\n * const div = document.createElement('div');\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\n * document.body.appendChild(div);\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param thisArg An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return A function that returns an Observable that emits items from the\n * source Observable that satisfy the specified `predicate`.\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    // An index passed to our predicate function on each call.\n    let index = 0;\n\n    // Subscribe to the source, all errors and completions are\n    // forwarded to the consumer.\n    source.subscribe(\n      // Call the predicate with the appropriate `this` context,\n      // if the predicate returns `true`, then send the value\n      // to the consumer.\n      createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value))\n    );\n  });\n}\n","import { Subscriber } from '../Subscriber';\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\n\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](audit.svg)\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n *\n * ```ts\n * import { fromEvent, audit, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(audit(ev => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return A function that returns an Observable that performs rate-limiting of\n * emissions from the source Observable.\n */\nexport function audit<T>(durationSelector: (value: T) => ObservableInput<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    let lastValue: T | null = null;\n    let durationSubscriber: Subscriber<any> | null = null;\n    let isComplete = false;\n\n    const endDuration = () => {\n      durationSubscriber?.unsubscribe();\n      durationSubscriber = null;\n      if (hasValue) {\n        hasValue = false;\n        const value = lastValue!;\n        lastValue = null;\n        subscriber.next(value);\n      }\n      isComplete && subscriber.complete();\n    };\n\n    const cleanupDuration = () => {\n      durationSubscriber = null;\n      isComplete && subscriber.complete();\n    };\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          lastValue = value;\n          if (!durationSubscriber) {\n            innerFrom(durationSelector(value)).subscribe(\n              (durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration))\n            );\n          }\n        },\n        () => {\n          isComplete = true;\n          (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }\n      )\n    );\n  });\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source value, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * ![](auditTime.png)\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link SchedulerLike} for managing timers.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n *\n * ```ts\n * import { fromEvent, auditTime } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(auditTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return A function that returns an Observable that performs rate-limiting of\n * emissions from the source Observable.\n */\nexport function auditTime<T>(duration: number, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { Observable } from '../Observable';\n\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { Subscription } from '../Subscription';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { operate } from '../util/lift';\n\n/* tslint:disable:max-line-length */\nexport function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <span class=\"informal\">\n * It only listens to the error channel and ignores notifications.\n * Handles errors from the source observable, and maps them to a new observable.\n * The error may also be rethrown, or a new error can be thrown to emit an error from the result.\n * </span>\n *\n * ![](catch.png)\n *\n * This operator handles errors, but forwards along all other events to the resulting observable.\n * If the source observable terminates with an error, it will map that error to a new observable,\n * subscribe to it, and forward all of its events to the resulting observable.\n *\n * ## Examples\n *\n * Continue with a different Observable when there's an error\n *\n * ```ts\n * import { of, map, catchError } from 'rxjs';\n *\n * of(1, 2, 3, 4, 5)\n *   .pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => of('I', 'II', 'III', 'IV', 'V'))\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n * ```\n *\n * Retry the caught source Observable again in case of error, similar to `retry()` operator\n *\n * ```ts\n * import { of, map, catchError, take } from 'rxjs';\n *\n * of(1, 2, 3, 4, 5)\n *   .pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError((err, caught) => caught),\n *     take(30)\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n * ```\n *\n * Throw a new error when the source Observable throws an error\n *\n * ```ts\n * import { of, map, catchError } from 'rxjs';\n *\n * of(1, 2, 3, 4, 5)\n *   .pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => {\n *       throw 'error in source. Details: ' + err;\n *     })\n *   )\n *   .subscribe({\n *     next: x => console.log(x),\n *     error: err => console.log(err)\n *   });\n *   // 1, 2, 3, error in source. Details: four!\n * ```\n *\n * @see {@link onErrorResumeNext}\n * @see {@link repeat}\n * @see {@link repeatWhen}\n * @see {@link retry }\n * @see {@link retryWhen}\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n * is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n * is returned by the `selector` will be used to continue the observable chain.\n * @return A function that returns an Observable that originates from either\n * the source or the Observable returned by the `selector` function.\n */\nexport function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>> {\n  return operate((source, subscriber) => {\n    let innerSub: Subscription | null = null;\n    let syncUnsub = false;\n    let handledResult: Observable<ObservedValueOf<O>>;\n\n    innerSub = source.subscribe(\n      createOperatorSubscriber(subscriber, undefined, undefined, (err) => {\n        handledResult = innerFrom(selector(err, catchError(selector)(source)));\n        if (innerSub) {\n          innerSub.unsubscribe();\n          innerSub = null;\n          handledResult.subscribe(subscriber);\n        } else {\n          // We don't have an innerSub yet, that means the error was synchronous\n          // because the subscribe call hasn't returned yet.\n          syncUnsub = true;\n        }\n      })\n    );\n\n    if (syncUnsub) {\n      // We have a synchronous error, we need to make sure to\n      // finalize right away. This ensures that callbacks in the `finalize` operator are called\n      // at the right time, and that finalization occurs at the expected\n      // time between the source error and the subscription to the\n      // next observable.\n      innerSub.unsubscribe();\n      innerSub = null;\n      handledResult!.subscribe(subscriber);\n    }\n  });\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * A basic scan operation. This is used for `scan` and `reduce`.\n * @param accumulator The accumulator to use\n * @param seed The seed value for the state to accumulate\n * @param hasSeed Whether or not a seed was provided\n * @param emitOnNext Whether or not to emit the state on next\n * @param emitBeforeComplete Whether or not to emit the before completion\n */\n\nexport function scanInternals<V, A, S>(\n  accumulator: (acc: V | A | S, value: V, index: number) => A,\n  seed: S,\n  hasSeed: boolean,\n  emitOnNext: boolean,\n  emitBeforeComplete?: undefined | true\n) {\n  return (source: Observable<V>, subscriber: Subscriber<any>) => {\n    // Whether or not we have state yet. This will only be\n    // false before the first value arrives if we didn't get\n    // a seed value.\n    let hasState = hasSeed;\n    // The state that we're tracking, starting with the seed,\n    // if there is one, and then updated by the return value\n    // from the accumulator on each emission.\n    let state: any = seed;\n    // An index to pass to the accumulator function.\n    let index = 0;\n\n    // Subscribe to our source. All errors and completions are passed through.\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          // Always increment the index.\n          const i = index++;\n          // Set the state\n          state = hasState\n            ? // We already have state, so we can get the new state from the accumulator\n              accumulator(state, value, i)\n            : // We didn't have state yet, a seed value was not provided, so\n\n              // we set the state to the first value, and mark that we have state now\n              ((hasState = true), value);\n\n          // Maybe send it to the consumer.\n          emitOnNext && subscriber.next(state);\n        },\n        // If an onComplete was given, call it, otherwise\n        // just pass through the complete notification to the consumer.\n        emitBeforeComplete &&\n          (() => {\n            hasState && subscriber.next(state);\n            subscriber.complete();\n          })\n      )\n    );\n  };\n}\n","import { scanInternals } from './scanInternals';\nimport { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\n\nexport function reduce<V, A = V>(accumulator: (acc: A | V, value: V, index: number) => A): OperatorFunction<V, V | A>;\nexport function reduce<V, A>(accumulator: (acc: A, value: V, index: number) => A, seed: A): OperatorFunction<V, A>;\nexport function reduce<V, A, S = A>(accumulator: (acc: A | S, value: V, index: number) => A, seed: S): OperatorFunction<V, A>;\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * ![](reduce.png)\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * ## Example\n *\n * Count the number of click events that happened in 5 seconds\n *\n * ```ts\n * import { fromEvent, takeUntil, interval, map, reduce } from 'rxjs';\n *\n * const clicksInFiveSeconds = fromEvent(document, 'click')\n *   .pipe(takeUntil(interval(5000)));\n *\n * const ones = clicksInFiveSeconds.pipe(map(() => 1));\n * const seed = 0;\n * const count = ones.pipe(reduce((acc, one) => acc + one, seed));\n *\n * count.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: A, value: V, index: number): A} accumulator The accumulator function\n * called on each source value.\n * @param {A} [seed] The initial accumulation value.\n * @return A function that returns an Observable that emits a single value that\n * is the result of accumulating the values emitted by the source Observable.\n */\nexport function reduce<V, A>(accumulator: (acc: V | A, value: V, index: number) => A, seed?: any): OperatorFunction<V, V | A> {\n  return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\n}\n","import { mergeMap } from './mergeMap';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * ![](concatMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n *\n * ```ts\n * import { fromEvent, concatMap, interval, take } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   concatMap(ev => interval(1000).pipe(take(4)))\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and taking\n * values from each projected inner Observable sequentially.\n */\nexport function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscribable } from '../types';\n\n/**\n * Used to convert a subscribable to an observable.\n *\n * Currently, this is only used within internals.\n *\n * TODO: Discuss ObservableInput supporting \"Subscribable\".\n * https://github.com/ReactiveX/rxjs/issues/5909\n *\n * @param subscribable A subscribable\n */\nexport function fromSubscribable<T>(subscribable: Subscribable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => subscribable.subscribe(subscriber));\n}\n","import { OperatorFunction, ObservableInput, ObservedValueOf, SubjectLike } from '../types';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { fromSubscribable } from '../observable/fromSubscribable';\n\n/**\n * An object used to configure {@link connect} operator.\n */\nexport interface ConnectConfig<T> {\n  /**\n   * A factory function used to create the Subject through which the source\n   * is multicast. By default, this creates a {@link Subject}.\n   */\n  connector: () => SubjectLike<T>;\n}\n\n/**\n * The default configuration for `connect`.\n */\nconst DEFAULT_CONFIG: ConnectConfig<unknown> = {\n  connector: () => new Subject<unknown>(),\n};\n\n/**\n * Creates an observable by multicasting the source within a function that\n * allows the developer to define the usage of the multicast prior to connection.\n *\n * This is particularly useful if the observable source you wish to multicast could\n * be synchronous or asynchronous. This sets it apart from {@link share}, which, in the\n * case of totally synchronous sources will fail to share a single subscription with\n * multiple consumers, as by the time the subscription to the result of {@link share}\n * has returned, if the source is synchronous its internal reference count will jump from\n * 0 to 1 back to 0 and reset.\n *\n * To use `connect`, you provide a `selector` function that will give you\n * a multicast observable that is not yet connected. You then use that multicast observable\n * to create a resulting observable that, when subscribed, will set up your multicast. This is\n * generally, but not always, accomplished with {@link merge}.\n *\n * Note that using a {@link takeUntil} inside of `connect`'s `selector` _might_ mean you were looking\n * to use the {@link takeWhile} operator instead.\n *\n * When you subscribe to the result of `connect`, the `selector` function will be called. After\n * the `selector` function returns, the observable it returns will be subscribed to, _then_ the\n * multicast will be connected to the source.\n *\n * ## Example\n *\n * Sharing a totally synchronous observable\n *\n * ```ts\n * import { of, tap, connect, merge, map, filter } from 'rxjs';\n *\n * const source$ = of(1, 2, 3, 4, 5).pipe(\n *   tap({\n *     subscribe: () => console.log('subscription started'),\n *     next: n => console.log(`source emitted ${ n }`)\n *   })\n * );\n *\n * source$.pipe(\n *   // Notice in here we're merging 3 subscriptions to `shared$`.\n *   connect(shared$ => merge(\n *     shared$.pipe(map(n => `all ${ n }`)),\n *     shared$.pipe(filter(n => n % 2 === 0), map(n => `even ${ n }`)),\n *     shared$.pipe(filter(n => n % 2 === 1), map(n => `odd ${ n }`))\n *   ))\n * )\n * .subscribe(console.log);\n *\n * // Expected output: (notice only one subscription)\n * 'subscription started'\n * 'source emitted 1'\n * 'all 1'\n * 'odd 1'\n * 'source emitted 2'\n * 'all 2'\n * 'even 2'\n * 'source emitted 3'\n * 'all 3'\n * 'odd 3'\n * 'source emitted 4'\n * 'all 4'\n * 'even 4'\n * 'source emitted 5'\n * 'all 5'\n * 'odd 5'\n * ```\n *\n * @param selector A function used to set up the multicast. Gives you a multicast observable\n * that is not yet connected. With that, you're expected to create and return\n * and Observable, that when subscribed to, will utilize the multicast observable.\n * After this function is executed -- and its return value subscribed to -- the\n * operator will subscribe to the source, and the connection will be made.\n * @param config The configuration object for `connect`.\n */\nexport function connect<T, O extends ObservableInput<unknown>>(\n  selector: (shared: Observable<T>) => O,\n  config: ConnectConfig<T> = DEFAULT_CONFIG\n): OperatorFunction<T, ObservedValueOf<O>> {\n  const { connector } = config;\n  return operate((source, subscriber) => {\n    const subject = connector();\n    innerFrom(selector(fromSubscribable(subject))).subscribe(subscriber);\n    subscriber.add(source.subscribe(subject));\n  });\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * ![](defaultIfEmpty.png)\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * ## Example\n *\n * If no clicks happen in 5 seconds, then emit 'no clicks'\n *\n * ```ts\n * import { fromEvent, takeUntil, interval, defaultIfEmpty } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksBeforeFive = clicks.pipe(takeUntil(interval(5000)));\n * const result = clicksBeforeFive.pipe(defaultIfEmpty('no clicks'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param defaultValue The default value used if the source\n * Observable is empty.\n * @return A function that returns an Observable that emits either the\n * specified `defaultValue` if the source Observable emits no items, or the\n * values emitted by the source Observable.\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R): OperatorFunction<T, T | R> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          subscriber.next(value);\n        },\n        () => {\n          if (!hasValue) {\n            subscriber.next(defaultValue!);\n          }\n          subscriber.complete();\n        }\n      )\n    );\n  });\n}\n","import { MonoTypeOperatorFunction } from '../types';\nimport { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * ![](take.png)\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * ## Example\n *\n * Take the first 5 seconds of an infinite 1-second interval Observable\n *\n * ```ts\n * import { interval, take } from 'rxjs';\n *\n * const intervalCount = interval(1000);\n * const takeFive = intervalCount.pipe(take(5));\n * takeFive.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * ```\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param count The maximum number of `next` values to emit.\n * @return A function that returns an Observable that emits only the first\n * `count` values emitted by the source Observable, or all of the values from\n * the source if the source emits fewer than `count` values.\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return count <= 0\n    ? // If we are taking no values, that's empty.\n      () => EMPTY\n    : operate((source, subscriber) => {\n        let seen = 0;\n        source.subscribe(\n          createOperatorSubscriber(subscriber, (value) => {\n            // Increment the number of values we have seen,\n            // then check it against the allowed count to see\n            // if we are still letting values through.\n            if (++seen <= count) {\n              subscriber.next(value);\n              // If we have met or passed our allowed count,\n              // we need to complete. We have to do <= here,\n              // because re-entrant code will increment `seen` twice.\n              if (count <= seen) {\n                subscriber.complete();\n              }\n            }\n          })\n        );\n      });\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * ![](ignoreElements.png)\n *\n * The `ignoreElements` operator suppresses all items emitted by the source Observable,\n * but allows its termination notification (either `error` or `complete`) to pass through unchanged.\n *\n * If you do not care about the items being emitted by an Observable, but you do want to be notified\n * when it completes or when it terminates with an error, you can apply the `ignoreElements` operator\n * to the Observable, which will ensure that it will never call its observers’ `next` handlers.\n *\n * ## Example\n *\n * Ignore all `next` emissions from the source\n *\n * ```ts\n * import { of, ignoreElements } from 'rxjs';\n *\n * of('you', 'talking', 'to', 'me')\n *   .pipe(ignoreElements())\n *   .subscribe({\n *     next: word => console.log(word),\n *     error: err => console.log('error:', err),\n *     complete: () => console.log('the end'),\n *   });\n *\n * // result:\n * // 'the end'\n * ```\n *\n * @return A function that returns an empty Observable that only calls\n * `complete` or `error`, based on which one is called by the source\n * Observable.\n */\nexport function ignoreElements(): OperatorFunction<unknown, never> {\n  return operate((source, subscriber) => {\n    source.subscribe(createOperatorSubscriber(subscriber, noop));\n  });\n}\n","import { OperatorFunction } from '../types';\nimport { map } from './map';\n\n/** @deprecated To be removed in v9. Use {@link map} instead: `map(() => value)`. */\nexport function mapTo<R>(value: R): OperatorFunction<unknown, R>;\n/**\n * @deprecated Do not specify explicit type parameters. Signatures with type parameters\n * that cannot be inferred will be removed in v8. `mapTo` itself will be removed in v9,\n * use {@link map} instead: `map(() => value)`.\n * */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R>;\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * ![](mapTo.png)\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * ## Example\n *\n * Map every click to the string `'Hi'`\n *\n * ```ts\n * import { fromEvent, mapTo } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const greetings = clicks.pipe(mapTo('Hi'));\n *\n * greetings.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n *\n * @param value The value to map each source value to.\n * @return A function that returns an Observable that emits the given `value`\n * every time the source Observable emits.\n * @deprecated To be removed in v9. Use {@link map} instead: `map(() => value)`.\n */\nexport function mapTo<R>(value: R): OperatorFunction<unknown, R> {\n  return map(() => value);\n}\n","import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { concat } from '../observable/concat';\nimport { take } from './take';\nimport { ignoreElements } from './ignoreElements';\nimport { mapTo } from './mapTo';\nimport { mergeMap } from './mergeMap';\nimport { innerFrom } from '../observable/innerFrom';\n\n/** @deprecated The `subscriptionDelay` parameter will be removed in v8. */\nexport function delayWhen<T>(\n  delayDurationSelector: (value: T, index: number) => ObservableInput<any>,\n  subscriptionDelay: Observable<any>\n): MonoTypeOperatorFunction<T>;\nexport function delayWhen<T>(delayDurationSelector: (value: T, index: number) => ObservableInput<any>): MonoTypeOperatorFunction<T>;\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * ![](delayWhen.png)\n *\n * `delayWhen` operator shifts each emitted value from the source Observable by\n * a time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the value emitted from\n * the source Observable as the first argument to the `delayDurationSelector`.\n * The `delayDurationSelector` function should return an {@link ObservableInput},\n * that is internally converted to an Observable that is called the \"duration\"\n * Observable.\n *\n * The source value is emitted on the output Observable only when the \"duration\"\n * Observable emits ({@link guide/glossary-and-semantics#next next}s) any value.\n * Upon that, the \"duration\" Observable gets unsubscribed.\n *\n * Before RxJS V7, the {@link guide/glossary-and-semantics#complete completion}\n * of the \"duration\" Observable would have been triggering the emission of the\n * source value to the output Observable, but with RxJS V7, this is not the case\n * anymore.\n *\n * Only next notifications (from the \"duration\" Observable) trigger values from\n * the source Observable to be passed to the output Observable. If the \"duration\"\n * Observable only emits the complete notification (without next), the value\n * emitted by the source Observable will never get to the output Observable - it\n * will be swallowed. If the \"duration\" Observable errors, the error will be\n * propagated to the output Observable.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * ## Example\n *\n * Delay each click by a random amount of time, between 0 and 5 seconds\n *\n * ```ts\n * import { fromEvent, delayWhen, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const delayedClicks = clicks.pipe(\n *   delayWhen(() => interval(Math.random() * 5000))\n * );\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link delay}\n * @see {@link throttle}\n * @see {@link throttleTime}\n * @see {@link debounce}\n * @see {@link debounceTime}\n * @see {@link sample}\n * @see {@link sampleTime}\n * @see {@link audit}\n * @see {@link auditTime}\n *\n * @param delayDurationSelector A function that returns an `ObservableInput` for\n * each `value` emitted by the source Observable, which is then used to delay the\n * emission of that `value` on the output Observable until the `ObservableInput`\n * returned from this function emits a next value. When called, beside `value`,\n * this function receives a zero-based `index` of the emission order.\n * @param subscriptionDelay An Observable that triggers the subscription to the\n * source Observable once it emits any value.\n * @return A function that returns an Observable that delays the emissions of\n * the source Observable by an amount of time specified by the Observable\n * returned by `delayDurationSelector`.\n */\nexport function delayWhen<T>(\n  delayDurationSelector: (value: T, index: number) => ObservableInput<any>,\n  subscriptionDelay?: Observable<any>\n): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    // DEPRECATED PATH\n    return (source: Observable<T>) =>\n      concat(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));\n  }\n\n  return mergeMap((value, index) => innerFrom(delayDurationSelector(value, index)).pipe(take(1), mapTo(value)));\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { delayWhen } from './delayWhen';\nimport { timer } from '../observable/timer';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * ![](delay.svg)\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * ## Examples\n *\n * Delay each click by one second\n *\n * ```ts\n * import { fromEvent, delay } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const delayedClicks = clicks.pipe(delay(1000)); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * Delay all clicks until a future date happens\n *\n * ```ts\n * import { fromEvent, delay } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const date = new Date('March 15, 2050 12:00:00'); // in the future\n * const delayedClicks = clicks.pipe(delay(date)); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link delayWhen}\n * @see {@link throttle}\n * @see {@link throttleTime}\n * @see {@link debounce}\n * @see {@link debounceTime}\n * @see {@link sample}\n * @see {@link sampleTime}\n * @see {@link audit}\n * @see {@link auditTime}\n *\n * @param {number|Date} due The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the time-shift for each item.\n * @return A function that returns an Observable that delays the emissions of\n * the source Observable by the specified timeout or Date.\n */\nexport function delay<T>(due: number | Date, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction<T> {\n  const duration = timer(due, scheduler);\n  return delayWhen(() => duration);\n}\n","import { MonoTypeOperatorFunction } from '../types';\nimport { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function distinctUntilChanged<T>(comparator?: (previous: T, current: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(\n  comparator: (previous: K, current: K) => boolean,\n  keySelector: (value: T) => K\n): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns a result {@link Observable} that emits all values pushed by the source observable if they\n * are distinct in comparison to the last value the result observable emitted.\n *\n * When provided without parameters or with the first parameter (`{@link distinctUntilChanged#comparator comparator}`),\n * it behaves like this:\n *\n * 1. It will always emit the first value from the source.\n * 2. For all subsequent values pushed by the source, they will be compared to the previously emitted values\n *    using the provided `comparator` or an `===` equality check.\n * 3. If the value pushed by the source is determined to be unequal by this check, that value is emitted and\n *    becomes the new \"previously emitted value\" internally.\n *\n * When the second parameter (`{@link distinctUntilChanged#keySelector keySelector}`) is provided, the behavior\n * changes:\n *\n * 1. It will always emit the first value from the source.\n * 2. The `keySelector` will be run against all values, including the first value.\n * 3. For all values after the first, the selected key will be compared against the key selected from\n *    the previously emitted value using the `comparator`.\n * 4. If the keys are determined to be unequal by this check, the value (not the key), is emitted\n *    and the selected key from that value is saved for future comparisons against other keys.\n *\n * ## Examples\n *\n * A very basic example with no `{@link distinctUntilChanged#comparator comparator}`. Note that `1` is emitted more than once,\n * because it's distinct in comparison to the _previously emitted_ value,\n * not in comparison to _all other emitted values_.\n *\n * ```ts\n * import { of, distinctUntilChanged } from 'rxjs';\n *\n * of(1, 1, 1, 2, 2, 2, 1, 1, 3, 3)\n *   .pipe(distinctUntilChanged())\n *   .subscribe(console.log);\n * // Logs: 1, 2, 1, 3\n * ```\n *\n * With a `{@link distinctUntilChanged#comparator comparator}`, you can do custom comparisons. Let's say\n * you only want to emit a value when all of its components have\n * changed:\n *\n * ```ts\n * import { of, distinctUntilChanged } from 'rxjs';\n *\n * const totallyDifferentBuilds$ = of(\n *   { engineVersion: '1.1.0', transmissionVersion: '1.2.0' },\n *   { engineVersion: '1.1.0', transmissionVersion: '1.4.0' },\n *   { engineVersion: '1.3.0', transmissionVersion: '1.4.0' },\n *   { engineVersion: '1.3.0', transmissionVersion: '1.5.0' },\n *   { engineVersion: '2.0.0', transmissionVersion: '1.5.0' }\n * ).pipe(\n *   distinctUntilChanged((prev, curr) => {\n *     return (\n *       prev.engineVersion === curr.engineVersion ||\n *       prev.transmissionVersion === curr.transmissionVersion\n *     );\n *   })\n * );\n *\n * totallyDifferentBuilds$.subscribe(console.log);\n *\n * // Logs:\n * // { engineVersion: '1.1.0', transmissionVersion: '1.2.0' }\n * // { engineVersion: '1.3.0', transmissionVersion: '1.4.0' }\n * // { engineVersion: '2.0.0', transmissionVersion: '1.5.0' }\n * ```\n *\n * You can also provide a custom `{@link distinctUntilChanged#comparator comparator}` to check that emitted\n * changes are only in one direction. Let's say you only want to get\n * the next record temperature:\n *\n * ```ts\n * import { of, distinctUntilChanged } from 'rxjs';\n *\n * const temps$ = of(30, 31, 20, 34, 33, 29, 35, 20);\n *\n * const recordHighs$ = temps$.pipe(\n *   distinctUntilChanged((prevHigh, temp) => {\n *     // If the current temp is less than\n *     // or the same as the previous record,\n *     // the record hasn't changed.\n *     return temp <= prevHigh;\n *   })\n * );\n *\n * recordHighs$.subscribe(console.log);\n * // Logs: 30, 31, 34, 35\n * ```\n *\n * Selecting update events only when the `updatedBy` field shows\n * the account changed hands.\n *\n * ```ts\n * import { of, distinctUntilChanged } from 'rxjs';\n *\n * // A stream of updates to a given account\n * const accountUpdates$ = of(\n *   { updatedBy: 'blesh', data: [] },\n *   { updatedBy: 'blesh', data: [] },\n *   { updatedBy: 'ncjamieson', data: [] },\n *   { updatedBy: 'ncjamieson', data: [] },\n *   { updatedBy: 'blesh', data: [] }\n * );\n *\n * // We only want the events where it changed hands\n * const changedHands$ = accountUpdates$.pipe(\n *   distinctUntilChanged(undefined, update => update.updatedBy)\n * );\n *\n * changedHands$.subscribe(console.log);\n * // Logs:\n * // { updatedBy: 'blesh', data: Array[0] }\n * // { updatedBy: 'ncjamieson', data: Array[0] }\n * // { updatedBy: 'blesh', data: Array[0] }\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param comparator A function used to compare the previous and current keys for\n * equality. Defaults to a `===` check.\n * @param keySelector Used to select a key value to be passed to the `comparator`.\n *\n * @return A function that returns an Observable that emits items from the\n * source Observable with distinct values.\n */\nexport function distinctUntilChanged<T, K>(\n  comparator?: (previous: K, current: K) => boolean,\n  keySelector: (value: T) => K = identity as (value: T) => K\n): MonoTypeOperatorFunction<T> {\n  // We've been allowing `null` do be passed as the `compare`, so we can't do\n  // a default value for the parameter, because that will only work\n  // for `undefined`.\n  comparator = comparator ?? defaultCompare;\n\n  return operate((source, subscriber) => {\n    // The previous key, used to compare against keys selected\n    // from new arrivals to determine \"distinctiveness\".\n    let previousKey: K;\n    // Whether or not this is the first value we've gotten.\n    let first = true;\n\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        // We always call the key selector.\n        const currentKey = keySelector(value);\n\n        // If it's the first value, we always emit it.\n        // Otherwise, we compare this key to the previous key, and\n        // if the comparer returns false, we emit.\n        if (first || !comparator!(previousKey, currentKey)) {\n          // Update our state *before* we emit the value\n          // as emission can be the source of re-entrant code\n          // in functional libraries like this. We only really\n          // need to do this if it's the first value, or if the\n          // key we're tracking in previous needs to change.\n          first = false;\n          previousKey = currentKey;\n\n          // Emit the value!\n          subscriber.next(value);\n        }\n      })\n    );\n  });\n}\n\nfunction defaultCompare(a: any, b: any) {\n  return a === b;\n}\n","import { EmptyError } from '../util/EmptyError';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * If the source observable completes without emitting a value, it will emit\n * an error. The error will be created at that time by the optional\n * `errorFactory` argument, otherwise, the error will be {@link EmptyError}.\n *\n * ![](throwIfEmpty.png)\n *\n * ## Example\n *\n * Throw an error if the document wasn't clicked within 1 second\n *\n * ```ts\n * import { fromEvent, takeUntil, timer, throwIfEmpty } from 'rxjs';\n *\n * const click$ = fromEvent(document, 'click');\n *\n * click$.pipe(\n *   takeUntil(timer(1000)),\n *   throwIfEmpty(() => new Error('The document was not clicked within 1 second'))\n * )\n * .subscribe({\n *   next() {\n *    console.log('The document was clicked');\n *   },\n *   error(err) {\n *     console.error(err.message);\n *   }\n * });\n * ```\n *\n * @param errorFactory A factory function called to produce the\n * error to be thrown when the source observable completes without emitting a\n * value.\n * @return A function that returns an Observable that throws an error if the\n * source Observable completed without emitting.\n */\nexport function throwIfEmpty<T>(errorFactory: () => any = defaultErrorFactory): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          subscriber.next(value);\n        },\n        () => (hasValue ? subscriber.complete() : subscriber.error(errorFactory()))\n      )\n    );\n  });\n}\n\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}\n","import { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * The specified function will also be called when the subscriber explicitly unsubscribes.\n *\n * ## Examples\n *\n * Execute callback function when the observable completes\n *\n * ```ts\n * import { interval, take, finalize } from 'rxjs';\n *\n * // emit value in sequence every 1 second\n * const source = interval(1000);\n * const example = source.pipe(\n *   take(5), //take only the first 5 values\n *   finalize(() => console.log('Sequence complete')) // Execute when the observable completes\n * );\n * const subscribe = example.subscribe(val => console.log(val));\n *\n * // results:\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * // 'Sequence complete'\n * ```\n *\n * Execute callback function when the subscriber explicitly unsubscribes\n *\n * ```ts\n * import { interval, finalize, tap, noop, timer } from 'rxjs';\n *\n * const source = interval(100).pipe(\n *   finalize(() => console.log('[finalize] Called')),\n *   tap({\n *     next: () => console.log('[next] Called'),\n *     error: () => console.log('[error] Not called'),\n *     complete: () => console.log('[tap complete] Not called')\n *   })\n * );\n *\n * const sub = source.subscribe({\n *   next: x => console.log(x),\n *   error: noop,\n *   complete: () => console.log('[complete] Not called')\n * });\n *\n * timer(150).subscribe(() => sub.unsubscribe());\n *\n * // results:\n * // '[next] Called'\n * // 0\n * // '[finalize] Called'\n * ```\n *\n * @param {function} callback Function to be called when source terminates.\n * @return A function that returns an Observable that mirrors the source, but\n * will call the specified function on termination.\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    // TODO: This try/finally was only added for `useDeprecatedSynchronousErrorHandling`.\n    // REMOVE THIS WHEN THAT HOT GARBAGE IS REMOVED IN V8.\n    try {\n      source.subscribe(subscriber);\n    } finally {\n      subscriber.add(callback);\n    }\n  });\n}\n","import { Observable } from '../Observable';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, TruthyTypesOf } from '../types';\nimport { filter } from './filter';\nimport { take } from './take';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { identity } from '../util/identity';\n\nexport function first<T, D = T>(predicate?: null, defaultValue?: D): OperatorFunction<T, T | D>;\nexport function first<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\nexport function first<T, D>(predicate: BooleanConstructor, defaultValue: D): OperatorFunction<T, TruthyTypesOf<T> | D>;\nexport function first<T, S extends T>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue?: S\n): OperatorFunction<T, S>;\nexport function first<T, S extends T, D>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue: D\n): OperatorFunction<T, S | D>;\nexport function first<T, D = T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * ![](first.png)\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. Throws an error if\n * `defaultValue` was not provided and a matching element is not found.\n *\n * ## Examples\n *\n * Emit only the first click that happens on the DOM\n *\n * ```ts\n * import { fromEvent, first } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(first());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Emits the first click that happens on a DIV\n *\n * ```ts\n * import { fromEvent, first } from 'rxjs';\n *\n * const div = document.createElement('div');\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\n * document.body.appendChild(div);\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(first(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * This is how `first()` is different from {@link take}(1) which completes instead.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {D} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return A function that returns an Observable that emits the first item that\n * matches the condition.\n */\nexport function first<T, D>(\n  predicate?: ((value: T, index: number, source: Observable<T>) => boolean) | null,\n  defaultValue?: D\n): OperatorFunction<T, T | D> {\n  const hasDefaultValue = arguments.length >= 2;\n  return (source: Observable<T>) =>\n    source.pipe(\n      predicate ? filter((v, i) => predicate(v, i, source)) : identity,\n      take(1),\n      hasDefaultValue ? defaultIfEmpty(defaultValue!) : throwIfEmpty(() => new EmptyError())\n    );\n}\n","import { EMPTY } from '../observable/empty';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Waits for the source to complete, then emits the last N values from the source,\n * as specified by the `count` argument.\n *\n * ![](takeLast.png)\n *\n * `takeLast` results in an observable that will hold values up to `count` values in memory,\n * until the source completes. It then pushes all values in memory to the consumer, in the\n * order they were received from the source, then notifies the consumer that it is\n * complete.\n *\n * If for some reason the source completes before the `count` supplied to `takeLast` is reached,\n * all values received until that point are emitted, and then completion is notified.\n *\n * **Warning**: Using `takeLast` with an observable that never completes will result\n * in an observable that never emits a value.\n *\n * ## Example\n *\n * Take the last 3 values of an Observable with many values\n *\n * ```ts\n * import { range, takeLast } from 'rxjs';\n *\n * const many = range(1, 100);\n * const lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return A function that returns an Observable that emits at most the last\n * `count` values emitted by the source Observable.\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return count <= 0\n    ? () => EMPTY\n    : operate((source, subscriber) => {\n        // This buffer will hold the values we are going to emit\n        // when the source completes. Since we only want to take the\n        // last N values, we can't emit until we're sure we're not getting\n        // any more values.\n        let buffer: T[] = [];\n        source.subscribe(\n          createOperatorSubscriber(\n            subscriber,\n            (value) => {\n              // Add the most recent value onto the end of our buffer.\n              buffer.push(value);\n              // If our buffer is now larger than the number of values we\n              // want to take, we remove the oldest value from the buffer.\n              count < buffer.length && buffer.shift();\n            },\n            () => {\n              // The source completed, we now know what are last values\n              // are, emit them in the order they were received.\n              for (const value of buffer) {\n                subscriber.next(value);\n              }\n              subscriber.complete();\n            },\n            // Errors are passed through to the consumer\n            undefined,\n            () => {\n              // During finalization release the values in our buffer.\n              buffer = null!;\n            }\n          )\n        );\n      });\n}\n","import { Observable } from '../Observable';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, TruthyTypesOf } from '../types';\nimport { filter } from './filter';\nimport { takeLast } from './takeLast';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { identity } from '../util/identity';\n\nexport function last<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\nexport function last<T, D>(predicate: BooleanConstructor, defaultValue: D): OperatorFunction<T, TruthyTypesOf<T> | D>;\nexport function last<T, D = T>(predicate?: null, defaultValue?: D): OperatorFunction<T, T | D>;\nexport function last<T, S extends T>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue?: S\n): OperatorFunction<T, S>;\nexport function last<T, D = T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * ![](last.png)\n *\n * It will throw an error if the source completes without notification or one that matches the predicate. It\n * returns the last value or if a predicate is provided last value that matches the predicate. It returns the\n * given default value if no notification is emitted or matches the predicate.\n *\n * ## Examples\n *\n * Last alphabet from the sequence\n *\n * ```ts\n * import { from, last } from 'rxjs';\n *\n * const source = from(['x', 'y', 'z']);\n * const result = source.pipe(last());\n *\n * result.subscribe(value => console.log(`Last alphabet: ${ value }`));\n *\n * // Outputs\n * // Last alphabet: z\n * ```\n *\n * Default value when the value in the predicate is not matched\n *\n * ```ts\n * import { from, last } from 'rxjs';\n *\n * const source = from(['x', 'y', 'z']);\n * const result = source.pipe(last(char => char === 'a', 'not found'));\n *\n * result.subscribe(value => console.log(`'a' is ${ value }.`));\n *\n * // Outputs\n * // 'a' is not found.\n * ```\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipLast}\n * @see {@link skipWhile}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} [predicate] - The condition any source emitted item has to satisfy.\n * @param {any} [defaultValue] - An optional default value to provide if last\n * predicate isn't met or no values were emitted.\n * @return A function that returns an Observable that emits only the last item\n * satisfying the given condition from the source, or a NoSuchElementException\n * if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n */\nexport function last<T, D>(\n  predicate?: ((value: T, index: number, source: Observable<T>) => boolean) | null,\n  defaultValue?: D\n): OperatorFunction<T, T | D> {\n  const hasDefaultValue = arguments.length >= 2;\n  return (source: Observable<T>) =>\n    source.pipe(\n      predicate ? filter((v, i) => predicate(v, i, source)) : identity,\n      takeLast(1),\n      hasDefaultValue ? defaultIfEmpty(defaultValue!) : throwIfEmpty(() => new EmptyError())\n    );\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { OperatorFunction, UnaryFunction, ObservedValueOf, ObservableInput } from '../types';\nimport { isFunction } from '../util/isFunction';\nimport { connect } from './connect';\n\n/**\n * An operator that creates a {@link ConnectableObservable}, that when connected,\n * with the `connect` method, will use the provided subject to multicast the values\n * from the source to all consumers.\n *\n * @param subject The subject to multicast through.\n * @return A function that returns a {@link ConnectableObservable}\n * @deprecated Will be removed in v8. To create a connectable observable, use {@link connectable}.\n * If you're using {@link refCount} after `multicast`, use the {@link share} operator instead.\n * `multicast(subject), refCount()` is equivalent to\n * `share({ connector: () => subject, resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false })`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function multicast<T>(subject: Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\n\n/**\n * Because this is deprecated in favor of the {@link connect} operator, and was otherwise poorly documented,\n * rather than duplicate the effort of documenting the same behavior, please see documentation for the\n * {@link connect} operator.\n *\n * @param subject The subject used to multicast.\n * @param selector A setup function to setup the multicast\n * @return A function that returns an observable that mirrors the observable returned by the selector.\n * @deprecated Will be removed in v8. Use the {@link connect} operator instead.\n * `multicast(subject, selector)` is equivalent to\n * `connect(selector, { connector: () => subject })`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function multicast<T, O extends ObservableInput<any>>(\n  subject: Subject<T>,\n  selector: (shared: Observable<T>) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n\n/**\n * An operator that creates a {@link ConnectableObservable}, that when connected,\n * with the `connect` method, will use the provided subject to multicast the values\n * from the source to all consumers.\n *\n * @param subjectFactory A factory that will be called to create the subject. Passing a function here\n * will cause the underlying subject to be \"reset\" on error, completion, or refCounted unsubscription of\n * the source.\n * @return A function that returns a {@link ConnectableObservable}\n * @deprecated Will be removed in v8. To create a connectable observable, use {@link connectable}.\n * If you're using {@link refCount} after `multicast`, use the {@link share} operator instead.\n * `multicast(() => new BehaviorSubject('test')), refCount()` is equivalent to\n * `share({ connector: () => new BehaviorSubject('test') })`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function multicast<T>(subjectFactory: () => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\n\n/**\n * Because this is deprecated in favor of the {@link connect} operator, and was otherwise poorly documented,\n * rather than duplicate the effort of documenting the same behavior, please see documentation for the\n * {@link connect} operator.\n *\n * @param subjectFactory A factory that creates the subject used to multicast.\n * @param selector A function to setup the multicast and select the output.\n * @return A function that returns an observable that mirrors the observable returned by the selector.\n * @deprecated Will be removed in v8. Use the {@link connect} operator instead.\n * `multicast(subjectFactory, selector)` is equivalent to\n * `connect(selector, { connector: subjectFactory })`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function multicast<T, O extends ObservableInput<any>>(\n  subjectFactory: () => Subject<T>,\n  selector: (shared: Observable<T>) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n\n/**\n * @deprecated Will be removed in v8. Use the {@link connectable} observable, the {@link connect} operator or the\n * {@link share} operator instead. See the overloads below for equivalent replacement examples of this operator's\n * behaviors.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function multicast<T, R>(\n  subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n  selector?: (source: Observable<T>) => Observable<R>\n): OperatorFunction<T, R> {\n  const subjectFactory = isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : () => subjectOrSubjectFactory;\n\n  if (isFunction(selector)) {\n    // If a selector function is provided, then we're a \"normal\" operator that isn't\n    // going to return a ConnectableObservable. We can use `connect` to do what we\n    // need to do.\n    return connect(selector, {\n      connector: subjectFactory,\n    });\n  }\n\n  return (source: Observable<T>) => new ConnectableObservable<any>(source, subjectFactory);\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * ![](pairwise.png)\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * ## Example\n *\n * On every click (starting from the second), emit the relative distance to the previous click\n *\n * ```ts\n * import { fromEvent, pairwise, map } from 'rxjs';\n *\n * const clicks = fromEvent<PointerEvent>(document, 'click');\n * const pairs = clicks.pipe(pairwise());\n * const distance = pairs.pipe(\n *   map(([first, second]) => {\n *     const x0 = first.clientX;\n *     const y0 = first.clientY;\n *     const x1 = second.clientX;\n *     const y1 = second.clientY;\n *     return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n *   })\n * );\n *\n * distance.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return A function that returns an Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return operate((source, subscriber) => {\n    let prev: T;\n    let hasPrev = false;\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        const p = prev;\n        prev = value;\n        hasPrev && subscriber.next([p, value]);\n        hasPrev = true;\n      })\n    );\n  });\n}\n","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction, ObservableInput, ObservedValueOf } from '../types';\nimport { connect } from './connect';\n\n/**\n * Returns a connectable observable that, when connected, will multicast\n * all values through a single underlying {@link Subject} instance.\n *\n * @deprecated Will be removed in v8. To create a connectable observable, use {@link connectable}.\n * `source.pipe(publish())` is equivalent to\n * `connectable(source, { connector: () => new Subject(), resetOnDisconnect: false })`.\n * If you're using {@link refCount} after `publish`, use {@link share} operator instead.\n * `source.pipe(publish(), refCount())` is equivalent to\n * `source.pipe(share({ resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\n\n/**\n * Returns an observable, that when subscribed to, creates an underlying {@link Subject},\n * provides an observable view of it to a `selector` function, takes the observable result of\n * that selector function and subscribes to it, sending its values to the consumer, _then_ connects\n * the subject to the original source.\n *\n * @param selector A function used to setup multicasting prior to automatic connection.\n *\n * @deprecated Will be removed in v8. Use the {@link connect} operator instead.\n * `publish(selector)` is equivalent to `connect(selector)`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function publish<T, O extends ObservableInput<any>>(selector: (shared: Observable<T>) => O): OperatorFunction<T, ObservedValueOf<O>>;\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <span class=\"informal\">Makes a cold Observable hot</span>\n *\n * ![](publish.png)\n *\n * ## Examples\n *\n * Make `source$` hot by applying `publish` operator, then merge each inner observable into a single one\n * and subscribe\n *\n * ```ts\n * import { zip, interval, of, map, publish, merge, tap } from 'rxjs';\n *\n * const source$ = zip(interval(2000), of(1, 2, 3, 4, 5, 6, 7, 8, 9))\n *   .pipe(map(([, number]) => number));\n *\n * source$\n *   .pipe(\n *     publish(multicasted$ =>\n *       merge(\n *         multicasted$.pipe(tap(x => console.log('Stream 1:', x))),\n *         multicasted$.pipe(tap(x => console.log('Stream 2:', x))),\n *         multicasted$.pipe(tap(x => console.log('Stream 3:', x)))\n *       )\n *     )\n *   )\n *   .subscribe();\n *\n * // Results every two seconds\n * // Stream 1: 1\n * // Stream 2: 1\n * // Stream 3: 1\n * // ...\n * // Stream 1: 9\n * // Stream 2: 9\n * // Stream 3: 9\n * ```\n *\n * @see {@link publishLast}\n * @see {@link publishReplay}\n * @see {@link publishBehavior}\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A function that returns a ConnectableObservable that upon connection\n * causes the source Observable to emit items to its Observers.\n * @deprecated Will be removed in v8. Use the {@link connectable} observable, the {@link connect} operator or the\n * {@link share} operator instead. See the overloads below for equivalent replacement examples of this operator's\n * behaviors.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ? (source) => connect(selector)(source) : (source) => multicast(new Subject<T>())(source);\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { scanInternals } from './scanInternals';\n\nexport function scan<V, A = V>(accumulator: (acc: A | V, value: V, index: number) => A): OperatorFunction<V, V | A>;\nexport function scan<V, A>(accumulator: (acc: A, value: V, index: number) => A, seed: A): OperatorFunction<V, A>;\nexport function scan<V, A, S>(accumulator: (acc: A | S, value: V, index: number) => A, seed: S): OperatorFunction<V, A>;\n\n// TODO: link to a \"redux pattern\" section in the guide (location TBD)\n\n/**\n * Useful for encapsulating and managing state. Applies an accumulator (or \"reducer function\")\n * to each value from the source after an initial state is established -- either via\n * a `seed` value (second argument), or from the first value from the source.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation state after each update</span>\n *\n * ![](scan.png)\n *\n * This operator maintains an internal state and emits it after processing each value as follows:\n *\n * 1. First value arrives\n *   - If a `seed` value was supplied (as the second argument to `scan`), let `state = seed` and `value = firstValue`.\n *   - If NO `seed` value was supplied (no second argument), let `state = firstValue` and go to 3.\n * 2. Let `state = accumulator(state, value)`.\n *   - If an error is thrown by `accumulator`, notify the consumer of an error. The process ends.\n * 3. Emit `state`.\n * 4. Next value arrives, let `value = nextValue`, go to 2.\n *\n * ## Examples\n *\n * An average of previous numbers. This example shows how\n * not providing a `seed` can prime the stream with the\n * first value from the source.\n *\n * ```ts\n * import { of, scan, map } from 'rxjs';\n *\n * const numbers$ = of(1, 2, 3);\n *\n * numbers$\n *   .pipe(\n *     // Get the sum of the numbers coming in.\n *     scan((total, n) => total + n),\n *     // Get the average by dividing the sum by the total number\n *     // received so far (which is 1 more than the zero-based index).\n *     map((sum, index) => sum / (index + 1))\n *   )\n *   .subscribe(console.log);\n * ```\n *\n * The Fibonacci sequence. This example shows how you can use\n * a seed to prime accumulation process. Also... you know... Fibonacci.\n * So important to like, computers and stuff that its whiteboarded\n * in job interviews. Now you can show them the Rx version! (Please don't, haha)\n *\n * ```ts\n * import { interval, scan, map, startWith } from 'rxjs';\n *\n * const firstTwoFibs = [0, 1];\n * // An endless stream of Fibonacci numbers.\n * const fibonacci$ = interval(1000).pipe(\n *   // Scan to get the fibonacci numbers (after 0, 1)\n *   scan(([a, b]) => [b, a + b], firstTwoFibs),\n *   // Get the second number in the tuple, it's the one you calculated\n *   map(([, n]) => n),\n *   // Start with our first two digits :)\n *   startWith(...firstTwoFibs)\n * );\n *\n * fibonacci$.subscribe(console.log);\n * ```\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n * @see {@link switchScan}\n *\n * @param accumulator A \"reducer function\". This will be called for each value after an initial state is\n * acquired.\n * @param seed The initial state. If this is not provided, the first value from the source will\n * be used as the initial state, and emitted without going through the accumulator. All subsequent values\n * will be processed by the accumulator function. If this is provided, all values will go through\n * the accumulator function.\n * @return A function that returns an Observable of the accumulated values.\n */\nexport function scan<V, A, S>(accumulator: (acc: V | A | S, value: V, index: number) => A, seed?: S): OperatorFunction<V, V | A> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  return operate(scanInternals(accumulator, seed as S, arguments.length >= 2, true));\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubjectLike, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\n\nexport interface ShareConfig<T> {\n  /**\n   * The factory used to create the subject that will connect the source observable to\n   * multicast consumers.\n   */\n  connector?: () => SubjectLike<T>;\n  /**\n   * If `true`, the resulting observable will reset internal state on error from source and return to a \"cold\" state. This\n   * allows the resulting observable to be \"retried\" in the event of an error.\n   * If `false`, when an error comes from the source it will push the error into the connecting subject, and the subject\n   * will remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent retries\n   * or resubscriptions will resubscribe to that same subject. In all cases, RxJS subjects will emit the same error again, however\n   * {@link ReplaySubject} will also push its buffered values before pushing the error.\n   * It is also possible to pass a notifier factory returning an `ObservableInput` instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnError?: boolean | ((error: any) => ObservableInput<any>);\n  /**\n   * If `true`, the resulting observable will reset internal state on completion from source and return to a \"cold\" state. This\n   * allows the resulting observable to be \"repeated\" after it is done.\n   * If `false`, when the source completes, it will push the completion through the connecting subject, and the subject\n   * will remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent repeats\n   * or resubscriptions will resubscribe to that same subject.\n   * It is also possible to pass a notifier factory returning an `ObservableInput` instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnComplete?: boolean | (() => ObservableInput<any>);\n  /**\n   * If `true`, when the number of subscribers to the resulting observable reaches zero due to those subscribers unsubscribing, the\n   * internal state will be reset and the resulting observable will return to a \"cold\" state. This means that the next\n   * time the resulting observable is subscribed to, a new subject will be created and the source will be subscribed to\n   * again.\n   * If `false`, when the number of subscribers to the resulting observable reaches zero due to unsubscription, the subject\n   * will remain connected to the source, and new subscriptions to the result will be connected through that same subject.\n   * It is also possible to pass a notifier factory returning an `ObservableInput` instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnRefCountZero?: boolean | (() => ObservableInput<any>);\n}\n\nexport function share<T>(): MonoTypeOperatorFunction<T>;\n\nexport function share<T>(options: ShareConfig<T>): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for `multicast(() => new Subject()), refCount()`.\n *\n * The subscription to the underlying source Observable can be reset (unsubscribe and resubscribe for new subscribers),\n * if the subscriber count to the shared observable drops to 0, or if the source Observable errors or completes. It is\n * possible to use notifier factories for the resets to allow for behaviors like conditional or delayed resets. Please\n * note that resetting on error or complete of the source Observable does not behave like a transparent retry or restart\n * of the source because the error or complete will be forwarded to all subscribers and their subscription will be\n * closed. Only new subscribers after a reset on error or complete happened will cause a fresh subscription to the\n * source. To achieve transparent retries or restarts pipe the source through appropriate operators before sharing.\n *\n * ![](share.png)\n *\n * ## Example\n *\n * Generate new multicast Observable from the `source` Observable value\n *\n * ```ts\n * import { interval, tap, map, take, share } from 'rxjs';\n *\n * const source = interval(1000).pipe(\n *   tap(x => console.log('Processing: ', x)),\n *   map(x => x * x),\n *   take(6),\n *   share()\n * );\n *\n * source.subscribe(x => console.log('subscription 1: ', x));\n * source.subscribe(x => console.log('subscription 2: ', x));\n *\n * // Logs:\n * // Processing: 0\n * // subscription 1: 0\n * // subscription 2: 0\n * // Processing: 1\n * // subscription 1: 1\n * // subscription 2: 1\n * // Processing: 2\n * // subscription 1: 4\n * // subscription 2: 4\n * // Processing: 3\n * // subscription 1: 9\n * // subscription 2: 9\n * // Processing: 4\n * // subscription 1: 16\n * // subscription 2: 16\n * // Processing: 5\n * // subscription 1: 25\n * // subscription 2: 25\n * ```\n *\n * ## Example with notifier factory: Delayed reset\n *\n * ```ts\n * import { interval, take, share, timer } from 'rxjs';\n *\n * const source = interval(1000).pipe(\n *   take(3),\n *   share({\n *     resetOnRefCountZero: () => timer(1000)\n *   })\n * );\n *\n * const subscriptionOne = source.subscribe(x => console.log('subscription 1: ', x));\n * setTimeout(() => subscriptionOne.unsubscribe(), 1300);\n *\n * setTimeout(() => source.subscribe(x => console.log('subscription 2: ', x)), 1700);\n *\n * setTimeout(() => source.subscribe(x => console.log('subscription 3: ', x)), 5000);\n *\n * // Logs:\n * // subscription 1:  0\n * // (subscription 1 unsubscribes here)\n * // (subscription 2 subscribes here ~400ms later, source was not reset)\n * // subscription 2:  1\n * // subscription 2:  2\n * // (subscription 2 unsubscribes here)\n * // (subscription 3 subscribes here ~2000ms later, source did reset before)\n * // subscription 3:  0\n * // subscription 3:  1\n * // subscription 3:  2\n * ```\n *\n * @see {@link shareReplay}\n *\n * @return A function that returns an Observable that mirrors the source.\n */\nexport function share<T>(options: ShareConfig<T> = {}): MonoTypeOperatorFunction<T> {\n  const { connector = () => new Subject<T>(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n  // It's necessary to use a wrapper here, as the _operator_ must be\n  // referentially transparent. Otherwise, it cannot be used in calls to the\n  // static `pipe` function - to create a partial pipeline.\n  //\n  // The _operator function_ - the function returned by the _operator_ - will\n  // not be referentially transparent - as it shares its source - but the\n  // _operator function_ is called when the complete pipeline is composed via a\n  // call to a source observable's `pipe` method - not when the static `pipe`\n  // function is called.\n  return (wrapperSource) => {\n    let connection: SafeSubscriber<T> | undefined;\n    let resetConnection: Subscription | undefined;\n    let subject: SubjectLike<T> | undefined;\n    let refCount = 0;\n    let hasCompleted = false;\n    let hasErrored = false;\n\n    const cancelReset = () => {\n      resetConnection?.unsubscribe();\n      resetConnection = undefined;\n    };\n    // Used to reset the internal state to a \"cold\"\n    // state, as though it had never been subscribed to.\n    const reset = () => {\n      cancelReset();\n      connection = subject = undefined;\n      hasCompleted = hasErrored = false;\n    };\n    const resetAndUnsubscribe = () => {\n      // We need to capture the connection before\n      // we reset (if we need to reset).\n      const conn = connection;\n      reset();\n      conn?.unsubscribe();\n    };\n\n    return operate<T, T>((source, subscriber) => {\n      refCount++;\n      if (!hasErrored && !hasCompleted) {\n        cancelReset();\n      }\n\n      // Create the subject if we don't have one yet. Grab a local reference to\n      // it as well, which avoids non-null assertions when using it and, if we\n      // connect to it now, then error/complete need a reference after it was\n      // reset.\n      const dest = (subject = subject ?? connector());\n\n      // Add the finalization directly to the subscriber - instead of returning it -\n      // so that the handling of the subscriber's unsubscription will be wired\n      // up _before_ the subscription to the source occurs. This is done so that\n      // the assignment to the source connection's `closed` property will be seen\n      // by synchronous firehose sources.\n      subscriber.add(() => {\n        refCount--;\n\n        // If we're resetting on refCount === 0, and it's 0, we only want to do\n        // that on \"unsubscribe\", really. Resetting on error or completion is a different\n        // configuration.\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n        }\n      });\n\n      // The following line adds the subscription to the subscriber passed.\n      // Basically, `subscriber === dest.subscribe(subscriber)` is `true`.\n      dest.subscribe(subscriber);\n\n      if (\n        !connection &&\n        // Check this shareReplay is still activate - it can be reset to 0\n        // and be \"unsubscribed\" _before_ it actually subscribes.\n        // If we were to subscribe then, it'd leak and get stuck.\n        refCount > 0\n      ) {\n        // We need to create a subscriber here - rather than pass an observer and\n        // assign the returned subscription to connection - because it's possible\n        // for reentrant subscriptions to the shared observable to occur and in\n        // those situations we want connection to be already-assigned so that we\n        // don't create another connection to the source.\n        connection = new SafeSubscriber({\n          next: (value) => dest.next(value),\n          error: (err) => {\n            hasErrored = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnError, err);\n            dest.error(err);\n          },\n          complete: () => {\n            hasCompleted = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnComplete);\n            dest.complete();\n          },\n        });\n        innerFrom(source).subscribe(connection);\n      }\n    })(wrapperSource);\n  };\n}\n\nfunction handleReset<T extends unknown[] = never[]>(\n  reset: () => void,\n  on: boolean | ((...args: T) => ObservableInput<any>),\n  ...args: T\n): Subscription | undefined {\n  if (on === true) {\n    reset();\n    return;\n  }\n\n  if (on === false) {\n    return;\n  }\n\n  const onSubscriber = new SafeSubscriber({\n    next: () => {\n      onSubscriber.unsubscribe();\n      reset();\n    },\n  });\n\n  return innerFrom(on(...args)).subscribe(onSubscriber);\n}\n","import { ReplaySubject } from '../ReplaySubject';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { share } from './share';\n\nexport interface ShareReplayConfig {\n  bufferSize?: number;\n  windowTime?: number;\n  refCount: boolean;\n  scheduler?: SchedulerLike;\n}\n\nexport function shareReplay<T>(config: ShareReplayConfig): MonoTypeOperatorFunction<T>;\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n\n/**\n * Share source and replay specified number of emissions on subscription.\n *\n * This operator is a specialization of `replay` that connects to a source observable\n * and multicasts through a `ReplaySubject` constructed with the specified arguments.\n * A successfully completed source will stay cached in the `shareReplay`ed observable forever,\n * but an errored source can be retried.\n *\n * ## Why use `shareReplay`?\n *\n * You generally want to use `shareReplay` when you have side-effects or taxing computations\n * that you do not wish to be executed amongst multiple subscribers.\n * It may also be valuable in situations where you know you will have late subscribers to\n * a stream that need access to previously emitted values.\n * This ability to replay values on subscription is what differentiates {@link share} and `shareReplay`.\n *\n * ## Reference counting\n *\n * By default `shareReplay` will use `refCount` of false, meaning that it will _not_ unsubscribe the\n * source when the reference counter drops to zero, i.e. the inner `ReplaySubject` will _not_ be unsubscribed\n * (and potentially run for ever).\n * This is the default as it is expected that `shareReplay` is often used to keep around expensive to setup\n * observables which we want to keep running instead of having to do the expensive setup again.\n *\n * As of RXJS version 6.4.0 a new overload signature was added to allow for manual control over what\n * happens when the operators internal reference counter drops to zero.\n * If `refCount` is true, the source will be unsubscribed from once the reference count drops to zero, i.e.\n * the inner `ReplaySubject` will be unsubscribed. All new subscribers will receive value emissions from a\n * new `ReplaySubject` which in turn will cause a new subscription to the source observable.\n *\n * ## Examples\n *\n * Example with a third subscriber coming late to the party\n *\n * ```ts\n * import { interval, take, shareReplay } from 'rxjs';\n *\n * const shared$ = interval(2000).pipe(\n *   take(6),\n *   shareReplay(3)\n * );\n *\n * shared$.subscribe(x => console.log('sub A: ', x));\n * shared$.subscribe(y => console.log('sub B: ', y));\n *\n * setTimeout(() => {\n *   shared$.subscribe(y => console.log('sub C: ', y));\n * }, 11000);\n *\n * // Logs:\n * // (after ~2000 ms)\n * // sub A: 0\n * // sub B: 0\n * // (after ~4000 ms)\n * // sub A: 1\n * // sub B: 1\n * // (after ~6000 ms)\n * // sub A: 2\n * // sub B: 2\n * // (after ~8000 ms)\n * // sub A: 3\n * // sub B: 3\n * // (after ~10000 ms)\n * // sub A: 4\n * // sub B: 4\n * // (after ~11000 ms, sub C gets the last 3 values)\n * // sub C: 2\n * // sub C: 3\n * // sub C: 4\n * // (after ~12000 ms)\n * // sub A: 5\n * // sub B: 5\n * // sub C: 5\n * ```\n *\n * Example for `refCount` usage\n *\n * ```ts\n * import { Observable, tap, interval, shareReplay, take } from 'rxjs';\n *\n * const log = <T>(name: string, source: Observable<T>) => source.pipe(\n *   tap({\n *     subscribe: () => console.log(`${ name }: subscribed`),\n *     next: value => console.log(`${ name }: ${ value }`),\n *     complete: () => console.log(`${ name }: completed`),\n *     finalize: () => console.log(`${ name }: unsubscribed`)\n *   })\n * );\n *\n * const obs$ = log('source', interval(1000));\n *\n * const shared$ = log('shared', obs$.pipe(\n *   shareReplay({ bufferSize: 1, refCount: true }),\n *   take(2)\n * ));\n *\n * shared$.subscribe(x => console.log('sub A: ', x));\n * shared$.subscribe(y => console.log('sub B: ', y));\n *\n * // PRINTS:\n * // shared: subscribed <-- reference count = 1\n * // source: subscribed\n * // shared: subscribed <-- reference count = 2\n * // source: 0\n * // shared: 0\n * // sub A: 0\n * // shared: 0\n * // sub B: 0\n * // source: 1\n * // shared: 1\n * // sub A: 1\n * // shared: completed <-- take(2) completes the subscription for sub A\n * // shared: unsubscribed <-- reference count = 1\n * // shared: 1\n * // sub B: 1\n * // shared: completed <-- take(2) completes the subscription for sub B\n * // shared: unsubscribed <-- reference count = 0\n * // source: unsubscribed <-- replaySubject unsubscribes from source observable because the reference count dropped to 0 and refCount is true\n *\n * // In case of refCount being false, the unsubscribe is never called on the source and the source would keep on emitting, even if no subscribers\n * // are listening.\n * // source: 2\n * // source: 3\n * // source: 4\n * // ...\n * ```\n *\n * @see {@link publish}\n * @see {@link share}\n * @see {@link publishReplay}\n *\n * @param configOrBufferSize Maximum element count of the replay buffer or {@link ShareReplayConfig configuration}\n * object.\n * @param windowTime Maximum time length of the replay buffer in milliseconds.\n * @param scheduler Scheduler where connected observers within the selector function\n * will be invoked on.\n * @return A function that returns an Observable sequence that contains the\n * elements of a sequence produced by multicasting the source sequence within a\n * selector function.\n */\nexport function shareReplay<T>(\n  configOrBufferSize?: ShareReplayConfig | number,\n  windowTime?: number,\n  scheduler?: SchedulerLike\n): MonoTypeOperatorFunction<T> {\n  let bufferSize: number;\n  let refCount = false;\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    ({ bufferSize = Infinity, windowTime = Infinity, refCount = false, scheduler } = configOrBufferSize);\n  } else {\n    bufferSize = (configOrBufferSize ?? Infinity) as number;\n  }\n  return share<T>({\n    connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\n    resetOnError: true,\n    resetOnComplete: false,\n    resetOnRefCountZero: refCount,\n  });\n}\n","import { MonoTypeOperatorFunction } from '../types';\nimport { filter } from './filter';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * ![](skip.png)\n *\n * Skips the values until the sent notifications are equal or less than provided skip count. It raises\n * an error if skip count is equal or more than the actual number of emits and source raises an error.\n *\n * ## Example\n *\n * Skip the values before the emission\n *\n * ```ts\n * import { interval, skip } from 'rxjs';\n *\n * // emit every half second\n * const source = interval(500);\n * // skip the first 10 emitted values\n * const result = source.pipe(skip(10));\n *\n * result.subscribe(value => console.log(value));\n * // output: 10...11...12...13...\n * ```\n *\n * @see {@link last}\n * @see {@link skipWhile}\n * @see {@link skipUntil}\n * @see {@link skipLast}\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return A function that returns an Observable that skips the first `count`\n * values emitted by the source Observable.\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return filter((_, index) => count <= index);\n}\n","import { Subscriber } from '../Subscriber';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switchAll}.</span>\n *\n * ![](switchMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * ## Example\n *\n * Generate new Observable according to source Observable values\n *\n * ```ts\n * import { of, switchMap } from 'rxjs';\n *\n * const switched = of(1, 2, 3).pipe(switchMap(x => of(x, x ** 2, x ** 3)));\n * switched.subscribe(x => console.log(x));\n * // outputs\n * // 1\n * // 1\n * // 1\n * // 2\n * // 4\n * // 8\n * // 3\n * // 9\n * // 27\n * ```\n *\n * Restart an interval Observable on every click event\n *\n * ```ts\n * import { fromEvent, switchMap, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(switchMap(() => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchAll}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and taking\n * only the values from the most recently projected inner Observable.\n */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return operate((source, subscriber) => {\n    let innerSubscriber: Subscriber<ObservedValueOf<O>> | null = null;\n    let index = 0;\n    // Whether or not the source subscription has completed\n    let isComplete = false;\n\n    // We only complete the result if the source is complete AND we don't have an active inner subscription.\n    // This is called both when the source completes and when the inners complete.\n    const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          // Cancel the previous inner subscription if there was one\n          innerSubscriber?.unsubscribe();\n          let innerIndex = 0;\n          const outerIndex = index++;\n          // Start the next inner subscription\n          innerFrom(project(value, outerIndex)).subscribe(\n            (innerSubscriber = createOperatorSubscriber(\n              subscriber,\n              // When we get a new inner value, next it through. Note that this is\n              // handling the deprecate result selector here. This is because with this architecture\n              // it ends up being smaller than using the map operator.\n              (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue),\n              () => {\n                // The inner has completed. Null out the inner subscriber to\n                // free up memory and to signal that we have no inner subscription\n                // currently.\n                innerSubscriber = null!;\n                checkComplete();\n              }\n            ))\n          );\n        },\n        () => {\n          isComplete = true;\n          checkComplete();\n        }\n      )\n    );\n  });\n}\n","import { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * ![](takeUntil.png)\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * ## Example\n *\n * Tick every second until the first click happens\n *\n * ```ts\n * import { interval, fromEvent, takeUntil } from 'rxjs';\n *\n * const source = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = source.pipe(takeUntil(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return A function that returns an Observable that emits the values from the\n * source Observable until `notifier` emits its first value.\n */\nexport function takeUntil<T>(notifier: ObservableInput<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n    !subscriber.closed && source.subscribe(subscriber);\n  });\n}\n","import { OperatorFunction, MonoTypeOperatorFunction, TruthyTypesOf } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function takeWhile<T>(predicate: BooleanConstructor, inclusive: true): MonoTypeOperatorFunction<T>;\nexport function takeWhile<T>(predicate: BooleanConstructor, inclusive: false): OperatorFunction<T, TruthyTypesOf<T>>;\nexport function takeWhile<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\nexport function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S, inclusive: false): OperatorFunction<T, S>;\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean, inclusive?: boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * ![](takeWhile.png)\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * ## Example\n *\n * Emit click events only while the clientX property is greater than 200\n *\n * ```ts\n * import { fromEvent, takeWhile } from 'rxjs';\n *\n * const clicks = fromEvent<PointerEvent>(document, 'click');\n * const result = clicks.pipe(takeWhile(ev => ev.clientX > 200));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @param {boolean} inclusive When set to `true` the value that caused\n * `predicate` to return `false` will also be emitted.\n * @return A function that returns an Observable that emits values from the\n * source Observable so long as each value satisfies the condition defined by\n * the `predicate`, then completes.\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean, inclusive = false): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let index = 0;\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        const result = predicate(value, index++);\n        (result || inclusive) && subscriber.next(value);\n        !result && subscriber.complete();\n      })\n    );\n  });\n}\n","import { MonoTypeOperatorFunction, Observer } from '../types';\nimport { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\n\n/**\n * An extension to the {@link Observer} interface used only by the {@link tap} operator.\n *\n * It provides a useful set of callbacks a user can register to do side-effects in\n * cases other than what the usual {@link Observer} callbacks are\n * ({@link guide/glossary-and-semantics#next next},\n * {@link guide/glossary-and-semantics#error error} and/or\n * {@link guide/glossary-and-semantics#complete complete}).\n *\n * ## Example\n *\n * ```ts\n * import { fromEvent, switchMap, tap, interval, take } from 'rxjs';\n *\n * const source$ = fromEvent(document, 'click');\n * const result$ = source$.pipe(\n *   switchMap((_, i) => i % 2 === 0\n *     ? fromEvent(document, 'mousemove').pipe(\n *         tap({\n *           subscribe: () => console.log('Subscribed to the mouse move events after click #' + i),\n *           unsubscribe: () => console.log('Mouse move events #' + i + ' unsubscribed'),\n *           finalize: () => console.log('Mouse move events #' + i + ' finalized')\n *         })\n *       )\n *     : interval(1_000).pipe(\n *         take(5),\n *         tap({\n *           subscribe: () => console.log('Subscribed to the 1-second interval events after click #' + i),\n *           unsubscribe: () => console.log('1-second interval events #' + i + ' unsubscribed'),\n *           finalize: () => console.log('1-second interval events #' + i + ' finalized')\n *         })\n *       )\n *   )\n * );\n *\n * const subscription = result$.subscribe({\n *   next: console.log\n * });\n *\n * setTimeout(() => {\n *   console.log('Unsubscribe after 60 seconds');\n *   subscription.unsubscribe();\n * }, 60_000);\n * ```\n */\nexport interface TapObserver<T> extends Observer<T> {\n  /**\n   * The callback that `tap` operator invokes at the moment when the source Observable\n   * gets subscribed to.\n   */\n  subscribe: () => void;\n  /**\n   * The callback that `tap` operator invokes when an explicit\n   * {@link guide/glossary-and-semantics#unsubscription unsubscribe} happens. It won't get invoked on\n   * `error` or `complete` events.\n   */\n  unsubscribe: () => void;\n  /**\n   * The callback that `tap` operator invokes when any kind of\n   * {@link guide/glossary-and-semantics#finalization finalization} happens - either when\n   * the source Observable `error`s or `complete`s or when it gets explicitly unsubscribed\n   * by the user. There is no difference in using this callback or the {@link finalize}\n   * operator, but if you're already using `tap` operator, you can use this callback\n   * instead. You'd get the same result in either case.\n   */\n  finalize: () => void;\n}\nexport function tap<T>(observerOrNext?: Partial<TapObserver<T>> | ((value: T) => void)): MonoTypeOperatorFunction<T>;\n/** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\nexport function tap<T>(\n  next?: ((value: T) => void) | null,\n  error?: ((error: any) => void) | null,\n  complete?: (() => void) | null\n): MonoTypeOperatorFunction<T>;\n\n/**\n * Used to perform side-effects for notifications from the source observable\n *\n * <span class=\"informal\">Used when you want to affect outside state with a notification without altering the notification</span>\n *\n * ![](tap.png)\n *\n * Tap is designed to allow the developer a designated place to perform side effects. While you _could_ perform side-effects\n * inside of a `map` or a `mergeMap`, that would make their mapping functions impure, which isn't always a big deal, but will\n * make it so you can't do things like memoize those functions. The `tap` operator is designed solely for such side-effects to\n * help you remove side-effects from other operations.\n *\n * For any notification, next, error, or complete, `tap` will call the appropriate callback you have provided to it, via a function\n * reference, or a partial observer, then pass that notification down the stream.\n *\n * The observable returned by `tap` is an exact mirror of the source, with one exception: Any error that occurs -- synchronously -- in a handler\n * provided to `tap` will be emitted as an error from the returned observable.\n *\n * > Be careful! You can mutate objects as they pass through the `tap` operator's handlers.\n *\n * The most common use of `tap` is actually for debugging. You can place a `tap(console.log)` anywhere\n * in your observable `pipe`, log out the notifications as they are emitted by the source returned by the previous\n * operation.\n *\n * ## Examples\n *\n * Check a random number before it is handled. Below is an observable that will use a random number between 0 and 1,\n * and emit `'big'` or `'small'` depending on the size of that number. But we wanted to log what the original number\n * was, so we have added a `tap(console.log)`.\n *\n * ```ts\n * import { of, tap, map } from 'rxjs';\n *\n * of(Math.random()).pipe(\n *   tap(console.log),\n *   map(n => n > 0.5 ? 'big' : 'small')\n * ).subscribe(console.log);\n * ```\n *\n * Using `tap` to analyze a value and force an error. Below is an observable where in our system we only\n * want to emit numbers 3 or less we get from another source. We can force our observable to error\n * using `tap`.\n *\n * ```ts\n * import { of, tap } from 'rxjs';\n *\n * const source = of(1, 2, 3, 4, 5);\n *\n * source.pipe(\n *   tap(n => {\n *     if (n > 3) {\n *       throw new TypeError(`Value ${ n } is greater than 3`);\n *     }\n *   })\n * )\n * .subscribe({ next: console.log, error: err => console.log(err.message) });\n * ```\n *\n * We want to know when an observable completes before moving on to the next observable. The system\n * below will emit a random series of `'X'` characters from 3 different observables in sequence. The\n * only way we know when one observable completes and moves to the next one, in this case, is because\n * we have added a `tap` with the side effect of logging to console.\n *\n * ```ts\n * import { of, concatMap, interval, take, map, tap } from 'rxjs';\n *\n * of(1, 2, 3).pipe(\n *   concatMap(n => interval(1000).pipe(\n *     take(Math.round(Math.random() * 10)),\n *     map(() => 'X'),\n *     tap({ complete: () => console.log(`Done with ${ n }`) })\n *   ))\n * )\n * .subscribe(console.log);\n * ```\n *\n * @see {@link finalize}\n * @see {@link TapObserver}\n *\n * @param observerOrNext A next handler or partial observer\n * @param error An error handler\n * @param complete A completion handler\n * @return A function that returns an Observable identical to the source, but\n * runs the specified Observer or callback(s) for each item.\n */\nexport function tap<T>(\n  observerOrNext?: Partial<TapObserver<T>> | ((value: T) => void) | null,\n  error?: ((e: any) => void) | null,\n  complete?: (() => void) | null\n): MonoTypeOperatorFunction<T> {\n  // We have to check to see not only if next is a function,\n  // but if error or complete were passed. This is because someone\n  // could technically call tap like `tap(null, fn)` or `tap(null, null, fn)`.\n  const tapObserver =\n    isFunction(observerOrNext) || error || complete\n      ? // tslint:disable-next-line: no-object-literal-type-assertion\n        ({ next: observerOrNext as Exclude<typeof observerOrNext, Partial<TapObserver<T>>>, error, complete } as Partial<TapObserver<T>>)\n      : observerOrNext;\n\n  return tapObserver\n    ? operate((source, subscriber) => {\n        tapObserver.subscribe?.();\n        let isUnsub = true;\n        source.subscribe(\n          createOperatorSubscriber(\n            subscriber,\n            (value) => {\n              tapObserver.next?.(value);\n              subscriber.next(value);\n            },\n            () => {\n              isUnsub = false;\n              tapObserver.complete?.();\n              subscriber.complete();\n            },\n            (err) => {\n              isUnsub = false;\n              tapObserver.error?.(err);\n              subscriber.error(err);\n            },\n            () => {\n              if (isUnsub) {\n                tapObserver.unsubscribe?.();\n              }\n              tapObserver.finalize?.();\n            }\n          )\n        );\n      })\n    : // Tap was called with no valid tap observer or handler\n      // (e.g. `tap(null, null, null)` or `tap(null)` or `tap()`)\n      // so we're going to just mirror the source.\n      identity;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * A comparison function which can determine if two values are equal.\n */\nexport type ValueEqualityFn<T> = (a: T, b: T) => boolean;\n\n/**\n * The default equality function used for `signal` and `computed`, which uses referential equality.\n */\nexport function defaultEquals<T>(a: T, b: T) {\n  return Object.is(a, b);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n// Required as the signals library is in a separate package, so we need to explicitly ensure the\n// global `ngDevMode` type is defined.\ndeclare const ngDevMode: boolean | undefined;\n\n/**\n * The currently active consumer `ReactiveNode`, if running code in a reactive context.\n *\n * Change this via `setActiveConsumer`.\n */\nlet activeConsumer: ReactiveNode | null = null;\nlet inNotificationPhase = false;\n\ntype Version = number & {__brand: 'Version'};\n\n/**\n * Global epoch counter. Incremented whenever a source signal is set.\n */\nlet epoch: Version = 1 as Version;\n\n/**\n * Symbol used to tell `Signal`s apart from other functions.\n *\n * This can be used to auto-unwrap signals in various cases, or to auto-wrap non-signal values.\n */\nexport const SIGNAL = /* @__PURE__ */ Symbol('SIGNAL');\n\nexport function setActiveConsumer(consumer: ReactiveNode | null): ReactiveNode | null {\n  const prev = activeConsumer;\n  activeConsumer = consumer;\n  return prev;\n}\n\nexport function getActiveConsumer(): ReactiveNode | null {\n  return activeConsumer;\n}\n\nexport function isInNotificationPhase(): boolean {\n  return inNotificationPhase;\n}\n\nexport interface Reactive {\n  [SIGNAL]: ReactiveNode;\n}\n\nexport function isReactive(value: unknown): value is Reactive {\n  return (value as Partial<Reactive>)[SIGNAL] !== undefined;\n}\n\nexport const REACTIVE_NODE: ReactiveNode = {\n  version: 0 as Version,\n  lastCleanEpoch: 0 as Version,\n  dirty: false,\n  producerNode: undefined,\n  producerLastReadVersion: undefined,\n  producerIndexOfThis: undefined,\n  nextProducerIndex: 0,\n  liveConsumerNode: undefined,\n  liveConsumerIndexOfThis: undefined,\n  consumerAllowSignalWrites: false,\n  consumerIsAlwaysLive: false,\n  kind: 'unknown',\n  producerMustRecompute: () => false,\n  producerRecomputeValue: () => {},\n  consumerMarkedDirty: () => {},\n  consumerOnSignalRead: () => {},\n};\n\n/**\n * A producer and/or consumer which participates in the reactive graph.\n *\n * Producer `ReactiveNode`s which are accessed when a consumer `ReactiveNode` is the\n * `activeConsumer` are tracked as dependencies of that consumer.\n *\n * Certain consumers are also tracked as \"live\" consumers and create edges in the other direction,\n * from producer to consumer. These edges are used to propagate change notifications when a\n * producer's value is updated.\n *\n * A `ReactiveNode` may be both a producer and consumer.\n */\nexport interface ReactiveNode {\n  /**\n   * Version of the value that this node produces.\n   *\n   * This is incremented whenever a new value is produced by this node which is not equal to the\n   * previous value (by whatever definition of equality is in use).\n   */\n  version: Version;\n\n  /**\n   * Epoch at which this node is verified to be clean.\n   *\n   * This allows skipping of some polling operations in the case where no signals have been set\n   * since this node was last read.\n   */\n  lastCleanEpoch: Version;\n\n  /**\n   * Whether this node (in its consumer capacity) is dirty.\n   *\n   * Only live consumers become dirty, when receiving a change notification from a dependency\n   * producer.\n   */\n  dirty: boolean;\n\n  /**\n   * Producers which are dependencies of this consumer.\n   *\n   * Uses the same indices as the `producerLastReadVersion` and `producerIndexOfThis` arrays.\n   */\n  producerNode: ReactiveNode[] | undefined;\n\n  /**\n   * `Version` of the value last read by a given producer.\n   *\n   * Uses the same indices as the `producerNode` and `producerIndexOfThis` arrays.\n   */\n  producerLastReadVersion: Version[] | undefined;\n\n  /**\n   * Index of `this` (consumer) in each producer's `liveConsumers` array.\n   *\n   * This value is only meaningful if this node is live (`liveConsumers.length > 0`). Otherwise\n   * these indices are stale.\n   *\n   * Uses the same indices as the `producerNode` and `producerLastReadVersion` arrays.\n   */\n  producerIndexOfThis: number[] | undefined;\n\n  /**\n   * Index into the producer arrays that the next dependency of this node as a consumer will use.\n   *\n   * This index is zeroed before this node as a consumer begins executing. When a producer is read,\n   * it gets inserted into the producers arrays at this index. There may be an existing dependency\n   * in this location which may or may not match the incoming producer, depending on whether the\n   * same producers were read in the same order as the last computation.\n   */\n  nextProducerIndex: number;\n\n  /**\n   * Array of consumers of this producer that are \"live\" (they require push notifications).\n   *\n   * `liveConsumerNode.length` is effectively our reference count for this node.\n   */\n  liveConsumerNode: ReactiveNode[] | undefined;\n\n  /**\n   * Index of `this` (producer) in each consumer's `producerNode` array.\n   *\n   * Uses the same indices as the `liveConsumerNode` array.\n   */\n  liveConsumerIndexOfThis: number[] | undefined;\n\n  /**\n   * Whether writes to signals are allowed when this consumer is the `activeConsumer`.\n   *\n   * This is used to enforce guardrails such as preventing writes to writable signals in the\n   * computation function of computed signals, which is supposed to be pure.\n   */\n  consumerAllowSignalWrites: boolean;\n\n  readonly consumerIsAlwaysLive: boolean;\n\n  /**\n   * Tracks whether producers need to recompute their value independently of the reactive graph (for\n   * example, if no initial value has been computed).\n   */\n  producerMustRecompute(node: unknown): boolean;\n  producerRecomputeValue(node: unknown): void;\n  consumerMarkedDirty(node: unknown): void;\n\n  /**\n   * Called when a signal is read within this consumer.\n   */\n  consumerOnSignalRead(node: unknown): void;\n\n  /**\n   * A debug name for the reactive node. Used in Angular DevTools to identify the node.\n   */\n  debugName?: string;\n\n  /**\n   * Kind of node. Example: 'signal', 'computed', 'input', 'effect'.\n   *\n   * ReactiveNode has this as 'unknown' by default, but derived node types should override this to\n   * make available the kind of signal that particular instance of a ReactiveNode represents.\n   *\n   * Used in Angular DevTools to identify the kind of signal.\n   */\n  kind: string;\n}\n\ninterface ConsumerNode extends ReactiveNode {\n  producerNode: NonNullable<ReactiveNode['producerNode']>;\n  producerIndexOfThis: NonNullable<ReactiveNode['producerIndexOfThis']>;\n  producerLastReadVersion: NonNullable<ReactiveNode['producerLastReadVersion']>;\n}\n\ninterface ProducerNode extends ReactiveNode {\n  liveConsumerNode: NonNullable<ReactiveNode['liveConsumerNode']>;\n  liveConsumerIndexOfThis: NonNullable<ReactiveNode['liveConsumerIndexOfThis']>;\n}\n\n/**\n * Called by implementations when a producer's signal is read.\n */\nexport function producerAccessed(node: ReactiveNode): void {\n  if (inNotificationPhase) {\n    throw new Error(\n      typeof ngDevMode !== 'undefined' && ngDevMode\n        ? `Assertion error: signal read during notification phase`\n        : '',\n    );\n  }\n\n  if (activeConsumer === null) {\n    // Accessed outside of a reactive context, so nothing to record.\n    return;\n  }\n\n  activeConsumer.consumerOnSignalRead(node);\n\n  // This producer is the `idx`th dependency of `activeConsumer`.\n  const idx = activeConsumer.nextProducerIndex++;\n\n  assertConsumerNode(activeConsumer);\n\n  if (idx < activeConsumer.producerNode.length && activeConsumer.producerNode[idx] !== node) {\n    // There's been a change in producers since the last execution of `activeConsumer`.\n    // `activeConsumer.producerNode[idx]` holds a stale dependency which will be be removed and\n    // replaced with `this`.\n    //\n    // If `activeConsumer` isn't live, then this is a no-op, since we can replace the producer in\n    // `activeConsumer.producerNode` directly. However, if `activeConsumer` is live, then we need\n    // to remove it from the stale producer's `liveConsumer`s.\n    if (consumerIsLive(activeConsumer)) {\n      const staleProducer = activeConsumer.producerNode[idx];\n      producerRemoveLiveConsumerAtIndex(staleProducer, activeConsumer.producerIndexOfThis[idx]);\n\n      // At this point, the only record of `staleProducer` is the reference at\n      // `activeConsumer.producerNode[idx]` which will be overwritten below.\n    }\n  }\n\n  if (activeConsumer.producerNode[idx] !== node) {\n    // We're a new dependency of the consumer (at `idx`).\n    activeConsumer.producerNode[idx] = node;\n\n    // If the active consumer is live, then add it as a live consumer. If not, then use 0 as a\n    // placeholder value.\n    activeConsumer.producerIndexOfThis[idx] = consumerIsLive(activeConsumer)\n      ? producerAddLiveConsumer(node, activeConsumer, idx)\n      : 0;\n  }\n  activeConsumer.producerLastReadVersion[idx] = node.version;\n}\n\n/**\n * Increment the global epoch counter.\n *\n * Called by source producers (that is, not computeds) whenever their values change.\n */\nexport function producerIncrementEpoch(): void {\n  epoch++;\n}\n\n/**\n * Ensure this producer's `version` is up-to-date.\n */\nexport function producerUpdateValueVersion(node: ReactiveNode): void {\n  if (consumerIsLive(node) && !node.dirty) {\n    // A live consumer will be marked dirty by producers, so a clean state means that its version\n    // is guaranteed to be up-to-date.\n    return;\n  }\n\n  if (!node.dirty && node.lastCleanEpoch === epoch) {\n    // Even non-live consumers can skip polling if they previously found themselves to be clean at\n    // the current epoch, since their dependencies could not possibly have changed (such a change\n    // would've increased the epoch).\n    return;\n  }\n\n  if (!node.producerMustRecompute(node) && !consumerPollProducersForChange(node)) {\n    // None of our producers report a change since the last time they were read, so no\n    // recomputation of our value is necessary, and we can consider ourselves clean.\n    producerMarkClean(node);\n    return;\n  }\n\n  node.producerRecomputeValue(node);\n\n  // After recomputing the value, we're no longer dirty.\n  producerMarkClean(node);\n}\n\n/**\n * Propagate a dirty notification to live consumers of this producer.\n */\nexport function producerNotifyConsumers(node: ReactiveNode): void {\n  if (node.liveConsumerNode === undefined) {\n    return;\n  }\n\n  // Prevent signal reads when we're updating the graph\n  const prev = inNotificationPhase;\n  inNotificationPhase = true;\n  try {\n    for (const consumer of node.liveConsumerNode) {\n      if (!consumer.dirty) {\n        consumerMarkDirty(consumer);\n      }\n    }\n  } finally {\n    inNotificationPhase = prev;\n  }\n}\n\n/**\n * Whether this `ReactiveNode` in its producer capacity is currently allowed to initiate updates,\n * based on the current consumer context.\n */\nexport function producerUpdatesAllowed(): boolean {\n  return activeConsumer?.consumerAllowSignalWrites !== false;\n}\n\nexport function consumerMarkDirty(node: ReactiveNode): void {\n  node.dirty = true;\n  producerNotifyConsumers(node);\n  node.consumerMarkedDirty?.(node);\n}\n\nexport function producerMarkClean(node: ReactiveNode): void {\n  node.dirty = false;\n  node.lastCleanEpoch = epoch;\n}\n\n/**\n * Prepare this consumer to run a computation in its reactive context.\n *\n * Must be called by subclasses which represent reactive computations, before those computations\n * begin.\n */\nexport function consumerBeforeComputation(node: ReactiveNode | null): ReactiveNode | null {\n  node && (node.nextProducerIndex = 0);\n  return setActiveConsumer(node);\n}\n\n/**\n * Finalize this consumer's state after a reactive computation has run.\n *\n * Must be called by subclasses which represent reactive computations, after those computations\n * have finished.\n */\nexport function consumerAfterComputation(\n  node: ReactiveNode | null,\n  prevConsumer: ReactiveNode | null,\n): void {\n  setActiveConsumer(prevConsumer);\n\n  if (\n    !node ||\n    node.producerNode === undefined ||\n    node.producerIndexOfThis === undefined ||\n    node.producerLastReadVersion === undefined\n  ) {\n    return;\n  }\n\n  if (consumerIsLive(node)) {\n    // For live consumers, we need to remove the producer -> consumer edge for any stale producers\n    // which weren't dependencies after the recomputation.\n    for (let i = node.nextProducerIndex; i < node.producerNode.length; i++) {\n      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);\n    }\n  }\n\n  // Truncate the producer tracking arrays.\n  // Perf note: this is essentially truncating the length to `node.nextProducerIndex`, but\n  // benchmarking has shown that individual pop operations are faster.\n  while (node.producerNode.length > node.nextProducerIndex) {\n    node.producerNode.pop();\n    node.producerLastReadVersion.pop();\n    node.producerIndexOfThis.pop();\n  }\n}\n\n/**\n * Determine whether this consumer has any dependencies which have changed since the last time\n * they were read.\n */\nexport function consumerPollProducersForChange(node: ReactiveNode): boolean {\n  assertConsumerNode(node);\n\n  // Poll producers for change.\n  for (let i = 0; i < node.producerNode.length; i++) {\n    const producer = node.producerNode[i];\n    const seenVersion = node.producerLastReadVersion[i];\n\n    // First check the versions. A mismatch means that the producer's value is known to have\n    // changed since the last time we read it.\n    if (seenVersion !== producer.version) {\n      return true;\n    }\n\n    // The producer's version is the same as the last time we read it, but it might itself be\n    // stale. Force the producer to recompute its version (calculating a new value if necessary).\n    producerUpdateValueVersion(producer);\n\n    // Now when we do this check, `producer.version` is guaranteed to be up to date, so if the\n    // versions still match then it has not changed since the last time we read it.\n    if (seenVersion !== producer.version) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Disconnect this consumer from the graph.\n */\nexport function consumerDestroy(node: ReactiveNode): void {\n  assertConsumerNode(node);\n  if (consumerIsLive(node)) {\n    // Drop all connections from the graph to this node.\n    for (let i = 0; i < node.producerNode.length; i++) {\n      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);\n    }\n  }\n\n  // Truncate all the arrays to drop all connection from this node to the graph.\n  node.producerNode.length =\n    node.producerLastReadVersion.length =\n    node.producerIndexOfThis.length =\n      0;\n  if (node.liveConsumerNode) {\n    node.liveConsumerNode.length = node.liveConsumerIndexOfThis!.length = 0;\n  }\n}\n\n/**\n * Add `consumer` as a live consumer of this node.\n *\n * Note that this operation is potentially transitive. If this node becomes live, then it becomes\n * a live consumer of all of its current producers.\n */\nfunction producerAddLiveConsumer(\n  node: ReactiveNode,\n  consumer: ReactiveNode,\n  indexOfThis: number,\n): number {\n  assertProducerNode(node);\n  if (node.liveConsumerNode.length === 0 && isConsumerNode(node)) {\n    // When going from 0 to 1 live consumers, we become a live consumer to our producers.\n    for (let i = 0; i < node.producerNode.length; i++) {\n      node.producerIndexOfThis[i] = producerAddLiveConsumer(node.producerNode[i], node, i);\n    }\n  }\n  node.liveConsumerIndexOfThis.push(indexOfThis);\n  return node.liveConsumerNode.push(consumer) - 1;\n}\n\n/**\n * Remove the live consumer at `idx`.\n */\nfunction producerRemoveLiveConsumerAtIndex(node: ReactiveNode, idx: number): void {\n  assertProducerNode(node);\n\n  if (typeof ngDevMode !== 'undefined' && ngDevMode && idx >= node.liveConsumerNode.length) {\n    throw new Error(\n      `Assertion error: active consumer index ${idx} is out of bounds of ${node.liveConsumerNode.length} consumers)`,\n    );\n  }\n\n  if (node.liveConsumerNode.length === 1 && isConsumerNode(node)) {\n    // When removing the last live consumer, we will no longer be live. We need to remove\n    // ourselves from our producers' tracking (which may cause consumer-producers to lose\n    // liveness as well).\n    for (let i = 0; i < node.producerNode.length; i++) {\n      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);\n    }\n  }\n\n  // Move the last value of `liveConsumers` into `idx`. Note that if there's only a single\n  // live consumer, this is a no-op.\n  const lastIdx = node.liveConsumerNode.length - 1;\n  node.liveConsumerNode[idx] = node.liveConsumerNode[lastIdx];\n  node.liveConsumerIndexOfThis[idx] = node.liveConsumerIndexOfThis[lastIdx];\n\n  // Truncate the array.\n  node.liveConsumerNode.length--;\n  node.liveConsumerIndexOfThis.length--;\n\n  // If the index is still valid, then we need to fix the index pointer from the producer to this\n  // consumer, and update it from `lastIdx` to `idx` (accounting for the move above).\n  if (idx < node.liveConsumerNode.length) {\n    const idxProducer = node.liveConsumerIndexOfThis[idx];\n    const consumer = node.liveConsumerNode[idx];\n    assertConsumerNode(consumer);\n    consumer.producerIndexOfThis[idxProducer] = idx;\n  }\n}\n\nfunction consumerIsLive(node: ReactiveNode): boolean {\n  return node.consumerIsAlwaysLive || (node?.liveConsumerNode?.length ?? 0) > 0;\n}\n\nfunction assertConsumerNode(node: ReactiveNode): asserts node is ConsumerNode {\n  node.producerNode ??= [];\n  node.producerIndexOfThis ??= [];\n  node.producerLastReadVersion ??= [];\n}\n\nfunction assertProducerNode(node: ReactiveNode): asserts node is ProducerNode {\n  node.liveConsumerNode ??= [];\n  node.liveConsumerIndexOfThis ??= [];\n}\n\nfunction isConsumerNode(node: ReactiveNode): node is ConsumerNode {\n  return node.producerNode !== undefined;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {defaultEquals, ValueEqualityFn} from './equality';\nimport {\n  consumerAfterComputation,\n  consumerBeforeComputation,\n  producerAccessed,\n  producerUpdateValueVersion,\n  REACTIVE_NODE,\n  ReactiveNode,\n  setActiveConsumer,\n  SIGNAL,\n} from './graph';\n\n/**\n * A computation, which derives a value from a declarative reactive expression.\n *\n * `Computed`s are both producers and consumers of reactivity.\n */\nexport interface ComputedNode<T> extends ReactiveNode {\n  /**\n   * Current value of the computation, or one of the sentinel values above (`UNSET`, `COMPUTING`,\n   * `ERROR`).\n   */\n  value: T;\n\n  /**\n   * If `value` is `ERRORED`, the error caught from the last computation attempt which will\n   * be re-thrown.\n   */\n  error: unknown;\n\n  /**\n   * The computation function which will produce a new value.\n   */\n  computation: () => T;\n\n  equal: ValueEqualityFn<T>;\n}\n\nexport type ComputedGetter<T> = (() => T) & {\n  [SIGNAL]: ComputedNode<T>;\n};\n\n/**\n * Create a computed signal which derives a reactive value from an expression.\n */\nexport function createComputed<T>(\n  computation: () => T,\n  equal?: ValueEqualityFn<T>,\n): ComputedGetter<T> {\n  const node: ComputedNode<T> = Object.create(COMPUTED_NODE);\n  node.computation = computation;\n\n  if (equal !== undefined) {\n    node.equal = equal;\n  }\n\n  const computed = () => {\n    // Check if the value needs updating before returning it.\n    producerUpdateValueVersion(node);\n\n    // Record that someone looked at this signal.\n    producerAccessed(node);\n\n    if (node.value === ERRORED) {\n      throw node.error;\n    }\n\n    return node.value;\n  };\n  (computed as ComputedGetter<T>)[SIGNAL] = node;\n  return computed as unknown as ComputedGetter<T>;\n}\n\n/**\n * A dedicated symbol used before a computed value has been calculated for the first time.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nexport const UNSET: any = /* @__PURE__ */ Symbol('UNSET');\n\n/**\n * A dedicated symbol used in place of a computed signal value to indicate that a given computation\n * is in progress. Used to detect cycles in computation chains.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nexport const COMPUTING: any = /* @__PURE__ */ Symbol('COMPUTING');\n\n/**\n * A dedicated symbol used in place of a computed signal value to indicate that a given computation\n * failed. The thrown error is cached until the computation gets dirty again.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nexport const ERRORED: any = /* @__PURE__ */ Symbol('ERRORED');\n\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nconst COMPUTED_NODE = /* @__PURE__ */ (() => {\n  return {\n    ...REACTIVE_NODE,\n    value: UNSET,\n    dirty: true,\n    error: null,\n    equal: defaultEquals,\n    kind: 'computed',\n\n    producerMustRecompute(node: ComputedNode<unknown>): boolean {\n      // Force a recomputation if there's no current value, or if the current value is in the\n      // process of being calculated (which should throw an error).\n      return node.value === UNSET || node.value === COMPUTING;\n    },\n\n    producerRecomputeValue(node: ComputedNode<unknown>): void {\n      if (node.value === COMPUTING) {\n        // Our computation somehow led to a cyclic read of itself.\n        throw new Error('Detected cycle in computations.');\n      }\n\n      const oldValue = node.value;\n      node.value = COMPUTING;\n\n      const prevConsumer = consumerBeforeComputation(node);\n      let newValue: unknown;\n      let wasEqual = false;\n      try {\n        newValue = node.computation();\n        // We want to mark this node as errored if calling `equal` throws; however, we don't want\n        // to track any reactive reads inside `equal`.\n        setActiveConsumer(null);\n        wasEqual =\n          oldValue !== UNSET &&\n          oldValue !== ERRORED &&\n          newValue !== ERRORED &&\n          node.equal(oldValue, newValue);\n      } catch (err) {\n        newValue = ERRORED;\n        node.error = err;\n      } finally {\n        consumerAfterComputation(node, prevConsumer);\n      }\n\n      if (wasEqual) {\n        // No change to `valueVersion` - old and new values are\n        // semantically equivalent.\n        node.value = oldValue;\n        return;\n      }\n\n      node.value = newValue;\n      node.version++;\n    },\n  };\n})();\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport type {SignalNode} from './signal';\n\nfunction defaultThrowError(): never {\n  throw new Error();\n}\n\nlet throwInvalidWriteToSignalErrorFn: <T>(node: SignalNode<T>) => never = defaultThrowError;\n\nexport function throwInvalidWriteToSignalError<T>(node: SignalNode<T>) {\n  throwInvalidWriteToSignalErrorFn(node);\n}\n\nexport function setThrowInvalidWriteToSignalError(fn: <T>(node: SignalNode<T>) => never): void {\n  throwInvalidWriteToSignalErrorFn = fn;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {defaultEquals, ValueEqualityFn} from './equality';\nimport {throwInvalidWriteToSignalError} from './errors';\nimport {\n  producerAccessed,\n  producerIncrementEpoch,\n  producerNotifyConsumers,\n  producerUpdatesAllowed,\n  REACTIVE_NODE,\n  ReactiveNode,\n  SIGNAL,\n} from './graph';\n\n// Required as the signals library is in a separate package, so we need to explicitly ensure the\n// global `ngDevMode` type is defined.\ndeclare const ngDevMode: boolean | undefined;\n\n/**\n * If set, called after `WritableSignal`s are updated.\n *\n * This hook can be used to achieve various effects, such as running effects synchronously as part\n * of setting a signal.\n */\nlet postSignalSetFn: (() => void) | null = null;\n\nexport interface SignalNode<T> extends ReactiveNode {\n  value: T;\n  equal: ValueEqualityFn<T>;\n}\n\nexport type SignalBaseGetter<T> = (() => T) & {readonly [SIGNAL]: unknown};\n\n// Note: Closure *requires* this to be an `interface` and not a type, which is why the\n// `SignalBaseGetter` type exists to provide the correct shape.\nexport interface SignalGetter<T> extends SignalBaseGetter<T> {\n  readonly [SIGNAL]: SignalNode<T>;\n}\n\n/**\n * Create a `Signal` that can be set or updated directly.\n */\nexport function createSignal<T>(initialValue: T, equal?: ValueEqualityFn<T>): SignalGetter<T> {\n  const node: SignalNode<T> = Object.create(SIGNAL_NODE);\n  node.value = initialValue;\n  if (equal !== undefined) {\n    node.equal = equal;\n  }\n  const getter = (() => {\n    producerAccessed(node);\n    return node.value;\n  }) as SignalGetter<T>;\n  (getter as any)[SIGNAL] = node;\n  return getter;\n}\n\nexport function setPostSignalSetFn(fn: (() => void) | null): (() => void) | null {\n  const prev = postSignalSetFn;\n  postSignalSetFn = fn;\n  return prev;\n}\n\nexport function signalGetFn<T>(this: SignalNode<T>): T {\n  producerAccessed(this);\n  return this.value;\n}\n\nexport function signalSetFn<T>(node: SignalNode<T>, newValue: T) {\n  if (!producerUpdatesAllowed()) {\n    throwInvalidWriteToSignalError(node);\n  }\n\n  if (!node.equal(node.value, newValue)) {\n    node.value = newValue;\n    signalValueChanged(node);\n  }\n}\n\nexport function signalUpdateFn<T>(node: SignalNode<T>, updater: (value: T) => T): void {\n  if (!producerUpdatesAllowed()) {\n    throwInvalidWriteToSignalError(node);\n  }\n\n  signalSetFn(node, updater(node.value));\n}\n\nexport function runPostSignalSetFn(): void {\n  postSignalSetFn?.();\n}\n\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nexport const SIGNAL_NODE: SignalNode<unknown> = /* @__PURE__ */ (() => {\n  return {\n    ...REACTIVE_NODE,\n    equal: defaultEquals,\n    value: undefined,\n    kind: 'signal',\n  };\n})();\n\nfunction signalValueChanged<T>(node: SignalNode<T>): void {\n  node.version++;\n  producerIncrementEpoch();\n  producerNotifyConsumers(node);\n  postSignalSetFn?.();\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {setActiveConsumer} from './graph';\n\n/**\n * Execute an arbitrary function in a non-reactive (non-tracking) context. The executed function\n * can, optionally, return a value.\n */\nexport function untracked<T>(nonReactiveReadsFn: () => T): T {\n  const prevConsumer = setActiveConsumer(null);\n  // We are not trying to catch any particular errors here, just making sure that the consumers\n  // stack is restored in case of errors.\n  try {\n    return nonReactiveReadsFn();\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from './injection_token';\nimport {NotFound} from './not_found';\n\nexport interface Injector {\n  retrieve<T>(token: InjectionToken<T>, options?: unknown): T | NotFound;\n}\n\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n */\nlet _currentInjector: Injector | undefined | null = undefined;\n\nexport function getCurrentInjector(): Injector | undefined | null {\n  return _currentInjector;\n}\n\nexport function setCurrentInjector(\n  injector: Injector | null | undefined,\n): Injector | undefined | null {\n  const former = _currentInjector;\n  _currentInjector = injector;\n  return former;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Value returned if the key-value pair couldn't be found in the context\n * hierarchy.\n */\nexport const NOT_FOUND: unique symbol = Symbol('NotFound');\n\n/**\n * Error thrown when the key-value pair couldn't be found in the context\n * hierarchy. Context can be attached below.\n */\nexport class NotFoundError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n/**\n * Type guard for checking if an unknown value is a NotFound.\n */\nexport function isNotFound(e: unknown): e is NotFound {\n  return e === NOT_FOUND || e instanceof NotFoundError;\n}\n\n/**\n * Type union of NotFound and NotFoundError.\n */\nexport type NotFound = typeof NOT_FOUND | NotFoundError;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Base URL for the error details page.\n *\n * Keep this constant in sync across:\n *  - packages/compiler-cli/src/ngtsc/diagnostics/src/error_details_base_url.ts\n *  - packages/core/src/error_details_base_url.ts\n */\nexport const ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.dev/errors';\n\n/**\n * URL for the XSS security documentation.\n */\nexport const XSS_SECURITY_URL =\n  'https://angular.dev/best-practices/security#preventing-cross-site-scripting-xss';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ERROR_DETAILS_PAGE_BASE_URL} from './error_details_base_url';\n\n/**\n * The list of error codes used in runtime code of the `core` package.\n * Reserved error code range: 100-999.\n *\n * Note: the minus sign denotes the fact that a particular code has a detailed guide on\n * angular.io. This extra annotation is needed to avoid introducing a separate set to store\n * error codes which have guides, which might leak into runtime code.\n *\n * Full list of available error guides can be found at https://angular.dev/errors.\n *\n * Error code ranges per package:\n *  - core (this package): 100-999\n *  - forms: 1000-1999\n *  - common: 2000-2999\n *  - animations: 3000-3999\n *  - router: 4000-4999\n *  - platform-browser: 5000-5500\n */\nexport const enum RuntimeErrorCode {\n  // Change Detection Errors\n  EXPRESSION_CHANGED_AFTER_CHECKED = -100,\n  RECURSIVE_APPLICATION_REF_TICK = 101,\n  INFINITE_CHANGE_DETECTION = 103,\n\n  // Dependency Injection Errors\n  CYCLIC_DI_DEPENDENCY = -200,\n  PROVIDER_NOT_FOUND = -201,\n  INVALID_FACTORY_DEPENDENCY = 202,\n  MISSING_INJECTION_CONTEXT = -203,\n  INVALID_INJECTION_TOKEN = 204,\n  INJECTOR_ALREADY_DESTROYED = 205,\n  PROVIDER_IN_WRONG_CONTEXT = 207,\n  MISSING_INJECTION_TOKEN = 208,\n  INVALID_MULTI_PROVIDER = -209,\n  MISSING_DOCUMENT = 210,\n\n  // Template Errors\n  MULTIPLE_COMPONENTS_MATCH = -300,\n  EXPORT_NOT_FOUND = -301,\n  PIPE_NOT_FOUND = -302,\n  UNKNOWN_BINDING = 303,\n  UNKNOWN_ELEMENT = 304,\n  TEMPLATE_STRUCTURE_ERROR = 305,\n  INVALID_EVENT_BINDING = 306,\n  HOST_DIRECTIVE_UNRESOLVABLE = 307,\n  HOST_DIRECTIVE_NOT_STANDALONE = 308,\n  DUPLICATE_DIRECTIVE = 309,\n  HOST_DIRECTIVE_COMPONENT = 310,\n  HOST_DIRECTIVE_UNDEFINED_BINDING = 311,\n  HOST_DIRECTIVE_CONFLICTING_ALIAS = 312,\n  MULTIPLE_MATCHING_PIPES = 313,\n  UNINITIALIZED_LET_ACCESS = 314,\n\n  // Bootstrap Errors\n  MULTIPLE_PLATFORMS = 400,\n  PLATFORM_NOT_FOUND = 401,\n  MISSING_REQUIRED_INJECTABLE_IN_BOOTSTRAP = 402,\n  BOOTSTRAP_COMPONENTS_NOT_FOUND = -403,\n  PLATFORM_ALREADY_DESTROYED = 404,\n  ASYNC_INITIALIZERS_STILL_RUNNING = 405,\n  APPLICATION_REF_ALREADY_DESTROYED = 406,\n  RENDERER_NOT_FOUND = 407,\n  PROVIDED_BOTH_ZONE_AND_ZONELESS = 408,\n\n  // Hydration Errors\n  HYDRATION_NODE_MISMATCH = -500,\n  HYDRATION_MISSING_SIBLINGS = -501,\n  HYDRATION_MISSING_NODE = -502,\n  UNSUPPORTED_PROJECTION_DOM_NODES = -503,\n  INVALID_SKIP_HYDRATION_HOST = -504,\n  MISSING_HYDRATION_ANNOTATIONS = -505,\n  HYDRATION_STABLE_TIMEDOUT = -506,\n  MISSING_SSR_CONTENT_INTEGRITY_MARKER = -507,\n  MISCONFIGURED_INCREMENTAL_HYDRATION = 508,\n\n  // Signal Errors\n  SIGNAL_WRITE_FROM_ILLEGAL_CONTEXT = 600,\n  REQUIRE_SYNC_WITHOUT_SYNC_EMIT = 601,\n  ASSERTION_NOT_INSIDE_REACTIVE_CONTEXT = -602,\n\n  // Styling Errors\n\n  // Declarations Errors\n\n  // i18n Errors\n  INVALID_I18N_STRUCTURE = 700,\n  MISSING_LOCALE_DATA = 701,\n\n  // Defer errors (750-799 range)\n  DEFER_LOADING_FAILED = -750,\n\n  // standalone errors\n  IMPORT_PROVIDERS_FROM_STANDALONE = 800,\n\n  // JIT Compilation Errors\n  // Other\n  INVALID_DIFFER_INPUT = 900,\n  NO_SUPPORTING_DIFFER_FACTORY = 901,\n  VIEW_ALREADY_ATTACHED = 902,\n  INVALID_INHERITANCE = 903,\n  UNSAFE_VALUE_IN_RESOURCE_URL = 904,\n  UNSAFE_VALUE_IN_SCRIPT = 905,\n  MISSING_GENERATED_DEF = 906,\n  TYPE_IS_NOT_STANDALONE = 907,\n  MISSING_ZONEJS = 908,\n  UNEXPECTED_ZONE_STATE = 909,\n  UNSAFE_IFRAME_ATTRS = -910,\n  VIEW_ALREADY_DESTROYED = 911,\n  COMPONENT_ID_COLLISION = -912,\n  IMAGE_PERFORMANCE_WARNING = -913,\n  UNEXPECTED_ZONEJS_PRESENT_IN_ZONELESS_MODE = 914,\n\n  // Signal integration errors\n  REQUIRED_INPUT_NO_VALUE = -950,\n  REQUIRED_QUERY_NO_VALUE = -951,\n  REQUIRED_MODEL_NO_VALUE = 952,\n\n  // Output()\n  OUTPUT_REF_DESTROYED = 953,\n\n  // Repeater errors\n  LOOP_TRACK_DUPLICATE_KEYS = -955,\n  LOOP_TRACK_RECREATE = -956,\n\n  // Runtime dependency tracker errors\n  RUNTIME_DEPS_INVALID_IMPORTED_TYPE = 980,\n  RUNTIME_DEPS_ORPHAN_COMPONENT = 981,\n\n  // Upper bounds for core runtime errors is 999\n}\n\n/**\n * Class that represents a runtime error.\n * Formats and outputs the error message in a consistent way.\n *\n * Example:\n * ```ts\n *  throw new RuntimeError(\n *    RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,\n *    ngDevMode && 'Injector has already been destroyed.');\n * ```\n *\n * Note: the `message` argument contains a descriptive error message as a string in development\n * mode (when the `ngDevMode` is defined). In production mode (after tree-shaking pass), the\n * `message` argument becomes `false`, thus we account for it in the typings and the runtime\n * logic.\n */\nexport class RuntimeError<T extends number = RuntimeErrorCode> extends Error {\n  constructor(\n    public code: T,\n    message: null | false | string,\n  ) {\n    super(formatRuntimeError<T>(code, message));\n  }\n}\n\n/**\n * Called to format a runtime error.\n * See additional info on the `message` argument type in the `RuntimeError` class description.\n */\nexport function formatRuntimeError<T extends number = RuntimeErrorCode>(\n  code: T,\n  message: null | false | string,\n): string {\n  // Error code might be a negative number, which is a special marker that instructs the logic to\n  // generate a link to the error details page on angular.io.\n  // We also prepend `0` to non-compile-time errors.\n  const fullCode = `NG0${Math.abs(code)}`;\n\n  let errorMessage = `${fullCode}${message ? ': ' + message : ''}`;\n\n  if (ngDevMode && code < 0) {\n    const addPeriodSeparator = !errorMessage.match(/[.,;!?\\n]$/);\n    const separator = addPeriodSeparator ? '.' : '';\n    errorMessage = `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;\n  }\n  return errorMessage;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {SIGNAL_NODE, SignalNode, signalSetFn} from '@angular/core/primitives/signals';\n\nexport const REQUIRED_UNSET_VALUE = /* @__PURE__ */ Symbol('InputSignalNode#UNSET');\n\n/**\n * Reactive node type for an input signal. An input signal extends a signal.\n * There are special properties to enable transforms and required inputs.\n */\nexport interface InputSignalNode<T, TransformT> extends SignalNode<T> {\n  /**\n   * User-configured transform that will run whenever a new value is applied\n   * to the input signal node.\n   */\n  transformFn: ((value: TransformT) => T) | undefined;\n\n  /**\n   * Applies a new value to the input signal. Expects transforms to be run\n   * manually before.\n   *\n   * This function is called by the framework runtime code whenever a binding\n   * changes. The value can in practice be anything at runtime, but for typing\n   * purposes we assume it's a valid `T` value. Type-checking will enforce that.\n   */\n  applyValueToInputSignal<T, TransformT>(node: InputSignalNode<T, TransformT>, value: T): void;\n\n  /**\n   * A debug name for the input signal. Used in Angular DevTools to identify the signal.\n   */\n  debugName?: string;\n}\n\n// Note: Using an IIFE here to ensure that the spread assignment is not considered\n// a side-effect, ending up preserving `COMPUTED_NODE` and `REACTIVE_NODE`.\n// TODO: remove when https://github.com/evanw/esbuild/issues/3392 is resolved.\nexport const INPUT_SIGNAL_NODE: InputSignalNode<unknown, unknown> = /* @__PURE__ */ (() => {\n  return {\n    ...SIGNAL_NODE,\n    transformFn: undefined,\n\n    applyValueToInputSignal<T, TransformT>(node: InputSignalNode<T, TransformT>, value: T) {\n      signalSetFn(node, value);\n    },\n  };\n})();\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {producerAccessed, SIGNAL} from '@angular/core/primitives/signals';\n\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {Signal} from '../../render3/reactivity/api';\n\nimport {INPUT_SIGNAL_NODE, InputSignalNode, REQUIRED_UNSET_VALUE} from './input_signal_node';\n\n/**\n * @publicAPI\n *\n * Options for signal inputs.\n */\nexport interface InputOptions<T, TransformT> {\n  /** Optional public name for the input. By default, the class field name is used. */\n  alias?: string;\n  /**\n   * Optional transform that runs whenever a new value is bound. Can be used to\n   * transform the input value before the input is updated.\n   *\n   * The transform function can widen the type of the input. For example, consider\n   * an input for `disabled`. In practice, as the component author, you want to only\n   * deal with a boolean, but users may want to bind a string if they just use the\n   * attribute form to bind to the input via `<my-dir input>`. A transform can then\n   * handle such string values and convert them to `boolean`. See: {@link booleanAttribute}.\n   */\n  transform?: (v: TransformT) => T;\n\n  /**\n   * A debug name for the input signal. Used in Angular DevTools to identify the signal.\n   */\n  debugName?: string;\n}\n\n/**\n * Signal input options without the transform option.\n *\n * @publicAPI\n */\nexport type InputOptionsWithoutTransform<T> =\n  // Note: We still keep a notion of `transform` for auto-completion.\n  Omit<InputOptions<T, T>, 'transform'> & {transform?: undefined};\n/**\n * Signal input options with the transform option required.\n *\n * @publicAPI\n */\nexport type InputOptionsWithTransform<T, TransformT> = Required<\n  Pick<InputOptions<T, TransformT>, 'transform'>\n> &\n  InputOptions<T, TransformT>;\n\nexport const ɵINPUT_SIGNAL_BRAND_READ_TYPE = /* @__PURE__ */ Symbol();\nexport const ɵINPUT_SIGNAL_BRAND_WRITE_TYPE = /* @__PURE__ */ Symbol();\n\n/**\n * `InputSignalWithTransform` represents a special `Signal` for a\n * directive/component input with a `transform` function.\n *\n * Signal inputs with transforms capture an extra generic for their transform write\n * type. Transforms can expand the accepted bound values for an input while ensuring\n * value retrievals of the signal input are still matching the generic input type.\n *\n * ```ts\n * class MyDir {\n *   disabled = input(false, {\n *     transform: (v: string|boolean) => convertToBoolean(v),\n *   }); // InputSignalWithTransform<boolean, string|boolean>\n *\n *   click() {\n *     this.disabled() // always returns a `boolean`.\n *   }\n * }\n * ```\n *\n * @see {@link InputSignal} for additional information.\n *\n * @publicAPI\n */\nexport interface InputSignalWithTransform<T, TransformT> extends Signal<T> {\n  [SIGNAL]: InputSignalNode<T, TransformT>;\n  [ɵINPUT_SIGNAL_BRAND_READ_TYPE]: T;\n  [ɵINPUT_SIGNAL_BRAND_WRITE_TYPE]: TransformT;\n}\n\n/**\n * `InputSignal` represents a special `Signal` for a directive/component input.\n *\n * An input signal is similar to a non-writable signal except that it also\n * carries additional type-information for transforms, and that Angular internally\n * updates the signal whenever a new value is bound.\n *\n * @see {@link InputOptionsWithTransform} for inputs with transforms.\n *\n * @publicAPI\n */\nexport interface InputSignal<T> extends InputSignalWithTransform<T, T> {}\n\n/**\n * Creates an input signal.\n *\n * @param initialValue The initial value.\n *   Can be set to {@link REQUIRED_UNSET_VALUE} for required inputs.\n * @param options Additional options for the input. e.g. a transform, or an alias.\n */\nexport function createInputSignal<T, TransformT>(\n  initialValue: T,\n  options?: InputOptions<T, TransformT>,\n): InputSignalWithTransform<T, TransformT> {\n  const node: InputSignalNode<T, TransformT> = Object.create(INPUT_SIGNAL_NODE);\n\n  node.value = initialValue;\n\n  // Perf note: Always set `transformFn` here to ensure that `node` always\n  // has the same v8 class shape, allowing monomorphic reads on input signals.\n  node.transformFn = options?.transform;\n\n  function inputValueFn() {\n    // Record that someone looked at this signal.\n    producerAccessed(node);\n\n    if (node.value === REQUIRED_UNSET_VALUE) {\n      let message: string | null = null;\n      if (ngDevMode) {\n        const name = options?.debugName ?? options?.alias;\n        message = `Input${name ? ` \"${name}\"` : ''} is required but no value is available yet.`;\n      }\n      throw new RuntimeError(RuntimeErrorCode.REQUIRED_INPUT_NO_VALUE, message);\n    }\n\n    return node.value;\n  }\n\n  (inputValueFn as any)[SIGNAL] = node;\n\n  if (ngDevMode) {\n    inputValueFn.toString = () => `[Input Signal: ${inputValueFn()}]`;\n    node.debugName = options?.debugName;\n  }\n\n  return inputValueFn as InputSignalWithTransform<T, TransformT>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nexport function noSideEffects<T>(fn: () => T): T {\n  return {toString: fn}.toString() as unknown as T;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Type} from '../interface/type';\n\nimport {noSideEffects} from './closure';\n\n/**\n * An interface implemented by all Angular type decorators, which allows them to be used as\n * decorators as well as Angular syntax.\n *\n * ```ts\n * @ng.Component({...})\n * class MyClass {...}\n * ```\n *\n * @publicApi\n */\nexport interface TypeDecorator {\n  /**\n   * Invoke as decorator.\n   */\n  <T extends Type<any>>(type: T): T;\n\n  // Make TypeDecorator assignable to built-in ParameterDecorator type.\n  // ParameterDecorator is declared in lib.d.ts as a `declare type`\n  // so we cannot declare this interface as a subtype.\n  // see https://github.com/angular/angular/issues/3379#issuecomment-126169417\n  (target: Object, propertyKey?: string | symbol, parameterIndex?: number): void;\n  // Standard (non-experimental) Decorator signature that avoids direct usage of\n  // any TS 5.0+ specific types.\n  (target: unknown, context: unknown): void;\n}\n\nexport const ANNOTATIONS = '__annotations__';\nexport const PARAMETERS = '__parameters__';\nexport const PROP_METADATA = '__prop__metadata__';\n\n/**\n * @suppress {globalThis}\n */\nexport function makeDecorator<T>(\n  name: string,\n  props?: (...args: any[]) => any,\n  parentClass?: any,\n  additionalProcessing?: (type: Type<T>) => void,\n  typeFn?: (type: Type<T>, ...args: any[]) => void,\n): {new (...args: any[]): any; (...args: any[]): any; (...args: any[]): (cls: any) => any} {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n\n    function DecoratorFactory(\n      this: unknown | typeof DecoratorFactory,\n      ...args: any[]\n    ): (cls: Type<T>) => any {\n      if (this instanceof DecoratorFactory) {\n        metaCtor.call(this, ...args);\n        return this as typeof DecoratorFactory;\n      }\n\n      const annotationInstance = new (DecoratorFactory as any)(...args);\n      return function TypeDecorator(cls: Type<T>) {\n        if (typeFn) typeFn(cls, ...args);\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const annotations = cls.hasOwnProperty(ANNOTATIONS)\n          ? (cls as any)[ANNOTATIONS]\n          : (Object.defineProperty(cls, ANNOTATIONS, {value: []}) as any)[ANNOTATIONS];\n        annotations.push(annotationInstance);\n\n        if (additionalProcessing) additionalProcessing(cls);\n\n        return cls;\n      };\n    }\n\n    if (parentClass) {\n      DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n\n    DecoratorFactory.prototype.ngMetadataName = name;\n    (DecoratorFactory as any).annotationCls = DecoratorFactory;\n    return DecoratorFactory as any;\n  });\n}\n\nfunction makeMetadataCtor(props?: (...args: any[]) => any): any {\n  return function ctor(this: any, ...args: any[]) {\n    if (props) {\n      const values = props(...args);\n      for (const propName in values) {\n        this[propName] = values[propName];\n      }\n    }\n  };\n}\n\nexport function makeParamDecorator(\n  name: string,\n  props?: (...args: any[]) => any,\n  parentClass?: any,\n): any {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function ParamDecoratorFactory(\n      this: unknown | typeof ParamDecoratorFactory,\n      ...args: any[]\n    ): any {\n      if (this instanceof ParamDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n      const annotationInstance = new (<any>ParamDecoratorFactory)(...args);\n\n      (<any>ParamDecorator).annotation = annotationInstance;\n      return ParamDecorator;\n\n      function ParamDecorator(cls: any, unusedKey: any, index: number): any {\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const parameters = cls.hasOwnProperty(PARAMETERS)\n          ? (cls as any)[PARAMETERS]\n          : Object.defineProperty(cls, PARAMETERS, {value: []})[PARAMETERS];\n\n        // there might be gaps if some in between parameters do not have annotations.\n        // we pad with nulls.\n        while (parameters.length <= index) {\n          parameters.push(null);\n        }\n\n        (parameters[index] = parameters[index] || []).push(annotationInstance);\n        return cls;\n      }\n    }\n    if (parentClass) {\n      ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    (<any>ParamDecoratorFactory).annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n  });\n}\n\nexport function makePropDecorator(\n  name: string,\n  props?: (...args: any[]) => any,\n  parentClass?: any,\n  additionalProcessing?: (target: any, name: string, ...args: any[]) => void,\n): any {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n\n    function PropDecoratorFactory(\n      this: unknown | typeof PropDecoratorFactory,\n      ...args: any[]\n    ): any {\n      if (this instanceof PropDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n\n      const decoratorInstance = new (<any>PropDecoratorFactory)(...args);\n\n      function PropDecorator(target: any, name: string) {\n        // target is undefined with standard decorators. This case is not supported and will throw\n        // if this decorator is used in JIT mode with standard decorators.\n        if (target === undefined) {\n          throw new Error('Standard Angular field decorators are not supported in JIT mode.');\n        }\n\n        const constructor = target.constructor;\n        // Use of Object.defineProperty is important because it creates a non-enumerable property\n        // which prevents the property from being copied during subclassing.\n        const meta = constructor.hasOwnProperty(PROP_METADATA)\n          ? (constructor as any)[PROP_METADATA]\n          : Object.defineProperty(constructor, PROP_METADATA, {value: {}})[PROP_METADATA];\n        meta[name] = (meta.hasOwnProperty(name) && meta[name]) || [];\n        meta[name].unshift(decoratorInstance);\n\n        if (additionalProcessing) additionalProcessing(target, name, ...args);\n      }\n\n      return PropDecorator;\n    }\n\n    if (parentClass) {\n      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    (<any>PropDecoratorFactory).annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nconst _global: any = globalThis;\n\n/**\n * Attention: whenever providing a new value, be sure to add an\n * entry into the corresponding `....externs.js` file,\n * so that closure won't use that global for its purposes.\n */\nexport {_global as global};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport function getClosureSafeProperty<T>(objWithPropertyToExtract: T): string {\n  for (let key in objWithPropertyToExtract) {\n    if (objWithPropertyToExtract[key] === (getClosureSafeProperty as any)) {\n      return key;\n    }\n  }\n  throw Error('Could not find renamed property on target object.');\n}\n\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nexport function fillProperties(target: Record<string, unknown>, source: Record<string, unknown>) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport function stringify(token: any): string {\n  if (typeof token === 'string') {\n    return token;\n  }\n\n  if (Array.isArray(token)) {\n    return `[${token.map(stringify).join(', ')}]`;\n  }\n\n  if (token == null) {\n    return '' + token;\n  }\n\n  const name = token.overriddenName || token.name;\n  if (name) {\n    return `${name}`;\n  }\n\n  const result = token.toString();\n\n  if (result == null) {\n    return '' + result;\n  }\n\n  const newLineIndex = result.indexOf('\\n');\n  return newLineIndex >= 0 ? result.slice(0, newLineIndex) : result;\n}\n\n/**\n * Concatenates two strings with separator, allocating new strings only when necessary.\n *\n * @param before before string.\n * @param separator separator string.\n * @param after after string.\n * @returns concatenated string.\n */\nexport function concatStringsWithSpace(before: string | null, after: string | null): string {\n  if (!before) return after || '';\n  if (!after) return before;\n  return `${before} ${after}`;\n}\n\n/**\n * Ellipses the string in the middle when longer than the max length\n *\n * @param string\n * @param maxLength of the output string\n * @returns ellipsed string with ... in the middle\n */\nexport function truncateMiddle(str: string, maxLength = 100): string {\n  if (!str || maxLength < 1 || str.length <= maxLength) return str;\n  if (maxLength == 1) return str.substring(0, 1) + '...';\n\n  const halfLimit = Math.round(maxLength / 2);\n  return str.substring(0, halfLimit) + '...' + str.substring(str.length - halfLimit);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Type} from '../interface/type';\nimport {getClosureSafeProperty} from '../util/property';\nimport {stringify} from '../util/stringify';\n\n/**\n * An interface that a function passed into `forwardRef` has to implement.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * @publicApi\n */\nexport interface ForwardRefFn {\n  (): any;\n}\n\nconst __forward_ref__ = getClosureSafeProperty({__forward_ref__: getClosureSafeProperty});\n\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * `forwardRef` is also used to break circularities in standalone components imports.\n *\n * @usageNotes\n * ### Circular dependency example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n *\n * ### Circular standalone reference import example\n * ```angular-ts\n * @Component({\n *   standalone: true,\n *   imports: [ChildComponent],\n *   selector: 'app-parent',\n *   template: `<app-child [hideParent]=\"hideParent\"></app-child>`,\n * })\n * export class ParentComponent {\n *   @Input() hideParent: boolean;\n * }\n *\n *\n * @Component({\n *   standalone: true,\n *   imports: [CommonModule, forwardRef(() => ParentComponent)],\n *   selector: 'app-child',\n *   template: `<app-parent *ngIf=\"!hideParent\"></app-parent>`,\n * })\n * export class ChildComponent {\n *   @Input() hideParent: boolean;\n * }\n * ```\n *\n * @publicApi\n */\nexport function forwardRef(forwardRefFn: ForwardRefFn): Type<any> {\n  (<any>forwardRefFn).__forward_ref__ = forwardRef;\n  (<any>forwardRefFn).toString = function () {\n    return stringify(this());\n  };\n  return <Type<any>>(<any>forwardRefFn);\n}\n\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see {@link forwardRef}\n * @publicApi\n */\nexport function resolveForwardRef<T>(type: T): T {\n  return isForwardRef(type) ? type() : type;\n}\n\n/** Checks whether a function is wrapped by a `forwardRef`. */\nexport function isForwardRef(fn: any): fn is () => any {\n  return (\n    typeof fn === 'function' &&\n    fn.hasOwnProperty(__forward_ref__) &&\n    fn.__forward_ref__ === forwardRef\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n// The functions in this file verify that the assumptions we are making\n// about state in an instruction are correct before implementing any logic.\n// They are meant only to be called in dev mode as sanity checks.\n\nimport {getActiveConsumer} from '@angular/core/primitives/signals';\n\nimport {stringify} from './stringify';\n\nexport function assertNumber(actual: any, msg: string): asserts actual is number {\n  if (!(typeof actual === 'number')) {\n    throwError(msg, typeof actual, 'number', '===');\n  }\n}\n\nexport function assertNumberInRange(\n  actual: any,\n  minInclusive: number,\n  maxInclusive: number,\n): asserts actual is number {\n  assertNumber(actual, 'Expected a number');\n  assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');\n  assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');\n}\n\nexport function assertString(actual: any, msg: string): asserts actual is string {\n  if (!(typeof actual === 'string')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');\n  }\n}\n\nexport function assertFunction(actual: any, msg: string): asserts actual is Function {\n  if (!(typeof actual === 'function')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');\n  }\n}\n\nexport function assertEqual<T>(actual: T, expected: T, msg: string) {\n  if (!(actual == expected)) {\n    throwError(msg, actual, expected, '==');\n  }\n}\n\nexport function assertNotEqual<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual != expected)) {\n    throwError(msg, actual, expected, '!=');\n  }\n}\n\nexport function assertSame<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual === expected)) {\n    throwError(msg, actual, expected, '===');\n  }\n}\n\nexport function assertNotSame<T>(actual: T, expected: T, msg: string) {\n  if (!(actual !== expected)) {\n    throwError(msg, actual, expected, '!==');\n  }\n}\n\nexport function assertLessThan<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual < expected)) {\n    throwError(msg, actual, expected, '<');\n  }\n}\n\nexport function assertLessThanOrEqual<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual <= expected)) {\n    throwError(msg, actual, expected, '<=');\n  }\n}\n\nexport function assertGreaterThan<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual > expected)) {\n    throwError(msg, actual, expected, '>');\n  }\n}\n\nexport function assertGreaterThanOrEqual<T>(\n  actual: T,\n  expected: T,\n  msg: string,\n): asserts actual is T {\n  if (!(actual >= expected)) {\n    throwError(msg, actual, expected, '>=');\n  }\n}\n\nexport function assertNotDefined<T>(actual: T, msg: string) {\n  if (actual != null) {\n    throwError(msg, actual, null, '==');\n  }\n}\n\nexport function assertDefined<T>(actual: T | null | undefined, msg: string): asserts actual is T {\n  if (actual == null) {\n    throwError(msg, actual, null, '!=');\n  }\n}\n\nexport function throwError(msg: string): never;\nexport function throwError(msg: string, actual: any, expected: any, comparison: string): never;\nexport function throwError(msg: string, actual?: any, expected?: any, comparison?: string): never {\n  throw new Error(\n    `ASSERTION ERROR: ${msg}` +\n      (comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`),\n  );\n}\n\nexport function assertDomNode(node: any): asserts node is Node {\n  if (!(node instanceof Node)) {\n    throwError(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);\n  }\n}\n\nexport function assertElement(node: any): asserts node is Element {\n  if (!(node instanceof Element)) {\n    throwError(`The provided value must be an element but got ${stringify(node)}`);\n  }\n}\n\nexport function assertIndexInRange(arr: any[], index: number) {\n  assertDefined(arr, 'Array must be defined.');\n  const maxLen = arr.length;\n  if (index < 0 || index >= maxLen) {\n    throwError(`Index expected to be less than ${maxLen} but got ${index}`);\n  }\n}\n\nexport function assertOneOf(value: any, ...validValues: any[]) {\n  if (validValues.indexOf(value) !== -1) return true;\n  throwError(\n    `Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`,\n  );\n}\n\nexport function assertNotReactive(fn: string): void {\n  if (getActiveConsumer() !== null) {\n    throwError(`${fn}() should never be called in a reactive context.`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Type} from '../../interface/type';\nimport {getClosureSafeProperty} from '../../util/property';\n\nimport {\n  ClassProvider,\n  ConstructorProvider,\n  EnvironmentProviders,\n  ExistingProvider,\n  FactoryProvider,\n  StaticClassProvider,\n  ValueProvider,\n} from './provider';\n\n/**\n * Information about how a type or `InjectionToken` interfaces with the DI system.\n *\n * At a minimum, this includes a `factory` which defines how to create the given type `T`, possibly\n * requesting injection of other types if necessary.\n *\n * Optionally, a `providedIn` parameter specifies that the given type belongs to a particular\n * `Injector`, `NgModule`, or a special scope (e.g. `'root'`). A value of `null` indicates\n * that the injectable does not belong to any scope.\n *\n * @codeGenApi\n * @publicApi The ViewEngine compiler emits code with this type for injectables. This code is\n *   deployed to npm, and should be treated as public api.\n\n */\nexport interface ɵɵInjectableDeclaration<T> {\n  /**\n   * Specifies that the given type belongs to a particular injector:\n   * - `InjectorType` such as `NgModule`,\n   * - `'root'` the root injector\n   * - `'any'` all injectors.\n   * - `null`, does not belong to any injector. Must be explicitly listed in the injector\n   *   `providers`.\n   */\n  providedIn: InjectorType<any> | 'root' | 'platform' | 'any' | 'environment' | null;\n\n  /**\n   * The token to which this definition belongs.\n   *\n   * Note that this may not be the same as the type that the `factory` will create.\n   */\n  token: unknown;\n\n  /**\n   * Factory method to execute to create an instance of the injectable.\n   */\n  factory: (t?: Type<any>) => T;\n\n  /**\n   * In a case of no explicit injector, a location where the instance of the injectable is stored.\n   */\n  value: T | undefined;\n}\n\n/**\n * Information about the providers to be included in an `Injector` as well as how the given type\n * which carries the information should be created by the DI system.\n *\n * An `InjectorDef` can import other types which have `InjectorDefs`, forming a deep nested\n * structure of providers with a defined priority (identically to how `NgModule`s also have\n * an import/dependency structure).\n *\n * NOTE: This is a private type and should not be exported\n *\n * @codeGenApi\n */\nexport interface ɵɵInjectorDef<T> {\n  // TODO(alxhub): Narrow down the type here once decorators properly change the return type of the\n  // class they are decorating (to add the ɵprov property for example).\n  providers: (\n    | Type<any>\n    | ValueProvider\n    | ExistingProvider\n    | FactoryProvider\n    | ConstructorProvider\n    | StaticClassProvider\n    | ClassProvider\n    | EnvironmentProviders\n    | any[]\n  )[];\n\n  imports: (InjectorType<any> | InjectorTypeWithProviders<any>)[];\n}\n\n/**\n * A `Type` which has a `ɵprov: ɵɵInjectableDeclaration` static field.\n *\n * `InjectableType`s contain their own Dependency Injection metadata and are usable in an\n * `InjectorDef`-based `StaticInjector`.\n *\n * @publicApi\n */\nexport interface InjectableType<T> extends Type<T> {\n  /**\n   * Opaque type whose structure is highly version dependent. Do not rely on any properties.\n   */\n  ɵprov: unknown;\n}\n\n/**\n * A type which has an `InjectorDef` static field.\n *\n * `InjectorTypes` can be used to configure a `StaticInjector`.\n *\n * This is an opaque type whose structure is highly version dependent. Do not rely on any\n * properties.\n *\n * @publicApi\n */\nexport interface InjectorType<T> extends Type<T> {\n  ɵfac?: unknown;\n  ɵinj: unknown;\n}\n\n/**\n * Describes the `InjectorDef` equivalent of a `ModuleWithProviders`, an `InjectorType` with an\n * associated array of providers.\n *\n * Objects of this type can be listed in the imports section of an `InjectorDef`.\n *\n * NOTE: This is a private type and should not be exported\n */\nexport interface InjectorTypeWithProviders<T> {\n  ngModule: InjectorType<T>;\n  providers?: (\n    | Type<any>\n    | ValueProvider\n    | ExistingProvider\n    | FactoryProvider\n    | ConstructorProvider\n    | StaticClassProvider\n    | ClassProvider\n    | EnvironmentProviders\n    | any[]\n  )[];\n}\n\n/**\n * Construct an injectable definition which defines how a token will be constructed by the DI\n * system, and in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ɵprov` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call [`inject`](api/core/inject) to access the `Injector` and request injection\n * of dependencies.\n *\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\nexport function ɵɵdefineInjectable<T>(opts: {\n  token: unknown;\n  providedIn?: Type<any> | 'root' | 'platform' | 'any' | 'environment' | null;\n  factory: () => T;\n}): unknown {\n  return {\n    token: opts.token,\n    providedIn: (opts.providedIn as any) || null,\n    factory: opts.factory,\n    value: undefined,\n  } as ɵɵInjectableDeclaration<T>;\n}\n\n/**\n * @deprecated in v8, delete after v10. This API should be used only by generated code, and that\n * code should now use ɵɵdefineInjectable instead.\n * @publicApi\n */\nexport const defineInjectable = ɵɵdefineInjectable;\n\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has a `ɵprov` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @codeGenApi\n */\nexport function ɵɵdefineInjector(options: {providers?: any[]; imports?: any[]}): unknown {\n  return {providers: options.providers || [], imports: options.imports || []};\n}\n\n/**\n * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading\n * inherited value.\n *\n * @param type A type which may have its own (non-inherited) `ɵprov`.\n */\nexport function getInjectableDef<T>(type: any): ɵɵInjectableDeclaration<T> | null {\n  return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);\n}\n\nexport function isInjectable(type: any): boolean {\n  return getInjectableDef(type) !== null;\n}\n\n/**\n * Return definition only if it is defined directly on `type` and is not inherited from a base\n * class of `type`.\n */\nfunction getOwnDefinition<T>(type: any, field: string): ɵɵInjectableDeclaration<T> | null {\n  return type.hasOwnProperty(field) ? type[field] : null;\n}\n\n/**\n * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.\n *\n * @param type A type which may have `ɵprov`, via inheritance.\n *\n * @deprecated Will be removed in a future version of Angular, where an error will occur in the\n *     scenario if we find the `ɵprov` on an ancestor only.\n */\nexport function getInheritedInjectableDef<T>(type: any): ɵɵInjectableDeclaration<T> | null {\n  const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);\n\n  if (def) {\n    ngDevMode &&\n      console.warn(\n        `DEPRECATED: DI is instantiating a token \"${type.name}\" that inherits its @Injectable decorator but does not provide one itself.\\n` +\n          `This will become an error in a future version of Angular. Please add @Injectable() to the \"${type.name}\" class.`,\n      );\n    return def;\n  } else {\n    return null;\n  }\n}\n\n/**\n * Read the injector def type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have an injector def (`ɵinj`)\n */\nexport function getInjectorDef<T>(type: any): ɵɵInjectorDef<T> | null {\n  return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF))\n    ? (type as any)[NG_INJ_DEF]\n    : null;\n}\n\nexport const NG_PROV_DEF = getClosureSafeProperty({ɵprov: getClosureSafeProperty});\nexport const NG_INJ_DEF = getClosureSafeProperty({ɵinj: getClosureSafeProperty});\n\n// We need to keep these around so we can read off old defs if new defs are unavailable\nexport const NG_INJECTABLE_DEF = getClosureSafeProperty({ngInjectableDef: getClosureSafeProperty});\nexport const NG_INJECTOR_DEF = getClosureSafeProperty({ngInjectorDef: getClosureSafeProperty});\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Type} from '../interface/type';\nimport {assertLessThan} from '../util/assert';\n\nimport {ɵɵdefineInjectable} from './interface/defs';\n\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides an additional level of type safety.\n *\n * <div class=\"docs-alert docs-alert-helpful\">\n *\n * **Important Note**: Ensure that you use the same instance of the `InjectionToken` in both the\n * provider and the injection call. Creating a new instance of `InjectionToken` in different places,\n * even with the same description, will be treated as different tokens by Angular's DI system,\n * leading to a `NullInjectorError`.\n *\n * </div>\n *\n * {@example injection-token/src/main.ts region='InjectionToken'}\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the [`inject`](api/core/inject) function.\n * As you can see in the Tree-shakable InjectionToken example below.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule` (note:\n * this option is now deprecated). As mentioned above, `'root'` is the default value for\n * `providedIn`.\n *\n * The `providedIn: NgModule` and `providedIn: 'any'` options are deprecated.\n *\n * @usageNotes\n * ### Basic Examples\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n * @publicApi\n */\nexport class InjectionToken<T> {\n  /** @internal */\n  readonly ngMetadataName = 'InjectionToken';\n\n  readonly ɵprov: unknown;\n\n  /**\n   * @param _desc   Description for the token,\n   *                used only for debugging purposes,\n   *                it should but does not need to be unique\n   * @param options Options for the token's usage, as described above\n   */\n  constructor(\n    protected _desc: string,\n    options?: {\n      providedIn?: Type<any> | 'root' | 'platform' | 'any' | null;\n      factory: () => T;\n    },\n  ) {\n    this.ɵprov = undefined;\n    if (typeof options == 'number') {\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        assertLessThan(options, 0, 'Only negative numbers are supported here');\n      // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n      // See `InjectorMarkers`\n      (this as any).__NG_ELEMENT_ID__ = options;\n    } else if (options !== undefined) {\n      this.ɵprov = ɵɵdefineInjectable({\n        token: this,\n        providedIn: options.providedIn || 'root',\n        factory: options.factory,\n      });\n    }\n  }\n\n  /**\n   * @internal\n   */\n  get multi(): InjectionToken<Array<T>> {\n    return this as InjectionToken<Array<T>>;\n  }\n\n  toString(): string {\n    return `InjectionToken ${this._desc}`;\n  }\n}\n\nexport interface InjectableDefToken<T> extends InjectionToken<T> {\n  ɵprov: unknown;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Type} from '../../interface/type';\n\n/**\n * Configures the `Injector` to return a value for a token.\n * Base for `ValueProvider` decorator.\n *\n * @publicApi\n */\nexport interface ValueSansProvider {\n  /**\n   * The value to inject.\n   */\n  useValue: any;\n}\n\n/**\n * Configures the `Injector` to return a value for a token.\n * @see [Dependency Injection Guide](guide/di/dependency-injection.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ValueProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface ValueProvider extends ValueSansProvider {\n  /**\n   * An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.\n   */\n  provide: any;\n\n  /**\n   * When true, injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   */\n  multi?: boolean;\n}\n\n/**\n * Configures the `Injector` to return an instance of `useClass` for a token.\n * Base for `StaticClassProvider` decorator.\n *\n * @publicApi\n */\nexport interface StaticClassSansProvider {\n  /**\n   * An optional class to instantiate for the `token`. By default, the `provide`\n   * class is instantiated.\n   */\n  useClass: Type<any>;\n\n  /**\n   * A list of `token`s to be resolved by the injector. The list of values is then\n   * used as arguments to the `useClass` constructor.\n   */\n  deps: any[];\n}\n\n/**\n * Configures the `Injector` to return an instance of `useClass` for a token.\n * @see [Dependency Injection Guide](guide/di/dependency-injection.\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='StaticClassProvider'}\n *\n * Note that following two providers are not equal:\n *\n * {@example core/di/ts/provider_spec.ts region='StaticClassProviderDifference'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface StaticClassProvider extends StaticClassSansProvider {\n  /**\n   * An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.\n   */\n  provide: any;\n\n  /**\n   * When true, injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   */\n  multi?: boolean;\n}\n\n/**\n * Configures the `Injector` to return an instance of a token.\n *\n * @see [Dependency Injection Guide](guide/di/dependency-injection.\n *\n * @usageNotes\n *\n * ```ts\n * @Injectable(SomeModule, {deps: []})\n * class MyService {}\n * ```\n *\n * @publicApi\n */\nexport interface ConstructorSansProvider {\n  /**\n   * A list of `token`s to be resolved by the injector.\n   */\n  deps?: any[];\n}\n\n/**\n * Configures the `Injector` to return an instance of a token.\n *\n * @see [Dependency Injection Guide](guide/di/dependency-injection.\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface ConstructorProvider extends ConstructorSansProvider {\n  /**\n   * An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.\n   */\n  provide: Type<any>;\n\n  /**\n   * When true, injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   */\n  multi?: boolean;\n}\n\n/**\n * Configures the `Injector` to return a value of another `useExisting` token.\n *\n * @see {@link ExistingProvider}\n * @see [Dependency Injection Guide](guide/di/dependency-injection.\n *\n * @publicApi\n */\nexport interface ExistingSansProvider {\n  /**\n   * Existing `token` to return. (Equivalent to `injector.get(useExisting)`)\n   */\n  useExisting: any;\n}\n\n/**\n * Configures the `Injector` to return a value of another `useExisting` token.\n *\n * @see [Dependency Injection Guide](guide/di/dependency-injection.\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='ExistingProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface ExistingProvider extends ExistingSansProvider {\n  /**\n   * An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.\n   */\n  provide: any;\n\n  /**\n   * When true, injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   */\n  multi?: boolean;\n}\n\n/**\n * Configures the `Injector` to return a value by invoking a `useFactory` function.\n *\n * @see {@link FactoryProvider}\n * @see [Dependency Injection Guide](guide/di/dependency-injection.\n *\n * @publicApi\n */\nexport interface FactorySansProvider {\n  /**\n   * A function to invoke to create a value for this `token`. The function is invoked with\n   * resolved values of `token`s in the `deps` field.\n   */\n  useFactory: Function;\n\n  /**\n   * A list of `token`s to be resolved by the injector. The list of values is then\n   * used as arguments to the `useFactory` function.\n   */\n  deps?: any[];\n}\n\n/**\n * Configures the `Injector` to return a value by invoking a `useFactory` function.\n * @see [Dependency Injection Guide](guide/di/dependency-injection.\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='FactoryProvider'}\n *\n * Dependencies can also be marked as optional:\n *\n * {@example core/di/ts/provider_spec.ts region='FactoryProviderOptionalDeps'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface FactoryProvider extends FactorySansProvider {\n  /**\n   * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n   */\n  provide: any;\n\n  /**\n   * When true, injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   */\n  multi?: boolean;\n}\n\n/**\n * Describes how an `Injector` should be configured as static (that is, without reflection).\n * A static provider provides tokens to an injector for various types of dependencies.\n *\n * @see {@link Injector.create()}\n * @see [Dependency Injection Guide](guide/di/dependency-injection-providers).\n *\n * @publicApi\n */\nexport type StaticProvider =\n  | ValueProvider\n  | ExistingProvider\n  | StaticClassProvider\n  | ConstructorProvider\n  | FactoryProvider\n  | any[];\n\n/**\n * Configures the `Injector` to return an instance of `Type` when `Type' is used as the token.\n *\n * Create an instance by invoking the `new` operator and supplying additional arguments.\n * This form is a short form of `TypeProvider`;\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/di/dependency-injection.\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='TypeProvider'}\n *\n * @publicApi\n */\nexport interface TypeProvider extends Type<any> {}\n\n/**\n * Configures the `Injector` to return a value by invoking a `useClass` function.\n * Base for `ClassProvider` decorator.\n *\n * @see [Dependency Injection Guide](guide/di/dependency-injection.\n *\n * @publicApi\n */\nexport interface ClassSansProvider {\n  /**\n   * Class to instantiate for the `token`.\n   */\n  useClass: Type<any>;\n}\n\n/**\n * Configures the `Injector` to return an instance of `useClass` for a token.\n * @see [Dependency Injection Guide](guide/di/dependency-injection.\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='ClassProvider'}\n *\n * Note that following two providers are not equal:\n *\n * {@example core/di/ts/provider_spec.ts region='ClassProviderDifference'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface ClassProvider extends ClassSansProvider {\n  /**\n   * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n   */\n  provide: any;\n\n  /**\n   * When true, injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   */\n  multi?: boolean;\n}\n\n/**\n * Describes how the `Injector` should be configured.\n * @see [Dependency Injection Guide](guide/di/dependency-injection.\n *\n * @see {@link StaticProvider}\n *\n * @publicApi\n */\nexport type Provider =\n  | TypeProvider\n  | ValueProvider\n  | ClassProvider\n  | ConstructorProvider\n  | ExistingProvider\n  | FactoryProvider\n  | any[];\n\n/**\n * Encapsulated `Provider`s that are only accepted during creation of an `EnvironmentInjector` (e.g.\n * in an `NgModule`).\n *\n * Using this wrapper type prevents providers which are only designed to work in\n * application/environment injectors from being accidentally included in\n * `@Component.providers` and ending up in a component injector.\n *\n * This wrapper type prevents access to the `Provider`s inside.\n *\n * @see {@link makeEnvironmentProviders}\n * @see {@link importProvidersFrom}\n *\n * @publicApi\n */\nexport type EnvironmentProviders = {\n  ɵbrand: 'EnvironmentProviders';\n};\n\nexport interface InternalEnvironmentProviders extends EnvironmentProviders {\n  ɵproviders: (Provider | EnvironmentProviders)[];\n\n  /**\n   * If present, indicates that the `EnvironmentProviders` were derived from NgModule providers.\n   *\n   * This is used to produce clearer error messages.\n   */\n  ɵfromNgModule?: true;\n}\n\nexport function isEnvironmentProviders(\n  value: Provider | EnvironmentProviders | InternalEnvironmentProviders,\n): value is InternalEnvironmentProviders {\n  return value && !!(value as InternalEnvironmentProviders).ɵproviders;\n}\n\n/**\n * Describes a function that is used to process provider lists (such as provider\n * overrides).\n */\nexport type ProcessProvidersFunction = (providers: Provider[]) => Provider[];\n\n/**\n * A wrapper around an NgModule that associates it with providers\n * Usage without a generic type is deprecated.\n *\n * @publicApi\n */\nexport interface ModuleWithProviders<T> {\n  ngModule: Type<T>;\n  providers?: Array<Provider | EnvironmentProviders>;\n}\n\n/**\n * Providers that were imported from NgModules via the `importProvidersFrom` function.\n *\n * These providers are meant for use in an application injector (or other environment injectors) and\n * should not be used in component injectors.\n *\n * This type cannot be directly implemented. It's returned from the `importProvidersFrom` function\n * and serves to prevent the extracted NgModule providers from being used in the wrong contexts.\n *\n * @see {@link importProvidersFrom}\n *\n * @publicApi\n * @deprecated replaced by `EnvironmentProviders`\n */\nexport type ImportedNgModuleProviders = EnvironmentProviders;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {getClosureSafeProperty} from '../util/property';\n\nexport const NG_COMP_DEF = getClosureSafeProperty({ɵcmp: getClosureSafeProperty});\nexport const NG_DIR_DEF = getClosureSafeProperty({ɵdir: getClosureSafeProperty});\nexport const NG_PIPE_DEF = getClosureSafeProperty({ɵpipe: getClosureSafeProperty});\nexport const NG_MOD_DEF = getClosureSafeProperty({ɵmod: getClosureSafeProperty});\nexport const NG_FACTORY_DEF = getClosureSafeProperty({ɵfac: getClosureSafeProperty});\n\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\nexport const NG_ELEMENT_ID = getClosureSafeProperty({__NG_ELEMENT_ID__: getClosureSafeProperty});\n\n/**\n * The `NG_ENV_ID` field on a DI token indicates special processing in the `EnvironmentInjector`:\n * getting such tokens from the `EnvironmentInjector` will bypass the standard DI resolution\n * strategy and instead will return implementation produced by the `NG_ENV_ID` factory function.\n *\n * This particular retrieval of DI tokens is mostly done to eliminate circular dependencies and\n * improve tree-shaking.\n */\nexport const NG_ENV_ID = getClosureSafeProperty({__NG_ENV_ID__: getClosureSafeProperty});\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Type} from '../../interface/type';\nimport {NG_COMP_DEF} from '../fields';\n\n/**\n * Used for stringify render output in Ivy.\n * Important! This function is very performance-sensitive and we should\n * be extra careful not to introduce megamorphic reads in it.\n * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.\n */\nexport function renderStringify(value: any): string {\n  if (typeof value === 'string') return value;\n  if (value == null) return '';\n  // Use `String` so that it invokes the `toString` method of the value. Note that this\n  // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).\n  return String(value);\n}\n\n/**\n * Used to stringify a value so that it can be displayed in an error message.\n *\n * Important! This function contains a megamorphic read and should only be\n * used for error messages.\n */\nexport function stringifyForError(value: any): string {\n  if (typeof value === 'function') return value.name || value.toString();\n  if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n    return value.type.name || value.type.toString();\n  }\n\n  return renderStringify(value);\n}\n\n/**\n * Used to stringify a `Type` and including the file path and line number in which it is defined, if\n * possible, for better debugging experience.\n *\n * Important! This function contains a megamorphic read and should only be used for error messages.\n */\nexport function debugStringifyTypeForError(type: Type<any>): string {\n  // TODO(pmvald): Do some refactoring so that we can use getComponentDef here without creating\n  // circular deps.\n  let componentDef = (type as any)[NG_COMP_DEF] || null;\n  if (componentDef !== null && componentDef.debugInfo) {\n    return stringifyTypeFromDebugInfo(componentDef.debugInfo);\n  }\n\n  return stringifyForError(type);\n}\n\n// TODO(pmvald): Do some refactoring so that we can use the type ClassDebugInfo for the param\n// debugInfo here without creating circular deps.\nfunction stringifyTypeFromDebugInfo(debugInfo: any): string {\n  if (!debugInfo.filePath || !debugInfo.lineNumber) {\n    return debugInfo.className;\n  } else {\n    return `${debugInfo.className} (at ${debugInfo.filePath}:${debugInfo.lineNumber})`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport type {ProviderToken} from '../di';\nimport {isEnvironmentProviders} from '../di/interface/provider';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {Type} from '../interface/type';\nimport {stringify} from '../util/stringify';\n\nimport {stringifyForError} from './util/stringify_utils';\n\n/** Called when directives inject each other (creating a circular dependency) */\nexport function throwCyclicDependencyError(token: string, path?: string[]): never {\n  throw new RuntimeError(\n    RuntimeErrorCode.CYCLIC_DI_DEPENDENCY,\n    ngDevMode\n      ? `Circular dependency in DI detected for ${token}${path ? `. Dependency path: ${path.join(' > ')} > ${token}` : ''}`\n      : token,\n  );\n}\n\nexport function throwMixedMultiProviderError() {\n  throw new Error(`Cannot mix multi providers and regular providers`);\n}\n\nexport function throwInvalidProviderError(\n  ngModuleType?: Type<unknown>,\n  providers?: any[],\n  provider?: any,\n): never {\n  if (ngModuleType && providers) {\n    const providerDetail = providers.map((v) => (v == provider ? '?' + provider + '?' : '...'));\n    throw new Error(\n      `Invalid provider for the NgModule '${stringify(\n        ngModuleType,\n      )}' - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`,\n    );\n  } else if (isEnvironmentProviders(provider)) {\n    if (provider.ɵfromNgModule) {\n      throw new RuntimeError(\n        RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT,\n        `Invalid providers from 'importProvidersFrom' present in a non-environment injector. 'importProvidersFrom' can't be used for component providers.`,\n      );\n    } else {\n      throw new RuntimeError(\n        RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT,\n        `Invalid providers present in a non-environment injector. 'EnvironmentProviders' can't be used for component providers.`,\n      );\n    }\n  } else {\n    throw new Error('Invalid provider');\n  }\n}\n\n/** Throws an error when a token is not found in DI. */\nexport function throwProviderNotFoundError(\n  token: ProviderToken<unknown>,\n  injectorName?: string,\n): never {\n  const errorMessage =\n    ngDevMode &&\n    `No provider for ${stringifyForError(token)} found${injectorName ? ` in ${injectorName}` : ''}`;\n  throw new RuntimeError(RuntimeErrorCode.PROVIDER_NOT_FOUND, errorMessage);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Special flag indicating that a decorator is of type `Inject`. It's used to make `Inject`\n * decorator tree-shakable (so we don't have to rely on the `instanceof` checks).\n * Note: this flag is not included into the `InjectFlags` since it's an internal-only API.\n */\nexport const enum DecoratorFlags {\n  Inject = -1,\n}\n\n/**\n * Injection flags for DI.\n *\n * @publicApi\n * @deprecated use an options object for [`inject`](api/core/inject) instead.\n */\nexport enum InjectFlags {\n  // TODO(alxhub): make this 'const' (and remove `InternalInjectFlags` enum) when ngc no longer\n  // writes exports of it into ngfactory files.\n\n  /** Check self and check parent injector if needed */\n  Default = 0b0000,\n\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  Host = 0b0001,\n\n  /** Don't ascend to ancestors of the node requesting injection. */\n  Self = 0b0010,\n\n  /** Skip the node that is requesting injection. */\n  SkipSelf = 0b0100,\n\n  /** Inject `defaultValue` instead if token not found. */\n  Optional = 0b1000,\n}\n\n/**\n * This enum is an exact copy of the `InjectFlags` enum above, but the difference is that this is a\n * const enum, so actual enum values would be inlined in generated code. The `InjectFlags` enum can\n * be turned into a const enum when ViewEngine is removed (see TODO at the `InjectFlags` enum\n * above). The benefit of inlining is that we can use these flags at the top level without affecting\n * tree-shaking (see \"no-toplevel-property-access\" tslint rule for more info).\n * Keep this enum in sync with `InjectFlags` enum above.\n */\nexport const enum InternalInjectFlags {\n  /** Check self and check parent injector if needed */\n  Default = 0b0000,\n\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  Host = 0b0001,\n\n  /** Don't ascend to ancestors of the node requesting injection. */\n  Self = 0b0010,\n\n  /** Skip the node that is requesting injection. */\n  SkipSelf = 0b0100,\n\n  /** Inject `defaultValue` instead if token not found. */\n  Optional = 0b1000,\n\n  /**\n   * This token is being injected into a pipe.\n   *\n   * This flag is intentionally not in the public facing `InjectFlags` because it is only added by\n   * the compiler and is not a developer applicable flag.\n   */\n  ForPipe = 0b10000,\n}\n\n/**\n * Type of the options argument to [`inject`](api/core/inject).\n *\n * @publicApi\n */\nexport interface InjectOptions {\n  /**\n   * Use optional injection, and return `null` if the requested token is not found.\n   */\n  optional?: boolean;\n\n  /**\n   * Start injection at the parent of the current injector.\n   */\n  skipSelf?: boolean;\n\n  /**\n   * Only query the current injector for the token, and don't fall back to the parent injector if\n   * it's not found.\n   */\n  self?: boolean;\n\n  /**\n   * Stop injection at the host component's injector. Only relevant when injecting from an element\n   * injector, and a no-op for environment injectors.\n   */\n  host?: boolean;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {throwProviderNotFoundError} from '../render3/errors_di';\nimport {assertNotEqual} from '../util/assert';\nimport {stringify} from '../util/stringify';\n\nimport {getInjectableDef, ɵɵInjectableDeclaration} from './interface/defs';\nimport {InjectFlags} from './interface/injector';\nimport {ProviderToken} from './provider_token';\n\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n */\nlet _injectImplementation:\n  | (<T>(token: ProviderToken<T>, flags?: InjectFlags) => T | null)\n  | undefined;\nexport function getInjectImplementation() {\n  return _injectImplementation;\n}\n\n/**\n * Sets the current inject implementation.\n */\nexport function setInjectImplementation(\n  impl: (<T>(token: ProviderToken<T>, flags?: InjectFlags) => T | null) | undefined,\n): (<T>(token: ProviderToken<T>, flags?: InjectFlags) => T | null) | undefined {\n  const previous = _injectImplementation;\n  _injectImplementation = impl;\n  return previous;\n}\n\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * injectable definition.\n */\nexport function injectRootLimpMode<T>(\n  token: ProviderToken<T>,\n  notFoundValue: T | undefined,\n  flags: InjectFlags,\n): T | null {\n  const injectableDef: ɵɵInjectableDeclaration<T> | null = getInjectableDef(token);\n  if (injectableDef && injectableDef.providedIn == 'root') {\n    return injectableDef.value === undefined\n      ? (injectableDef.value = injectableDef.factory())\n      : injectableDef.value;\n  }\n  if (flags & InjectFlags.Optional) return null;\n  if (notFoundValue !== undefined) return notFoundValue;\n  throwProviderNotFoundError(token, 'Injector');\n}\n\n/**\n * Assert that `_injectImplementation` is not `fn`.\n *\n * This is useful, to prevent infinite recursion.\n *\n * @param fn Function which it should not equal to\n */\nexport function assertInjectImplementationNotEqual(\n  fn: <T>(token: ProviderToken<T>, flags?: InjectFlags) => T | null,\n) {\n  ngDevMode &&\n    assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport '../util/ng_dev_mode';\n\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {Type} from '../interface/type';\nimport {emitInjectEvent} from '../render3/debug/injector_profiler';\nimport {stringify} from '../util/stringify';\n\nimport {resolveForwardRef} from './forward_ref';\nimport {getInjectImplementation, injectRootLimpMode} from './inject_switch';\nimport type {Injector} from './injector';\nimport {\n  DecoratorFlags,\n  InjectFlags,\n  InjectOptions,\n  InternalInjectFlags,\n} from './interface/injector';\nimport {ProviderToken} from './provider_token';\nimport type {HostAttributeToken} from './host_attribute_token';\nimport {\n  Injector as PrimitivesInjector,\n  NotFound,\n  NOT_FOUND,\n  InjectionToken as PrimitivesInjectionToken,\n  getCurrentInjector,\n} from '@angular/core/primitives/di';\n\nconst _THROW_IF_NOT_FOUND = {};\nexport const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\nexport {getCurrentInjector, setCurrentInjector} from '@angular/core/primitives/di';\n\n/*\n * Name of a property (that we patch onto DI decorator), which is used as an annotation of which\n * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators\n * in the code, thus making them tree-shakable.\n */\nconst DI_DECORATOR_FLAG = '__NG_DI_FLAG__';\n\nexport class RetrievingInjector implements PrimitivesInjector {\n  constructor(readonly injector: Injector) {}\n  retrieve<T>(token: PrimitivesInjectionToken<T>, options: unknown): T | NotFound {\n    const ngOptions = options as InjectOptions;\n    return this.injector.get(token, ngOptions.optional ? NOT_FOUND : THROW_IF_NOT_FOUND, ngOptions);\n  }\n}\n\nexport const NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\nconst NG_TOKEN_PATH = 'ngTokenPath';\nconst NEW_LINE = /\\n/gm;\nconst NO_NEW_LINE = 'ɵ';\nexport const SOURCE = '__source';\n\nexport function injectInjectorOnly<T>(token: ProviderToken<T>): T;\nexport function injectInjectorOnly<T>(token: ProviderToken<T>, flags?: InjectFlags): T | null;\nexport function injectInjectorOnly<T>(\n  token: ProviderToken<T>,\n  flags = InjectFlags.Default,\n): T | null {\n  if (getCurrentInjector() === undefined) {\n    throw new RuntimeError(\n      RuntimeErrorCode.MISSING_INJECTION_CONTEXT,\n      ngDevMode &&\n        `The \\`${stringify(token)}\\` token injection failed. \\`inject()\\` function must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with \\`runInInjectionContext\\`.`,\n    );\n  } else if (getCurrentInjector() === null) {\n    return injectRootLimpMode(token, undefined, flags);\n  } else {\n    const currentInjector = getCurrentInjector();\n    let injector: Injector;\n    if (currentInjector instanceof RetrievingInjector) {\n      injector = currentInjector.injector;\n    } else {\n      injector = currentInjector as unknown as Injector;\n    }\n    const value = injector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n    ngDevMode && emitInjectEvent(token as Type<unknown>, value, flags);\n    return value;\n  }\n}\n\n/**\n * Generated instruction: injects a token from the currently active injector.\n *\n * (Additional documentation moved to `inject`, as it is the public API, and an alias for this\n * instruction)\n *\n * @see inject\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\nexport function ɵɵinject<T>(token: ProviderToken<T>): T;\nexport function ɵɵinject<T>(token: ProviderToken<T>, flags?: InjectFlags): T | null;\nexport function ɵɵinject(token: HostAttributeToken): string;\nexport function ɵɵinject(token: HostAttributeToken, flags?: InjectFlags): string | null;\nexport function ɵɵinject<T>(\n  token: ProviderToken<T> | HostAttributeToken,\n  flags?: InjectFlags,\n): string | null;\nexport function ɵɵinject<T>(\n  token: ProviderToken<T> | HostAttributeToken,\n  flags = InjectFlags.Default,\n): T | null {\n  return (getInjectImplementation() || injectInjectorOnly)(\n    resolveForwardRef(token as Type<T>),\n    flags,\n  );\n}\n\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nexport function ɵɵinvalidFactoryDep(index: number): never {\n  throw new RuntimeError(\n    RuntimeErrorCode.INVALID_FACTORY_DEPENDENCY,\n    ngDevMode &&\n      `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`,\n  );\n}\n\n/**\n * @param token A token that represents a dependency that should be injected.\n * @returns the injected value if operation is successful, `null` otherwise.\n * @throws if called outside of a supported context.\n *\n * @publicApi\n */\nexport function inject<T>(token: ProviderToken<T>): T;\n/**\n * @param token A token that represents a dependency that should be injected.\n * @param flags Control how injection is executed. The flags correspond to injection strategies that\n *     can be specified with parameter decorators `@Host`, `@Self`, `@SkipSelf`, and `@Optional`.\n * @returns the injected value if operation is successful, `null` otherwise.\n * @throws if called outside of a supported context.\n *\n * @publicApi\n * @deprecated prefer an options object instead of `InjectFlags`\n */\nexport function inject<T>(token: ProviderToken<T>, flags?: InjectFlags): T | null;\n/**\n * @param token A token that represents a dependency that should be injected.\n * @param options Control how injection is executed. Options correspond to injection strategies\n *     that can be specified with parameter decorators `@Host`, `@Self`, `@SkipSelf`, and\n *     `@Optional`.\n * @returns the injected value if operation is successful.\n * @throws if called outside of a supported context, or if the token is not found.\n *\n * @publicApi\n */\nexport function inject<T>(token: ProviderToken<T>, options: InjectOptions & {optional?: false}): T;\n/**\n * @param token A token that represents a dependency that should be injected.\n * @param options Control how injection is executed. Options correspond to injection strategies\n *     that can be specified with parameter decorators `@Host`, `@Self`, `@SkipSelf`, and\n *     `@Optional`.\n * @returns the injected value if operation is successful,  `null` if the token is not\n *     found and optional injection has been requested.\n * @throws if called outside of a supported context, or if the token is not found and optional\n *     injection was not requested.\n *\n * @publicApi\n */\nexport function inject<T>(token: ProviderToken<T>, options: InjectOptions): T | null;\n/**\n * @param token A token that represents a static attribute on the host node that should be injected.\n * @returns Value of the attribute if it exists.\n * @throws If called outside of a supported context or the attribute does not exist.\n *\n * @publicApi\n */\nexport function inject(token: HostAttributeToken): string;\n/**\n * @param token A token that represents a static attribute on the host node that should be injected.\n * @returns Value of the attribute if it exists, otherwise `null`.\n * @throws If called outside of a supported context.\n *\n * @publicApi\n */\nexport function inject(token: HostAttributeToken, options: {optional: true}): string | null;\n/**\n * @param token A token that represents a static attribute on the host node that should be injected.\n * @returns Value of the attribute if it exists.\n * @throws If called outside of a supported context or the attribute does not exist.\n *\n * @publicApi\n */\nexport function inject(token: HostAttributeToken, options: {optional: false}): string;\n/**\n * Injects a token from the currently active injector.\n * `inject` is only supported in an [injection context](guide/di/dependency-injection-context). It\n * can be used during:\n * - Construction (via the `constructor`) of a class being instantiated by the DI system, such\n * as an `@Injectable` or `@Component`.\n * - In the initializer for fields of such classes.\n * - In the factory function specified for `useFactory` of a `Provider` or an `@Injectable`.\n * - In the `factory` function specified for an `InjectionToken`.\n * - In a stackframe of a function call in a DI context\n *\n * @param token A token that represents a dependency that should be injected.\n * @param flags Optional flags that control how injection is executed.\n * The flags correspond to injection strategies that can be specified with\n * parameter decorators `@Host`, `@Self`, `@SkipSelf`, and `@Optional`.\n * @returns the injected value if operation is successful, `null` otherwise.\n * @throws if called outside of a supported context.\n *\n * @usageNotes\n * In practice the `inject()` calls are allowed in a constructor, a constructor parameter and a\n * field initializer:\n *\n * ```ts\n * @Injectable({providedIn: 'root'})\n * export class Car {\n *   radio: Radio|undefined;\n *   // OK: field initializer\n *   spareTyre = inject(Tyre);\n *\n *   constructor() {\n *     // OK: constructor body\n *     this.radio = inject(Radio);\n *   }\n * }\n * ```\n *\n * It is also legal to call `inject` from a provider's factory:\n *\n * ```ts\n * providers: [\n *   {provide: Car, useFactory: () => {\n *     // OK: a class factory\n *     const engine = inject(Engine);\n *     return new Car(engine);\n *   }}\n * ]\n * ```\n *\n * Calls to the `inject()` function outside of the class creation context will result in error. Most\n * notably, calls to `inject()` are disallowed after a class instance was created, in methods\n * (including lifecycle hooks):\n *\n * ```ts\n * @Component({ ... })\n * export class CarComponent {\n *   ngOnInit() {\n *     // ERROR: too late, the component instance was already created\n *     const engine = inject(Engine);\n *     engine.start();\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport function inject<T>(\n  token: ProviderToken<T> | HostAttributeToken,\n  flags: InjectFlags | InjectOptions = InjectFlags.Default,\n) {\n  // The `as any` here _shouldn't_ be necessary, but without it JSCompiler\n  // throws a disambiguation  error due to the multiple signatures.\n  return ɵɵinject(token as any, convertToBitFlags(flags));\n}\n\n// Converts object-based DI flags (`InjectOptions`) to bit flags (`InjectFlags`).\nexport function convertToBitFlags(\n  flags: InjectOptions | InjectFlags | undefined,\n): InjectFlags | undefined {\n  if (typeof flags === 'undefined' || typeof flags === 'number') {\n    return flags;\n  }\n\n  // While TypeScript doesn't accept it without a cast, bitwise OR with false-y values in\n  // JavaScript is a no-op. We can use that for a very codesize-efficient conversion from\n  // `InjectOptions` to `InjectFlags`.\n  return (InternalInjectFlags.Default | // comment to force a line break in the formatter\n    ((flags.optional && InternalInjectFlags.Optional) as number) |\n    ((flags.host && InternalInjectFlags.Host) as number) |\n    ((flags.self && InternalInjectFlags.Self) as number) |\n    ((flags.skipSelf && InternalInjectFlags.SkipSelf) as number)) as InjectFlags;\n}\n\nexport function injectArgs(types: (ProviderToken<any> | any[])[]): any[] {\n  const args: any[] = [];\n  for (let i = 0; i < types.length; i++) {\n    const arg = resolveForwardRef(types[i]);\n    if (Array.isArray(arg)) {\n      if (arg.length === 0) {\n        throw new RuntimeError(\n          RuntimeErrorCode.INVALID_DIFFER_INPUT,\n          ngDevMode && 'Arguments array must have arguments.',\n        );\n      }\n      let type: Type<any> | undefined = undefined;\n      let flags: InjectFlags = InjectFlags.Default;\n\n      for (let j = 0; j < arg.length; j++) {\n        const meta = arg[j];\n        const flag = getInjectFlag(meta);\n        if (typeof flag === 'number') {\n          // Special case when we handle @Inject decorator.\n          if (flag === DecoratorFlags.Inject) {\n            type = meta.token;\n          } else {\n            flags |= flag;\n          }\n        } else {\n          type = meta;\n        }\n      }\n\n      args.push(ɵɵinject(type!, flags));\n    } else {\n      args.push(ɵɵinject(arg));\n    }\n  }\n  return args;\n}\n\n/**\n * Attaches a given InjectFlag to a given decorator using monkey-patching.\n * Since DI decorators can be used in providers `deps` array (when provider is configured using\n * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we\n * attach the flag to make it available both as a static property and as a field on decorator\n * instance.\n *\n * @param decorator Provided DI decorator.\n * @param flag InjectFlag that should be applied.\n */\nexport function attachInjectFlag(decorator: any, flag: InternalInjectFlags | DecoratorFlags): any {\n  decorator[DI_DECORATOR_FLAG] = flag;\n  decorator.prototype[DI_DECORATOR_FLAG] = flag;\n  return decorator;\n}\n\n/**\n * Reads monkey-patched property that contains InjectFlag attached to a decorator.\n *\n * @param token Token that may contain monkey-patched DI flags property.\n */\nexport function getInjectFlag(token: any): number | undefined {\n  return token[DI_DECORATOR_FLAG];\n}\n\nexport function catchInjectorError(\n  e: any,\n  token: any,\n  injectorErrorName: string,\n  source: string | null,\n): never {\n  const tokenPath: any[] = e[NG_TEMP_TOKEN_PATH];\n  if (token[SOURCE]) {\n    tokenPath.unshift(token[SOURCE]);\n  }\n  e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n  e[NG_TOKEN_PATH] = tokenPath;\n  e[NG_TEMP_TOKEN_PATH] = null;\n  throw e;\n}\n\nexport function formatError(\n  text: string,\n  obj: any,\n  injectorErrorName: string,\n  source: string | null = null,\n): string {\n  text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.slice(2) : text;\n  let context = stringify(obj);\n  if (Array.isArray(obj)) {\n    context = obj.map(stringify).join(' -> ');\n  } else if (typeof obj === 'object') {\n    let parts = <string[]>[];\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        let value = obj[key];\n        parts.push(\n          key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)),\n        );\n      }\n    }\n    context = `{${parts.join(', ')}}`;\n  }\n  return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(\n    NEW_LINE,\n    '\\n  ',\n  )}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {makeParamDecorator} from '../util/decorators';\n\nimport {attachInjectFlag} from './injector_compatibility';\nimport {DecoratorFlags, InternalInjectFlags} from './interface/injector';\n\n/**\n * Type of the Inject decorator / constructor function.\n *\n * @publicApi\n */\nexport interface InjectDecorator {\n  /**\n   * Parameter decorator on a dependency parameter of a class constructor\n   * that specifies a custom provider of the dependency.\n   *\n   * @usageNotes\n   * The following example shows a class constructor that specifies a\n   * custom provider of a dependency using the parameter decorator.\n   *\n   * When `@Inject()` is not present, the injector uses the type annotation of the\n   * parameter as the provider.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='InjectWithoutDecorator'}\n   *\n   * @see [Dependency Injection Guide](guide/di/dependency-injection\n   *\n   */\n  (token: any): any;\n  new (token: any): Inject;\n}\n\n/**\n * Type of the Inject metadata.\n *\n * @publicApi\n */\nexport interface Inject {\n  /**\n   * A DI token that maps to the dependency to be injected.\n   */\n  token: any;\n}\n\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Inject: InjectDecorator = attachInjectFlag(\n  // Disable tslint because `DecoratorFlags` is a const enum which gets inlined.\n  makeParamDecorator('Inject', (token: any) => ({token})),\n  // tslint:disable-next-line: no-toplevel-property-access\n  DecoratorFlags.Inject,\n);\n\n/**\n * Type of the Optional decorator / constructor function.\n *\n * @publicApi\n */\nexport interface OptionalDecorator {\n  /**\n   * Parameter decorator to be used on constructor parameters,\n   * which marks the parameter as being an optional dependency.\n   * The DI framework provides `null` if the dependency is not found.\n   *\n   * Can be used together with other parameter decorators\n   * that modify how dependency injection operates.\n   *\n   * @usageNotes\n   *\n   * The following code allows the possibility of a `null` result:\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Optional'}\n   *\n   * @see [Dependency Injection Guide](guide/di/dependency-injection.\n   */\n  (): any;\n  new (): Optional;\n}\n\n/**\n * Type of the Optional metadata.\n *\n * @publicApi\n */\nexport interface Optional {}\n\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Optional: OptionalDecorator =\n  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n  // tslint:disable-next-line: no-toplevel-property-access\n  attachInjectFlag(makeParamDecorator('Optional'), InternalInjectFlags.Optional);\n\n/**\n * Type of the Self decorator / constructor function.\n *\n * @publicApi\n */\nexport interface SelfDecorator {\n  /**\n   * Parameter decorator to be used on constructor parameters,\n   * which tells the DI framework to start dependency resolution from the local injector.\n   *\n   * Resolution works upward through the injector hierarchy, so the children\n   * of this class must configure their own providers or be prepared for a `null` result.\n   *\n   * @usageNotes\n   *\n   * In the following example, the dependency can be resolved\n   * by the local injector when instantiating the class itself, but not\n   * when instantiating a child.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Self'}\n   *\n   * @see {@link SkipSelf}\n   * @see {@link Optional}\n   *\n   */\n  (): any;\n  new (): Self;\n}\n\n/**\n * Type of the Self metadata.\n *\n * @publicApi\n */\nexport interface Self {}\n\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Self: SelfDecorator =\n  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n  // tslint:disable-next-line: no-toplevel-property-access\n  attachInjectFlag(makeParamDecorator('Self'), InternalInjectFlags.Self);\n\n/**\n * Type of the `SkipSelf` decorator / constructor function.\n *\n * @publicApi\n */\nexport interface SkipSelfDecorator {\n  /**\n   * Parameter decorator to be used on constructor parameters,\n   * which tells the DI framework to start dependency resolution from the parent injector.\n   * Resolution works upward through the injector hierarchy, so the local injector\n   * is not checked for a provider.\n   *\n   * @usageNotes\n   *\n   * In the following example, the dependency can be resolved when\n   * instantiating a child, but not when instantiating the class itself.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='SkipSelf'}\n   *\n   * @see [Dependency Injection guide](guide/di/di-in-action#skip).\n   * @see {@link Self}\n   * @see {@link Optional}\n   *\n   */\n  (): any;\n  new (): SkipSelf;\n}\n\n/**\n * Type of the `SkipSelf` metadata.\n *\n * @publicApi\n */\nexport interface SkipSelf {}\n\n/**\n * `SkipSelf` decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const SkipSelf: SkipSelfDecorator =\n  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n  // tslint:disable-next-line: no-toplevel-property-access\n  attachInjectFlag(makeParamDecorator('SkipSelf'), InternalInjectFlags.SkipSelf);\n\n/**\n * Type of the `Host` decorator / constructor function.\n *\n * @publicApi\n */\nexport interface HostDecorator {\n  /**\n   * Parameter decorator on a view-provider parameter of a class constructor\n   * that tells the DI framework to resolve the view by checking injectors of child\n   * elements, and stop when reaching the host element of the current component.\n   *\n   * @usageNotes\n   *\n   * The following shows use with the `@Optional` decorator, and allows for a `null` result.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Host'}\n   *\n   * For an extended example, see [\"Dependency Injection\n   * Guide\"](guide/di/di-in-action#optional).\n   */\n  (): any;\n  new (): Host;\n}\n\n/**\n * Type of the Host metadata.\n *\n * @publicApi\n */\nexport interface Host {}\n\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Host: HostDecorator =\n  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n  // tslint:disable-next-line: no-toplevel-property-access\n  attachInjectFlag(makeParamDecorator('Host'), InternalInjectFlags.Host);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Type} from '../interface/type';\nimport {stringify} from '../util/stringify';\nimport {NG_FACTORY_DEF} from './fields';\n\n/**\n * Definition of what a factory function should look like.\n */\nexport type FactoryFn<T> = {\n  /**\n   * Subclasses without an explicit constructor call through to the factory of their base\n   * definition, providing it with their own constructor to instantiate.\n   */\n  <U extends T>(t?: Type<U>): U;\n\n  /**\n   * If no constructor to instantiate is provided, an instance of type T itself is created.\n   */\n  (t?: undefined): T;\n};\n\nexport function getFactoryDef<T>(type: any, throwNotFound: true): FactoryFn<T>;\nexport function getFactoryDef<T>(type: any): FactoryFn<T> | null;\nexport function getFactoryDef<T>(type: any, throwNotFound?: boolean): FactoryFn<T> | null {\n  const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);\n  if (!hasFactoryDef && throwNotFound === true && ngDevMode) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵfac' property.`);\n  }\n  return hasFactoryDef ? type[NG_FACTORY_DEF] : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertEqual, assertLessThanOrEqual} from './assert';\n\n/**\n * Determines if the contents of two arrays is identical\n *\n * @param a first array\n * @param b second array\n * @param identityAccessor Optional function for extracting stable object identity from a value in\n *     the array.\n */\nexport function arrayEquals<T>(a: T[], b: T[], identityAccessor?: (value: T) => unknown): boolean {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    let valueA = a[i];\n    let valueB = b[i];\n    if (identityAccessor) {\n      valueA = identityAccessor(valueA) as any;\n      valueB = identityAccessor(valueB) as any;\n    }\n    if (valueB !== valueA) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Flattens an array.\n */\nexport function flatten(list: any[]): any[] {\n  return list.flat(Number.POSITIVE_INFINITY);\n}\n\nexport function deepForEach<T>(input: (T | any[])[], fn: (value: T) => void): void {\n  input.forEach((value) => (Array.isArray(value) ? deepForEach(value, fn) : fn(value)));\n}\n\nexport function addToArray(arr: any[], index: number, value: any): void {\n  // perf: array.push is faster than array.splice!\n  if (index >= arr.length) {\n    arr.push(value);\n  } else {\n    arr.splice(index, 0, value);\n  }\n}\n\nexport function removeFromArray(arr: any[], index: number): any {\n  // perf: array.pop is faster than array.splice!\n  if (index >= arr.length - 1) {\n    return arr.pop();\n  } else {\n    return arr.splice(index, 1)[0];\n  }\n}\n\nexport function newArray<T = any>(size: number): T[];\nexport function newArray<T>(size: number, value: T): T[];\nexport function newArray<T>(size: number, value?: T): T[] {\n  const list: T[] = [];\n  for (let i = 0; i < size; i++) {\n    list.push(value!);\n  }\n  return list;\n}\n\n/**\n * Remove item from array (Same as `Array.splice()` but faster.)\n *\n * `Array.splice()` is not as fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * https://jsperf.com/fast-array-splice (About 20x faster)\n *\n * @param array Array to splice\n * @param index Index of element in array to remove.\n * @param count Number of items to remove.\n */\nexport function arraySplice(array: any[], index: number, count: number): void {\n  const length = array.length - count;\n  while (index < length) {\n    array[index] = array[index + count];\n    index++;\n  }\n  while (count--) {\n    array.pop(); // shrink the array\n  }\n}\n\n/**\n * Same as `Array.splice(index, 0, value)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value Value to add to array.\n */\nexport function arrayInsert(array: any[], index: number, value: any): void {\n  ngDevMode && assertLessThanOrEqual(index, array.length, \"Can't insert past array end.\");\n  let end = array.length;\n  while (end > index) {\n    const previousEnd = end - 1;\n    array[end] = array[previousEnd];\n    end = previousEnd;\n  }\n  array[index] = value;\n}\n\n/**\n * Same as `Array.splice2(index, 0, value1, value2)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value1 Value to add to array.\n * @param value2 Value to add to array.\n */\nexport function arrayInsert2(array: any[], index: number, value1: any, value2: any): void {\n  ngDevMode && assertLessThanOrEqual(index, array.length, \"Can't insert past array end.\");\n  let end = array.length;\n  if (end == index) {\n    // inserting at the end.\n    array.push(value1, value2);\n  } else if (end === 1) {\n    // corner case when we have less items in array than we have items to insert.\n    array.push(value2, array[0]);\n    array[0] = value1;\n  } else {\n    end--;\n    array.push(array[end - 1], array[end]);\n    while (end > index) {\n      const previousEnd = end - 2;\n      array[end] = array[previousEnd];\n      end--;\n    }\n    array[index] = value1;\n    array[index + 1] = value2;\n  }\n}\n\n/**\n * Get an index of an `value` in a sorted `array`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n *     located)\n */\nexport function arrayIndexOfSorted(array: string[], value: string): number {\n  return _arrayIndexOfSorted(array, value, 0);\n}\n\n/**\n * `KeyValueArray` is an array where even positions contain keys and odd positions contain values.\n *\n * `KeyValueArray` provides a very efficient way of iterating over its contents. For small\n * sets (~10) the cost of binary searching an `KeyValueArray` has about the same performance\n * characteristics that of a `Map` with significantly better memory footprint.\n *\n * If used as a `Map` the keys are stored in alphabetical order so that they can be binary searched\n * for retrieval.\n *\n * See: `keyValueArraySet`, `keyValueArrayGet`, `keyValueArrayIndexOf`, `keyValueArrayDelete`.\n */\nexport interface KeyValueArray<VALUE> extends Array<VALUE | string> {\n  __brand__: 'array-map';\n}\n\n/**\n * Set a `value` for a `key`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or create.\n * @param value The value to set for a `key`.\n * @returns index (always even) of where the value vas set.\n */\nexport function keyValueArraySet<V>(\n  keyValueArray: KeyValueArray<V>,\n  key: string,\n  value: V,\n): number {\n  let index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it set it.\n    keyValueArray[index | 1] = value;\n  } else {\n    index = ~index;\n    arrayInsert2(keyValueArray, index, key, value);\n  }\n  return index;\n}\n\n/**\n * Retrieve a `value` for a `key` (on `undefined` if not found.)\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @return The `value` stored at the `key` location or `undefined if not found.\n */\nexport function keyValueArrayGet<V>(keyValueArray: KeyValueArray<V>, key: string): V | undefined {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it retrieve it.\n    return keyValueArray[index | 1] as V;\n  }\n  return undefined;\n}\n\n/**\n * Retrieve a `key` index value in the array or `-1` if not found.\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @returns index of where the key is (or should have been.)\n *   - positive (even) index if key found.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been inserted.)\n */\nexport function keyValueArrayIndexOf<V>(keyValueArray: KeyValueArray<V>, key: string): number {\n  return _arrayIndexOfSorted(keyValueArray as string[], key, 1);\n}\n\n/**\n * Delete a `key` (and `value`) from the `KeyValueArray`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or delete (if exist).\n * @returns index of where the key was (or should have been.)\n *   - positive (even) index if key found and deleted.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been.)\n */\nexport function keyValueArrayDelete<V>(keyValueArray: KeyValueArray<V>, key: string): number {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it remove it.\n    arraySplice(keyValueArray, index, 2);\n  }\n  return index;\n}\n\n/**\n * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @param shift grouping shift.\n *   - `0` means look at every location\n *   - `1` means only look at every other (even) location (the odd locations are to be ignored as\n *         they are values.)\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n * inserted)\n */\nfunction _arrayIndexOfSorted(array: string[], value: string, shift: number): number {\n  ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');\n  let start = 0;\n  let end = array.length >> shift;\n  while (end !== start) {\n    const middle = start + ((end - start) >> 1); // find the middle.\n    const current = array[middle << shift];\n    if (value === current) {\n      return middle << shift;\n    } else if (current > value) {\n      end = middle;\n    } else {\n      start = middle + 1; // We already searched middle so make it non-inclusive by adding 1\n    }\n  }\n  return ~(end << shift);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {initNgDevMode} from './ng_dev_mode';\n\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n */\n\nexport const EMPTY_OBJ: never = {} as never;\nexport const EMPTY_ARRAY: any[] = [];\n\n// freezing the values prevents any code from accidentally inserting new values in\nif ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {\n  // These property accesses can be ignored because ngDevMode will be set to false\n  // when optimizing code and the whole if statement will be dropped.\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_OBJ);\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_ARRAY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from './injection_token';\n\n/**\n * A multi-provider token for initialization functions that will run upon construction of an\n * environment injector.\n *\n * @deprecated from v19.0.0, use provideEnvironmentInitializer instead\n *\n * @see {@link provideEnvironmentInitializer}\n *\n * Note: As opposed to the `APP_INITIALIZER` token, the `ENVIRONMENT_INITIALIZER` functions are not awaited,\n * hence they should not be `async`.\n *\n * @publicApi\n */\nexport const ENVIRONMENT_INITIALIZER = new InjectionToken<ReadonlyArray<() => void>>(\n  ngDevMode ? 'ENVIRONMENT_INITIALIZER' : '',\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from './injection_token';\nimport type {Injector} from './injector';\nimport {InjectorMarkers} from './injector_marker';\n\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nexport const INJECTOR = new InjectionToken<Injector>(\n  ngDevMode ? 'INJECTOR' : '',\n  // Disable tslint because this is const enum which gets inlined not top level prop access.\n  // tslint:disable-next-line: no-toplevel-property-access\n  InjectorMarkers.Injector as any, // Special value used by Ivy to identify `Injector`.\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Type} from '../interface/type';\n\nimport {InjectionToken} from './injection_token';\n\nexport const INJECTOR_DEF_TYPES = new InjectionToken<ReadonlyArray<Type<unknown>>>(\n  ngDevMode ? 'INJECTOR_DEF_TYPES' : '',\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {stringify} from '../util/stringify';\nimport type {Injector} from './injector';\nimport {THROW_IF_NOT_FOUND} from './injector_compatibility';\n\nexport class NullInjector implements Injector {\n  get(token: any, notFoundValue: any = THROW_IF_NOT_FOUND): any {\n    if (notFoundValue === THROW_IF_NOT_FOUND) {\n      const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n      error.name = 'NullInjectorError';\n      throw error;\n    }\n    return notFoundValue;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Type} from '../interface/type';\nimport type {NgModuleDef} from '../r3_symbols';\nimport {stringify} from '../util/stringify';\nimport {NG_COMP_DEF, NG_DIR_DEF, NG_MOD_DEF, NG_PIPE_DEF} from './fields';\nimport type {ComponentDef, DirectiveDef, PipeDef} from './interfaces/definition';\n\nexport function getNgModuleDef<T>(type: any, throwNotFound: true): NgModuleDef<T>;\nexport function getNgModuleDef<T>(type: any): NgModuleDef<T> | null;\nexport function getNgModuleDef<T>(type: any, throwNotFound?: boolean): NgModuleDef<T> | null {\n  const ngModuleDef = type[NG_MOD_DEF] || null;\n  if (!ngModuleDef && throwNotFound === true) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵmod' property.`);\n  }\n  return ngModuleDef;\n}\n\n/**\n * The following getter methods retrieve the definition from the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n */\n\nexport function getComponentDef<T>(type: any): ComponentDef<T> | null {\n  return type[NG_COMP_DEF] || null;\n}\n\nexport function getDirectiveDef<T>(type: any): DirectiveDef<T> | null {\n  return type[NG_DIR_DEF] || null;\n}\n\nexport function getPipeDef<T>(type: any): PipeDef<T> | null {\n  return type[NG_PIPE_DEF] || null;\n}\n\n/**\n * Checks whether a given Component, Directive or Pipe is marked as standalone.\n * This will return false if passed anything other than a Component, Directive, or Pipe class\n * See [this guide](guide/components/importing) for additional information:\n *\n * @param type A reference to a Component, Directive or Pipe.\n * @publicApi\n */\nexport function isStandalone(type: Type<unknown>): boolean {\n  const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\n  return def !== null && def.standalone;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {Type} from '../interface/type';\nimport {getComponentDef} from '../render3/def_getters';\nimport {getFactoryDef} from '../render3/definition_factory';\nimport {throwCyclicDependencyError, throwInvalidProviderError} from '../render3/errors_di';\nimport {stringifyForError} from '../render3/util/stringify_utils';\nimport {deepForEach} from '../util/array_utils';\nimport {EMPTY_ARRAY} from '../util/empty';\nimport {getClosureSafeProperty} from '../util/property';\nimport {stringify} from '../util/stringify';\n\nimport {resolveForwardRef} from './forward_ref';\nimport {ENVIRONMENT_INITIALIZER} from './initializer_token';\nimport {ɵɵinject as inject} from './injector_compatibility';\nimport {getInjectorDef, InjectorType, InjectorTypeWithProviders} from './interface/defs';\nimport {\n  ClassProvider,\n  ConstructorProvider,\n  EnvironmentProviders,\n  ExistingProvider,\n  FactoryProvider,\n  InternalEnvironmentProviders,\n  isEnvironmentProviders,\n  ModuleWithProviders,\n  Provider,\n  StaticClassProvider,\n  TypeProvider,\n  ValueProvider,\n} from './interface/provider';\nimport {INJECTOR_DEF_TYPES} from './internal_tokens';\n\n/**\n * Wrap an array of `Provider`s into `EnvironmentProviders`, preventing them from being accidentally\n * referenced in `@Component` in a component injector.\n */\nexport function makeEnvironmentProviders(\n  providers: (Provider | EnvironmentProviders)[],\n): EnvironmentProviders {\n  return {\n    ɵproviders: providers,\n  } as unknown as EnvironmentProviders;\n}\n\n/**\n * @description\n * This function is used to provide initialization functions that will be executed upon construction\n * of an environment injector.\n *\n * Note that the provided initializer is run in the injection context.\n *\n * Previously, this was achieved using the `ENVIRONMENT_INITIALIZER` token which is now deprecated.\n *\n * @see {@link ENVIRONMENT_INITIALIZER}\n *\n * @usageNotes\n * The following example illustrates how to configure an initialization function using\n * `provideEnvironmentInitializer()`\n * ```ts\n * createEnvironmentInjector(\n *   [\n *     provideEnvironmentInitializer(() => {\n *       console.log('environment initialized');\n *     }),\n *   ],\n *   parentInjector\n * );\n * ```\n *\n * @publicApi\n */\nexport function provideEnvironmentInitializer(initializerFn: () => void): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: ENVIRONMENT_INITIALIZER,\n      multi: true,\n      useValue: initializerFn,\n    },\n  ]);\n}\n\n/**\n * A source of providers for the `importProvidersFrom` function.\n *\n * @publicApi\n */\nexport type ImportProvidersSource =\n  | Type<unknown>\n  | ModuleWithProviders<unknown>\n  | Array<ImportProvidersSource>;\n\ntype WalkProviderTreeVisitor = (\n  provider: SingleProvider,\n  container: Type<unknown> | InjectorType<unknown>,\n) => void;\n\n/**\n * Collects providers from all NgModules and standalone components, including transitively imported\n * ones.\n *\n * Providers extracted via `importProvidersFrom` are only usable in an application injector or\n * another environment injector (such as a route injector). They should not be used in component\n * providers.\n *\n * More information about standalone components can be found in [this\n * guide](guide/components/importing).\n *\n * @usageNotes\n * The results of the `importProvidersFrom` call can be used in the `bootstrapApplication` call:\n *\n * ```ts\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(NgModuleOne, NgModuleTwo)\n *   ]\n * });\n * ```\n *\n * You can also use the `importProvidersFrom` results in the `providers` field of a route, when a\n * standalone component is used:\n *\n * ```ts\n * export const ROUTES: Route[] = [\n *   {\n *     path: 'foo',\n *     providers: [\n *       importProvidersFrom(NgModuleOne, NgModuleTwo)\n *     ],\n *     component: YourStandaloneComponent\n *   }\n * ];\n * ```\n *\n * @returns Collected providers from the specified list of types.\n * @publicApi\n */\nexport function importProvidersFrom(...sources: ImportProvidersSource[]): EnvironmentProviders {\n  return {\n    ɵproviders: internalImportProvidersFrom(true, sources),\n    ɵfromNgModule: true,\n  } as InternalEnvironmentProviders;\n}\n\nexport function internalImportProvidersFrom(\n  checkForStandaloneCmp: boolean,\n  ...sources: ImportProvidersSource[]\n): Provider[] {\n  const providersOut: SingleProvider[] = [];\n  const dedup = new Set<Type<unknown>>(); // already seen types\n  let injectorTypesWithProviders: InjectorTypeWithProviders<unknown>[] | undefined;\n\n  const collectProviders: WalkProviderTreeVisitor = (provider) => {\n    providersOut.push(provider);\n  };\n\n  deepForEach(sources, (source) => {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && checkForStandaloneCmp) {\n      const cmpDef = getComponentDef(source);\n      if (cmpDef?.standalone) {\n        throw new RuntimeError(\n          RuntimeErrorCode.IMPORT_PROVIDERS_FROM_STANDALONE,\n          `Importing providers supports NgModule or ModuleWithProviders but got a standalone component \"${stringifyForError(\n            source,\n          )}\"`,\n        );\n      }\n    }\n\n    // Narrow `source` to access the internal type analogue for `ModuleWithProviders`.\n    const internalSource = source as Type<unknown> | InjectorTypeWithProviders<unknown>;\n    if (walkProviderTree(internalSource, collectProviders, [], dedup)) {\n      injectorTypesWithProviders ||= [];\n      injectorTypesWithProviders.push(internalSource);\n    }\n  });\n  // Collect all providers from `ModuleWithProviders` types.\n  if (injectorTypesWithProviders !== undefined) {\n    processInjectorTypesWithProviders(injectorTypesWithProviders, collectProviders);\n  }\n\n  return providersOut;\n}\n\n/**\n * Collects all providers from the list of `ModuleWithProviders` and appends them to the provided\n * array.\n */\nfunction processInjectorTypesWithProviders(\n  typesWithProviders: InjectorTypeWithProviders<unknown>[],\n  visitor: WalkProviderTreeVisitor,\n): void {\n  for (let i = 0; i < typesWithProviders.length; i++) {\n    const {ngModule, providers} = typesWithProviders[i];\n    deepForEachProvider(\n      providers! as Array<Provider | InternalEnvironmentProviders>,\n      (provider) => {\n        ngDevMode && validateProvider(provider, providers || EMPTY_ARRAY, ngModule);\n        visitor(provider, ngModule);\n      },\n    );\n  }\n}\n\n/**\n * Internal type for a single provider in a deep provider array.\n */\nexport type SingleProvider =\n  | TypeProvider\n  | ValueProvider\n  | ClassProvider\n  | ConstructorProvider\n  | ExistingProvider\n  | FactoryProvider\n  | StaticClassProvider;\n\n/**\n * The logic visits an `InjectorType`, an `InjectorTypeWithProviders`, or a standalone\n * `ComponentType`, and all of its transitive providers and collects providers.\n *\n * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\n * the function will return \"true\" to indicate that the providers of the type definition need\n * to be processed. This allows us to process providers of injector types after all imports of\n * an injector definition are processed. (following View Engine semantics: see FW-1349)\n */\nexport function walkProviderTree(\n  container: Type<unknown> | InjectorTypeWithProviders<unknown>,\n  visitor: WalkProviderTreeVisitor,\n  parents: Type<unknown>[],\n  dedup: Set<Type<unknown>>,\n): container is InjectorTypeWithProviders<unknown> {\n  container = resolveForwardRef(container);\n  if (!container) return false;\n\n  // The actual type which had the definition. Usually `container`, but may be an unwrapped type\n  // from `InjectorTypeWithProviders`.\n  let defType: Type<unknown> | null = null;\n\n  let injDef = getInjectorDef(container);\n  const cmpDef = !injDef && getComponentDef(container);\n  if (!injDef && !cmpDef) {\n    // `container` is not an injector type or a component type. It might be:\n    //  * An `InjectorTypeWithProviders` that wraps an injector type.\n    //  * A standalone directive or pipe that got pulled in from a standalone component's\n    //    dependencies.\n    // Try to unwrap it as an `InjectorTypeWithProviders` first.\n    const ngModule: Type<unknown> | undefined = (container as InjectorTypeWithProviders<any>)\n      .ngModule as Type<unknown> | undefined;\n    injDef = getInjectorDef(ngModule);\n    if (injDef) {\n      defType = ngModule!;\n    } else {\n      // Not a component or injector type, so ignore it.\n      return false;\n    }\n  } else if (cmpDef && !cmpDef.standalone) {\n    return false;\n  } else {\n    defType = container as Type<unknown>;\n  }\n\n  // Check for circular dependencies.\n  if (ngDevMode && parents.indexOf(defType) !== -1) {\n    const defName = stringify(defType);\n    const path = parents.map(stringify);\n    throwCyclicDependencyError(defName, path);\n  }\n\n  // Check for multiple imports of the same module\n  const isDuplicate = dedup.has(defType);\n\n  if (cmpDef) {\n    if (isDuplicate) {\n      // This component definition has already been processed.\n      return false;\n    }\n    dedup.add(defType);\n\n    if (cmpDef.dependencies) {\n      const deps =\n        typeof cmpDef.dependencies === 'function' ? cmpDef.dependencies() : cmpDef.dependencies;\n      for (const dep of deps) {\n        walkProviderTree(dep, visitor, parents, dedup);\n      }\n    }\n  } else if (injDef) {\n    // First, include providers from any imports.\n    if (injDef.imports != null && !isDuplicate) {\n      // Before processing defType's imports, add it to the set of parents. This way, if it ends\n      // up deeply importing itself, this can be detected.\n      ngDevMode && parents.push(defType);\n      // Add it to the set of dedups. This way we can detect multiple imports of the same module\n      dedup.add(defType);\n\n      let importTypesWithProviders: InjectorTypeWithProviders<any>[] | undefined;\n      try {\n        deepForEach(injDef.imports, (imported) => {\n          if (walkProviderTree(imported, visitor, parents, dedup)) {\n            importTypesWithProviders ||= [];\n            // If the processed import is an injector type with providers, we store it in the\n            // list of import types with providers, so that we can process those afterwards.\n            importTypesWithProviders.push(imported);\n          }\n        });\n      } finally {\n        // Remove it from the parents set when finished.\n        ngDevMode && parents.pop();\n      }\n\n      // Imports which are declared with providers (TypeWithProviders) need to be processed\n      // after all imported modules are processed. This is similar to how View Engine\n      // processes/merges module imports in the metadata resolver. See: FW-1349.\n      if (importTypesWithProviders !== undefined) {\n        processInjectorTypesWithProviders(importTypesWithProviders, visitor);\n      }\n    }\n\n    if (!isDuplicate) {\n      // Track the InjectorType and add a provider for it.\n      // It's important that this is done after the def's imports.\n      const factory = getFactoryDef(defType) || (() => new defType!());\n\n      // Append extra providers to make more info available for consumers (to retrieve an injector\n      // type), as well as internally (to calculate an injection scope correctly and eagerly\n      // instantiate a `defType` when an injector is created).\n\n      // Provider to create `defType` using its factory.\n      visitor({provide: defType, useFactory: factory, deps: EMPTY_ARRAY}, defType);\n\n      // Make this `defType` available to an internal logic that calculates injector scope.\n      visitor({provide: INJECTOR_DEF_TYPES, useValue: defType, multi: true}, defType);\n\n      // Provider to eagerly instantiate `defType` via `INJECTOR_INITIALIZER`.\n      visitor(\n        {provide: ENVIRONMENT_INITIALIZER, useValue: () => inject(defType!), multi: true},\n        defType,\n      );\n    }\n\n    // Next, include providers listed on the definition itself.\n    const defProviders = injDef.providers as Array<SingleProvider | InternalEnvironmentProviders>;\n    if (defProviders != null && !isDuplicate) {\n      const injectorType = container as InjectorType<any>;\n      deepForEachProvider(defProviders, (provider) => {\n        ngDevMode && validateProvider(provider as SingleProvider, defProviders, injectorType);\n        visitor(provider, injectorType);\n      });\n    }\n  } else {\n    // Should not happen, but just in case.\n    return false;\n  }\n\n  return (\n    defType !== container && (container as InjectorTypeWithProviders<any>).providers !== undefined\n  );\n}\n\nfunction validateProvider(\n  provider: SingleProvider,\n  providers: Array<SingleProvider | InternalEnvironmentProviders>,\n  containerType: Type<unknown>,\n): void {\n  if (\n    isTypeProvider(provider) ||\n    isValueProvider(provider) ||\n    isFactoryProvider(provider) ||\n    isExistingProvider(provider)\n  ) {\n    return;\n  }\n\n  // Here we expect the provider to be a `useClass` provider (by elimination).\n  const classRef = resolveForwardRef(\n    provider && ((provider as StaticClassProvider | ClassProvider).useClass || provider.provide),\n  );\n  if (!classRef) {\n    throwInvalidProviderError(containerType, providers, provider);\n  }\n}\n\nfunction deepForEachProvider(\n  providers: Array<Provider | InternalEnvironmentProviders>,\n  fn: (provider: SingleProvider) => void,\n): void {\n  for (let provider of providers) {\n    if (isEnvironmentProviders(provider)) {\n      provider = provider.ɵproviders;\n    }\n    if (Array.isArray(provider)) {\n      deepForEachProvider(provider, fn);\n    } else {\n      fn(provider);\n    }\n  }\n}\n\nexport const USE_VALUE = getClosureSafeProperty<ValueProvider>({\n  provide: String,\n  useValue: getClosureSafeProperty,\n});\n\nexport function isValueProvider(value: SingleProvider): value is ValueProvider {\n  return value !== null && typeof value == 'object' && USE_VALUE in value;\n}\n\nexport function isExistingProvider(value: SingleProvider): value is ExistingProvider {\n  return !!(value && (value as ExistingProvider).useExisting);\n}\n\nexport function isFactoryProvider(value: SingleProvider): value is FactoryProvider {\n  return !!(value && (value as FactoryProvider).useFactory);\n}\n\nexport function isTypeProvider(value: SingleProvider): value is TypeProvider {\n  return typeof value === 'function';\n}\n\nexport function isClassProvider(value: SingleProvider): value is ClassProvider {\n  return !!(value as StaticClassProvider | ClassProvider).useClass;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from './injection_token';\n\nexport type InjectorScope = 'root' | 'platform' | 'environment';\n\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nexport const INJECTOR_SCOPE = new InjectionToken<InjectorScope | null>(\n  ngDevMode ? 'Set Injector scope.' : '',\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport '../util/ng_dev_mode';\n\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {OnDestroy} from '../interface/lifecycle_hooks';\nimport {Type} from '../interface/type';\nimport {\n  emitInstanceCreatedByInjectorEvent,\n  emitProviderConfiguredEvent,\n  InjectorProfilerContext,\n  runInInjectorProfilerContext,\n  setInjectorProfilerContext,\n} from '../render3/debug/injector_profiler';\nimport {FactoryFn, getFactoryDef} from '../render3/definition_factory';\nimport {\n  throwCyclicDependencyError,\n  throwInvalidProviderError,\n  throwMixedMultiProviderError,\n} from '../render3/errors_di';\nimport {NG_ENV_ID} from '../render3/fields';\nimport {newArray} from '../util/array_utils';\nimport {EMPTY_ARRAY} from '../util/empty';\nimport {stringify} from '../util/stringify';\n\nimport {resolveForwardRef} from './forward_ref';\nimport {ENVIRONMENT_INITIALIZER} from './initializer_token';\nimport {setInjectImplementation} from './inject_switch';\nimport {InjectionToken} from './injection_token';\nimport type {Injector} from './injector';\nimport {\n  catchInjectorError,\n  convertToBitFlags,\n  injectArgs,\n  NG_TEMP_TOKEN_PATH,\n  setCurrentInjector,\n  THROW_IF_NOT_FOUND,\n  ɵɵinject,\n} from './injector_compatibility';\nimport {INJECTOR} from './injector_token';\nimport {\n  getInheritedInjectableDef,\n  getInjectableDef,\n  InjectorType,\n  ɵɵInjectableDeclaration,\n} from './interface/defs';\nimport {InjectFlags, InjectOptions} from './interface/injector';\nimport {\n  ClassProvider,\n  ConstructorProvider,\n  EnvironmentProviders,\n  InternalEnvironmentProviders,\n  isEnvironmentProviders,\n  Provider,\n  StaticClassProvider,\n  TypeProvider,\n} from './interface/provider';\nimport {INJECTOR_DEF_TYPES} from './internal_tokens';\nimport {NullInjector} from './null_injector';\nimport {\n  isExistingProvider,\n  isFactoryProvider,\n  isTypeProvider,\n  isValueProvider,\n  SingleProvider,\n} from './provider_collection';\nimport {ProviderToken} from './provider_token';\nimport {INJECTOR_SCOPE, InjectorScope} from './scope';\nimport {setActiveConsumer} from '@angular/core/primitives/signals';\nimport {\n  Injector as PrimitivesInjector,\n  InjectionToken as PrimitivesInjectionToken,\n  NOT_FOUND,\n  NotFound,\n} from '@angular/core/primitives/di';\n\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n */\nconst NOT_YET = {};\n\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n */\nconst CIRCULAR = {};\n\n/**\n * A lazily initialized NullInjector.\n */\nlet NULL_INJECTOR: Injector | undefined = undefined;\n\nexport function getNullInjector(): Injector {\n  if (NULL_INJECTOR === undefined) {\n    NULL_INJECTOR = new NullInjector();\n  }\n  return NULL_INJECTOR;\n}\n\n/**\n * An entry in the injector which tracks information about the given token, including a possible\n * current value.\n */\ninterface Record<T> {\n  factory: (() => T) | undefined;\n  value: T | {};\n  multi: any[] | undefined;\n}\n\n/**\n * An `Injector` that's part of the environment injector hierarchy, which exists outside of the\n * component tree.\n */\nexport abstract class EnvironmentInjector implements Injector {\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   */\n  abstract get<T>(\n    token: ProviderToken<T>,\n    notFoundValue: undefined,\n    options: InjectOptions & {\n      optional?: false;\n    },\n  ): T;\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   */\n  abstract get<T>(\n    token: ProviderToken<T>,\n    notFoundValue: null | undefined,\n    options: InjectOptions,\n  ): T | null;\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   */\n  abstract get<T>(token: ProviderToken<T>, notFoundValue?: T, options?: InjectOptions): T;\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   * @deprecated use object-based flags (`InjectOptions`) instead.\n   */\n  abstract get<T>(token: ProviderToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  /**\n   * @deprecated from v4.0.0 use ProviderToken<T>\n   * @suppress {duplicate}\n   */\n  abstract get(token: any, notFoundValue?: any): any;\n\n  /**\n   * Runs the given function in the context of this `EnvironmentInjector`.\n   *\n   * Within the function's stack frame, [`inject`](api/core/inject) can be used to inject\n   * dependencies from this injector. Note that `inject` is only usable synchronously, and cannot be\n   * used in any asynchronous callbacks or after any `await` points.\n   *\n   * @param fn the closure to be run in the context of this injector\n   * @returns the return value of the function, if any\n   * @deprecated use the standalone function `runInInjectionContext` instead\n   */\n  abstract runInContext<ReturnT>(fn: () => ReturnT): ReturnT;\n\n  abstract destroy(): void;\n\n  /**\n   * @internal\n   */\n  abstract onDestroy(callback: () => void): () => void;\n}\n\nexport class R3Injector extends EnvironmentInjector implements PrimitivesInjector {\n  /**\n   * Map of tokens to records which contain the instances of those tokens.\n   * - `null` value implies that we don't have the record. Used by tree-shakable injectors\n   * to prevent further searches.\n   */\n  private records = new Map<ProviderToken<any>, Record<any> | null>();\n\n  /**\n   * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n   */\n  private _ngOnDestroyHooks = new Set<OnDestroy>();\n\n  private _onDestroyHooks: Array<() => void> = [];\n\n  /**\n   * Flag indicating that this injector was previously destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n  private _destroyed = false;\n\n  private injectorDefTypes: Set<Type<unknown>>;\n\n  constructor(\n    providers: Array<Provider | EnvironmentProviders>,\n    readonly parent: Injector,\n    readonly source: string | null,\n    readonly scopes: Set<InjectorScope>,\n  ) {\n    super();\n    // Start off by creating Records for every provider.\n    forEachSingleProvider(providers as Array<Provider | InternalEnvironmentProviders>, (provider) =>\n      this.processProvider(provider),\n    );\n\n    // Make sure the INJECTOR token provides this injector.\n    this.records.set(INJECTOR, makeRecord(undefined, this));\n\n    // And `EnvironmentInjector` if the current injector is supposed to be env-scoped.\n    if (scopes.has('environment')) {\n      this.records.set(EnvironmentInjector, makeRecord(undefined, this));\n    }\n\n    // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n    // any injectable scoped to APP_ROOT_SCOPE.\n    const record = this.records.get(INJECTOR_SCOPE) as Record<InjectorScope | null>;\n    if (record != null && typeof record.value === 'string') {\n      this.scopes.add(record.value as InjectorScope);\n    }\n\n    this.injectorDefTypes = new Set(this.get(INJECTOR_DEF_TYPES, EMPTY_ARRAY, InjectFlags.Self));\n  }\n\n  retrieve<T>(token: PrimitivesInjectionToken<T>, options?: unknown): T | NotFound {\n    const ngOptions = options as InjectOptions;\n    return this.get(token, ngOptions.optional ? NOT_FOUND : THROW_IF_NOT_FOUND, ngOptions);\n  }\n\n  /**\n   * Destroy the injector and release references to every instance or provider associated with it.\n   *\n   * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n   * hook was found.\n   */\n  override destroy(): void {\n    assertNotDestroyed(this);\n\n    // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n    this._destroyed = true;\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      // Call all the lifecycle hooks.\n      for (const service of this._ngOnDestroyHooks) {\n        service.ngOnDestroy();\n      }\n      const onDestroyHooks = this._onDestroyHooks;\n      // Reset the _onDestroyHooks array before iterating over it to prevent hooks that unregister\n      // themselves from mutating the array during iteration.\n      this._onDestroyHooks = [];\n      for (const hook of onDestroyHooks) {\n        hook();\n      }\n    } finally {\n      // Release all references.\n      this.records.clear();\n      this._ngOnDestroyHooks.clear();\n      this.injectorDefTypes.clear();\n      setActiveConsumer(prevConsumer);\n    }\n  }\n\n  override onDestroy(callback: () => void): () => void {\n    assertNotDestroyed(this);\n    this._onDestroyHooks.push(callback);\n    return () => this.removeOnDestroy(callback);\n  }\n\n  override runInContext<ReturnT>(fn: () => ReturnT): ReturnT {\n    assertNotDestroyed(this);\n\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n\n    let prevInjectContext: InjectorProfilerContext | undefined;\n    if (ngDevMode) {\n      prevInjectContext = setInjectorProfilerContext({injector: this, token: null});\n    }\n\n    try {\n      return fn();\n    } finally {\n      setCurrentInjector(previousInjector);\n      setInjectImplementation(previousInjectImplementation);\n      ngDevMode && setInjectorProfilerContext(prevInjectContext!);\n    }\n  }\n\n  override get<T>(\n    token: ProviderToken<T>,\n    notFoundValue: any = THROW_IF_NOT_FOUND,\n    flags: InjectFlags | InjectOptions = InjectFlags.Default,\n  ): T {\n    assertNotDestroyed(this);\n\n    if (token.hasOwnProperty(NG_ENV_ID)) {\n      return (token as any)[NG_ENV_ID](this);\n    }\n\n    flags = convertToBitFlags(flags) as InjectFlags;\n\n    // Set the injection context.\n    let prevInjectContext: InjectorProfilerContext;\n    if (ngDevMode) {\n      prevInjectContext = setInjectorProfilerContext({injector: this, token: token as Type<T>});\n    }\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      // Check for the SkipSelf flag.\n      if (!(flags & InjectFlags.SkipSelf)) {\n        // SkipSelf isn't set, check if the record belongs to this injector.\n        let record: Record<T> | undefined | null = this.records.get(token);\n        if (record === undefined) {\n          // No record, but maybe the token is scoped to this injector. Look for an injectable\n          // def with a scope matching this injector.\n          const def = couldBeInjectableType(token) && getInjectableDef(token);\n          if (def && this.injectableDefInScope(def)) {\n            // Found an injectable def and it's scoped to this injector. Pretend as if it was here\n            // all along.\n\n            if (ngDevMode) {\n              runInInjectorProfilerContext(this, token as Type<T>, () => {\n                emitProviderConfiguredEvent(token as TypeProvider);\n              });\n            }\n\n            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n          } else {\n            record = null;\n          }\n          this.records.set(token, record);\n        }\n        // If a record was found, get the instance for it and return it.\n        if (record != null /* NOT null || undefined */) {\n          return this.hydrate(token, record);\n        }\n      }\n\n      // Select the next injector based on the Self flag - if self is set, the next injector is\n      // the NullInjector, otherwise it's the parent.\n      const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n      // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue\n      // is undefined, the value is null, otherwise it's the notFoundValue.\n      notFoundValue =\n        flags & InjectFlags.Optional && notFoundValue === THROW_IF_NOT_FOUND ? null : notFoundValue;\n      return nextInjector.get(token, notFoundValue);\n    } catch (e: any) {\n      if (e.name === 'NullInjectorError') {\n        const path: any[] = (e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || []);\n        path.unshift(stringify(token));\n        if (previousInjector) {\n          // We still have a parent injector, keep throwing\n          throw e;\n        } else {\n          // Format & throw the final error message when we don't have any previous injector\n          return catchInjectorError(e, token, 'R3InjectorError', this.source);\n        }\n      } else {\n        throw e;\n      }\n    } finally {\n      // Lastly, restore the previous injection context.\n      setInjectImplementation(previousInjectImplementation);\n      setCurrentInjector(previousInjector);\n      ngDevMode && setInjectorProfilerContext(prevInjectContext!);\n    }\n  }\n\n  /** @internal */\n  resolveInjectorInitializers() {\n    const prevConsumer = setActiveConsumer(null);\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    let prevInjectContext: InjectorProfilerContext | undefined;\n    if (ngDevMode) {\n      prevInjectContext = setInjectorProfilerContext({injector: this, token: null});\n    }\n\n    try {\n      const initializers = this.get(ENVIRONMENT_INITIALIZER, EMPTY_ARRAY, InjectFlags.Self);\n      if (ngDevMode && !Array.isArray(initializers)) {\n        throw new RuntimeError(\n          RuntimeErrorCode.INVALID_MULTI_PROVIDER,\n          'Unexpected type of the `ENVIRONMENT_INITIALIZER` token value ' +\n            `(expected an array, but got ${typeof initializers}). ` +\n            'Please check that the `ENVIRONMENT_INITIALIZER` token is configured as a ' +\n            '`multi: true` provider.',\n        );\n      }\n      for (const initializer of initializers) {\n        initializer();\n      }\n    } finally {\n      setCurrentInjector(previousInjector);\n      setInjectImplementation(previousInjectImplementation);\n      ngDevMode && setInjectorProfilerContext(prevInjectContext!);\n      setActiveConsumer(prevConsumer);\n    }\n  }\n\n  override toString() {\n    const tokens: string[] = [];\n    const records = this.records;\n    for (const token of records.keys()) {\n      tokens.push(stringify(token));\n    }\n    return `R3Injector[${tokens.join(', ')}]`;\n  }\n\n  /**\n   * Process a `SingleProvider` and add it.\n   */\n  private processProvider(provider: SingleProvider): void {\n    // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n    // property.\n    provider = resolveForwardRef(provider);\n    let token: any = isTypeProvider(provider)\n      ? provider\n      : resolveForwardRef(provider && provider.provide);\n\n    // Construct a `Record` for the provider.\n    const record = providerToRecord(provider);\n    if (ngDevMode) {\n      runInInjectorProfilerContext(this, token, () => {\n        // Emit InjectorProfilerEventType.Create if provider is a value provider because\n        // these are the only providers that do not go through the value hydration logic\n        // where this event would normally be emitted from.\n        if (isValueProvider(provider)) {\n          emitInstanceCreatedByInjectorEvent(provider.useValue);\n        }\n\n        emitProviderConfiguredEvent(provider);\n      });\n    }\n\n    if (!isTypeProvider(provider) && provider.multi === true) {\n      // If the provider indicates that it's a multi-provider, process it specially.\n      // First check whether it's been defined already.\n      let multiRecord = this.records.get(token);\n      if (multiRecord) {\n        // It has. Throw a nice error if\n        if (ngDevMode && multiRecord.multi === undefined) {\n          throwMixedMultiProviderError();\n        }\n      } else {\n        multiRecord = makeRecord(undefined, NOT_YET, true);\n        multiRecord.factory = () => injectArgs(multiRecord!.multi!);\n        this.records.set(token, multiRecord);\n      }\n      token = provider;\n      multiRecord.multi!.push(provider);\n    } else {\n      if (ngDevMode) {\n        const existing = this.records.get(token);\n        if (existing && existing.multi !== undefined) {\n          throwMixedMultiProviderError();\n        }\n      }\n    }\n    this.records.set(token, record);\n  }\n\n  private hydrate<T>(token: ProviderToken<T>, record: Record<T>): T {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      if (record.value === CIRCULAR) {\n        throwCyclicDependencyError(stringify(token));\n      } else if (record.value === NOT_YET) {\n        record.value = CIRCULAR;\n\n        if (ngDevMode) {\n          runInInjectorProfilerContext(this, token as Type<T>, () => {\n            record.value = record.factory!();\n            emitInstanceCreatedByInjectorEvent(record.value);\n          });\n        } else {\n          record.value = record.factory!();\n        }\n      }\n      if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n        this._ngOnDestroyHooks.add(record.value);\n      }\n      return record.value as T;\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n\n  private injectableDefInScope(def: ɵɵInjectableDeclaration<any>): boolean {\n    if (!def.providedIn) {\n      return false;\n    }\n    const providedIn = resolveForwardRef(def.providedIn);\n    if (typeof providedIn === 'string') {\n      return providedIn === 'any' || this.scopes.has(providedIn);\n    } else {\n      return this.injectorDefTypes.has(providedIn);\n    }\n  }\n\n  private removeOnDestroy(callback: () => void): void {\n    const destroyCBIdx = this._onDestroyHooks.indexOf(callback);\n    if (destroyCBIdx !== -1) {\n      this._onDestroyHooks.splice(destroyCBIdx, 1);\n    }\n  }\n}\n\nfunction injectableDefOrInjectorDefFactory(token: ProviderToken<any>): FactoryFn<any> {\n  // Most tokens will have an injectable def directly on them, which specifies a factory directly.\n  const injectableDef = getInjectableDef(token);\n  const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);\n\n  if (factory !== null) {\n    return factory;\n  }\n\n  // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.\n  // If it's missing that, it's an error.\n  if (token instanceof InjectionToken) {\n    throw new RuntimeError(\n      RuntimeErrorCode.INVALID_INJECTION_TOKEN,\n      ngDevMode && `Token ${stringify(token)} is missing a ɵprov definition.`,\n    );\n  }\n\n  // Undecorated types can sometimes be created if they have no constructor arguments.\n  if (token instanceof Function) {\n    return getUndecoratedInjectableFactory(token);\n  }\n\n  // There was no way to resolve a factory for this token.\n  throw new RuntimeError(RuntimeErrorCode.INVALID_INJECTION_TOKEN, ngDevMode && 'unreachable');\n}\n\nfunction getUndecoratedInjectableFactory(token: Function) {\n  // If the token has parameters then it has dependencies that we cannot resolve implicitly.\n  const paramLength = token.length;\n  if (paramLength > 0) {\n    throw new RuntimeError(\n      RuntimeErrorCode.INVALID_INJECTION_TOKEN,\n      ngDevMode &&\n        `Can't resolve all parameters for ${stringify(token)}: (${newArray(paramLength, '?').join(\n          ', ',\n        )}).`,\n    );\n  }\n\n  // The constructor function appears to have no parameters.\n  // This might be because it inherits from a super-class. In which case, use an injectable\n  // def from an ancestor if there is one.\n  // Otherwise this really is a simple class with no dependencies, so return a factory that\n  // just instantiates the zero-arg constructor.\n  const inheritedInjectableDef = getInheritedInjectableDef(token);\n  if (inheritedInjectableDef !== null) {\n    return () => inheritedInjectableDef.factory(token as Type<any>);\n  } else {\n    return () => new (token as Type<any>)();\n  }\n}\n\nfunction providerToRecord(provider: SingleProvider): Record<any> {\n  if (isValueProvider(provider)) {\n    return makeRecord(undefined, provider.useValue);\n  } else {\n    const factory: (() => any) | undefined = providerToFactory(provider);\n    return makeRecord(factory, NOT_YET);\n  }\n}\n\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param provider provider to convert to factory\n */\nexport function providerToFactory(\n  provider: SingleProvider,\n  ngModuleType?: InjectorType<any>,\n  providers?: any[],\n): () => any {\n  let factory: (() => any) | undefined = undefined;\n  if (ngDevMode && isEnvironmentProviders(provider)) {\n    throwInvalidProviderError(undefined, providers, provider);\n  }\n\n  if (isTypeProvider(provider)) {\n    const unwrappedProvider = resolveForwardRef(provider);\n    return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);\n  } else {\n    if (isValueProvider(provider)) {\n      factory = () => resolveForwardRef(provider.useValue);\n    } else if (isFactoryProvider(provider)) {\n      factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n    } else if (isExistingProvider(provider)) {\n      factory = () => ɵɵinject(resolveForwardRef(provider.useExisting));\n    } else {\n      const classRef = resolveForwardRef(\n        provider &&\n          ((provider as StaticClassProvider | ClassProvider).useClass || provider.provide),\n      );\n      if (ngDevMode && !classRef) {\n        throwInvalidProviderError(ngModuleType, providers, provider);\n      }\n      if (hasDeps(provider)) {\n        factory = () => new classRef(...injectArgs(provider.deps));\n      } else {\n        return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);\n      }\n    }\n  }\n  return factory;\n}\n\nexport function assertNotDestroyed(injector: R3Injector): void {\n  if (injector.destroyed) {\n    throw new RuntimeError(\n      RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,\n      ngDevMode && 'Injector has already been destroyed.',\n    );\n  }\n}\n\nfunction makeRecord<T>(\n  factory: (() => T) | undefined,\n  value: T | {},\n  multi: boolean = false,\n): Record<T> {\n  return {\n    factory: factory,\n    value: value,\n    multi: multi ? [] : undefined,\n  };\n}\n\nfunction hasDeps(\n  value: ClassProvider | ConstructorProvider | StaticClassProvider,\n): value is ClassProvider & {deps: any[]} {\n  return !!(value as any).deps;\n}\n\nfunction hasOnDestroy(value: any): value is OnDestroy {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof (value as OnDestroy).ngOnDestroy === 'function'\n  );\n}\n\nfunction couldBeInjectableType(value: any): value is ProviderToken<any> {\n  return (\n    typeof value === 'function' || (typeof value === 'object' && value instanceof InjectionToken)\n  );\n}\n\nfunction forEachSingleProvider(\n  providers: Array<Provider | EnvironmentProviders>,\n  fn: (provider: SingleProvider) => void,\n): void {\n  for (const provider of providers) {\n    if (Array.isArray(provider)) {\n      forEachSingleProvider(provider, fn);\n    } else if (provider && isEnvironmentProviders(provider)) {\n      forEachSingleProvider(provider.ɵproviders, fn);\n    } else {\n      fn(provider as SingleProvider);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {\n  InjectorProfilerContext,\n  setInjectorProfilerContext,\n} from '../render3/debug/injector_profiler';\n\nimport {getInjectImplementation, setInjectImplementation} from './inject_switch';\nimport type {Injector} from './injector';\nimport {getCurrentInjector, setCurrentInjector, RetrievingInjector} from './injector_compatibility';\nimport {assertNotDestroyed, R3Injector} from './r3_injector';\nimport {Injector as PrimitivesInjector} from '@angular/core/primitives/di';\n\n/**\n * Runs the given function in the [context](guide/di/dependency-injection-context) of the given\n * `Injector`.\n *\n * Within the function's stack frame, [`inject`](api/core/inject) can be used to inject dependencies\n * from the given `Injector`. Note that `inject` is only usable synchronously, and cannot be used in\n * any asynchronous callbacks or after any `await` points.\n *\n * @param injector the injector which will satisfy calls to [`inject`](api/core/inject) while `fn`\n *     is executing\n * @param fn the closure to be run in the context of `injector`\n * @returns the return value of the function, if any\n * @publicApi\n */\nexport function runInInjectionContext<ReturnT>(injector: Injector, fn: () => ReturnT): ReturnT {\n  let internalInjector: PrimitivesInjector;\n  if (injector instanceof R3Injector) {\n    assertNotDestroyed(injector);\n    internalInjector = injector;\n  } else {\n    internalInjector = new RetrievingInjector(injector);\n  }\n\n  let prevInjectorProfilerContext: InjectorProfilerContext;\n  if (ngDevMode) {\n    prevInjectorProfilerContext = setInjectorProfilerContext({injector, token: null});\n  }\n  const prevInjector = setCurrentInjector(internalInjector);\n  const previousInjectImplementation = setInjectImplementation(undefined);\n  try {\n    return fn();\n  } finally {\n    setCurrentInjector(prevInjector);\n    ngDevMode && setInjectorProfilerContext(prevInjectorProfilerContext!);\n    setInjectImplementation(previousInjectImplementation);\n  }\n}\n\n/**\n * Whether the current stack frame is inside an injection context.\n */\nexport function isInInjectionContext(): boolean {\n  return getInjectImplementation() !== undefined || getCurrentInjector() != null;\n}\n/**\n * Asserts that the current stack frame is within an [injection\n * context](guide/di/dependency-injection-context) and has access to `inject`.\n *\n * @param debugFn a reference to the function making the assertion (used for the error message).\n *\n * @publicApi\n */\nexport function assertInInjectionContext(debugFn: Function): void {\n  // Taking a `Function` instead of a string name here prevents the unminified name of the function\n  // from being retained in the bundle regardless of minification.\n  if (!isInInjectionContext()) {\n    throw new RuntimeError(\n      RuntimeErrorCode.MISSING_INJECTION_CONTEXT,\n      ngDevMode &&\n        debugFn.name +\n          '() can only be used within an injection context such as a constructor, a factory function, a field initializer, or a function used with `runInInjectionContext`',\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nexport const Type = Function;\n\nexport function isType(v: any): v is Type<any> {\n  return typeof v === 'function';\n}\n\n/**\n * @description\n *\n * Represents an abstract class `T`, if applied to a concrete class it would stop being\n * instantiable.\n *\n * @publicApi\n */\nexport interface AbstractType<T> extends Function {\n  prototype: T;\n}\n\nexport interface Type<T> extends Function {\n  new (...args: any[]): T;\n}\n\n/**\n * Returns a writable type version of type.\n *\n * USAGE:\n * Given:\n * ```ts\n * interface Person {readonly name: string}\n * ```\n *\n * We would like to get a read/write version of `Person`.\n * ```ts\n * const WritablePerson = Writable<Person>;\n * ```\n *\n * The result is that you can do:\n *\n * ```ts\n * const readonlyPerson: Person = {name: 'Marry'};\n * readonlyPerson.name = 'John'; // TypeError\n * (readonlyPerson as WritablePerson).name = 'John'; // OK\n *\n * // Error: Correctly detects that `Person` did not have `age` property.\n * (readonlyPerson as WritablePerson).age = 30;\n * ```\n */\nexport type Writable<T> = {\n  -readonly [K in keyof T]: T[K];\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport type {ChangeDetectionScheduler} from '../../change_detection/scheduling/zoneless_scheduling';\nimport {TDeferBlockDetails} from '../../defer/interfaces';\nimport type {Injector} from '../../di/injector';\nimport {ProviderToken} from '../../di/provider_token';\nimport {DehydratedView} from '../../hydration/interfaces';\nimport {SchemaMetadata} from '../../metadata/schema';\nimport {Sanitizer} from '../../sanitization/sanitizer';\nimport type {AfterRenderSequence} from '../after_render/manager';\nimport type {ReactiveLViewConsumer} from '../reactive_lview_consumer';\nimport type {ViewEffectNode} from '../reactivity/effect';\n\nimport type {LContainer} from './container';\nimport {\n  ComponentDef,\n  ComponentTemplate,\n  DirectiveDef,\n  DirectiveDefList,\n  HostBindingsFunction,\n  PipeDef,\n  PipeDefList,\n  ViewQueriesFunction,\n} from './definition';\nimport {I18nUpdateOpCodes, TI18n, TIcu} from './i18n';\nimport {TConstants, TNode} from './node';\nimport type {LQueries, TQueries} from './query';\nimport {Renderer, RendererFactory} from './renderer';\nimport {RElement} from './renderer_dom';\nimport {TStylingKey, TStylingRange} from './styling';\n\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\nexport const HOST = 0;\nexport const TVIEW = 1;\n\n// Shared with LContainer\nexport const FLAGS = 2;\nexport const PARENT = 3;\nexport const NEXT = 4;\nexport const T_HOST = 5;\n// End shared with LContainer\n\nexport const HYDRATION = 6;\nexport const CLEANUP = 7;\nexport const CONTEXT = 8;\nexport const INJECTOR = 9;\nexport const ENVIRONMENT = 10;\nexport const RENDERER = 11;\nexport const CHILD_HEAD = 12;\nexport const CHILD_TAIL = 13;\n// FIXME(misko): Investigate if the three declarations aren't all same thing.\nexport const DECLARATION_VIEW = 14;\nexport const DECLARATION_COMPONENT_VIEW = 15;\nexport const DECLARATION_LCONTAINER = 16;\nexport const PREORDER_HOOK_FLAGS = 17;\nexport const QUERIES = 18;\nexport const ID = 19;\nexport const EMBEDDED_VIEW_INJECTOR = 20;\nexport const ON_DESTROY_HOOKS = 21;\nexport const EFFECTS_TO_SCHEDULE = 22;\nexport const EFFECTS = 23;\nexport const REACTIVE_TEMPLATE_CONSUMER = 24;\nexport const AFTER_RENDER_SEQUENCES_TO_ADD = 25;\n\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n *\n * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate\n * instruction index into `LView` index. All other indexes should be in the `LView` index space and\n * there should be no need to refer to `HEADER_OFFSET` anywhere else.\n */\nexport const HEADER_OFFSET = 26;\n\n// This interface replaces the real LView interface if it is an arg or a\n// return value of a public instruction. This ensures we don't need to expose\n// the actual interface, which should be kept private.\nexport interface OpaqueViewState {\n  '__brand__': 'Brand for OpaqueViewState that nothing will match';\n}\n\n/**\n * `LView` stores all of the information needed to process the instructions as\n * they are invoked from the template. Each embedded view and component view has its\n * own `LView`. When processing a particular view, we set the `viewData` to that\n * `LView`. When that view is done processing, the `viewData` is set back to\n * whatever the original `viewData` was before (the parent `LView`).\n *\n * Keeping separate state for each view facilities view insertion / deletion, so we\n * don't have to edit the data array based on which views are present.\n */\nexport interface LView<T = unknown> extends Array<any> {\n  /**\n   * The node into which this `LView` is inserted.\n   */\n  [HOST]: RElement | null;\n\n  /**\n   * The static data for this view. We need a reference to this so we can easily walk up the\n   * node tree in DI and get the TView.data array associated with a node (where the\n   * directive defs are stored).\n   */\n  readonly [TVIEW]: TView;\n\n  /** Flags for this view. See LViewFlags for more info. */\n  [FLAGS]: LViewFlags;\n\n  /**\n   * This may store an {@link LView} or {@link LContainer}.\n   *\n   * `LView` - The parent view. This is needed when we exit the view and must restore the previous\n   * LView. Without this, the render method would have to keep a stack of\n   * views as it is recursively rendering templates.\n   *\n   * `LContainer` - The current view is part of a container, and is an embedded view.\n   */\n  [PARENT]: LView | LContainer | null;\n\n  /**\n   *\n   * The next sibling LView or LContainer.\n   *\n   * Allows us to propagate between sibling view states that aren't in the same\n   * container. Embedded views already have a node.next, but it is only set for\n   * views in the same container. We need a way to link component views and views\n   * across containers as well.\n   */\n  [NEXT]: LView | LContainer | null;\n\n  /** Queries active for this view - nodes from a view are reported to those queries. */\n  [QUERIES]: LQueries | null;\n\n  /**\n   * Store the `TNode` of the location where the current `LView` is inserted into.\n   *\n   * Given:\n   * ```html\n   * <div>\n   *   <ng-template><span></span></ng-template>\n   * </div>\n   * ```\n   *\n   * We end up with two `TView`s.\n   * - `parent` `TView` which contains `<div><!-- anchor --></div>`\n   * - `child` `TView` which contains `<span></span>`\n   *\n   * Typically the `child` is inserted into the declaration location of the `parent`, but it can be\n   * inserted anywhere. Because it can be inserted anywhere it is not possible to store the\n   * insertion information in the `TView` and instead we must store it in the `LView[T_HOST]`.\n   *\n   * So to determine where is our insertion parent we would execute:\n   * ```ts\n   * const parentLView = lView[PARENT];\n   * const parentTNode = lView[T_HOST];\n   * const insertionParent = parentLView[parentTNode.index];\n   * ```\n   *\n   *\n   * If `null`, this is the root view of an application (root component is in this view) and it has\n   * no parents.\n   */\n  [T_HOST]: TNode | null;\n\n  /**\n   * When a view is destroyed, listeners need to be released and outputs need to be\n   * unsubscribed. This context array stores both listener functions wrapped with\n   * their context and output subscription instances for a particular view.\n   *\n   * These change per LView instance, so they cannot be stored on TView. Instead,\n   * TView.cleanup saves an index to the necessary context in this array.\n   *\n   * After `LView` is created it is possible to attach additional instance specific functions at the\n   * end of the `lView[CLEANUP]` because we know that no more `T` level cleanup functions will be\n   * added here.\n   */\n  [CLEANUP]: any[] | null;\n\n  /**\n   * - For dynamic views, this is the context with which to render the template (e.g.\n   *   `NgForContext`), or `{}` if not defined explicitly.\n   * - For root view of the root component it's a reference to the component instance itself.\n   * - For components, the context is a reference to the component instance itself.\n   * - For inline views, the context is null.\n   */\n  [CONTEXT]: T;\n\n  /** A Module Injector to be used as fall back after Element Injectors are consulted. */\n  readonly [INJECTOR]: Injector;\n\n  /**\n   * Contextual data that is shared across multiple instances of `LView` in the same application.\n   */\n  [ENVIRONMENT]: LViewEnvironment;\n\n  /** Renderer to be used for this view. */\n  [RENDERER]: Renderer;\n\n  /**\n   * Reference to the first LView or LContainer beneath this LView in\n   * the hierarchy.\n   *\n   * Necessary to store this so views can traverse through their nested views\n   * to remove listeners and call onDestroy callbacks.\n   */\n  [CHILD_HEAD]: LView | LContainer | null;\n\n  /**\n   * The last LView or LContainer beneath this LView in the hierarchy.\n   *\n   * The tail allows us to quickly add a new state to the end of the view list\n   * without having to propagate starting from the first child.\n   */\n  [CHILD_TAIL]: LView | LContainer | null;\n\n  /**\n   * View where this view's template was declared.\n   *\n   * The template for a dynamically created view may be declared in a different view than\n   * it is inserted. We already track the \"insertion view\" (view where the template was\n   * inserted) in LView[PARENT], but we also need access to the \"declaration view\"\n   * (view where the template was declared). Otherwise, we wouldn't be able to call the\n   * view's template function with the proper contexts. Context should be inherited from\n   * the declaration view tree, not the insertion view tree.\n   *\n   * Example (AppComponent template):\n   *\n   * <ng-template #foo></ng-template>       <-- declared here -->\n   * <some-comp [tpl]=\"foo\"></some-comp>    <-- inserted inside this component -->\n   *\n   * The <ng-template> above is declared in the AppComponent template, but it will be passed into\n   * SomeComp and inserted there. In this case, the declaration view would be the AppComponent,\n   * but the insertion view would be SomeComp. When we are removing views, we would want to\n   * traverse through the insertion view to clean up listeners. When we are calling the\n   * template function during change detection, we need the declaration view to get inherited\n   * context.\n   */\n  [DECLARATION_VIEW]: LView | null;\n\n  /**\n   * Points to the declaration component view, used to track transplanted `LView`s.\n   *\n   * See: `DECLARATION_VIEW` which points to the actual `LView` where it was declared, whereas\n   * `DECLARATION_COMPONENT_VIEW` points to the component which may not be same as\n   * `DECLARATION_VIEW`.\n   *\n   * Example:\n   * ```html\n   * <#VIEW #myComp>\n   *  <div *ngIf=\"true\">\n   *   <ng-template #myTmpl>...</ng-template>\n   *  </div>\n   * </#VIEW>\n   * ```\n   * In the above case `DECLARATION_VIEW` for `myTmpl` points to the `LView` of `ngIf` whereas\n   * `DECLARATION_COMPONENT_VIEW` points to `LView` of the `myComp` which owns the template.\n   *\n   * The reason for this is that all embedded views are always check-always whereas the component\n   * view can be check-always or on-push. When we have a transplanted view it is important to\n   * determine if we have transplanted a view from check-always declaration to on-push insertion\n   * point. In such a case the transplanted view needs to be added to the `LContainer` in the\n   * declared `LView` and CD during the declared view CD (in addition to the CD at the insertion\n   * point.) (Any transplanted views which are intra Component are of no interest because the CD\n   * strategy of declaration and insertion will always be the same, because it is the same\n   * component.)\n   *\n   * Queries already track moved views in `LView[DECLARATION_LCONTAINER]` and\n   * `LContainer[MOVED_VIEWS]`. However the queries also track `LView`s which moved within the same\n   * component `LView`. Transplanted views are a subset of moved views, and we use\n   * `DECLARATION_COMPONENT_VIEW` to differentiate them. As in this example.\n   *\n   * Example showing intra component `LView` movement.\n   * ```html\n   * <#VIEW #myComp>\n   *   <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n   *   <ng-template #thenBlock>Content to render when condition is true.</ng-template>\n   *   <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n   * </#VIEW>\n   * ```\n   * The `thenBlock` and `elseBlock` is moved but not transplanted.\n   *\n   * Example showing inter component `LView` movement (transplanted view).\n   * ```html\n   * <#VIEW #myComp>\n   *   <ng-template #myTmpl>...</ng-template>\n   *   <insertion-component [template]=\"myTmpl\"></insertion-component>\n   * </#VIEW>\n   * ```\n   * In the above example `myTmpl` is passed into a different component. If `insertion-component`\n   * instantiates `myTmpl` and `insertion-component` is on-push then the `LContainer` needs to be\n   * marked as containing transplanted views and those views need to be CD as part of the\n   * declaration CD.\n   *\n   *\n   * When change detection runs, it iterates over `[MOVED_VIEWS]` and CDs any child `LView`s where\n   * the `DECLARATION_COMPONENT_VIEW` of the current component and the child `LView` does not match\n   * (it has been transplanted across components.)\n   *\n   * Note: `[DECLARATION_COMPONENT_VIEW]` points to itself if the LView is a component view (the\n   *       simplest / most common case).\n   *\n   * see also:\n   *   - https://hackmd.io/@mhevery/rJUJsvv9H write up of the problem\n   *   - `LContainer[HAS_TRANSPLANTED_VIEWS]` which marks which `LContainer` has transplanted views.\n   *   - `LContainer[TRANSPLANT_HEAD]` and `LContainer[TRANSPLANT_TAIL]` storage for transplanted\n   *   - `LView[DECLARATION_LCONTAINER]` similar problem for queries\n   *   - `LContainer[MOVED_VIEWS]` similar problem for queries\n   */\n  [DECLARATION_COMPONENT_VIEW]: LView;\n\n  /**\n   * A declaration point of embedded views (ones instantiated based on the content of a\n   * <ng-template>), null for other types of views.\n   *\n   * We need to track all embedded views created from a given declaration point so we can prepare\n   * query matches in a proper order (query matches are ordered based on their declaration point and\n   * _not_ the insertion point).\n   */\n  [DECLARATION_LCONTAINER]: LContainer | null;\n\n  /**\n   * More flags for this view. See PreOrderHookFlags for more info.\n   */\n  [PREORDER_HOOK_FLAGS]: PreOrderHookFlags;\n\n  /** Unique ID of the view. Used for `__ngContext__` lookups in the `LView` registry. */\n  [ID]: number;\n\n  /**\n   * A container related to hydration annotation information that's associated with this LView.\n   */\n  [HYDRATION]: DehydratedView | null;\n\n  /**\n   * Optional injector assigned to embedded views that takes\n   * precedence over the element and module injectors.\n   */\n  readonly [EMBEDDED_VIEW_INJECTOR]: Injector | null;\n\n  /**\n   * Effect scheduling operations that need to run during this views's update pass.\n   */\n  [EFFECTS_TO_SCHEDULE]: Array<() => void> | null;\n\n  [EFFECTS]: Set<ViewEffectNode> | null;\n\n  /**\n   * A collection of callbacks functions that are executed when a given LView is destroyed. Those\n   * are user defined, LView-specific destroy callbacks that don't have any corresponding TView\n   * entries.\n   */\n  [ON_DESTROY_HOOKS]: Array<() => void> | null;\n\n  /**\n   * The `Consumer` for this `LView`'s template so that signal reads can be tracked.\n   *\n   * This is initially `null` and gets assigned a consumer after template execution\n   * if any signals were read.\n   */\n  [REACTIVE_TEMPLATE_CONSUMER]: ReactiveLViewConsumer | null;\n\n  // AfterRenderSequences that need to be scheduled\n  [AFTER_RENDER_SEQUENCES_TO_ADD]: AfterRenderSequence[] | null;\n}\n\n/**\n * Contextual data that is shared across multiple instances of `LView` in the same application.\n */\nexport interface LViewEnvironment {\n  /** Factory to be used for creating Renderer. */\n  rendererFactory: RendererFactory;\n\n  /** An optional custom sanitizer. */\n  sanitizer: Sanitizer | null;\n\n  /** Scheduler for change detection to notify when application state changes. */\n  changeDetectionScheduler: ChangeDetectionScheduler | null;\n}\n\n/** Flags associated with an LView (saved in LView[FLAGS]) */\nexport const enum LViewFlags {\n  /** The state of the init phase on the first 2 bits */\n  InitPhaseStateIncrementer = 0b00000000001,\n  InitPhaseStateMask = 0b00000000011,\n\n  /**\n   * Whether or not the view is in creationMode.\n   *\n   * This must be stored in the view rather than using `data` as a marker so that\n   * we can properly support embedded views. Otherwise, when exiting a child view\n   * back into the parent view, `data` will be defined and `creationMode` will be\n   * improperly reported as false.\n   */\n  CreationMode = 1 << 2,\n\n  /**\n   * Whether or not this LView instance is on its first processing pass.\n   *\n   * An LView instance is considered to be on its \"first pass\" until it\n   * has completed one creation mode run and one update mode run. At this\n   * time, the flag is turned off.\n   */\n  FirstLViewPass = 1 << 3,\n\n  /** Whether this view has default change detection strategy (checks always) or onPush */\n  CheckAlways = 1 << 4,\n\n  /** Whether there are any i18n blocks inside this LView. */\n  HasI18n = 1 << 5,\n\n  /** Whether or not this view is currently dirty (needing check) */\n  Dirty = 1 << 6,\n\n  /** Whether or not this view is currently attached to change detection tree. */\n  Attached = 1 << 7,\n\n  /** Whether or not this view is destroyed. */\n  Destroyed = 1 << 8,\n\n  /** Whether or not this view is the root view */\n  IsRoot = 1 << 9,\n\n  /**\n   * Whether this moved LView needs to be refreshed. Similar to the Dirty flag, but used for\n   * transplanted and signal views where the parent/ancestor views are not marked dirty as well.\n   * i.e. \"Refresh just this view\". Used in conjunction with the HAS_CHILD_VIEWS_TO_REFRESH\n   * flag.\n   */\n  RefreshView = 1 << 10,\n\n  /** Indicates that the view **or any of its ancestors** have an embedded view injector. */\n  HasEmbeddedViewInjector = 1 << 11,\n\n  /** Indicates that the view was created with `signals: true`. */\n  SignalView = 1 << 12,\n\n  /**\n   * Indicates that this LView has a view underneath it that needs to be refreshed during change\n   * detection. This flag indicates that even if this view is not dirty itself, we still need to\n   * traverse its children during change detection.\n   */\n  HasChildViewsToRefresh = 1 << 13,\n\n  /**\n   * This is the count of the bits the 1 was shifted above (base 10)\n   */\n  IndexWithinInitPhaseShift = 14,\n\n  /**\n   * Index of the current init phase on last 21 bits\n   */\n  IndexWithinInitPhaseIncrementer = 1 << IndexWithinInitPhaseShift,\n\n  // Subtracting 1 gives all 1s to the right of the initial shift\n  // So `(1 << 3) - 1` would give 3 1s: 1 << 3 = 0b01000, subtract 1 = 0b00111\n  IndexWithinInitPhaseReset = (1 << IndexWithinInitPhaseShift) - 1,\n}\n\n/**\n * Possible states of the init phase:\n * - 00: OnInit hooks to be run.\n * - 01: AfterContentInit hooks to be run\n * - 10: AfterViewInit hooks to be run\n * - 11: All init hooks have been run\n */\nexport const enum InitPhaseState {\n  OnInitHooksToBeRun = 0b00,\n  AfterContentInitHooksToBeRun = 0b01,\n  AfterViewInitHooksToBeRun = 0b10,\n  InitPhaseCompleted = 0b11,\n}\n\n/** More flags associated with an LView (saved in LView[PREORDER_HOOK_FLAGS]) */\nexport const enum PreOrderHookFlags {\n  /**\n     The index of the next pre-order hook to be called in the hooks array, on the first 16\n     bits\n   */\n  IndexOfTheNextPreOrderHookMaskMask = 0b01111111111111111,\n\n  /**\n   * The number of init hooks that have already been called, on the last 16 bits\n   */\n  NumberOfInitHooksCalledIncrementer = 0b010000000000000000,\n  NumberOfInitHooksCalledShift = 16,\n  NumberOfInitHooksCalledMask = 0b11111111111111110000000000000000,\n}\n\n/**\n * Stores a set of OpCodes to process `HostBindingsFunction` associated with a current view.\n *\n * In order to invoke `HostBindingsFunction` we need:\n * 1. 'elementIdx`: Index to the element associated with the `HostBindingsFunction`.\n * 2. 'directiveIdx`: Index to the directive associated with the `HostBindingsFunction`. (This will\n *    become the context for the `HostBindingsFunction` invocation.)\n * 3. `bindingRootIdx`: Location where the bindings for the `HostBindingsFunction` start. Internally\n *    `HostBindingsFunction` binding indexes start from `0` so we need to add `bindingRootIdx` to\n *    it.\n * 4. `HostBindingsFunction`: A host binding function to execute.\n *\n * The above information needs to be encoded into the `HostBindingOpCodes` in an efficient manner.\n *\n * 1. `elementIdx` is encoded into the `HostBindingOpCodes` as `~elementIdx` (so a negative number);\n * 2. `directiveIdx`\n * 3. `bindingRootIdx`\n * 4. `HostBindingsFunction` is passed in as is.\n *\n * The `HostBindingOpCodes` array contains:\n * - negative number to select the element index.\n * - followed by 1 or more of:\n *    - a number to select the directive index\n *    - a number to select the bindingRoot index\n *    - and a function to invoke.\n *\n * ## Example\n *\n * ```ts\n * const hostBindingOpCodes = [\n *   ~30,                               // Select element 30\n *   40, 45, MyDir.ɵdir.hostBindings    // Invoke host bindings on MyDir on element 30;\n *                                      // directiveIdx = 40; bindingRootIdx = 45;\n *   50, 55, OtherDir.ɵdir.hostBindings // Invoke host bindings on OtherDire on element 30\n *                                      // directiveIdx = 50; bindingRootIdx = 55;\n * ]\n * ```\n *\n * ## Pseudocode\n * ```ts\n * const hostBindingOpCodes = tView.hostBindingOpCodes;\n * if (hostBindingOpCodes === null) return;\n * for (let i = 0; i < hostBindingOpCodes.length; i++) {\n *   const opCode = hostBindingOpCodes[i] as number;\n *   if (opCode < 0) {\n *     // Negative numbers are element indexes.\n *     setSelectedIndex(~opCode);\n *   } else {\n *     // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n *     const directiveIdx = opCode;\n *     const bindingRootIndx = hostBindingOpCodes[++i] as number;\n *     const hostBindingFn = hostBindingOpCodes[++i] as HostBindingsFunction<any>;\n *     setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n *     const context = lView[directiveIdx];\n *     hostBindingFn(RenderFlags.Update, context);\n *   }\n * }\n * ```\n *\n */\nexport interface HostBindingOpCodes extends Array<number | HostBindingsFunction<any>> {\n  __brand__: 'HostBindingOpCodes';\n  debug?: string[];\n}\n\n/**\n * Explicitly marks `TView` as a specific type in `ngDevMode`\n *\n * It is useful to know conceptually what time of `TView` we are dealing with when\n * debugging an application (even if the runtime does not need it.) For this reason\n * we store this information in the `ngDevMode` `TView` and than use it for\n * better debugging experience.\n */\nexport const enum TViewType {\n  /**\n   * Root `TView` is the used to bootstrap components into. It is used in conjunction with\n   * `LView` which takes an existing DOM node not owned by Angular and wraps it in `TView`/`LView`\n   * so that other components can be loaded into it.\n   */\n  Root = 0,\n\n  /**\n   * `TView` associated with a Component. This would be the `TView` directly associated with the\n   * component view (as opposed an `Embedded` `TView` which would be a child of `Component` `TView`)\n   */\n  Component = 1,\n\n  /**\n   * `TView` associated with a template. Such as `*ngIf`, `<ng-template>` etc... A `Component`\n   * can have zero or more `Embedded` `TView`s.\n   */\n  Embedded = 2,\n}\n\n/**\n * The static data for an LView (shared between all templates of a\n * given type).\n *\n * Stored on the `ComponentDef.tView`.\n */\nexport interface TView {\n  /**\n   * Type of `TView` (`Root`|`Component`|`Embedded`).\n   */\n  type: TViewType;\n\n  /**\n   * This is a blueprint used to generate LView instances for this TView. Copying this\n   * blueprint is faster than creating a new LView from scratch.\n   */\n  blueprint: LView;\n\n  /**\n   * The template function used to refresh the view of dynamically created views\n   * and components. Will be null for inline views.\n   */\n  template: ComponentTemplate<{}> | null;\n\n  /**\n   * A function containing query-related instructions.\n   */\n  viewQuery: ViewQueriesFunction<{}> | null;\n\n  /**\n   * A `TNode` representing the declaration location of this `TView` (not part of this TView).\n   */\n  declTNode: TNode | null;\n\n  // FIXME(misko): Why does `TView` not have `declarationTView` property?\n\n  /** Whether or not this template has been processed in creation mode. */\n  firstCreatePass: boolean;\n\n  /**\n   *  Whether or not this template has been processed in update mode (e.g. change detected)\n   *\n   * `firstUpdatePass` is used by styling to set up `TData` to contain metadata about the styling\n   * instructions. (Mainly to build up a linked list of styling priority order.)\n   *\n   * Typically this function gets cleared after first execution. If exception is thrown then this\n   * flag can remain turned un until there is first successful (no exception) pass. This means that\n   * individual styling instructions keep track of if they have already been added to the linked\n   * list to prevent double adding.\n   */\n  firstUpdatePass: boolean;\n\n  /** Static data equivalent of LView.data[]. Contains TNodes, PipeDefInternal or TI18n. */\n  data: TData;\n\n  /**\n   * The binding start index is the index at which the data array\n   * starts to store bindings only. Saving this value ensures that we\n   * will begin reading bindings at the correct point in the array when\n   * we are in update mode.\n   *\n   * -1 means that it has not been initialized.\n   */\n  bindingStartIndex: number;\n\n  /**\n   * The index where the \"expando\" section of `LView` begins. The expando\n   * section contains injectors, directive instances, and host binding values.\n   * Unlike the \"decls\" and \"vars\" sections of `LView`, the length of this\n   * section cannot be calculated at compile-time because directives are matched\n   * at runtime to preserve locality.\n   *\n   * We store this start index so we know where to start checking host bindings\n   * in `setHostBindings`.\n   */\n  expandoStartIndex: number;\n\n  /**\n   * Whether or not there are any static view queries tracked on this view.\n   *\n   * We store this so we know whether or not we should do a view query\n   * refresh after creation mode to collect static query results.\n   */\n  staticViewQueries: boolean;\n\n  /**\n   * Whether or not there are any static content queries tracked on this view.\n   *\n   * We store this so we know whether or not we should do a content query\n   * refresh after creation mode to collect static query results.\n   */\n  staticContentQueries: boolean;\n\n  /**\n   * A reference to the first child node located in the view.\n   */\n  firstChild: TNode | null;\n\n  /**\n   * Stores the OpCodes to be replayed during change-detection to process the `HostBindings`\n   *\n   * See `HostBindingOpCodes` for encoding details.\n   */\n  hostBindingOpCodes: HostBindingOpCodes | null;\n\n  /**\n   * Full registry of directives and components that may be found in this view.\n   *\n   * It's necessary to keep a copy of the full def list on the TView so it's possible\n   * to render template functions without a host component.\n   */\n  directiveRegistry: DirectiveDefList | null;\n\n  /**\n   * Full registry of pipes that may be found in this view.\n   *\n   * The property is either an array of `PipeDefs`s or a function which returns the array of\n   * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n   *\n   * It's necessary to keep a copy of the full def list on the TView so it's possible\n   * to render template functions without a host component.\n   */\n  pipeRegistry: PipeDefList | null;\n\n  /**\n   * Array of ngOnInit, ngOnChanges and ngDoCheck hooks that should be executed for this view in\n   * creation mode.\n   *\n   * This array has a flat structure and contains TNode indices, directive indices (where an\n   * instance can be found in `LView`) and hook functions. TNode index is followed by the directive\n   * index and a hook function. If there are multiple hooks for a given TNode, the TNode index is\n   * not repeated and the next lifecycle hook information is stored right after the previous hook\n   * function. This is done so that at runtime the system can efficiently iterate over all of the\n   * functions to invoke without having to make any decisions/lookups.\n   */\n  preOrderHooks: HookData | null;\n\n  /**\n   * Array of ngOnChanges and ngDoCheck hooks that should be executed for this view in update mode.\n   *\n   * This array has the same structure as the `preOrderHooks` one.\n   */\n  preOrderCheckHooks: HookData | null;\n\n  /**\n   * Array of ngAfterContentInit and ngAfterContentChecked hooks that should be executed\n   * for this view in creation mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  contentHooks: HookData | null;\n\n  /**\n   * Array of ngAfterContentChecked hooks that should be executed for this view in update\n   * mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  contentCheckHooks: HookData | null;\n\n  /**\n   * Array of ngAfterViewInit and ngAfterViewChecked hooks that should be executed for\n   * this view in creation mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  viewHooks: HookData | null;\n\n  /**\n   * Array of ngAfterViewChecked hooks that should be executed for this view in\n   * update mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  viewCheckHooks: HookData | null;\n\n  /**\n   * Array of ngOnDestroy hooks that should be executed when this view is destroyed.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  destroyHooks: DestroyHookData | null;\n\n  /**\n   * When a view is destroyed, listeners need to be released and outputs need to be\n   * unsubscribed. This cleanup array stores both listener data (in chunks of 4)\n   * and output data (in chunks of 2) for a particular view. Combining the arrays\n   * saves on memory (70 bytes per array) and on a few bytes of code size (for two\n   * separate for loops).\n   *\n   * If it's a native DOM listener or output subscription being stored:\n   * 1st index is: event name  `name = tView.cleanup[i+0]`\n   * 2nd index is: index of native element or a function that retrieves global target (window,\n   *               document or body) reference based on the native element:\n   *    `typeof idxOrTargetGetter === 'function'`: global target getter function\n   *    `typeof idxOrTargetGetter === 'number'`: index of native element\n   *\n   * 3rd index is: index of listener function `listener = lView[CLEANUP][tView.cleanup[i+2]]`\n   * 4th index is: `useCaptureOrIndx = tView.cleanup[i+3]`\n   *    `typeof useCaptureOrIndx == 'boolean' : useCapture boolean\n   *    `typeof useCaptureOrIndx == 'number':\n   *         `useCaptureOrIndx >= 0` `removeListener = LView[CLEANUP][useCaptureOrIndx]`\n   *         `useCaptureOrIndx <  0` `subscription = LView[CLEANUP][-useCaptureOrIndx]`\n   *\n   * If it's an output subscription or query list destroy hook:\n   * 1st index is: output unsubscribe function / query list destroy function\n   * 2nd index is: index of function context in LView.cleanupInstances[]\n   *               `tView.cleanup[i+0].call(lView[CLEANUP][tView.cleanup[i+1]])`\n   */\n  cleanup: any[] | null;\n\n  /**\n   * A list of element indices for child components that will need to be\n   * refreshed when the current view has finished its check. These indices have\n   * already been adjusted for the HEADER_OFFSET.\n   *\n   */\n  components: number[] | null;\n\n  /**\n   * A collection of queries tracked in a given view.\n   */\n  queries: TQueries | null;\n\n  /**\n   * An array of indices pointing to directives with content queries alongside with the\n   * corresponding query index. Each entry in this array is a tuple of:\n   * - index of the first content query index declared by a given directive;\n   * - index of a directive.\n   *\n   * We are storing those indexes so we can refresh content queries as part of a view refresh\n   * process.\n   */\n  contentQueries: number[] | null;\n\n  /**\n   * Set of schemas that declare elements to be allowed inside the view.\n   */\n  schemas: SchemaMetadata[] | null;\n\n  /**\n   * Array of constants for the view. Includes attribute arrays, local definition arrays etc.\n   * Used for directive matching, attribute bindings, local definitions and more.\n   */\n  consts: TConstants | null;\n\n  /**\n   * Indicates that there was an error before we managed to complete the first create pass of the\n   * view. This means that the view is likely corrupted and we should try to recover it.\n   */\n  incompleteFirstPass: boolean;\n\n  /**\n   * Unique id of this TView for hydration purposes:\n   * - TViewType.Embedded: a unique id generated during serialization on the server\n   * - TViewType.Component: an id generated based on component properties\n   *                        (see `getComponentId` function for details)\n   */\n  ssrId: string | null;\n}\n\n/** Single hook callback function. */\nexport type HookFn = () => void;\n\n/**\n * Information necessary to call a hook. E.g. the callback that\n * needs to invoked and the index at which to find its context.\n */\nexport type HookEntry = number | HookFn;\n\n/**\n * Array of hooks that should be executed for a view and their directive indices.\n *\n * For each node of the view, the following data is stored:\n * 1) Node index (optional)\n * 2) A series of number/function pairs where:\n *  - even indices are directive indices\n *  - odd indices are hook functions\n *\n * Special cases:\n *  - a negative directive index flags an init hook (ngOnInit, ngAfterContentInit, ngAfterViewInit)\n */\nexport type HookData = HookEntry[];\n\n/**\n * Array of destroy hooks that should be executed for a view and their directive indices.\n *\n * The array is set up as a series of number/function or number/(number|function)[]:\n * - Even indices represent the context with which hooks should be called.\n * - Odd indices are the hook functions themselves. If a value at an odd index is an array,\n *   it represents the destroy hooks of a `multi` provider where:\n *     - Even indices represent the index of the provider for which we've registered a destroy hook,\n *       inside of the `multi` provider array.\n *     - Odd indices are the destroy hook functions.\n * For example:\n * LView: `[0, 1, 2, AService, 4, [BService, CService, DService]]`\n * destroyHooks: `[3, AService.ngOnDestroy, 5, [0, BService.ngOnDestroy, 2, DService.ngOnDestroy]]`\n *\n * In the example above `AService` is a type provider with an `ngOnDestroy`, whereas `BService`,\n * `CService` and `DService` are part of a `multi` provider where only `BService` and `DService`\n * have an `ngOnDestroy` hook.\n */\nexport type DestroyHookData = (HookEntry | HookData)[];\n\n/**\n * Static data that corresponds to the instance-specific data array on an LView.\n *\n * Each node's static data is stored in tData at the same index that it's stored\n * in the data array.  Any nodes that do not have static data store a null value in\n * tData to avoid a sparse array.\n *\n * Each pipe's definition is stored here at the same index as its pipe instance in\n * the data array.\n *\n * Each host property's name is stored here at the same index as its value in the\n * data array.\n *\n * Each property binding name is stored here at the same index as its value in\n * the data array. If the binding is an interpolation, the static string values\n * are stored parallel to the dynamic values. Example:\n *\n * id=\"prefix {{ v0 }} a {{ v1 }} b {{ v2 }} suffix\"\n *\n * LView       |   TView.data\n *------------------------\n *  v0 value   |   'a'\n *  v1 value   |   'b'\n *  v2 value   |   id � prefix � suffix\n *\n * Injector bloom filters are also stored here.\n */\nexport type TData = (\n  | TNode\n  | PipeDef<any>\n  | DirectiveDef<any>\n  | ComponentDef<any>\n  | number\n  | TStylingRange\n  | TStylingKey\n  | ProviderToken<any>\n  | TI18n\n  | I18nUpdateOpCodes\n  | TIcu\n  | null\n  | string\n  | TDeferBlockDetails\n)[];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DehydratedContainerView} from '../../hydration/interfaces';\n\nimport {TNode} from './node';\nimport {RComment, RElement} from './renderer_dom';\nimport {FLAGS, HOST, LView, NEXT, PARENT, T_HOST} from './view';\n\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n */\nexport const TYPE = 1;\n\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\n\n// FLAGS, PARENT, NEXT, and T_HOST are indices 2, 3, 4, and 5\n// As we already have these constants in LView, we don't need to re-create them.\n\nexport const DEHYDRATED_VIEWS = 6;\nexport const NATIVE = 7;\nexport const VIEW_REFS = 8;\nexport const MOVED_VIEWS = 9;\n\n/**\n * Size of LContainer's header. Represents the index after which all views in the\n * container will be inserted. We need to keep a record of current views so we know\n * which views are already in the DOM (and don't need to be re-added) and so we can\n * remove views from the DOM when they are no longer required.\n */\nexport const CONTAINER_HEADER_OFFSET = 10;\n\n/**\n * The state associated with a container.\n *\n * This is an array so that its structure is closer to LView. This helps\n * when traversing the view tree (which is a mix of containers and component\n * views), so we can jump to viewOrContainer[NEXT] in the same way regardless\n * of type.\n */\nexport interface LContainer extends Array<any> {\n  /**\n   * The host element of this LContainer.\n   *\n   * The host could be an LView if this container is on a component node.\n   * In that case, the component LView is its HOST.\n   */\n  readonly [HOST]: RElement | RComment | LView;\n\n  /**\n   * This is a type field which allows us to differentiate `LContainer` from `StylingContext` in an\n   * efficient way. The value is always set to `true`\n   */\n  [TYPE]: true;\n\n  /** Flags for this container. See LContainerFlags for more info. */\n  [FLAGS]: LContainerFlags;\n\n  /**\n   * Access to the parent view is necessary so we can propagate back\n   * up from inside a container to parent[NEXT].\n   */\n  [PARENT]: LView;\n\n  /**\n   * This allows us to jump from a container to a sibling container or component\n   * view with the same parent, so we can remove listeners efficiently.\n   */\n  [NEXT]: LView | LContainer | null;\n\n  /**\n   * A collection of views created based on the underlying `<ng-template>` element but inserted into\n   * a different `LContainer`. We need to track views created from a given declaration point since\n   * queries collect matches from the embedded view declaration point and _not_ the insertion point.\n   */\n  [MOVED_VIEWS]: LView[] | null;\n\n  /**\n   * Pointer to the `TNode` which represents the host of the container.\n   */\n  [T_HOST]: TNode;\n\n  /** The comment element that serves as an anchor for this LContainer. */\n  [NATIVE]: RComment;\n\n  /**\n   * Array of `ViewRef`s used by any `ViewContainerRef`s that point to this container.\n   *\n   * This is lazily initialized by `ViewContainerRef` when the first view is inserted.\n   *\n   * NOTE: This is stored as `any[]` because render3 should really not be aware of `ViewRef` and\n   * doing so creates circular dependency.\n   */\n  [VIEW_REFS]: unknown[] | null;\n\n  /**\n   * Array of dehydrated views within this container.\n   *\n   * This information is used during the hydration process on the client.\n   * The hydration logic tries to find a matching dehydrated view, \"claim\" it\n   * and use this information to do further matching. After that, this \"claimed\"\n   * view is removed from the list. The remaining \"unclaimed\" views are\n   * \"garbage-collected\" later on, i.e. removed from the DOM once the hydration\n   * logic finishes.\n   */\n  [DEHYDRATED_VIEWS]: DehydratedContainerView[] | null;\n}\n\n/** Flags associated with an LContainer (saved in LContainer[FLAGS]) */\nexport const enum LContainerFlags {\n  None = 0,\n  /**\n   * Flag to signify that this `LContainer` may have transplanted views which need to be change\n   * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.\n   *\n   * This flag, once set, is never unset for the `LContainer`.\n   */\n  HasTransplantedViews = 1 << 1,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {LContainer, TYPE} from './container';\nimport {ComponentDef, DirectiveDef} from './definition';\nimport {TNode, TNodeFlags, TNodeType} from './node';\nimport {RNode} from './renderer_dom';\nimport {FLAGS, LView, LViewFlags} from './view';\n\n/**\n * True if `value` is `LView`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function isLView(value: RNode | LView | LContainer | {} | null): value is LView {\n  return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n\n/**\n * True if `value` is `LContainer`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function isLContainer(value: RNode | LView | LContainer | {} | null): value is LContainer {\n  return Array.isArray(value) && value[TYPE] === true;\n}\n\nexport function isContentQueryHost(tNode: TNode): boolean {\n  return (tNode.flags & TNodeFlags.hasContentQuery) !== 0;\n}\n\nexport function isComponentHost(tNode: TNode): boolean {\n  return tNode.componentOffset > -1;\n}\n\nexport function isDirectiveHost(tNode: TNode): boolean {\n  return (tNode.flags & TNodeFlags.isDirectiveHost) === TNodeFlags.isDirectiveHost;\n}\n\nexport function isComponentDef<T>(def: DirectiveDef<T>): def is ComponentDef<T> {\n  return !!(def as ComponentDef<T>).template;\n}\n\nexport function isRootView(target: LView): boolean {\n  // Determines whether a given LView is marked as a root view.\n  return (target[FLAGS] & LViewFlags.IsRoot) !== 0;\n}\n\nexport function isProjectionTNode(tNode: TNode): boolean {\n  return (tNode.type & TNodeType.Projection) === TNodeType.Projection;\n}\n\nexport function hasI18n(lView: LView): boolean {\n  return (lView[FLAGS] & LViewFlags.HasI18n) === LViewFlags.HasI18n;\n}\n\nexport function isDestroyed(lView: LView): boolean {\n  // Determines whether a given LView is marked as destroyed.\n  return (lView[FLAGS] & LViewFlags.Destroyed) === LViewFlags.Destroyed;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\n *\n * @see {@link OnChanges}\n *\n * @publicApi\n */\nexport class SimpleChange {\n  constructor(\n    public previousValue: any,\n    public currentValue: any,\n    public firstChange: boolean,\n  ) {}\n  /**\n   * Check whether the new value is the first value assigned.\n   */\n  isFirstChange(): boolean {\n    return this.firstChange;\n  }\n}\n\n/**\n * A hashtable of changes represented by {@link SimpleChange} objects stored\n * at the declared property name they belong to on a Directive or Component. This is\n * the type passed to the `ngOnChanges` hook.\n *\n * @see {@link OnChanges}\n *\n * @publicApi\n */\nexport interface SimpleChanges {\n  [propName: string]: SimpleChange;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InputSignalNode} from '../authoring/input/input_signal_node';\n\nexport function applyValueToInputField<T>(\n  instance: T,\n  inputSignalNode: null | InputSignalNode<unknown, unknown>,\n  privateName: string,\n  value: unknown,\n) {\n  if (inputSignalNode !== null) {\n    inputSignalNode.applyValueToInputSignal(inputSignalNode, value);\n  } else {\n    (instance as any)[privateName] = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InputSignalNode} from '../../authoring/input/input_signal_node';\nimport {OnChanges} from '../../interface/lifecycle_hooks';\nimport {SimpleChange, SimpleChanges} from '../../interface/simple_change';\nimport {assertString} from '../../util/assert';\nimport {EMPTY_OBJ} from '../../util/empty';\nimport {applyValueToInputField} from '../apply_value_input_field';\nimport {DirectiveDef, DirectiveDefFeature} from '../interfaces/definition';\n\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```ts\n * static ɵcmp = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n *\n * @codeGenApi\n */\nexport const ɵɵNgOnChangesFeature: () => DirectiveDefFeature = /* @__PURE__ */ (() => {\n  const ɵɵNgOnChangesFeatureImpl = () => NgOnChangesFeatureImpl;\n\n  // This option ensures that the ngOnChanges lifecycle hook will be inherited\n  // from superclasses (in InheritDefinitionFeature).\n  /** @nocollapse */\n  ɵɵNgOnChangesFeatureImpl.ngInherit = true;\n\n  return ɵɵNgOnChangesFeatureImpl;\n})();\n\nexport function NgOnChangesFeatureImpl<T>(definition: DirectiveDef<T>) {\n  if (definition.type.prototype.ngOnChanges) {\n    definition.setInput = ngOnChangesSetInput;\n  }\n  return rememberChangeHistoryAndInvokeOnChangesHook;\n}\n\n/**\n * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate\n * `ngOnChanges`.\n *\n * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are\n * found it invokes `ngOnChanges` on the component instance.\n *\n * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,\n *     it is guaranteed to be called with component instance.\n */\nfunction rememberChangeHistoryAndInvokeOnChangesHook(this: OnChanges) {\n  const simpleChangesStore = getSimpleChangesStore(this);\n  const current = simpleChangesStore?.current;\n\n  if (current) {\n    const previous = simpleChangesStore!.previous;\n    if (previous === EMPTY_OBJ) {\n      simpleChangesStore!.previous = current;\n    } else {\n      // New changes are copied to the previous store, so that we don't lose history for inputs\n      // which were not changed this time\n      for (let key in current) {\n        previous[key] = current[key];\n      }\n    }\n    simpleChangesStore!.current = null;\n    this.ngOnChanges(current);\n  }\n}\n\nfunction ngOnChangesSetInput<T>(\n  this: DirectiveDef<T>,\n  instance: T,\n  inputSignalNode: null | InputSignalNode<unknown, unknown>,\n  value: unknown,\n  publicName: string,\n  privateName: string,\n): void {\n  const declaredName = (this.declaredInputs as {[key: string]: string})[publicName];\n  ngDevMode && assertString(declaredName, 'Name of input in ngOnChanges has to be a string');\n  const simpleChangesStore =\n    getSimpleChangesStore(instance) ||\n    setSimpleChangesStore(instance, {previous: EMPTY_OBJ, current: null});\n  const current = simpleChangesStore.current || (simpleChangesStore.current = {});\n  const previous = simpleChangesStore.previous;\n  const previousChange = previous[declaredName];\n  current[declaredName] = new SimpleChange(\n    previousChange && previousChange.currentValue,\n    value,\n    previous === EMPTY_OBJ,\n  );\n\n  applyValueToInputField(instance, inputSignalNode, privateName, value);\n}\n\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\n\nfunction getSimpleChangesStore(instance: any): null | NgSimpleChangesStore {\n  return instance[SIMPLE_CHANGES_STORE] || null;\n}\n\nfunction setSimpleChangesStore(instance: any, store: NgSimpleChangesStore): NgSimpleChangesStore {\n  return (instance[SIMPLE_CHANGES_STORE] = store);\n}\n\n/**\n * Data structure which is monkey-patched on the component instance and used by `ngOnChanges`\n * life-cycle hook to track previous input values.\n */\ninterface NgSimpleChangesStore {\n  previous: SimpleChanges;\n  current: SimpleChanges | null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {type Profiler} from './profiler_types';\n\nlet profilerCallback: Profiler | null = null;\n\n/**\n * Sets the callback function which will be invoked before and after performing certain actions at\n * runtime (for example, before and after running change detection).\n *\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n * The contract of the function might be changed in any release and/or the function can be removed\n * completely.\n *\n * @param profiler function provided by the caller or null value to disable profiling.\n */\nexport const setProfiler = (profiler: Profiler | null) => {\n  profilerCallback = profiler;\n};\n\n/**\n * Profiler function which wraps user code executed by the runtime.\n *\n * @param event ProfilerEvent corresponding to the execution context\n * @param instance component instance\n * @param hookOrListener lifecycle hook function or output listener. The value depends on the\n *  execution context\n * @returns\n */\nexport const profiler: Profiler = function (event, instance = null, hookOrListener) {\n  if (profilerCallback != null /* both `null` and `undefined` */) {\n    profilerCallback(event, instance, hookOrListener);\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport const SVG_NAMESPACE = 'svg';\nexport const MATH_ML_NAMESPACE = 'math';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NotificationSource} from '../../change_detection/scheduling/zoneless_scheduling';\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {\n  assertDefined,\n  assertGreaterThan,\n  assertGreaterThanOrEqual,\n  assertIndexInRange,\n  assertLessThan,\n} from '../../util/assert';\nimport {assertLView, assertTNode, assertTNodeForLView} from '../assert';\nimport {LContainer, TYPE} from '../interfaces/container';\nimport {TConstants, TNode} from '../interfaces/node';\nimport {RNode} from '../interfaces/renderer_dom';\nimport {isDestroyed, isLContainer, isLView} from '../interfaces/type_checks';\nimport {\n  CLEANUP,\n  DECLARATION_VIEW,\n  ENVIRONMENT,\n  FLAGS,\n  HEADER_OFFSET,\n  HOST,\n  LView,\n  LViewFlags,\n  ON_DESTROY_HOOKS,\n  PARENT,\n  PREORDER_HOOK_FLAGS,\n  PreOrderHookFlags,\n  REACTIVE_TEMPLATE_CONSUMER,\n  TData,\n  TView,\n} from '../interfaces/view';\n\n/**\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)\n * in same location in `LView`. This is because we don't want to pre-allocate space for it\n * because the storage is sparse. This file contains utilities for dealing with such data types.\n *\n * How do we know what is stored at a given location in `LView`.\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n *   - `typeof value[TYPE] === 'object'` => `LView`\n *      - This happens when we have a component at a given location\n *   - `typeof value[TYPE] === true` => `LContainer`\n *      - This happens when we have `LContainer` binding at a given location.\n *\n *\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n */\n\n/**\n * Returns `RNode`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function unwrapRNode(value: RNode | LView | LContainer): RNode {\n  while (Array.isArray(value)) {\n    value = value[HOST] as any;\n  }\n  return value as RNode;\n}\n\n/**\n * Returns `LView` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function unwrapLView(value: RNode | LView | LContainer): LView | null {\n  while (Array.isArray(value)) {\n    // This check is same as `isLView()` but we don't call at as we don't want to call\n    // `Array.isArray()` twice and give JITer more work for inlining.\n    if (typeof value[TYPE] === 'object') return value as LView;\n    value = value[HOST] as any;\n  }\n  return null;\n}\n\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\nexport function getNativeByIndex(index: number, lView: LView): RNode {\n  ngDevMode && assertIndexInRange(lView, index);\n  ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');\n  return unwrapRNode(lView[index]);\n}\n\n/**\n * Retrieve an `RNode` for a given `TNode` and `LView`.\n *\n * This function guarantees in dev mode to retrieve a non-null `RNode`.\n *\n * @param tNode\n * @param lView\n */\nexport function getNativeByTNode(tNode: TNode, lView: LView): RNode {\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  ngDevMode && assertIndexInRange(lView, tNode.index);\n  const node: RNode = unwrapRNode(lView[tNode.index]);\n  return node;\n}\n\n/**\n * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.\n *\n * Some `TNode`s don't have associated `RNode`s. For example `Projection`\n *\n * @param tNode\n * @param lView\n */\nexport function getNativeByTNodeOrNull(tNode: TNode | null, lView: LView): RNode | null {\n  const index = tNode === null ? -1 : tNode.index;\n  if (index !== -1) {\n    ngDevMode && assertTNodeForLView(tNode!, lView);\n    const node: RNode | null = unwrapRNode(lView[index]);\n    return node;\n  }\n  return null;\n}\n\n// fixme(misko): The return Type should be `TNode|null`\nexport function getTNode(tView: TView, index: number): TNode {\n  ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n  ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');\n  const tNode = tView.data[index] as TNode;\n  ngDevMode && tNode !== null && assertTNode(tNode);\n  return tNode;\n}\n\n/** Retrieves a value from any `LView` or `TData`. */\nexport function load<T>(view: LView | TData, index: number): T {\n  ngDevMode && assertIndexInRange(view, index);\n  return view[index];\n}\n\nexport function getComponentLViewByIndex(nodeIndex: number, hostView: LView): LView {\n  // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n  ngDevMode && assertIndexInRange(hostView, nodeIndex);\n  const slotValue = hostView[nodeIndex];\n  const lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n  return lView;\n}\n\n/** Checks whether a given view is in creation mode */\nexport function isCreationMode(view: LView): boolean {\n  return (view[FLAGS] & LViewFlags.CreationMode) === LViewFlags.CreationMode;\n}\n\n/**\n * Returns a boolean for whether the view is attached to the change detection tree.\n *\n * Note: This determines whether a view should be checked, not whether it's inserted\n * into a container. For that, you'll want `viewAttachedToContainer` below.\n */\nexport function viewAttachedToChangeDetector(view: LView): boolean {\n  return (view[FLAGS] & LViewFlags.Attached) === LViewFlags.Attached;\n}\n\n/** Returns a boolean for whether the view is attached to a container. */\nexport function viewAttachedToContainer(view: LView): boolean {\n  return isLContainer(view[PARENT]);\n}\n\n/** Returns a constant from `TConstants` instance. */\nexport function getConstant<T>(consts: TConstants | null, index: null | undefined): null;\nexport function getConstant<T>(consts: TConstants, index: number): T | null;\nexport function getConstant<T>(\n  consts: TConstants | null,\n  index: number | null | undefined,\n): T | null;\nexport function getConstant<T>(\n  consts: TConstants | null,\n  index: number | null | undefined,\n): T | null {\n  if (index === null || index === undefined) return null;\n  ngDevMode && assertIndexInRange(consts!, index);\n  return consts![index] as unknown as T;\n}\n\n/**\n * Resets the pre-order hook flags of the view.\n * @param lView the LView on which the flags are reset\n */\nexport function resetPreOrderHookFlags(lView: LView) {\n  lView[PREORDER_HOOK_FLAGS] = 0 as PreOrderHookFlags;\n}\n\n/**\n * Adds the `RefreshView` flag from the lView and updates HAS_CHILD_VIEWS_TO_REFRESH flag of\n * parents.\n */\nexport function markViewForRefresh(lView: LView) {\n  if (lView[FLAGS] & LViewFlags.RefreshView) {\n    return;\n  }\n  lView[FLAGS] |= LViewFlags.RefreshView;\n  if (viewAttachedToChangeDetector(lView)) {\n    markAncestorsForTraversal(lView);\n  }\n}\n\n/**\n * Walks up the LView hierarchy.\n * @param nestingLevel Number of times to walk up in hierarchy.\n * @param currentView View from which to start the lookup.\n */\nexport function walkUpViews(nestingLevel: number, currentView: LView): LView {\n  while (nestingLevel > 0) {\n    ngDevMode &&\n      assertDefined(\n        currentView[DECLARATION_VIEW],\n        'Declaration view should be defined if nesting level is greater than 0.',\n      );\n    currentView = currentView[DECLARATION_VIEW]!;\n    nestingLevel--;\n  }\n  return currentView;\n}\n\nexport function requiresRefreshOrTraversal(lView: LView) {\n  return !!(\n    lView[FLAGS] & (LViewFlags.RefreshView | LViewFlags.HasChildViewsToRefresh) ||\n    lView[REACTIVE_TEMPLATE_CONSUMER]?.dirty\n  );\n}\n\n/**\n * Updates the `HasChildViewsToRefresh` flag on the parents of the `LView` as well as the\n * parents above.\n */\nexport function updateAncestorTraversalFlagsOnAttach(lView: LView) {\n  lView[ENVIRONMENT].changeDetectionScheduler?.notify(NotificationSource.ViewAttached);\n  if (lView[FLAGS] & LViewFlags.Dirty) {\n    lView[FLAGS] |= LViewFlags.RefreshView;\n  }\n  if (requiresRefreshOrTraversal(lView)) {\n    markAncestorsForTraversal(lView);\n  }\n}\n\n/**\n * Ensures views above the given `lView` are traversed during change detection even when they are\n * not dirty.\n *\n * This is done by setting the `HAS_CHILD_VIEWS_TO_REFRESH` flag up to the root, stopping when the\n * flag is already `true` or the `lView` is detached.\n */\nexport function markAncestorsForTraversal(lView: LView) {\n  lView[ENVIRONMENT].changeDetectionScheduler?.notify(NotificationSource.MarkAncestorsForTraversal);\n  let parent = getLViewParent(lView);\n  while (parent !== null) {\n    // We stop adding markers to the ancestors once we reach one that already has the marker. This\n    // is to avoid needlessly traversing all the way to the root when the marker already exists.\n    if (parent[FLAGS] & LViewFlags.HasChildViewsToRefresh) {\n      break;\n    }\n\n    parent[FLAGS] |= LViewFlags.HasChildViewsToRefresh;\n    if (!viewAttachedToChangeDetector(parent)) {\n      break;\n    }\n    parent = getLViewParent(parent);\n  }\n}\n\n/**\n * Stores a LView-specific destroy callback.\n */\nexport function storeLViewOnDestroy(lView: LView, onDestroyCallback: () => void) {\n  if (isDestroyed(lView)) {\n    throw new RuntimeError(\n      RuntimeErrorCode.VIEW_ALREADY_DESTROYED,\n      ngDevMode && 'View has already been destroyed.',\n    );\n  }\n  if (lView[ON_DESTROY_HOOKS] === null) {\n    lView[ON_DESTROY_HOOKS] = [];\n  }\n  lView[ON_DESTROY_HOOKS].push(onDestroyCallback);\n}\n\n/**\n * Removes previously registered LView-specific destroy callback.\n */\nexport function removeLViewOnDestroy(lView: LView, onDestroyCallback: () => void) {\n  if (lView[ON_DESTROY_HOOKS] === null) return;\n\n  const destroyCBIdx = lView[ON_DESTROY_HOOKS].indexOf(onDestroyCallback);\n  if (destroyCBIdx !== -1) {\n    lView[ON_DESTROY_HOOKS].splice(destroyCBIdx, 1);\n  }\n}\n\n/**\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n * that LContainer, which is an LView\n * @param lView the lView whose parent to get\n */\nexport function getLViewParent(lView: LView): LView | null {\n  ngDevMode && assertLView(lView);\n  const parent = lView[PARENT];\n  return isLContainer(parent) ? parent[PARENT] : parent;\n}\n\nexport function getOrCreateLViewCleanup(view: LView): any[] {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return (view[CLEANUP] ??= []);\n}\n\nexport function getOrCreateTViewCleanup(tView: TView): any[] {\n  return (tView.cleanup ??= []);\n}\n\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n */\nexport function storeCleanupWithContext(\n  tView: TView,\n  lView: LView,\n  context: any,\n  cleanupFn: Function,\n): void {\n  const lCleanup = getOrCreateLViewCleanup(lView);\n\n  // Historically the `storeCleanupWithContext` was used to register both framework-level and\n  // user-defined cleanup callbacks, but over time those two types of cleanups were separated.\n  // This dev mode checks assures that user-level cleanup callbacks are _not_ stored in data\n  // structures reserved for framework-specific hooks.\n  ngDevMode &&\n    assertDefined(\n      context,\n      'Cleanup context is mandatory when registering framework-level destroy hooks',\n    );\n  lCleanup.push(context);\n\n  if (tView.firstCreatePass) {\n    getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);\n  } else {\n    // Make sure that no new framework-level cleanup functions are registered after the first\n    // template pass is done (and TView data structures are meant to fully constructed).\n    if (ngDevMode) {\n      Object.freeze(getOrCreateTViewCleanup(tView));\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectFlags} from '../di/interface/injector';\nimport {\n  assertDefined,\n  assertEqual,\n  assertGreaterThanOrEqual,\n  assertLessThan,\n  assertNotEqual,\n  throwError,\n} from '../util/assert';\n\nimport {assertLViewOrUndefined, assertTNodeForLView, assertTNodeForTView} from './assert';\nimport {DirectiveDef} from './interfaces/definition';\nimport {TNode, TNodeType} from './interfaces/node';\nimport {\n  CONTEXT,\n  DECLARATION_VIEW,\n  HEADER_OFFSET,\n  LView,\n  OpaqueViewState,\n  T_HOST,\n  TData,\n  TVIEW,\n  TView,\n  TViewType,\n} from './interfaces/view';\nimport {MATH_ML_NAMESPACE, SVG_NAMESPACE} from './namespaces';\nimport {getTNode, walkUpViews} from './util/view_utils';\n\n/**\n *\n */\ninterface LFrame {\n  /**\n   * Parent LFrame.\n   *\n   * This is needed when `leaveView` is called to restore the previous state.\n   */\n  parent: LFrame;\n\n  /**\n   * Child LFrame.\n   *\n   * This is used to cache existing LFrames to relieve the memory pressure.\n   */\n  child: LFrame | null;\n\n  /**\n   * State of the current view being processed.\n   *\n   * An array of nodes (text, element, container, etc), pipes, their bindings, and\n   * any local variables that need to be stored between invocations.\n   */\n  lView: LView;\n\n  /**\n   * Current `TView` associated with the `LFrame.lView`.\n   *\n   * One can get `TView` from `lFrame[TVIEW]` however because it is so common it makes sense to\n   * store it in `LFrame` for perf reasons.\n   */\n  tView: TView;\n\n  /**\n   * Used to set the parent property when nodes are created and track query results.\n   *\n   * This is used in conjunction with `isParent`.\n   */\n  currentTNode: TNode | null;\n\n  /**\n   * If `isParent` is:\n   *  - `true`: then `currentTNode` points to a parent node.\n   *  - `false`: then `currentTNode` points to previous node (sibling).\n   */\n  isParent: boolean;\n\n  /**\n   * Index of currently selected element in LView.\n   *\n   * Used by binding instructions. Updated as part of advance instruction.\n   */\n  selectedIndex: number;\n\n  /**\n   * Current pointer to the binding index.\n   */\n  bindingIndex: number;\n\n  /**\n   * The last viewData retrieved by nextContext().\n   * Allows building nextContext() and reference() calls.\n   *\n   * e.g. const inner = x().$implicit; const outer = x().$implicit;\n   */\n  contextLView: LView | null;\n\n  /**\n   * Store the element depth count. This is used to identify the root elements of the template\n   * so that we can then attach patch data `LView` to only those elements. We know that those\n   * are the only places where the patch data could change, this way we will save on number\n   * of places where tha patching occurs.\n   */\n  elementDepthCount: number;\n\n  /**\n   * Current namespace to be used when creating elements\n   */\n  currentNamespace: string | null;\n\n  /**\n   * The root index from which pure function instructions should calculate their binding\n   * indices. In component views, this is TView.bindingStartIndex. In a host binding\n   * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n   */\n  bindingRootIndex: number;\n\n  /**\n   * Current index of a View or Content Query which needs to be processed next.\n   * We iterate over the list of Queries and increment current query index at every step.\n   */\n  currentQueryIndex: number;\n\n  /**\n   * When host binding is executing this points to the directive index.\n   * `TView.data[currentDirectiveIndex]` is `DirectiveDef`\n   * `LView[currentDirectiveIndex]` is directive instance.\n   */\n  currentDirectiveIndex: number;\n\n  /**\n   * Are we currently in i18n block as denoted by `ɵɵelementStart` and `ɵɵelementEnd`.\n   *\n   * This information is needed because while we are in i18n block all elements must be pre-declared\n   * in the translation. (i.e. `Hello �#2�World�/#2�!` pre-declares element at `�#2�` location.)\n   * This allocates `TNodeType.Placeholder` element at location `2`. If translator removes `�#2�`\n   * from translation than the runtime must also ensure tha element at `2` does not get inserted\n   * into the DOM. The translation does not carry information about deleted elements. Therefor the\n   * only way to know that an element is deleted is that it was not pre-declared in the translation.\n   *\n   * This flag works by ensuring that elements which are created without pre-declaration\n   * (`TNodeType.Placeholder`) are not inserted into the DOM render tree. (It does mean that the\n   * element still gets instantiated along with all of its behavior [directives])\n   */\n  inI18n: boolean;\n}\n\n/**\n * All implicit instruction state is stored here.\n *\n * It is useful to have a single object where all of the state is stored as a mental model\n * (rather it being spread across many different variables.)\n *\n * PERF NOTE: Turns out that writing to a true global variable is slower than\n * having an intermediate object with properties.\n */\ninterface InstructionState {\n  /**\n   * Current `LFrame`\n   *\n   * `null` if we have not called `enterView`\n   */\n  lFrame: LFrame;\n\n  /**\n   * Stores whether directives should be matched to elements.\n   *\n   * When template contains `ngNonBindable` then we need to prevent the runtime from matching\n   * directives on children of that element.\n   *\n   * Example:\n   * ```html\n   * <my-comp my-directive>\n   *   Should match component / directive.\n   * </my-comp>\n   * <div ngNonBindable>\n   *   <my-comp my-directive>\n   *     Should not match component / directive because we are in ngNonBindable.\n   *   </my-comp>\n   * </div>\n   * ```\n   */\n  bindingsEnabled: boolean;\n\n  /**\n   * Stores the root TNode that has the 'ngSkipHydration' attribute on it for later reference.\n   *\n   * Example:\n   * ```html\n   * <my-comp ngSkipHydration>\n   *   Should reference this root node\n   * </my-comp>\n   * ```\n   */\n  skipHydrationRootTNode: TNode | null;\n}\n\nconst instructionState: InstructionState = {\n  lFrame: createLFrame(null),\n  bindingsEnabled: true,\n  skipHydrationRootTNode: null,\n};\n\nexport enum CheckNoChangesMode {\n  Off,\n  Exhaustive,\n  OnlyDirtyViews,\n}\n\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n *\n * The `checkNoChanges` function is invoked only in ngDevMode=true and verifies that no unintended\n * changes exist in the change detector or its children.\n */\nlet _checkNoChangesMode: CheckNoChangesMode = 0; /* CheckNoChangesMode.Off */\n\n/**\n * Flag used to indicate that we are in the middle running change detection on a view\n *\n * @see detectChangesInViewWhileDirty\n */\nlet _isRefreshingViews = false;\n\n/**\n * Returns true if the instruction state stack is empty.\n *\n * Intended to be called from tests only (tree shaken otherwise).\n */\nexport function specOnlyIsInstructionStateEmpty(): boolean {\n  return instructionState.lFrame.parent === null;\n}\n\nexport function getElementDepthCount() {\n  return instructionState.lFrame.elementDepthCount;\n}\n\nexport function increaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount++;\n}\n\nexport function decreaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount--;\n}\n\nexport function getBindingsEnabled(): boolean {\n  return instructionState.bindingsEnabled;\n}\n\n/**\n * Returns true if currently inside a skip hydration block.\n * @returns boolean\n */\nexport function isInSkipHydrationBlock(): boolean {\n  return instructionState.skipHydrationRootTNode !== null;\n}\n\n/**\n * Returns true if this is the root TNode of the skip hydration block.\n * @param tNode the current TNode\n * @returns boolean\n */\nexport function isSkipHydrationRootTNode(tNode: TNode): boolean {\n  return instructionState.skipHydrationRootTNode === tNode;\n}\n\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```html\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nexport function ɵɵenableBindings(): void {\n  instructionState.bindingsEnabled = true;\n}\n\n/**\n * Sets a flag to specify that the TNode is in a skip hydration block.\n * @param tNode the current TNode\n */\nexport function enterSkipHydrationBlock(tNode: TNode): void {\n  instructionState.skipHydrationRootTNode = tNode;\n}\n\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```html\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nexport function ɵɵdisableBindings(): void {\n  instructionState.bindingsEnabled = false;\n}\n\n/**\n * Clears the root skip hydration node when leaving a skip hydration block.\n */\nexport function leaveSkipHydrationBlock(): void {\n  instructionState.skipHydrationRootTNode = null;\n}\n\n/**\n * Return the current `LView`.\n */\nexport function getLView<T>(): LView<T> {\n  return instructionState.lFrame.lView as LView<T>;\n}\n\n/**\n * Return the current `TView`.\n */\nexport function getTView(): TView {\n  return instructionState.lFrame.tView;\n}\n\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n * @returns Context of the restored OpaqueViewState instance.\n *\n * @codeGenApi\n */\nexport function ɵɵrestoreView<T = any>(viewToRestore: OpaqueViewState): T {\n  instructionState.lFrame.contextLView = viewToRestore as any as LView;\n  return (viewToRestore as any as LView)[CONTEXT] as unknown as T;\n}\n\n/**\n * Clears the view set in `ɵɵrestoreView` from memory. Returns the passed in\n * value so that it can be used as a return value of an instruction.\n *\n * @codeGenApi\n */\nexport function ɵɵresetView<T>(value?: T): T | undefined {\n  instructionState.lFrame.contextLView = null;\n  return value;\n}\n\nexport function getCurrentTNode(): TNode | null {\n  let currentTNode = getCurrentTNodePlaceholderOk();\n  while (currentTNode !== null && currentTNode.type === TNodeType.Placeholder) {\n    currentTNode = currentTNode.parent;\n  }\n  return currentTNode;\n}\n\nexport function getCurrentTNodePlaceholderOk(): TNode | null {\n  return instructionState.lFrame.currentTNode;\n}\n\nexport function getCurrentParentTNode(): TNode | null {\n  const lFrame = instructionState.lFrame;\n  const currentTNode = lFrame.currentTNode;\n  return lFrame.isParent ? currentTNode : currentTNode!.parent;\n}\n\nexport function setCurrentTNode(tNode: TNode | null, isParent: boolean) {\n  ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);\n  const lFrame = instructionState.lFrame;\n  lFrame.currentTNode = tNode;\n  lFrame.isParent = isParent;\n}\n\nexport function isCurrentTNodeParent(): boolean {\n  return instructionState.lFrame.isParent;\n}\n\nexport function setCurrentTNodeAsNotParent(): void {\n  instructionState.lFrame.isParent = false;\n}\n\nexport function getContextLView(): LView {\n  const contextLView = instructionState.lFrame.contextLView;\n  ngDevMode && assertDefined(contextLView, 'contextLView must be defined.');\n  return contextLView!;\n}\n\nexport function isInCheckNoChangesMode(): boolean {\n  !ngDevMode && throwError('Must never be called in production mode');\n  return _checkNoChangesMode !== CheckNoChangesMode.Off;\n}\n\nexport function isExhaustiveCheckNoChanges(): boolean {\n  !ngDevMode && throwError('Must never be called in production mode');\n  return _checkNoChangesMode === CheckNoChangesMode.Exhaustive;\n}\n\nexport function setIsInCheckNoChangesMode(mode: CheckNoChangesMode): void {\n  !ngDevMode && throwError('Must never be called in production mode');\n  _checkNoChangesMode = mode;\n}\n\nexport function isRefreshingViews(): boolean {\n  return _isRefreshingViews;\n}\n\nexport function setIsRefreshingViews(mode: boolean): boolean {\n  const prev = _isRefreshingViews;\n  _isRefreshingViews = mode;\n  return prev;\n}\n\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\nexport function getBindingRoot() {\n  const lFrame = instructionState.lFrame;\n  let index = lFrame.bindingRootIndex;\n  if (index === -1) {\n    index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;\n  }\n  return index;\n}\n\nexport function getBindingIndex(): number {\n  return instructionState.lFrame.bindingIndex;\n}\n\nexport function setBindingIndex(value: number): number {\n  return (instructionState.lFrame.bindingIndex = value);\n}\n\nexport function nextBindingIndex(): number {\n  return instructionState.lFrame.bindingIndex++;\n}\n\nexport function incrementBindingIndex(count: number): number {\n  const lFrame = instructionState.lFrame;\n  const index = lFrame.bindingIndex;\n  lFrame.bindingIndex = lFrame.bindingIndex + count;\n  return index;\n}\n\nexport function isInI18nBlock() {\n  return instructionState.lFrame.inI18n;\n}\n\nexport function setInI18nBlock(isInI18nBlock: boolean): void {\n  instructionState.lFrame.inI18n = isInI18nBlock;\n}\n\n/**\n * Set a new binding root index so that host template functions can execute.\n *\n * Bindings inside the host template are 0 index. But because we don't know ahead of time\n * how many host bindings we have we can't pre-compute them. For this reason they are all\n * 0 index and we just shift the root so that they match next available location in the LView.\n *\n * @param bindingRootIndex Root index for `hostBindings`\n * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive\n *        whose `hostBindings` are being processed.\n */\nexport function setBindingRootForHostBindings(\n  bindingRootIndex: number,\n  currentDirectiveIndex: number,\n) {\n  const lFrame = instructionState.lFrame;\n  lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;\n  setCurrentDirectiveIndex(currentDirectiveIndex);\n}\n\n/**\n * When host binding is executing this points to the directive index.\n * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`\n * `LView[getCurrentDirectiveIndex()]` is directive instance.\n */\nexport function getCurrentDirectiveIndex(): number {\n  return instructionState.lFrame.currentDirectiveIndex;\n}\n\n/**\n * Sets an index of a directive whose `hostBindings` are being processed.\n *\n * @param currentDirectiveIndex `TData` index where current directive instance can be found.\n */\nexport function setCurrentDirectiveIndex(currentDirectiveIndex: number): void {\n  instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;\n}\n\n/**\n * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being\n * executed.\n *\n * @param tData Current `TData` where the `DirectiveDef` will be looked up at.\n */\nexport function getCurrentDirectiveDef(tData: TData): DirectiveDef<any> | null {\n  const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;\n  return currentDirectiveIndex === -1 ? null : (tData[currentDirectiveIndex] as DirectiveDef<any>);\n}\n\nexport function getCurrentQueryIndex(): number {\n  return instructionState.lFrame.currentQueryIndex;\n}\n\nexport function setCurrentQueryIndex(value: number): void {\n  instructionState.lFrame.currentQueryIndex = value;\n}\n\n/**\n * Returns a `TNode` of the location where the current `LView` is declared at.\n *\n * @param lView an `LView` that we want to find parent `TNode` for.\n */\nfunction getDeclarationTNode(lView: LView): TNode | null {\n  const tView = lView[TVIEW];\n\n  // Return the declaration parent for embedded views\n  if (tView.type === TViewType.Embedded) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode;\n  }\n\n  // Components don't have `TView.declTNode` because each instance of component could be\n  // inserted in different location, hence `TView.declTNode` is meaningless.\n  // Falling back to `T_HOST` in case we cross component boundary.\n  if (tView.type === TViewType.Component) {\n    return lView[T_HOST];\n  }\n\n  // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.\n  return null;\n}\n\n/**\n * This is a light weight version of the `enterView` which is needed by the DI system.\n *\n * @param lView `LView` location of the DI context.\n * @param tNode `TNode` for DI context\n * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration\n *     tree from `tNode`  until we find parent declared `TElementNode`.\n * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared\n *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated\n *     `NodeInjector` can be found and we should instead use `ModuleInjector`.\n *     - If `true` than this call must be fallowed by `leaveDI`\n *     - If `false` than this call failed and we should NOT call `leaveDI`\n */\nexport function enterDI(lView: LView, tNode: TNode, flags: InjectFlags) {\n  ngDevMode && assertLViewOrUndefined(lView);\n\n  if (flags & InjectFlags.SkipSelf) {\n    ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);\n\n    let parentTNode = tNode as TNode | null;\n    let parentLView = lView;\n\n    while (true) {\n      ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');\n      parentTNode = parentTNode!.parent as TNode | null;\n      if (parentTNode === null && !(flags & InjectFlags.Host)) {\n        parentTNode = getDeclarationTNode(parentLView);\n        if (parentTNode === null) break;\n\n        // In this case, a parent exists and is definitely an element. So it will definitely\n        // have an existing lView as the declaration view, which is why we can assume it's defined.\n        ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');\n        parentLView = parentLView[DECLARATION_VIEW]!;\n\n        // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives\n        // We want to skip those and look only at Elements and ElementContainers to ensure\n        // we're looking at true parent nodes, and not content or other types.\n        if (parentTNode.type & (TNodeType.Element | TNodeType.ElementContainer)) {\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    if (parentTNode === null) {\n      // If we failed to find a parent TNode this means that we should use module injector.\n      return false;\n    } else {\n      tNode = parentTNode;\n      lView = parentLView;\n    }\n  }\n\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  const lFrame = (instructionState.lFrame = allocLFrame());\n  lFrame.currentTNode = tNode;\n  lFrame.lView = lView;\n\n  return true;\n}\n\n/**\n * Swap the current lView with a new lView.\n *\n * For performance reasons we store the lView in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the lView for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New lView to become active\n * @returns the previously active lView;\n */\nexport function enterView(newView: LView): void {\n  ngDevMode && assertNotEqual(newView[0], newView[1] as any, '????');\n  ngDevMode && assertLViewOrUndefined(newView);\n  const newLFrame = allocLFrame();\n  if (ngDevMode) {\n    assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');\n    assertEqual(newLFrame.lView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.tView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');\n  }\n  const tView = newView[TVIEW];\n  instructionState.lFrame = newLFrame;\n  ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);\n  newLFrame.currentTNode = tView.firstChild!;\n  newLFrame.lView = newView;\n  newLFrame.tView = tView;\n  newLFrame.contextLView = newView;\n  newLFrame.bindingIndex = tView.bindingStartIndex;\n  newLFrame.inI18n = false;\n}\n\n/**\n * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.\n */\nfunction allocLFrame() {\n  const currentLFrame = instructionState.lFrame;\n  const childLFrame = currentLFrame === null ? null : currentLFrame.child;\n  const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;\n  return newLFrame;\n}\n\nfunction createLFrame(parent: LFrame | null): LFrame {\n  const lFrame: LFrame = {\n    currentTNode: null,\n    isParent: true,\n    lView: null!,\n    tView: null!,\n    selectedIndex: -1,\n    contextLView: null,\n    elementDepthCount: 0,\n    currentNamespace: null,\n    currentDirectiveIndex: -1,\n    bindingRootIndex: -1,\n    bindingIndex: -1,\n    currentQueryIndex: 0,\n    parent: parent!,\n    child: null,\n    inI18n: false,\n  };\n  parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.\n  return lFrame;\n}\n\n/**\n * A lightweight version of leave which is used with DI.\n *\n * This function only resets `currentTNode` and `LView` as those are the only properties\n * used with DI (`enterDI()`).\n *\n * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where\n * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.\n */\nfunction leaveViewLight(): LFrame {\n  const oldLFrame = instructionState.lFrame;\n  instructionState.lFrame = oldLFrame.parent;\n  oldLFrame.currentTNode = null!;\n  oldLFrame.lView = null!;\n  return oldLFrame;\n}\n\n/**\n * This is a lightweight version of the `leaveView` which is needed by the DI system.\n *\n * NOTE: this function is an alias so that we can change the type of the function to have `void`\n * return type.\n */\nexport const leaveDI: () => void = leaveViewLight;\n\n/**\n * Leave the current `LView`\n *\n * This pops the `LFrame` with the associated `LView` from the stack.\n *\n * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is\n * because for performance reasons we don't release `LFrame` but rather keep it for next use.\n */\nexport function leaveView() {\n  const oldLFrame = leaveViewLight();\n  oldLFrame.isParent = true;\n  oldLFrame.tView = null!;\n  oldLFrame.selectedIndex = -1;\n  oldLFrame.contextLView = null;\n  oldLFrame.elementDepthCount = 0;\n  oldLFrame.currentDirectiveIndex = -1;\n  oldLFrame.currentNamespace = null;\n  oldLFrame.bindingRootIndex = -1;\n  oldLFrame.bindingIndex = -1;\n  oldLFrame.currentQueryIndex = 0;\n}\n\nexport function nextContextImpl<T = any>(level: number): T {\n  const contextLView = (instructionState.lFrame.contextLView = walkUpViews(\n    level,\n    instructionState.lFrame.contextLView!,\n  ));\n  return contextLView[CONTEXT] as unknown as T;\n}\n\n/**\n * Gets the currently selected element index.\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n */\nexport function getSelectedIndex() {\n  return instructionState.lFrame.selectedIndex;\n}\n\n/**\n * Sets the most recent index passed to {@link select}\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n *\n * (Note that if an \"exit function\" was set earlier (via `setElementExitFn()`) then that will be\n * run if and when the provided `index` value is different from the current selected index value.)\n */\nexport function setSelectedIndex(index: number) {\n  ngDevMode &&\n    index !== -1 &&\n    assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');\n  ngDevMode &&\n    assertLessThan(\n      index,\n      instructionState.lFrame.lView.length,\n      \"Can't set index passed end of LView\",\n    );\n  instructionState.lFrame.selectedIndex = index;\n}\n\n/**\n * Gets the `tNode` that represents currently selected element.\n */\nexport function getSelectedTNode() {\n  const lFrame = instructionState.lFrame;\n  return getTNode(lFrame.tView, lFrame.selectedIndex);\n}\n\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n *\n * @codeGenApi\n */\nexport function ɵɵnamespaceSVG() {\n  instructionState.lFrame.currentNamespace = SVG_NAMESPACE;\n}\n\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n *\n * @codeGenApi\n */\nexport function ɵɵnamespaceMathML() {\n  instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;\n}\n\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n *\n * @codeGenApi\n */\nexport function ɵɵnamespaceHTML() {\n  namespaceHTMLInternal();\n}\n\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n */\nexport function namespaceHTMLInternal() {\n  instructionState.lFrame.currentNamespace = null;\n}\n\nexport function getNamespace(): string | null {\n  return instructionState.lFrame.currentNamespace;\n}\n\nlet _wasLastNodeCreated = true;\n\n/**\n * Retrieves a global flag that indicates whether the most recent DOM node\n * was created or hydrated.\n */\nexport function wasLastNodeCreated(): boolean {\n  return _wasLastNodeCreated;\n}\n\n/**\n * Sets a global flag to indicate whether the most recent DOM node\n * was created or hydrated.\n */\nexport function lastNodeWasCreated(flag: boolean): void {\n  _wasLastNodeCreated = flag;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {setActiveConsumer} from '@angular/core/primitives/signals';\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewChecked,\n  AfterViewInit,\n  DoCheck,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n} from '../interface/lifecycle_hooks';\nimport {assertDefined, assertEqual, assertNotEqual} from '../util/assert';\n\nimport {assertFirstCreatePass} from './assert';\nimport {NgOnChangesFeatureImpl} from './features/ng_onchanges_feature';\nimport {DirectiveDef} from './interfaces/definition';\nimport {TNode} from './interfaces/node';\nimport {\n  FLAGS,\n  HookData,\n  InitPhaseState,\n  LView,\n  LViewFlags,\n  PREORDER_HOOK_FLAGS,\n  PreOrderHookFlags,\n  TView,\n} from './interfaces/view';\nimport {profiler} from './profiler';\nimport {ProfilerEvent} from './profiler_types';\nimport {isInCheckNoChangesMode} from './state';\n\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * Sets up the pre-order hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * @param directiveIndex The index of the directive in LView\n * @param directiveDef The definition containing the hooks to setup in tView\n * @param tView The current TView\n */\nexport function registerPreOrderHooks(\n  directiveIndex: number,\n  directiveDef: DirectiveDef<any>,\n  tView: TView,\n): void {\n  ngDevMode && assertFirstCreatePass(tView);\n  const {ngOnChanges, ngOnInit, ngDoCheck} = directiveDef.type.prototype as OnChanges &\n    OnInit &\n    DoCheck;\n\n  if (ngOnChanges as Function | undefined) {\n    const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);\n    (tView.preOrderHooks ??= []).push(directiveIndex, wrappedOnChanges);\n    (tView.preOrderCheckHooks ??= []).push(directiveIndex, wrappedOnChanges);\n  }\n\n  if (ngOnInit) {\n    (tView.preOrderHooks ??= []).push(0 - directiveIndex, ngOnInit);\n  }\n\n  if (ngDoCheck) {\n    (tView.preOrderHooks ??= []).push(directiveIndex, ngDoCheck);\n    (tView.preOrderCheckHooks ??= []).push(directiveIndex, ngDoCheck);\n  }\n}\n\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param tView The current TView\n * @param tNode The TNode whose directives are to be searched for hooks to queue\n */\nexport function registerPostOrderHooks(tView: TView, tNode: TNode): void {\n  ngDevMode && assertFirstCreatePass(tView);\n  // It's necessary to loop through the directives at elementEnd() (rather than processing in\n  // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n  // hooks for projected components and directives must be called *before* their hosts.\n  for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n    const directiveDef = tView.data[i] as DirectiveDef<any>;\n    ngDevMode && assertDefined(directiveDef, 'Expecting DirectiveDef');\n    const lifecycleHooks: AfterContentInit &\n      AfterContentChecked &\n      AfterViewInit &\n      AfterViewChecked &\n      OnDestroy = directiveDef.type.prototype;\n    const {\n      ngAfterContentInit,\n      ngAfterContentChecked,\n      ngAfterViewInit,\n      ngAfterViewChecked,\n      ngOnDestroy,\n    } = lifecycleHooks;\n\n    if (ngAfterContentInit) {\n      (tView.contentHooks ??= []).push(-i, ngAfterContentInit);\n    }\n\n    if (ngAfterContentChecked) {\n      (tView.contentHooks ??= []).push(i, ngAfterContentChecked);\n      (tView.contentCheckHooks ??= []).push(i, ngAfterContentChecked);\n    }\n\n    if (ngAfterViewInit) {\n      (tView.viewHooks ??= []).push(-i, ngAfterViewInit);\n    }\n\n    if (ngAfterViewChecked) {\n      (tView.viewHooks ??= []).push(i, ngAfterViewChecked);\n      (tView.viewCheckHooks ??= []).push(i, ngAfterViewChecked);\n    }\n\n    if (ngOnDestroy != null) {\n      (tView.destroyHooks ??= []).push(i, ngOnDestroy);\n    }\n  }\n}\n\n/**\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\n *\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\n * some recursively trigger a change detection cycle.\n * To solve that, it is required to track the state of the execution of these init hooks.\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n * and the index within that phase. They can be seen as a cursor in the following structure:\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n * They are stored as flags in LView[FLAGS].\n *\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n * To be able to pause and resume their execution, we also need some state about the hook's array\n * that is being processed:\n * - the index of the next hook to be executed\n * - the number of init hooks already found in the processed part of the  array\n * They are stored as flags in LView[PREORDER_HOOK_FLAGS].\n */\n\n/**\n * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were\n * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read\n * / write of the init-hooks related flags.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nexport function executeCheckHooks(lView: LView, hooks: HookData, nodeIndex?: number | null) {\n  callHooks(lView, hooks, InitPhaseState.InitPhaseCompleted, nodeIndex);\n}\n\n/**\n * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,\n * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param initPhase A phase for which hooks should be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nexport function executeInitAndCheckHooks(\n  lView: LView,\n  hooks: HookData,\n  initPhase: InitPhaseState,\n  nodeIndex?: number | null,\n) {\n  ngDevMode &&\n    assertNotEqual(\n      initPhase,\n      InitPhaseState.InitPhaseCompleted,\n      'Init pre-order hooks should not be called more than once',\n    );\n  if ((lView[FLAGS] & LViewFlags.InitPhaseStateMask) === initPhase) {\n    callHooks(lView, hooks, initPhase, nodeIndex);\n  }\n}\n\nexport function incrementInitPhaseFlags(lView: LView, initPhase: InitPhaseState): void {\n  ngDevMode &&\n    assertNotEqual(\n      initPhase,\n      InitPhaseState.InitPhaseCompleted,\n      'Init hooks phase should not be incremented after all init hooks have been run.',\n    );\n  let flags = lView[FLAGS];\n  if ((flags & LViewFlags.InitPhaseStateMask) === initPhase) {\n    flags &= LViewFlags.IndexWithinInitPhaseReset;\n    flags += LViewFlags.InitPhaseStateIncrementer;\n    lView[FLAGS] = flags;\n  }\n}\n\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass\n *\n * @param currentView The current view\n * @param arr The array in which the hooks are found\n * @param initPhaseState the current state of the init phase\n * @param currentNodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction callHooks(\n  currentView: LView,\n  arr: HookData,\n  initPhase: InitPhaseState,\n  currentNodeIndex: number | null | undefined,\n): void {\n  ngDevMode &&\n    assertEqual(\n      isInCheckNoChangesMode(),\n      false,\n      'Hooks should never be run when in check no changes mode.',\n    );\n  const startIndex =\n    currentNodeIndex !== undefined\n      ? currentView[PREORDER_HOOK_FLAGS] & PreOrderHookFlags.IndexOfTheNextPreOrderHookMaskMask\n      : 0;\n  const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n  const max = arr.length - 1; // Stop the loop at length - 1, because we look for the hook at i + 1\n  let lastNodeIndexFound = 0;\n  for (let i = startIndex; i < max; i++) {\n    const hook = arr[i + 1] as number | (() => void);\n    if (typeof hook === 'number') {\n      lastNodeIndexFound = arr[i] as number;\n      if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n        break;\n      }\n    } else {\n      const isInitHook = (arr[i] as number) < 0;\n      if (isInitHook) {\n        currentView[PREORDER_HOOK_FLAGS] += PreOrderHookFlags.NumberOfInitHooksCalledIncrementer;\n      }\n      if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n        callHook(currentView, initPhase, arr, i);\n        currentView[PREORDER_HOOK_FLAGS] =\n          (currentView[PREORDER_HOOK_FLAGS] & PreOrderHookFlags.NumberOfInitHooksCalledMask) +\n          i +\n          2;\n      }\n      i++;\n    }\n  }\n}\n\n/**\n * Executes a single lifecycle hook, making sure that:\n * - it is called in the non-reactive context;\n * - profiling data are registered.\n */\nfunction callHookInternal(directive: any, hook: () => void) {\n  profiler(ProfilerEvent.LifecycleHookStart, directive, hook);\n  const prevConsumer = setActiveConsumer(null);\n  try {\n    hook.call(directive);\n  } finally {\n    setActiveConsumer(prevConsumer);\n    profiler(ProfilerEvent.LifecycleHookEnd, directive, hook);\n  }\n}\n\n/**\n * Execute one hook against the current `LView`.\n *\n * @param currentView The current view\n * @param initPhaseState the current state of the init phase\n * @param arr The array in which the hooks are found\n * @param i The current index within the hook data array\n */\nfunction callHook(currentView: LView, initPhase: InitPhaseState, arr: HookData, i: number) {\n  const isInitHook = (arr[i] as number) < 0;\n  const hook = arr[i + 1] as () => void;\n  const directiveIndex = isInitHook ? -arr[i] : (arr[i] as number);\n  const directive = currentView[directiveIndex];\n  if (isInitHook) {\n    const indexWithintInitPhase = currentView[FLAGS] >> LViewFlags.IndexWithinInitPhaseShift;\n    // The init phase state must be always checked here as it may have been recursively updated.\n    if (\n      indexWithintInitPhase <\n        currentView[PREORDER_HOOK_FLAGS] >> PreOrderHookFlags.NumberOfInitHooksCalledShift &&\n      (currentView[FLAGS] & LViewFlags.InitPhaseStateMask) === initPhase\n    ) {\n      currentView[FLAGS] += LViewFlags.IndexWithinInitPhaseIncrementer;\n      callHookInternal(directive, hook);\n    }\n  } else {\n    callHookInternal(directive, hook);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectFlags} from '../../di/interface/injector';\nimport {ProviderToken} from '../../di/provider_token';\nimport {assertDefined, assertEqual} from '../../util/assert';\n\nimport {TDirectiveHostNode} from './node';\nimport {LView, TData} from './view';\n\n/**\n * Offsets of the `NodeInjector` data structure in the expando.\n *\n * `NodeInjector` is stored in both `LView` as well as `TView.data`. All storage requires 9 words.\n * First 8 are reserved for bloom filter and the 9th is reserved for the associated `TNode` as well\n * as parent `NodeInjector` pointer. All indexes are starting with `index` and have an offset as\n * shown.\n *\n * `LView` layout:\n * ```\n * index + 0: cumulative bloom filter\n * index + 1: cumulative bloom filter\n * index + 2: cumulative bloom filter\n * index + 3: cumulative bloom filter\n * index + 4: cumulative bloom filter\n * index + 5: cumulative bloom filter\n * index + 6: cumulative bloom filter\n * index + 7: cumulative bloom filter\n * index + 8: cumulative bloom filter\n * index + PARENT: Index to the parent injector. See `RelativeInjectorLocation`\n *                 `const parent = lView[index + NodeInjectorOffset.PARENT]`\n * ```\n *\n * `TViewData` layout:\n * ```\n * index + 0: cumulative bloom filter\n * index + 1: cumulative bloom filter\n * index + 2: cumulative bloom filter\n * index + 3: cumulative bloom filter\n * index + 4: cumulative bloom filter\n * index + 5: cumulative bloom filter\n * index + 6: cumulative bloom filter\n * index + 7: cumulative bloom filter\n * index + 8: cumulative bloom filter\n * index + TNODE: TNode associated with this `NodeInjector`\n *                `const tNode = tView.data[index + NodeInjectorOffset.TNODE]`\n * ```\n */\nexport const enum NodeInjectorOffset {\n  TNODE = 8,\n  PARENT = 8,\n  BLOOM_SIZE = 8,\n  SIZE = 9,\n}\n\n/**\n * Represents a relative location of parent injector.\n *\n * The interfaces encodes number of parents `LView`s to traverse and index in the `LView`\n * pointing to the parent injector.\n */\nexport type RelativeInjectorLocation = number & {\n  __brand__: 'RelativeInjectorLocationFlags';\n};\n\nexport const enum RelativeInjectorLocationFlags {\n  InjectorIndexMask = 0b111111111111111,\n  ViewOffsetShift = 16,\n  NO_PARENT = -1,\n}\n\nexport const NO_PARENT_INJECTOR = -1 as RelativeInjectorLocation;\n\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nexport class NodeInjectorFactory {\n  /**\n   * The inject implementation to be activated when using the factory.\n   */\n  injectImpl: null | (<T>(token: ProviderToken<T>, flags?: InjectFlags) => T);\n\n  /**\n   * Marker set to true during factory invocation to see if we get into recursive loop.\n   * Recursive loop causes an error to be displayed.\n   */\n  resolving = false;\n\n  /**\n   * Marks that the token can see other Tokens declared in `viewProviders` on the same node.\n   */\n  canSeeViewProviders: boolean;\n\n  /**\n   * An array of factories to use in case of `multi` provider.\n   */\n  multi?: Array<() => any>;\n\n  /**\n   * Number of `multi`-providers which belong to the component.\n   *\n   * This is needed because when multiple components and directives declare the `multi` provider\n   * they have to be concatenated in the correct order.\n   *\n   * Example:\n   *\n   * If we have a component and directive active an a single element as declared here\n   * ```ts\n   * component:\n   *   providers: [ {provide: String, useValue: 'component', multi: true} ],\n   *   viewProviders: [ {provide: String, useValue: 'componentView', multi: true} ],\n   *\n   * directive:\n   *   providers: [ {provide: String, useValue: 'directive', multi: true} ],\n   * ```\n   *\n   * Then the expected results are:\n   *\n   * ```ts\n   * providers: ['component', 'directive']\n   * viewProviders: ['component', 'componentView', 'directive']\n   * ```\n   *\n   * The way to think about it is that the `viewProviders` have been inserted after the component\n   * but before the directives, which is why we need to know how many `multi`s have been declared by\n   * the component.\n   */\n  componentProviders?: number;\n\n  /**\n   * Current index of the Factory in the `data`. Needed for `viewProviders` and `providers` merging.\n   * See `providerFactory`.\n   */\n  index?: number;\n\n  /**\n   * Because the same `multi` provider can be declared in `providers` and `viewProviders` it is\n   * possible for `viewProviders` to shadow the `providers`. For this reason we store the\n   * `provideFactory` of the `providers` so that `providers` can be extended with `viewProviders`.\n   *\n   * Example:\n   *\n   * Given:\n   * ```ts\n   * providers: [ {provide: String, useValue: 'all', multi: true} ],\n   * viewProviders: [ {provide: String, useValue: 'viewOnly', multi: true} ],\n   * ```\n   *\n   * We have to return `['all']` in case of content injection, but `['all', 'viewOnly']` in case\n   * of view injection. We further have to make sure that the shared instances (in our case\n   * `all`) are the exact same instance in both the content as well as the view injection. (We\n   * have to make sure that we don't double instantiate.) For this reason the `viewProviders`\n   * `Factory` has a pointer to the shadowed `providers` factory so that it can instantiate the\n   * `providers` (`['all']`) and then extend it with `viewProviders` (`['all'] + ['viewOnly'] =\n   * ['all', 'viewOnly']`).\n   */\n  providerFactory?: NodeInjectorFactory | null;\n\n  constructor(\n    /**\n     * Factory to invoke in order to create a new instance.\n     */\n    public factory: (\n      this: NodeInjectorFactory,\n      _: undefined,\n      /**\n       * array where injectables tokens are stored. This is used in\n       * case of an error reporting to produce friendlier errors.\n       */\n      tData: TData,\n      /**\n       * array where existing instances of injectables are stored. This is used in case\n       * of multi shadow is needed. See `multi` field documentation.\n       */\n      lView: LView,\n      /**\n       * The TNode of the same element injector.\n       */\n      tNode: TDirectiveHostNode,\n    ) => any,\n    /**\n     * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n     */\n    isViewProvider: boolean,\n    injectImplementation: null | (<T>(token: ProviderToken<T>, flags?: InjectFlags) => T),\n  ) {\n    ngDevMode && assertDefined(factory, 'Factory not specified');\n    ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');\n    this.canSeeViewProviders = isViewProvider;\n    this.injectImpl = injectImplementation;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {Type} from '../../interface/type';\nimport {KeyValueArray} from '../../util/array_utils';\nimport {TStylingRange} from '../interfaces/styling';\nimport {AttributeMarker} from './attribute_marker';\n\nimport {TIcu} from './i18n';\nimport {CssSelector} from './projection';\nimport {RNode} from './renderer_dom';\nimport type {LView, TView} from './view';\n\n/**\n * TNodeType corresponds to the {@link TNode} `type` property.\n *\n * NOTE: type IDs are such that we use each bit to denote a type. This is done so that we can easily\n * check if the `TNode` is of more than one type.\n *\n * `if (tNode.type === TNodeType.Text || tNode.type === TNode.Element)`\n * can be written as:\n * `if (tNode.type & (TNodeType.Text | TNodeType.Element))`\n *\n * However any given `TNode` can only be of one type.\n */\nexport const enum TNodeType {\n  /**\n   * The TNode contains information about a DOM element aka {@link RText}.\n   */\n  Text = 0b1,\n\n  /**\n   * The TNode contains information about a DOM element aka {@link RElement}.\n   */\n  Element = 0b10,\n\n  /**\n   * The TNode contains information about an {@link LContainer} for embedded views.\n   */\n  Container = 0b100,\n\n  /**\n   * The TNode contains information about an `<ng-container>` element {@link RNode}.\n   */\n  ElementContainer = 0b1000,\n\n  /**\n   * The TNode contains information about an `<ng-content>` projection\n   */\n  Projection = 0b10000,\n\n  /**\n   * The TNode contains information about an ICU comment used in `i18n`.\n   */\n  Icu = 0b100000,\n\n  /**\n   * Special node type representing a placeholder for future `TNode` at this location.\n   *\n   * I18n translation blocks are created before the element nodes which they contain. (I18n blocks\n   * can span over many elements.) Because i18n `TNode`s (representing text) are created first they\n   * often may need to point to element `TNode`s which are not yet created. In such a case we create\n   * a `Placeholder` `TNode`. This allows the i18n to structurally link the `TNode`s together\n   * without knowing any information about the future nodes which will be at that location.\n   *\n   * On `firstCreatePass` When element instruction executes it will try to create a `TNode` at that\n   * location. Seeing a `Placeholder` `TNode` already there tells the system that it should reuse\n   * existing `TNode` (rather than create a new one) and just update the missing information.\n   */\n  Placeholder = 0b1000000,\n\n  /**\n   * The TNode contains information about a `@let` declaration.\n   */\n  LetDeclaration = 0b10000000,\n\n  // Combined Types These should never be used for `TNode.type` only as a useful way to check\n  // if `TNode.type` is one of several choices.\n\n  // See: https://github.com/microsoft/TypeScript/issues/35875 why we can't refer to existing enum.\n  AnyRNode = 0b11, // Text | Element\n  AnyContainer = 0b1100, // Container | ElementContainer\n}\n\n/**\n * Converts `TNodeType` into human readable text.\n * Make sure this matches with `TNodeType`\n */\nexport function toTNodeTypeAsString(tNodeType: TNodeType): string {\n  let text = '';\n  tNodeType & TNodeType.Text && (text += '|Text');\n  tNodeType & TNodeType.Element && (text += '|Element');\n  tNodeType & TNodeType.Container && (text += '|Container');\n  tNodeType & TNodeType.ElementContainer && (text += '|ElementContainer');\n  tNodeType & TNodeType.Projection && (text += '|Projection');\n  tNodeType & TNodeType.Icu && (text += '|IcuContainer');\n  tNodeType & TNodeType.Placeholder && (text += '|Placeholder');\n  tNodeType & TNodeType.LetDeclaration && (text += '|LetDeclaration');\n  return text.length > 0 ? text.substring(1) : text;\n}\n\n/**\n * Helper function to detect if a given value matches a `TNode` shape.\n *\n * The logic uses the `insertBeforeIndex` and its possible values as\n * a way to differentiate a TNode shape from other types of objects\n * within the `TView.data`. This is not a perfect check, but it can\n * be a reasonable differentiator, since we control the shapes of objects\n * within `TView.data`.\n */\nexport function isTNodeShape(value: unknown): value is TNode {\n  return (\n    value != null &&\n    typeof value === 'object' &&\n    ((value as TNode).insertBeforeIndex === null ||\n      typeof (value as TNode).insertBeforeIndex === 'number' ||\n      Array.isArray((value as TNode).insertBeforeIndex))\n  );\n}\n\nexport function isLetDeclaration(tNode: TNode): boolean {\n  return !!(tNode.type & TNodeType.LetDeclaration);\n}\n\n/**\n * Corresponds to the TNode.flags property.\n */\nexport const enum TNodeFlags {\n  /** Bit #1 - This bit is set if the node is a host for any directive (including a component) */\n  isDirectiveHost = 0x1,\n\n  /** Bit #2 - This bit is set if the node has been projected */\n  isProjected = 0x2,\n\n  /** Bit #3 - This bit is set if any directive on this node has content queries */\n  hasContentQuery = 0x4,\n\n  /** Bit #4 - This bit is set if the node has any \"class\" inputs */\n  hasClassInput = 0x8,\n\n  /** Bit #5 - This bit is set if the node has any \"style\" inputs */\n  hasStyleInput = 0x10,\n\n  /** Bit #6 - This bit is set if the node has been detached by i18n */\n  isDetached = 0x20,\n\n  /**\n   * Bit #7 - This bit is set if the node has directives with host bindings.\n   *\n   * This flags allows us to guard host-binding logic and invoke it only on nodes\n   * that actually have directives with host bindings.\n   */\n  hasHostBindings = 0x40,\n\n  /**\n   * Bit #8 - This bit is set if the node is a located inside skip hydration block.\n   */\n  inSkipHydrationBlock = 0x80,\n}\n\n/**\n * Corresponds to the TNode.providerIndexes property.\n */\nexport const enum TNodeProviderIndexes {\n  /** The index of the first provider on this node is encoded on the least significant bits. */\n  ProvidersStartIndexMask = 0b00000000000011111111111111111111,\n\n  /**\n   * The count of view providers from the component on this node is\n   * encoded on the 20 most significant bits.\n   */\n  CptViewProvidersCountShift = 20,\n  CptViewProvidersCountShifter = 0b00000000000100000000000000000000,\n}\n\n/**\n * A combination of:\n * - Attribute names and values.\n * - Special markers acting as flags to alter attributes processing.\n * - Parsed ngProjectAs selectors.\n */\nexport type TAttributes = (string | AttributeMarker | CssSelector)[];\n\n/**\n * Constants that are associated with a view. Includes:\n * - Attribute arrays.\n * - Local definition arrays.\n * - Translated messages (i18n).\n */\nexport type TConstants = (TAttributes | string)[];\n\n/**\n * Factory function that returns an array of consts. Consts can be represented as a function in\n * case any additional statements are required to define consts in the list. An example is i18n\n * where additional i18n calls are generated, which should be executed when consts are requested\n * for the first time.\n */\nexport type TConstantsFactory = () => TConstants;\n\n/**\n * TConstants type that describes how the `consts` field is generated on ComponentDef: it can be\n * either an array or a factory function that returns that array.\n */\nexport type TConstantsOrFactory = TConstants | TConstantsFactory;\n\n/**\n * Binding data (flyweight) for a particular node that is shared between all templates\n * of a specific type.\n *\n * If a property is:\n *    - PropertyAliases: that property's data was generated and this is it\n *    - Null: that property's data was already generated and nothing was found.\n *    - Undefined: that property's data has not yet been generated\n *\n * see: https://en.wikipedia.org/wiki/Flyweight_pattern for more on the Flyweight pattern\n */\nexport interface TNode {\n  /** The type of the TNode. See TNodeType. */\n  type: TNodeType;\n\n  /**\n   * Index of the TNode in TView.data and corresponding native element in LView.\n   *\n   * This is necessary to get from any TNode to its corresponding native element when\n   * traversing the node tree.\n   *\n   * If index is -1, this is a dynamically created container node or embedded view node.\n   */\n  index: number;\n\n  /**\n   * Insert before existing DOM node index.\n   *\n   * When DOM nodes are being inserted, normally they are being appended as they are created.\n   * Under i18n case, the translated text nodes are created ahead of time as part of the\n   * `ɵɵi18nStart` instruction which means that this `TNode` can't just be appended and instead\n   * needs to be inserted using `insertBeforeIndex` semantics.\n   *\n   * Additionally sometimes it is necessary to insert new text nodes as a child of this `TNode`. In\n   * such a case the value stores an array of text nodes to insert.\n   *\n   * Example:\n   * ```html\n   * <div i18n>\n   *   Hello <span>World</span>!\n   * </div>\n   * ```\n   * In the above example the `ɵɵi18nStart` instruction can create `Hello `, `World` and `!` text\n   * nodes. It can also insert `Hello ` and `!` text node as a child of `<div>`, but it can't\n   * insert `World` because the `<span>` node has not yet been created. In such a case the\n   * `<span>` `TNode` will have an array which will direct the `<span>` to not only insert\n   * itself in front of `!` but also to insert the `World` (created by `ɵɵi18nStart`) into\n   * `<span>` itself.\n   *\n   * Pseudo code:\n   * ```ts\n   *   if (insertBeforeIndex === null) {\n   *     // append as normal\n   *   } else if (Array.isArray(insertBeforeIndex)) {\n   *     // First insert current `TNode` at correct location\n   *     const currentNode = lView[this.index];\n   *     parentNode.insertBefore(currentNode, lView[this.insertBeforeIndex[0]]);\n   *     // Now append all of the children\n   *     for(let i=1; i<this.insertBeforeIndex; i++) {\n   *       currentNode.appendChild(lView[this.insertBeforeIndex[i]]);\n   *     }\n   *   } else {\n   *     parentNode.insertBefore(lView[this.index], lView[this.insertBeforeIndex])\n   *   }\n   * ```\n   * - null: Append as normal using `parentNode.appendChild`\n   * - `number`: Append using\n   *      `parentNode.insertBefore(lView[this.index], lView[this.insertBeforeIndex])`\n   *\n   * *Initialization*\n   *\n   * Because `ɵɵi18nStart` executes before nodes are created, on `TView.firstCreatePass` it is not\n   * possible for `ɵɵi18nStart` to set the `insertBeforeIndex` value as the corresponding `TNode`\n   * has not yet been created. For this reason the `ɵɵi18nStart` creates a `TNodeType.Placeholder`\n   * `TNode` at that location. See `TNodeType.Placeholder` for more information.\n   */\n  insertBeforeIndex: InsertBeforeIndex;\n\n  /**\n   * The index of the closest injector in this node's LView.\n   *\n   * If the index === -1, there is no injector on this node or any ancestor node in this view.\n   *\n   * If the index !== -1, it is the index of this node's injector OR the index of a parent\n   * injector in the same view. We pass the parent injector index down the node tree of a view so\n   * it's possible to find the parent injector without walking a potentially deep node tree.\n   * Injector indices are not set across view boundaries because there could be multiple component\n   * hosts.\n   *\n   * If tNode.injectorIndex === tNode.parent.injectorIndex, then the index belongs to a parent\n   * injector.\n   */\n  injectorIndex: number;\n\n  /** Stores starting index of the directives. */\n  directiveStart: number;\n\n  /**\n   * Stores final exclusive index of the directives.\n   *\n   * The area right behind the `directiveStart-directiveEnd` range is used to allocate the\n   * `HostBindingFunction` `vars` (or null if no bindings.) Therefore `directiveEnd` is used to set\n   * `LFrame.bindingRootIndex` before `HostBindingFunction` is executed.\n   */\n  directiveEnd: number;\n\n  /**\n   * Offset from the `directiveStart` at which the component (one at most) of the node is stored.\n   * Set to -1 if no components have been applied to the node. Component index can be found using\n   * `directiveStart + componentOffset`.\n   */\n  componentOffset: number;\n\n  /**\n   * Stores the last directive which had a styling instruction.\n   *\n   * Initial value of this is `-1` which means that no `hostBindings` styling instruction has\n   * executed. As `hostBindings` instructions execute they set the value to the index of the\n   * `DirectiveDef` which contained the last `hostBindings` styling instruction.\n   *\n   * Valid values are:\n   * - `-1` No `hostBindings` instruction has executed.\n   * - `directiveStart <= directiveStylingLast < directiveEnd`: Points to the `DirectiveDef` of\n   * the last styling instruction which executed in the `hostBindings`.\n   *\n   * This data is needed so that styling instructions know which static styling data needs to be\n   * collected from the `DirectiveDef.hostAttrs`. A styling instruction needs to collect all data\n   * since last styling instruction.\n   */\n  directiveStylingLast: number;\n\n  /**\n   * Stores indexes of property bindings. This field is only set in the ngDevMode and holds\n   * indexes of property bindings so TestBed can get bound property metadata for a given node.\n   */\n  propertyBindings: number[] | null;\n\n  /**\n   * Stores if Node isComponent, isProjected, hasContentQuery, hasClassInput and hasStyleInput\n   * etc.\n   */\n  flags: TNodeFlags;\n\n  /**\n   * This number stores two values using its bits:\n   *\n   * - the index of the first provider on that node (first 16 bits)\n   * - the count of view providers from the component on this node (last 16 bits)\n   */\n  // TODO(misko): break this into actual vars.\n  providerIndexes: TNodeProviderIndexes;\n\n  /**\n   * The value name associated with this node.\n   * if type:\n   *   `TNodeType.Text`: text value\n   *   `TNodeType.Element`: tag name\n   *   `TNodeType.ICUContainer`: `TIcu`\n   */\n  value: any;\n\n  /**\n   * Attributes associated with an element. We need to store attributes to support various\n   * use-cases (attribute injection, content projection with selectors, directives matching).\n   * Attributes are stored statically because reading them from the DOM would be way too slow for\n   * content projection and queries.\n   *\n   * Since attrs will always be calculated first, they will never need to be marked undefined by\n   * other instructions.\n   *\n   * For regular attributes a name of an attribute and its value alternate in the array.\n   * e.g. ['role', 'checkbox']\n   * This array can contain flags that will indicate \"special attributes\" (attributes with\n   * namespaces, attributes extracted from bindings and outputs).\n   */\n  attrs: TAttributes | null;\n\n  /**\n   * Same as `TNode.attrs` but contains merged data across all directive host bindings.\n   *\n   * We need to keep `attrs` as unmerged so that it can be used for attribute selectors.\n   * We merge attrs here so that it can be used in a performant way for initial rendering.\n   *\n   * The `attrs` are merged in first pass in following order:\n   * - Component's `hostAttrs`\n   * - Directives' `hostAttrs`\n   * - Template `TNode.attrs` associated with the current `TNode`.\n   */\n  mergedAttrs: TAttributes | null;\n\n  /**\n   * A set of local names under which a given element is exported in a template and\n   * visible to queries. An entry in this array can be created for different reasons:\n   * - an element itself is referenced, ex.: `<div #foo>`\n   * - a component is referenced, ex.: `<my-cmpt #foo>`\n   * - a directive is referenced, ex.: `<my-cmpt #foo=\"directiveExportAs\">`.\n   *\n   * A given element might have different local names and those names can be associated\n   * with a directive. We store local names at even indexes while odd indexes are reserved\n   * for directive index in a view (or `-1` if there is no associated directive).\n   *\n   * Some examples:\n   * - `<div #foo>` => `[\"foo\", -1]`\n   * - `<my-cmpt #foo>` => `[\"foo\", myCmptIdx]`\n   * - `<my-cmpt #foo #bar=\"directiveExportAs\">` => `[\"foo\", myCmptIdx, \"bar\", directiveIdx]`\n   * - `<div #foo #bar=\"directiveExportAs\">` => `[\"foo\", -1, \"bar\", directiveIdx]`\n   */\n  localNames: (string | number)[] | null;\n\n  /** Information about input properties that need to be set once from attribute data. */\n  initialInputs: InitialInputData | null;\n\n  /**\n   * Input data for all directives on this node. `null` means that there are no directives with\n   * inputs on this node.\n   */\n  inputs: NodeInputBindings | null;\n\n  /**\n   * Input data for host directives applied to the node.\n   */\n  hostDirectiveInputs: HostDirectiveInputs | null;\n\n  /**\n   * Output data for all directives on this node. `null` means that there are no directives with\n   * outputs on this node.\n   */\n  outputs: NodeOutputBindings | null;\n\n  /**\n   * Input data for host directives applied to the node.\n   */\n  hostDirectiveOutputs: HostDirectiveOutputs | null;\n\n  /**\n   * Mapping between directive classes applied to the node and their indexes.\n   */\n  directiveToIndex: DirectiveIndexMap | null;\n\n  /**\n   * The TView attached to this node.\n   *\n   * If this TNode corresponds to an LContainer with a template (e.g. structural\n   * directive), the template's TView will be stored here.\n   *\n   * If this TNode corresponds to an element, tView will be `null`.\n   */\n  tView: TView | null;\n\n  /**\n   * The next sibling node. Necessary so we can propagate through the root nodes of a view\n   * to insert them or remove them from the DOM.\n   */\n  next: TNode | null;\n\n  /**\n   * The previous sibling node.\n   * This simplifies operations when we need a pointer to the previous node.\n   */\n  prev: TNode | null;\n\n  /**\n   * The next projected sibling. Since in Angular content projection works on the node-by-node\n   * basis the act of projecting nodes might change nodes relationship at the insertion point\n   * (target view). At the same time we need to keep initial relationship between nodes as\n   * expressed in content view.\n   */\n  projectionNext: TNode | null;\n\n  /**\n   * First child of the current node.\n   *\n   * For component nodes, the child will always be a ContentChild (in same view).\n   * For embedded view nodes, the child will be in their child view.\n   */\n  child: TNode | null;\n\n  /**\n   * Parent node (in the same view only).\n   *\n   * We need a reference to a node's parent so we can append the node to its parent's native\n   * element at the appropriate time.\n   *\n   * If the parent would be in a different view (e.g. component host), this property will be null.\n   * It's important that we don't try to cross component boundaries when retrieving the parent\n   * because the parent will change (e.g. index, attrs) depending on where the component was\n   * used (and thus shouldn't be stored on TNode). In these cases, we retrieve the parent through\n   * LView.node instead (which will be instance-specific).\n   *\n   * If this is an inline view node (V), the parent will be its container.\n   */\n  parent: TElementNode | TContainerNode | null;\n\n  /**\n   * List of projected TNodes for a given component host element OR index into the said nodes.\n   *\n   * For easier discussion assume this example:\n   * `<parent>`'s view definition:\n   * ```html\n   * <child id=\"c1\">content1</child>\n   * <child id=\"c2\"><span>content2</span></child>\n   * ```\n   * `<child>`'s view definition:\n   * ```html\n   * <ng-content id=\"cont1\"></ng-content>\n   * ```\n   *\n   * If `Array.isArray(projection)` then `TNode` is a host element:\n   * - `projection` stores the content nodes which are to be projected.\n   *    - The nodes represent categories defined by the selector: For example:\n   *      `<ng-content/><ng-content select=\"abc\"/>` would represent the heads for `<ng-content/>`\n   *      and `<ng-content select=\"abc\"/>` respectively.\n   *    - The nodes we store in `projection` are heads only, we used `.next` to get their\n   *      siblings.\n   *    - The nodes `.next` is sorted/rewritten as part of the projection setup.\n   *    - `projection` size is equal to the number of projections `<ng-content>`. The size of\n   *      `c1` will be `1` because `<child>` has only one `<ng-content>`.\n   * - we store `projection` with the host (`c1`, `c2`) rather than the `<ng-content>` (`cont1`)\n   *   because the same component (`<child>`) can be used in multiple locations (`c1`, `c2`) and\n   * as a result have different set of nodes to project.\n   * - without `projection` it would be difficult to efficiently traverse nodes to be projected.\n   *\n   * If `typeof projection == 'number'` then `TNode` is a `<ng-content>` element:\n   * - `projection` is an index of the host's `projection`Nodes.\n   *   - This would return the first head node to project:\n   *     `getHost(currentTNode).projection[currentTNode.projection]`.\n   * - When projecting nodes the parent node retrieved may be a `<ng-content>` node, in which case\n   *   the process is recursive in nature.\n   *\n   * If `projection` is of type `RNode[][]` than we have a collection of native nodes passed as\n   * projectable nodes during dynamic component creation.\n   */\n  projection: (TNode | RNode[])[] | number | null;\n\n  /**\n   * A collection of all `style` static values for an element (including from host).\n   *\n   * This field will be populated if and when:\n   *\n   * - There are one or more initial `style`s on an element (e.g. `<div style=\"width:200px;\">`)\n   * - There are one or more initial `style`s on a directive/component host\n   *   (e.g. `@Directive({host: {style: \"width:200px;\" } }`)\n   */\n  styles: string | null;\n\n  /**\n   * A collection of all `style` static values for an element excluding host sources.\n   *\n   * Populated when there are one or more initial `style`s on an element\n   * (e.g. `<div style=\"width:200px;\">`)\n   * Must be stored separately from `tNode.styles` to facilitate setting directive\n   * inputs that shadow the `style` property. If we used `tNode.styles` as is for shadowed inputs,\n   * we would feed host styles back into directives as \"inputs\". If we used `tNode.attrs`, we\n   * would have to concatenate the attributes on every template pass. Instead, we process once on\n   * first create pass and store here.\n   */\n  stylesWithoutHost: string | null;\n\n  /**\n   * A `KeyValueArray` version of residual `styles`.\n   *\n   * When there are styling instructions than each instruction stores the static styling\n   * which is of lower priority than itself. This means that there may be a higher priority\n   * styling than the instruction.\n   *\n   * Imagine:\n   * ```angular-ts\n   * <div style=\"color: highest;\" my-dir>\n   *\n   * @Directive({\n   *   host: {\n   *     style: 'color: lowest; ',\n   *     '[styles.color]': 'exp' // ɵɵstyleProp('color', ctx.exp);\n   *   }\n   * })\n   * ```\n   *\n   * In the above case:\n   * - `color: lowest` is stored with `ɵɵstyleProp('color', ctx.exp);` instruction\n   * -  `color: highest` is the residual and is stored here.\n   *\n   * - `undefined': not initialized.\n   * - `null`: initialized but `styles` is `null`\n   * - `KeyValueArray`: parsed version of `styles`.\n   */\n  residualStyles: KeyValueArray<any> | undefined | null;\n\n  /**\n   * A collection of all class static values for an element (including from host).\n   *\n   * This field will be populated if and when:\n   *\n   * - There are one or more initial classes on an element (e.g. `<div class=\"one two three\">`)\n   * - There are one or more initial classes on an directive/component host\n   *   (e.g. `@Directive({host: {class: \"SOME_CLASS\" } }`)\n   */\n  classes: string | null;\n\n  /**\n   * A collection of all class static values for an element excluding host sources.\n   *\n   * Populated when there are one or more initial classes on an element\n   * (e.g. `<div class=\"SOME_CLASS\">`)\n   * Must be stored separately from `tNode.classes` to facilitate setting directive\n   * inputs that shadow the `class` property. If we used `tNode.classes` as is for shadowed\n   * inputs, we would feed host classes back into directives as \"inputs\". If we used\n   * `tNode.attrs`, we would have to concatenate the attributes on every template pass. Instead,\n   * we process once on first create pass and store here.\n   */\n  classesWithoutHost: string | null;\n\n  /**\n   * A `KeyValueArray` version of residual `classes`.\n   *\n   * Same as `TNode.residualStyles` but for classes.\n   *\n   * - `undefined': not initialized.\n   * - `null`: initialized but `classes` is `null`\n   * - `KeyValueArray`: parsed version of `classes`.\n   */\n  residualClasses: KeyValueArray<any> | undefined | null;\n\n  /**\n   * Stores the head/tail index of the class bindings.\n   *\n   * - If no bindings, the head and tail will both be 0.\n   * - If there are template bindings, stores the head/tail of the class bindings in the template.\n   * - If no template bindings but there are host bindings, the head value will point to the last\n   *   host binding for \"class\" (not the head of the linked list), tail will be 0.\n   *\n   * See: `style_binding_list.ts` for details.\n   *\n   * This is used by `insertTStylingBinding` to know where the next styling binding should be\n   * inserted so that they can be sorted in priority order.\n   */\n  classBindings: TStylingRange;\n\n  /**\n   * Stores the head/tail index of the class bindings.\n   *\n   * - If no bindings, the head and tail will both be 0.\n   * - If there are template bindings, stores the head/tail of the style bindings in the template.\n   * - If no template bindings but there are host bindings, the head value will point to the last\n   *   host binding for \"style\" (not the head of the linked list), tail will be 0.\n   *\n   * See: `style_binding_list.ts` for details.\n   *\n   * This is used by `insertTStylingBinding` to know where the next styling binding should be\n   * inserted so that they can be sorted in priority order.\n   */\n  styleBindings: TStylingRange;\n}\n\n/**\n * See `TNode.insertBeforeIndex`\n */\nexport type InsertBeforeIndex = null | number | number[];\n\n/** Static data for an element  */\nexport interface TElementNode extends TNode {\n  /** Index in the data[] array */\n  index: number;\n  child: TElementNode | TTextNode | TElementContainerNode | TContainerNode | TProjectionNode | null;\n  /**\n   * Element nodes will have parents unless they are the first node of a component or\n   * embedded view (which means their parent is in a different view and must be\n   * retrieved using viewData[HOST_NODE]).\n   */\n  parent: TElementNode | TElementContainerNode | null;\n  tView: null;\n\n  /**\n   * If this is a component TNode with projection, this will be an array of projected\n   * TNodes or native nodes (see TNode.projection for more info). If it's a regular element node\n   * or a component without projection, it will be null.\n   */\n  projection: (TNode | RNode[])[] | null;\n\n  /**\n   * Stores TagName\n   */\n  value: string;\n}\n\n/** Static data for a text node */\nexport interface TTextNode extends TNode {\n  /** Index in the data[] array */\n  index: number;\n  child: null;\n  /**\n   * Text nodes will have parents unless they are the first node of a component or\n   * embedded view (which means their parent is in a different view and must be\n   * retrieved using LView.node).\n   */\n  parent: TElementNode | TElementContainerNode | null;\n  tView: null;\n  projection: null;\n}\n\n/** Static data for an LContainer */\nexport interface TContainerNode extends TNode {\n  /**\n   * Index in the data[] array.\n   *\n   * If it's -1, this is a dynamically created container node that isn't stored in\n   * data[] (e.g. when you inject ViewContainerRef) .\n   */\n  index: number;\n  child: null;\n\n  /**\n   * Container nodes will have parents unless:\n   *\n   * - They are the first node of a component or embedded view\n   * - They are dynamically created\n   */\n  parent: TElementNode | TElementContainerNode | null;\n  tView: TView | null;\n  projection: null;\n  value: null;\n}\n\n/** Static data for an <ng-container> */\nexport interface TElementContainerNode extends TNode {\n  /** Index in the LView[] array. */\n  index: number;\n  child: TElementNode | TTextNode | TContainerNode | TElementContainerNode | TProjectionNode | null;\n  parent: TElementNode | TElementContainerNode | null;\n  tView: null;\n  projection: null;\n}\n\n/** Static data for an ICU expression */\nexport interface TIcuContainerNode extends TNode {\n  /** Index in the LView[] array. */\n  index: number;\n  child: null;\n  parent: TElementNode | TElementContainerNode | null;\n  tView: null;\n  projection: null;\n  value: TIcu;\n}\n\n/** Static data for an LProjectionNode  */\nexport interface TProjectionNode extends TNode {\n  /** Index in the data[] array */\n  child: null;\n  /**\n   * Projection nodes will have parents unless they are the first node of a component\n   * or embedded view (which means their parent is in a different view and must be\n   * retrieved using LView.node).\n   */\n  parent: TElementNode | TElementContainerNode | null;\n  tView: null;\n\n  /** Index of the projection node. (See TNode.projection for more info.) */\n  projection: number;\n  value: null;\n}\n\n/**\n * Static data for a `@let` declaration. This node is necessary, because the expression of a\n * `@let` declaration can contain code that uses the node injector (e.g. pipes). In order for\n * the node injector to work, it needs this `TNode`.\n */\nexport interface TLetDeclarationNode extends TNode {\n  index: number;\n  child: null;\n  parent: TElementNode | TElementContainerNode | null;\n  tView: null;\n  projection: null;\n  value: null; // TODO(crisbeto): capture the name here? Might come in handy for the dev tools.\n}\n\n/**\n * A union type representing all TNode types that can host a directive.\n */\nexport type TDirectiveHostNode = TElementNode | TContainerNode | TElementContainerNode;\n\n/**\n * Maps the public names of outputs available on a specific node to the index\n * of the directive instance that defines the output, for example:\n *\n * ```\n * {\n *   \"publicName\": [0, 5]\n * }\n * ```\n */\nexport type NodeOutputBindings = Record<string, number[]>;\n\n/**\n * Maps the public names of inputs applied to a specific node to the index of the\n * directive instance to which the input value should be written, for example:\n *\n * ```\n * {\n *   \"publicName\": [0, 5]\n * }\n * ```\n */\nexport type NodeInputBindings = Record<string, number[]>;\n\n/**\n * This array contains information about input properties that\n * need to be set once from attribute data. It's ordered by\n * directive index (relative to element) so it's simple to\n * look up a specific directive's initial input data.\n *\n * Within each sub-array:\n *\n * i+0: public name\n * i+1: initial value\n *\n * If a directive on a node does not have any input properties\n * that should be set from attributes, its index is set to null\n * to avoid a sparse array.\n *\n * e.g. [null, ['role-min', 'minified-input', 'button']]\n */\nexport type InitialInputData = (InitialInputs | null)[];\n\n/**\n * Used by InitialInputData to store input properties\n * that should be set once from attributes.\n *\n * i+0: attribute name\n * i+1: minified/internal input name\n * i+2: input flags\n * i+3: initial value\n *\n * e.g. ['role-min', 'minified-input', 'button']\n */\nexport type InitialInputs = string[];\n\n/**\n * Represents inputs coming from a host directive and exposed on a TNode.\n *\n * - The key is the public name of an input as it is exposed on the specific node.\n * - The value is an array where:\n *   - i+0: Index of the host directive that should be written to.\n *   - i+1: Public name of the input as it was defined on the host directive before aliasing.\n */\nexport type HostDirectiveInputs = Record<string, (number | string)[]>;\n\n/**\n * Represents outputs coming from a host directive and exposed on a TNode.\n *\n * - The key is the public name of an output as it is exposed on the specific node.\n * - The value is an array where:\n *   - i+0: Index of the host directive on which the output is defined..\n *   - i+1: Public name of the output as it was defined on the host directive before aliasing.\n */\nexport type HostDirectiveOutputs = Record<string, (number | string)[]>;\n\n/**\n * Represents a map between a class reference and the index at which its directive is available on\n * a specific TNode. The value can be either:\n *   1. A number means that there's only one selector-matched directive on the node and it\n *      doesn't have any host directives.\n *   2. An array means that there's a selector-matched directive and it has host directives.\n *      The array is structured as follows:\n *        - 0: Index of the selector-matched directive.\n *        - 1: Start index of the range within which the host directives are defined.\n *        - 2: End of the host directive range.\n *\n * Example:\n * ```\n * Map {\n *   [NoHostDirectives]: 5,\n *   [HasHostDirectives]: [10, 6, 8],\n * }\n * ```\n */\nexport type DirectiveIndexMap = Map<\n  Type<unknown>,\n  number | [directiveIndex: number, hostDirectivesStart: number, hostDirectivesEnd: number]\n>;\n\n/**\n * Type representing a set of TNodes that can have local refs (`#foo`) placed on them.\n */\nexport type TNodeWithLocalRefs = TContainerNode | TElementNode | TElementContainerNode;\n\n/**\n * Type for a function that extracts a value for a local refs.\n * Example:\n * - `<div #nativeDivEl>` - `nativeDivEl` should point to the native `<div>` element;\n * - `<ng-template #tplRef>` - `tplRef` should point to the `TemplateRef` instance;\n */\nexport type LocalRefExtractor = (tNode: TNodeWithLocalRefs, currentView: LView) => any;\n\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.\n *\n * ```html\n * <div my-dir [class]=\"exp\"></div>\n * ```\n * and\n * ```ts\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nexport function hasClassInput(tNode: TNode) {\n  return (tNode.flags & TNodeFlags.hasClassInput) !== 0;\n}\n\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.\n *\n * ```html\n * <div my-dir [style]=\"exp\"></div>\n * ```\n * and\n * ```ts\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nexport function hasStyleInput(tNode: TNode) {\n  return (tNode.flags & TNodeFlags.hasStyleInput) !== 0;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {CharCode} from '../../util/char_code';\nimport {AttributeMarker} from '../interfaces/attribute_marker';\nimport {TAttributes} from '../interfaces/node';\nimport {CssSelector} from '../interfaces/projection';\nimport {Renderer} from '../interfaces/renderer';\nimport {RElement} from '../interfaces/renderer_dom';\n\n/**\n * Assigns all attribute values to the provided element via the inferred renderer.\n *\n * This function accepts two forms of attribute entries:\n *\n * default: (key, value):\n *  attrs = [key1, value1, key2, value2]\n *\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n *\n * The `attrs` array can contain a mix of both the default and namespaced entries.\n * The \"default\" values are set without a marker, but if the function comes across\n * a marker value then it will attempt to set a namespaced value. If the marker is\n * not of a namespaced value then the function will quit and return the index value\n * where it stopped during the iteration of the attrs array.\n *\n * See [AttributeMarker] to understand what the namespace marker value is.\n *\n * Note that this instruction does not support assigning style and class values to\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n * are applied to an element.\n * @param renderer The renderer to be used\n * @param native The element that the attributes will be assigned to\n * @param attrs The attribute array of values that will be assigned to the element\n * @returns the index value that was last accessed in the attributes array\n */\nexport function setUpAttributes(renderer: Renderer, native: RElement, attrs: TAttributes): number {\n  let i = 0;\n  while (i < attrs.length) {\n    const value = attrs[i];\n    if (typeof value === 'number') {\n      // only namespaces are supported. Other value types (such as style/class\n      // entries) are not supported in this function.\n      if (value !== AttributeMarker.NamespaceURI) {\n        break;\n      }\n\n      // we just landed on the marker value ... therefore\n      // we should skip to the next entry\n      i++;\n\n      const namespaceURI = attrs[i++] as string;\n      const attrName = attrs[i++] as string;\n      const attrVal = attrs[i++] as string;\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      renderer.setAttribute(native, attrName, attrVal, namespaceURI);\n    } else {\n      // attrName is string;\n      const attrName = value as string;\n      const attrVal = attrs[++i];\n      // Standard attributes\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      if (isAnimationProp(attrName)) {\n        renderer.setProperty(native, attrName, attrVal);\n      } else {\n        renderer.setAttribute(native, attrName, attrVal as string);\n      }\n      i++;\n    }\n  }\n\n  // another piece of code may iterate over the same attributes array. Therefore\n  // it may be helpful to return the exact spot where the attributes array exited\n  // whether by running into an unsupported marker or if all the static values were\n  // iterated over.\n  return i;\n}\n\n/**\n * Test whether the given value is a marker that indicates that the following\n * attribute values in a `TAttributes` array are only the names of attributes,\n * and not name-value pairs.\n * @param marker The attribute marker to test.\n * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\n */\nexport function isNameOnlyAttributeMarker(marker: string | AttributeMarker | CssSelector) {\n  return (\n    marker === AttributeMarker.Bindings ||\n    marker === AttributeMarker.Template ||\n    marker === AttributeMarker.I18n\n  );\n}\n\nexport function isAnimationProp(name: string): boolean {\n  // Perf note: accessing charCodeAt to check for the first character of a string is faster as\n  // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that\n  // charCodeAt doesn't allocate memory to return a substring.\n  return name.charCodeAt(0) === CharCode.AT_SIGN;\n}\n\n/**\n * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.\n *\n * This merge function keeps the order of attrs same.\n *\n * @param dst Location of where the merged `TAttributes` should end up.\n * @param src `TAttributes` which should be appended to `dst`\n */\nexport function mergeHostAttrs(\n  dst: TAttributes | null,\n  src: TAttributes | null,\n): TAttributes | null {\n  if (src === null || src.length === 0) {\n    // do nothing\n  } else if (dst === null || dst.length === 0) {\n    // We have source, but dst is empty, just make a copy.\n    dst = src.slice();\n  } else {\n    let srcMarker: AttributeMarker = AttributeMarker.ImplicitAttributes;\n    for (let i = 0; i < src.length; i++) {\n      const item = src[i];\n      if (typeof item === 'number') {\n        srcMarker = item;\n      } else {\n        if (srcMarker === AttributeMarker.NamespaceURI) {\n          // Case where we need to consume `key1`, `key2`, `value` items.\n        } else if (\n          srcMarker === AttributeMarker.ImplicitAttributes ||\n          srcMarker === AttributeMarker.Styles\n        ) {\n          // Case where we have to consume `key1` and `value` only.\n          mergeHostAttribute(dst, srcMarker, item as string, null, src[++i] as string);\n        } else {\n          // Case where we have to consume `key1` only.\n          mergeHostAttribute(dst, srcMarker, item as string, null, null);\n        }\n      }\n    }\n  }\n  return dst;\n}\n\n/**\n * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.\n *\n * @param dst `TAttributes` to append to.\n * @param marker Region where the `key`/`value` should be added.\n * @param key1 Key to add to `TAttributes`\n * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)\n * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.\n */\nexport function mergeHostAttribute(\n  dst: TAttributes,\n  marker: AttributeMarker,\n  key1: string,\n  key2: string | null,\n  value: string | null,\n): void {\n  let i = 0;\n  // Assume that new markers will be inserted at the end.\n  let markerInsertPosition = dst.length;\n  // scan until correct type.\n  if (marker === AttributeMarker.ImplicitAttributes) {\n    markerInsertPosition = -1;\n  } else {\n    while (i < dst.length) {\n      const dstValue = dst[i++];\n      if (typeof dstValue === 'number') {\n        if (dstValue === marker) {\n          markerInsertPosition = -1;\n          break;\n        } else if (dstValue > marker) {\n          // We need to save this as we want the markers to be inserted in specific order.\n          markerInsertPosition = i - 1;\n          break;\n        }\n      }\n    }\n  }\n\n  // search until you find place of insertion\n  while (i < dst.length) {\n    const item = dst[i];\n    if (typeof item === 'number') {\n      // since `i` started as the index after the marker, we did not find it if we are at the next\n      // marker\n      break;\n    } else if (item === key1) {\n      // We already have same token\n      if (key2 === null) {\n        if (value !== null) {\n          dst[i + 1] = value;\n        }\n        return;\n      } else if (key2 === dst[i + 1]) {\n        dst[i + 2] = value!;\n        return;\n      }\n    }\n    // Increment counter.\n    i++;\n    if (key2 !== null) i++;\n    if (value !== null) i++;\n  }\n\n  // insert at location.\n  if (markerInsertPosition !== -1) {\n    dst.splice(markerInsertPosition, 0, marker);\n    i = markerInsertPosition + 1;\n  }\n  dst.splice(i++, 0, key1);\n  if (key2 !== null) {\n    dst.splice(i++, 0, key2);\n  }\n  if (value !== null) {\n    dst.splice(i++, 0, value);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\nexport const NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector} from '../di/injector';\nimport {convertToBitFlags} from '../di/injector_compatibility';\nimport {InjectFlags, InjectOptions} from '../di/interface/injector';\nimport {ProviderToken} from '../di/provider_token';\nimport {NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR} from '../view/provider_flags';\n\n/**\n * Injector that looks up a value using a specific injector, before falling back to the module\n * injector. Used primarily when creating components or embedded views dynamically.\n */\nexport class ChainedInjector implements Injector {\n  constructor(\n    public injector: Injector,\n    public parentInjector: Injector,\n  ) {}\n\n  get<T>(token: ProviderToken<T>, notFoundValue?: T, flags?: InjectFlags | InjectOptions): T {\n    flags = convertToBitFlags(flags);\n    const value = this.injector.get<T | typeof NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR>(\n      token,\n      NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR,\n      flags,\n    );\n\n    if (\n      value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n      notFoundValue === (NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as unknown as T)\n    ) {\n      // Return the value from the root element injector when\n      // - it provides it\n      //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n      // - the module injector should not be checked\n      //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n      return value as T;\n    }\n\n    return this.parentInjector.get(token, notFoundValue, flags);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {type Injector} from '../../di/injector';\nimport {assertGreaterThan, assertNotEqual, assertNumber} from '../../util/assert';\nimport {ChainedInjector} from '../chained_injector';\nimport {\n  NO_PARENT_INJECTOR,\n  RelativeInjectorLocation,\n  RelativeInjectorLocationFlags,\n} from '../interfaces/injector';\nimport {DECLARATION_VIEW, HEADER_OFFSET, LView} from '../interfaces/view';\n\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\nexport function hasParentInjector(parentLocation: RelativeInjectorLocation): boolean {\n  return parentLocation !== NO_PARENT_INJECTOR;\n}\n\nexport function getParentInjectorIndex(parentLocation: RelativeInjectorLocation): number {\n  if (ngDevMode) {\n    assertNumber(parentLocation, 'Number expected');\n    assertNotEqual(parentLocation as any, -1, 'Not a valid state.');\n    const parentInjectorIndex = parentLocation & RelativeInjectorLocationFlags.InjectorIndexMask;\n\n    assertGreaterThan(\n      parentInjectorIndex,\n      HEADER_OFFSET,\n      'Parent injector must be pointing past HEADER_OFFSET.',\n    );\n  }\n  return parentLocation & RelativeInjectorLocationFlags.InjectorIndexMask;\n}\n\nexport function getParentInjectorViewOffset(parentLocation: RelativeInjectorLocation): number {\n  return parentLocation >> RelativeInjectorLocationFlags.ViewOffsetShift;\n}\n\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @returns The LView instance that contains the parent injector\n */\nexport function getParentInjectorView(location: RelativeInjectorLocation, startView: LView): LView {\n  let viewOffset = getParentInjectorViewOffset(location);\n  let parentView = startView;\n  // For most cases, the parent injector can be found on the host node (e.g. for component\n  // or container), but we must keep the loop here to support the rarer case of deeply nested\n  // <ng-template> tags or inline views, where the parent injector might live many views\n  // above the child injector.\n  while (viewOffset > 0) {\n    parentView = parentView[DECLARATION_VIEW]!;\n    viewOffset--;\n  }\n  return parentView;\n}\n\n/**\n * Detects whether an injector is an instance of a `ChainedInjector`,\n * created based on the `OutletInjector`.\n */\nexport function isRouterOutletInjector(currentInjector: Injector): boolean {\n  return (\n    currentInjector instanceof ChainedInjector &&\n    typeof (currentInjector.injector as any).__ngOutletInjector === 'function'\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {isForwardRef, resolveForwardRef} from '../di/forward_ref';\nimport {injectRootLimpMode, setInjectImplementation} from '../di/inject_switch';\nimport {Injector} from '../di/injector';\nimport {convertToBitFlags} from '../di/injector_compatibility';\nimport {InjectorMarkers} from '../di/injector_marker';\nimport {InjectFlags, InjectOptions} from '../di/interface/injector';\nimport {ProviderToken} from '../di/provider_token';\nimport {Type} from '../interface/type';\nimport {assertDefined, assertEqual, assertIndexInRange} from '../util/assert';\nimport {noSideEffects} from '../util/closure';\n\nimport {assertDirectiveDef, assertNodeInjector, assertTNodeForLView} from './assert';\nimport {\n  emitInstanceCreatedByInjectorEvent,\n  InjectorProfilerContext,\n  runInInjectorProfilerContext,\n  setInjectorProfilerContext,\n} from './debug/injector_profiler';\nimport {getFactoryDef} from './definition_factory';\nimport {throwCyclicDependencyError, throwProviderNotFoundError} from './errors_di';\nimport {NG_ELEMENT_ID, NG_FACTORY_DEF} from './fields';\nimport {registerPreOrderHooks} from './hooks';\nimport {AttributeMarker} from './interfaces/attribute_marker';\nimport {ComponentDef, DirectiveDef} from './interfaces/definition';\nimport {\n  NO_PARENT_INJECTOR,\n  NodeInjectorFactory,\n  NodeInjectorOffset,\n  RelativeInjectorLocation,\n  RelativeInjectorLocationFlags,\n} from './interfaces/injector';\nimport {\n  TContainerNode,\n  TDirectiveHostNode,\n  TElementContainerNode,\n  TElementNode,\n  TNode,\n  TNodeProviderIndexes,\n  TNodeType,\n} from './interfaces/node';\nimport {isComponentDef, isComponentHost, isRootView} from './interfaces/type_checks';\nimport {\n  DECLARATION_COMPONENT_VIEW,\n  DECLARATION_VIEW,\n  EMBEDDED_VIEW_INJECTOR,\n  FLAGS,\n  INJECTOR,\n  LView,\n  LViewFlags,\n  T_HOST,\n  TData,\n  TVIEW,\n  TView,\n  TViewType,\n} from './interfaces/view';\nimport {assertTNodeType} from './node_assert';\nimport {enterDI, getCurrentTNode, getLView, leaveDI} from './state';\nimport {isNameOnlyAttributeMarker} from './util/attrs_utils';\nimport {\n  getParentInjectorIndex,\n  getParentInjectorView,\n  hasParentInjector,\n} from './util/injector_utils';\nimport {stringifyForError} from './util/stringify_utils';\n\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```ts\n * @Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * @Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n */\nlet includeViewProviders = true;\n\nexport function setIncludeViewProviders(v: boolean): boolean {\n  const oldValue = includeViewProviders;\n  includeViewProviders = v;\n  return oldValue;\n}\n\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n */\nconst BLOOM_SIZE = 256;\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n\n/**\n * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,\n * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash\n * number.\n */\nconst BLOOM_BUCKET_BITS = 5;\n\n/** Counter used to generate unique IDs for directives. */\nlet nextNgElementId = 0;\n\n/** Value used when something wasn't found by an injector. */\nconst NOT_FOUND = {};\n\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param injectorIndex The index of the node injector where this token should be registered\n * @param tView The TView for the injector's bloom filters\n * @param type The directive token to register\n */\nexport function bloomAdd(\n  injectorIndex: number,\n  tView: TView,\n  type: ProviderToken<any> | string,\n): void {\n  ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');\n  let id: number | undefined;\n  if (typeof type === 'string') {\n    id = type.charCodeAt(0) || 0;\n  } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {\n    id = (type as any)[NG_ELEMENT_ID];\n  }\n\n  // Set a unique ID on the directive type, so if something tries to inject the directive,\n  // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n  if (id == null) {\n    id = (type as any)[NG_ELEMENT_ID] = nextNgElementId++;\n  }\n\n  // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n  // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n  const bloomHash = id & BLOOM_MASK;\n\n  // Create a mask that targets the specific bit associated with the directive.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n\n  // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.\n  // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask\n  // should be written to.\n  (tView.data as number[])[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;\n}\n\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param tNode for which an injector should be retrieved / created.\n * @param lView View where the node is stored\n * @returns Node injector\n */\nexport function getOrCreateNodeInjectorForNode(\n  tNode: TElementNode | TContainerNode | TElementContainerNode,\n  lView: LView,\n): number {\n  const existingInjectorIndex = getInjectorIndex(tNode, lView);\n  if (existingInjectorIndex !== -1) {\n    return existingInjectorIndex;\n  }\n\n  const tView = lView[TVIEW];\n  if (tView.firstCreatePass) {\n    tNode.injectorIndex = lView.length;\n    insertBloom(tView.data, tNode); // foundation for node bloom\n    insertBloom(lView, null); // foundation for cumulative bloom\n    insertBloom(tView.blueprint, null);\n  }\n\n  const parentLoc = getParentInjectorLocation(tNode, lView);\n  const injectorIndex = tNode.injectorIndex;\n\n  // If a parent injector can't be found, its location is set to -1.\n  // In that case, we don't need to set up a cumulative bloom\n  if (hasParentInjector(parentLoc)) {\n    const parentIndex = getParentInjectorIndex(parentLoc);\n    const parentLView = getParentInjectorView(parentLoc, lView);\n    const parentData = parentLView[TVIEW].data as any;\n    // Creates a cumulative bloom filter that merges the parent's bloom filter\n    // and its own cumulative bloom (which contains tokens for all ancestors)\n    for (let i = 0; i < NodeInjectorOffset.BLOOM_SIZE; i++) {\n      lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n    }\n  }\n\n  lView[injectorIndex + NodeInjectorOffset.PARENT] = parentLoc;\n  return injectorIndex;\n}\n\nfunction insertBloom(arr: any[], footer: TNode | null): void {\n  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\n\nexport function getInjectorIndex(tNode: TNode, lView: LView): number {\n  if (\n    tNode.injectorIndex === -1 ||\n    // If the injector index is the same as its parent's injector index, then the index has been\n    // copied down from the parent node. No injector has been created yet on this node.\n    (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n    // After the first template pass, the injector index might exist but the parent values\n    // might not have been calculated yet for this instance\n    lView[tNode.injectorIndex + NodeInjectorOffset.PARENT] === null\n  ) {\n    return -1;\n  } else {\n    ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);\n    return tNode.injectorIndex;\n  }\n}\n\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * @returns Returns a number that is the combination of the number of LViews that we have to go up\n * to find the LView containing the parent inject AND the index of the injector within that LView.\n */\nexport function getParentInjectorLocation(tNode: TNode, lView: LView): RelativeInjectorLocation {\n  if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n    // If we have a parent `TNode` and there is an injector associated with it we are done, because\n    // the parent injector is within the current `LView`.\n    return tNode.parent.injectorIndex as RelativeInjectorLocation; // ViewOffset is 0\n  }\n\n  // When parent injector location is computed it may be outside of the current view. (ie it could\n  // be pointing to a declared parent location). This variable stores number of declaration parents\n  // we need to walk up in order to find the parent injector location.\n  let declarationViewOffset = 0;\n  let parentTNode: TNode | null = null;\n  let lViewCursor: LView | null = lView;\n\n  // The parent injector is not in the current `LView`. We will have to walk the declared parent\n  // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent\n  // `NodeInjector`.\n  while (lViewCursor !== null) {\n    parentTNode = getTNodeFromLView(lViewCursor);\n\n    if (parentTNode === null) {\n      // If we have no parent, than we are done.\n      return NO_PARENT_INJECTOR;\n    }\n\n    ngDevMode && parentTNode && assertTNodeForLView(parentTNode!, lViewCursor[DECLARATION_VIEW]!);\n    // Every iteration of the loop requires that we go to the declared parent.\n    declarationViewOffset++;\n    lViewCursor = lViewCursor[DECLARATION_VIEW];\n\n    if (parentTNode.injectorIndex !== -1) {\n      // We found a NodeInjector which points to something.\n      return (parentTNode.injectorIndex |\n        (declarationViewOffset <<\n          RelativeInjectorLocationFlags.ViewOffsetShift)) as RelativeInjectorLocation;\n    }\n  }\n  return NO_PARENT_INJECTOR;\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param di The node injector in which a directive will be added\n * @param token The type or the injection token to be made public\n */\nexport function diPublicInInjector(\n  injectorIndex: number,\n  tView: TView,\n  token: ProviderToken<any>,\n): void {\n  bloomAdd(injectorIndex, tView, token);\n}\n\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```ts\n * @Component(...)\n * class MyComponent {\n *   constructor(@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```html\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```ts\n * MyComponent.ɵcmp = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * @publicApi\n */\nexport function injectAttributeImpl(tNode: TNode, attrNameToInject: string): string | null {\n  ngDevMode && assertTNodeType(tNode, TNodeType.AnyContainer | TNodeType.AnyRNode);\n  ngDevMode && assertDefined(tNode, 'expecting tNode');\n  if (attrNameToInject === 'class') {\n    return tNode.classes;\n  }\n  if (attrNameToInject === 'style') {\n    return tNode.styles;\n  }\n\n  const attrs = tNode.attrs;\n  if (attrs) {\n    const attrsLength = attrs.length;\n    let i = 0;\n    while (i < attrsLength) {\n      const value = attrs[i];\n\n      // If we hit a `Bindings` or `Template` marker then we are done.\n      if (isNameOnlyAttributeMarker(value)) break;\n\n      // Skip namespaced attributes\n      if (value === AttributeMarker.NamespaceURI) {\n        // we skip the next two values\n        // as namespaced attributes looks like\n        // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n        // 'existValue', ...]\n        i = i + 2;\n      } else if (typeof value === 'number') {\n        // Skip to the first value of the marked attribute.\n        i++;\n        while (i < attrsLength && typeof attrs[i] === 'string') {\n          i++;\n        }\n      } else if (value === attrNameToInject) {\n        return attrs[i + 1] as string;\n      } else {\n        i = i + 2;\n      }\n    }\n  }\n  return null;\n}\n\nfunction notFoundValueOrThrow<T>(\n  notFoundValue: T | null,\n  token: ProviderToken<T>,\n  flags: InjectFlags,\n): T | null {\n  if (flags & InjectFlags.Optional || notFoundValue !== undefined) {\n    return notFoundValue;\n  } else {\n    throwProviderNotFoundError(token, 'NodeInjector');\n  }\n}\n\n/**\n * Returns the value associated to the given token from the ModuleInjector or throws exception\n *\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector or throws an exception\n */\nfunction lookupTokenUsingModuleInjector<T>(\n  lView: LView,\n  token: ProviderToken<T>,\n  flags: InjectFlags,\n  notFoundValue?: any,\n): T | null {\n  if (flags & InjectFlags.Optional && notFoundValue === undefined) {\n    // This must be set or the NullInjector will throw for optional deps\n    notFoundValue = null;\n  }\n\n  if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n    const moduleInjector = lView[INJECTOR];\n    // switch to `injectInjectorOnly` implementation for module injector, since module injector\n    // should not have access to Component/Directive DI scope (that may happen through\n    // `directiveInject` implementation)\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      if (moduleInjector) {\n        return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n      } else {\n        return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n      }\n    } finally {\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n  return notFoundValueOrThrow<T>(notFoundValue, token, flags);\n}\n\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nexport function getOrCreateInjectable<T>(\n  tNode: TDirectiveHostNode | null,\n  lView: LView,\n  token: ProviderToken<T>,\n  flags: InjectFlags = InjectFlags.Default,\n  notFoundValue?: any,\n): T | null {\n  if (tNode !== null) {\n    // If the view or any of its ancestors have an embedded\n    // view injector, we have to look it up there first.\n    if (\n      lView[FLAGS] & LViewFlags.HasEmbeddedViewInjector &&\n      // The token must be present on the current node injector when the `Self`\n      // flag is set, so the lookup on embedded view injector(s) can be skipped.\n      !(flags & InjectFlags.Self)\n    ) {\n      const embeddedInjectorValue = lookupTokenUsingEmbeddedInjector(\n        tNode,\n        lView,\n        token,\n        flags,\n        NOT_FOUND,\n      );\n      if (embeddedInjectorValue !== NOT_FOUND) {\n        return embeddedInjectorValue;\n      }\n    }\n\n    // Otherwise try the node injector.\n    const value = lookupTokenUsingNodeInjector(tNode, lView, token, flags, NOT_FOUND);\n    if (value !== NOT_FOUND) {\n      return value;\n    }\n  }\n\n  // Finally, fall back to the module injector.\n  return lookupTokenUsingModuleInjector<T>(lView, token, flags, notFoundValue);\n}\n\n/**\n * Returns the value associated to the given token from the node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingNodeInjector<T>(\n  tNode: TDirectiveHostNode,\n  lView: LView,\n  token: ProviderToken<T>,\n  flags: InjectFlags,\n  notFoundValue?: any,\n) {\n  const bloomHash = bloomHashBitOrFactory(token);\n  // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n  // so just call the factory function to create it.\n  if (typeof bloomHash === 'function') {\n    if (!enterDI(lView, tNode, flags)) {\n      // Failed to enter DI, try module injector instead. If a token is injected with the @Host\n      // flag, the module injector is not searched for that token in Ivy.\n      return flags & InjectFlags.Host\n        ? notFoundValueOrThrow<T>(notFoundValue, token, flags)\n        : lookupTokenUsingModuleInjector<T>(lView, token, flags, notFoundValue);\n    }\n    try {\n      let value: unknown;\n\n      if (ngDevMode) {\n        runInInjectorProfilerContext(\n          new NodeInjector(getCurrentTNode() as TElementNode, getLView()),\n          token as Type<T>,\n          () => {\n            value = bloomHash(flags);\n\n            if (value != null) {\n              emitInstanceCreatedByInjectorEvent(value);\n            }\n          },\n        );\n      } else {\n        value = bloomHash(flags);\n      }\n\n      if (value == null && !(flags & InjectFlags.Optional)) {\n        throwProviderNotFoundError(token);\n      } else {\n        return value;\n      }\n    } finally {\n      leaveDI();\n    }\n  } else if (typeof bloomHash === 'number') {\n    // A reference to the previous injector TView that was found while climbing the element\n    // injector tree. This is used to know if viewProviders can be accessed on the current\n    // injector.\n    let previousTView: TView | null = null;\n    let injectorIndex = getInjectorIndex(tNode, lView);\n    let parentLocation = NO_PARENT_INJECTOR;\n    let hostTElementNode: TNode | null =\n      flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;\n\n    // If we should skip this injector, or if there is no injector on this node, start by\n    // searching the parent injector.\n    if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n      parentLocation =\n        injectorIndex === -1\n          ? getParentInjectorLocation(tNode, lView)\n          : lView[injectorIndex + NodeInjectorOffset.PARENT];\n\n      if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {\n        injectorIndex = -1;\n      } else {\n        previousTView = lView[TVIEW];\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      }\n    }\n\n    // Traverse up the injector tree until we find a potential match or until we know there\n    // *isn't* a match.\n    while (injectorIndex !== -1) {\n      ngDevMode && assertNodeInjector(lView, injectorIndex);\n\n      // Check the current injector. If it matches, see if it contains token.\n      const tView = lView[TVIEW];\n      ngDevMode &&\n        assertTNodeForLView(tView.data[injectorIndex + NodeInjectorOffset.TNODE] as TNode, lView);\n      if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n        // At this point, we have an injector which *may* contain the token, so we step through\n        // the providers and directives associated with the injector's corresponding node to get\n        // the instance.\n        const instance: T | {} | null = searchTokensOnInjector<T>(\n          injectorIndex,\n          lView,\n          token,\n          previousTView,\n          flags,\n          hostTElementNode,\n        );\n        if (instance !== NOT_FOUND) {\n          return instance;\n        }\n      }\n      parentLocation = lView[injectorIndex + NodeInjectorOffset.PARENT];\n      if (\n        parentLocation !== NO_PARENT_INJECTOR &&\n        shouldSearchParent(\n          flags,\n          lView[TVIEW].data[injectorIndex + NodeInjectorOffset.TNODE] === hostTElementNode,\n        ) &&\n        bloomHasToken(bloomHash, injectorIndex, lView)\n      ) {\n        // The def wasn't found anywhere on this node, so it was a false positive.\n        // Traverse up the tree and continue searching.\n        previousTView = tView;\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      } else {\n        // If we should not search parent OR If the ancestor bloom filter value does not have the\n        // bit corresponding to the directive we can give up on traversing up to find the specific\n        // injector.\n        injectorIndex = -1;\n      }\n    }\n  }\n\n  return notFoundValue;\n}\n\nfunction searchTokensOnInjector<T>(\n  injectorIndex: number,\n  lView: LView,\n  token: ProviderToken<T>,\n  previousTView: TView | null,\n  flags: InjectFlags,\n  hostTElementNode: TNode | null,\n) {\n  const currentTView = lView[TVIEW];\n  const tNode = currentTView.data[injectorIndex + NodeInjectorOffset.TNODE] as TNode;\n  // First, we need to determine if view providers can be accessed by the starting element.\n  // There are two possibilities\n  const canAccessViewProviders =\n    previousTView == null\n      ? // 1) This is the first invocation `previousTView == null` which means that we are at the\n        // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n        // to look into the ViewProviders is if:\n        // - we are on a component\n        // - AND the injector set `includeViewProviders` to true (implying that the token can see\n        // ViewProviders because it is the Component or a Service which itself was declared in\n        // ViewProviders)\n        isComponentHost(tNode) && includeViewProviders\n      : // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n        // In such a case we are only allowed to look into the ViewProviders if:\n        // - We just crossed from child View to Parent View `previousTView != currentTView`\n        // - AND the parent TNode is an Element.\n        // This means that we just came from the Component's View and therefore are allowed to see\n        // into the ViewProviders.\n        previousTView != currentTView && (tNode.type & TNodeType.AnyRNode) !== 0;\n\n  // This special case happens when there is a @host on the inject and when we are searching\n  // on the host element node.\n  const isHostSpecialCase = flags & InjectFlags.Host && hostTElementNode === tNode;\n\n  const injectableIdx = locateDirectiveOrProvider(\n    tNode,\n    currentTView,\n    token,\n    canAccessViewProviders,\n    isHostSpecialCase,\n  );\n  if (injectableIdx !== null) {\n    return getNodeInjectable(lView, currentTView, injectableIdx, tNode as TElementNode);\n  } else {\n    return NOT_FOUND;\n  }\n}\n\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @param tNode TNode on which directives are present.\n * @param tView The tView we are currently processing\n * @param token Provider token or type of a directive to look for.\n * @param canAccessViewProviders Whether view providers should be considered.\n * @param isHostSpecialCase Whether the host special case applies.\n * @returns Index of a found directive or provider, or null when none found.\n */\nexport function locateDirectiveOrProvider<T>(\n  tNode: TNode,\n  tView: TView,\n  token: ProviderToken<T> | string,\n  canAccessViewProviders: boolean,\n  isHostSpecialCase: boolean | number,\n): number | null {\n  const nodeProviderIndexes = tNode.providerIndexes;\n  const tInjectables = tView.data;\n\n  const injectablesStart = nodeProviderIndexes & TNodeProviderIndexes.ProvidersStartIndexMask;\n  const directivesStart = tNode.directiveStart;\n  const directiveEnd = tNode.directiveEnd;\n  const cptViewProvidersCount =\n    nodeProviderIndexes >> TNodeProviderIndexes.CptViewProvidersCountShift;\n  const startingIndex = canAccessViewProviders\n    ? injectablesStart\n    : injectablesStart + cptViewProvidersCount;\n  // When the host special case applies, only the viewProviders and the component are visible\n  const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n  for (let i = startingIndex; i < endIndex; i++) {\n    const providerTokenOrDef = tInjectables[i] as ProviderToken<any> | DirectiveDef<any> | string;\n    if (\n      (i < directivesStart && token === providerTokenOrDef) ||\n      (i >= directivesStart && (providerTokenOrDef as DirectiveDef<any>).type === token)\n    ) {\n      return i;\n    }\n  }\n  if (isHostSpecialCase) {\n    const dirDef = tInjectables[directivesStart] as DirectiveDef<any>;\n    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n      return directivesStart;\n    }\n  }\n  return null;\n}\n\n/**\n * Retrieve or instantiate the injectable from the `LView` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n */\nexport function getNodeInjectable(\n  lView: LView,\n  tView: TView,\n  index: number,\n  tNode: TDirectiveHostNode,\n): any {\n  let value = lView[index];\n  const tData = tView.data;\n  if (value instanceof NodeInjectorFactory) {\n    const factory: NodeInjectorFactory = value;\n    if (factory.resolving) {\n      throwCyclicDependencyError(stringifyForError(tData[index]));\n    }\n    const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n    factory.resolving = true;\n\n    let prevInjectContext: InjectorProfilerContext | undefined;\n    if (ngDevMode) {\n      // tData indexes mirror the concrete instances in its corresponding LView.\n      // lView[index] here is either the injectable instace itself or a factory,\n      // therefore tData[index] is the constructor of that injectable or a\n      // definition object that contains the constructor in a `.type` field.\n      const token =\n        (tData[index] as DirectiveDef<unknown> | ComponentDef<unknown>).type || tData[index];\n      const injector = new NodeInjector(tNode, lView);\n      prevInjectContext = setInjectorProfilerContext({injector, token});\n    }\n\n    const previousInjectImplementation = factory.injectImpl\n      ? setInjectImplementation(factory.injectImpl)\n      : null;\n    const success = enterDI(lView, tNode, InjectFlags.Default);\n    ngDevMode &&\n      assertEqual(\n        success,\n        true,\n        \"Because flags do not contain `SkipSelf' we expect this to always succeed.\",\n      );\n    try {\n      value = lView[index] = factory.factory(undefined, tData, lView, tNode);\n\n      ngDevMode && emitInstanceCreatedByInjectorEvent(value);\n\n      // This code path is hit for both directives and providers.\n      // For perf reasons, we want to avoid searching for hooks on providers.\n      // It does no harm to try (the hooks just won't exist), but the extra\n      // checks are unnecessary and this is a hot path. So we check to see\n      // if the index of the dependency is in the directive range for this\n      // tNode. If it's not, we know it's a provider and skip hook registration.\n      if (tView.firstCreatePass && index >= tNode.directiveStart) {\n        ngDevMode && assertDirectiveDef(tData[index]);\n        registerPreOrderHooks(index, tData[index] as DirectiveDef<any>, tView);\n      }\n    } finally {\n      ngDevMode && setInjectorProfilerContext(prevInjectContext!);\n\n      previousInjectImplementation !== null &&\n        setInjectImplementation(previousInjectImplementation);\n      setIncludeViewProviders(previousIncludeViewProviders);\n      factory.resolving = false;\n      leaveDI();\n    }\n  }\n  return value;\n}\n\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param token the injection token\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\nexport function bloomHashBitOrFactory(\n  token: ProviderToken<any> | string,\n): number | Function | undefined {\n  ngDevMode && assertDefined(token, 'token must be defined');\n  if (typeof token === 'string') {\n    return token.charCodeAt(0) || 0;\n  }\n  const tokenId: number | undefined =\n    // First check with `hasOwnProperty` so we don't get an inherited ID.\n    token.hasOwnProperty(NG_ELEMENT_ID) ? (token as any)[NG_ELEMENT_ID] : undefined;\n  // Negative token IDs are used for special objects such as `Injector`\n  if (typeof tokenId === 'number') {\n    if (tokenId >= 0) {\n      return tokenId & BLOOM_MASK;\n    } else {\n      ngDevMode &&\n        assertEqual(tokenId, InjectorMarkers.Injector, 'Expecting to get Special Injector Id');\n      return createNodeInjector;\n    }\n  } else {\n    return tokenId;\n  }\n}\n\nexport function bloomHasToken(\n  bloomHash: number,\n  injectorIndex: number,\n  injectorView: LView | TData,\n) {\n  // Create a mask that targets the specific bit associated with the directive we're looking for.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n\n  // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of\n  // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset\n  // that should be used.\n  const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];\n\n  // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n  // this injector is a potential match.\n  return !!(value & mask);\n}\n\n/** Returns true if flags prevent parent injector from being searched for tokens */\nfunction shouldSearchParent(flags: InjectFlags, isFirstHostTNode: boolean): boolean | number {\n  return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\n\nexport function getNodeInjectorLView(nodeInjector: NodeInjector): LView {\n  return (nodeInjector as any)._lView as LView;\n}\n\nexport function getNodeInjectorTNode(\n  nodeInjector: NodeInjector,\n): TElementNode | TContainerNode | TElementContainerNode | null {\n  return (nodeInjector as any)._tNode as\n    | TElementNode\n    | TContainerNode\n    | TElementContainerNode\n    | null;\n}\n\nexport class NodeInjector implements Injector {\n  constructor(\n    private _tNode: TElementNode | TContainerNode | TElementContainerNode | null,\n    private _lView: LView,\n  ) {}\n\n  get(token: any, notFoundValue?: any, flags?: InjectFlags | InjectOptions): any {\n    return getOrCreateInjectable(\n      this._tNode,\n      this._lView,\n      token,\n      convertToBitFlags(flags),\n      notFoundValue,\n    );\n  }\n}\n\n/** Creates a `NodeInjector` for the current node. */\nexport function createNodeInjector(): Injector {\n  return new NodeInjector(getCurrentTNode()! as TDirectiveHostNode, getLView()) as any;\n}\n\n/**\n * @codeGenApi\n */\nexport function ɵɵgetInheritedFactory<T>(type: Type<any>): (type: Type<T>) => T {\n  return noSideEffects(() => {\n    const ownConstructor = type.prototype.constructor;\n    const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);\n    const objectPrototype = Object.prototype;\n    let parent = Object.getPrototypeOf(type.prototype).constructor;\n\n    // Go up the prototype until we hit `Object`.\n    while (parent && parent !== objectPrototype) {\n      const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);\n\n      // If we hit something that has a factory and the factory isn't the same as the type,\n      // we've found the inherited factory. Note the check that the factory isn't the type's\n      // own factory is redundant in most cases, but if the user has custom decorators on the\n      // class, this lookup will start one level down in the prototype chain, causing us to\n      // find the own factory first and potentially triggering an infinite loop downstream.\n      if (factory && factory !== ownFactory) {\n        return factory;\n      }\n\n      parent = Object.getPrototypeOf(parent);\n    }\n\n    // There is no factory defined. Either this was improper usage of inheritance\n    // (no Angular decorator on the superclass) or there is no constructor at all\n    // in the inheritance chain. Since the two cases cannot be distinguished, the\n    // latter has to be assumed.\n    return (t: Type<T>) => new t();\n  });\n}\n\nfunction getFactoryOf<T>(type: Type<any>): ((type?: Type<T>) => T | null) | null {\n  if (isForwardRef(type)) {\n    return () => {\n      const factory = getFactoryOf<T>(resolveForwardRef(type));\n      return factory && factory();\n    };\n  }\n  return getFactoryDef<T>(type);\n}\n\n/**\n * Returns a value from the closest embedded or node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingEmbeddedInjector<T>(\n  tNode: TDirectiveHostNode,\n  lView: LView,\n  token: ProviderToken<T>,\n  flags: InjectFlags,\n  notFoundValue?: any,\n) {\n  let currentTNode: TDirectiveHostNode | null = tNode;\n  let currentLView: LView | null = lView;\n\n  // When an LView with an embedded view injector is inserted, it'll likely be interlaced with\n  // nodes who may have injectors (e.g. node injector -> embedded view injector -> node injector).\n  // Since the bloom filters for the node injectors have already been constructed and we don't\n  // have a way of extracting the records from an injector, the only way to maintain the correct\n  // hierarchy when resolving the value is to walk it node-by-node while attempting to resolve\n  // the token at each level.\n  while (\n    currentTNode !== null &&\n    currentLView !== null &&\n    currentLView[FLAGS] & LViewFlags.HasEmbeddedViewInjector &&\n    !isRootView(currentLView)\n  ) {\n    ngDevMode && assertTNodeForLView(currentTNode, currentLView);\n\n    // Note that this lookup on the node injector is using the `Self` flag, because\n    // we don't want the node injector to look at any parent injectors since we\n    // may hit the embedded view injector first.\n    const nodeInjectorValue = lookupTokenUsingNodeInjector(\n      currentTNode,\n      currentLView,\n      token,\n      flags | InjectFlags.Self,\n      NOT_FOUND,\n    );\n    if (nodeInjectorValue !== NOT_FOUND) {\n      return nodeInjectorValue;\n    }\n\n    // Has an explicit type due to a TS bug: https://github.com/microsoft/TypeScript/issues/33191\n    let parentTNode: TElementNode | TContainerNode | null = currentTNode.parent;\n\n    // `TNode.parent` includes the parent within the current view only. If it doesn't exist,\n    // it means that we've hit the view boundary and we need to go up to the next view.\n    if (!parentTNode) {\n      // Before we go to the next LView, check if the token exists on the current embedded injector.\n      const embeddedViewInjector = currentLView[EMBEDDED_VIEW_INJECTOR];\n      if (embeddedViewInjector) {\n        const embeddedViewInjectorValue = embeddedViewInjector.get(\n          token,\n          NOT_FOUND as T | {},\n          flags,\n        );\n        if (embeddedViewInjectorValue !== NOT_FOUND) {\n          return embeddedViewInjectorValue;\n        }\n      }\n\n      // Otherwise keep going up the tree.\n      parentTNode = getTNodeFromLView(currentLView);\n      currentLView = currentLView[DECLARATION_VIEW];\n    }\n\n    currentTNode = parentTNode;\n  }\n\n  return notFoundValue;\n}\n\n/** Gets the TNode associated with an LView inside of the declaration view. */\nfunction getTNodeFromLView(lView: LView): TElementNode | TElementContainerNode | null {\n  const tView = lView[TVIEW];\n  const tViewType = tView.type;\n\n  // The parent pointer differs based on `TView.type`.\n  if (tViewType === TViewType.Embedded) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode as TElementContainerNode;\n  } else if (tViewType === TViewType.Component) {\n    // Components don't have `TView.declTNode` because each instance of component could be\n    // inserted in different location, hence `TView.declTNode` is meaningless.\n    return lView[T_HOST] as TElementNode;\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {injectAttributeImpl} from '../di';\nimport {getCurrentTNode} from '../state';\n\n/**\n * Facade for the attribute injection from DI.\n *\n * @codeGenApi\n */\nexport function ɵɵinjectAttribute(attrNameToInject: string): string | null {\n  return injectAttributeImpl(getCurrentTNode()!, attrNameToInject);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EMPTY_ARRAY} from '../util/empty';\nimport {stringify} from '../util/stringify';\n\nimport type {Injector} from './injector';\nimport type {Provider, StaticProvider} from './interface/provider';\nimport {importProvidersFrom} from './provider_collection';\nimport {getNullInjector, R3Injector} from './r3_injector';\nimport {InjectorScope} from './scope';\n\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n */\nexport function createInjector(\n  defType: /* InjectorType<any> */ any,\n  parent: Injector | null = null,\n  additionalProviders: Array<Provider | StaticProvider> | null = null,\n  name?: string,\n): Injector {\n  const injector = createInjectorWithoutInjectorInstances(\n    defType,\n    parent,\n    additionalProviders,\n    name,\n  );\n  injector.resolveInjectorInitializers();\n  return injector;\n}\n\n/**\n * Creates a new injector without eagerly resolving its injector types. Can be used in places\n * where resolving the injector types immediately can lead to an infinite loop. The injector types\n * should be resolved at a later point by calling `_resolveInjectorDefTypes`.\n */\nexport function createInjectorWithoutInjectorInstances(\n  defType: /* InjectorType<any> */ any,\n  parent: Injector | null = null,\n  additionalProviders: Array<Provider | StaticProvider> | null = null,\n  name?: string,\n  scopes = new Set<InjectorScope>(),\n): R3Injector {\n  const providers = [additionalProviders || EMPTY_ARRAY, importProvidersFrom(defType)];\n  name = name || (typeof defType === 'object' ? undefined : stringify(defType));\n\n  return new R3Injector(providers, parent || getNullInjector(), name || null, scopes);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {createInjector} from './create_injector';\nimport {THROW_IF_NOT_FOUND, ɵɵinject} from './injector_compatibility';\nimport {InjectorMarkers} from './injector_marker';\nimport {INJECTOR} from './injector_token';\nimport {ɵɵdefineInjectable} from './interface/defs';\nimport {InjectFlags, InjectOptions} from './interface/injector';\nimport {Provider, StaticProvider} from './interface/provider';\nimport {NullInjector} from './null_injector';\nimport {ProviderToken} from './provider_token';\n\n/**\n * Concrete injectors implement this interface. Injectors are configured\n * with [providers](guide/di/dependency-injection-providers) that associate\n * dependencies of various types with [injection tokens](guide/di/dependency-injection-providers).\n *\n * @see [DI Providers](guide/di/dependency-injection-providers).\n * @see {@link StaticProvider}\n *\n * @usageNotes\n *\n *  The following example creates a service injector instance.\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Usage example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nexport abstract class Injector {\n  static THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\n  static NULL: Injector = /* @__PURE__ */ new NullInjector();\n\n  /**\n   * Internal note on the `options?: InjectOptions|InjectFlags` override of the `get`\n   * method: consider dropping the `InjectFlags` part in one of the major versions.\n   * It can **not** be done in minor/patch, since it's breaking for custom injectors\n   * that only implement the old `InjectorFlags` interface.\n   */\n\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   */\n  abstract get<T>(\n    token: ProviderToken<T>,\n    notFoundValue: undefined,\n    options: InjectOptions & {\n      optional?: false;\n    },\n  ): T;\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   */\n  abstract get<T>(\n    token: ProviderToken<T>,\n    notFoundValue: null | undefined,\n    options: InjectOptions,\n  ): T | null;\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   */\n  abstract get<T>(\n    token: ProviderToken<T>,\n    notFoundValue?: T,\n    options?: InjectOptions | InjectFlags,\n  ): T;\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   * @deprecated use object-based flags (`InjectOptions`) instead.\n   */\n  abstract get<T>(token: ProviderToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  /**\n   * @deprecated from v4.0.0 use ProviderToken<T>\n   * @suppress {duplicate}\n   */\n  abstract get(token: any, notFoundValue?: any): any;\n\n  /**\n   * @deprecated from v5 use the new signature Injector.create(options)\n   */\n  static create(providers: StaticProvider[], parent?: Injector): Injector;\n\n  /**\n   * Creates a new injector instance that provides one or more dependencies,\n   * according to a given type or types of `StaticProvider`.\n   *\n   * @param options An object with the following properties:\n   * * `providers`: An array of providers of the [StaticProvider type](api/core/StaticProvider).\n   * * `parent`: (optional) A parent injector.\n   * * `name`: (optional) A developer-defined identifying name for the new injector.\n   *\n   * @returns The new injector instance.\n   *\n   */\n  static create(options: {\n    providers: Array<Provider | StaticProvider>;\n    parent?: Injector;\n    name?: string;\n  }): Injector;\n\n  static create(\n    options:\n      | StaticProvider[]\n      | {providers: Array<Provider | StaticProvider>; parent?: Injector; name?: string},\n    parent?: Injector,\n  ): Injector {\n    if (Array.isArray(options)) {\n      return createInjector({name: ''}, parent, options, '');\n    } else {\n      const name = options.name ?? '';\n      return createInjector({name}, options.parent, options.providers, name);\n    }\n  }\n\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ ɵɵdefineInjectable({\n    token: Injector,\n    providedIn: 'any',\n    factory: () => ɵɵinject(INJECTOR),\n  });\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__ = InjectorMarkers.Injector;\n}\n","/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵɵinjectAttribute} from '../render3/instructions/di_attr';\n\n/**\n * Creates a token that can be used to inject static attributes of the host node.\n *\n * @usageNotes\n * ### Injecting an attribute that is known to exist\n * ```ts\n * @Directive()\n * class MyDir {\n *   attr: string = inject(new HostAttributeToken('some-attr'));\n * }\n * ```\n *\n * ### Optionally injecting an attribute\n * ```ts\n * @Directive()\n * class MyDir {\n *   attr: string | null = inject(new HostAttributeToken('some-attr'), {optional: true});\n * }\n * ```\n * @publicApi\n */\nexport class HostAttributeToken {\n  constructor(private attributeName: string) {}\n\n  /** @internal */\n  __NG_ELEMENT_ID__ = () => ɵɵinjectAttribute(this.attributeName);\n\n  toString(): string {\n    return `HostAttributeToken ${this.attributeName}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {TNode, TNodeType} from '../render3/interfaces/node';\nimport {getCurrentTNode} from '../render3/state';\n\nimport {InjectionToken} from './injection_token';\nimport {InjectFlags} from './interface/injector';\n\n/**\n * A token that can be used to inject the tag name of the host node.\n *\n * @usageNotes\n * ### Injecting a tag name that is known to exist\n * ```ts\n * @Directive()\n * class MyDir {\n *   tagName: string = inject(HOST_TAG_NAME);\n * }\n * ```\n *\n * ### Optionally injecting a tag name\n * ```ts\n * @Directive()\n * class MyDir {\n *   tagName: string | null = inject(HOST_TAG_NAME, {optional: true});\n * }\n * ```\n * @publicApi\n */\nexport const HOST_TAG_NAME = new InjectionToken<string>(ngDevMode ? 'HOST_TAG_NAME' : '');\n\n// HOST_TAG_NAME should be resolved at the current node, similar to e.g. ElementRef,\n// so we manually specify __NG_ELEMENT_ID__ here, instead of using a factory.\n// tslint:disable-next-line:no-toplevel-property-access\n(HOST_TAG_NAME as any).__NG_ELEMENT_ID__ = (flags: InjectFlags) => {\n  const tNode = getCurrentTNode();\n  if (tNode === null) {\n    throw new RuntimeError(\n      RuntimeErrorCode.INVALID_INJECTION_TOKEN,\n      ngDevMode &&\n        'HOST_TAG_NAME can only be injected in directives and components ' +\n          'during construction time (in a class constructor or as a class field initializer)',\n    );\n  }\n  if (tNode.type & TNodeType.Element) {\n    return tNode.value;\n  }\n  if (flags & InjectFlags.Optional) {\n    return null;\n  }\n  throw new RuntimeError(\n    RuntimeErrorCode.INVALID_INJECTION_TOKEN,\n    ngDevMode &&\n      `HOST_TAG_NAME was used on ${getDevModeNodeName(\n        tNode,\n      )} which doesn't have an underlying element in the DOM. ` +\n        `This is invalid, and so the dependency should be marked as optional.`,\n  );\n};\n\nfunction getDevModeNodeName(tNode: TNode) {\n  if (tNode.type & TNodeType.ElementContainer) {\n    return 'an <ng-container>';\n  } else if (tNode.type & TNodeType.Container) {\n    return 'an <ng-template>';\n  } else if (tNode.type & TNodeType.LetDeclaration) {\n    return 'an @let declaration';\n  } else {\n    return 'a node';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport const SCHEDULE_IN_ROOT_ZONE_DEFAULT = false;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EnvironmentInjector} from '../di';\nimport {LView} from '../render3/interfaces/view';\nimport {getLView} from '../render3/state';\nimport {removeLViewOnDestroy, storeLViewOnDestroy} from '../render3/util/view_utils';\n\n/**\n * `DestroyRef` lets you set callbacks to run for any cleanup or destruction behavior.\n * The scope of this destruction depends on where `DestroyRef` is injected. If `DestroyRef`\n * is injected in a component or directive, the callbacks run when that component or\n * directive is destroyed. Otherwise the callbacks run when a corresponding injector is destroyed.\n *\n * @publicApi\n */\nexport abstract class DestroyRef {\n  // Here the `DestroyRef` acts primarily as a DI token. There are (currently) types of objects that\n  // can be returned from the injector when asking for this token:\n  // - `NodeInjectorDestroyRef` when retrieved from a node injector;\n  // - `EnvironmentInjector` when retrieved from an environment injector\n\n  /**\n   * Registers a destroy callback in a given lifecycle scope.  Returns a cleanup function that can\n   * be invoked to unregister the callback.\n   *\n   * @usageNotes\n   * ### Example\n   * ```ts\n   * const destroyRef = inject(DestroyRef);\n   *\n   * // register a destroy callback\n   * const unregisterFn = destroyRef.onDestroy(() => doSomethingOnDestroy());\n   *\n   * // stop the destroy callback from executing if needed\n   * unregisterFn();\n   * ```\n   */\n  abstract onDestroy(callback: () => void): () => void;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => DestroyRef = injectDestroyRef;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ENV_ID__: (injector: EnvironmentInjector) => DestroyRef = (injector) => injector;\n}\n\nexport class NodeInjectorDestroyRef extends DestroyRef {\n  constructor(readonly _lView: LView) {\n    super();\n  }\n\n  override onDestroy(callback: () => void): () => void {\n    storeLViewOnDestroy(this._lView, callback);\n    return () => removeLViewOnDestroy(this._lView, callback);\n  }\n}\n\nfunction injectDestroyRef(): DestroyRef {\n  return new NodeInjectorDestroyRef(getLView());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '../../di/injection_token';\n\nexport const enum NotificationSource {\n  // Change detection needs to run in order to synchronize application state\n  // with the DOM when the following notifications are received:\n  // This operation indicates that a subtree needs to be traversed during change detection.\n  MarkAncestorsForTraversal,\n  // A component/directive gets a new input.\n  SetInput,\n  // Defer block state updates need change detection to fully render the state.\n  DeferBlockStateUpdate,\n  // Debugging tools updated state and have requested change detection.\n  DebugApplyChanges,\n  // ChangeDetectorRef.markForCheck indicates the component is dirty/needs to refresh.\n  MarkForCheck,\n\n  // Bound listener callbacks execute and can update state without causing other notifications from\n  // above.\n  Listener,\n\n  // Custom elements do sometimes require checking directly.\n  CustomElement,\n\n  // The following notifications do not require views to be refreshed\n  // but we should execute render hooks:\n  // Render hooks are guaranteed to execute with the schedulers timing.\n  RenderHook,\n  // Views might be created outside and manipulated in ways that\n  // we cannot be aware of. When a view is attached, Angular now \"knows\"\n  // about it and we now know that DOM might have changed (and we should\n  // run render hooks). If the attached view is dirty, the `MarkAncestorsForTraversal`\n  // notification should also be received.\n  ViewAttached,\n  // When DOM removal happens, render hooks may be interested in the new\n  // DOM state but we do not need to refresh any views unless. If change\n  // detection is required after DOM removal, another notification should\n  // be received (i.e. `markForCheck`).\n  ViewDetachedFromDOM,\n  // Applying animations might result in new DOM state and should rerun render hooks\n  AsyncAnimationsLoaded,\n  // The scheduler is notified when a pending task is removed via the public API.\n  // This allows us to make stability async, delayed until the next application tick.\n  PendingTaskRemoved,\n  // An `effect()` outside of the view tree became dirty and might need to run.\n  RootEffect,\n  // An `effect()` within the view tree became dirty.\n  ViewEffect,\n}\n\n/**\n * Injectable that is notified when an `LView` is made aware of changes to application state.\n */\nexport abstract class ChangeDetectionScheduler {\n  abstract notify(source: NotificationSource): void;\n  abstract runningTick: boolean;\n}\n\n/** Token used to indicate if zoneless was enabled via provideZonelessChangeDetection(). */\nexport const ZONELESS_ENABLED = new InjectionToken<boolean>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'Zoneless enabled' : '',\n  {providedIn: 'root', factory: () => false},\n);\n\n/** Token used to indicate `provideExperimentalZonelessChangeDetection` was used. */\nexport const PROVIDED_ZONELESS = new InjectionToken<boolean>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'Zoneless provided' : '',\n  {providedIn: 'root', factory: () => false},\n);\n\nexport const ZONELESS_SCHEDULER_DISABLED = new InjectionToken<boolean>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'scheduler disabled' : '',\n);\n\n// TODO(atscott): Remove in v19. Scheduler should be done with runOutsideAngular.\nexport const SCHEDULE_IN_ROOT_ZONE = new InjectionToken<boolean>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'run changes outside zone in root' : '',\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {BehaviorSubject} from 'rxjs';\n\nimport {inject} from './di/injector_compatibility';\nimport {ɵɵdefineInjectable} from './di/interface/defs';\nimport {OnDestroy} from './interface/lifecycle_hooks';\nimport {\n  ChangeDetectionScheduler,\n  NotificationSource,\n} from './change_detection/scheduling/zoneless_scheduling';\n\n/**\n * Internal implementation of the pending tasks service.\n */\nexport class PendingTasksInternal implements OnDestroy {\n  private taskId = 0;\n  private pendingTasks = new Set<number>();\n  private get _hasPendingTasks() {\n    return this.hasPendingTasks.value;\n  }\n  hasPendingTasks = new BehaviorSubject<boolean>(false);\n\n  add(): number {\n    if (!this._hasPendingTasks) {\n      this.hasPendingTasks.next(true);\n    }\n    const taskId = this.taskId++;\n    this.pendingTasks.add(taskId);\n    return taskId;\n  }\n\n  has(taskId: number): boolean {\n    return this.pendingTasks.has(taskId);\n  }\n\n  remove(taskId: number): void {\n    this.pendingTasks.delete(taskId);\n    if (this.pendingTasks.size === 0 && this._hasPendingTasks) {\n      this.hasPendingTasks.next(false);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.pendingTasks.clear();\n    if (this._hasPendingTasks) {\n      this.hasPendingTasks.next(false);\n    }\n  }\n\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ ɵɵdefineInjectable({\n    token: PendingTasksInternal,\n    providedIn: 'root',\n    factory: () => new PendingTasksInternal(),\n  });\n}\n\n/**\n * Service that keeps track of pending tasks contributing to the stableness of Angular\n * application. While several existing Angular services (ex.: `HttpClient`) will internally manage\n * tasks influencing stability, this API gives control over stability to library and application\n * developers for specific cases not covered by Angular internals.\n *\n * The concept of stability comes into play in several important scenarios:\n * - SSR process needs to wait for the application stability before serializing and sending rendered\n * HTML;\n * - tests might want to delay assertions until the application becomes stable;\n *\n * @usageNotes\n * ```ts\n * const pendingTasks = inject(PendingTasks);\n * const taskCleanup = pendingTasks.add();\n * // do work that should block application's stability and then:\n * taskCleanup();\n * ```\n *\n * @publicApi\n * @developerPreview\n */\nexport class PendingTasks {\n  private internalPendingTasks = inject(PendingTasksInternal);\n  private scheduler = inject(ChangeDetectionScheduler);\n  /**\n   * Adds a new task that should block application's stability.\n   * @returns A cleanup function that removes a task when called.\n   */\n  add(): () => void {\n    const taskId = this.internalPendingTasks.add();\n    return () => {\n      if (!this.internalPendingTasks.has(taskId)) {\n        // This pending task has already been cleared.\n        return;\n      }\n      // Notifying the scheduler will hold application stability open until the next tick.\n      this.scheduler.notify(NotificationSource.PendingTaskRemoved);\n      this.internalPendingTasks.remove(taskId);\n    };\n  }\n\n  /**\n   * Runs an asynchronous function and blocks the application's stability until the function completes.\n   *\n   * ```ts\n   * pendingTasks.run(async () => {\n   *   const userData = await fetch('/api/user');\n   *   this.userData.set(userData);\n   * });\n   * ```\n   *\n   * Application stability is at least delayed until the next tick after the `run` method resolves\n   * so it is safe to make additional updates to application state that would require UI synchronization:\n   *\n   * ```ts\n   * const userData = await pendingTasks.run(() => fetch('/api/user'));\n   * this.userData.set(userData);\n   * ```\n   *\n   * @param fn The asynchronous function to execute\n   */\n  async run<T>(fn: () => Promise<T>): Promise<T> {\n    const removeTask = this.add();\n    try {\n      return await fn();\n    } finally {\n      removeTask();\n    }\n  }\n\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ ɵɵdefineInjectable({\n    token: PendingTasks,\n    providedIn: 'root',\n    factory: () => new PendingTasks(),\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {setActiveConsumer} from '@angular/core/primitives/signals';\nimport {PartialObserver, Subject, Subscription} from 'rxjs';\n\nimport {OutputRef} from './authoring/output/output_ref';\nimport {isInInjectionContext} from './di/contextual';\nimport {inject} from './di/injector_compatibility';\nimport {DestroyRef} from './linker/destroy_ref';\nimport {PendingTasksInternal} from './pending_tasks';\n\n/**\n * Use in components with the `@Output` directive to emit custom events\n * synchronously or asynchronously, and register handlers for those events\n * by subscribing to an instance.\n *\n * @usageNotes\n *\n * Extends\n * [RxJS `Subject`](https://rxjs.dev/api/index/class/Subject)\n * for Angular by adding the `emit()` method.\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```angular-ts\n * @Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   @Output() open: EventEmitter<any> = new EventEmitter();\n *   @Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```html\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * @publicApi\n */\nexport interface EventEmitter<T> extends Subject<T>, OutputRef<T> {\n  /**\n   * @internal\n   */\n  __isAsync: boolean;\n\n  /**\n   * Creates an instance of this class that can\n   * deliver events synchronously or asynchronously.\n   *\n   * @param [isAsync=false] When true, deliver events asynchronously.\n   *\n   */\n  new (isAsync?: boolean): EventEmitter<T>;\n\n  /**\n   * Emits an event containing a given value.\n   * @param value The value to emit.\n   */\n  emit(value?: T): void;\n\n  /**\n   * Registers handlers for events emitted by this instance.\n   * @param next When supplied, a custom handler for emitted events.\n   * @param error When supplied, a custom handler for an error notification from this emitter.\n   * @param complete When supplied, a custom handler for a completion notification from this\n   *     emitter.\n   */\n  subscribe(\n    next?: (value: T) => void,\n    error?: (error: any) => void,\n    complete?: () => void,\n  ): Subscription;\n  /**\n   * Registers handlers for events emitted by this instance.\n   * @param observerOrNext When supplied, a custom handler for emitted events, or an observer\n   *     object.\n   * @param error When supplied, a custom handler for an error notification from this emitter.\n   * @param complete When supplied, a custom handler for a completion notification from this\n   *     emitter.\n   */\n  subscribe(observerOrNext?: any, error?: any, complete?: any): Subscription;\n}\n\nclass EventEmitter_ extends Subject<any> implements OutputRef<any> {\n  // tslint:disable-next-line:require-internal-with-underscore\n  __isAsync: boolean;\n  destroyRef: DestroyRef | undefined = undefined;\n  private readonly pendingTasks: PendingTasksInternal | undefined = undefined;\n\n  constructor(isAsync: boolean = false) {\n    super();\n    this.__isAsync = isAsync;\n\n    // Attempt to retrieve a `DestroyRef` and `PendingTasks` optionally.\n    // For backwards compatibility reasons, this cannot be required.\n    if (isInInjectionContext()) {\n      // `DestroyRef` is optional because it is not available in all contexts.\n      // But it is useful to properly complete the `EventEmitter` if used with `outputToObservable`\n      // when the component/directive is destroyed. (See `outputToObservable` for more details.)\n      this.destroyRef = inject(DestroyRef, {optional: true}) ?? undefined;\n      this.pendingTasks = inject(PendingTasksInternal, {optional: true}) ?? undefined;\n    }\n  }\n\n  emit(value?: any) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      super.next(value);\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n\n  override subscribe(observerOrNext?: any, error?: any, complete?: any): Subscription {\n    let nextFn = observerOrNext;\n    let errorFn = error || (() => null);\n    let completeFn = complete;\n\n    if (observerOrNext && typeof observerOrNext === 'object') {\n      const observer = observerOrNext as PartialObserver<unknown>;\n      nextFn = observer.next?.bind(observer);\n      errorFn = observer.error?.bind(observer);\n      completeFn = observer.complete?.bind(observer);\n    }\n\n    if (this.__isAsync) {\n      errorFn = this.wrapInTimeout(errorFn);\n\n      if (nextFn) {\n        nextFn = this.wrapInTimeout(nextFn);\n      }\n\n      if (completeFn) {\n        completeFn = this.wrapInTimeout(completeFn);\n      }\n    }\n\n    const sink = super.subscribe({next: nextFn, error: errorFn, complete: completeFn});\n\n    if (observerOrNext instanceof Subscription) {\n      observerOrNext.add(sink);\n    }\n\n    return sink;\n  }\n\n  private wrapInTimeout(fn: (value: unknown) => any) {\n    return (value: unknown) => {\n      const taskId = this.pendingTasks?.add();\n      setTimeout(() => {\n        fn(value);\n        if (taskId !== undefined) {\n          this.pendingTasks?.remove(taskId);\n        }\n      });\n    };\n  }\n}\n\n/**\n * @publicApi\n */\nexport const EventEmitter: {\n  new (isAsync?: boolean): EventEmitter<any>;\n  new <T>(isAsync?: boolean): EventEmitter<T>;\n  readonly prototype: EventEmitter<any>;\n} = EventEmitter_ as any;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport function noop(...args: any[]): any {\n  // Do nothing.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {noop} from './noop';\n\n/**\n * Gets a scheduling function that runs the callback after the first of setTimeout and\n * requestAnimationFrame resolves.\n *\n * - `requestAnimationFrame` ensures that change detection runs ahead of a browser repaint.\n * This ensures that the create and update passes of a change detection always happen\n * in the same frame.\n * - When the browser is resource-starved, `rAF` can execute _before_ a `setTimeout` because\n * rendering is a very high priority process. This means that `setTimeout` cannot guarantee\n * same-frame create and update pass, when `setTimeout` is used to schedule the update phase.\n * - While `rAF` gives us the desirable same-frame updates, it has two limitations that\n * prevent it from being used alone. First, it does not run in background tabs, which would\n * prevent Angular from initializing an application when opened in a new tab (for example).\n * Second, repeated calls to requestAnimationFrame will execute at the refresh rate of the\n * hardware (~16ms for a 60Hz display). This would cause significant slowdown of tests that\n * are written with several updates and asserts in the form of \"update; await stable; assert;\".\n * - Both `setTimeout` and `rAF` are able to \"coalesce\" several events from a single user\n * interaction into a single change detection. Importantly, this reduces view tree traversals when\n * compared to an alternative timing mechanism like `queueMicrotask`, where change detection would\n * then be interleaves between each event.\n *\n * By running change detection after the first of `setTimeout` and `rAF` to execute, we get the\n * best of both worlds.\n *\n * @returns a function to cancel the scheduled callback\n */\nexport function scheduleCallbackWithRafRace(callback: Function): () => void {\n  let timeoutId: number;\n  let animationFrameId: number;\n  function cleanup() {\n    callback = noop;\n    try {\n      if (animationFrameId !== undefined && typeof cancelAnimationFrame === 'function') {\n        cancelAnimationFrame(animationFrameId);\n      }\n      if (timeoutId !== undefined) {\n        clearTimeout(timeoutId);\n      }\n    } catch {\n      // Clearing/canceling can fail in tests due to the timing of functions being patched and unpatched\n      // Just ignore the errors - we protect ourselves from this issue by also making the callback a no-op.\n    }\n  }\n  timeoutId = setTimeout(() => {\n    callback();\n    cleanup();\n  }) as unknown as number;\n  if (typeof requestAnimationFrame === 'function') {\n    animationFrameId = requestAnimationFrame(() => {\n      callback();\n      cleanup();\n    });\n  }\n\n  return () => cleanup();\n}\n\nexport function scheduleCallbackWithMicrotask(callback: Function): () => void {\n  queueMicrotask(() => callback());\n\n  return () => {\n    callback = noop;\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {SCHEDULE_IN_ROOT_ZONE_DEFAULT} from '../change_detection/scheduling/flags';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {EventEmitter} from '../event_emitter';\nimport {scheduleCallbackWithRafRace} from '../util/callback_scheduler';\nimport {noop} from '../util/noop';\n\nimport {AsyncStackTaggingZoneSpec} from './async-stack-tagging';\n\n// The below is needed as otherwise a number of targets fail in G3 due to:\n// ERROR - [JSC_UNDEFINED_VARIABLE] variable Zone is undeclared\ndeclare const Zone: any;\n\nconst isAngularZoneProperty = 'isAngularZone';\nexport const angularZoneInstanceIdProperty = isAngularZoneProperty + '_ID';\n\nlet ngZoneInstanceId = 0;\n\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * import {Component, NgZone} from '@angular/core';\n * import {NgIf} from '@angular/common';\n *\n * @Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class NgZone {\n  readonly hasPendingMacrotasks: boolean = false;\n  readonly hasPendingMicrotasks: boolean = false;\n\n  /**\n   * Whether there are no outstanding microtasks or macrotasks.\n   */\n  readonly isStable: boolean = true;\n\n  /**\n   * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n   */\n  readonly onUnstable: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies when there is no more microtasks enqueued in the current VM Turn.\n   * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n   * For this reason this event can fire multiple times per VM Turn.\n   */\n  readonly onMicrotaskEmpty: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n   * implies we are about to relinquish VM turn.\n   * This event gets called just once.\n   */\n  readonly onStable: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies that an error has been delivered.\n   */\n  readonly onError: EventEmitter<any> = new EventEmitter(false);\n\n  constructor(options: {\n    enableLongStackTrace?: boolean;\n    shouldCoalesceEventChangeDetection?: boolean;\n    shouldCoalesceRunChangeDetection?: boolean;\n  }) {\n    const {\n      enableLongStackTrace = false,\n      shouldCoalesceEventChangeDetection = false,\n      shouldCoalesceRunChangeDetection = false,\n      scheduleInRootZone = SCHEDULE_IN_ROOT_ZONE_DEFAULT,\n    } = options as InternalNgZoneOptions;\n\n    if (typeof Zone == 'undefined') {\n      throw new RuntimeError(\n        RuntimeErrorCode.MISSING_ZONEJS,\n        ngDevMode && `In this configuration Angular requires Zone.js`,\n      );\n    }\n\n    Zone.assertZonePatched();\n    const self = this as any as NgZonePrivate;\n    self._nesting = 0;\n\n    self._outer = self._inner = Zone.current;\n\n    // AsyncStackTaggingZoneSpec provides `linked stack traces` to show\n    // where the async operation is scheduled. For more details, refer\n    // to this article, https://developer.chrome.com/blog/devtools-better-angular-debugging/\n    // And we only import this AsyncStackTaggingZoneSpec in development mode,\n    // in the production mode, the AsyncStackTaggingZoneSpec will be tree shaken away.\n    if (ngDevMode) {\n      self._inner = self._inner.fork(new AsyncStackTaggingZoneSpec('Angular'));\n    }\n\n    if ((Zone as any)['TaskTrackingZoneSpec']) {\n      self._inner = self._inner.fork(new ((Zone as any)['TaskTrackingZoneSpec'] as any)());\n    }\n\n    if (enableLongStackTrace && (Zone as any)['longStackTraceZoneSpec']) {\n      self._inner = self._inner.fork((Zone as any)['longStackTraceZoneSpec']);\n    }\n    // if shouldCoalesceRunChangeDetection is true, all tasks including event tasks will be\n    // coalesced, so shouldCoalesceEventChangeDetection option is not necessary and can be skipped.\n    self.shouldCoalesceEventChangeDetection =\n      !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;\n    self.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;\n    self.callbackScheduled = false;\n    self.scheduleInRootZone = scheduleInRootZone;\n    forkInnerZoneWithAngularBehavior(self);\n  }\n\n  /**\n    This method checks whether the method call happens within an Angular Zone instance.\n  */\n  static isInAngularZone(): boolean {\n    // Zone needs to be checked, because this method might be called even when NoopNgZone is used.\n    return typeof Zone !== 'undefined' && Zone.current.get(isAngularZoneProperty) === true;\n  }\n\n  /**\n    Assures that the method is called within the Angular Zone, otherwise throws an error.\n  */\n  static assertInAngularZone(): void {\n    if (!NgZone.isInAngularZone()) {\n      throw new RuntimeError(\n        RuntimeErrorCode.UNEXPECTED_ZONE_STATE,\n        ngDevMode && 'Expected to be in Angular Zone, but it is not!',\n      );\n    }\n  }\n\n  /**\n    Assures that the method is called outside of the Angular Zone, otherwise throws an error.\n  */\n  static assertNotInAngularZone(): void {\n    if (NgZone.isInAngularZone()) {\n      throw new RuntimeError(\n        RuntimeErrorCode.UNEXPECTED_ZONE_STATE,\n        ngDevMode && 'Expected to not be in Angular Zone, but it is!',\n      );\n    }\n  }\n\n  /**\n   * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n   * the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  run<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T {\n    return (this as any as NgZonePrivate)._inner.run(fn, applyThis, applyArgs);\n  }\n\n  /**\n   * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n   * returned by the function.\n   *\n   * Running functions via `runTask` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  runTask<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[], name?: string): T {\n    const zone = (this as any as NgZonePrivate)._inner;\n    const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n    try {\n      return zone.runTask(task, applyThis, applyArgs);\n    } finally {\n      zone.cancelTask(task);\n    }\n  }\n\n  /**\n   * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n   * rethrown.\n   */\n  runGuarded<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T {\n    return (this as any as NgZonePrivate)._inner.runGuarded(fn, applyThis, applyArgs);\n  }\n\n  /**\n   * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n   * the function.\n   *\n   * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n   * work that\n   * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * outside of the Angular zone.\n   *\n   * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n   */\n  runOutsideAngular<T>(fn: (...args: any[]) => T): T {\n    return (this as any as NgZonePrivate)._outer.run(fn);\n  }\n}\n\nconst EMPTY_PAYLOAD = {};\n\nexport interface NgZonePrivate extends NgZone {\n  _outer: Zone;\n  _inner: Zone;\n  _nesting: number;\n  _hasPendingMicrotasks: boolean;\n\n  hasPendingMacrotasks: boolean;\n  hasPendingMicrotasks: boolean;\n  callbackScheduled: boolean;\n  /**\n   * A flag to indicate if NgZone is currently inside\n   * checkStable and to prevent re-entry. The flag is\n   * needed because it is possible to invoke the change\n   * detection from within change detection leading to\n   * incorrect behavior.\n   *\n   * For detail, please refer here,\n   * https://github.com/angular/angular/pull/40540\n   */\n  isCheckStableRunning: boolean;\n  isStable: boolean;\n  /**\n   * Optionally specify coalescing event change detections or not.\n   * Consider the following case.\n   *\n   * <div (click)=\"doSomething()\">\n   *   <button (click)=\"doSomethingElse()\"></button>\n   * </div>\n   *\n   * When button is clicked, because of the event bubbling, both\n   * event handlers will be called and 2 change detections will be\n   * triggered. We can coalesce such kind of events to trigger\n   * change detection only once.\n   *\n   * By default, this option will be false. So the events will not be\n   * coalesced and the change detection will be triggered multiple times.\n   * And if this option be set to true, the change detection will be\n   * triggered async by scheduling it in an animation frame. So in the case above,\n   * the change detection will only be trigged once.\n   */\n  shouldCoalesceEventChangeDetection: boolean;\n  /**\n   * Optionally specify if `NgZone#run()` method invocations should be coalesced\n   * into a single change detection.\n   *\n   * Consider the following case.\n   *\n   * for (let i = 0; i < 10; i ++) {\n   *   ngZone.run(() => {\n   *     // do something\n   *   });\n   * }\n   *\n   * This case triggers the change detection multiple times.\n   * With ngZoneRunCoalescing options, all change detections in an event loops trigger only once.\n   * In addition, the change detection executes in requestAnimation.\n   *\n   */\n  shouldCoalesceRunChangeDetection: boolean;\n\n  /**\n   * Whether to schedule the coalesced change detection in the root zone\n   */\n  scheduleInRootZone: boolean;\n}\n\nfunction checkStable(zone: NgZonePrivate) {\n  // TODO: @JiaLiPassion, should check zone.isCheckStableRunning to prevent\n  // re-entry. The case is:\n  //\n  // @Component({...})\n  // export class AppComponent {\n  // constructor(private ngZone: NgZone) {\n  //   this.ngZone.onStable.subscribe(() => {\n  //     this.ngZone.run(() => console.log('stable'););\n  //   });\n  // }\n  //\n  // The onStable subscriber run another function inside ngZone\n  // which causes `checkStable()` re-entry.\n  // But this fix causes some issues in g3, so this fix will be\n  // launched in another PR.\n  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n    try {\n      zone._nesting++;\n      zone.onMicrotaskEmpty.emit(null);\n    } finally {\n      zone._nesting--;\n      if (!zone.hasPendingMicrotasks) {\n        try {\n          zone.runOutsideAngular(() => zone.onStable.emit(null));\n        } finally {\n          zone.isStable = true;\n        }\n      }\n    }\n  }\n}\n\nfunction delayChangeDetectionForEvents(zone: NgZonePrivate) {\n  /**\n   * We also need to check _nesting here\n   * Consider the following case with shouldCoalesceRunChangeDetection = true\n   *\n   * ngZone.run(() => {});\n   * ngZone.run(() => {});\n   *\n   * We want the two `ngZone.run()` only trigger one change detection\n   * when shouldCoalesceRunChangeDetection is true.\n   * And because in this case, change detection run in async way(requestAnimationFrame),\n   * so we also need to check the _nesting here to prevent multiple\n   * change detections.\n   */\n  if (zone.isCheckStableRunning || zone.callbackScheduled) {\n    return;\n  }\n  zone.callbackScheduled = true;\n  function scheduleCheckStable() {\n    scheduleCallbackWithRafRace(() => {\n      zone.callbackScheduled = false;\n      updateMicroTaskStatus(zone);\n      zone.isCheckStableRunning = true;\n      checkStable(zone);\n      zone.isCheckStableRunning = false;\n    });\n  }\n  if (zone.scheduleInRootZone) {\n    Zone.root.run(() => {\n      scheduleCheckStable();\n    });\n  } else {\n    zone._outer.run(() => {\n      scheduleCheckStable();\n    });\n  }\n  updateMicroTaskStatus(zone);\n}\n\nfunction forkInnerZoneWithAngularBehavior(zone: NgZonePrivate) {\n  const delayChangeDetectionForEventsDelegate = () => {\n    delayChangeDetectionForEvents(zone);\n  };\n  const instanceId = ngZoneInstanceId++;\n  zone._inner = zone._inner.fork({\n    name: 'angular',\n    properties: <any>{\n      [isAngularZoneProperty]: true,\n      [angularZoneInstanceIdProperty]: instanceId,\n      [angularZoneInstanceIdProperty + instanceId]: true,\n    },\n    onInvokeTask: (\n      delegate: ZoneDelegate,\n      current: Zone,\n      target: Zone,\n      task: Task,\n      applyThis: any,\n      applyArgs: any,\n    ): any => {\n      // Prevent triggering change detection when the flag is detected.\n      if (shouldBeIgnoredByZone(applyArgs)) {\n        return delegate.invokeTask(target, task, applyThis, applyArgs);\n      }\n\n      try {\n        onEnter(zone);\n        return delegate.invokeTask(target, task, applyThis, applyArgs);\n      } finally {\n        if (\n          (zone.shouldCoalesceEventChangeDetection && task.type === 'eventTask') ||\n          zone.shouldCoalesceRunChangeDetection\n        ) {\n          delayChangeDetectionForEventsDelegate();\n        }\n        onLeave(zone);\n      }\n    },\n\n    onInvoke: (\n      delegate: ZoneDelegate,\n      current: Zone,\n      target: Zone,\n      callback: Function,\n      applyThis: any,\n      applyArgs?: any[],\n      source?: string,\n    ): any => {\n      try {\n        onEnter(zone);\n        return delegate.invoke(target, callback, applyThis, applyArgs, source);\n      } finally {\n        if (\n          zone.shouldCoalesceRunChangeDetection &&\n          // Do not delay change detection when the task is the scheduler's tick.\n          // We need to synchronously trigger the stability logic so that the\n          // zone-based scheduler can prevent a duplicate ApplicationRef.tick\n          // by first checking if the scheduler tick is running. This does seem a bit roundabout,\n          // but we _do_ still want to trigger all the correct events when we exit the zone.run\n          // (`onMicrotaskEmpty` and `onStable` _should_ emit; developers can have code which\n          // relies on these events happening after change detection runs).\n          // Note: `zone.callbackScheduled` is already in delayChangeDetectionForEventsDelegate\n          // but is added here as well to prevent reads of applyArgs when not necessary\n          !zone.callbackScheduled &&\n          !isSchedulerTick(applyArgs)\n        ) {\n          delayChangeDetectionForEventsDelegate();\n        }\n        onLeave(zone);\n      }\n    },\n\n    onHasTask: (\n      delegate: ZoneDelegate,\n      current: Zone,\n      target: Zone,\n      hasTaskState: HasTaskState,\n    ) => {\n      delegate.hasTask(target, hasTaskState);\n      if (current === target) {\n        // We are only interested in hasTask events which originate from our zone\n        // (A child hasTask event is not interesting to us)\n        if (hasTaskState.change == 'microTask') {\n          zone._hasPendingMicrotasks = hasTaskState.microTask;\n          updateMicroTaskStatus(zone);\n          checkStable(zone);\n        } else if (hasTaskState.change == 'macroTask') {\n          zone.hasPendingMacrotasks = hasTaskState.macroTask;\n        }\n      }\n    },\n\n    onHandleError: (delegate: ZoneDelegate, current: Zone, target: Zone, error: any): boolean => {\n      delegate.handleError(target, error);\n      zone.runOutsideAngular(() => zone.onError.emit(error));\n      return false;\n    },\n  });\n}\n\nfunction updateMicroTaskStatus(zone: NgZonePrivate) {\n  if (\n    zone._hasPendingMicrotasks ||\n    ((zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) &&\n      zone.callbackScheduled === true)\n  ) {\n    zone.hasPendingMicrotasks = true;\n  } else {\n    zone.hasPendingMicrotasks = false;\n  }\n}\n\nfunction onEnter(zone: NgZonePrivate) {\n  zone._nesting++;\n  if (zone.isStable) {\n    zone.isStable = false;\n    zone.onUnstable.emit(null);\n  }\n}\n\nfunction onLeave(zone: NgZonePrivate) {\n  zone._nesting--;\n  checkStable(zone);\n}\n\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nexport class NoopNgZone implements NgZone {\n  readonly hasPendingMicrotasks = false;\n  readonly hasPendingMacrotasks = false;\n  readonly isStable = true;\n  readonly onUnstable = new EventEmitter<any>();\n  readonly onMicrotaskEmpty = new EventEmitter<any>();\n  readonly onStable = new EventEmitter<any>();\n  readonly onError = new EventEmitter<any>();\n\n  run<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any): T {\n    return fn.apply(applyThis, applyArgs);\n  }\n\n  runGuarded<T>(fn: (...args: any[]) => any, applyThis?: any, applyArgs?: any): T {\n    return fn.apply(applyThis, applyArgs);\n  }\n\n  runOutsideAngular<T>(fn: (...args: any[]) => T): T {\n    return fn();\n  }\n\n  runTask<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any, name?: string): T {\n    return fn.apply(applyThis, applyArgs);\n  }\n}\n\nfunction shouldBeIgnoredByZone(applyArgs: unknown): boolean {\n  return hasApplyArgsData(applyArgs, '__ignore_ng_zone__');\n}\n\nfunction isSchedulerTick(applyArgs: unknown): boolean {\n  return hasApplyArgsData(applyArgs, '__scheduler_tick__');\n}\n\nfunction hasApplyArgsData(applyArgs: unknown, key: string) {\n  if (!Array.isArray(applyArgs)) {\n    return false;\n  }\n\n  // We should only ever get 1 arg passed through to invokeTask.\n  // Short circuit here incase that behavior changes.\n  if (applyArgs.length !== 1) {\n    return false;\n  }\n\n  return applyArgs[0]?.data?.[key] === true;\n}\n\n// Set of options recognized by the NgZone.\nexport interface InternalNgZoneOptions {\n  enableLongStackTrace?: boolean;\n  shouldCoalesceEventChangeDetection?: boolean;\n  shouldCoalesceRunChangeDetection?: boolean;\n  scheduleInRootZone?: boolean;\n}\n\nexport function getNgZone(\n  ngZoneToUse: NgZone | 'zone.js' | 'noop' = 'zone.js',\n  options: InternalNgZoneOptions,\n): NgZone {\n  if (ngZoneToUse === 'noop') {\n    return new NoopNgZone();\n  }\n  if (ngZoneToUse === 'zone.js') {\n    return new NgZone(options);\n  }\n  return ngZoneToUse;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, InjectionToken} from './di';\nimport {NgZone} from './zone';\n\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * // Provide in standalone apps\n * bootstrapApplication(AppComponent, {\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n *\n * // Provide in module-based apps\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nexport class ErrorHandler {\n  /**\n   * @internal\n   */\n  _console: Console = console;\n\n  handleError(error: any): void {\n    this._console.error('ERROR', error);\n  }\n}\n\n/**\n * `InjectionToken` used to configure how to call the `ErrorHandler`.\n *\n * `NgZone` is provided by default today so the default (and only) implementation for this\n * is calling `ErrorHandler.handleError` outside of the Angular zone.\n */\nexport const INTERNAL_APPLICATION_ERROR_HANDLER = new InjectionToken<(e: any) => void>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'internal error handler' : '',\n  {\n    providedIn: 'root',\n    factory: () => {\n      const zone = inject(NgZone);\n      const userErrorHandler = inject(ErrorHandler);\n      return (e: unknown) => zone.runOutsideAngular(() => userErrorHandler.handleError(e));\n    },\n  },\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertInInjectionContext} from '../../di';\n\nimport {\n  createInputSignal,\n  InputOptions,\n  InputOptionsWithoutTransform,\n  InputOptionsWithTransform,\n  InputSignal,\n  InputSignalWithTransform,\n} from './input_signal';\nimport {REQUIRED_UNSET_VALUE} from './input_signal_node';\n\nexport function inputFunction<ReadT, WriteT>(\n  initialValue?: ReadT,\n  opts?: InputOptions<ReadT, WriteT>,\n): InputSignalWithTransform<ReadT | undefined, WriteT> {\n  ngDevMode && assertInInjectionContext(input);\n  return createInputSignal(initialValue, opts);\n}\n\nexport function inputRequiredFunction<ReadT, WriteT = ReadT>(\n  opts?: InputOptions<ReadT, WriteT>,\n): InputSignalWithTransform<ReadT, WriteT> {\n  ngDevMode && assertInInjectionContext(input);\n  return createInputSignal(REQUIRED_UNSET_VALUE as never, opts);\n}\n\n/**\n * The `input` function allows declaration of inputs in directives and\n * components.\n *\n * The function exposes an API for also declaring required inputs via the\n * `input.required` function.\n *\n * @publicAPI\n * @docsPrivate Ignored because `input` is the canonical API entry.\n */\nexport interface InputFunction {\n  /**\n   * Initializes an input of type `T` with an initial value of `undefined`.\n   * Angular will implicitly use `undefined` as initial value.\n   */\n  <T>(): InputSignal<T | undefined>;\n  /** Declares an input of type `T` with an explicit initial value. */\n  <T>(initialValue: T, opts?: InputOptionsWithoutTransform<T>): InputSignal<T>;\n  /** Declares an input of type `T|undefined` without an initial value, but with input options */\n  <T>(initialValue: undefined, opts: InputOptionsWithoutTransform<T>): InputSignal<T | undefined>;\n  /**\n   * Declares an input of type `T` with an initial value and a transform\n   * function.\n   *\n   * The input accepts values of type `TransformT` and the given\n   * transform function will transform the value to type `T`.\n   */\n  <T, TransformT>(\n    initialValue: T,\n    opts: InputOptionsWithTransform<T, TransformT>,\n  ): InputSignalWithTransform<T, TransformT>;\n  /**\n   * Declares an input of type `T|undefined` without an initial value and with a transform\n   * function.\n   *\n   * The input accepts values of type `TransformT` and the given\n   * transform function will transform the value to type `T|undefined`.\n   */ <T, TransformT>(\n    initialValue: undefined,\n    opts: InputOptionsWithTransform<T | undefined, TransformT>,\n  ): InputSignalWithTransform<T | undefined, TransformT>;\n\n  /**\n   * Initializes a required input.\n   *\n   * Consumers of your directive/component need to bind to this\n   * input. If unset, a compile time error will be reported.\n   *\n   * @publicAPI\n   */\n  required: {\n    /** Declares a required input of type `T`. */\n    <T>(opts?: InputOptionsWithoutTransform<T>): InputSignal<T>;\n    /**\n     * Declares a required input of type `T` with a transform function.\n     *\n     * The input accepts values of type `TransformT` and the given\n     * transform function will transform the value to type `T`.\n     */\n    <T, TransformT>(\n      opts: InputOptionsWithTransform<T, TransformT>,\n    ): InputSignalWithTransform<T, TransformT>;\n  };\n}\n\n/**\n * The `input` function allows declaration of Angular inputs in directives\n * and components.\n *\n * There are two variants of inputs that can be declared:\n *\n *   1. **Optional inputs** with an initial value.\n *   2. **Required inputs** that consumers need to set.\n *\n * By default, the `input` function will declare optional inputs that\n * always have an initial value. Required inputs can be declared\n * using the `input.required()` function.\n *\n * Inputs are signals. The values of an input are exposed as a `Signal`.\n * The signal always holds the latest value of the input that is bound\n * from the parent.\n *\n * @usageNotes\n * To use signal-based inputs, import `input` from `@angular/core`.\n *\n * ```ts\n * import {input} from '@angular/core`;\n * ```\n *\n * Inside your component, introduce a new class member and initialize\n * it with a call to `input` or `input.required`.\n *\n * ```ts\n * @Component({\n *   ...\n * })\n * export class UserProfileComponent {\n *   firstName = input<string>();             // Signal<string|undefined>\n *   lastName  = input.required<string>();    // Signal<string>\n *   age       = input(0)                     // Signal<number>\n * }\n * ```\n *\n * Inside your component template, you can display values of the inputs\n * by calling the signal.\n *\n * ```html\n * <span>{{firstName()}}</span>\n * ```\n *\n * @publicAPI\n * @initializerApiFunction\n */\nexport const input: InputFunction = (() => {\n  // Note: This may be considered a side-effect, but nothing will depend on\n  // this assignment, unless this `input` constant export is accessed. It's a\n  // self-contained side effect that is local to the user facing`input` export.\n  (inputFunction as any).required = inputRequiredFunction;\n  return inputFunction as typeof inputFunction & {required: typeof inputRequiredFunction};\n})();\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {TNode} from '../render3/interfaces/node';\nimport {RElement} from '../render3/interfaces/renderer_dom';\nimport {LView} from '../render3/interfaces/view';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {getNativeByTNode} from '../render3/util/view_utils';\n\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\nexport function injectElementRef(): ElementRef {\n  return createElementRef(getCurrentTNode()!, getLView());\n}\n\n/**\n * Creates an ElementRef given a node.\n *\n * @param tNode The node for which you'd like an ElementRef\n * @param lView The view to which the node belongs\n * @returns The ElementRef instance to use\n */\nexport function createElementRef(tNode: TNode, lView: LView): ElementRef {\n  return new ElementRef(getNativeByTNode(tNode, lView) as RElement);\n}\n\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nexport class ElementRef<T = any> {\n  /**\n   * <div class=\"callout is-critical\">\n   *   <header>Use with caution</header>\n   *   <p>\n   *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n   *    data-binding provided by Angular instead. Alternatively you can take a look at\n   *    {@link Renderer2} which provides an API that can be safely used.\n   *   </p>\n   * </div>\n   */\n  public nativeElement: T;\n\n  constructor(nativeElement: T) {\n    this.nativeElement = nativeElement;\n  }\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => ElementRef = injectElementRef;\n}\n\n/**\n * Unwraps `ElementRef` and return the `nativeElement`.\n *\n * @param value value to unwrap\n * @returns `nativeElement` if `ElementRef` otherwise returns value as is.\n */\nexport function unwrapElementRef<T, R>(value: T | ElementRef<R>): T | R {\n  return value instanceof ElementRef ? value.nativeElement : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {SIGNAL} from '@angular/core/primitives/signals';\n\n/**\n * A reactive value which notifies consumers of any changes.\n *\n * Signals are functions which returns their current value. To access the current value of a signal,\n * call it.\n *\n * Ordinary values can be turned into `Signal`s with the `signal` function.\n */\nexport type Signal<T> = (() => T) & {\n  [SIGNAL]: unknown;\n};\n\n/**\n * Checks if the given `value` is a reactive `Signal`.\n */\nexport function isSignal(value: unknown): value is Signal<unknown> {\n  return typeof value === 'function' && (value as Signal<unknown>)[SIGNAL] !== undefined;\n}\n\n/**\n * A comparison function which can determine if two values are equal.\n */\nexport type ValueEqualityFn<T> = (a: T, b: T) => boolean;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  createSignal,\n  SIGNAL,\n  SignalGetter,\n  SignalNode,\n  signalSetFn,\n  signalUpdateFn,\n} from '@angular/core/primitives/signals';\n\nimport {isSignal, Signal, ValueEqualityFn} from './api';\n\n/** Symbol used distinguish `WritableSignal` from other non-writable signals and functions. */\nexport const ɵWRITABLE_SIGNAL = /* @__PURE__ */ Symbol('WRITABLE_SIGNAL');\n\n/**\n * A `Signal` with a value that can be mutated via a setter interface.\n */\nexport interface WritableSignal<T> extends Signal<T> {\n  [ɵWRITABLE_SIGNAL]: T;\n\n  /**\n   * Directly set the signal to a new value, and notify any dependents.\n   */\n  set(value: T): void;\n\n  /**\n   * Update the value of the signal based on its current value, and\n   * notify any dependents.\n   */\n  update(updateFn: (value: T) => T): void;\n\n  /**\n   * Returns a readonly version of this signal. Readonly signals can be accessed to read their value\n   * but can't be changed using set or update methods. The readonly signals do _not_ have\n   * any built-in mechanism that would prevent deep-mutation of their value.\n   */\n  asReadonly(): Signal<T>;\n}\n\n/**\n * Utility function used during template type checking to extract the value from a `WritableSignal`.\n * @codeGenApi\n */\nexport function ɵunwrapWritableSignal<T>(value: T | {[ɵWRITABLE_SIGNAL]: T}): T {\n  // Note: the function uses `WRITABLE_SIGNAL` as a brand instead of `WritableSignal<T>`,\n  // because the latter incorrectly unwraps non-signal getter functions.\n  return null!;\n}\n\n/**\n * Options passed to the `signal` creation function.\n */\nexport interface CreateSignalOptions<T> {\n  /**\n   * A comparison function which defines equality for signal values.\n   */\n  equal?: ValueEqualityFn<T>;\n\n  /**\n   * A debug name for the signal. Used in Angular DevTools to identify the signal.\n   */\n  debugName?: string;\n}\n\n/**\n * Create a `Signal` that can be set or updated directly.\n */\nexport function signal<T>(initialValue: T, options?: CreateSignalOptions<T>): WritableSignal<T> {\n  const signalFn = createSignal(initialValue, options?.equal) as SignalGetter<T> &\n    WritableSignal<T>;\n\n  const node = signalFn[SIGNAL];\n\n  signalFn.set = (newValue: T) => signalSetFn(node, newValue);\n  signalFn.update = (updateFn: (value: T) => T) => signalUpdateFn(node, updateFn);\n  signalFn.asReadonly = signalAsReadonlyFn.bind(signalFn as any) as () => Signal<T>;\n\n  if (ngDevMode) {\n    signalFn.toString = () => `[Signal: ${signalFn()}]`;\n    node.debugName = options?.debugName;\n  }\n\n  return signalFn as WritableSignal<T>;\n}\n\nexport function signalAsReadonlyFn<T>(this: SignalGetter<T>): Signal<T> {\n  const node = this[SIGNAL] as SignalNode<T> & {readonlyFn?: Signal<T>};\n  if (node.readonlyFn === undefined) {\n    const readonlyFn = () => this();\n    (readonlyFn as any)[SIGNAL] = node;\n    node.readonlyFn = readonlyFn as Signal<T>;\n  }\n  return node.readonlyFn;\n}\n\n/**\n * Checks if the given `value` is a writeable signal.\n */\nexport function isWritableSignal(value: unknown): value is WritableSignal<unknown> {\n  return isSignal(value) && typeof (value as any).set === 'function';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Observable, Subject} from 'rxjs';\n\nimport {EventEmitter} from '../event_emitter';\nimport {Writable} from '../interface/type';\nimport {arrayEquals, flatten} from '../util/array_utils';\n\nfunction symbolIterator<T>(this: QueryList<T>): Iterator<T> {\n  // @ts-expect-error accessing a private member\n  return this._results[Symbol.iterator]();\n}\n\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * @usageNotes\n * ### Example\n * ```ts\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @publicApi\n */\nexport class QueryList<T> implements Iterable<T> {\n  public readonly dirty = true;\n  private _onDirty?: () => void = undefined;\n  private _results: Array<T> = [];\n  private _changesDetected: boolean = false;\n  private _changes: Subject<QueryList<T>> | undefined = undefined;\n\n  readonly length: number = 0;\n  readonly first: T = undefined!;\n  readonly last: T = undefined!;\n\n  /**\n   * Returns `Observable` of `QueryList` notifying the subscriber of changes.\n   */\n  get changes(): Observable<any> {\n    return (this._changes ??= new Subject());\n  }\n\n  /**\n   * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change\n   *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in\n   *     the same result)\n   */\n  constructor(private _emitDistinctChangesOnly: boolean = false) {}\n\n  /**\n   * Returns the QueryList entry at `index`.\n   */\n  get(index: number): T | undefined {\n    return this._results[index];\n  }\n\n  /**\n   * See\n   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n   */\n  map<U>(fn: (item: T, index: number, array: T[]) => U): U[] {\n    return this._results.map(fn);\n  }\n\n  /**\n   * See\n   * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n   */\n  filter<S extends T>(predicate: (value: T, index: number, array: readonly T[]) => value is S): S[];\n  filter(predicate: (value: T, index: number, array: readonly T[]) => unknown): T[];\n  filter(fn: (item: T, index: number, array: T[]) => boolean): T[] {\n    return this._results.filter(fn);\n  }\n\n  /**\n   * See\n   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n   */\n  find(fn: (item: T, index: number, array: T[]) => boolean): T | undefined {\n    return this._results.find(fn);\n  }\n\n  /**\n   * See\n   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n   */\n  reduce<U>(fn: (prevValue: U, curValue: T, curIndex: number, array: T[]) => U, init: U): U {\n    return this._results.reduce(fn, init);\n  }\n\n  /**\n   * See\n   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n   */\n  forEach(fn: (item: T, index: number, array: T[]) => void): void {\n    this._results.forEach(fn);\n  }\n\n  /**\n   * See\n   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n   */\n  some(fn: (value: T, index: number, array: T[]) => boolean): boolean {\n    return this._results.some(fn);\n  }\n\n  /**\n   * Returns a copy of the internal results list as an Array.\n   */\n  toArray(): T[] {\n    return this._results.slice();\n  }\n\n  toString(): string {\n    return this._results.toString();\n  }\n\n  /**\n   * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n   * on change detection, it will not notify of changes to the queries, unless a new change\n   * occurs.\n   *\n   * @param resultsTree The query results to store\n   * @param identityAccessor Optional function for extracting stable object identity from a value\n   *    in the array. This function is executed for each element of the query result list while\n   *    comparing current query list with the new one (provided as a first argument of the `reset`\n   *    function) to detect if the lists are different. If the function is not provided, elements\n   *    are compared as is (without any pre-processing).\n   */\n  reset(resultsTree: Array<T | any[]>, identityAccessor?: (value: T) => unknown): void {\n    (this as {dirty: boolean}).dirty = false;\n    const newResultFlat = flatten(resultsTree);\n    if ((this._changesDetected = !arrayEquals(this._results, newResultFlat, identityAccessor))) {\n      this._results = newResultFlat;\n      (this as Writable<this>).length = newResultFlat.length;\n      (this as Writable<this>).last = newResultFlat[this.length - 1];\n      (this as Writable<this>).first = newResultFlat[0];\n    }\n  }\n\n  /**\n   * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n   */\n  notifyOnChanges(): void {\n    if (this._changes !== undefined && (this._changesDetected || !this._emitDistinctChangesOnly))\n      this._changes.next(this);\n  }\n\n  /** @internal */\n  onDirty(cb: () => void) {\n    this._onDirty = cb;\n  }\n\n  /** internal */\n  setDirty() {\n    (this as {dirty: boolean}).dirty = true;\n    this._onDirty?.();\n  }\n\n  /** internal */\n  destroy(): void {\n    if (this._changes !== undefined) {\n      this._changes.complete();\n      this._changes.unsubscribe();\n    }\n  }\n\n  [Symbol.iterator]: () => Iterator<T> = /** @__PURE__*/ (() => symbolIterator)();\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {TNode, TNodeFlags} from '../render3/interfaces/node';\nimport {RElement} from '../render3/interfaces/renderer_dom';\n\n/**\n * The name of an attribute that can be added to the hydration boundary node\n * (component host node) to disable hydration for the content within that boundary.\n */\nexport const SKIP_HYDRATION_ATTR_NAME = 'ngSkipHydration';\n\n/** Lowercase name of the `ngSkipHydration` attribute used for case-insensitive comparisons. */\nconst SKIP_HYDRATION_ATTR_NAME_LOWER_CASE = 'ngskiphydration';\n\n/**\n * Helper function to check if a given TNode has the 'ngSkipHydration' attribute.\n */\nexport function hasSkipHydrationAttrOnTNode(tNode: TNode): boolean {\n  const attrs = tNode.mergedAttrs;\n  if (attrs === null) return false;\n  // only ever look at the attribute name and skip the values\n  for (let i = 0; i < attrs.length; i += 2) {\n    const value = attrs[i];\n    // This is a marker, which means that the static attributes section is over,\n    // so we can exit early.\n    if (typeof value === 'number') return false;\n    if (typeof value === 'string' && value.toLowerCase() === SKIP_HYDRATION_ATTR_NAME_LOWER_CASE) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Helper function to check if a given RElement has the 'ngSkipHydration' attribute.\n */\nexport function hasSkipHydrationAttrOnRElement(rNode: RElement): boolean {\n  return rNode.hasAttribute(SKIP_HYDRATION_ATTR_NAME);\n}\n\n/**\n * Checks whether a TNode has a flag to indicate that it's a part of\n * a skip hydration block.\n */\nexport function hasInSkipHydrationBlockFlag(tNode: TNode): boolean {\n  return (tNode.flags & TNodeFlags.inSkipHydrationBlock) === TNodeFlags.inSkipHydrationBlock;\n}\n\n/**\n * Helper function that determines if a given node is within a skip hydration block\n * by navigating up the TNode tree to see if any parent nodes have skip hydration\n * attribute.\n */\nexport function isInSkipHydrationBlock(tNode: TNode): boolean {\n  if (hasInSkipHydrationBlockFlag(tNode)) {\n    return true;\n  }\n  let currentTNode: TNode | null = tNode.parent;\n  while (currentTNode) {\n    if (hasInSkipHydrationBlockFlag(tNode) || hasSkipHydrationAttrOnTNode(currentTNode)) {\n      return true;\n    }\n    currentTNode = currentTNode.parent;\n  }\n  return false;\n}\n\n/**\n * Check if an i18n block is in a skip hydration section by looking at a parent TNode\n * to determine if this TNode is in a skip hydration section or the TNode has\n * the `ngSkipHydration` attribute.\n */\nexport function isI18nInSkipHydrationBlock(parentTNode: TNode): boolean {\n  return (\n    hasInSkipHydrationBlockFlag(parentTNode) ||\n    hasSkipHydrationAttrOnTNode(parentTNode) ||\n    isInSkipHydrationBlock(parentTNode)\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n * @see {@link /api/core/ChangeDetectorRef?tab=usage-notes Change detection usage}\n * @see {@link /best-practices/skipping-subtrees Skipping component subtrees}\n *\n * @publicApi\n */\nexport enum ChangeDetectionStrategy {\n  /**\n   * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n   * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n   * Change detection can still be explicitly invoked.\n   * This strategy applies to all child directives and cannot be overridden.\n   */\n  OnPush = 0,\n\n  /**\n   * Use the default `CheckAlways` strategy, in which change detection is automatic until\n   * explicitly deactivated.\n   */\n  Default = 1,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertNumber} from '../../util/assert';\n\nimport {ID, LView} from './view';\n\n// Keeps track of the currently-active LViews.\nconst TRACKED_LVIEWS = new Map<number, LView>();\n\n// Used for generating unique IDs for LViews.\nlet uniqueIdCounter = 0;\n\n/** Gets a unique ID that can be assigned to an LView. */\nexport function getUniqueLViewId(): number {\n  return uniqueIdCounter++;\n}\n\n/** Starts tracking an LView. */\nexport function registerLView(lView: LView): void {\n  ngDevMode && assertNumber(lView[ID], 'LView must have an ID in order to be registered');\n  TRACKED_LVIEWS.set(lView[ID], lView);\n}\n\n/** Gets an LView by its unique ID. */\nexport function getLViewById(id: number): LView | null {\n  ngDevMode && assertNumber(id, 'ID used for LView lookup must be a number');\n  return TRACKED_LVIEWS.get(id) || null;\n}\n\n/** Stops tracking an LView. */\nexport function unregisterLView(lView: LView): void {\n  ngDevMode && assertNumber(lView[ID], 'Cannot stop tracking an LView that does not have an ID');\n  TRACKED_LVIEWS.delete(lView[ID]);\n}\n\n/** Gets the currently-tracked views. */\nexport function getTrackedLViews(): ReadonlyMap<number, LView> {\n  return TRACKED_LVIEWS;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport '../util/ng_dev_mode';\n\nimport {assertDefined, assertDomNode} from '../util/assert';\nimport {EMPTY_ARRAY} from '../util/empty';\n\nimport {assertLView} from './assert';\nimport {LContext} from './interfaces/context';\nimport {getLViewById, registerLView} from './interfaces/lview_tracking';\nimport {TNode} from './interfaces/node';\nimport {RElement, RNode} from './interfaces/renderer_dom';\nimport {isComponentHost, isLView} from './interfaces/type_checks';\nimport {CONTEXT, HEADER_OFFSET, HOST, ID, LView, TVIEW} from './interfaces/view';\nimport {getComponentLViewByIndex, unwrapRNode} from './util/view_utils';\n\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param target Component, Directive or DOM Node.\n */\nexport function getLContext(target: any): LContext | null {\n  let mpValue = readPatchedData(target);\n  if (mpValue) {\n    // only when it's an array is it considered an LView instance\n    // ... otherwise it's an already constructed LContext instance\n    if (isLView(mpValue)) {\n      const lView: LView = mpValue!;\n      let nodeIndex: number;\n      let component: any = undefined;\n      let directives: any[] | null | undefined = undefined;\n\n      if (isComponentInstance(target)) {\n        nodeIndex = findViaComponent(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided component was not found in the application');\n        }\n        component = target;\n      } else if (isDirectiveInstance(target)) {\n        nodeIndex = findViaDirective(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided directive was not found in the application');\n        }\n        directives = getDirectivesAtNodeIndex(nodeIndex, lView);\n      } else {\n        nodeIndex = findViaNativeElement(lView, target as RElement);\n        if (nodeIndex == -1) {\n          return null;\n        }\n      }\n\n      // the goal is not to fill the entire context full of data because the lookups\n      // are expensive. Instead, only the target data (the element, component, container, ICU\n      // expression or directive details) are filled into the context. If called multiple times\n      // with different target values then the missing target data will be filled in.\n      const native = unwrapRNode(lView[nodeIndex]);\n      const existingCtx = readPatchedData(native);\n      const context: LContext =\n        existingCtx && !Array.isArray(existingCtx)\n          ? existingCtx\n          : createLContext(lView, nodeIndex, native);\n\n      // only when the component has been discovered then update the monkey-patch\n      if (component && context.component === undefined) {\n        context.component = component;\n        attachPatchData(context.component, context);\n      }\n\n      // only when the directives have been discovered then update the monkey-patch\n      if (directives && context.directives === undefined) {\n        context.directives = directives;\n        for (let i = 0; i < directives.length; i++) {\n          attachPatchData(directives[i], context);\n        }\n      }\n\n      attachPatchData(context.native, context);\n      mpValue = context;\n    }\n  } else {\n    const rElement = target as RElement;\n    ngDevMode && assertDomNode(rElement);\n\n    // if the context is not found then we need to traverse upwards up the DOM\n    // to find the nearest element that has already been monkey patched with data\n    let parent = rElement as any;\n    while ((parent = parent.parentNode)) {\n      const parentContext = readPatchedData(parent);\n      if (parentContext) {\n        const lView = Array.isArray(parentContext) ? (parentContext as LView) : parentContext.lView;\n\n        // the edge of the app was also reached here through another means\n        // (maybe because the DOM was changed manually).\n        if (!lView) {\n          return null;\n        }\n\n        const index = findViaNativeElement(lView, rElement);\n        if (index >= 0) {\n          const native = unwrapRNode(lView[index]);\n          const context = createLContext(lView, index, native);\n          attachPatchData(native, context);\n          mpValue = context;\n          break;\n        }\n      }\n    }\n  }\n  return (mpValue as LContext) || null;\n}\n\n/**\n * Creates an empty instance of a `LContext` context\n */\nfunction createLContext(lView: LView, nodeIndex: number, native: RNode): LContext {\n  return new LContext(lView[ID], nodeIndex, native);\n}\n\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param componentInstance\n * @returns The component's view\n */\nexport function getComponentViewByInstance(componentInstance: {}): LView {\n  let patchedData = readPatchedData(componentInstance);\n  let lView: LView;\n\n  if (isLView(patchedData)) {\n    const contextLView: LView = patchedData;\n    const nodeIndex = findViaComponent(contextLView, componentInstance);\n    lView = getComponentLViewByIndex(nodeIndex, contextLView);\n    const context = createLContext(contextLView, nodeIndex, lView[HOST] as RElement);\n    context.component = componentInstance;\n    attachPatchData(componentInstance, context);\n    attachPatchData(context.native, context);\n  } else {\n    const context = patchedData as unknown as LContext;\n    const contextLView = context.lView!;\n    ngDevMode && assertLView(contextLView);\n    lView = getComponentLViewByIndex(context.nodeIndex, contextLView);\n  }\n  return lView;\n}\n\n/**\n * This property will be monkey-patched on elements, components and directives.\n */\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\n\nexport function attachLViewId(target: any, data: LView) {\n  target[MONKEY_PATCH_KEY_NAME] = data[ID];\n}\n\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nexport function readLView(target: any): LView | null {\n  const data = readPatchedData(target);\n  if (isLView(data)) {\n    return data;\n  }\n  return data ? data.lView : null;\n}\n\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n */\nexport function attachPatchData(target: any, data: LView | LContext) {\n  ngDevMode && assertDefined(target, 'Target expected');\n  // Only attach the ID of the view in order to avoid memory leaks (see #41047). We only do this\n  // for `LView`, because we have control over when an `LView` is created and destroyed, whereas\n  // we can't know when to remove an `LContext`.\n  if (isLView(data)) {\n    target[MONKEY_PATCH_KEY_NAME] = data[ID];\n    registerLView(data);\n  } else {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n  }\n}\n\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nexport function readPatchedData(target: any): LView | LContext | null {\n  ngDevMode && assertDefined(target, 'Target expected');\n  const data = target[MONKEY_PATCH_KEY_NAME];\n  return typeof data === 'number' ? getLViewById(data) : data || null;\n}\n\nexport function readPatchedLView<T>(target: any): LView<T> | null {\n  const value = readPatchedData(target);\n  if (value) {\n    return (isLView(value) ? value : value.lView) as LView<T>;\n  }\n  return null;\n}\n\nexport function isComponentInstance(instance: any): boolean {\n  return instance && instance.constructor && instance.constructor.ɵcmp;\n}\n\nexport function isDirectiveInstance(instance: any): boolean {\n  return instance && instance.constructor && instance.constructor.ɵdir;\n}\n\n/**\n * Locates the element within the given LView and returns the matching index\n */\nfunction findViaNativeElement(lView: LView, target: RElement): number {\n  const tView = lView[TVIEW];\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    if (unwrapRNode(lView[i]) === target) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n/**\n * Locates the next tNode (child, sibling or parent).\n */\nfunction traverseNextElement(tNode: TNode): TNode | null {\n  if (tNode.child) {\n    return tNode.child;\n  } else if (tNode.next) {\n    return tNode.next;\n  } else {\n    // Let's take the following template: <div><span>text</span></div><component/>\n    // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n    // in this case the parent `div`, so that we can find the component.\n    while (tNode.parent && !tNode.parent.next) {\n      tNode = tNode.parent;\n    }\n    return tNode.parent && tNode.parent.next;\n  }\n}\n\n/**\n * Locates the component within the given LView and returns the matching index\n */\nfunction findViaComponent(lView: LView, componentInstance: {}): number {\n  const componentIndices = lView[TVIEW].components;\n  if (componentIndices) {\n    for (let i = 0; i < componentIndices.length; i++) {\n      const elementComponentIndex = componentIndices[i];\n      const componentView = getComponentLViewByIndex(elementComponentIndex, lView);\n      if (componentView[CONTEXT] === componentInstance) {\n        return elementComponentIndex;\n      }\n    }\n  } else {\n    const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);\n    const rootComponent = rootComponentView[CONTEXT];\n    if (rootComponent === componentInstance) {\n      // we are dealing with the root element here therefore we know that the\n      // element is the very first element after the HEADER data in the lView\n      return HEADER_OFFSET;\n    }\n  }\n  return -1;\n}\n\n/**\n * Locates the directive within the given LView and returns the matching index\n */\nfunction findViaDirective(lView: LView, directiveInstance: {}): number {\n  // if a directive is monkey patched then it will (by default)\n  // have a reference to the LView of the current view. The\n  // element bound to the directive being search lives somewhere\n  // in the view data. We loop through the nodes and check their\n  // list of directives for the instance.\n  let tNode = lView[TVIEW].firstChild;\n  while (tNode) {\n    const directiveIndexStart = tNode.directiveStart;\n    const directiveIndexEnd = tNode.directiveEnd;\n    for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n      if (lView[i] === directiveInstance) {\n        return tNode.index;\n      }\n    }\n    tNode = traverseNextElement(tNode);\n  }\n  return -1;\n}\n\n/**\n * Returns a list of directives applied to a node at a specific index. The list includes\n * directives matched by selector and any host directives, but it excludes components.\n * Use `getComponentAtNodeIndex` to find the component applied to a node.\n *\n * @param nodeIndex The node index\n * @param lView The target view data\n */\nexport function getDirectivesAtNodeIndex(nodeIndex: number, lView: LView): any[] | null {\n  const tNode = lView[TVIEW].data[nodeIndex] as TNode;\n  if (tNode.directiveStart === 0) return EMPTY_ARRAY;\n  const results: any[] = [];\n  for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {\n    const directiveInstance = lView[i];\n    if (!isComponentInstance(directiveInstance)) {\n      results.push(directiveInstance);\n    }\n  }\n  return results;\n}\n\nexport function getComponentAtNodeIndex(nodeIndex: number, lView: LView): {} | null {\n  const tNode = lView[TVIEW].data[nodeIndex] as TNode;\n  return isComponentHost(tNode) ? lView[tNode.directiveStart + tNode.componentOffset] : null;\n}\n\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n */\nexport function discoverLocalRefs(lView: LView, nodeIndex: number): {[key: string]: any} | null {\n  const tNode = lView[TVIEW].data[nodeIndex] as TNode;\n  if (tNode && tNode.localNames) {\n    const result: {[key: string]: any} = {};\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < tNode.localNames.length; i += 2) {\n      result[tNode.localNames[i]] = lView[localIndex];\n      localIndex++;\n    }\n    return result;\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertDefined} from '../../util/assert';\nimport {assertLView} from '../assert';\nimport {readPatchedLView} from '../context_discovery';\nimport {LContainer} from '../interfaces/container';\nimport {isLContainer, isLView, isRootView} from '../interfaces/type_checks';\nimport {CHILD_HEAD, CONTEXT, LView, NEXT} from '../interfaces/view';\n\nimport {getLViewParent} from './view_utils';\n\n/**\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param componentOrLView any component or `LView`\n */\nexport function getRootView<T>(componentOrLView: LView | {}): LView<T> {\n  ngDevMode && assertDefined(componentOrLView, 'component');\n  let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView)!;\n  while (lView && !isRootView(lView)) {\n    lView = getLViewParent(lView)!;\n  }\n  ngDevMode && assertLView(lView);\n  return lView as LView<T>;\n}\n\n/**\n * Returns the context information associated with the application where the target is situated. It\n * does this by walking the parent views until it gets to the root view, then getting the context\n * off of that.\n *\n * @param viewOrComponent the `LView` or component to get the root context for.\n */\nexport function getRootContext<T>(viewOrComponent: LView<T> | {}): T {\n  const rootView = getRootView(viewOrComponent);\n  ngDevMode &&\n    assertDefined(rootView[CONTEXT], 'Root view has no context. Perhaps it is disconnected?');\n  return rootView[CONTEXT] as T;\n}\n\n/**\n * Gets the first `LContainer` in the LView or `null` if none exists.\n */\nexport function getFirstLContainer(lView: LView): LContainer | null {\n  return getNearestLContainer(lView[CHILD_HEAD]);\n}\n\n/**\n * Gets the next `LContainer` that is a sibling of the given container.\n */\nexport function getNextLContainer(container: LContainer): LContainer | null {\n  return getNearestLContainer(container[NEXT]);\n}\n\nfunction getNearestLContainer(viewOrContainer: LContainer | LView | null) {\n  while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {\n    viewOrContainer = viewOrContainer[NEXT];\n  }\n  return viewOrContainer as LContainer | null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\n\n/**\n * Most of the use of `document` in Angular is from within the DI system so it is possible to simply\n * inject the `DOCUMENT` token and are done.\n *\n * Ivy is special because it does not rely upon the DI and must get hold of the document some other\n * way.\n *\n * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.\n * Wherever ivy needs the global document, it calls `getDocument()` instead.\n *\n * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to\n * tell ivy what the global `document` is.\n *\n * Angular does this for us in each of the standard platforms (`Browser` and `Server`)\n * by calling `setDocument()` when providing the `DOCUMENT` token.\n */\nlet DOCUMENT: Document | undefined = undefined;\n\n/**\n * Tell ivy what the `document` is for this platform.\n *\n * It is only necessary to call this if the current platform is not a browser.\n *\n * @param document The object representing the global `document` in this environment.\n */\nexport function setDocument(document: Document | undefined): void {\n  DOCUMENT = document;\n}\n\n/**\n * Access the object that represents the `document` for this platform.\n *\n * Ivy calls this whenever it needs to access the `document` object.\n * For example to create the renderer or to do sanitization.\n */\nexport function getDocument(): Document {\n  if (DOCUMENT !== undefined) {\n    return DOCUMENT;\n  } else if (typeof document !== 'undefined') {\n    return document;\n  }\n\n  throw new RuntimeError(\n    RuntimeErrorCode.MISSING_DOCUMENT,\n    (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      `The document object is not available in this context. Make sure the DOCUMENT injection token is provided.`,\n  );\n\n  // No \"document\" can be found. This should only happen if we are running ivy outside Angular and\n  // the current platform is not a browser. Since this is not a supported scenario at the moment\n  // this should not happen in Angular apps.\n  // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a\n  // public API.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '../di/injection_token';\nimport {getDocument} from '../render3/interfaces/document';\n\n/**\n * A DI token representing a string ID, used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated} is being used.\n *\n * The token is needed in cases when multiple applications are bootstrapped on a page\n * (for example, using `bootstrapApplication` calls). In this case, ensure that those applications\n * have different `APP_ID` value setup. For example:\n *\n * ```ts\n * bootstrapApplication(ComponentA, {\n *   providers: [\n *     { provide: APP_ID, useValue: 'app-a' },\n *     // ... other providers ...\n *   ]\n * });\n *\n * bootstrapApplication(ComponentB, {\n *   providers: [\n *     { provide: APP_ID, useValue: 'app-b' },\n *     // ... other providers ...\n *   ]\n * });\n * ```\n *\n * By default, when there is only one application bootstrapped, you don't need to provide the\n * `APP_ID` token (the `ng` will be used as an app ID).\n *\n * @publicApi\n */\nexport const APP_ID = new InjectionToken<string>(ngDevMode ? 'AppId' : '', {\n  providedIn: 'root',\n  factory: () => DEFAULT_APP_ID,\n});\n\n/** Default value of the `APP_ID` token. */\nconst DEFAULT_APP_ID = 'ng';\n\n/**\n * A function that is executed when a platform is initialized.\n *\n * @deprecated from v19.0.0, use providePlatformInitializer instead\n *\n * @see {@link providePlatformInitializer}\n *\n * @publicApi\n */\nexport const PLATFORM_INITIALIZER = new InjectionToken<ReadonlyArray<() => void>>(\n  ngDevMode ? 'Platform Initializer' : '',\n);\n\n/**\n * A token that indicates an opaque platform ID.\n * @publicApi\n */\nexport const PLATFORM_ID = new InjectionToken<Object>(ngDevMode ? 'Platform ID' : '', {\n  providedIn: 'platform',\n  factory: () => 'unknown', // set a default platform name, when none set explicitly\n});\n\n/**\n * A DI token that indicates the root directory of\n * the application\n * @publicApi\n * @deprecated\n */\nexport const PACKAGE_ROOT_URL = new InjectionToken<string>(\n  ngDevMode ? 'Application Packages Root URL' : '',\n);\n\n// We keep this token here, rather than the animations package, so that modules that only care\n// about which animations module is loaded (e.g. the CDK) can retrieve it without having to\n// include extra dependencies. See #44970 for more context.\n\n/**\n * A [DI token](api/core/InjectionToken) that indicates which animations\n * module has been loaded.\n * @publicApi\n */\nexport const ANIMATION_MODULE_TYPE = new InjectionToken<'NoopAnimations' | 'BrowserAnimations'>(\n  ngDevMode ? 'AnimationModuleType' : '',\n);\n\n// TODO(crisbeto): link to CSP guide here.\n/**\n * Token used to configure the [Content Security Policy](https://web.dev/strict-csp/) nonce that\n * Angular will apply when inserting inline styles. If not provided, Angular will look up its value\n * from the `ngCspNonce` attribute of the application root node.\n *\n * @publicApi\n */\nexport const CSP_NONCE = new InjectionToken<string | null>(ngDevMode ? 'CSP nonce' : '', {\n  providedIn: 'root',\n  factory: () => {\n    // Ideally we wouldn't have to use `querySelector` here since we know that the nonce will be on\n    // the root node, but because the token value is used in renderers, it has to be available\n    // *very* early in the bootstrapping process. This should be a fairly shallow search, because\n    // the app won't have been added to the DOM yet. Some approaches that were considered:\n    // 1. Find the root node through `ApplicationRef.components[i].location` - normally this would\n    // be enough for our purposes, but the token is injected very early so the `components` array\n    // isn't populated yet.\n    // 2. Find the root `LView` through the current `LView` - renderers are a prerequisite to\n    // creating the `LView`. This means that no `LView` will have been entered when this factory is\n    // invoked for the root component.\n    // 3. Have the token factory return `() => string` which is invoked when a nonce is requested -\n    // the slightly later execution does allow us to get an `LView` reference, but the fact that\n    // it is a function means that it could be executed at *any* time (including immediately) which\n    // may lead to weird bugs.\n    // 4. Have the `ComponentFactory` read the attribute and provide it to the injector under the\n    // hood - has the same problem as #1 and #2 in that the renderer is used to query for the root\n    // node and the nonce value needs to be available when the renderer is created.\n    return getDocument().body?.querySelector('[ngCspNonce]')?.getAttribute('ngCspNonce') || null;\n  },\n});\n\n/**\n * A configuration object for the image-related options. Contains:\n * - breakpoints: An array of integer breakpoints used to generate\n *      srcsets for responsive images.\n * - disableImageSizeWarning: A boolean value. Setting this to true will\n *      disable console warnings about oversized images.\n * - disableImageLazyLoadWarning: A boolean value. Setting this to true will\n *      disable console warnings about LCP images configured with `loading=\"lazy\"`.\n * Learn more about the responsive image configuration in [the NgOptimizedImage\n * guide](guide/image-optimization).\n * Learn more about image warning options in [the related error page](errors/NG0913).\n * @publicApi\n */\nexport type ImageConfig = {\n  breakpoints?: number[];\n  placeholderResolution?: number;\n  disableImageSizeWarning?: boolean;\n  disableImageLazyLoadWarning?: boolean;\n};\n\nexport const IMAGE_CONFIG_DEFAULTS: ImageConfig = {\n  breakpoints: [16, 32, 48, 64, 96, 128, 256, 384, 640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  placeholderResolution: 30,\n  disableImageSizeWarning: false,\n  disableImageLazyLoadWarning: false,\n};\n\n/**\n * Injection token that configures the image optimized image functionality.\n * See {@link ImageConfig} for additional information about parameters that\n * can be used.\n *\n * @see {@link NgOptimizedImage}\n * @see {@link ImageConfig}\n * @publicApi\n */\nexport const IMAGE_CONFIG = new InjectionToken<ImageConfig>(ngDevMode ? 'ImageConfig' : '', {\n  providedIn: 'root',\n  factory: () => IMAGE_CONFIG_DEFAULTS,\n});\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport type {DeferBlockTrigger} from '../defer/interfaces';\nimport type {I18nICUNode} from '../render3/interfaces/i18n';\nimport {RNode} from '../render3/interfaces/renderer_dom';\n\n/** Encodes that the node lookup should start from the host node of this component. */\nexport const REFERENCE_NODE_HOST = 'h';\n\n/** Encodes that the node lookup should start from the document body node. */\nexport const REFERENCE_NODE_BODY = 'b';\n\n/**\n * Describes navigation steps that the runtime logic need to perform,\n * starting from a given (known) element.\n * We're not using enum `NodeNavigationStep` because it produces more code overhead;\n * thus, using plain `const` eliminates extra bytes. We can't use `const enum` due\n * to single-file compilation restrictions.\n */\n\nexport type NodeNavigationStep = 'f' | 'n';\n\nexport const NODE_NAVIGATION_STEP_FIRST_CHILD = 'f';\nexport const NODE_NAVIGATION_STEP_NEXT_SIBLING = 'n';\n\n/**\n * Keys within serialized view data structure to represent various\n * parts. See the `SerializedView` interface below for additional information.\n */\nexport const ELEMENT_CONTAINERS = 'e';\nexport const TEMPLATES = 't';\nexport const CONTAINERS = 'c';\nexport const MULTIPLIER = 'x';\nexport const NUM_ROOT_NODES = 'r';\nexport const TEMPLATE_ID = 'i'; // as it's also an \"id\"\nexport const NODES = 'n';\nexport const DISCONNECTED_NODES = 'd';\nexport const I18N_DATA = 'l';\nexport const DEFER_BLOCK_ID = 'di';\nexport const DEFER_BLOCK_STATE = 's';\nexport const DEFER_PARENT_BLOCK_ID = 'p';\nexport const DEFER_HYDRATE_TRIGGERS = 't';\nexport const DEFER_PREFETCH_TRIGGERS = 'pt';\n\n/**\n * Represents element containers within this view, stored as key-value pairs\n * where key is an index of a container in an LView (also used in the\n * `elementContainerStart` instruction), the value is the number of root nodes\n * in this container. This information is needed to locate an anchor comment\n * node that goes after all container nodes.\n */\nexport interface SerializedElementContainers {\n  [key: number]: number;\n}\n\n/**\n * Serialized data structure that contains relevant hydration\n * annotation information that describes a given hydration boundary\n * (e.g. a component).\n */\nexport interface SerializedView {\n  /**\n   * Serialized information about <ng-container>s.\n   */\n  [ELEMENT_CONTAINERS]?: SerializedElementContainers;\n\n  /**\n   * Serialized information about templates.\n   * Key-value pairs where a key is an index of the corresponding\n   * `template` instruction and the value is a unique id that can\n   * be used during hydration to identify that template.\n   */\n  [TEMPLATES]?: Record<number, string>;\n\n  /**\n   * Serialized information about view containers.\n   * Key-value pairs where a key is an index of the corresponding\n   * LContainer entry within an LView, and the value is a list\n   * of serialized information about views within this container.\n   */\n  [CONTAINERS]?: Record<number, SerializedContainerView[]>;\n\n  /**\n   * Serialized information about nodes in a template.\n   * Key-value pairs where a key is an index of the corresponding\n   * DOM node in an LView and the value is a path that describes\n   * the location of this node (as a set of navigation instructions).\n   */\n  [NODES]?: Record<number, string>;\n\n  /**\n   * A list of ids which represents a set of nodes disconnected\n   * from the DOM tree at the serialization time, but otherwise\n   * present in the internal data structures.\n   *\n   * This information is used to avoid triggering the hydration\n   * logic for such nodes and instead use a regular \"creation mode\".\n   */\n  [DISCONNECTED_NODES]?: number[];\n\n  /**\n   * Serialized information about i18n blocks in a template.\n   * Key-value pairs where a key is an index of the corresponding\n   * i18n entry within an LView, and the value is a list of\n   * active ICU cases.\n   */\n  [I18N_DATA]?: Record<number, number[]>;\n\n  /**\n   * If this view represents a `@defer` block, this field contains\n   * unique id of the block.\n   */\n  [DEFER_BLOCK_ID]?: string;\n\n  /**\n   * This field represents a status, based on the `DeferBlockState` enum.\n   */\n  [DEFER_BLOCK_STATE]?: number;\n}\n\n/**\n * Serialized data structure that contains relevant hydration\n * annotation information about a view that is a part of a\n * ViewContainer collection.\n */\nexport interface SerializedContainerView extends SerializedView {\n  /**\n   * Unique id that represents a TView that was used to create\n   * a given instance of a view:\n   *  - TViewType.Embedded: a unique id generated during serialization on the server\n   *  - TViewType.Component: an id generated based on component properties\n   *                        (see `getComponentId` function for details)\n   */\n  [TEMPLATE_ID]: string;\n\n  /**\n   * Number of root nodes that belong to this view.\n   * This information is needed to effectively traverse the DOM tree\n   * and identify segments that belong to different views.\n   */\n  [NUM_ROOT_NODES]: number;\n\n  /**\n   * Number of times this view is repeated.\n   * This is used to avoid serializing and sending the same hydration\n   * information about similar views (for example, produced by *ngFor).\n   */\n  [MULTIPLIER]?: number;\n}\n\n/**\n * Serialized data structure that contains relevant defer block\n * information that describes a given incremental hydration boundary\n */\nexport interface SerializedDeferBlock {\n  /**\n   * This contains the unique id of this defer block's parent, if it exists.\n   */\n  [DEFER_PARENT_BLOCK_ID]?: string;\n\n  /**\n   * This field represents a status, based on the `DeferBlockState` enum.\n   */\n  [DEFER_BLOCK_STATE]?: number;\n\n  /**\n   * Number of root nodes that belong to this defer block's template.\n   * This information is needed to effectively traverse the DOM tree\n   * and add jsaction attributes to root nodes appropriately for\n   * incremental hydration.\n   */\n  [NUM_ROOT_NODES]: number;\n\n  /**\n   * The list of triggers that exist for incremental hydration, based on the\n   * `Trigger` enum.\n   */\n  [DEFER_HYDRATE_TRIGGERS]?: (DeferBlockTrigger | SerializedTriggerDetails)[];\n}\n\nexport interface SerializedTriggerDetails {\n  trigger: DeferBlockTrigger;\n  delay?: number;\n}\n\n/**\n * An object that contains hydration-related information serialized\n * on the server, as well as the necessary references to segments of\n * the DOM, to facilitate the hydration process for a given hydration\n * boundary on the client.\n */\nexport interface DehydratedView {\n  /**\n   * The readonly hydration annotation data.\n   */\n  data: Readonly<SerializedView>;\n\n  /**\n   * A reference to the first child in a DOM segment associated\n   * with a given hydration boundary.\n   *\n   * Once a view becomes hydrated, the value is set to `null`, which\n   * indicates that further detaching/attaching view actions should result\n   * in invoking corresponding DOM actions (attaching DOM nodes action is\n   * skipped when we hydrate, since nodes are already in the DOM).\n   */\n  firstChild: RNode | null;\n\n  /**\n   * Stores references to first nodes in DOM segments that\n   * represent either an <ng-container> or a view container.\n   */\n  segmentHeads?: {[index: number]: RNode | null};\n\n  /**\n   * An instance of a Set that represents nodes disconnected from\n   * the DOM tree at the serialization time, but otherwise present\n   * in the internal data structures.\n   *\n   * The Set is based on the `SerializedView[DISCONNECTED_NODES]` data\n   * and is needed to have constant-time lookups.\n   *\n   * If the value is `null`, it means that there were no disconnected\n   * nodes detected in this view at serialization time.\n   */\n  disconnectedNodes?: Set<number> | null;\n\n  /**\n   * A mapping from a view to the first child to begin claiming nodes.\n   *\n   * This mapping is generated by an i18n block, and is the source of\n   * truth for the nodes inside of it.\n   */\n  i18nNodes?: Map<number, RNode | null>;\n\n  /**\n   * A mapping from the index of an ICU node to dehydrated data for it.\n   *\n   * This information is used during the hydration process on the client.\n   * ICU cases that were active during server-side rendering will be added\n   * to the map. The hydration logic will \"claim\" matching cases, removing\n   * them from the map. The remaining entries are \"unclaimed\", and will be\n   * removed from the DOM during hydration cleanup.\n   */\n  dehydratedIcuData?: Map<number, DehydratedIcuData>;\n}\n\n/**\n * An object that contains hydration-related information serialized\n * on the server, as well as the necessary references to segments of\n * the DOM, to facilitate the hydration process for a given view\n * inside a view container (either an embedded view or a view created\n * for a component).\n */\nexport interface DehydratedContainerView extends DehydratedView {\n  data: Readonly<SerializedContainerView>;\n}\n\n/**\n * An object that contains information about a dehydrated ICU case,\n * to facilitate cleaning up ICU cases that were active during\n * server-side rendering, but not during hydration.\n */\nexport interface DehydratedIcuData {\n  /**\n   * The case index that this data represents.\n   */\n  case: number;\n\n  /**\n   * A reference back to the AST for the ICU node. This allows the\n   * AST to be used to clean up dehydrated nodes.\n   */\n  node: I18nICUNode;\n}\n\n/**\n * Summarizes the presence of specific types of triggers anywhere in the DOM\n */\nexport interface BlockSummary {\n  data: SerializedDeferBlock;\n  hydrate: {idle: boolean; immediate: boolean; viewport: boolean; timer: number | null};\n}\n\n/**\n * The details of a specific element's trigger and how it is associated to a block\n */\nexport interface ElementTrigger {\n  el: HTMLElement;\n  blockName: string;\n  delay?: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '../di/injection_token';\n\n/**\n * Internal token that specifies whether DOM reuse logic\n * during hydration is enabled.\n */\nexport const IS_HYDRATION_DOM_REUSE_ENABLED = new InjectionToken<boolean>(\n  typeof ngDevMode === 'undefined' || !!ngDevMode ? 'IS_HYDRATION_DOM_REUSE_ENABLED' : '',\n);\n\n// By default (in client rendering mode), we remove all the contents\n// of the host element and render an application after that.\nexport const PRESERVE_HOST_CONTENT_DEFAULT = false;\n\n/**\n * Internal token that indicates whether host element content should be\n * retained during the bootstrap.\n */\nexport const PRESERVE_HOST_CONTENT = new InjectionToken<boolean>(\n  typeof ngDevMode === 'undefined' || !!ngDevMode ? 'PRESERVE_HOST_CONTENT' : '',\n  {\n    providedIn: 'root',\n    factory: () => PRESERVE_HOST_CONTENT_DEFAULT,\n  },\n);\n\n/**\n * Internal token that indicates whether hydration support for i18n\n * is enabled.\n */\nexport const IS_I18N_HYDRATION_ENABLED = new InjectionToken<boolean>(\n  typeof ngDevMode === 'undefined' || !!ngDevMode ? 'IS_I18N_HYDRATION_ENABLED' : '',\n);\n\n/**\n * Internal token that indicates whether event replay support for SSR\n * is enabled.\n */\nexport const IS_EVENT_REPLAY_ENABLED = new InjectionToken<boolean>(\n  typeof ngDevMode === 'undefined' || !!ngDevMode ? 'IS_EVENT_REPLAY_ENABLED' : '',\n);\n\nexport const EVENT_REPLAY_ENABLED_DEFAULT = false;\n\n/**\n * Internal token that indicates whether incremental hydration support\n * is enabled.\n */\nexport const IS_INCREMENTAL_HYDRATION_ENABLED = new InjectionToken<boolean>(\n  typeof ngDevMode === 'undefined' || !!ngDevMode ? 'IS_INCREMENTAL_HYDRATION_ENABLED' : '',\n);\n\n/**\n * A map of DOM elements with `jsaction` attributes grouped by action names.\n */\nexport const JSACTION_BLOCK_ELEMENT_MAP = new InjectionToken<Map<string, Set<Element>>>(\n  ngDevMode ? 'JSACTION_BLOCK_ELEMENT_MAP' : '',\n  {\n    providedIn: 'root',\n    factory: () => new Map<string, Set<Element>>(),\n  },\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '../di/injection_token';\n\n/** Actions that are supported by the tracing framework. */\nexport enum TracingAction {\n  CHANGE_DETECTION,\n  AFTER_NEXT_RENDER,\n}\n\n/** A single tracing snapshot. */\nexport interface TracingSnapshot {\n  run<T>(action: TracingAction, fn: () => T): T;\n\n  /** Disposes of the tracing snapshot. Must be run exactly once per TracingSnapshot. */\n  dispose(): void;\n}\n\n/**\n * Injection token for a `TracingService`, optionally provided.\n */\nexport const TracingService = new InjectionToken<TracingService<TracingSnapshot>>(\n  ngDevMode ? 'TracingService' : '',\n);\n\n/**\n * Tracing mechanism which can associate causes (snapshots) with runs of\n * subsequent operations.\n *\n * Not defined by Angular directly, but defined in contexts where tracing is\n * desired.\n */\nexport interface TracingService<T extends TracingSnapshot> {\n  /**\n   * Take a snapshot of the current context which will be stored by Angular and\n   * used when additional work is performed that was scheduled in this context.\n   *\n   * @param linkedSnapshot Optional snapshot to use link to the current context.\n   * The caller is no longer responsible for calling dispose on the linkedSnapshot.\n   *\n   * @return The tracing snapshot. The caller is responsible for diposing of the\n   * snapshot.\n   */\n  snapshot(linkedSnapshot: T | null): T;\n\n  /**\n   * Wrap an event listener bound by the framework for tracing.\n   * @param element Element on which the event is bound.\n   * @param eventName Name of the event.\n   * @param handler Event handler.\n   * @return A new event handler to be bound instead of the original one.\n   */\n  wrapEventListener?<T extends Function>(element: HTMLElement, eventName: string, handler: T): T;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nconst markedFeatures = new Set<string>();\n\n// tslint:disable:ban\n/**\n * A guarded `performance.mark` for feature marking.\n *\n * This method exists because while all supported browser and node.js version supported by Angular\n * support performance.mark API. This is not the case for other environments such as JSDOM and\n * Cloudflare workers.\n */\nexport function performanceMarkFeature(feature: string): void {\n  if (markedFeatures.has(feature)) {\n    return;\n  }\n  markedFeatures.add(feature);\n  performance?.mark?.('mark_feature_usage', {detail: {feature}});\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {getActiveConsumer} from '@angular/core/primitives/signals';\n\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\n\n/**\n * Asserts that the current stack frame is not within a reactive context. Useful\n * to disallow certain code from running inside a reactive context (see {@link /api/core/rxjs/toSignal toSignal})\n *\n * @param debugFn a reference to the function making the assertion (used for the error message).\n *\n * @publicApi\n */\nexport function assertNotInReactiveContext(debugFn: Function, extraContext?: string): void {\n  // Taking a `Function` instead of a string name here prevents the un-minified name of the function\n  // from being retained in the bundle regardless of minification.\n  if (getActiveConsumer() !== null) {\n    throw new RuntimeError(\n      RuntimeErrorCode.ASSERTION_NOT_INSIDE_REACTIVE_CONTEXT,\n      ngDevMode &&\n        `${debugFn.name}() cannot be called from within a reactive context.${\n          extraContext ? ` ${extraContext}` : ''\n        }`,\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport type {TNode} from './interfaces/node';\nimport type {LView} from './interfaces/view';\nimport {getCurrentTNode, getLView} from './state';\n\nexport class ViewContext {\n  constructor(\n    readonly view: LView,\n    readonly node: TNode,\n  ) {}\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__ = injectViewContext;\n}\n\nexport function injectViewContext(): ViewContext {\n  return new ViewContext(getLView()!, getCurrentTNode()!);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * The phase to run an `afterRender` or `afterNextRender` callback in.\n *\n * Callbacks in the same phase run in the order they are registered. Phases run in the\n * following order after each render:\n *\n *   1. `AfterRenderPhase.EarlyRead`\n *   2. `AfterRenderPhase.Write`\n *   3. `AfterRenderPhase.MixedReadWrite`\n *   4. `AfterRenderPhase.Read`\n *\n * Angular is unable to verify or enforce that phases are used correctly, and instead\n * relies on each developer to follow the guidelines documented for each value and\n * carefully choose the appropriate one, refactoring their code if necessary. By doing\n * so, Angular is better able to minimize the performance degradation associated with\n * manual DOM access, ensuring the best experience for the end users of your application\n * or library.\n *\n * @deprecated Specify the phase for your callback to run in by passing a spec-object as the first\n *   parameter to `afterRender` or `afterNextRender` instead of a function.\n */\nexport enum AfterRenderPhase {\n  /**\n   * Use `AfterRenderPhase.EarlyRead` for callbacks that only need to **read** from the\n   * DOM before a subsequent `AfterRenderPhase.Write` callback, for example to perform\n   * custom layout that the browser doesn't natively support. Prefer the\n   * `AfterRenderPhase.EarlyRead` phase if reading can wait until after the write phase.\n   * **Never** write to the DOM in this phase.\n   *\n   * <div class=\"docs-alert docs-alert-important\">\n   *\n   * Using this value can degrade performance.\n   * Instead, prefer using built-in browser functionality when possible.\n   *\n   * </div>\n   */\n  EarlyRead,\n\n  /**\n   * Use `AfterRenderPhase.Write` for callbacks that only **write** to the DOM. **Never**\n   * read from the DOM in this phase.\n   */\n  Write,\n\n  /**\n   * Use `AfterRenderPhase.MixedReadWrite` for callbacks that read from or write to the\n   * DOM, that haven't been refactored to use a different phase. **Never** use this phase if\n   * it is possible to divide the work among the other phases instead.\n   *\n   * <div class=\"docs-alert docs-alert-critical\">\n   *\n   * Using this value can **significantly** degrade performance.\n   * Instead, prefer dividing work into the appropriate phase callbacks.\n   *\n   * </div>\n   */\n  MixedReadWrite,\n\n  /**\n   * Use `AfterRenderPhase.Read` for callbacks that only **read** from the DOM. **Never**\n   * write to the DOM in this phase.\n   */\n  Read,\n}\n\n/**\n * A callback that runs after render.\n *\n * @developerPreview\n */\nexport interface AfterRenderRef {\n  /**\n   * Shut down the callback, preventing it from being called again.\n   */\n  destroy(): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {TracingAction, TracingService, TracingSnapshot} from '../../application/tracing';\nimport {\n  ChangeDetectionScheduler,\n  NotificationSource,\n} from '../../change_detection/scheduling/zoneless_scheduling';\nimport {inject} from '../../di/injector_compatibility';\nimport {ɵɵdefineInjectable} from '../../di/interface/defs';\nimport {ErrorHandler} from '../../error_handler';\nimport {type DestroyRef} from '../../linker/destroy_ref';\nimport {NgZone} from '../../zone';\nimport {AFTER_RENDER_SEQUENCES_TO_ADD, FLAGS, LView, LViewFlags} from '../interfaces/view';\nimport {profiler} from '../profiler';\nimport {ProfilerEvent} from '../profiler_types';\nimport {markAncestorsForTraversal} from '../util/view_utils';\nimport {AfterRenderPhase, AfterRenderRef} from './api';\n\nexport class AfterRenderManager {\n  impl: AfterRenderImpl | null = null;\n\n  execute(): void {\n    this.impl?.execute();\n  }\n\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ ɵɵdefineInjectable({\n    token: AfterRenderManager,\n    providedIn: 'root',\n    factory: () => new AfterRenderManager(),\n  });\n}\n\nexport const AFTER_RENDER_PHASES = /* @__PURE__ **/ (() =>\n  [\n    AfterRenderPhase.EarlyRead,\n    AfterRenderPhase.Write,\n    AfterRenderPhase.MixedReadWrite,\n    AfterRenderPhase.Read,\n  ] as const)();\n\nexport class AfterRenderImpl {\n  private readonly ngZone = inject(NgZone);\n  private readonly scheduler = inject(ChangeDetectionScheduler);\n  private readonly errorHandler = inject(ErrorHandler, {optional: true});\n\n  /** Current set of active sequences. */\n  private readonly sequences = new Set<AfterRenderSequence>();\n\n  /** Tracks registrations made during the current set of executions. */\n  private readonly deferredRegistrations = new Set<AfterRenderSequence>();\n\n  /** Whether the `AfterRenderManager` is currently executing hooks. */\n  executing = false;\n\n  constructor() {\n    // Inject the tracing service to make sure it's initialized.\n    inject(TracingService, {optional: true});\n  }\n\n  /**\n   * Run the sequence of phases of hooks, once through. As a result of executing some hooks, more\n   * might be scheduled.\n   */\n  execute(): void {\n    const hasSequencesToExecute = this.sequences.size > 0;\n\n    if (hasSequencesToExecute) {\n      profiler(ProfilerEvent.AfterRenderHooksStart);\n    }\n\n    this.executing = true;\n    for (const phase of AFTER_RENDER_PHASES) {\n      for (const sequence of this.sequences) {\n        if (sequence.erroredOrDestroyed || !sequence.hooks[phase]) {\n          continue;\n        }\n\n        try {\n          sequence.pipelinedValue = this.ngZone.runOutsideAngular(() =>\n            this.maybeTrace(() => {\n              const hookFn = sequence.hooks[phase]!;\n              const value = hookFn(sequence.pipelinedValue);\n              return value;\n            }, sequence.snapshot),\n          );\n        } catch (err) {\n          sequence.erroredOrDestroyed = true;\n          this.errorHandler?.handleError(err);\n        }\n      }\n    }\n    this.executing = false;\n\n    // Cleanup step to reset sequence state and also collect one-shot sequences for removal.\n    for (const sequence of this.sequences) {\n      sequence.afterRun();\n      if (sequence.once) {\n        this.sequences.delete(sequence);\n        // Destroy the sequence so its on destroy callbacks can be cleaned up\n        // immediately, instead of waiting until the injector is destroyed.\n        sequence.destroy();\n      }\n    }\n\n    for (const sequence of this.deferredRegistrations) {\n      this.sequences.add(sequence);\n    }\n    if (this.deferredRegistrations.size > 0) {\n      this.scheduler.notify(NotificationSource.RenderHook);\n    }\n    this.deferredRegistrations.clear();\n\n    if (hasSequencesToExecute) {\n      profiler(ProfilerEvent.AfterRenderHooksEnd);\n    }\n  }\n\n  register(sequence: AfterRenderSequence): void {\n    const {view} = sequence;\n    if (view !== undefined) {\n      // Delay adding it to the manager, add it to the view instead.\n      (view[AFTER_RENDER_SEQUENCES_TO_ADD] ??= []).push(sequence);\n\n      // Mark the view for traversal to ensure we eventually schedule the afterNextRender.\n      markAncestorsForTraversal(view);\n      view[FLAGS] |= LViewFlags.HasChildViewsToRefresh;\n    } else if (!this.executing) {\n      this.addSequence(sequence);\n    } else {\n      this.deferredRegistrations.add(sequence);\n    }\n  }\n\n  addSequence(sequence: AfterRenderSequence): void {\n    this.sequences.add(sequence);\n    // Trigger an `ApplicationRef.tick()` if one is not already pending/running, because we have a\n    // new render hook that needs to run.\n    this.scheduler.notify(NotificationSource.RenderHook);\n  }\n\n  unregister(sequence: AfterRenderSequence): void {\n    if (this.executing && this.sequences.has(sequence)) {\n      // We can't remove an `AfterRenderSequence` in the middle of iteration.\n      // Instead, mark it as destroyed so it doesn't run any more, and mark it as one-shot so it'll\n      // be removed at the end of the current execution.\n      sequence.erroredOrDestroyed = true;\n      sequence.pipelinedValue = undefined;\n      sequence.once = true;\n    } else {\n      // It's safe to directly remove this sequence.\n      this.sequences.delete(sequence);\n      this.deferredRegistrations.delete(sequence);\n    }\n  }\n\n  protected maybeTrace<T>(fn: () => T, snapshot: TracingSnapshot | null): T {\n    // Only trace the execution if the snapshot is defined.\n    return snapshot ? snapshot.run(TracingAction.AFTER_NEXT_RENDER, fn) : fn();\n  }\n\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ ɵɵdefineInjectable({\n    token: AfterRenderImpl,\n    providedIn: 'root',\n    factory: () => new AfterRenderImpl(),\n  });\n}\n\nexport type AfterRenderHook = (value?: unknown) => unknown;\nexport type AfterRenderHooks = [\n  /*      EarlyRead */ AfterRenderHook | undefined,\n  /*          Write */ AfterRenderHook | undefined,\n  /* MixedReadWrite */ AfterRenderHook | undefined,\n  /*           Read */ AfterRenderHook | undefined,\n];\n\nexport class AfterRenderSequence implements AfterRenderRef {\n  /**\n   * Whether this sequence errored or was destroyed during this execution, and hooks should no\n   * longer run for it.\n   */\n  erroredOrDestroyed: boolean = false;\n\n  /**\n   * The value returned by the last hook execution (if any), ready to be pipelined into the next\n   * one.\n   */\n  pipelinedValue: unknown = undefined;\n\n  private unregisterOnDestroy: (() => void) | undefined;\n\n  constructor(\n    readonly impl: AfterRenderImpl,\n    readonly hooks: AfterRenderHooks,\n    readonly view: LView | undefined,\n    public once: boolean,\n    destroyRef: DestroyRef | null,\n    public snapshot: TracingSnapshot | null = null,\n  ) {\n    this.unregisterOnDestroy = destroyRef?.onDestroy(() => this.destroy());\n  }\n\n  afterRun(): void {\n    this.erroredOrDestroyed = false;\n    this.pipelinedValue = undefined;\n\n    // Clear the tracing snapshot after the initial run. This snapshot only\n    // associates the initial run of the hook with the context that created it.\n    // Follow-up runs are independent of that initial context and have different\n    // triggers.\n    this.snapshot?.dispose();\n    this.snapshot = null;\n  }\n\n  destroy(): void {\n    this.impl.unregister(this);\n    this.unregisterOnDestroy?.();\n    const scheduled = this.view?.[AFTER_RENDER_SEQUENCES_TO_ADD];\n    if (scheduled) {\n      this.view[AFTER_RENDER_SEQUENCES_TO_ADD] = scheduled.filter((s) => s !== this);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {TracingService} from '../../application/tracing';\nimport {assertInInjectionContext} from '../../di';\nimport {Injector} from '../../di/injector';\nimport {inject} from '../../di/injector_compatibility';\nimport {DestroyRef} from '../../linker/destroy_ref';\nimport {performanceMarkFeature} from '../../util/performance';\nimport {assertNotInReactiveContext} from '../reactivity/asserts';\nimport {ViewContext} from '../view_context';\nimport {AfterRenderPhase, AfterRenderRef} from './api';\nimport {\n  AfterRenderHooks,\n  AfterRenderImpl,\n  AfterRenderManager,\n  AfterRenderSequence,\n} from './manager';\n\n/**\n * An argument list containing the first non-never type in the given type array, or an empty\n * argument list if there are no non-never types in the type array.\n */\nexport type ɵFirstAvailable<T extends unknown[]> = T extends [infer H, ...infer R]\n  ? [H] extends [never]\n    ? ɵFirstAvailable<R>\n    : [H]\n  : [];\n\n/**\n * Options passed to `afterRender` and `afterNextRender`.\n *\n * @developerPreview\n */\nexport interface AfterRenderOptions {\n  /**\n   * The `Injector` to use during creation.\n   *\n   * If this is not provided, the current injection context will be used instead (via `inject`).\n   */\n  injector?: Injector;\n\n  /**\n   * Whether the hook should require manual cleanup.\n   *\n   * If this is `false` (the default) the hook will automatically register itself to be cleaned up\n   * with the current `DestroyRef`.\n   */\n  manualCleanup?: boolean;\n\n  /**\n   * The phase the callback should be invoked in.\n   *\n   * <div class=\"docs-alert docs-alert-critical\">\n   *\n   * Defaults to `AfterRenderPhase.MixedReadWrite`. You should choose a more specific\n   * phase instead. See `AfterRenderPhase` for more information.\n   *\n   * </div>\n   *\n   * @deprecated Specify the phase for your callback to run in by passing a spec-object as the first\n   *   parameter to `afterRender` or `afterNextRender` instead of a function.\n   */\n  phase?: AfterRenderPhase;\n}\n\n/**\n * Register callbacks to be invoked each time the application finishes rendering, during the\n * specified phases. The available phases are:\n * - `earlyRead`\n *   Use this phase to **read** from the DOM before a subsequent `write` callback, for example to\n *   perform custom layout that the browser doesn't natively support. Prefer the `read` phase if\n *   reading can wait until after the write phase. **Never** write to the DOM in this phase.\n * - `write`\n *    Use this phase to **write** to the DOM. **Never** read from the DOM in this phase.\n * - `mixedReadWrite`\n *    Use this phase to read from and write to the DOM simultaneously. **Never** use this phase if\n *    it is possible to divide the work among the other phases instead.\n * - `read`\n *    Use this phase to **read** from the DOM. **Never** write to the DOM in this phase.\n *\n * <div class=\"docs-alert docs-alert-critical\">\n *\n * You should prefer using the `read` and `write` phases over the `earlyRead` and `mixedReadWrite`\n * phases when possible, to avoid performance degradation.\n *\n * </div>\n *\n * Note that:\n * - Callbacks run in the following phase order *after each render*:\n *   1. `earlyRead`\n *   2. `write`\n *   3. `mixedReadWrite`\n *   4. `read`\n * - Callbacks in the same phase run in the order they are registered.\n * - Callbacks run on browser platforms only, they will not run on the server.\n *\n * The first phase callback to run as part of this spec will receive no parameters. Each\n * subsequent phase callback in this spec will receive the return value of the previously run\n * phase callback as a parameter. This can be used to coordinate work across multiple phases.\n *\n * Angular is unable to verify or enforce that phases are used correctly, and instead\n * relies on each developer to follow the guidelines documented for each value and\n * carefully choose the appropriate one, refactoring their code if necessary. By doing\n * so, Angular is better able to minimize the performance degradation associated with\n * manual DOM access, ensuring the best experience for the end users of your application\n * or library.\n *\n * <div class=\"docs-alert docs-alert-important\">\n *\n * Components are not guaranteed to be [hydrated](guide/hydration) before the callback runs.\n * You must use caution when directly reading or writing the DOM and layout.\n *\n * </div>\n *\n * @param spec The callback functions to register\n * @param options Options to control the behavior of the callback\n *\n * @usageNotes\n *\n * Use `afterRender` to read or write the DOM after each render.\n *\n * ### Example\n * ```angular-ts\n * @Component({\n *   selector: 'my-cmp',\n *   template: `<span #content>{{ ... }}</span>`,\n * })\n * export class MyComponent {\n *   @ViewChild('content') contentRef: ElementRef;\n *\n *   constructor() {\n *     afterRender({\n *       read: () => {\n *         console.log('content height: ' + this.contentRef.nativeElement.scrollHeight);\n *       }\n *     });\n *   }\n * }\n * ```\n *\n * @developerPreview\n */\nexport function afterRender<E = never, W = never, M = never>(\n  spec: {\n    earlyRead?: () => E;\n    write?: (...args: ɵFirstAvailable<[E]>) => W;\n    mixedReadWrite?: (...args: ɵFirstAvailable<[W, E]>) => M;\n    read?: (...args: ɵFirstAvailable<[M, W, E]>) => void;\n  },\n  options?: Omit<AfterRenderOptions, 'phase'>,\n): AfterRenderRef;\n\n/**\n * Register a callback to be invoked each time the application finishes rendering, during the\n * `mixedReadWrite` phase.\n *\n * <div class=\"docs-alert docs-alert-critical\">\n *\n * You should prefer specifying an explicit phase for the callback instead, or you risk significant\n * performance degradation.\n *\n * </div>\n *\n * Note that the callback will run\n * - in the order it was registered\n * - once per render\n * - on browser platforms only\n * - during the `mixedReadWrite` phase\n *\n * <div class=\"docs-alert docs-alert-important\">\n *\n * Components are not guaranteed to be [hydrated](guide/hydration) before the callback runs.\n * You must use caution when directly reading or writing the DOM and layout.\n *\n * </div>\n *\n * @param callback A callback function to register\n * @param options Options to control the behavior of the callback\n *\n * @usageNotes\n *\n * Use `afterRender` to read or write the DOM after each render.\n *\n * ### Example\n * ```angular-ts\n * @Component({\n *   selector: 'my-cmp',\n *   template: `<span #content>{{ ... }}</span>`,\n * })\n * export class MyComponent {\n *   @ViewChild('content') contentRef: ElementRef;\n *\n *   constructor() {\n *     afterRender({\n *       read: () => {\n *         console.log('content height: ' + this.contentRef.nativeElement.scrollHeight);\n *       }\n *     });\n *   }\n * }\n * ```\n *\n * @developerPreview\n */\nexport function afterRender(callback: VoidFunction, options?: AfterRenderOptions): AfterRenderRef;\n\nexport function afterRender(\n  callbackOrSpec:\n    | VoidFunction\n    | {\n        earlyRead?: () => unknown;\n        write?: (r?: unknown) => unknown;\n        mixedReadWrite?: (r?: unknown) => unknown;\n        read?: (r?: unknown) => void;\n      },\n  options?: AfterRenderOptions,\n): AfterRenderRef {\n  ngDevMode &&\n    assertNotInReactiveContext(\n      afterRender,\n      'Call `afterRender` outside of a reactive context. For example, schedule the render ' +\n        'callback inside the component constructor`.',\n    );\n\n  !options?.injector && assertInInjectionContext(afterRender);\n  const injector = options?.injector ?? inject(Injector);\n\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    return NOOP_AFTER_RENDER_REF;\n  }\n\n  performanceMarkFeature('NgAfterRender');\n\n  return afterRenderImpl(callbackOrSpec, injector, options, /* once */ false);\n}\n\n/**\n * Register callbacks to be invoked the next time the application finishes rendering, during the\n * specified phases. The available phases are:\n * - `earlyRead`\n *   Use this phase to **read** from the DOM before a subsequent `write` callback, for example to\n *   perform custom layout that the browser doesn't natively support. Prefer the `read` phase if\n *   reading can wait until after the write phase. **Never** write to the DOM in this phase.\n * - `write`\n *    Use this phase to **write** to the DOM. **Never** read from the DOM in this phase.\n * - `mixedReadWrite`\n *    Use this phase to read from and write to the DOM simultaneously. **Never** use this phase if\n *    it is possible to divide the work among the other phases instead.\n * - `read`\n *    Use this phase to **read** from the DOM. **Never** write to the DOM in this phase.\n *\n * <div class=\"docs-alert docs-alert-critical\">\n *\n * You should prefer using the `read` and `write` phases over the `earlyRead` and `mixedReadWrite`\n * phases when possible, to avoid performance degradation.\n *\n * </div>\n *\n * Note that:\n * - Callbacks run in the following phase order *once, after the next render*:\n *   1. `earlyRead`\n *   2. `write`\n *   3. `mixedReadWrite`\n *   4. `read`\n * - Callbacks in the same phase run in the order they are registered.\n * - Callbacks run on browser platforms only, they will not run on the server.\n *\n * The first phase callback to run as part of this spec will receive no parameters. Each\n * subsequent phase callback in this spec will receive the return value of the previously run\n * phase callback as a parameter. This can be used to coordinate work across multiple phases.\n *\n * Angular is unable to verify or enforce that phases are used correctly, and instead\n * relies on each developer to follow the guidelines documented for each value and\n * carefully choose the appropriate one, refactoring their code if necessary. By doing\n * so, Angular is better able to minimize the performance degradation associated with\n * manual DOM access, ensuring the best experience for the end users of your application\n * or library.\n *\n * <div class=\"docs-alert docs-alert-important\">\n *\n * Components are not guaranteed to be [hydrated](guide/hydration) before the callback runs.\n * You must use caution when directly reading or writing the DOM and layout.\n *\n * </div>\n *\n * @param spec The callback functions to register\n * @param options Options to control the behavior of the callback\n *\n * @usageNotes\n *\n * Use `afterNextRender` to read or write the DOM once,\n * for example to initialize a non-Angular library.\n *\n * ### Example\n * ```angular-ts\n * @Component({\n *   selector: 'my-chart-cmp',\n *   template: `<div #chart>{{ ... }}</div>`,\n * })\n * export class MyChartCmp {\n *   @ViewChild('chart') chartRef: ElementRef;\n *   chart: MyChart|null;\n *\n *   constructor() {\n *     afterNextRender({\n *       write: () => {\n *         this.chart = new MyChart(this.chartRef.nativeElement);\n *       }\n *     });\n *   }\n * }\n * ```\n *\n * @developerPreview\n */\nexport function afterNextRender<E = never, W = never, M = never>(\n  spec: {\n    earlyRead?: () => E;\n    write?: (...args: ɵFirstAvailable<[E]>) => W;\n    mixedReadWrite?: (...args: ɵFirstAvailable<[W, E]>) => M;\n    read?: (...args: ɵFirstAvailable<[M, W, E]>) => void;\n  },\n  options?: Omit<AfterRenderOptions, 'phase'>,\n): AfterRenderRef;\n\n/**\n * Register a callback to be invoked the next time the application finishes rendering, during the\n * `mixedReadWrite` phase.\n *\n * <div class=\"docs-alert docs-alert-critical\">\n *\n * You should prefer specifying an explicit phase for the callback instead, or you risk significant\n * performance degradation.\n *\n * </div>\n *\n * Note that the callback will run\n * - in the order it was registered\n * - on browser platforms only\n * - during the `mixedReadWrite` phase\n *\n * <div class=\"docs-alert docs-alert-important\">\n *\n * Components are not guaranteed to be [hydrated](guide/hydration) before the callback runs.\n * You must use caution when directly reading or writing the DOM and layout.\n *\n * </div>\n *\n * @param callback A callback function to register\n * @param options Options to control the behavior of the callback\n *\n * @usageNotes\n *\n * Use `afterNextRender` to read or write the DOM once,\n * for example to initialize a non-Angular library.\n *\n * ### Example\n * ```angular-ts\n * @Component({\n *   selector: 'my-chart-cmp',\n *   template: `<div #chart>{{ ... }}</div>`,\n * })\n * export class MyChartCmp {\n *   @ViewChild('chart') chartRef: ElementRef;\n *   chart: MyChart|null;\n *\n *   constructor() {\n *     afterNextRender({\n *       write: () => {\n *         this.chart = new MyChart(this.chartRef.nativeElement);\n *       }\n *     });\n *   }\n * }\n * ```\n *\n * @developerPreview\n */\nexport function afterNextRender(\n  callback: VoidFunction,\n  options?: AfterRenderOptions,\n): AfterRenderRef;\n\nexport function afterNextRender(\n  callbackOrSpec:\n    | VoidFunction\n    | {\n        earlyRead?: () => unknown;\n        write?: (r?: unknown) => unknown;\n        mixedReadWrite?: (r?: unknown) => unknown;\n        read?: (r?: unknown) => void;\n      },\n  options?: AfterRenderOptions,\n): AfterRenderRef {\n  !options?.injector && assertInInjectionContext(afterNextRender);\n  const injector = options?.injector ?? inject(Injector);\n\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    return NOOP_AFTER_RENDER_REF;\n  }\n\n  performanceMarkFeature('NgAfterNextRender');\n\n  return afterRenderImpl(callbackOrSpec, injector, options, /* once */ true);\n}\n\nfunction getHooks(\n  callbackOrSpec:\n    | VoidFunction\n    | {\n        earlyRead?: () => unknown;\n        write?: (r?: unknown) => unknown;\n        mixedReadWrite?: (r?: unknown) => unknown;\n        read?: (r?: unknown) => void;\n      },\n  phase: AfterRenderPhase,\n): AfterRenderHooks {\n  if (callbackOrSpec instanceof Function) {\n    const hooks: AfterRenderHooks = [undefined, undefined, undefined, undefined];\n    hooks[phase] = callbackOrSpec;\n    return hooks;\n  } else {\n    return [\n      callbackOrSpec.earlyRead,\n      callbackOrSpec.write,\n      callbackOrSpec.mixedReadWrite,\n      callbackOrSpec.read,\n    ];\n  }\n}\n\n/**\n * Shared implementation for `afterRender` and `afterNextRender`.\n */\nfunction afterRenderImpl(\n  callbackOrSpec:\n    | VoidFunction\n    | {\n        earlyRead?: () => unknown;\n        write?: (r?: unknown) => unknown;\n        mixedReadWrite?: (r?: unknown) => unknown;\n        read?: (r?: unknown) => void;\n      },\n  injector: Injector,\n  options: AfterRenderOptions | undefined,\n  once: boolean,\n): AfterRenderRef {\n  const manager = injector.get(AfterRenderManager);\n  // Lazily initialize the handler implementation, if necessary. This is so that it can be\n  // tree-shaken if `afterRender` and `afterNextRender` aren't used.\n  manager.impl ??= injector.get(AfterRenderImpl);\n\n  const tracing = injector.get(TracingService, null, {optional: true});\n\n  const hooks = options?.phase ?? AfterRenderPhase.MixedReadWrite;\n  const destroyRef = options?.manualCleanup !== true ? injector.get(DestroyRef) : null;\n  const viewContext = injector.get(ViewContext, null, {optional: true});\n  const sequence = new AfterRenderSequence(\n    manager.impl,\n    getHooks(callbackOrSpec, hooks),\n    viewContext?.view,\n    once,\n    destroyRef,\n    tracing?.snapshot(null),\n  );\n  manager.impl.register(sequence);\n  return sequence;\n}\n\n/** `AfterRenderRef` that does nothing. */\nexport const NOOP_AFTER_RENDER_REF: AfterRenderRef = {\n  destroy() {},\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport type {Provider} from '../di/interface/provider';\nimport type {LContainer} from '../render3/interfaces/container';\nimport type {DependencyType} from '../render3/interfaces/definition';\nimport type {TNode} from '../render3/interfaces/node';\nimport type {LView} from '../render3/interfaces/view';\n\n/**\n * Basic set of data structures used for identifying a defer block\n * and triggering defer blocks\n */\nexport interface DehydratedDeferBlock {\n  lView: LView;\n  tNode: TNode;\n  lContainer: LContainer;\n}\n\n/**\n * Describes the shape of a function generated by the compiler\n * to download dependencies that can be defer-loaded.\n */\nexport type DependencyResolverFn = () => Array<Promise<DependencyType>>;\n\n/**\n * Defines types of defer block triggers.\n */\nexport const enum TriggerType {\n  /**\n   * Represents regular triggers (e.g. `@defer (on idle) { ... }`).\n   */\n  Regular,\n\n  /**\n   * Represents prefetch triggers (e.g. `@defer (prefetch on idle) { ... }`).\n   */\n  Prefetch,\n\n  /**\n   * Represents hydrate triggers (e.g. `@defer (hydrate on idle) { ... }`).\n   */\n  Hydrate,\n}\n\n/**\n * Describes the state of defer block dependency loading.\n */\nexport enum DeferDependenciesLoadingState {\n  /** Initial state, dependency loading is not yet triggered */\n  NOT_STARTED,\n\n  /** Dependency loading is in progress */\n  IN_PROGRESS,\n\n  /** Dependency loading has completed successfully */\n  COMPLETE,\n\n  /** Dependency loading has failed */\n  FAILED,\n}\n\n/** Slot index where `minimum` parameter value is stored. */\nexport const MINIMUM_SLOT = 0;\n\n/** Slot index where `after` parameter value is stored. */\nexport const LOADING_AFTER_SLOT = 1;\n\n/** Configuration object for a loading block as it is stored in the component constants. */\nexport type DeferredLoadingBlockConfig = [minimumTime: number | null, afterTime: number | null];\n\n/** Configuration object for a placeholder block as it is stored in the component constants. */\nexport type DeferredPlaceholderBlockConfig = [minimumTime: number | null];\n\n/**\n * Describes the data shared across all instances of a defer block.\n */\nexport interface TDeferBlockDetails {\n  /**\n   * Index in an LView and TData arrays where a template for the primary content\n   * can be found.\n   */\n  primaryTmplIndex: number;\n\n  /**\n   * Index in an LView and TData arrays where a template for the loading block can be found.\n   */\n  loadingTmplIndex: number | null;\n\n  /**\n   * Extra configuration parameters (such as `after` and `minimum`) for the loading block.\n   */\n  loadingBlockConfig: DeferredLoadingBlockConfig | null;\n\n  /**\n   * Index in an LView and TData arrays where a template for the placeholder block can be found.\n   */\n  placeholderTmplIndex: number | null;\n\n  /**\n   * Extra configuration parameters (such as `after` and `minimum`) for the placeholder block.\n   */\n  placeholderBlockConfig: DeferredPlaceholderBlockConfig | null;\n\n  /**\n   * Index in an LView and TData arrays where a template for the error block can be found.\n   */\n  errorTmplIndex: number | null;\n\n  /**\n   * Compiler-generated function that loads all dependencies for a defer block.\n   */\n  dependencyResolverFn: DependencyResolverFn | null;\n\n  /**\n   * Keeps track of the current loading state of defer block dependencies.\n   */\n  loadingState: DeferDependenciesLoadingState;\n\n  /**\n   * Dependency loading Promise. This Promise is helpful for cases when there\n   * are multiple instances of a defer block (e.g. if it was used inside of an *ngFor),\n   * which all await the same set of dependencies.\n   */\n  loadingPromise: Promise<unknown> | null;\n\n  /**\n   * List of providers collected from all NgModules that were imported by\n   * standalone components used within this defer block.\n   */\n  providers: Provider[] | null;\n\n  /**\n   * List of hydrate triggers for a given block\n   */\n  hydrateTriggers: Map<DeferBlockTrigger, HydrateTriggerDetails | null> | null;\n\n  /**\n   * Defer block flags, which should be used for all\n   * instances of a given defer block (the flags that should be\n   * placed into the `TDeferDetails` at runtime).\n   */\n  flags: TDeferDetailsFlags;\n\n  /**\n   * Tracks debugging information about the deferred block.\n   */\n  debug: {\n    /** Text representations of the block's triggers. */\n    triggers?: Set<string>;\n  } | null;\n}\n\n/**\n * Specifies defer block flags, which should be used for all\n * instances of a given defer block (the flags that should be\n * placed into the `TDeferDetails` at runtime).\n */\nexport const enum TDeferDetailsFlags {\n  Default = 0,\n\n  /**\n   * Whether or not the defer block has hydrate triggers.\n   */\n  HasHydrateTriggers = 1 << 0,\n}\n\n/**\n * Describes the current state of this defer block instance.\n *\n * @publicApi\n */\nexport enum DeferBlockState {\n  /** The placeholder block content is rendered */\n  Placeholder = 0,\n\n  /** The loading block content is rendered */\n  Loading = 1,\n\n  /** The main content block content is rendered */\n  Complete = 2,\n\n  /** The error block content is rendered */\n  Error = 3,\n}\n\n/**\n * Represents defer trigger types.\n */\nexport const enum DeferBlockTrigger {\n  Idle,\n  Immediate,\n  Viewport,\n  Interaction,\n  Hover,\n  Timer,\n  When,\n  Never,\n}\n\n/** * Describes specified delay (in ms) in the `hydrate on timer()` trigger. */\nexport interface HydrateTimerTriggerDetails {\n  delay: number;\n}\n\n/** * Describes all possible hydration trigger details specified in a template. */\nexport type HydrateTriggerDetails = HydrateTimerTriggerDetails;\n\n/**\n * Describes the initial state of this defer block instance.\n *\n * Note: this state is internal only and *must* be represented\n * with a number lower than any value in the `DeferBlockState` enum.\n */\nexport enum DeferBlockInternalState {\n  /** Initial state. Nothing is rendered yet. */\n  Initial = -1,\n}\n\nexport const NEXT_DEFER_BLOCK_STATE = 0;\n// Note: it's *important* to keep the state in this slot, because this slot\n// is used by runtime logic to differentiate between LViews, LContainers and\n// other types (see `isLView` and `isLContainer` functions). In case of defer\n// blocks, this slot would always be a number.\nexport const DEFER_BLOCK_STATE = 1;\nexport const STATE_IS_FROZEN_UNTIL = 2;\nexport const LOADING_AFTER_CLEANUP_FN = 3;\nexport const TRIGGER_CLEANUP_FNS = 4;\nexport const PREFETCH_TRIGGER_CLEANUP_FNS = 5;\nexport const SSR_UNIQUE_ID = 6;\nexport const SSR_BLOCK_STATE = 7;\nexport const ON_COMPLETE_FNS = 8;\nexport const HYDRATE_TRIGGER_CLEANUP_FNS = 9;\n\n/**\n * Describes instance-specific defer block data.\n *\n * Note: currently there is only the `state` slot, but more slots\n * would be added later to keep track of `after` and `maximum` features\n * (which would require per-instance state).\n */\nexport interface LDeferBlockDetails extends Array<unknown> {\n  /**\n   * Currently rendered block state.\n   */\n  [DEFER_BLOCK_STATE]: DeferBlockState | DeferBlockInternalState;\n\n  /**\n   * Block state that was requested when another state was rendered.\n   */\n  [NEXT_DEFER_BLOCK_STATE]: DeferBlockState | null;\n\n  /**\n   * Timestamp indicating when the current state can be switched to\n   * the next one, in case teh current state has `minimum` parameter.\n   */\n  [STATE_IS_FROZEN_UNTIL]: number | null;\n\n  /**\n   * Contains a reference to a cleanup function which cancels a timeout\n   * when Angular waits before rendering loading state. This is used when\n   * the loading block has the `after` parameter configured.\n   */\n  [LOADING_AFTER_CLEANUP_FN]: VoidFunction | null;\n\n  /**\n   * List of cleanup functions for regular triggers.\n   */\n  [TRIGGER_CLEANUP_FNS]: VoidFunction[] | null;\n\n  /**\n   * List of cleanup functions for prefetch triggers.\n   */\n  [PREFETCH_TRIGGER_CLEANUP_FNS]: VoidFunction[] | null;\n\n  /**\n   * Unique id of this defer block assigned during SSR.\n   */\n  [SSR_UNIQUE_ID]: string | null;\n\n  /**\n   * Defer block state after SSR.\n   */\n  [SSR_BLOCK_STATE]: number | null;\n\n  /**\n   * A set of callbacks to be invoked once the main content is rendered.\n   */\n  [ON_COMPLETE_FNS]: VoidFunction[] | null;\n\n  /**\n   * List of cleanup functions for hydrate triggers.\n   */\n  [HYDRATE_TRIGGER_CLEANUP_FNS]: VoidFunction[] | null;\n}\n\n/**\n * Internal structure used for configuration of defer block behavior.\n * */\nexport interface DeferBlockConfig {\n  behavior: DeferBlockBehavior;\n}\n\n/**\n * Options for configuring defer blocks behavior.\n * @publicApi\n */\nexport enum DeferBlockBehavior {\n  /**\n   * Manual triggering mode for defer blocks. Provides control over when defer blocks render\n   * and which state they render.\n   */\n  Manual,\n\n  /**\n   * Playthrough mode for defer blocks. This mode behaves like defer blocks would in a browser.\n   * This is the default behavior in test environments.\n   */\n  Playthrough,\n}\n\n/**\n * **INTERNAL**, avoid referencing it in application code.\n *\n * Describes a helper class that allows to intercept a call to retrieve current\n * dependency loading function and replace it with a different implementation.\n * This interceptor class is needed to allow testing blocks in different states\n * by simulating loading response.\n */\nexport interface DeferBlockDependencyInterceptor {\n  /**\n   * Invoked for each defer block when dependency loading function is accessed.\n   */\n  intercept(dependencyFn: DependencyResolverFn | null): DependencyResolverFn | null;\n\n  /**\n   * Allows to configure an interceptor function.\n   */\n  setInterceptor(interceptorFn: (current: DependencyResolverFn) => DependencyResolverFn): void;\n}\n","/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  HYDRATE_TRIGGER_CLEANUP_FNS,\n  LDeferBlockDetails,\n  PREFETCH_TRIGGER_CLEANUP_FNS,\n  TRIGGER_CLEANUP_FNS,\n  TriggerType,\n} from './interfaces';\n\n/**\n * Registers a cleanup function associated with a prefetching trigger\n * or a regular trigger of a defer block.\n */\nexport function storeTriggerCleanupFn(\n  type: TriggerType,\n  lDetails: LDeferBlockDetails,\n  cleanupFn: VoidFunction,\n) {\n  const key = getCleanupFnKeyByType(type);\n  if (lDetails[key] === null) {\n    lDetails[key] = [];\n  }\n  (lDetails[key]! as VoidFunction[]).push(cleanupFn);\n}\n\n/**\n * Invokes registered cleanup functions either for prefetch or for regular triggers.\n */\nexport function invokeTriggerCleanupFns(type: TriggerType, lDetails: LDeferBlockDetails) {\n  const key = getCleanupFnKeyByType(type);\n  const cleanupFns = lDetails[key] as VoidFunction[];\n  if (cleanupFns !== null) {\n    for (const cleanupFn of cleanupFns) {\n      cleanupFn();\n    }\n    lDetails[key] = null;\n  }\n}\n\n/**\n * Invokes registered cleanup functions for prefetch, hydrate, and regular triggers.\n */\nexport function invokeAllTriggerCleanupFns(lDetails: LDeferBlockDetails) {\n  invokeTriggerCleanupFns(TriggerType.Prefetch, lDetails);\n  invokeTriggerCleanupFns(TriggerType.Regular, lDetails);\n  invokeTriggerCleanupFns(TriggerType.Hydrate, lDetails);\n}\n\nfunction getCleanupFnKeyByType(type: TriggerType): number {\n  let key = TRIGGER_CLEANUP_FNS;\n  if (type === TriggerType.Prefetch) {\n    key = PREFETCH_TRIGGER_CLEANUP_FNS;\n  } else if (type === TriggerType.Hydrate) {\n    key = HYDRATE_TRIGGER_CLEANUP_FNS;\n  }\n  return key;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertIndexInDeclRange} from '../render3/assert';\nimport {DependencyDef} from '../render3/interfaces/definition';\nimport {TContainerNode, TNode} from '../render3/interfaces/node';\nimport {HEADER_OFFSET, LView, TVIEW, TView} from '../render3/interfaces/view';\nimport {getTNode} from '../render3/util/view_utils';\nimport {assertEqual, throwError} from '../util/assert';\n\nimport {\n  DeferBlockState,\n  DeferDependenciesLoadingState,\n  LDeferBlockDetails,\n  LOADING_AFTER_SLOT,\n  MINIMUM_SLOT,\n  TDeferBlockDetails,\n} from './interfaces';\n\n/**\n * Calculates a data slot index for defer block info (either static or\n * instance-specific), given an index of a defer instruction.\n */\nexport function getDeferBlockDataIndex(deferBlockIndex: number) {\n  // Instance state is located at the *next* position\n  // after the defer block slot in an LView or TView.data.\n  return deferBlockIndex + 1;\n}\n\n/** Retrieves a defer block state from an LView, given a TNode that represents a block. */\nexport function getLDeferBlockDetails(lView: LView, tNode: TNode): LDeferBlockDetails {\n  const tView = lView[TVIEW];\n  const slotIndex = getDeferBlockDataIndex(tNode.index);\n  ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n  return lView[slotIndex];\n}\n\n/** Stores a defer block instance state in LView. */\nexport function setLDeferBlockDetails(\n  lView: LView,\n  deferBlockIndex: number,\n  lDetails: LDeferBlockDetails,\n) {\n  const tView = lView[TVIEW];\n  const slotIndex = getDeferBlockDataIndex(deferBlockIndex);\n  ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n  lView[slotIndex] = lDetails;\n}\n\n/** Retrieves static info about a defer block, given a TView and a TNode that represents a block. */\nexport function getTDeferBlockDetails(tView: TView, tNode: TNode): TDeferBlockDetails {\n  const slotIndex = getDeferBlockDataIndex(tNode.index);\n  ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n  return tView.data[slotIndex] as TDeferBlockDetails;\n}\n\n/** Stores a defer block static info in `TView.data`. */\nexport function setTDeferBlockDetails(\n  tView: TView,\n  deferBlockIndex: number,\n  deferBlockConfig: TDeferBlockDetails,\n) {\n  const slotIndex = getDeferBlockDataIndex(deferBlockIndex);\n  ngDevMode && assertIndexInDeclRange(tView, slotIndex);\n  tView.data[slotIndex] = deferBlockConfig;\n}\n\nexport function getTemplateIndexForState(\n  newState: DeferBlockState,\n  hostLView: LView,\n  tNode: TNode,\n): number | null {\n  const tView = hostLView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n\n  switch (newState) {\n    case DeferBlockState.Complete:\n      return tDetails.primaryTmplIndex;\n    case DeferBlockState.Loading:\n      return tDetails.loadingTmplIndex;\n    case DeferBlockState.Error:\n      return tDetails.errorTmplIndex;\n    case DeferBlockState.Placeholder:\n      return tDetails.placeholderTmplIndex;\n    default:\n      ngDevMode && throwError(`Unexpected defer block state: ${newState}`);\n      return null;\n  }\n}\n\n/**\n * Returns a minimum amount of time that a given state should be rendered for,\n * taking into account `minimum` parameter value. If the `minimum` value is\n * not specified - returns `null`.\n */\nexport function getMinimumDurationForState(\n  tDetails: TDeferBlockDetails,\n  currentState: DeferBlockState,\n): number | null {\n  if (currentState === DeferBlockState.Placeholder) {\n    return tDetails.placeholderBlockConfig?.[MINIMUM_SLOT] ?? null;\n  } else if (currentState === DeferBlockState.Loading) {\n    return tDetails.loadingBlockConfig?.[MINIMUM_SLOT] ?? null;\n  }\n  return null;\n}\n\n/** Retrieves the value of the `after` parameter on the @loading block. */\nexport function getLoadingBlockAfter(tDetails: TDeferBlockDetails): number | null {\n  return tDetails.loadingBlockConfig?.[LOADING_AFTER_SLOT] ?? null;\n}\n\n/**\n * Adds downloaded dependencies into a directive or a pipe registry,\n * making sure that a dependency doesn't yet exist in the registry.\n */\nexport function addDepsToRegistry<T extends DependencyDef[]>(currentDeps: T | null, newDeps: T): T {\n  if (!currentDeps || currentDeps.length === 0) {\n    return newDeps;\n  }\n\n  const currentDepSet = new Set(currentDeps);\n  for (const dep of newDeps) {\n    currentDepSet.add(dep);\n  }\n\n  // If `currentDeps` is the same length, there were no new deps and can\n  // return the original array.\n  return currentDeps.length === currentDepSet.size ? currentDeps : (Array.from(currentDepSet) as T);\n}\n\n/** Retrieves a TNode that represents main content of a defer block. */\nexport function getPrimaryBlockTNode(tView: TView, tDetails: TDeferBlockDetails): TContainerNode {\n  const adjustedIndex = tDetails.primaryTmplIndex + HEADER_OFFSET;\n  return getTNode(tView, adjustedIndex) as TContainerNode;\n}\n\n/**\n * Asserts whether all dependencies for a defer block are loaded.\n * Always run this function (in dev mode) before rendering a defer\n * block in completed state.\n */\nexport function assertDeferredDependenciesLoaded(tDetails: TDeferBlockDetails) {\n  assertEqual(\n    tDetails.loadingState,\n    DeferDependenciesLoadingState.COMPLETE,\n    'Expecting all deferred dependencies to be loaded.',\n  );\n}\n\n/**\n * Determines if a given value matches the expected structure of a defer block\n *\n * We can safely rely on the primaryTmplIndex because every defer block requires\n * that a primary template exists. All the other template options are optional.\n */\nexport function isTDeferBlockDetails(value: unknown): value is TDeferBlockDetails {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof (value as TDeferBlockDetails).primaryTmplIndex === 'number'\n  );\n}\n\n/**\n * Whether a given TNode represents a defer block.\n */\nexport function isDeferBlock(tView: TView, tNode: TNode): boolean {\n  let tDetails: TDeferBlockDetails | null = null;\n  const slotIndex = getDeferBlockDataIndex(tNode.index);\n  // Check if a slot index is in the reasonable range.\n  // Note: we do `-1` on the right border, since defer block details are stored\n  // in the `n+1` slot, see `getDeferBlockDataIndex` for more info.\n  if (HEADER_OFFSET < slotIndex && slotIndex < tView.bindingStartIndex) {\n    tDetails = getTDeferBlockDetails(tView, tNode);\n  }\n  return !!tDetails && isTDeferBlockDetails(tDetails);\n}\n\n/**\n * Tracks debugging information about a trigger.\n * @param tView TView in which the trigger is declared.\n * @param tNode TNode on which the trigger is declared.\n * @param textRepresentation Text representation of the trigger to be used for debugging purposes.\n */\nexport function trackTriggerForDebugging(tView: TView, tNode: TNode, textRepresentation: string) {\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  tDetails.debug ??= {};\n  tDetails.debug.triggers ??= new Set();\n  tDetails.debug.triggers.add(textRepresentation);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {inject} from '../di';\nimport {InjectionToken} from '../di/injection_token';\nimport {ɵɵdefineInjectable} from '../di/interface/defs';\nimport {\n  EventContractDetails,\n  JSACTION_EVENT_CONTRACT,\n  removeListenersFromBlocks,\n} from '../event_delegation_utils';\nimport {JSACTION_BLOCK_ELEMENT_MAP} from '../hydration/tokens';\nimport {DehydratedDeferBlock} from './interfaces';\n\n/**\n * An internal injection token to reference `DehydratedBlockRegistry` implementation\n * in a tree-shakable way.\n */\nexport const DEHYDRATED_BLOCK_REGISTRY = new InjectionToken<DehydratedBlockRegistry>(\n  ngDevMode ? 'DEHYDRATED_BLOCK_REGISTRY' : '',\n);\n\n/**\n * The DehydratedBlockRegistry is used for incremental hydration purposes. It keeps\n * track of the Defer Blocks that need hydration so we can effectively\n * navigate up to the top dehydrated defer block and fire appropriate cleanup\n * functions post hydration.\n */\nexport class DehydratedBlockRegistry {\n  private registry = new Map<string, DehydratedDeferBlock>();\n  private cleanupFns = new Map<string, Function[]>();\n  private jsActionMap: Map<string, Set<Element>> = inject(JSACTION_BLOCK_ELEMENT_MAP);\n  private contract: EventContractDetails = inject(JSACTION_EVENT_CONTRACT);\n\n  add(blockId: string, info: DehydratedDeferBlock) {\n    this.registry.set(blockId, info);\n    // It's possible that hydration is queued that's waiting for the\n    // resolution of a lazy loaded route. In this case, we ensure\n    // the callback function is called to continue the hydration process\n    // for the queued block set.\n    if (this.awaitingCallbacks.has(blockId)) {\n      const awaitingCallbacks = this.awaitingCallbacks.get(blockId)!;\n      for (const cb of awaitingCallbacks) {\n        cb();\n      }\n    }\n  }\n\n  get(blockId: string): DehydratedDeferBlock | null {\n    return this.registry.get(blockId) ?? null;\n  }\n\n  has(blockId: string): boolean {\n    return this.registry.has(blockId);\n  }\n\n  cleanup(hydratedBlocks: string[]) {\n    removeListenersFromBlocks(hydratedBlocks, this.jsActionMap);\n    for (let blockId of hydratedBlocks) {\n      this.registry.delete(blockId);\n      this.jsActionMap.delete(blockId);\n      this.invokeTriggerCleanupFns(blockId);\n      this.hydrating.delete(blockId);\n      this.awaitingCallbacks.delete(blockId);\n    }\n    if (this.size === 0) {\n      this.contract.instance?.cleanUp();\n    }\n  }\n\n  get size(): number {\n    return this.registry.size;\n  }\n\n  // we have to leave the lowest block Id in the registry\n  // unless that block has no children\n  addCleanupFn(blockId: string, fn: Function) {\n    let cleanupFunctions: Function[] = [];\n    if (this.cleanupFns.has(blockId)) {\n      cleanupFunctions = this.cleanupFns.get(blockId)!;\n    }\n    cleanupFunctions.push(fn);\n    this.cleanupFns.set(blockId, cleanupFunctions);\n  }\n\n  invokeTriggerCleanupFns(blockId: string) {\n    const fns = this.cleanupFns.get(blockId) ?? [];\n    for (let fn of fns) {\n      fn();\n    }\n    this.cleanupFns.delete(blockId);\n  }\n\n  // Blocks that are being hydrated.\n  hydrating = new Map<string, PromiseWithResolvers<void>>();\n\n  // Blocks that are awaiting a defer instruction finish.\n  private awaitingCallbacks = new Map<string, Function[]>();\n\n  awaitParentBlock(topmostParentBlock: string, callback: Function) {\n    const parentBlockAwaitCallbacks = this.awaitingCallbacks.get(topmostParentBlock) ?? [];\n    parentBlockAwaitCallbacks.push(callback);\n    this.awaitingCallbacks.set(topmostParentBlock, parentBlockAwaitCallbacks);\n  }\n\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ ɵɵdefineInjectable({\n    token: DehydratedBlockRegistry,\n    providedIn: null,\n    factory: () => new DehydratedBlockRegistry(),\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector} from '../di/injector';\nimport type {ViewRef} from '../linker/view_ref';\nimport {getComponent} from '../render3/util/discovery_utils';\nimport {LContainer} from '../render3/interfaces/container';\nimport {getDocument} from '../render3/interfaces/document';\nimport {RElement, RNode} from '../render3/interfaces/renderer_dom';\nimport {isRootView} from '../render3/interfaces/type_checks';\nimport {HEADER_OFFSET, LView, TVIEW, TViewType} from '../render3/interfaces/view';\nimport {makeStateKey, TransferState} from '../transfer_state';\nimport {assertDefined, assertEqual} from '../util/assert';\nimport type {HydrationContext} from './annotate';\n\nimport {\n  BlockSummary,\n  CONTAINERS,\n  DEFER_HYDRATE_TRIGGERS,\n  DEFER_PARENT_BLOCK_ID,\n  DehydratedView,\n  DISCONNECTED_NODES,\n  ELEMENT_CONTAINERS,\n  MULTIPLIER,\n  NUM_ROOT_NODES,\n  SerializedContainerView,\n  SerializedDeferBlock,\n  SerializedTriggerDetails,\n  SerializedView,\n} from './interfaces';\nimport {IS_INCREMENTAL_HYDRATION_ENABLED, JSACTION_BLOCK_ELEMENT_MAP} from './tokens';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {DeferBlockTrigger, HydrateTriggerDetails} from '../defer/interfaces';\nimport {hoverEventNames, interactionEventNames} from '../defer/dom_triggers';\nimport {DEHYDRATED_BLOCK_REGISTRY} from '../defer/registry';\nimport {sharedMapFunction} from '../event_delegation_utils';\n\n/**\n * The name of the key used in the TransferState collection,\n * where hydration information is located.\n */\nconst TRANSFER_STATE_TOKEN_ID = '__nghData__';\n\n/**\n * Lookup key used to reference DOM hydration data (ngh) in `TransferState`.\n */\nexport const NGH_DATA_KEY = makeStateKey<Array<SerializedView>>(TRANSFER_STATE_TOKEN_ID);\n\n/**\n * The name of the key used in the TransferState collection,\n * where serialized defer block information is located.\n */\nexport const TRANSFER_STATE_DEFER_BLOCKS_INFO = '__nghDeferData__';\n\n/**\n * Lookup key used to retrieve defer block datain `TransferState`.\n */\nexport const NGH_DEFER_BLOCKS_KEY = makeStateKey<{[key: string]: SerializedDeferBlock}>(\n  TRANSFER_STATE_DEFER_BLOCKS_INFO,\n);\n\n/**\n * The name of the attribute that would be added to host component\n * nodes and contain a reference to a particular slot in transferred\n * state that contains the necessary hydration info for this component.\n */\nexport const NGH_ATTR_NAME = 'ngh';\n\n/**\n * Marker used in a comment node to ensure hydration content integrity\n */\nexport const SSR_CONTENT_INTEGRITY_MARKER = 'nghm';\n\nexport const enum TextNodeMarker {\n  /**\n   * The contents of the text comment added to nodes that would otherwise be\n   * empty when serialized by the server and passed to the client. The empty\n   * node is lost when the browser parses it otherwise. This comment node will\n   * be replaced during hydration in the client to restore the lost empty text\n   * node.\n   */\n  EmptyNode = 'ngetn',\n\n  /**\n   * The contents of the text comment added in the case of adjacent text nodes.\n   * When adjacent text nodes are serialized by the server and sent to the\n   * client, the browser loses reference to the amount of nodes and assumes\n   * just one text node. This separator is replaced during hydration to restore\n   * the proper separation and amount of text nodes that should be present.\n   */\n  Separator = 'ngtns',\n}\n\n/**\n * Reference to a function that reads `ngh` attribute value from a given RNode\n * and retrieves hydration information from the TransferState using that value\n * as an index. Returns `null` by default, when hydration is not enabled.\n *\n * @param rNode Component's host element.\n * @param injector Injector that this component has access to.\n * @param isRootView Specifies whether we trying to read hydration info for the root view.\n */\nlet _retrieveHydrationInfoImpl: typeof retrieveHydrationInfoImpl = () => null;\n\nexport function retrieveHydrationInfoImpl(\n  rNode: RElement,\n  injector: Injector,\n  isRootView = false,\n): DehydratedView | null {\n  let nghAttrValue = rNode.getAttribute(NGH_ATTR_NAME);\n  if (nghAttrValue == null) return null;\n\n  // For cases when a root component also acts as an anchor node for a ViewContainerRef\n  // (for example, when ViewContainerRef is injected in a root component), there is a need\n  // to serialize information about the component itself, as well as an LContainer that\n  // represents this ViewContainerRef. Effectively, we need to serialize 2 pieces of info:\n  // (1) hydration info for the root component itself and (2) hydration info for the\n  // ViewContainerRef instance (an LContainer). Each piece of information is included into\n  // the hydration data (in the TransferState object) separately, thus we end up with 2 ids.\n  // Since we only have 1 root element, we encode both bits of info into a single string:\n  // ids are separated by the `|` char (e.g. `10|25`, where `10` is the ngh for a component view\n  // and 25 is the `ngh` for a root view which holds LContainer).\n  const [componentViewNgh, rootViewNgh] = nghAttrValue.split('|');\n  nghAttrValue = isRootView ? rootViewNgh : componentViewNgh;\n  if (!nghAttrValue) return null;\n\n  // We've read one of the ngh ids, keep the remaining one, so that\n  // we can set it back on the DOM element.\n  const rootNgh = rootViewNgh ? `|${rootViewNgh}` : '';\n  const remainingNgh = isRootView ? componentViewNgh : rootNgh;\n\n  let data: SerializedView = {};\n  // An element might have an empty `ngh` attribute value (e.g. `<comp ngh=\"\" />`),\n  // which means that no special annotations are required. Do not attempt to read\n  // from the TransferState in this case.\n  if (nghAttrValue !== '') {\n    const transferState = injector.get(TransferState, null, {optional: true});\n    if (transferState !== null) {\n      const nghData = transferState.get(NGH_DATA_KEY, []);\n\n      // The nghAttrValue is always a number referencing an index\n      // in the hydration TransferState data.\n      data = nghData[Number(nghAttrValue)];\n\n      // If the `ngh` attribute exists and has a non-empty value,\n      // the hydration info *must* be present in the TransferState.\n      // If there is no data for some reasons, this is an error.\n      ngDevMode && assertDefined(data, 'Unable to retrieve hydration info from the TransferState.');\n    }\n  }\n  const dehydratedView: DehydratedView = {\n    data,\n    firstChild: rNode.firstChild ?? null,\n  };\n\n  if (isRootView) {\n    // If there is hydration info present for the root view, it means that there was\n    // a ViewContainerRef injected in the root component. The root component host element\n    // acted as an anchor node in this scenario. As a result, the DOM nodes that represent\n    // embedded views in this ViewContainerRef are located as siblings to the host node,\n    // i.e. `<app-root /><#VIEW1><#VIEW2>...<!--container-->`. In this case, the current\n    // node becomes the first child of this root view and the next sibling is the first\n    // element in the DOM segment.\n    dehydratedView.firstChild = rNode;\n\n    // We use `0` here, since this is the slot (right after the HEADER_OFFSET)\n    // where a component LView or an LContainer is located in a root LView.\n    setSegmentHead(dehydratedView, 0, rNode.nextSibling);\n  }\n\n  if (remainingNgh) {\n    // If we have only used one of the ngh ids, store the remaining one\n    // back on this RNode.\n    rNode.setAttribute(NGH_ATTR_NAME, remainingNgh);\n  } else {\n    // The `ngh` attribute is cleared from the DOM node now\n    // that the data has been retrieved for all indices.\n    rNode.removeAttribute(NGH_ATTR_NAME);\n  }\n\n  // Note: don't check whether this node was claimed for hydration,\n  // because this node might've been previously claimed while processing\n  // template instructions.\n  ngDevMode && markRNodeAsClaimedByHydration(rNode, /* checkIfAlreadyClaimed */ false);\n  ngDevMode && ngDevMode.hydratedComponents++;\n\n  return dehydratedView;\n}\n\n/**\n * Sets the implementation for the `retrieveHydrationInfo` function.\n */\nexport function enableRetrieveHydrationInfoImpl() {\n  _retrieveHydrationInfoImpl = retrieveHydrationInfoImpl;\n}\n\n/**\n * Retrieves hydration info by reading the value from the `ngh` attribute\n * and accessing a corresponding slot in TransferState storage.\n */\nexport function retrieveHydrationInfo(\n  rNode: RElement,\n  injector: Injector,\n  isRootView = false,\n): DehydratedView | null {\n  return _retrieveHydrationInfoImpl(rNode, injector, isRootView);\n}\n\n/**\n * Retrieves the necessary object from a given ViewRef to serialize:\n *  - an LView for component views\n *  - an LContainer for cases when component acts as a ViewContainerRef anchor\n *  - `null` in case of an embedded view\n */\nexport function getLNodeForHydration(viewRef: ViewRef): LView | LContainer | null {\n  // Reading an internal field from `ViewRef` instance.\n  let lView = (viewRef as any)._lView as LView;\n  const tView = lView[TVIEW];\n  // A registered ViewRef might represent an instance of an\n  // embedded view, in which case we do not need to annotate it.\n  if (tView.type === TViewType.Embedded) {\n    return null;\n  }\n  // Check if it's a root view and if so, retrieve component's\n  // LView from the first slot after the header.\n  if (isRootView(lView)) {\n    lView = lView[HEADER_OFFSET];\n  }\n\n  return lView;\n}\n\nfunction getTextNodeContent(node: Node): string | undefined {\n  return node.textContent?.replace(/\\s/gm, '');\n}\n\n/**\n * Restores text nodes and separators into the DOM that were lost during SSR\n * serialization. The hydration process replaces empty text nodes and text\n * nodes that are immediately adjacent to other text nodes with comment nodes\n * that this method filters on to restore those missing nodes that the\n * hydration process is expecting to be present.\n *\n * @param node The app's root HTML Element\n */\nexport function processTextNodeMarkersBeforeHydration(node: HTMLElement) {\n  const doc = getDocument();\n  const commentNodesIterator = doc.createNodeIterator(node, NodeFilter.SHOW_COMMENT, {\n    acceptNode(node) {\n      const content = getTextNodeContent(node);\n      const isTextNodeMarker =\n        content === TextNodeMarker.EmptyNode || content === TextNodeMarker.Separator;\n      return isTextNodeMarker ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;\n    },\n  });\n  let currentNode: Comment;\n  // We cannot modify the DOM while using the commentIterator,\n  // because it throws off the iterator state.\n  // So we collect all marker nodes first and then follow up with\n  // applying the changes to the DOM: either inserting an empty node\n  // or just removing the marker if it was used as a separator.\n  const nodes = [];\n  while ((currentNode = commentNodesIterator.nextNode() as Comment)) {\n    nodes.push(currentNode);\n  }\n  for (const node of nodes) {\n    if (node.textContent === TextNodeMarker.EmptyNode) {\n      node.replaceWith(doc.createTextNode(''));\n    } else {\n      node.remove();\n    }\n  }\n}\n\n/**\n * Internal type that represents a claimed node.\n * Only used in dev mode.\n */\nexport enum HydrationStatus {\n  Hydrated = 'hydrated',\n  Skipped = 'skipped',\n  Mismatched = 'mismatched',\n}\n\nexport type HydrationInfo =\n  | {\n      status: HydrationStatus.Hydrated | HydrationStatus.Skipped;\n    }\n  | {\n      status: HydrationStatus.Mismatched;\n      actualNodeDetails: string | null;\n      expectedNodeDetails: string | null;\n    };\n\nconst HYDRATION_INFO_KEY = '__ngDebugHydrationInfo__';\n\nexport type HydratedNode = {\n  [HYDRATION_INFO_KEY]?: HydrationInfo;\n};\n\nfunction patchHydrationInfo(node: RNode, info: HydrationInfo) {\n  (node as HydratedNode)[HYDRATION_INFO_KEY] = info;\n}\n\nexport function readHydrationInfo(node: RNode): HydrationInfo | null {\n  return (node as HydratedNode)[HYDRATION_INFO_KEY] ?? null;\n}\n\n/**\n * Marks a node as \"claimed\" by hydration process.\n * This is needed to make assessments in tests whether\n * the hydration process handled all nodes.\n */\nexport function markRNodeAsClaimedByHydration(node: RNode, checkIfAlreadyClaimed = true) {\n  if (!ngDevMode) {\n    throw new Error(\n      'Calling `markRNodeAsClaimedByHydration` in prod mode ' +\n        'is not supported and likely a mistake.',\n    );\n  }\n  if (checkIfAlreadyClaimed && isRNodeClaimedForHydration(node)) {\n    throw new Error('Trying to claim a node, which was claimed already.');\n  }\n  patchHydrationInfo(node, {status: HydrationStatus.Hydrated});\n  ngDevMode.hydratedNodes++;\n}\n\nexport function markRNodeAsSkippedByHydration(node: RNode) {\n  if (!ngDevMode) {\n    throw new Error(\n      'Calling `markRNodeAsSkippedByHydration` in prod mode ' +\n        'is not supported and likely a mistake.',\n    );\n  }\n  patchHydrationInfo(node, {status: HydrationStatus.Skipped});\n  ngDevMode.componentsSkippedHydration++;\n}\n\nexport function countBlocksSkippedByHydration(injector: Injector) {\n  const transferState = injector.get(TransferState);\n  const nghDeferData = transferState.get(NGH_DEFER_BLOCKS_KEY, {});\n  if (ngDevMode) {\n    ngDevMode.deferBlocksWithIncrementalHydration = Object.keys(nghDeferData).length;\n  }\n}\n\nexport function markRNodeAsHavingHydrationMismatch(\n  node: RNode,\n  expectedNodeDetails: string | null = null,\n  actualNodeDetails: string | null = null,\n) {\n  if (!ngDevMode) {\n    throw new Error(\n      'Calling `markRNodeAsMismatchedByHydration` in prod mode ' +\n        'is not supported and likely a mistake.',\n    );\n  }\n\n  // The RNode can be a standard HTMLElement (not an Angular component or directive)\n  // The devtools component tree only displays Angular components & directives\n  // Therefore we attach the debug info to the closest component/directive\n  while (node && !getComponent(node as Element)) {\n    node = node?.parentNode as RNode;\n  }\n\n  if (node) {\n    patchHydrationInfo(node, {\n      status: HydrationStatus.Mismatched,\n      expectedNodeDetails,\n      actualNodeDetails,\n    });\n  }\n}\n\nexport function isRNodeClaimedForHydration(node: RNode): boolean {\n  return readHydrationInfo(node)?.status === HydrationStatus.Hydrated;\n}\n\nexport function setSegmentHead(\n  hydrationInfo: DehydratedView,\n  index: number,\n  node: RNode | null,\n): void {\n  hydrationInfo.segmentHeads ??= {};\n  hydrationInfo.segmentHeads[index] = node;\n}\n\nexport function getSegmentHead(hydrationInfo: DehydratedView, index: number): RNode | null {\n  return hydrationInfo.segmentHeads?.[index] ?? null;\n}\n\nexport function isIncrementalHydrationEnabled(injector: Injector): boolean {\n  return injector.get(IS_INCREMENTAL_HYDRATION_ENABLED, false, {\n    optional: true,\n  });\n}\n\n/** Throws an error if the incremental hydration is not enabled */\nexport function assertIncrementalHydrationIsConfigured(injector: Injector) {\n  if (!isIncrementalHydrationEnabled(injector)) {\n    throw new RuntimeError(\n      RuntimeErrorCode.MISCONFIGURED_INCREMENTAL_HYDRATION,\n      'Angular has detected that some `@defer` blocks use `hydrate` triggers, ' +\n        'but incremental hydration was not enabled. Please ensure that the `withIncrementalHydration()` ' +\n        'call is added as an argument for the `provideClientHydration()` function call ' +\n        'in your application config.',\n    );\n  }\n}\n\n/** Throws an error if the ssrUniqueId on the LDeferBlockDetails is not present  */\nexport function assertSsrIdDefined(ssrUniqueId: unknown) {\n  assertDefined(\n    ssrUniqueId,\n    'Internal error: expecting an SSR id for a defer block that should be hydrated, but the id is not present',\n  );\n}\n\n/**\n * Returns the size of an <ng-container>, using either the information\n * serialized in `ELEMENT_CONTAINERS` (element container size) or by\n * computing the sum of root nodes in all dehydrated views in a given\n * container (in case this `<ng-container>` was also used as a view\n * container host node, e.g. <ng-container *ngIf>).\n */\nexport function getNgContainerSize(hydrationInfo: DehydratedView, index: number): number | null {\n  const data = hydrationInfo.data;\n  let size = data[ELEMENT_CONTAINERS]?.[index] ?? null;\n  // If there is no serialized information available in the `ELEMENT_CONTAINERS` slot,\n  // check if we have info about view containers at this location (e.g.\n  // `<ng-container *ngIf>`) and use container size as a number of root nodes in this\n  // element container.\n  if (size === null && data[CONTAINERS]?.[index]) {\n    size = calcSerializedContainerSize(hydrationInfo, index);\n  }\n  return size;\n}\n\nexport function isSerializedElementContainer(\n  hydrationInfo: DehydratedView,\n  index: number,\n): boolean {\n  return hydrationInfo.data[ELEMENT_CONTAINERS]?.[index] !== undefined;\n}\n\nexport function getSerializedContainerViews(\n  hydrationInfo: DehydratedView,\n  index: number,\n): SerializedContainerView[] | null {\n  return hydrationInfo.data[CONTAINERS]?.[index] ?? null;\n}\n\n/**\n * Computes the size of a serialized container (the number of root nodes)\n * by calculating the sum of root nodes in all dehydrated views in this container.\n */\nexport function calcSerializedContainerSize(hydrationInfo: DehydratedView, index: number): number {\n  const views = getSerializedContainerViews(hydrationInfo, index) ?? [];\n  let numNodes = 0;\n  for (let view of views) {\n    numNodes += view[NUM_ROOT_NODES] * (view[MULTIPLIER] ?? 1);\n  }\n  return numNodes;\n}\n\n/**\n * Attempt to initialize the `disconnectedNodes` field of the given\n * `DehydratedView`. Returns the initialized value.\n */\nexport function initDisconnectedNodes(hydrationInfo: DehydratedView): Set<number> | null {\n  // Check if we are processing disconnected info for the first time.\n  if (typeof hydrationInfo.disconnectedNodes === 'undefined') {\n    const nodeIds = hydrationInfo.data[DISCONNECTED_NODES];\n    hydrationInfo.disconnectedNodes = nodeIds ? new Set(nodeIds) : null;\n  }\n  return hydrationInfo.disconnectedNodes;\n}\n\n/**\n * Checks whether a node is annotated as \"disconnected\", i.e. not present\n * in the DOM at serialization time. We should not attempt hydration for\n * such nodes and instead, use a regular \"creation mode\".\n */\nexport function isDisconnectedNode(hydrationInfo: DehydratedView, index: number): boolean {\n  // Check if we are processing disconnected info for the first time.\n  if (typeof hydrationInfo.disconnectedNodes === 'undefined') {\n    const nodeIds = hydrationInfo.data[DISCONNECTED_NODES];\n    hydrationInfo.disconnectedNodes = nodeIds ? new Set(nodeIds) : null;\n  }\n  return !!initDisconnectedNodes(hydrationInfo)?.has(index);\n}\n\n/**\n * Helper function to prepare text nodes for serialization by ensuring\n * that seperate logical text blocks in the DOM remain separate after\n * serialization.\n */\nexport function processTextNodeBeforeSerialization(context: HydrationContext, node: RNode) {\n  // Handle cases where text nodes can be lost after DOM serialization:\n  //  1. When there is an *empty text node* in DOM: in this case, this\n  //     node would not make it into the serialized string and as a result,\n  //     this node wouldn't be created in a browser. This would result in\n  //     a mismatch during the hydration, where the runtime logic would expect\n  //     a text node to be present in live DOM, but no text node would exist.\n  //     Example: `<span>{{ name }}</span>` when the `name` is an empty string.\n  //     This would result in `<span></span>` string after serialization and\n  //     in a browser only the `span` element would be created. To resolve that,\n  //     an extra comment node is appended in place of an empty text node and\n  //     that special comment node is replaced with an empty text node *before*\n  //     hydration.\n  //  2. When there are 2 consecutive text nodes present in the DOM.\n  //     Example: `<div>Hello <ng-container *ngIf=\"true\">world</ng-container></div>`.\n  //     In this scenario, the live DOM would look like this:\n  //       <div>#text('Hello ') #text('world') #comment('container')</div>\n  //     Serialized string would look like this: `<div>Hello world<!--container--></div>`.\n  //     The live DOM in a browser after that would be:\n  //       <div>#text('Hello world') #comment('container')</div>\n  //     Notice how 2 text nodes are now \"merged\" into one. This would cause hydration\n  //     logic to fail, since it'd expect 2 text nodes being present, not one.\n  //     To fix this, we insert a special comment node in between those text nodes, so\n  //     serialized representation is: `<div>Hello <!--ngtns-->world<!--container--></div>`.\n  //     This forces browser to create 2 text nodes separated by a comment node.\n  //     Before running a hydration process, this special comment node is removed, so the\n  //     live DOM has exactly the same state as it was before serialization.\n\n  // Collect this node as required special annotation only when its\n  // contents is empty. Otherwise, such text node would be present on\n  // the client after server-side rendering and no special handling needed.\n  const el = node as HTMLElement;\n  const corruptedTextNodes = context.corruptedTextNodes;\n  if (el.textContent === '') {\n    corruptedTextNodes.set(el, TextNodeMarker.EmptyNode);\n  } else if (el.nextSibling?.nodeType === Node.TEXT_NODE) {\n    corruptedTextNodes.set(el, TextNodeMarker.Separator);\n  }\n}\n\nexport function convertHydrateTriggersToJsAction(\n  triggers: Map<DeferBlockTrigger, HydrateTriggerDetails | null> | null,\n): string[] {\n  let actionList: string[] = [];\n  if (triggers !== null) {\n    if (triggers.has(DeferBlockTrigger.Hover)) {\n      actionList.push(...hoverEventNames);\n    }\n    if (triggers.has(DeferBlockTrigger.Interaction)) {\n      actionList.push(...interactionEventNames);\n    }\n  }\n  return actionList;\n}\n\n/**\n * Builds a queue of blocks that need to be hydrated, looking up the\n * tree to the topmost defer block that exists in the tree that hasn't\n * been hydrated, but exists in the registry. This queue is in top down\n * hierarchical order as a list of defer block ids.\n * Note: This is utilizing serialized information to navigate up the tree\n */\nexport function getParentBlockHydrationQueue(\n  deferBlockId: string,\n  injector: Injector,\n): {parentBlockPromise: Promise<void> | null; hydrationQueue: string[]} {\n  const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n  const transferState = injector.get(TransferState);\n  const deferBlockParents = transferState.get(NGH_DEFER_BLOCKS_KEY, {});\n\n  let isTopMostDeferBlock = false;\n  let currentBlockId: string | undefined = deferBlockId;\n  let parentBlockPromise: Promise<void> | null = null;\n  const hydrationQueue: string[] = [];\n\n  while (!isTopMostDeferBlock && currentBlockId) {\n    ngDevMode &&\n      assertEqual(\n        hydrationQueue.indexOf(currentBlockId),\n        -1,\n        'Internal error: defer block hierarchy has a cycle.',\n      );\n\n    isTopMostDeferBlock = dehydratedBlockRegistry.has(currentBlockId);\n    const hydratingParentBlock = dehydratedBlockRegistry.hydrating.get(currentBlockId);\n    if (parentBlockPromise === null && hydratingParentBlock != null) {\n      parentBlockPromise = hydratingParentBlock.promise;\n      break;\n    }\n    hydrationQueue.unshift(currentBlockId);\n    currentBlockId = deferBlockParents[currentBlockId][DEFER_PARENT_BLOCK_ID];\n  }\n  return {parentBlockPromise, hydrationQueue};\n}\n\nfunction gatherDeferBlocksByJSActionAttribute(doc: Document): Set<HTMLElement> {\n  const jsactionNodes = doc.body.querySelectorAll('[jsaction]');\n  const blockMap = new Set<HTMLElement>();\n  for (let node of jsactionNodes) {\n    const attr = node.getAttribute('jsaction');\n    const blockId = node.getAttribute('ngb');\n    const eventTypes = [...hoverEventNames.join(':;'), ...interactionEventNames.join(':;')].join(\n      '|',\n    );\n    if (attr?.match(eventTypes) && blockId !== null) {\n      blockMap.add(node as HTMLElement);\n    }\n  }\n  return blockMap;\n}\n\nexport function appendDeferBlocksToJSActionMap(doc: Document, injector: Injector) {\n  const blockMap = gatherDeferBlocksByJSActionAttribute(doc);\n  for (let rNode of blockMap) {\n    const jsActionMap = injector.get(JSACTION_BLOCK_ELEMENT_MAP);\n    sharedMapFunction(rNode, jsActionMap);\n  }\n}\n\n/**\n * Retrieves defer block hydration information from the TransferState.\n *\n * @param injector Injector that this component has access to.\n */\nlet _retrieveDeferBlockDataImpl: typeof retrieveDeferBlockDataImpl = () => {\n  return {};\n};\n\nexport function retrieveDeferBlockDataImpl(injector: Injector): {\n  [key: string]: SerializedDeferBlock;\n} {\n  const transferState = injector.get(TransferState, null, {optional: true});\n  if (transferState !== null) {\n    const nghDeferData = transferState.get(NGH_DEFER_BLOCKS_KEY, {});\n\n    ngDevMode &&\n      assertDefined(nghDeferData, 'Unable to retrieve defer block info from the TransferState.');\n    return nghDeferData;\n  }\n\n  return {};\n}\n\n/**\n * Sets the implementation for the `retrieveDeferBlockData` function.\n */\nexport function enableRetrieveDeferBlockDataImpl() {\n  _retrieveDeferBlockDataImpl = retrieveDeferBlockDataImpl;\n}\n\n/**\n * Retrieves defer block data from TransferState storage\n */\nexport function retrieveDeferBlockData(injector: Injector): {[key: string]: SerializedDeferBlock} {\n  return _retrieveDeferBlockDataImpl(injector);\n}\n\nfunction isTimerTrigger(triggerInfo: DeferBlockTrigger | SerializedTriggerDetails): boolean {\n  return typeof triggerInfo === 'object' && triggerInfo.trigger === DeferBlockTrigger.Timer;\n}\n\nfunction getHydrateTimerTrigger(blockData: SerializedDeferBlock): number | null {\n  const trigger = blockData[DEFER_HYDRATE_TRIGGERS]?.find((t) => isTimerTrigger(t));\n  return (trigger as SerializedTriggerDetails)?.delay ?? null;\n}\n\nfunction hasHydrateTrigger(blockData: SerializedDeferBlock, trigger: DeferBlockTrigger): boolean {\n  return blockData[DEFER_HYDRATE_TRIGGERS]?.includes(trigger) ?? false;\n}\n\n/**\n * Creates a summary of the given serialized defer block, which is used later to properly initialize\n * specific triggers.\n */\nfunction createBlockSummary(blockInfo: SerializedDeferBlock): BlockSummary {\n  return {\n    data: blockInfo,\n    hydrate: {\n      idle: hasHydrateTrigger(blockInfo, DeferBlockTrigger.Idle),\n      immediate: hasHydrateTrigger(blockInfo, DeferBlockTrigger.Immediate),\n      timer: getHydrateTimerTrigger(blockInfo),\n      viewport: hasHydrateTrigger(blockInfo, DeferBlockTrigger.Viewport),\n    },\n  };\n}\n\n/**\n * Processes all of the defer block data in the transfer state and creates a map of the summaries\n */\nexport function processBlockData(injector: Injector): Map<string, BlockSummary> {\n  const blockData = retrieveDeferBlockData(injector);\n  let blockDetails = new Map<string, BlockSummary>();\n  for (let blockId in blockData) {\n    blockDetails.set(blockId, createBlockSummary(blockData[blockId]));\n  }\n  return blockDetails;\n}\n\nfunction isSsrContentsIntegrity(node: ChildNode | null): boolean {\n  return (\n    !!node &&\n    node.nodeType === Node.COMMENT_NODE &&\n    node.textContent?.trim() === SSR_CONTENT_INTEGRITY_MARKER\n  );\n}\n\nfunction skipTextNodes(node: ChildNode | null): ChildNode | null {\n  // Ignore whitespace. Before the <body>, we shouldn't find text nodes that aren't whitespace.\n  while (node && node.nodeType === Node.TEXT_NODE) {\n    node = node.previousSibling;\n  }\n  return node;\n}\n\n/**\n * Verifies whether the DOM contains a special marker added during SSR time to make sure\n * there is no SSR'ed contents transformations happen after SSR is completed. Typically that\n * happens either by CDN or during the build process as an optimization to remove comment nodes.\n * Hydration process requires comment nodes produced by Angular to locate correct DOM segments.\n * When this special marker is *not* present - throw an error and do not proceed with hydration,\n * since it will not be able to function correctly.\n *\n * Note: this function is invoked only on the client, so it's safe to use DOM APIs.\n */\nexport function verifySsrContentsIntegrity(doc: Document): void {\n  for (const node of doc.body.childNodes) {\n    if (isSsrContentsIntegrity(node)) {\n      return;\n    }\n  }\n\n  // Check if the HTML parser may have moved the marker to just before the <body> tag,\n  // e.g. because the body tag was implicit and not present in the markup. An implicit body\n  // tag is unlikely to interfer with whitespace/comments inside of the app's root element.\n\n  // Case 1: Implicit body. Example:\n  //   <!doctype html><head><title>Hi</title></head><!--nghm--><app-root></app-root>\n  const beforeBody = skipTextNodes(doc.body.previousSibling);\n  if (isSsrContentsIntegrity(beforeBody)) {\n    return;\n  }\n\n  // Case 2: Implicit body & head. Example:\n  //   <!doctype html><head><title>Hi</title><!--nghm--><app-root></app-root>\n  let endOfHead = skipTextNodes(doc.head.lastChild);\n  if (isSsrContentsIntegrity(endOfHead)) {\n    return;\n  }\n\n  throw new RuntimeError(\n    RuntimeErrorCode.MISSING_SSR_CONTENT_INTEGRITY_MARKER,\n    typeof ngDevMode !== 'undefined' &&\n      ngDevMode &&\n      'Angular hydration logic detected that HTML content of this page was modified after it ' +\n        'was produced during server side rendering. Make sure that there are no optimizations ' +\n        'that remove comment nodes from HTML enabled on your CDN. Angular hydration ' +\n        'relies on HTML produced by the server, including whitespaces and comment nodes.',\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {setActiveConsumer} from '@angular/core/primitives/signals';\nimport {LView, TView} from '../interfaces/view';\nimport {DirectiveDef, RenderFlags, ViewQueriesFunction} from '../interfaces/definition';\nimport {assertDefined} from '../../util/assert';\nimport {setCurrentQueryIndex} from '../state';\nimport {TNode} from '../interfaces/node';\nimport {isContentQueryHost} from '../interfaces/type_checks';\n\n/** Refreshes all content queries declared by directives in a given view */\nexport function refreshContentQueries(tView: TView, lView: LView): void {\n  const contentQueries = tView.contentQueries;\n  if (contentQueries !== null) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      for (let i = 0; i < contentQueries.length; i += 2) {\n        const queryStartIdx = contentQueries[i];\n        const directiveDefIdx = contentQueries[i + 1];\n        if (directiveDefIdx !== -1) {\n          const directiveDef = tView.data[directiveDefIdx] as DirectiveDef<any>;\n          ngDevMode && assertDefined(directiveDef, 'DirectiveDef not found.');\n          ngDevMode &&\n            assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n          setCurrentQueryIndex(queryStartIdx);\n          directiveDef.contentQueries!(RenderFlags.Update, lView[directiveDefIdx], directiveDefIdx);\n        }\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\n\nexport function executeViewQueryFn<T>(\n  flags: RenderFlags,\n  viewQueryFn: ViewQueriesFunction<T>,\n  component: T,\n): void {\n  ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');\n  setCurrentQueryIndex(0);\n  const prevConsumer = setActiveConsumer(null);\n  try {\n    viewQueryFn(flags, component);\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\n\nexport function executeContentQueries(tView: TView, tNode: TNode, lView: LView) {\n  if (isContentQueryHost(tNode)) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      const start = tNode.directiveStart;\n      const end = tNode.directiveEnd;\n      for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n        const def = tView.data[directiveIndex] as DirectiveDef<any>;\n        if (def.contentQueries) {\n          const directiveInstance = lView[directiveIndex];\n          ngDevMode &&\n            assertDefined(\n              directiveIndex,\n              'Incorrect reference to a directive defining a content query',\n            );\n          def.contentQueries(RenderFlags.Create, directiveInstance, directiveIndex);\n        }\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Defines the CSS styles encapsulation policies for the {@link /api/core/Component Component} decorator's\n * `encapsulation` option.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\nexport enum ViewEncapsulation {\n  // TODO: consider making `ViewEncapsulation` a `const enum` instead. See\n  // https://github.com/angular/angular/issues/44119 for additional information.\n\n  /**\n   * Emulates a native Shadow DOM encapsulation behavior by adding a specific attribute to the\n   * component's host element and applying the same attribute to all the CSS selectors provided\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls}.\n   *\n   * This is the default option.\n   */\n  Emulated = 0,\n\n  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n\n  /**\n   * Doesn't provide any sort of CSS style encapsulation, meaning that all the styles provided\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls} are applicable\n   * to any HTML element of the application regardless of their host Component.\n   */\n  None = 2,\n\n  /**\n   * Uses the browser's native Shadow DOM API to encapsulate CSS styles, meaning that it creates\n   * a ShadowRoot for the component's host element which is then used to encapsulate\n   * all the Component's styling.\n   */\n  ShadowDom = 3,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular. It lazily constructs the Trusted Types policy, providing helper\n * utilities for promoting strings to Trusted Types. When Trusted Types are not\n * available, strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n\nimport {global} from '../global';\n\nimport {\n  TrustedHTML,\n  TrustedScript,\n  TrustedScriptURL,\n  TrustedTypePolicy,\n  TrustedTypePolicyFactory,\n} from './trusted_type_defs';\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy: TrustedTypePolicy | null | undefined;\n\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy(): TrustedTypePolicy | null {\n  if (policy === undefined) {\n    policy = null;\n    if (global.trustedTypes) {\n      try {\n        policy = (global.trustedTypes as TrustedTypePolicyFactory).createPolicy('angular', {\n          createHTML: (s: string) => s,\n          createScript: (s: string) => s,\n          createScriptURL: (s: string) => s,\n        });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy;\n}\n\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nexport function trustedHTMLFromString(html: string): TrustedHTML | string {\n  return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security In particular, it must be assured that the provided string will\n * never cause an XSS vulnerability if used in a context that will be\n * interpreted and executed as a script by a browser, e.g. when calling eval.\n */\nexport function trustedScriptFromString(script: string): TrustedScript | string {\n  return getPolicy()?.createScript(script) || script;\n}\n\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will cause a browser to load and execute a resource, e.g. when\n * assigning to script.src.\n */\nexport function trustedScriptURLFromString(url: string): TrustedScriptURL | string {\n  return getPolicy()?.createScriptURL(url) || url;\n}\n\n/**\n * Unsafely call the Function constructor with the given string arguments. It\n * is only available in development mode, and should be stripped out of\n * production code.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only called from development code, as use in production code can lead to\n * XSS vulnerabilities.\n */\nexport function newTrustedFunctionForDev(...args: string[]): Function {\n  if (typeof ngDevMode === 'undefined') {\n    throw new Error('newTrustedFunctionForDev should never be called in production');\n  }\n  if (!global.trustedTypes) {\n    // In environments that don't support Trusted Types, fall back to the most\n    // straightforward implementation:\n    return new Function(...args);\n  }\n\n  // Chrome currently does not support passing TrustedScript to the Function\n  // constructor. The following implements the workaround proposed on the page\n  // below, where the Chromium bug is also referenced:\n  // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n  const fnArgs = args.slice(0, -1).join(',');\n  const fnBody = args[args.length - 1];\n  const body = `(function anonymous(${fnArgs}\n) { ${fnBody}\n})`;\n\n  // Using eval directly confuses the compiler and prevents this module from\n  // being stripped out of JS binaries even if not used. The global['eval']\n  // indirection fixes that.\n  const fn = global['eval'](trustedScriptFromString(body)) as Function;\n  if (fn.bind === undefined) {\n    // Workaround for a browser bug that only exists in Chrome 83, where passing\n    // a TrustedScript to eval just returns the TrustedScript back without\n    // evaluating it. In that case, fall back to the most straightforward\n    // implementation:\n    return new Function(...args);\n  }\n\n  // To completely mimic the behavior of calling \"new Function\", two more\n  // things need to happen:\n  // 1. Stringifying the resulting function should return its source code\n  fn.toString = () => body;\n  // 2. When calling the resulting function, `this` should refer to `global`\n  return fn.bind(global);\n\n  // When Trusted Types support in Function constructors is widely available,\n  // the implementation of this function can be simplified to:\n  // return new Function(...args.map(a => trustedScriptFromString(a)));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular specifically for bypassSecurityTrust* and custom sanitizers. It\n * lazily constructs the Trusted Types policy, providing helper utilities for\n * promoting strings to Trusted Types. When Trusted Types are not available,\n * strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n\nimport {global} from '../global';\nimport {\n  TrustedHTML,\n  TrustedScript,\n  TrustedScriptURL,\n  TrustedTypePolicy,\n  TrustedTypePolicyFactory,\n} from './trusted_type_defs';\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy: TrustedTypePolicy | null | undefined;\n\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy(): TrustedTypePolicy | null {\n  if (policy === undefined) {\n    policy = null;\n    if (global.trustedTypes) {\n      try {\n        policy = (global.trustedTypes as TrustedTypePolicyFactory).createPolicy(\n          'angular#unsafe-bypass',\n          {\n            createHTML: (s: string) => s,\n            createScript: (s: string) => s,\n            createScriptURL: (s: string) => s,\n          },\n        );\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy;\n}\n\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nexport function trustedHTMLFromStringBypass(html: string): TrustedHTML | string {\n  return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nexport function trustedScriptFromStringBypass(script: string): TrustedScript | string {\n  return getPolicy()?.createScript(script) || script;\n}\n\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nexport function trustedScriptURLFromStringBypass(url: string): TrustedScriptURL | string {\n  return getPolicy()?.createScriptURL(url) || url;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {XSS_SECURITY_URL} from '../error_details_base_url';\n\nexport const enum BypassType {\n  Url = 'URL',\n  Html = 'HTML',\n  ResourceUrl = 'ResourceURL',\n  Script = 'Script',\n  Style = 'Style',\n}\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\nabstract class SafeValueImpl implements SafeValue {\n  constructor(public changingThisBreaksApplicationSecurity: string) {}\n\n  abstract getTypeName(): string;\n\n  toString() {\n    return (\n      `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n      ` (see ${XSS_SECURITY_URL})`\n    );\n  }\n}\n\nclass SafeHtmlImpl extends SafeValueImpl implements SafeHtml {\n  override getTypeName() {\n    return BypassType.Html;\n  }\n}\nclass SafeStyleImpl extends SafeValueImpl implements SafeStyle {\n  override getTypeName() {\n    return BypassType.Style;\n  }\n}\nclass SafeScriptImpl extends SafeValueImpl implements SafeScript {\n  override getTypeName() {\n    return BypassType.Script;\n  }\n}\nclass SafeUrlImpl extends SafeValueImpl implements SafeUrl {\n  override getTypeName() {\n    return BypassType.Url;\n  }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl implements SafeResourceUrl {\n  override getTypeName() {\n    return BypassType.ResourceUrl;\n  }\n}\n\nexport function unwrapSafeValue(value: SafeValue): string;\nexport function unwrapSafeValue<T>(value: T): T;\nexport function unwrapSafeValue<T>(value: T | SafeValue): T {\n  return value instanceof SafeValueImpl\n    ? (value.changingThisBreaksApplicationSecurity as any as T)\n    : (value as any as T);\n}\n\nexport function allowSanitizationBypassAndThrow(\n  value: any,\n  type: BypassType.Html,\n): value is SafeHtml;\nexport function allowSanitizationBypassAndThrow(\n  value: any,\n  type: BypassType.ResourceUrl,\n): value is SafeResourceUrl;\nexport function allowSanitizationBypassAndThrow(\n  value: any,\n  type: BypassType.Script,\n): value is SafeScript;\nexport function allowSanitizationBypassAndThrow(\n  value: any,\n  type: BypassType.Style,\n): value is SafeStyle;\nexport function allowSanitizationBypassAndThrow(value: any, type: BypassType.Url): value is SafeUrl;\nexport function allowSanitizationBypassAndThrow(value: any, type: BypassType): boolean;\nexport function allowSanitizationBypassAndThrow(value: any, type: BypassType): boolean {\n  const actualType = getSanitizationBypassType(value);\n  if (actualType != null && actualType !== type) {\n    // Allow ResourceURLs in URL contexts, they are strictly more trusted.\n    if (actualType === BypassType.ResourceUrl && type === BypassType.Url) return true;\n    throw new Error(`Required a safe ${type}, got a ${actualType} (see ${XSS_SECURITY_URL})`);\n  }\n  return actualType === type;\n}\n\nexport function getSanitizationBypassType(value: any): BypassType | null {\n  return (value instanceof SafeValueImpl && (value.getTypeName() as BypassType)) || null;\n}\n\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml `html` string which needs to be implicitly trusted.\n * @returns a `html` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustHtml(trustedHtml: string): SafeHtml {\n  return new SafeHtmlImpl(trustedHtml);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle `style` string which needs to be implicitly trusted.\n * @returns a `style` hich has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustStyle(trustedStyle: string): SafeStyle {\n  return new SafeStyleImpl(trustedStyle);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript `script` string which needs to be implicitly trusted.\n * @returns a `script` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustScript(trustedScript: string): SafeScript {\n  return new SafeScriptImpl(trustedScript);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl `url` string which needs to be implicitly trusted.\n * @returns a `url`  which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustUrl(trustedUrl: string): SafeUrl {\n  return new SafeUrlImpl(trustedUrl);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustResourceUrl(trustedResourceUrl: string): SafeResourceUrl {\n  return new SafeResourceUrlImpl(trustedResourceUrl);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {trustedHTMLFromString} from '../util/security/trusted_types';\n\n/**\n * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we use one of two strategies for doing this.\n * Default: DOMParser strategy\n * Fallback: InertDocument strategy\n */\nexport function getInertBodyHelper(defaultDoc: Document): InertBodyHelper {\n  const inertDocumentHelper = new InertDocumentHelper(defaultDoc);\n  return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;\n}\n\nexport interface InertBodyHelper {\n  /**\n   * Get an inert DOM element containing DOM created from the dirty HTML string provided.\n   */\n  getInertBodyElement: (html: string) => HTMLElement | null;\n}\n\n/**\n * Uses DOMParser to create and fill an inert body element.\n * This is the default strategy used in browsers that support it.\n */\nclass DOMParserHelper implements InertBodyHelper {\n  constructor(private inertDocumentHelper: InertBodyHelper) {}\n\n  getInertBodyElement(html: string): HTMLElement | null {\n    // We add these extra elements to ensure that the rest of the content is parsed as expected\n    // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n    // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags\n    // in `html` from consuming the otherwise explicit `</body>` tag.\n    html = '<body><remove></remove>' + html;\n    try {\n      const body = new window.DOMParser().parseFromString(\n        trustedHTMLFromString(html) as string,\n        'text/html',\n      ).body as HTMLBodyElement;\n      if (body === null) {\n        // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only\n        // becomes available in the following tick of the JS engine. In that case we fall back to\n        // the `inertDocumentHelper` instead.\n        return this.inertDocumentHelper.getInertBodyElement(html);\n      }\n      body.firstChild?.remove();\n      return body;\n    } catch {\n      return null;\n    }\n  }\n}\n\n/**\n * Use an HTML5 `template` element to create and fill an inert DOM element.\n * This is the fallback strategy if the browser does not support DOMParser.\n */\nclass InertDocumentHelper implements InertBodyHelper {\n  private inertDocument: Document;\n\n  constructor(private defaultDoc: Document) {\n    this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n  }\n\n  getInertBodyElement(html: string): HTMLElement | null {\n    const templateEl = this.inertDocument.createElement('template');\n    templateEl.innerHTML = trustedHTMLFromString(html) as string;\n    return templateEl;\n  }\n}\n\n/**\n * We need to determine whether the DOMParser exists in the global context and\n * supports parsing HTML; HTML parsing support is not as wide as other formats, see\n * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.\n *\n * @suppress {uselessCode}\n */\nexport function isDOMParserAvailable() {\n  try {\n    return !!new window.DOMParser().parseFromString(\n      trustedHTMLFromString('') as string,\n      'text/html',\n    );\n  } catch {\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {XSS_SECURITY_URL} from '../error_details_base_url';\n\n/**\n * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation\n * contexts.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if:\n * (1) Either a protocol that is not javascript:, and that has valid characters\n *     (alphanumeric or [+-.]).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nconst SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:\\/?#]*(?:[\\/?#]|$))/i;\nexport function _sanitizeUrl(url: string): string {\n  url = String(url);\n  if (url.match(SAFE_URL_PATTERN)) return url;\n\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see ${XSS_SECURITY_URL})`);\n  }\n\n  return 'unsafe:' + url;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {XSS_SECURITY_URL} from '../error_details_base_url';\nimport {TrustedHTML} from '../util/security/trusted_type_defs';\nimport {trustedHTMLFromString} from '../util/security/trusted_types';\n\nimport {getInertBodyHelper, InertBodyHelper} from './inert_body';\nimport {_sanitizeUrl} from './url_sanitizer';\n\nfunction tagSet(tags: string): {[k: string]: boolean} {\n  const res: {[k: string]: boolean} = {};\n  for (const t of tags.split(',')) res[t] = true;\n  return res;\n}\n\nfunction merge(...sets: {[k: string]: boolean}[]): {[k: string]: boolean} {\n  const res: {[k: string]: boolean} = {};\n  for (const s of sets) {\n    for (const v in s) {\n      if (s.hasOwnProperty(v)) res[v] = true;\n    }\n  }\n  return res;\n}\n\n// Good source of info about elements and attributes\n// https://html.spec.whatwg.org/#semantics\n// https://simon.html5.org/html-elements\n\n// Safe Void Elements - HTML5\n// https://html.spec.whatwg.org/#void-elements\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n\n// Elements that you can, intentionally, leave open (and which close themselves)\n// https://html.spec.whatwg.org/#optional-tags\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst OPTIONAL_END_TAG_ELEMENTS = merge(\n  OPTIONAL_END_TAG_INLINE_ELEMENTS,\n  OPTIONAL_END_TAG_BLOCK_ELEMENTS,\n);\n\n// Safe Block Elements - HTML5\nconst BLOCK_ELEMENTS = merge(\n  OPTIONAL_END_TAG_BLOCK_ELEMENTS,\n  tagSet(\n    'address,article,' +\n      'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n      'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul',\n  ),\n);\n\n// Inline Elements - HTML5\nconst INLINE_ELEMENTS = merge(\n  OPTIONAL_END_TAG_INLINE_ELEMENTS,\n  tagSet(\n    'a,abbr,acronym,audio,b,' +\n      'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n      'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video',\n  ),\n);\n\nexport const VALID_ELEMENTS = merge(\n  VOID_ELEMENTS,\n  BLOCK_ELEMENTS,\n  INLINE_ELEMENTS,\n  OPTIONAL_END_TAG_ELEMENTS,\n);\n\n// Attributes that have href and hence need to be sanitized\nexport const URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n\nconst HTML_ATTRS = tagSet(\n  'abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width',\n);\n\n// Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\nconst ARIA_ATTRS = tagSet(\n  'aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' +\n    'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' +\n    'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' +\n    'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' +\n    'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' +\n    'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' +\n    'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext',\n);\n\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\n\nexport const VALID_ATTRS = merge(URI_ATTRS, HTML_ATTRS, ARIA_ATTRS);\n\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n  // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n  // because characters were re-encoded.\n  public sanitizedSomething = false;\n  private buf: string[] = [];\n\n  sanitizeChildren(el: Element): string {\n    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n    // However this code never accesses properties off of `document` before deleting its contents\n    // again, so it shouldn't be vulnerable to DOM clobbering.\n    let current: Node = el.firstChild!;\n    let traverseContent = true;\n    let parentNodes = [];\n    while (current) {\n      if (current.nodeType === Node.ELEMENT_NODE) {\n        traverseContent = this.startElement(current as Element);\n      } else if (current.nodeType === Node.TEXT_NODE) {\n        this.chars(current.nodeValue!);\n      } else {\n        // Strip non-element, non-text nodes.\n        this.sanitizedSomething = true;\n      }\n      if (traverseContent && current.firstChild) {\n        // Push current node to the parent stack before entering its content.\n        parentNodes.push(current);\n        current = getFirstChild(current)!;\n        continue;\n      }\n      while (current) {\n        // Leaving the element.\n        // Walk up and to the right, closing tags as we go.\n        if (current.nodeType === Node.ELEMENT_NODE) {\n          this.endElement(current as Element);\n        }\n\n        let next = getNextSibling(current)!;\n\n        if (next) {\n          current = next;\n          break;\n        }\n\n        // There was no next sibling, walk up to the parent node (extract it from the stack).\n        current = parentNodes.pop()!;\n      }\n    }\n    return this.buf.join('');\n  }\n\n  /**\n   * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n   * be traversed. Element content must always be traversed (even if the element itself is not\n   * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n   *\n   * @param element The element to sanitize.\n   * @return True if the element's contents should be traversed.\n   */\n  private startElement(element: Element): boolean {\n    const tagName = getNodeName(element).toLowerCase();\n    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.sanitizedSomething = true;\n      return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n    }\n    this.buf.push('<');\n    this.buf.push(tagName);\n    const elAttrs = element.attributes;\n    for (let i = 0; i < elAttrs.length; i++) {\n      const elAttr = elAttrs.item(i);\n      const attrName = elAttr!.name;\n      const lower = attrName.toLowerCase();\n      if (!VALID_ATTRS.hasOwnProperty(lower)) {\n        this.sanitizedSomething = true;\n        continue;\n      }\n      let value = elAttr!.value;\n      // TODO(martinprobst): Special case image URIs for data:image/...\n      if (URI_ATTRS[lower]) value = _sanitizeUrl(value);\n      this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n    }\n    this.buf.push('>');\n    return true;\n  }\n\n  private endElement(current: Element) {\n    const tagName = getNodeName(current).toLowerCase();\n    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.buf.push('</');\n      this.buf.push(tagName);\n      this.buf.push('>');\n    }\n  }\n\n  private chars(chars: string) {\n    this.buf.push(encodeEntities(chars));\n  }\n}\n\n/**\n * Verifies whether a given child node is a descendant of a given parent node.\n * It may not be the case when properties like `.firstChild` are clobbered and\n * accessing `.firstChild` results in an unexpected node returned.\n */\nfunction isClobberedElement(parentNode: Node, childNode: Node): boolean {\n  return (\n    (parentNode.compareDocumentPosition(childNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) !==\n    Node.DOCUMENT_POSITION_CONTAINED_BY\n  );\n}\n\n/**\n * Retrieves next sibling node and makes sure that there is no\n * clobbering of the `nextSibling` property happening.\n */\nfunction getNextSibling(node: Node): Node | null {\n  const nextSibling = node.nextSibling;\n  // Make sure there is no `nextSibling` clobbering: navigating to\n  // the next sibling and going back to the previous one should result\n  // in the original node.\n  if (nextSibling && node !== nextSibling.previousSibling) {\n    throw clobberedElementError(nextSibling);\n  }\n  return nextSibling;\n}\n\n/**\n * Retrieves first child node and makes sure that there is no\n * clobbering of the `firstChild` property happening.\n */\nfunction getFirstChild(node: Node): Node | null {\n  const firstChild = node.firstChild;\n  if (firstChild && isClobberedElement(node, firstChild)) {\n    throw clobberedElementError(firstChild);\n  }\n  return firstChild;\n}\n\n/** Gets a reasonable nodeName, even for clobbered nodes. */\nexport function getNodeName(node: Node): string {\n  const nodeName = node.nodeName;\n  // If the property is clobbered, assume it is an `HTMLFormElement`.\n  return typeof nodeName === 'string' ? nodeName : 'FORM';\n}\n\nfunction clobberedElementError(node: Node) {\n  return new Error(\n    `Failed to sanitize html because the element is clobbered: ${(node as Element).outerHTML}`,\n  );\n}\n\n// Regular Expressions for parsing tags and attributes\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n */\nfunction encodeEntities(value: string) {\n  return value\n    .replace(/&/g, '&amp;')\n    .replace(SURROGATE_PAIR_REGEXP, function (match: string) {\n      const hi = match.charCodeAt(0);\n      const low = match.charCodeAt(1);\n      return '&#' + ((hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000) + ';';\n    })\n    .replace(NON_ALPHANUMERIC_REGEXP, function (match: string) {\n      return '&#' + match.charCodeAt(0) + ';';\n    })\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n}\n\nlet inertBodyHelper: InertBodyHelper;\n\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nexport function _sanitizeHtml(defaultDoc: any, unsafeHtmlInput: string): TrustedHTML | string {\n  let inertBodyElement: HTMLElement | null = null;\n  try {\n    inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);\n    // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n\n    // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n    let mXSSAttempts = 5;\n    let parsedHtml = unsafeHtml;\n\n    do {\n      if (mXSSAttempts === 0) {\n        throw new Error('Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n\n      unsafeHtml = parsedHtml;\n      parsedHtml = inertBodyElement!.innerHTML;\n      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    } while (unsafeHtml !== parsedHtml);\n\n    const sanitizer = new SanitizingHtmlSerializer();\n    const safeHtml = sanitizer.sanitizeChildren(\n      (getTemplateContent(inertBodyElement!) as Element) || inertBodyElement,\n    );\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {\n      console.warn(`WARNING: sanitizing HTML stripped some content, see ${XSS_SECURITY_URL}`);\n    }\n\n    return trustedHTMLFromString(safeHtml);\n  } finally {\n    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n    if (inertBodyElement) {\n      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n      while (parent.firstChild) {\n        parent.firstChild.remove();\n      }\n    }\n  }\n}\n\nexport function getTemplateContent(el: Node): Node | null {\n  return 'content' in (el as any) /** Microsoft/TypeScript#21517 */ && isTemplateElement(el)\n    ? el.content\n    : null;\n}\nfunction isTemplateElement(el: Node): el is HTMLTemplateElement {\n  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nexport enum SecurityContext {\n  NONE = 0,\n  HTML = 1,\n  STYLE = 2,\n  SCRIPT = 3,\n  URL = 4,\n  RESOURCE_URL = 5,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {XSS_SECURITY_URL} from '../error_details_base_url';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {getDocument} from '../render3/interfaces/document';\nimport {ENVIRONMENT} from '../render3/interfaces/view';\nimport {getLView} from '../render3/state';\nimport {renderStringify} from '../render3/util/stringify_utils';\nimport {TrustedHTML, TrustedScript, TrustedScriptURL} from '../util/security/trusted_type_defs';\nimport {trustedHTMLFromString, trustedScriptURLFromString} from '../util/security/trusted_types';\nimport {\n  trustedHTMLFromStringBypass,\n  trustedScriptFromStringBypass,\n  trustedScriptURLFromStringBypass,\n} from '../util/security/trusted_types_bypass';\n\nimport {allowSanitizationBypassAndThrow, BypassType, unwrapSafeValue} from './bypass';\nimport {_sanitizeHtml as _sanitizeHtml} from './html_sanitizer';\nimport {Sanitizer} from './sanitizer';\nimport {SecurityContext} from './security';\nimport {_sanitizeUrl as _sanitizeUrl} from './url_sanitizer';\n\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeHtml(unsafeHtml: any): TrustedHTML | string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeHtml, BypassType.Html)) {\n    return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));\n  }\n  return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));\n}\n\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeStyle(unsafeStyle: any): string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeStyle, BypassType.Style)) {\n    return unwrapSafeValue(unsafeStyle);\n  }\n  return renderStringify(unsafeStyle);\n}\n\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeUrl(unsafeUrl: any): string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeUrl, BypassType.Url)) {\n    return unwrapSafeValue(unsafeUrl);\n  }\n  return _sanitizeUrl(renderStringify(unsafeUrl));\n}\n\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeResourceUrl(unsafeResourceUrl: any): TrustedScriptURL | string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptURLFromStringBypass(\n      sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '',\n    );\n  }\n  if (allowSanitizationBypassAndThrow(unsafeResourceUrl, BypassType.ResourceUrl)) {\n    return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));\n  }\n  throw new RuntimeError(\n    RuntimeErrorCode.UNSAFE_VALUE_IN_RESOURCE_URL,\n    ngDevMode && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`,\n  );\n}\n\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link\n * bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeScript(unsafeScript: any): TrustedScript | string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptFromStringBypass(\n      sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '',\n    );\n  }\n  if (allowSanitizationBypassAndThrow(unsafeScript, BypassType.Script)) {\n    return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));\n  }\n  throw new RuntimeError(\n    RuntimeErrorCode.UNSAFE_VALUE_IN_SCRIPT,\n    ngDevMode && 'unsafe value used in a script context',\n  );\n}\n\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedHTML. Interpolation is explicitly not allowed.\n *\n * @param html constant template literal containing trusted HTML.\n * @returns TrustedHTML wrapping `html`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedHTML.\n *\n * @codeGenApi\n */\nexport function ɵɵtrustConstantHtml(html: TemplateStringsArray): TrustedHTML | string {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation\n  // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray\n  // is an array with a `raw` property that is also an array. The associated\n  // template literal has no interpolation if and only if the length of the\n  // TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join('?')}`);\n  }\n  return trustedHTMLFromString(html[0]);\n}\n\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedScriptURL. Interpolation is explicitly not allowed.\n *\n * @param url constant template literal containing a trusted script URL.\n * @returns TrustedScriptURL wrapping `url`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedScriptURL.\n *\n * @codeGenApi\n */\nexport function ɵɵtrustConstantResourceUrl(url: TemplateStringsArray): TrustedScriptURL | string {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any\n  // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A\n  // TemplateStringsArray is an array with a `raw` property that is also an\n  // array. The associated template literal has no interpolation if and only if\n  // the length of the TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join('?')}`);\n  }\n  return trustedScriptURLFromString(url[0]);\n}\n\n/**\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\n *\n * The rules are based on the RESOURCE_URL context config from\n * `packages/compiler/src/schema/dom_security_schema.ts`.\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n */\nexport function getUrlSanitizer(tag: string, prop: string) {\n  if (\n    (prop === 'src' &&\n      (tag === 'embed' ||\n        tag === 'frame' ||\n        tag === 'iframe' ||\n        tag === 'media' ||\n        tag === 'script')) ||\n    (prop === 'href' && (tag === 'base' || tag === 'link'))\n  ) {\n    return ɵɵsanitizeResourceUrl;\n  }\n  return ɵɵsanitizeUrl;\n}\n\n/**\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\n *\n * This function is used in case we can't define security context at compile time, when only prop\n * name is available. This happens when we generate host bindings for Directives/Components. The\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n * runtime.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @param tag target element tag name.\n * @param prop name of the property that contains the value.\n * @returns `url` string which is safe to bind.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeUrlOrResourceUrl(unsafeUrl: any, tag: string, prop: string): any {\n  return getUrlSanitizer(tag, prop)(unsafeUrl);\n}\n\nexport function validateAgainstEventProperties(name: string) {\n  if (name.toLowerCase().startsWith('on')) {\n    const errorMessage =\n      `Binding to event property '${name}' is disallowed for security reasons, ` +\n      `please use (${name.slice(2)})=...` +\n      `\\nIf '${name}' is a directive input, make sure the directive is imported by the` +\n      ` current module.`;\n    throw new RuntimeError(RuntimeErrorCode.INVALID_EVENT_BINDING, errorMessage);\n  }\n}\n\nexport function validateAgainstEventAttributes(name: string) {\n  if (name.toLowerCase().startsWith('on')) {\n    const errorMessage =\n      `Binding to event attribute '${name}' is disallowed for security reasons, ` +\n      `please use (${name.slice(2)})=...`;\n    throw new RuntimeError(RuntimeErrorCode.INVALID_EVENT_BINDING, errorMessage);\n  }\n}\n\nfunction getSanitizer(): Sanitizer | null {\n  const lView = getLView();\n  return lView && lView[ENVIRONMENT].sanitizer;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Disallowed strings in the comment.\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n */\nconst COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;\n/**\n * Delimiter in the disallowed strings which needs to be wrapped with zero with character.\n */\nconst COMMENT_DELIMITER = /(<|>)/g;\nconst COMMENT_DELIMITER_ESCAPED = '\\u200B$1\\u200B';\n\n/**\n * Escape the content of comment strings so that it can be safely inserted into a comment node.\n *\n * The issue is that HTML does not specify any way to escape comment end text inside the comment.\n * Consider: `<!-- The way you close a comment is with \">\", and \"->\" at the beginning or by \"-->\" or\n * \"--!>\" at the end. -->`. Above the `\"-->\"` is meant to be text not an end to the comment. This\n * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n *\n * ```ts\n * div.innerHTML = div.innerHTML\n * ```\n *\n * One would expect that the above code would be safe to do, but it turns out that because comment\n * text is not escaped, the comment may contain text which will prematurely close the comment\n * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which\n * may contain such text and expect them to be safe.)\n *\n * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and\n * surrounding them with `_>_` where the `_` is a zero width space `\\u200B`. The result is that if a\n * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the\n * text it will render normally but it will not cause the HTML parser to close/open the comment.\n *\n * @param value text to make safe for comment node by escaping the comment open/close character\n *     sequence.\n */\nexport function escapeCommentText(value: string): string {\n  return value.replace(COMMENT_DISALLOWED, (text) =>\n    text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED),\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {RElement} from '../interfaces/renderer_dom';\n\n/**\n *\n * @codeGenApi\n */\nexport function ɵɵresolveWindow(element: RElement & {ownerDocument: Document}) {\n  return element.ownerDocument.defaultView;\n}\n\n/**\n *\n * @codeGenApi\n */\nexport function ɵɵresolveDocument(element: RElement & {ownerDocument: Document}) {\n  return element.ownerDocument;\n}\n\n/**\n *\n * @codeGenApi\n */\nexport function ɵɵresolveBody(element: RElement & {ownerDocument: Document}) {\n  return element.ownerDocument.body;\n}\n\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n */\nexport const INTERPOLATION_DELIMITER = `�`;\n\n/**\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\n */\nexport function maybeUnwrapFn<T>(value: T | (() => T)): T {\n  if (value instanceof Function) {\n    return value();\n  } else {\n    return value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertNotEqual} from '../../util/assert';\nimport {CharCode} from '../../util/char_code';\n\n/**\n * Returns an index of `classToSearch` in `className` taking token boundaries into account.\n *\n * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)\n *\n * @param className A string containing classes (whitespace separated)\n * @param classToSearch A class name to locate\n * @param startingIndex Starting location of search\n * @returns an index of the located class (or -1 if not found)\n */\nexport function classIndexOf(\n  className: string,\n  classToSearch: string,\n  startingIndex: number,\n): number {\n  ngDevMode && assertNotEqual(classToSearch, '', 'can not look for \"\" string.');\n  let end = className.length;\n  while (true) {\n    const foundIndex = className.indexOf(classToSearch, startingIndex);\n    if (foundIndex === -1) return foundIndex;\n    if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= CharCode.SPACE) {\n      // Ensure that it has leading whitespace\n      const length = classToSearch.length;\n      if (\n        foundIndex + length === end ||\n        className.charCodeAt(foundIndex + length) <= CharCode.SPACE\n      ) {\n        // Ensure that it has trailing whitespace\n        return foundIndex;\n      }\n    }\n    // False positive, keep searching from where we left off.\n    startingIndex = foundIndex + 1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport '../util/ng_dev_mode';\n\nimport {assertDefined, assertEqual, assertNotEqual} from '../util/assert';\n\nimport {AttributeMarker} from './interfaces/attribute_marker';\nimport {TAttributes, TNode, TNodeType} from './interfaces/node';\nimport {CssSelector, CssSelectorList, SelectorFlags} from './interfaces/projection';\nimport {classIndexOf} from './styling/class_differ';\nimport {isNameOnlyAttributeMarker} from './util/attrs_utils';\n\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n\n/**\n * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)\n *\n * @param tNode static data of the node to match\n * @param attrs `TAttributes` to search through.\n * @param cssClassToMatch class to match (lowercase)\n * @param isProjectionMode Whether or not class matching should look into the attribute `class` in\n *    addition to the `AttributeMarker.Classes`.\n */\nfunction isCssClassMatching(\n  tNode: TNode,\n  attrs: TAttributes,\n  cssClassToMatch: string,\n  isProjectionMode: boolean,\n): boolean {\n  ngDevMode &&\n    assertEqual(\n      cssClassToMatch,\n      cssClassToMatch.toLowerCase(),\n      'Class name expected to be lowercase.',\n    );\n  let i = 0;\n  if (isProjectionMode) {\n    for (; i < attrs.length && typeof attrs[i] === 'string'; i += 2) {\n      // Search for an implicit `class` attribute and check if its value matches `cssClassToMatch`.\n      if (\n        attrs[i] === 'class' &&\n        classIndexOf((attrs[i + 1] as string).toLowerCase(), cssClassToMatch, 0) !== -1\n      ) {\n        return true;\n      }\n    }\n  } else if (isInlineTemplate(tNode)) {\n    // Matching directives (i.e. when not matching for projection mode) should not consider the\n    // class bindings that are present on inline templates, as those class bindings only target\n    // the root node of the template, not the template itself.\n    return false;\n  }\n\n  // Resume the search for classes after the `Classes` marker.\n  i = attrs.indexOf(AttributeMarker.Classes, i);\n  if (i > -1) {\n    // We found the classes section. Start searching for the class.\n    let item: TAttributes[number];\n    while (++i < attrs.length && typeof (item = attrs[i]) === 'string') {\n      if (item.toLowerCase() === cssClassToMatch) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).\n *\n * @param tNode current TNode\n */\nexport function isInlineTemplate(tNode: TNode): boolean {\n  return tNode.type === TNodeType.Container && tNode.value !== NG_TEMPLATE_SELECTOR;\n}\n\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode:\n * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n * tag name was extracted from * syntax so we would match the same directive twice);\n * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n * (applicable to TNodeType.Container only).\n */\nfunction hasTagAndTypeMatch(\n  tNode: TNode,\n  currentSelector: string,\n  isProjectionMode: boolean,\n): boolean {\n  const tagNameToCompare =\n    tNode.type === TNodeType.Container && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;\n  return currentSelector === tagNameToCompare;\n}\n\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param tNode static data of the node to match\n * @param selector The selector to try matching against the node.\n * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n * directive matching.\n * @returns true if node matches the selector.\n */\nexport function isNodeMatchingSelector(\n  tNode: TNode,\n  selector: CssSelector,\n  isProjectionMode: boolean,\n): boolean {\n  ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n  let mode: SelectorFlags = SelectorFlags.ELEMENT;\n  const nodeAttrs = tNode.attrs;\n\n  // Find the index of first attribute that has no value, only a name.\n  const nameOnlyMarkerIdx = nodeAttrs !== null ? getNameOnlyMarkerIndex(nodeAttrs) : 0;\n\n  // When processing \":not\" selectors, we skip to the next \":not\" if the\n  // current one doesn't match\n  let skipToNextSelector = false;\n\n  for (let i = 0; i < selector.length; i++) {\n    const current = selector[i];\n    if (typeof current === 'number') {\n      // If we finish processing a :not selector and it hasn't failed, return false\n      if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\n        return false;\n      }\n      // If we are skipping to the next :not() and this mode flag is positive,\n      // it's a part of the current :not() selector, and we should keep skipping\n      if (skipToNextSelector && isPositive(current)) continue;\n      skipToNextSelector = false;\n      mode = (current as number) | (mode & SelectorFlags.NOT);\n      continue;\n    }\n\n    if (skipToNextSelector) continue;\n\n    if (mode & SelectorFlags.ELEMENT) {\n      mode = SelectorFlags.ATTRIBUTE | (mode & SelectorFlags.NOT);\n      if (\n        (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode)) ||\n        (current === '' && selector.length === 1)\n      ) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n      }\n    } else if (mode & SelectorFlags.CLASS) {\n      if (nodeAttrs === null || !isCssClassMatching(tNode, nodeAttrs, current, isProjectionMode)) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n      }\n    } else {\n      const selectorAttrValue = selector[++i];\n      const attrIndexInNode = findAttrIndexInNode(\n        current,\n        nodeAttrs,\n        isInlineTemplate(tNode),\n        isProjectionMode,\n      );\n\n      if (attrIndexInNode === -1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n        continue;\n      }\n\n      if (selectorAttrValue !== '') {\n        let nodeAttrValue: string;\n        if (attrIndexInNode > nameOnlyMarkerIdx) {\n          nodeAttrValue = '';\n        } else {\n          ngDevMode &&\n            assertNotEqual(\n              nodeAttrs![attrIndexInNode],\n              AttributeMarker.NamespaceURI,\n              'We do not match directives on namespaced attributes',\n            );\n          // we lowercase the attribute value to be able to match\n          // selectors without case-sensitivity\n          // (selectors are already in lowercase when generated)\n          nodeAttrValue = (nodeAttrs![attrIndexInNode + 1] as string).toLowerCase();\n        }\n\n        if (mode & SelectorFlags.ATTRIBUTE && selectorAttrValue !== nodeAttrValue) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n      }\n    }\n  }\n\n  return isPositive(mode) || skipToNextSelector;\n}\n\nfunction isPositive(mode: SelectorFlags): boolean {\n  return (mode & SelectorFlags.NOT) === 0;\n}\n\n/**\n * Examines the attribute's definition array for a node to find the index of the\n * attribute that matches the given `name`.\n *\n * NOTE: This will not match namespaced attributes.\n *\n * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n * The following table summarizes which types of attributes we attempt to match:\n *\n * ===========================================================================================================\n * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\n * Attributes\n * ===========================================================================================================\n * Inline + Projection     | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Inline + Directive      | NO                | NO                  | YES                 | NO\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Projection | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Directive  | YES               | YES                 | NO                  | YES\n * ===========================================================================================================\n *\n * @param name the name of the attribute to find\n * @param attrs the attribute array to examine\n * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n * rather than a manually expanded template node (e.g `<ng-template>`).\n * @param isProjectionMode true if we are matching against content projection otherwise we are\n * matching against directives.\n */\nfunction findAttrIndexInNode(\n  name: string,\n  attrs: TAttributes | null,\n  isInlineTemplate: boolean,\n  isProjectionMode: boolean,\n): number {\n  if (attrs === null) return -1;\n\n  let i = 0;\n\n  if (isProjectionMode || !isInlineTemplate) {\n    let bindingsMode = false;\n    while (i < attrs.length) {\n      const maybeAttrName = attrs[i];\n      if (maybeAttrName === name) {\n        return i;\n      } else if (\n        maybeAttrName === AttributeMarker.Bindings ||\n        maybeAttrName === AttributeMarker.I18n\n      ) {\n        bindingsMode = true;\n      } else if (\n        maybeAttrName === AttributeMarker.Classes ||\n        maybeAttrName === AttributeMarker.Styles\n      ) {\n        let value = attrs[++i];\n        // We should skip classes here because we have a separate mechanism for\n        // matching classes in projection mode.\n        while (typeof value === 'string') {\n          value = attrs[++i];\n        }\n        continue;\n      } else if (maybeAttrName === AttributeMarker.Template) {\n        // We do not care about Template attributes in this scenario.\n        break;\n      } else if (maybeAttrName === AttributeMarker.NamespaceURI) {\n        // Skip the whole namespaced attribute and value. This is by design.\n        i += 4;\n        continue;\n      }\n      // In binding mode there are only names, rather than name-value pairs.\n      i += bindingsMode ? 1 : 2;\n    }\n    // We did not match the attribute\n    return -1;\n  } else {\n    return matchTemplateAttribute(attrs, name);\n  }\n}\n\nexport function isNodeMatchingSelectorList(\n  tNode: TNode,\n  selector: CssSelectorList,\n  isProjectionMode: boolean = false,\n): boolean {\n  for (let i = 0; i < selector.length; i++) {\n    if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function getProjectAsAttrValue(tNode: TNode): CssSelector | null {\n  const nodeAttrs = tNode.attrs;\n  if (nodeAttrs != null) {\n    const ngProjectAsAttrIdx = nodeAttrs.indexOf(AttributeMarker.ProjectAs);\n    // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n    // (attribute names are stored at even indexes)\n    if ((ngProjectAsAttrIdx & 1) === 0) {\n      return nodeAttrs[ngProjectAsAttrIdx + 1] as CssSelector;\n    }\n  }\n  return null;\n}\n\nfunction getNameOnlyMarkerIndex(nodeAttrs: TAttributes) {\n  for (let i = 0; i < nodeAttrs.length; i++) {\n    const nodeAttr = nodeAttrs[i];\n    if (isNameOnlyAttributeMarker(nodeAttr)) {\n      return i;\n    }\n  }\n  return nodeAttrs.length;\n}\n\nfunction matchTemplateAttribute(attrs: TAttributes, name: string): number {\n  let i = attrs.indexOf(AttributeMarker.Template);\n  if (i > -1) {\n    i++;\n    while (i < attrs.length) {\n      const attr = attrs[i];\n      // Return in case we checked all template attrs and are switching to the next section in the\n      // attrs array (that starts with a number that represents an attribute marker).\n      if (typeof attr === 'number') return -1;\n      if (attr === name) return i;\n      i++;\n    }\n  }\n  return -1;\n}\n\n/**\n * Checks whether a selector is inside a CssSelectorList\n * @param selector Selector to be checked.\n * @param list List in which to look for the selector.\n */\nexport function isSelectorInSelectorList(selector: CssSelector, list: CssSelectorList): boolean {\n  selectorListLoop: for (let i = 0; i < list.length; i++) {\n    const currentSelectorInList = list[i];\n    if (selector.length !== currentSelectorInList.length) {\n      continue;\n    }\n    for (let j = 0; j < selector.length; j++) {\n      if (selector[j] !== currentSelectorInList[j]) {\n        continue selectorListLoop;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\nfunction maybeWrapInNotSelector(isNegativeMode: boolean, chunk: string): string {\n  return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;\n}\n\nfunction stringifyCSSSelector(selector: CssSelector): string {\n  let result = selector[0] as string;\n  let i = 1;\n  let mode = SelectorFlags.ATTRIBUTE;\n  let currentChunk = '';\n  let isNegativeMode = false;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode & SelectorFlags.ATTRIBUTE) {\n        const attrValue = selector[++i] as string;\n        currentChunk +=\n          '[' + valueOrMarker + (attrValue.length > 0 ? '=\"' + attrValue + '\"' : '') + ']';\n      } else if (mode & SelectorFlags.CLASS) {\n        currentChunk += '.' + valueOrMarker;\n      } else if (mode & SelectorFlags.ELEMENT) {\n        currentChunk += ' ' + valueOrMarker;\n      }\n    } else {\n      //\n      // Append current chunk to the final result in case we come across SelectorFlag, which\n      // indicates that the previous section of a selector is over. We need to accumulate content\n      // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.\n      // ```\n      //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']\n      // ```\n      // should be transformed to `.classA :not(.classB .classC)`.\n      //\n      // Note: for negative selector part, we accumulate content between flags until we find the\n      // next negative flag. This is needed to support a case where `:not()` rule contains more than\n      // one chunk, e.g. the following selector:\n      // ```\n      //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']\n      // ```\n      // should be stringified to `:not(p.foo) :not(.bar)`\n      //\n      if (currentChunk !== '' && !isPositive(valueOrMarker)) {\n        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n        currentChunk = '';\n      }\n      mode = valueOrMarker;\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector.\n      isNegativeMode = isNegativeMode || !isPositive(mode);\n    }\n    i++;\n  }\n  if (currentChunk !== '') {\n    result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n  }\n  return result;\n}\n\n/**\n * Generates string representation of CSS selector in parsed form.\n *\n * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing\n * additional parsing at runtime (for example, for directive matching). However in some cases (for\n * example, while bootstrapping a component), a string version of the selector is required to query\n * for the host element on the page. This function takes the parsed form of a selector and returns\n * its string representation.\n *\n * @param selectorList selector in parsed form\n * @returns string representation of a given selector\n */\nexport function stringifyCSSSelectorList(selectorList: CssSelectorList): string {\n  return selectorList.map(stringifyCSSSelector).join(',');\n}\n\n/**\n * Extracts attributes and classes information from a given CSS selector.\n *\n * This function is used while creating a component dynamically. In this case, the host element\n * (that is created dynamically) should contain attributes and classes specified in component's CSS\n * selector.\n *\n * @param selector CSS selector in parsed form (in a form of array)\n * @returns object with `attrs` and `classes` fields that contain extracted information\n */\nexport function extractAttrsAndClassesFromSelector(selector: CssSelector): TAttributes {\n  const attrs: TAttributes = [];\n  const classes: string[] = [];\n  let i = 1;\n  let mode = SelectorFlags.ATTRIBUTE;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode === SelectorFlags.ATTRIBUTE) {\n        if (valueOrMarker !== '') {\n          attrs.push(valueOrMarker, selector[++i] as string);\n        }\n      } else if (mode === SelectorFlags.CLASS) {\n        classes.push(valueOrMarker);\n      }\n    } else {\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector. Since attributes and classes are\n      // extracted only for \"positive\" part of the selector, we can stop here.\n      if (!isPositive(mode)) break;\n      mode = valueOrMarker;\n    }\n    i++;\n  }\n  if (classes.length) {\n    attrs.push(AttributeMarker.Classes, ...classes);\n  }\n\n  return attrs;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport interface NO_CHANGE {\n  // This is a brand that ensures that this type can never match anything else\n  __brand__: 'NO_CHANGE';\n}\n\n/** A special value which designates that a value has not changed. */\nexport const NO_CHANGE: NO_CHANGE =\n  typeof ngDevMode === 'undefined' || ngDevMode ? {__brand__: 'NO_CHANGE'} : ({} as NO_CHANGE);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Renderer} from './interfaces/renderer';\nimport {RComment, RElement, RNode, RText} from './interfaces/renderer_dom';\nimport {escapeCommentText} from '../util/dom';\nimport {assertDefined, assertString} from '../util/assert';\nimport {setUpAttributes} from './util/attrs_utils';\nimport {TNode} from './interfaces/node';\n\nexport function createTextNode(renderer: Renderer, value: string): RText {\n  ngDevMode && ngDevMode.rendererCreateTextNode++;\n  ngDevMode && ngDevMode.rendererSetText++;\n  return renderer.createText(value);\n}\n\nexport function updateTextNode(renderer: Renderer, rNode: RText, value: string): void {\n  ngDevMode && ngDevMode.rendererSetText++;\n  renderer.setValue(rNode, value);\n}\n\nexport function createCommentNode(renderer: Renderer, value: string): RComment {\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  return renderer.createComment(escapeCommentText(value));\n}\n\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param renderer A renderer to use\n * @param name the tag name\n * @param namespace Optional namespace for element.\n * @returns the element created\n */\nexport function createElementNode(\n  renderer: Renderer,\n  name: string,\n  namespace: string | null,\n): RElement {\n  ngDevMode && ngDevMode.rendererCreateElement++;\n  return renderer.createElement(name, namespace);\n}\n\n/**\n * Inserts a native node before another native node for a given parent.\n * This is a utility function that can be used when native nodes were determined.\n */\nexport function nativeInsertBefore(\n  renderer: Renderer,\n  parent: RElement,\n  child: RNode,\n  beforeNode: RNode | null,\n  isMove: boolean,\n): void {\n  ngDevMode && ngDevMode.rendererInsertBefore++;\n  renderer.insertBefore(parent, child, beforeNode, isMove);\n}\n\nexport function nativeAppendChild(renderer: Renderer, parent: RElement, child: RNode): void {\n  ngDevMode && ngDevMode.rendererAppendChild++;\n  ngDevMode && assertDefined(parent, 'parent node must be defined');\n  renderer.appendChild(parent, child);\n}\n\nexport function nativeAppendOrInsertBefore(\n  renderer: Renderer,\n  parent: RElement,\n  child: RNode,\n  beforeNode: RNode | null,\n  isMove: boolean,\n) {\n  if (beforeNode !== null) {\n    nativeInsertBefore(renderer, parent, child, beforeNode, isMove);\n  } else {\n    nativeAppendChild(renderer, parent, child);\n  }\n}\n\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param renderer A renderer to be used\n * @param rNode The native node that should be removed\n * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n */\nexport function nativeRemoveNode(renderer: Renderer, rNode: RNode, isHostElement?: boolean): void {\n  ngDevMode && ngDevMode.rendererRemoveNode++;\n  renderer.removeChild(null, rNode, isHostElement);\n}\n\n/**\n * Clears the contents of a given RElement.\n *\n * @param rElement the native RElement to be cleared\n */\nexport function clearElementContents(rElement: RElement): void {\n  rElement.textContent = '';\n}\n\n/**\n * Write `cssText` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectStyle(renderer: Renderer, element: RElement, newValue: string) {\n  ngDevMode && assertString(newValue, \"'newValue' should be a string\");\n  renderer.setAttribute(element, 'style', newValue);\n  ngDevMode && ngDevMode.rendererSetStyle++;\n}\n\n/**\n * Write `className` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectClass(renderer: Renderer, element: RElement, newValue: string) {\n  ngDevMode && assertString(newValue, \"'newValue' should be a string\");\n  if (newValue === '') {\n    // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.\n    renderer.removeAttribute(element, 'class');\n  } else {\n    renderer.setAttribute(element, 'class', newValue);\n  }\n  ngDevMode && ngDevMode.rendererSetClassName++;\n}\n\n/** Sets up the static DOM attributes on an `RNode`. */\nexport function setupStaticAttributes(renderer: Renderer, element: RElement, tNode: TNode) {\n  const {mergedAttrs, classes, styles} = tNode;\n\n  if (mergedAttrs !== null) {\n    setUpAttributes(renderer, element, mergedAttrs);\n  }\n\n  if (classes !== null) {\n    writeDirectClass(renderer, element, classes);\n  }\n\n  if (styles !== null) {\n    writeDirectStyle(renderer, element, styles);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  TView,\n  TVIEW,\n  LViewFlags,\n  LViewEnvironment,\n  HOST,\n  FLAGS,\n  DECLARATION_VIEW,\n  PARENT,\n  CONTEXT,\n  ENVIRONMENT,\n  RENDERER,\n  INJECTOR,\n  T_HOST,\n  ID,\n  HYDRATION,\n  EMBEDDED_VIEW_INJECTOR,\n  TViewType,\n  DECLARATION_COMPONENT_VIEW,\n  HEADER_OFFSET,\n  CHILD_HEAD,\n  CHILD_TAIL,\n  NEXT,\n  LView,\n} from '../interfaces/view';\nimport {assertFirstCreatePass, assertFirstUpdatePass, assertTNodeForLView} from '../assert';\nimport {assertSame, assertEqual, assertDefined} from '../../util/assert';\nimport {RElement} from '../interfaces/renderer_dom';\nimport {TConstantsOrFactory, TElementNode, TNode} from '../interfaces/node';\nimport {Renderer} from '../interfaces/renderer';\nimport {Injector} from '../../di';\nimport {DehydratedView} from '../../hydration/interfaces';\nimport {getNativeByTNode, resetPreOrderHookFlags} from '../util/view_utils';\nimport {getUniqueLViewId} from '../interfaces/lview_tracking';\nimport {NO_CHANGE} from '../tokens';\nimport {\n  ComponentDef,\n  ComponentTemplate,\n  DirectiveDefListOrFactory,\n  PipeDefListOrFactory,\n  ViewQueriesFunction,\n} from '../interfaces/definition';\nimport {SchemaMetadata} from '../../metadata/schema';\nimport {LContainer} from '../interfaces/container';\n\n/**\n * Creates a TView instance\n *\n * @param type Type of `TView`.\n * @param declTNode Declaration location of this `TView`.\n * @param templateFn Template function\n * @param decls The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n * @param viewQuery View queries for this view\n * @param schemas Schemas for this view\n * @param consts Constants for this view\n */\nexport function createTView(\n  type: TViewType,\n  declTNode: TNode | null,\n  templateFn: ComponentTemplate<any> | null,\n  decls: number,\n  vars: number,\n  directives: DirectiveDefListOrFactory | null,\n  pipes: PipeDefListOrFactory | null,\n  viewQuery: ViewQueriesFunction<any> | null,\n  schemas: SchemaMetadata[] | null,\n  constsOrFactory: TConstantsOrFactory | null,\n  ssrId: string | null,\n): TView {\n  ngDevMode && ngDevMode.tView++;\n  const bindingStartIndex = HEADER_OFFSET + decls;\n  // This length does not yet contain host bindings from child directives because at this point,\n  // we don't know which directives are active on this template. As soon as a directive is matched\n  // that has a host binding, we will update the blueprint with that def's hostVars count.\n  const initialViewLength = bindingStartIndex + vars;\n  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n  const consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;\n  const tView = (blueprint[TVIEW as any] = {\n    type: type,\n    blueprint: blueprint,\n    template: templateFn,\n    queries: null,\n    viewQuery: viewQuery,\n    declTNode: declTNode,\n    data: blueprint.slice().fill(null, bindingStartIndex),\n    bindingStartIndex: bindingStartIndex,\n    expandoStartIndex: initialViewLength,\n    hostBindingOpCodes: null,\n    firstCreatePass: true,\n    firstUpdatePass: true,\n    staticViewQueries: false,\n    staticContentQueries: false,\n    preOrderHooks: null,\n    preOrderCheckHooks: null,\n    contentHooks: null,\n    contentCheckHooks: null,\n    viewHooks: null,\n    viewCheckHooks: null,\n    destroyHooks: null,\n    cleanup: null,\n    contentQueries: null,\n    components: null,\n    directiveRegistry: typeof directives === 'function' ? directives() : directives,\n    pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n    firstChild: null,\n    schemas: schemas,\n    consts: consts,\n    incompleteFirstPass: false,\n    ssrId,\n  });\n  if (ngDevMode) {\n    // For performance reasons it is important that the tView retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tView);\n  }\n  return tView;\n}\n\nfunction createViewBlueprint(bindingStartIndex: number, initialViewLength: number): LView {\n  const blueprint = [];\n\n  for (let i = 0; i < initialViewLength; i++) {\n    blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);\n  }\n\n  return blueprint as LView;\n}\n\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param def ComponentDef\n * @returns TView\n */\nexport function getOrCreateComponentTView(def: ComponentDef<any>): TView {\n  const tView = def.tView;\n\n  // Create a TView if there isn't one, or recreate it if the first create pass didn't\n  // complete successfully since we can't know for sure whether it's in a usable shape.\n  if (tView === null || tView.incompleteFirstPass) {\n    // Declaration node here is null since this function is called when we dynamically create a\n    // component and hence there is no declaration.\n    const declTNode = null;\n    return (def.tView = createTView(\n      TViewType.Component,\n      declTNode,\n      def.template,\n      def.decls,\n      def.vars,\n      def.directiveDefs,\n      def.pipeDefs,\n      def.viewQuery,\n      def.schemas,\n      def.consts,\n      def.id,\n    ));\n  }\n\n  return tView;\n}\n\nexport function createLView<T>(\n  parentLView: LView | null,\n  tView: TView,\n  context: T | null,\n  flags: LViewFlags,\n  host: RElement | null,\n  tHostNode: TNode | null,\n  environment: LViewEnvironment | null,\n  renderer: Renderer | null,\n  injector: Injector | null,\n  embeddedViewInjector: Injector | null,\n  hydrationInfo: DehydratedView | null,\n): LView<T> {\n  const lView = tView.blueprint.slice() as LView;\n  lView[HOST] = host;\n  lView[FLAGS] =\n    flags |\n    LViewFlags.CreationMode |\n    LViewFlags.Attached |\n    LViewFlags.FirstLViewPass |\n    LViewFlags.Dirty |\n    LViewFlags.RefreshView;\n  if (\n    embeddedViewInjector !== null ||\n    (parentLView && parentLView[FLAGS] & LViewFlags.HasEmbeddedViewInjector)\n  ) {\n    lView[FLAGS] |= LViewFlags.HasEmbeddedViewInjector;\n  }\n  resetPreOrderHookFlags(lView);\n  ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);\n  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n  lView[CONTEXT] = context;\n  lView[ENVIRONMENT] = (environment || (parentLView && parentLView[ENVIRONMENT]))!;\n  ngDevMode && assertDefined(lView[ENVIRONMENT], 'LViewEnvironment is required');\n  lView[RENDERER] = (renderer || (parentLView && parentLView[RENDERER]))!;\n  ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n  lView[INJECTOR as any] = injector || (parentLView && parentLView[INJECTOR]) || null;\n  lView[T_HOST] = tHostNode;\n  lView[ID] = getUniqueLViewId();\n  lView[HYDRATION] = hydrationInfo;\n  lView[EMBEDDED_VIEW_INJECTOR as any] = embeddedViewInjector;\n\n  ngDevMode &&\n    assertEqual(\n      tView.type == TViewType.Embedded ? parentLView !== null : true,\n      true,\n      'Embedded views must have parentLView',\n    );\n  lView[DECLARATION_COMPONENT_VIEW] =\n    tView.type == TViewType.Embedded ? parentLView![DECLARATION_COMPONENT_VIEW] : lView;\n  return lView as LView<T>;\n}\n\nexport function createComponentLView<T>(\n  lView: LView,\n  hostTNode: TElementNode,\n  def: ComponentDef<T>,\n): LView {\n  const native = getNativeByTNode(hostTNode, lView) as RElement;\n  const tView = getOrCreateComponentTView(def);\n\n  // Only component views should be added to the view tree directly. Embedded views are\n  // accessed through their containers because they may be removed / re-added later.\n  const rendererFactory = lView[ENVIRONMENT].rendererFactory;\n  const componentView = addToEndOfViewTree(\n    lView,\n    createLView(\n      lView,\n      tView,\n      null,\n      getInitialLViewFlagsFromDef(def),\n      native,\n      hostTNode as TElementNode,\n      null,\n      rendererFactory.createRenderer(native, def),\n      null,\n      null,\n      null,\n    ),\n  );\n\n  // Component view will always be created before any injected LContainers,\n  // so this is a regular element, wrap it with the component view\n  return (lView[hostTNode.index] = componentView);\n}\n\n/**\n * Gets the initial set of LView flags based on the component definition that the LView represents.\n * @param def Component definition from which to determine the flags.\n */\nexport function getInitialLViewFlagsFromDef(def: ComponentDef<unknown>): LViewFlags {\n  let flags = LViewFlags.CheckAlways;\n  if (def.signals) {\n    flags = LViewFlags.SignalView;\n  } else if (def.onPush) {\n    flags = LViewFlags.Dirty;\n  }\n  return flags;\n}\n\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply()), we need to adjust the blueprint for future template passes.\n *\n * @param tView `TView` associated with `LView`\n * @param lView The `LView` containing the blueprint to adjust\n * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0\n * @param initialValue Initial value to store in blueprint\n */\nexport function allocExpando(\n  tView: TView,\n  lView: LView,\n  numSlotsToAlloc: number,\n  initialValue: unknown,\n): number {\n  if (numSlotsToAlloc === 0) return -1;\n  if (ngDevMode) {\n    assertFirstCreatePass(tView);\n    assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');\n    assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');\n    assertEqual(\n      tView.data.length,\n      tView.blueprint.length,\n      'Expecting Blueprint to be same size as TView',\n    );\n    assertFirstUpdatePass(tView);\n  }\n  const allocIdx = lView.length;\n  for (let i = 0; i < numSlotsToAlloc; i++) {\n    lView.push(initialValue);\n    tView.blueprint.push(initialValue);\n    tView.data.push(null);\n  }\n  return allocIdx;\n}\n\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param lView The view where LView or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param lViewOrLContainer The LView or LContainer to add to the view tree\n * @returns The state passed in\n */\nexport function addToEndOfViewTree<T extends LView | LContainer>(\n  lView: LView,\n  lViewOrLContainer: T,\n): T {\n  // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n  // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n  // of order, the change detection will run out of order, as the act of retrieving the the\n  // LContainer from the RNode is what adds it to the queue.\n  if (lView[CHILD_HEAD]) {\n    lView[CHILD_TAIL]![NEXT] = lViewOrLContainer;\n  } else {\n    lView[CHILD_HEAD] = lViewOrLContainer;\n  }\n  lView[CHILD_TAIL] = lViewOrLContainer;\n  return lViewOrLContainer;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {assertGreaterThan} from '../../util/assert';\nimport {assertIndexInDeclRange} from '../assert';\nimport {executeCheckHooks, executeInitAndCheckHooks} from '../hooks';\nimport {FLAGS, InitPhaseState, LView, LViewFlags, TVIEW, TView} from '../interfaces/view';\nimport {\n  getLView,\n  getSelectedIndex,\n  getTView,\n  isInCheckNoChangesMode,\n  setSelectedIndex,\n} from '../state';\n\n/**\n * Advances to an element for later binding instructions.\n *\n * Used in conjunction with instructions like {@link property} to act on elements with specified\n * indices, for example those created with {@link element} or {@link elementStart}.\n *\n * ```ts\n * (rf: RenderFlags, ctx: any) => {\n *   if (rf & 1) {\n *     text(0, 'Hello');\n *     text(1, 'Goodbye')\n *     element(2, 'div');\n *   }\n *   if (rf & 2) {\n *     advance(2); // Advance twice to the <div>.\n *     property('title', 'test');\n *   }\n *  }\n * ```\n * @param delta Number of elements to advance forwards by.\n *\n * @codeGenApi\n */\nexport function ɵɵadvance(delta: number = 1): void {\n  ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');\n  selectIndexInternal(\n    getTView(),\n    getLView(),\n    getSelectedIndex() + delta,\n    !!ngDevMode && isInCheckNoChangesMode(),\n  );\n}\n\nexport function selectIndexInternal(\n  tView: TView,\n  lView: LView,\n  index: number,\n  checkNoChangesMode: boolean,\n) {\n  ngDevMode && assertIndexInDeclRange(lView[TVIEW], index);\n\n  // Flush the initial hooks for elements in the view that have been added up to this point.\n  // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n  if (!checkNoChangesMode) {\n    const hooksInitPhaseCompleted =\n      (lView[FLAGS] & LViewFlags.InitPhaseStateMask) === InitPhaseState.InitPhaseCompleted;\n    if (hooksInitPhaseCompleted) {\n      const preOrderCheckHooks = tView.preOrderCheckHooks;\n      if (preOrderCheckHooks !== null) {\n        executeCheckHooks(lView, preOrderCheckHooks, index);\n      }\n    } else {\n      const preOrderHooks = tView.preOrderHooks;\n      if (preOrderHooks !== null) {\n        executeInitAndCheckHooks(lView, preOrderHooks, InitPhaseState.OnInitHooksToBeRun, index);\n      }\n    }\n  }\n\n  // We must set the selected index *after* running the hooks, because hooks may have side-effects\n  // that cause other template functions to run, thus updating the selected index, which is global\n  // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n  // will be altered by the time we leave the `ɵɵadvance` instruction.\n  setSelectedIndex(index);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Flags describing an input for a directive. */\nexport enum InputFlags {\n  None = 0,\n  SignalBased = 1 << 0,\n  HasDecoratorInputTransform = 1 << 1,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {setActiveConsumer, SIGNAL} from '@angular/core/primitives/signals';\n\nimport {InputSignalWithTransform} from '../../authoring/input/input_signal';\nimport {InputSignalNode} from '../../authoring/input/input_signal_node';\nimport {applyValueToInputField} from '../apply_value_input_field';\nimport {DirectiveDef} from '../interfaces/definition';\nimport {InputFlags} from '../interfaces/input_flags';\nimport {NodeInjectorFactory} from '../interfaces/injector';\n\nexport function writeToDirectiveInput<T>(\n  def: DirectiveDef<T>,\n  instance: T,\n  publicName: string,\n  value: unknown,\n) {\n  const prevConsumer = setActiveConsumer(null);\n  try {\n    if (ngDevMode) {\n      if (!def.inputs.hasOwnProperty(publicName)) {\n        throw new Error(\n          `ASSERTION ERROR: Directive ${def.type.name} does not have an input with a public name of \"${publicName}\"`,\n        );\n      }\n\n      // Usually we resolve the directive instance using `LView[someIndex]` before writing to an\n      // input, however if the read happens to early, the `LView[someIndex]` might actually be a\n      // `NodeInjectorFactory`. Check for this specific case here since it can break in subtle ways.\n      if (instance instanceof NodeInjectorFactory) {\n        throw new Error(\n          `ASSERTION ERROR: Cannot write input to factory for type ${def.type.name}. Directive has not been created yet.`,\n        );\n      }\n    }\n\n    const [privateName, flags, transform] = def.inputs[publicName];\n\n    // If we know we are dealing with a signal input, we cache its reference\n    // in a tree-shakable way. The input signal node can then be used for\n    // value transform execution or actual value updates without introducing\n    // additional megamorphic accesses for accessing the instance field.\n    let inputSignalNode: InputSignalNode<unknown, unknown> | null = null;\n    if ((flags & InputFlags.SignalBased) !== 0) {\n      const field = (instance as any)[privateName] as InputSignalWithTransform<unknown, unknown>;\n      inputSignalNode = field[SIGNAL];\n    }\n\n    // If there is a signal node and a transform, run it before potentially\n    // delegating to features like `NgOnChanges`.\n    if (inputSignalNode !== null && inputSignalNode.transformFn !== undefined) {\n      value = inputSignalNode.transformFn(value);\n    } else if (transform !== null) {\n      // If there is a decorator input transform, run it.\n      value = transform.call(instance, value);\n    }\n\n    if (def.setInput !== null) {\n      def.setInput(instance, inputSignalNode, value, publicName, privateName);\n    } else {\n      applyValueToInputField(instance, inputSignalNode, privateName, value);\n    }\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector} from '../../di/injector';\nimport {ErrorHandler} from '../../error_handler';\nimport {hasSkipHydrationAttrOnRElement} from '../../hydration/skip_hydration';\nimport {PRESERVE_HOST_CONTENT, PRESERVE_HOST_CONTENT_DEFAULT} from '../../hydration/tokens';\nimport {processTextNodeMarkersBeforeHydration} from '../../hydration/utils';\nimport {ViewEncapsulation} from '../../metadata/view';\nimport {\n  validateAgainstEventAttributes,\n  validateAgainstEventProperties,\n} from '../../sanitization/sanitization';\nimport {assertIndexInRange, assertNotSame} from '../../util/assert';\nimport {escapeCommentText} from '../../util/dom';\nimport {normalizeDebugBindingName, normalizeDebugBindingValue} from '../../util/ng_reflect';\nimport {stringify} from '../../util/stringify';\nimport {assertFirstCreatePass, assertLView} from '../assert';\nimport {attachPatchData} from '../context_discovery';\nimport {getNodeInjectable, getOrCreateNodeInjectorForNode} from '../di';\nimport {throwMultipleComponentError} from '../errors';\nimport {ComponentDef, ComponentTemplate, DirectiveDef, RenderFlags} from '../interfaces/definition';\nimport {\n  InitialInputData,\n  InitialInputs,\n  LocalRefExtractor,\n  NodeInputBindings,\n  TContainerNode,\n  TDirectiveHostNode,\n  TElementContainerNode,\n  TElementNode,\n  TNode,\n  TNodeFlags,\n  TNodeType,\n} from '../interfaces/node';\nimport {Renderer} from '../interfaces/renderer';\nimport {RComment, RElement} from '../interfaces/renderer_dom';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {isComponentDef, isComponentHost} from '../interfaces/type_checks';\nimport {\n  CONTEXT,\n  FLAGS,\n  HEADER_OFFSET,\n  INJECTOR,\n  LView,\n  LViewFlags,\n  RENDERER,\n  TData,\n  TView,\n} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {isNodeMatchingSelectorList} from '../node_selector_matcher';\nimport {profiler} from '../profiler';\nimport {ProfilerEvent} from '../profiler_types';\nimport {\n  getBindingsEnabled,\n  getCurrentDirectiveIndex,\n  getSelectedIndex,\n  isInCheckNoChangesMode,\n  setCurrentDirectiveIndex,\n  setSelectedIndex,\n} from '../state';\nimport {NO_CHANGE} from '../tokens';\nimport {INTERPOLATION_DELIMITER} from '../util/misc_utils';\nimport {renderStringify} from '../util/stringify_utils';\nimport {getComponentLViewByIndex, getNativeByTNode, unwrapLView} from '../util/view_utils';\n\nimport {clearElementContents} from '../dom_node_manipulation';\nimport {createComponentLView} from '../view/construction';\nimport {selectIndexInternal} from './advance';\nimport {handleUnknownPropertyError, isPropertyValid, matchingSchemas} from './element_validation';\nimport {writeToDirectiveInput} from './write_to_directive_input';\n\nexport function executeTemplate<T>(\n  tView: TView,\n  lView: LView<T>,\n  templateFn: ComponentTemplate<T>,\n  rf: RenderFlags,\n  context: T,\n) {\n  const prevSelectedIndex = getSelectedIndex();\n  const isUpdatePhase = rf & RenderFlags.Update;\n  try {\n    setSelectedIndex(-1);\n    if (isUpdatePhase && lView.length > HEADER_OFFSET) {\n      // When we're updating, inherently select 0 so we don't\n      // have to generate that instruction for most update blocks.\n      selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());\n    }\n\n    const preHookType = isUpdatePhase\n      ? ProfilerEvent.TemplateUpdateStart\n      : ProfilerEvent.TemplateCreateStart;\n    profiler(preHookType, context as unknown as {});\n    templateFn(rf, context);\n  } finally {\n    setSelectedIndex(prevSelectedIndex);\n\n    const postHookType = isUpdatePhase\n      ? ProfilerEvent.TemplateUpdateEnd\n      : ProfilerEvent.TemplateCreateEnd;\n    profiler(postHookType, context as unknown as {});\n  }\n}\n\n/**\n * Creates directive instances.\n */\nexport function createDirectivesInstances(tView: TView, lView: LView, tNode: TDirectiveHostNode) {\n  instantiateAllDirectives(tView, lView, tNode);\n  if ((tNode.flags & TNodeFlags.hasHostBindings) === TNodeFlags.hasHostBindings) {\n    invokeDirectivesHostBindings(tView, lView, tNode);\n  }\n}\n\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n */\nexport function saveResolvedLocalsInData(\n  viewData: LView,\n  tNode: TDirectiveHostNode,\n  localRefExtractor: LocalRefExtractor = getNativeByTNode,\n): void {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < localNames.length; i += 2) {\n      const index = localNames[i + 1] as number;\n      const value =\n        index === -1\n          ? localRefExtractor(\n              tNode as TElementNode | TContainerNode | TElementContainerNode,\n              viewData,\n            )\n          : viewData[index];\n      viewData[localIndex++] = value;\n    }\n  }\n}\n\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param renderer the renderer used to locate the element.\n * @param elementOrSelector Render element or CSS selector to locate the element.\n * @param encapsulation View Encapsulation defined for component that requests host element.\n * @param injector Root view injector instance.\n */\nexport function locateHostElement(\n  renderer: Renderer,\n  elementOrSelector: RElement | string,\n  encapsulation: ViewEncapsulation,\n  injector: Injector,\n): RElement {\n  // Note: we use default value for the `PRESERVE_HOST_CONTENT` here even though it's a\n  // tree-shakable one (providedIn:'root'). This code path can be triggered during dynamic\n  // component creation (after calling ViewContainerRef.createComponent) when an injector\n  // instance can be provided. The injector instance might be disconnected from the main DI\n  // tree, thus the `PRESERVE_HOST_CONTENT` would not be able to instantiate. In this case, the\n  // default value will be used.\n  const preserveHostContent = injector.get(PRESERVE_HOST_CONTENT, PRESERVE_HOST_CONTENT_DEFAULT);\n\n  // When using native Shadow DOM, do not clear host element to allow native slot\n  // projection.\n  const preserveContent = preserveHostContent || encapsulation === ViewEncapsulation.ShadowDom;\n  const rootElement = renderer.selectRootElement(elementOrSelector, preserveContent);\n  applyRootElementTransform(rootElement as HTMLElement);\n  return rootElement;\n}\n\n/**\n * Applies any root element transformations that are needed. If hydration is enabled,\n * this will process corrupted text nodes.\n *\n * @param rootElement the app root HTML Element\n */\nexport function applyRootElementTransform(rootElement: HTMLElement) {\n  _applyRootElementTransformImpl(rootElement as HTMLElement);\n}\n\n/**\n * Reference to a function that applies transformations to the root HTML element\n * of an app. When hydration is enabled, this processes any corrupt text nodes\n * so they are properly hydratable on the client.\n *\n * @param rootElement the app root HTML Element\n */\nlet _applyRootElementTransformImpl: typeof applyRootElementTransformImpl = () => null;\n\n/**\n * Processes text node markers before hydration begins. This replaces any special comment\n * nodes that were added prior to serialization are swapped out to restore proper text\n * nodes before hydration.\n *\n * @param rootElement the app root HTML Element\n */\nexport function applyRootElementTransformImpl(rootElement: HTMLElement) {\n  if (hasSkipHydrationAttrOnRElement(rootElement)) {\n    // Handle a situation when the `ngSkipHydration` attribute is applied\n    // to the root node of an application. In this case, we should clear\n    // the contents and render everything from scratch.\n    clearElementContents(rootElement as RElement);\n  } else {\n    processTextNodeMarkersBeforeHydration(rootElement);\n  }\n}\n\n/**\n * Sets the implementation for the `applyRootElementTransform` function.\n */\nexport function enableApplyRootElementTransformImpl() {\n  _applyRootElementTransformImpl = applyRootElementTransformImpl;\n}\n\n/**\n * Mapping between attributes names that don't correspond to their element property names.\n *\n * Performance note: this function is written as a series of if checks (instead of, say, a property\n * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of\n * mapping property names. Do NOT change without benchmarking.\n *\n * Note: this mapping has to be kept in sync with the equally named mapping in the template\n * type-checking machinery of ngtsc.\n */\nfunction mapPropName(name: string): string {\n  if (name === 'class') return 'className';\n  if (name === 'for') return 'htmlFor';\n  if (name === 'formaction') return 'formAction';\n  if (name === 'innerHtml') return 'innerHTML';\n  if (name === 'readonly') return 'readOnly';\n  if (name === 'tabindex') return 'tabIndex';\n  return name;\n}\n\nexport function elementPropertyInternal<T>(\n  tView: TView,\n  tNode: TNode,\n  lView: LView,\n  propName: string,\n  value: T,\n  renderer: Renderer,\n  sanitizer: SanitizerFn | null | undefined,\n  nativeOnly: boolean,\n): void {\n  ngDevMode && assertNotSame(value, NO_CHANGE as any, 'Incoming value should never be NO_CHANGE.');\n\n  if (!nativeOnly) {\n    const hasSetInput = setAllInputsForProperty(tNode, tView, lView, propName, value);\n\n    if (hasSetInput) {\n      isComponentHost(tNode) && markDirtyIfOnPush(lView, tNode.index);\n      ngDevMode && setNgReflectProperties(lView, tView, tNode, propName, value);\n      return; // Stop propcessing if we've matched at least one input.\n    }\n  }\n\n  if (tNode.type & TNodeType.AnyRNode) {\n    const element = getNativeByTNode(tNode, lView) as RElement | RComment;\n    propName = mapPropName(propName);\n\n    if (ngDevMode) {\n      validateAgainstEventProperties(propName);\n      if (!isPropertyValid(element, propName, tNode.value, tView.schemas)) {\n        handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n      }\n      ngDevMode.rendererSetProperty++;\n    }\n\n    // It is assumed that the sanitizer is only added when the compiler determines that the\n    // property is risky, so sanitization can be done without further checks.\n    value = sanitizer != null ? (sanitizer(value, tNode.value || '', propName) as any) : value;\n    renderer.setProperty(element as RElement, propName, value);\n  } else if (tNode.type & TNodeType.AnyContainer) {\n    // If the node is a container and the property didn't\n    // match any of the inputs or schemas we should throw.\n    if (ngDevMode && !matchingSchemas(tView.schemas, tNode.value)) {\n      handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n    }\n  }\n}\n\n/** If node is an OnPush component, marks its LView dirty. */\nexport function markDirtyIfOnPush(lView: LView, viewIndex: number): void {\n  ngDevMode && assertLView(lView);\n  const childComponentLView = getComponentLViewByIndex(viewIndex, lView);\n  if (!(childComponentLView[FLAGS] & LViewFlags.CheckAlways)) {\n    childComponentLView[FLAGS] |= LViewFlags.Dirty;\n  }\n}\n\nfunction setNgReflectProperty(lView: LView, tNode: TNode, attrName: string, value: any) {\n  const element = getNativeByTNode(tNode, lView) as RElement | RComment;\n  const renderer = lView[RENDERER];\n  attrName = normalizeDebugBindingName(attrName);\n  const debugValue = normalizeDebugBindingValue(value);\n  if (tNode.type & TNodeType.AnyRNode) {\n    if (value == null) {\n      renderer.removeAttribute(element as RElement, attrName);\n    } else {\n      renderer.setAttribute(element as RElement, attrName, debugValue);\n    }\n  } else {\n    const textContent = escapeCommentText(\n      `bindings=${JSON.stringify({[attrName]: debugValue}, null, 2)}`,\n    );\n    renderer.setValue(element as RComment, textContent);\n  }\n}\n\nfunction setNgReflectProperties(\n  lView: LView,\n  tView: TView,\n  tNode: TNode,\n  publicName: string,\n  value: any,\n) {\n  if (!(tNode.type & (TNodeType.AnyRNode | TNodeType.Container))) {\n    return;\n  }\n\n  const inputConfig = tNode.inputs?.[publicName];\n  const hostInputConfig = tNode.hostDirectiveInputs?.[publicName];\n\n  if (hostInputConfig) {\n    for (let i = 0; i < hostInputConfig.length; i += 2) {\n      const index = hostInputConfig[i] as number;\n      const publicName = hostInputConfig[i + 1] as string;\n      const def = tView.data[index] as DirectiveDef<unknown>;\n      setNgReflectProperty(lView, tNode, def.inputs[publicName][0], value);\n    }\n  }\n\n  // Note: we set the private name of the input as the reflected property, not the public one.\n  if (inputConfig) {\n    for (const index of inputConfig) {\n      const def = tView.data[index] as DirectiveDef<unknown>;\n      setNgReflectProperty(lView, tNode, def.inputs[publicName][0], value);\n    }\n  }\n}\n\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n */\nfunction instantiateAllDirectives(tView: TView, lView: LView, tNode: TDirectiveHostNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n\n  // The component view needs to be created before creating the node injector\n  // since it is used to inject some special symbols like `ChangeDetectorRef`.\n  if (isComponentHost(tNode)) {\n    ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode);\n    createComponentLView(\n      lView,\n      tNode as TElementNode,\n      tView.data[start + tNode.componentOffset] as ComponentDef<unknown>,\n    );\n  }\n\n  if (!tView.firstCreatePass) {\n    getOrCreateNodeInjectorForNode(tNode, lView);\n  }\n\n  const initialInputs = tNode.initialInputs;\n  for (let i = start; i < end; i++) {\n    const def = tView.data[i] as DirectiveDef<any>;\n    const directive = getNodeInjectable(lView, tView, i, tNode);\n    attachPatchData(directive, lView);\n\n    if (initialInputs !== null) {\n      setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs!);\n    }\n\n    if (isComponentDef(def)) {\n      const componentView = getComponentLViewByIndex(tNode.index, lView);\n      componentView[CONTEXT] = getNodeInjectable(lView, tView, i, tNode);\n    }\n  }\n}\n\nexport function invokeDirectivesHostBindings(tView: TView, lView: LView, tNode: TNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const elementIndex = tNode.index;\n  const currentDirectiveIndex = getCurrentDirectiveIndex();\n  try {\n    setSelectedIndex(elementIndex);\n    for (let dirIndex = start; dirIndex < end; dirIndex++) {\n      const def = tView.data[dirIndex] as DirectiveDef<unknown>;\n      const directive = lView[dirIndex];\n      setCurrentDirectiveIndex(dirIndex);\n      if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {\n        invokeHostBindingsInCreationMode(def, directive);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n    setCurrentDirectiveIndex(currentDirectiveIndex);\n  }\n}\n\n/**\n * Invoke the host bindings in creation mode.\n *\n * @param def `DirectiveDef` which may contain the `hostBindings` function.\n * @param directive Instance of directive.\n */\nexport function invokeHostBindingsInCreationMode(def: DirectiveDef<any>, directive: any) {\n  if (def.hostBindings !== null) {\n    def.hostBindings!(RenderFlags.Create, directive);\n  }\n}\n\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n */\nexport function findDirectiveDefMatches(\n  tView: TView,\n  tNode: TElementNode | TContainerNode | TElementContainerNode,\n): DirectiveDef<unknown>[] | null {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode | TNodeType.AnyContainer);\n\n  const registry = tView.directiveRegistry;\n  let matches: DirectiveDef<unknown>[] | null = null;\n  if (registry) {\n    for (let i = 0; i < registry.length; i++) {\n      const def = registry[i] as ComponentDef<any> | DirectiveDef<any>;\n      if (isNodeMatchingSelectorList(tNode, def.selectors!, /* isProjectionMode */ false)) {\n        matches ??= [];\n\n        if (isComponentDef(def)) {\n          if (ngDevMode) {\n            assertTNodeType(\n              tNode,\n              TNodeType.Element,\n              `\"${tNode.value}\" tags cannot be used as component hosts. ` +\n                `Please use a different tag to activate the ${stringify(def.type)} component.`,\n            );\n\n            if (matches.length && isComponentDef(matches[0])) {\n              throwMultipleComponentError(tNode, matches.find(isComponentDef)!.type, def.type);\n            }\n          }\n\n          matches.unshift(def);\n        } else {\n          matches.push(def);\n        }\n      }\n    }\n  }\n\n  return matches;\n}\n\nexport function elementAttributeInternal(\n  tNode: TNode,\n  lView: LView,\n  name: string,\n  value: any,\n  sanitizer: SanitizerFn | null | undefined,\n  namespace: string | null | undefined,\n) {\n  if (ngDevMode) {\n    assertNotSame(value, NO_CHANGE as any, 'Incoming value should never be NO_CHANGE.');\n    validateAgainstEventAttributes(name);\n    assertTNodeType(\n      tNode,\n      TNodeType.Element,\n      `Attempted to set attribute \\`${name}\\` on a container node. ` +\n        `Host bindings are not valid on ng-container or ng-template.`,\n    );\n  }\n  const element = getNativeByTNode(tNode, lView) as RElement;\n  setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);\n}\n\nexport function setElementAttribute(\n  renderer: Renderer,\n  element: RElement,\n  namespace: string | null | undefined,\n  tagName: string | null,\n  name: string,\n  value: any,\n  sanitizer: SanitizerFn | null | undefined,\n) {\n  if (value == null) {\n    ngDevMode && ngDevMode.rendererRemoveAttribute++;\n    renderer.removeAttribute(element, name, namespace);\n  } else {\n    ngDevMode && ngDevMode.rendererSetAttribute++;\n    const strValue =\n      sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);\n\n    renderer.setAttribute(element, name, strValue as string, namespace);\n  }\n}\n\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @param lView Current LView that is being processed.\n * @param directiveIndex Index of the directive in directives array\n * @param instance Instance of the directive on which to set the initial inputs\n * @param def The directive def that contains the list of inputs\n * @param tNode The static data for this node\n */\nfunction setInputsFromAttrs<T>(\n  lView: LView,\n  directiveIndex: number,\n  instance: T,\n  def: DirectiveDef<T>,\n  tNode: TNode,\n  initialInputData: InitialInputData,\n): void {\n  const initialInputs: InitialInputs | null = initialInputData![directiveIndex];\n  if (initialInputs !== null) {\n    for (let i = 0; i < initialInputs.length; i += 2) {\n      const lookupName = initialInputs[i];\n      const value = initialInputs[i + 1];\n\n      writeToDirectiveInput<T>(def, instance, lookupName, value);\n\n      if (ngDevMode) {\n        setNgReflectProperty(lView, tNode, def.inputs[lookupName][0], value);\n      }\n    }\n  }\n}\n\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n\n/**\n * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.\n *\n * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:\n * - a bound property name;\n * - a static parts of interpolated strings;\n *\n * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a\n * property binding metadata will be stored in `TView.data` at the same index as a bound value in\n * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the\n * following format:\n * - `propertyName` for bound properties;\n * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for\n * interpolated properties.\n *\n * @param tData `TData` where meta-data will be saved;\n * @param tNode `TNode` that is a target of the binding;\n * @param propertyName bound property name;\n * @param bindingIndex binding index in `LView`\n * @param interpolationParts static interpolation parts (for property interpolations)\n */\nexport function storePropertyBindingMetadata(\n  tData: TData,\n  tNode: TNode,\n  propertyName: string,\n  bindingIndex: number,\n  ...interpolationParts: string[]\n) {\n  // Binding meta-data are stored only the first time a given property instruction is processed.\n  // Since we don't have a concept of the \"first update pass\" we need to check for presence of the\n  // binding meta-data to decide if one should be stored (or if was stored already).\n  if (tData[bindingIndex] === null) {\n    if (!tNode.inputs?.[propertyName] && !tNode.hostDirectiveInputs?.[propertyName]) {\n      const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);\n      propBindingIdxs.push(bindingIndex);\n      let bindingMetadata = propertyName;\n      if (interpolationParts.length > 0) {\n        bindingMetadata +=\n          INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);\n      }\n      tData[bindingIndex] = bindingMetadata;\n    }\n  }\n}\n\n/**\n * There are cases where the sub component's renderer needs to be included\n * instead of the current renderer (see the componentSyntheticHost* instructions).\n */\nexport function loadComponentRenderer(\n  currentDef: DirectiveDef<any> | null,\n  tNode: TNode,\n  lView: LView,\n): Renderer {\n  // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root\n  // component (see packages/core/src/render3/component.ts). This is not consistent with the process\n  // of creating inner components, when current directive index is available in the state. In order\n  // to avoid relying on current def being `null` (thus special-casing root component creation), the\n  // process of creating root component should be unified with the process of creating inner\n  // components.\n  if (currentDef === null || isComponentDef(currentDef)) {\n    lView = unwrapLView(lView[tNode.index])!;\n  }\n  return lView[RENDERER];\n}\n\n/** Handles an error thrown in an LView. */\nexport function handleError(lView: LView, error: any): void {\n  const injector = lView[INJECTOR];\n  const errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n  errorHandler && errorHandler.handleError(error);\n}\n\n/**\n * Set all directive inputs with the specific public name on the node.\n *\n * @param tNode TNode on which the input is being set.\n * @param tView Current TView\n * @param lView `LView` which contains the directives.\n * @param publicName Public name of the input being set.\n * @param value Value to set.\n */\nexport function setAllInputsForProperty(\n  tNode: TNode,\n  tView: TView,\n  lView: LView,\n  publicName: string,\n  value: unknown,\n): boolean {\n  const inputs = tNode.inputs?.[publicName];\n  const hostDirectiveInputs = tNode.hostDirectiveInputs?.[publicName];\n  let hasMatch = false;\n\n  if (hostDirectiveInputs) {\n    for (let i = 0; i < hostDirectiveInputs.length; i += 2) {\n      const index = hostDirectiveInputs[i] as number;\n      ngDevMode && assertIndexInRange(lView, index);\n      const publicName = hostDirectiveInputs[i + 1] as string;\n      const def = tView.data[index] as DirectiveDef<unknown>;\n      writeToDirectiveInput(def, lView[index], publicName, value);\n      hasMatch = true;\n    }\n  }\n\n  if (inputs) {\n    for (const index of inputs) {\n      ngDevMode && assertIndexInRange(lView, index);\n      const instance = lView[index];\n      const def = tView.data[index] as DirectiveDef<any>;\n      writeToDirectiveInput(def, instance, publicName, value);\n      hasMatch = true;\n    }\n  }\n\n  return hasMatch;\n}\n\n/**\n * Sets an input value only on a specific directive and its host directives.\n * @param tNode TNode on which the input is being set.\n * @param tView Current TView\n * @param lView `LView` which contains the directives.\n * @param target Directive on which to set the input.\n * @param publicName Public name of the input being set.\n * @param value Value to set.\n */\nexport function setDirectiveInput(\n  tNode: TNode,\n  tView: TView,\n  lView: LView,\n  target: DirectiveDef<unknown>,\n  publicName: string,\n  value: string,\n): boolean {\n  let hostIndex: number | null = null;\n  let hostDirectivesStart: number | null = null;\n  let hostDirectivesEnd: number | null = null;\n  let hasSet = false;\n\n  if (ngDevMode && !tNode.directiveToIndex?.has(target.type)) {\n    throw new Error(`Node does not have a directive with type ${target.type.name}`);\n  }\n\n  const data = tNode.directiveToIndex!.get(target.type)!;\n\n  if (typeof data === 'number') {\n    hostIndex = data;\n  } else {\n    [hostIndex, hostDirectivesStart, hostDirectivesEnd] = data;\n  }\n\n  if (\n    hostDirectivesStart !== null &&\n    hostDirectivesEnd !== null &&\n    tNode.hostDirectiveInputs?.hasOwnProperty(publicName)\n  ) {\n    const hostDirectiveInputs = tNode.hostDirectiveInputs[publicName];\n\n    for (let i = 0; i < hostDirectiveInputs.length; i += 2) {\n      const index = hostDirectiveInputs[i] as number;\n\n      if (index >= hostDirectivesStart && index <= hostDirectivesEnd) {\n        ngDevMode && assertIndexInRange(lView, index);\n        const def = tView.data[index] as DirectiveDef<unknown>;\n        const hostDirectivePublicName = hostDirectiveInputs[i + 1] as string;\n        writeToDirectiveInput(def, lView[index], hostDirectivePublicName, value);\n        hasSet = true;\n      } else if (index > hostDirectivesEnd) {\n        // Directives here are in ascending order so we can stop looking once we're past the range.\n        break;\n      }\n    }\n  }\n\n  if (hostIndex !== null) {\n    ngDevMode && assertIndexInRange(lView, hostIndex);\n    writeToDirectiveInput(target, lView[hostIndex], publicName, value);\n    hasSet = true;\n  }\n\n  return hasSet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {retrieveHydrationInfo} from '../../hydration/utils';\nimport {assertEqual, assertNotReactive} from '../../util/assert';\nimport {RenderFlags} from '../interfaces/definition';\nimport {\n  CONTEXT,\n  FLAGS,\n  HOST,\n  HYDRATION,\n  INJECTOR,\n  LView,\n  LViewFlags,\n  QUERIES,\n  TVIEW,\n  TView,\n} from '../interfaces/view';\nimport {profiler} from '../profiler';\nimport {ProfilerEvent} from '../profiler_types';\nimport {executeViewQueryFn, refreshContentQueries} from '../queries/query_execution';\nimport {enterView, leaveView} from '../state';\nimport {getComponentLViewByIndex, isCreationMode} from '../util/view_utils';\n\nimport {executeTemplate} from './shared';\n\nexport function renderComponent(hostLView: LView, componentHostIdx: number) {\n  ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  const componentTView = componentView[TVIEW];\n  syncViewWithBlueprint(componentTView, componentView);\n\n  const hostRNode = componentView[HOST];\n  // Populate an LView with hydration info retrieved from the DOM via TransferState.\n  if (hostRNode !== null && componentView[HYDRATION] === null) {\n    componentView[HYDRATION] = retrieveHydrationInfo(hostRNode, componentView[INJECTOR]);\n  }\n\n  profiler(ProfilerEvent.ComponentStart);\n\n  renderView(componentTView, componentView, componentView[CONTEXT]);\n\n  profiler(ProfilerEvent.ComponentEnd, componentView[CONTEXT] as any as {});\n}\n\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```html\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param tView The `TView` that contains the blueprint for syncing\n * @param lView The view to sync\n */\nexport function syncViewWithBlueprint(tView: TView, lView: LView) {\n  for (let i = lView.length; i < tView.blueprint.length; i++) {\n    lView.push(tView.blueprint[i]);\n  }\n}\n\n/**\n * Processes a view in the creation mode. This includes a number of steps in a specific order:\n * - creating view query functions (if any);\n * - executing a template function in the creation mode;\n * - updating static queries (if any);\n * - creating child components defined in a given view.\n */\nexport function renderView<T>(tView: TView, lView: LView<T>, context: T): void {\n  ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');\n  ngDevMode && assertNotReactive(renderView.name);\n  enterView(lView);\n  try {\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn<T>(RenderFlags.Create, viewQuery, context);\n    }\n\n    // Execute a template associated with this view, if it exists. A template function might not be\n    // defined for the root component views.\n    const templateFn = tView.template;\n    if (templateFn !== null) {\n      executeTemplate<T>(tView, lView, templateFn, RenderFlags.Create, context);\n    }\n\n    // This needs to be set before children are processed to support recursive components.\n    // This must be set to false immediately after the first creation run because in an\n    // ngFor loop, all the views will be created together before update mode runs and turns\n    // off firstCreatePass. If we don't set it here, instances will perform directive\n    // matching, etc again and again.\n    if (tView.firstCreatePass) {\n      tView.firstCreatePass = false;\n    }\n\n    // Mark all queries active in this view as dirty. This is necessary for signal-based queries to\n    // have a clear marking point where we can read query results atomically (for a given view).\n    lView[QUERIES]?.finishViewCreation(tView);\n\n    // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n    // content queries are resolved during change detection (i.e. update mode), after embedded\n    // views are refreshed (see block above).\n    if (tView.staticContentQueries) {\n      refreshContentQueries(tView, lView);\n    }\n\n    // We must materialize query results before child components are processed\n    // in case a child component has projected a container. The LContainer needs\n    // to exist so the embedded views are properly attached by the container.\n    if (tView.staticViewQueries) {\n      executeViewQueryFn<T>(RenderFlags.Update, tView.viewQuery!, context);\n    }\n\n    // Render child component views.\n    const components = tView.components;\n    if (components !== null) {\n      renderChildComponents(lView, components);\n    }\n  } catch (error) {\n    // If we didn't manage to get past the first template pass due to\n    // an error, mark the view as corrupted so we can try to recover.\n    if (tView.firstCreatePass) {\n      tView.incompleteFirstPass = true;\n      tView.firstCreatePass = false;\n    }\n\n    throw error;\n  } finally {\n    lView[FLAGS] &= ~LViewFlags.CreationMode;\n    leaveView();\n  }\n}\n\n/** Renders child components in the current view (creation mode). */\nfunction renderChildComponents(hostLView: LView, components: number[]): void {\n  for (let i = 0; i < components.length; i++) {\n    renderComponent(hostLView, components[i]);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {setActiveConsumer} from '@angular/core/primitives/signals';\n\nimport {Injector} from '../di/injector';\nimport {DehydratedContainerView} from '../hydration/interfaces';\nimport {hasInSkipHydrationBlockFlag} from '../hydration/skip_hydration';\nimport {assertDefined} from '../util/assert';\n\nimport {assertLContainer, assertTNodeForLView} from './assert';\nimport {renderView} from './instructions/render';\nimport {TNode} from './interfaces/node';\nimport {DECLARATION_LCONTAINER, FLAGS, LView, LViewFlags, QUERIES} from './interfaces/view';\nimport {createLView} from './view/construction';\n\nexport function createAndRenderEmbeddedLView<T>(\n  declarationLView: LView<unknown>,\n  templateTNode: TNode,\n  context: T,\n  options?: {\n    injector?: Injector;\n    embeddedViewInjector?: Injector;\n    dehydratedView?: DehydratedContainerView | null;\n  },\n): LView<T> {\n  const prevConsumer = setActiveConsumer(null);\n  try {\n    const embeddedTView = templateTNode.tView!;\n    ngDevMode && assertDefined(embeddedTView, 'TView must be defined for a template node.');\n    ngDevMode && assertTNodeForLView(templateTNode, declarationLView);\n\n    // Embedded views follow the change detection strategy of the view they're declared in.\n    const isSignalView = declarationLView[FLAGS] & LViewFlags.SignalView;\n    const viewFlags = isSignalView ? LViewFlags.SignalView : LViewFlags.CheckAlways;\n    const embeddedLView = createLView<T>(\n      declarationLView,\n      embeddedTView,\n      context,\n      viewFlags,\n      null,\n      templateTNode,\n      null,\n      null,\n      options?.injector ?? null,\n      options?.embeddedViewInjector ?? null,\n      options?.dehydratedView ?? null,\n    );\n\n    const declarationLContainer = declarationLView[templateTNode.index];\n    ngDevMode && assertLContainer(declarationLContainer);\n    embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;\n\n    const declarationViewLQueries = declarationLView[QUERIES];\n    if (declarationViewLQueries !== null) {\n      embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);\n    }\n\n    // execute creation mode of a view\n    renderView(embeddedTView, embeddedLView, context);\n\n    return embeddedLView;\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\n\n/**\n * Returns whether an elements that belong to a view should be\n * inserted into the DOM. For client-only cases, DOM elements are\n * always inserted. For hydration cases, we check whether serialized\n * info is available for a view and the view is not in a \"skip hydration\"\n * block (in which case view contents was re-created, thus needing insertion).\n */\nexport function shouldAddViewToDom(\n  tNode: TNode,\n  dehydratedView?: DehydratedContainerView | null,\n): boolean {\n  return (\n    !dehydratedView || dehydratedView.firstChild === null || hasInSkipHydrationBlockFlag(tNode)\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * @fileoverview\n *\n * This file provides mechanism by which code relevant to the `TIcuContainerNode` is only loaded if\n * ICU is present in the template.\n */\n\nimport {TIcuContainerNode} from '../interfaces/node';\nimport {RNode} from '../interfaces/renderer_dom';\nimport {LView} from '../interfaces/view';\n\nlet _icuContainerIterate: (\n  tIcuContainerNode: TIcuContainerNode,\n  lView: LView,\n) => () => RNode | null;\n\n/**\n * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.\n */\nexport function icuContainerIterate(\n  tIcuContainerNode: TIcuContainerNode,\n  lView: LView,\n): () => RNode | null {\n  return _icuContainerIterate(tIcuContainerNode, lView);\n}\n\n/**\n * Ensures that `IcuContainerVisitor`'s implementation is present.\n *\n * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the\n * bundler to tree shake ICU logic and only load it if ICU instruction is executed.\n */\nexport function ensureIcuContainerVisitorLoaded(\n  loader: () => (tIcuContainerNode: TIcuContainerNode, lView: LView) => () => RNode | null,\n) {\n  if (_icuContainerIterate === undefined) {\n    // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it\n    // can be inlined into call-site.\n    _icuContainerIterate = loader();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ViewEncapsulation} from '../metadata/view';\n\n/**\n * Used by `RendererFactory2` to associate custom rendering data and styles\n * with a rendering implementation.\n *  @publicApi\n */\nexport interface RendererType2 {\n  /**\n   * A unique identifying string for the new renderer, used when creating\n   * unique styles for encapsulation.\n   */\n  id: string;\n  /**\n   * The view encapsulation type, which determines how styles are applied to\n   * DOM elements. One of\n   * - `Emulated` (default): Emulate native scoping of styles.\n   * - `Native`: Use the native encapsulation mechanism of the renderer.\n   * - `ShadowDom`: Use modern [Shadow\n   * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n   * create a ShadowRoot for component's host element.\n   * - `None`: Do not provide any template or style encapsulation.\n   */\n  encapsulation: ViewEncapsulation;\n  /**\n   * Defines CSS styles to be stored on a renderer instance.\n   */\n  styles: string[];\n  /**\n   * Defines arbitrary developer-defined data to be stored on a renderer instance.\n   * This is useful for renderers that delegate to other renderers.\n   */\n  data: {[kind: string]: any};\n\n  /**\n   * A function used by the framework to create the list of external runtime style URLs.\n   */\n  getExternalStyles?: ((encapsulationId?: string) => string[]) | null;\n}\n\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\nexport enum RendererStyleFlags2 {\n  // TODO(misko): This needs to be refactored into a separate file so that it can be imported from\n  // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails\n  // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.\n  /**\n   * Marks a style as important.\n   */\n  Important = 1 << 0,\n  /**\n   * Marks a style as using dash case naming (this-is-dash-case).\n   */\n  DashCase = 1 << 1,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {TNode, TNodeFlags} from '../render3/interfaces/node';\n\n/**\n * Checks whether a TNode is considered detached, i.e. not present in the\n * translated i18n template. We should not attempt hydration for such nodes\n * and instead, use a regular \"creation mode\".\n */\nexport function isDetachedByI18n(tNode: TNode) {\n  return (tNode.flags & TNodeFlags.isDetached) === TNodeFlags.isDetached;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {consumerDestroy, setActiveConsumer} from '@angular/core/primitives/signals';\n\nimport {NotificationSource} from '../change_detection/scheduling/zoneless_scheduling';\nimport {hasInSkipHydrationBlockFlag} from '../hydration/skip_hydration';\nimport {ViewEncapsulation} from '../metadata/view';\nimport {RendererStyleFlags2} from '../render/api_flags';\nimport {\n  assertDefined,\n  assertEqual,\n  assertFunction,\n  assertNotReactive,\n  assertNumber,\n} from '../util/assert';\n\nimport {isDetachedByI18n} from '../i18n/utils';\nimport {\n  assertLContainer,\n  assertParentView,\n  assertProjectionSlots,\n  assertTNodeForLView,\n} from './assert';\nimport {attachPatchData} from './context_discovery';\nimport {\n  nativeAppendChild,\n  nativeAppendOrInsertBefore,\n  nativeInsertBefore,\n  nativeRemoveNode,\n} from './dom_node_manipulation';\nimport {icuContainerIterate} from './i18n/i18n_tree_shaking';\nimport {CONTAINER_HEADER_OFFSET, LContainer, MOVED_VIEWS, NATIVE} from './interfaces/container';\nimport {ComponentDef} from './interfaces/definition';\nimport {NodeInjectorFactory} from './interfaces/injector';\nimport {unregisterLView} from './interfaces/lview_tracking';\nimport {\n  TElementNode,\n  TIcuContainerNode,\n  TNode,\n  TNodeFlags,\n  TNodeType,\n  TProjectionNode,\n} from './interfaces/node';\nimport {Renderer} from './interfaces/renderer';\nimport {RElement, RNode} from './interfaces/renderer_dom';\nimport {isComponentHost, isDestroyed, isLContainer, isLView} from './interfaces/type_checks';\nimport {\n  CHILD_HEAD,\n  CLEANUP,\n  DECLARATION_COMPONENT_VIEW,\n  DECLARATION_LCONTAINER,\n  DestroyHookData,\n  EFFECTS,\n  ENVIRONMENT,\n  FLAGS,\n  HookData,\n  HookFn,\n  HOST,\n  LView,\n  LViewFlags,\n  NEXT,\n  ON_DESTROY_HOOKS,\n  PARENT,\n  QUERIES,\n  REACTIVE_TEMPLATE_CONSUMER,\n  RENDERER,\n  T_HOST,\n  TVIEW,\n  TView,\n  TViewType,\n} from './interfaces/view';\nimport {assertTNodeType} from './node_assert';\nimport {profiler} from './profiler';\nimport {ProfilerEvent} from './profiler_types';\nimport {getLViewParent, getNativeByTNode, unwrapRNode} from './util/view_utils';\n\nconst enum WalkTNodeTreeAction {\n  /** node create in the native environment. Run on initial creation. */\n  Create = 0,\n\n  /**\n   * node insert in the native environment.\n   * Run when existing node has been detached and needs to be re-attached.\n   */\n  Insert = 1,\n\n  /** node detach from the native environment */\n  Detach = 2,\n\n  /** node destruction using the renderer's API */\n  Destroy = 3,\n}\n\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n */\nfunction applyToElementOrContainer(\n  action: WalkTNodeTreeAction,\n  renderer: Renderer,\n  parent: RElement | null,\n  lNodeToHandle: RNode | LContainer | LView,\n  beforeNode?: RNode | null,\n) {\n  // If this slot was allocated for a text node dynamically created by i18n, the text node itself\n  // won't be created until i18nApply() in the update block, so this node should be skipped.\n  // For more info, see \"ICU expressions should work inside an ngTemplateOutlet inside an ngFor\"\n  // in `i18n_spec.ts`.\n  if (lNodeToHandle != null) {\n    let lContainer: LContainer | undefined;\n    let isComponent = false;\n    // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is\n    // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if\n    // it has LContainer so that we can process all of those cases appropriately.\n    if (isLContainer(lNodeToHandle)) {\n      lContainer = lNodeToHandle;\n    } else if (isLView(lNodeToHandle)) {\n      isComponent = true;\n      ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');\n      lNodeToHandle = lNodeToHandle[HOST]!;\n    }\n    const rNode: RNode = unwrapRNode(lNodeToHandle);\n\n    if (action === WalkTNodeTreeAction.Create && parent !== null) {\n      if (beforeNode == null) {\n        nativeAppendChild(renderer, parent, rNode);\n      } else {\n        nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n      }\n    } else if (action === WalkTNodeTreeAction.Insert && parent !== null) {\n      nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n    } else if (action === WalkTNodeTreeAction.Detach) {\n      nativeRemoveNode(renderer, rNode, isComponent);\n    } else if (action === WalkTNodeTreeAction.Destroy) {\n      ngDevMode && ngDevMode.rendererDestroyNode++;\n      renderer.destroyNode!(rNode);\n    }\n    if (lContainer != null) {\n      applyContainer(renderer, action, lContainer, parent, beforeNode);\n    }\n  }\n}\n\n/**\n * Removes all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to remove all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param lView The view from which elements should be added or removed\n */\nexport function removeViewFromDOM(tView: TView, lView: LView): void {\n  detachViewFromDOM(tView, lView);\n  lView[HOST] = null;\n  lView[T_HOST] = null;\n}\n\n/**\n * Adds all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to add all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param parentTNode The `TNode` where the `LView` should be attached to.\n * @param renderer Current renderer to use for DOM manipulations.\n * @param lView The view from which elements should be added or removed\n * @param parentNativeNode The parent `RElement` where it should be inserted into.\n * @param beforeNode The node before which elements should be added, if insert mode\n */\nexport function addViewToDOM(\n  tView: TView,\n  parentTNode: TNode,\n  renderer: Renderer,\n  lView: LView,\n  parentNativeNode: RElement,\n  beforeNode: RNode | null,\n): void {\n  lView[HOST] = parentNativeNode;\n  lView[T_HOST] = parentTNode;\n  applyView(tView, lView, renderer, WalkTNodeTreeAction.Insert, parentNativeNode, beforeNode);\n}\n\n/**\n * Detach a `LView` from the DOM by detaching its nodes.\n *\n * @param tView The `TView' of the `LView` to be detached\n * @param lView the `LView` to be detached.\n */\nexport function detachViewFromDOM(tView: TView, lView: LView) {\n  // When we remove a view from the DOM, we need to rerun afterRender hooks\n  // We don't necessarily needs to run change detection. DOM removal only requires\n  // change detection if animations are enabled (this notification is handled by animations).\n  lView[ENVIRONMENT].changeDetectionScheduler?.notify(NotificationSource.ViewDetachedFromDOM);\n  applyView(tView, lView, lView[RENDERER], WalkTNodeTreeAction.Detach, null, null);\n}\n\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  @param rootView The view to destroy\n */\nexport function destroyViewTree(rootView: LView): void {\n  // If the view has no children, we can clean it up and return early.\n  let lViewOrLContainer = rootView[CHILD_HEAD];\n  if (!lViewOrLContainer) {\n    return cleanUpView(rootView[TVIEW], rootView);\n  }\n\n  while (lViewOrLContainer) {\n    let next: LView | LContainer | null = null;\n\n    if (isLView(lViewOrLContainer)) {\n      // If LView, traverse down to child.\n      next = lViewOrLContainer[CHILD_HEAD];\n    } else {\n      ngDevMode && assertLContainer(lViewOrLContainer);\n      // If container, traverse down to its first LView.\n      const firstView: LView | undefined = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\n      if (firstView) next = firstView;\n    }\n\n    if (!next) {\n      // Only clean up view when moving to the side or up, as destroy hooks\n      // should be called in order from the bottom up.\n      while (lViewOrLContainer && !lViewOrLContainer![NEXT] && lViewOrLContainer !== rootView) {\n        if (isLView(lViewOrLContainer)) {\n          cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n        }\n        lViewOrLContainer = lViewOrLContainer[PARENT];\n      }\n      if (lViewOrLContainer === null) lViewOrLContainer = rootView;\n      if (isLView(lViewOrLContainer)) {\n        cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n      }\n      next = lViewOrLContainer && lViewOrLContainer![NEXT];\n    }\n    lViewOrLContainer = next;\n  }\n}\n\nexport function detachMovedView(declarationContainer: LContainer, lView: LView) {\n  ngDevMode && assertLContainer(declarationContainer);\n  ngDevMode &&\n    assertDefined(\n      declarationContainer[MOVED_VIEWS],\n      'A projected view should belong to a non-empty projected views collection',\n    );\n  const movedViews = declarationContainer[MOVED_VIEWS]!;\n  const declarationViewIndex = movedViews.indexOf(lView);\n  movedViews.splice(declarationViewIndex, 1);\n}\n\n/**\n * A standalone function which destroys an LView,\n * conducting clean up (e.g. removing listeners, calling onDestroys).\n *\n * @param tView The `TView' of the `LView` to be destroyed\n * @param lView The view to be destroyed.\n */\nexport function destroyLView(tView: TView, lView: LView) {\n  if (isDestroyed(lView)) {\n    return;\n  }\n\n  const renderer = lView[RENDERER];\n\n  if (renderer.destroyNode) {\n    applyView(tView, lView, renderer, WalkTNodeTreeAction.Destroy, null, null);\n  }\n\n  destroyViewTree(lView);\n}\n\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to @Output listeners.\n *\n * @param tView `TView` for the `LView` to clean up.\n * @param lView The LView to clean up\n */\nfunction cleanUpView(tView: TView, lView: LView): void {\n  if (isDestroyed(lView)) {\n    return;\n  }\n\n  const prevConsumer = setActiveConsumer(null);\n  try {\n    // Usually the Attached flag is removed when the view is detached from its parent, however\n    // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n    lView[FLAGS] &= ~LViewFlags.Attached;\n\n    // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n    // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n    // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n    // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n    // really more of an \"afterDestroy\" hook if you think about it.\n    lView[FLAGS] |= LViewFlags.Destroyed;\n\n    lView[REACTIVE_TEMPLATE_CONSUMER] && consumerDestroy(lView[REACTIVE_TEMPLATE_CONSUMER]);\n\n    executeOnDestroys(tView, lView);\n    processCleanups(tView, lView);\n    // For component views only, the local renderer is destroyed at clean up time.\n    if (lView[TVIEW].type === TViewType.Component) {\n      ngDevMode && ngDevMode.rendererDestroy++;\n      lView[RENDERER].destroy();\n    }\n\n    const declarationContainer = lView[DECLARATION_LCONTAINER];\n    // we are dealing with an embedded view that is still inserted into a container\n    if (declarationContainer !== null && isLContainer(lView[PARENT])) {\n      // and this is a projected view\n      if (declarationContainer !== lView[PARENT]) {\n        detachMovedView(declarationContainer, lView);\n      }\n\n      // For embedded views still attached to a container: remove query result from this view.\n      const lQueries = lView[QUERIES];\n      if (lQueries !== null) {\n        lQueries.detachView(tView);\n      }\n    }\n\n    // Unregister the view once everything else has been cleaned up.\n    unregisterLView(lView);\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\n\n/** Removes listeners and unsubscribes from output subscriptions */\nfunction processCleanups(tView: TView, lView: LView): void {\n  ngDevMode && assertNotReactive(processCleanups.name);\n  const tCleanup = tView.cleanup;\n  const lCleanup = lView[CLEANUP]!;\n  if (tCleanup !== null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      if (typeof tCleanup[i] === 'string') {\n        // This is a native DOM listener. It will occupy 4 entries in the TCleanup array (hence i +=\n        // 2 at the end of this block).\n        const targetIdx = tCleanup[i + 3];\n        ngDevMode && assertNumber(targetIdx, 'cleanup target must be a number');\n        if (targetIdx >= 0) {\n          // Destroy anything whose teardown is a function call (e.g. QueryList, ModelSignal).\n          lCleanup[targetIdx]();\n        } else {\n          // Subscription\n          lCleanup[-targetIdx].unsubscribe();\n        }\n        i += 2;\n      } else {\n        // This is a cleanup function that is grouped with the index of its context\n        const context = lCleanup[tCleanup[i + 1]];\n        tCleanup[i].call(context);\n      }\n    }\n  }\n  if (lCleanup !== null) {\n    lView[CLEANUP] = null;\n  }\n  const destroyHooks = lView[ON_DESTROY_HOOKS];\n  if (destroyHooks !== null) {\n    // Reset the ON_DESTROY_HOOKS array before iterating over it to prevent hooks that unregister\n    // themselves from mutating the array during iteration.\n    lView[ON_DESTROY_HOOKS] = null;\n    for (let i = 0; i < destroyHooks.length; i++) {\n      const destroyHooksFn = destroyHooks[i];\n      ngDevMode && assertFunction(destroyHooksFn, 'Expecting destroy hook to be a function.');\n      destroyHooksFn();\n    }\n  }\n\n  // Destroy effects registered to the view. Many of these will have been processed above.\n  const effects = lView[EFFECTS];\n  if (effects !== null) {\n    lView[EFFECTS] = null;\n    for (const effect of effects) {\n      effect.destroy();\n    }\n  }\n}\n\n/** Calls onDestroy hooks for this view */\nfunction executeOnDestroys(tView: TView, lView: LView): void {\n  ngDevMode && assertNotReactive(executeOnDestroys.name);\n  let destroyHooks: DestroyHookData | null;\n\n  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n    for (let i = 0; i < destroyHooks.length; i += 2) {\n      const context = lView[destroyHooks[i] as number];\n\n      // Only call the destroy hook if the context has been requested.\n      if (!(context instanceof NodeInjectorFactory)) {\n        const toCall = destroyHooks[i + 1] as HookFn | HookData;\n\n        if (Array.isArray(toCall)) {\n          for (let j = 0; j < toCall.length; j += 2) {\n            const callContext = context[toCall[j] as number];\n            const hook = toCall[j + 1] as HookFn;\n            profiler(ProfilerEvent.LifecycleHookStart, callContext, hook);\n            try {\n              hook.call(callContext);\n            } finally {\n              profiler(ProfilerEvent.LifecycleHookEnd, callContext, hook);\n            }\n          }\n        } else {\n          profiler(ProfilerEvent.LifecycleHookStart, context, toCall);\n          try {\n            toCall.call(context);\n          } finally {\n            profiler(ProfilerEvent.LifecycleHookEnd, context, toCall);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is made for projection but has not been inserted\n *   into destination.\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve render parent.\n * @param lView: Current `LView`.\n */\nexport function getParentRElement(tView: TView, tNode: TNode, lView: LView): RElement | null {\n  return getClosestRElement(tView, tNode.parent, lView);\n}\n\n/**\n * Get closest `RElement` or `null` if it can't be found.\n *\n * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.\n * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).\n * If `TNode` is `null` then return host `RElement`:\n *   - return `null` if projection\n *   - return `null` if parent container is disconnected (we have no parent.)\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is\n *     needed).\n * @param lView: Current `LView`.\n * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)\n */\nexport function getClosestRElement(\n  tView: TView,\n  tNode: TNode | null,\n  lView: LView,\n): RElement | null {\n  let parentTNode: TNode | null = tNode;\n  // Skip over element and ICU containers as those are represented by a comment node and\n  // can't be used as a render parent. Also skip let declarations since they don't have a\n  // corresponding DOM node at all.\n  while (\n    parentTNode !== null &&\n    parentTNode.type & (TNodeType.ElementContainer | TNodeType.Icu | TNodeType.LetDeclaration)\n  ) {\n    tNode = parentTNode;\n    parentTNode = tNode.parent;\n  }\n\n  // If the parent tNode is null, then we are inserting across views: either into an embedded view\n  // or a component view.\n  if (parentTNode === null) {\n    // We are inserting a root element of the component view into the component host element and\n    // it should always be eager.\n    return lView[HOST];\n  } else {\n    ngDevMode && assertTNodeType(parentTNode, TNodeType.AnyRNode | TNodeType.Container);\n    if (isComponentHost(parentTNode)) {\n      ngDevMode && assertTNodeForLView(parentTNode, lView);\n      const {encapsulation} = tView.data[\n        parentTNode.directiveStart + parentTNode.componentOffset\n      ] as ComponentDef<unknown>;\n      // We've got a parent which is an element in the current view. We just need to verify if the\n      // parent element is not a component. Component's content nodes are not inserted immediately\n      // because they will be projected, and so doing insert at this point would be wasteful.\n      // Since the projection would then move it to its final destination. Note that we can't\n      // make this assumption when using the Shadow DOM, because the native projection placeholders\n      // (<content> or <slot>) have to be in place as elements are being inserted.\n      if (\n        encapsulation === ViewEncapsulation.None ||\n        encapsulation === ViewEncapsulation.Emulated\n      ) {\n        return null;\n      }\n    }\n\n    return getNativeByTNode(parentTNode, lView) as RElement;\n  }\n}\n\n/**\n * Find a node in front of which `currentTNode` should be inserted.\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNode(\n  parentTNode: TNode,\n  currentTNode: TNode,\n  lView: LView,\n): RNode | null {\n  return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);\n}\n\n/**\n * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into\n * account)\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * does not take `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nexport function getInsertInFrontOfRNodeWithNoI18n(\n  parentTNode: TNode,\n  currentTNode: TNode,\n  lView: LView,\n): RNode | null {\n  if (parentTNode.type & (TNodeType.ElementContainer | TNodeType.Icu)) {\n    return getNativeByTNode(parentTNode, lView);\n  }\n  return null;\n}\n\n/**\n * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _getInsertInFrontOfRNodeWithI18n: (\n  parentTNode: TNode,\n  currentTNode: TNode,\n  lView: LView,\n) => RNode | null = getInsertInFrontOfRNodeWithNoI18n;\n\n/**\n * Tree shakable boundary for `processI18nInsertBefore` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _processI18nInsertBefore: (\n  renderer: Renderer,\n  childTNode: TNode,\n  lView: LView,\n  childRNode: RNode | RNode[],\n  parentRElement: RElement | null,\n) => void;\n\nexport function setI18nHandling(\n  getInsertInFrontOfRNodeWithI18n: (\n    parentTNode: TNode,\n    currentTNode: TNode,\n    lView: LView,\n  ) => RNode | null,\n  processI18nInsertBefore: (\n    renderer: Renderer,\n    childTNode: TNode,\n    lView: LView,\n    childRNode: RNode | RNode[],\n    parentRElement: RElement | null,\n  ) => void,\n) {\n  _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;\n  _processI18nInsertBefore = processI18nInsertBefore;\n}\n\n/**\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\n *\n * @param tView The `TView' to be appended\n * @param lView The current LView\n * @param childRNode The native child (or children) that should be appended\n * @param childTNode The TNode of the child element\n */\nexport function appendChild(\n  tView: TView,\n  lView: LView,\n  childRNode: RNode | RNode[],\n  childTNode: TNode,\n): void {\n  const parentRNode = getParentRElement(tView, childTNode, lView);\n  const renderer = lView[RENDERER];\n  const parentTNode: TNode = childTNode.parent || lView[T_HOST]!;\n  const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);\n  if (parentRNode != null) {\n    if (Array.isArray(childRNode)) {\n      for (let i = 0; i < childRNode.length; i++) {\n        nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);\n      }\n    } else {\n      nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);\n    }\n  }\n\n  _processI18nInsertBefore !== undefined &&\n    _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);\n}\n\n/**\n * Returns the first native node for a given LView, starting from the provided TNode.\n *\n * Native nodes are returned in the order in which those appear in the native tree (DOM).\n */\nexport function getFirstNativeNode(lView: LView, tNode: TNode | null): RNode | null {\n  if (tNode !== null) {\n    ngDevMode &&\n      assertTNodeType(\n        tNode,\n        TNodeType.AnyRNode |\n          TNodeType.AnyContainer |\n          TNodeType.Icu |\n          TNodeType.Projection |\n          TNodeType.LetDeclaration,\n      );\n\n    const tNodeType = tNode.type;\n    if (tNodeType & TNodeType.AnyRNode) {\n      return getNativeByTNode(tNode, lView);\n    } else if (tNodeType & TNodeType.Container) {\n      return getBeforeNodeForView(-1, lView[tNode.index]);\n    } else if (tNodeType & TNodeType.ElementContainer) {\n      const elIcuContainerChild = tNode.child;\n      if (elIcuContainerChild !== null) {\n        return getFirstNativeNode(lView, elIcuContainerChild);\n      } else {\n        const rNodeOrLContainer = lView[tNode.index];\n        if (isLContainer(rNodeOrLContainer)) {\n          return getBeforeNodeForView(-1, rNodeOrLContainer);\n        } else {\n          return unwrapRNode(rNodeOrLContainer);\n        }\n      }\n    } else if (tNodeType & TNodeType.LetDeclaration) {\n      return getFirstNativeNode(lView, tNode.next);\n    } else if (tNodeType & TNodeType.Icu) {\n      let nextRNode = icuContainerIterate(tNode as TIcuContainerNode, lView);\n      let rNode: RNode | null = nextRNode();\n      // If the ICU container has no nodes, than we use the ICU anchor as the node.\n      return rNode || unwrapRNode(lView[tNode.index]);\n    } else {\n      const projectionNodes = getProjectionNodes(lView, tNode);\n      if (projectionNodes !== null) {\n        if (Array.isArray(projectionNodes)) {\n          return projectionNodes[0];\n        }\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n        ngDevMode && assertParentView(parentView);\n        return getFirstNativeNode(parentView!, projectionNodes);\n      } else {\n        return getFirstNativeNode(lView, tNode.next);\n      }\n    }\n  }\n\n  return null;\n}\n\nexport function getProjectionNodes(lView: LView, tNode: TNode | null): TNode | RNode[] | null {\n  if (tNode !== null) {\n    const componentView = lView[DECLARATION_COMPONENT_VIEW];\n    const componentHost = componentView[T_HOST] as TElementNode;\n    const slotIdx = tNode.projection as number;\n    ngDevMode && assertProjectionSlots(lView);\n    return componentHost.projection![slotIdx];\n  }\n  return null;\n}\n\nexport function getBeforeNodeForView(\n  viewIndexInContainer: number,\n  lContainer: LContainer,\n): RNode | null {\n  const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\n  if (nextViewIndex < lContainer.length) {\n    const lView = lContainer[nextViewIndex] as LView;\n    const firstTNodeOfView = lView[TVIEW].firstChild;\n    if (firstTNodeOfView !== null) {\n      return getFirstNativeNode(lView, firstTNodeOfView);\n    }\n  }\n\n  return lContainer[NATIVE];\n}\n\n/**\n * Performs the operation of `action` on the node. Typically this involves inserting or removing\n * nodes on the LView or projection boundary.\n */\nfunction applyNodes(\n  renderer: Renderer,\n  action: WalkTNodeTreeAction,\n  tNode: TNode | null,\n  lView: LView,\n  parentRElement: RElement | null,\n  beforeNode: RNode | null,\n  isProjection: boolean,\n) {\n  while (tNode != null) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n\n    // Let declarations don't have corresponding DOM nodes so we skip over them.\n    if (tNode.type === TNodeType.LetDeclaration) {\n      tNode = tNode.next;\n      continue;\n    }\n\n    ngDevMode &&\n      assertTNodeType(\n        tNode,\n        TNodeType.AnyRNode | TNodeType.AnyContainer | TNodeType.Projection | TNodeType.Icu,\n      );\n    const rawSlotValue = lView[tNode.index];\n    const tNodeType = tNode.type;\n    if (isProjection) {\n      if (action === WalkTNodeTreeAction.Create) {\n        rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);\n        tNode.flags |= TNodeFlags.isProjected;\n      }\n    }\n    if (!isDetachedByI18n(tNode)) {\n      if (tNodeType & TNodeType.ElementContainer) {\n        applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & TNodeType.Icu) {\n        const nextRNode = icuContainerIterate(tNode as TIcuContainerNode, lView);\n        let rNode: RNode | null;\n        while ((rNode = nextRNode())) {\n          applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n        }\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & TNodeType.Projection) {\n        applyProjectionRecursive(\n          renderer,\n          action,\n          lView,\n          tNode as TProjectionNode,\n          parentRElement,\n          beforeNode,\n        );\n      } else {\n        ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode | TNodeType.Container);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n}\n\n/**\n * `applyView` performs operation on the view as specified in `action` (insert, detach, destroy)\n *\n * Inserting a view without projection or containers at top level is simple. Just iterate over the\n * root nodes of the View, and for each node perform the `action`.\n *\n * Things get more complicated with containers and projections. That is because coming across:\n * - Container: implies that we have to insert/remove/destroy the views of that container as well\n *              which in turn can have their own Containers at the View roots.\n * - Projection: implies that we have to insert/remove/destroy the nodes of the projection. The\n *               complication is that the nodes we are projecting can themselves have Containers\n *               or other Projections.\n *\n * As you can see this is a very recursive problem. Yes recursion is not most efficient but the\n * code is complicated enough that trying to implemented with recursion becomes unmaintainable.\n *\n * @param tView The `TView' which needs to be inserted, detached, destroyed\n * @param lView The LView which needs to be inserted, detached, destroyed.\n * @param renderer Renderer to use\n * @param action action to perform (insert, detach, destroy)\n * @param parentRElement parent DOM element for insertion (Removal does not need it).\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyView(\n  tView: TView,\n  lView: LView,\n  renderer: Renderer,\n  action: WalkTNodeTreeAction.Destroy,\n  parentRElement: null,\n  beforeNode: null,\n): void;\nfunction applyView(\n  tView: TView,\n  lView: LView,\n  renderer: Renderer,\n  action: WalkTNodeTreeAction,\n  parentRElement: RElement | null,\n  beforeNode: RNode | null,\n): void;\nfunction applyView(\n  tView: TView,\n  lView: LView,\n  renderer: Renderer,\n  action: WalkTNodeTreeAction,\n  parentRElement: RElement | null,\n  beforeNode: RNode | null,\n): void {\n  applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);\n}\n\n/**\n * `applyProjection` performs operation on the projection.\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed\n * @param lView The `LView` which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n */\nexport function applyProjection(tView: TView, lView: LView, tProjectionNode: TProjectionNode) {\n  const renderer = lView[RENDERER];\n  const parentRNode = getParentRElement(tView, tProjectionNode, lView);\n  const parentTNode = tProjectionNode.parent || lView[T_HOST]!;\n  let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);\n  applyProjectionRecursive(\n    renderer,\n    WalkTNodeTreeAction.Create,\n    lView,\n    tProjectionNode,\n    parentRNode,\n    beforeNode,\n  );\n}\n\n/**\n * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,\n * detach, destroy)\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param renderer Render to use\n * @param action action to perform (insert, detach, destroy)\n * @param lView The LView which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyProjectionRecursive(\n  renderer: Renderer,\n  action: WalkTNodeTreeAction,\n  lView: LView,\n  tProjectionNode: TProjectionNode,\n  parentRElement: RElement | null,\n  beforeNode: RNode | null,\n) {\n  const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n  const componentNode = componentLView[T_HOST] as TElementNode;\n  ngDevMode &&\n    assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');\n  const nodeToProjectOrRNodes = componentNode.projection![tProjectionNode.projection]!;\n  if (Array.isArray(nodeToProjectOrRNodes)) {\n    // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we\n    // need to support passing projectable nodes, so we cheat and put them in the TNode\n    // of the Host TView. (Yes we put instance info at the T Level). We can get away with it\n    // because we know that TView is not shared and therefore it will not be a problem.\n    // This should be refactored and cleaned up.\n    for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {\n      const rNode = nodeToProjectOrRNodes[i];\n      applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n    }\n  } else {\n    let nodeToProject: TNode | null = nodeToProjectOrRNodes;\n    const projectedComponentLView = componentLView[PARENT] as LView;\n    // If a parent <ng-content> is located within a skip hydration block,\n    // annotate an actual node that is being projected with the same flag too.\n    if (hasInSkipHydrationBlockFlag(tProjectionNode)) {\n      nodeToProject.flags |= TNodeFlags.inSkipHydrationBlock;\n    }\n    applyNodes(\n      renderer,\n      action,\n      nodeToProject,\n      projectedComponentLView,\n      parentRElement,\n      beforeNode,\n      true,\n    );\n  }\n}\n\n/**\n * `applyContainer` performs an operation on the container and its views as specified by\n * `action` (insert, detach, destroy)\n *\n * Inserting a Container is complicated by the fact that the container may have Views which\n * themselves have containers or projections.\n *\n * @param renderer Renderer to use\n * @param action action to perform (insert, detach, destroy)\n * @param lContainer The LContainer which needs to be inserted, detached, destroyed.\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyContainer(\n  renderer: Renderer,\n  action: WalkTNodeTreeAction,\n  lContainer: LContainer,\n  parentRElement: RElement | null,\n  beforeNode: RNode | null | undefined,\n) {\n  ngDevMode && assertLContainer(lContainer);\n  const anchor = lContainer[NATIVE]; // LContainer has its own before node.\n  const native = unwrapRNode(lContainer);\n  // An LContainer can be created dynamically on any node by injecting ViewContainerRef.\n  // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor\n  // node (comment in the DOM) that will be different from the LContainer's host node. In this\n  // particular case we need to execute action on 2 nodes:\n  // - container's host node (this is done in the executeActionOnElementOrContainer)\n  // - container's host node (this is done here)\n  if (anchor !== native) {\n    // This is very strange to me (Misko). I would expect that the native is same as anchor. I\n    // don't see a reason why they should be different, but they are.\n    //\n    // If they are we need to process the second anchor as well.\n    applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);\n  }\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const lView = lContainer[i] as LView;\n    applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);\n  }\n}\n\n/**\n * Writes class/style to element.\n *\n * @param renderer Renderer to use.\n * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)\n * @param rNode The Node to write to.\n * @param prop Property to write to. This would be the class/style name.\n * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add\n *        otherwise).\n */\nexport function applyStyling(\n  renderer: Renderer,\n  isClassBased: boolean,\n  rNode: RElement,\n  prop: string,\n  value: any,\n) {\n  if (isClassBased) {\n    // We actually want JS true/false here because any truthy value should add the class\n    if (!value) {\n      ngDevMode && ngDevMode.rendererRemoveClass++;\n      renderer.removeClass(rNode, prop);\n    } else {\n      ngDevMode && ngDevMode.rendererAddClass++;\n      renderer.addClass(rNode, prop);\n    }\n  } else {\n    let flags = prop.indexOf('-') === -1 ? undefined : (RendererStyleFlags2.DashCase as number);\n    if (value == null /** || value === undefined */) {\n      ngDevMode && ngDevMode.rendererRemoveStyle++;\n      renderer.removeStyle(rNode, prop, flags);\n    } else {\n      // A value is important if it ends with `!important`. The style\n      // parser strips any semicolons at the end of the value.\n      const isImportant = typeof value === 'string' ? value.endsWith('!important') : false;\n\n      if (isImportant) {\n        // !important has to be stripped from the value for it to be valid.\n        value = value.slice(0, -10);\n        flags! |= RendererStyleFlags2.Important;\n      }\n\n      ngDevMode && ngDevMode.rendererSetStyle++;\n      renderer.setStyle(rNode, prop, value, flags);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertParentView} from './assert';\nimport {icuContainerIterate} from './i18n/i18n_tree_shaking';\nimport {CONTAINER_HEADER_OFFSET, LContainer, NATIVE} from './interfaces/container';\nimport {TIcuContainerNode, TNode, TNodeType} from './interfaces/node';\nimport {RNode} from './interfaces/renderer_dom';\nimport {isLContainer} from './interfaces/type_checks';\nimport {DECLARATION_COMPONENT_VIEW, HOST, LView, TVIEW, TView} from './interfaces/view';\nimport {assertTNodeType} from './node_assert';\nimport {getProjectionNodes} from './node_manipulation';\nimport {getLViewParent, unwrapRNode} from './util/view_utils';\n\nexport function collectNativeNodes(\n  tView: TView,\n  lView: LView,\n  tNode: TNode | null,\n  result: any[],\n  isProjection: boolean = false,\n): any[] {\n  while (tNode !== null) {\n    // Let declarations don't have corresponding DOM nodes so we skip over them.\n    if (tNode.type === TNodeType.LetDeclaration) {\n      tNode = isProjection ? tNode.projectionNext : tNode.next;\n      continue;\n    }\n\n    ngDevMode &&\n      assertTNodeType(\n        tNode,\n        TNodeType.AnyRNode | TNodeType.AnyContainer | TNodeType.Projection | TNodeType.Icu,\n      );\n\n    const lNode = lView[tNode.index];\n    if (lNode !== null) {\n      result.push(unwrapRNode(lNode));\n    }\n\n    // A given lNode can represent either a native node or a LContainer (when it is a host of a\n    // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes\n    // from the views in this container.\n    if (isLContainer(lNode)) {\n      collectNativeNodesInLContainer(lNode, result);\n    }\n\n    const tNodeType = tNode.type;\n    if (tNodeType & TNodeType.ElementContainer) {\n      collectNativeNodes(tView, lView, tNode.child, result);\n    } else if (tNodeType & TNodeType.Icu) {\n      const nextRNode = icuContainerIterate(tNode as TIcuContainerNode, lView);\n      let rNode: RNode | null;\n      while ((rNode = nextRNode())) {\n        result.push(rNode);\n      }\n    } else if (tNodeType & TNodeType.Projection) {\n      const nodesInSlot = getProjectionNodes(lView, tNode);\n      if (Array.isArray(nodesInSlot)) {\n        result.push(...nodesInSlot);\n      } else {\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW])!;\n        ngDevMode && assertParentView(parentView);\n        collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n\n  return result;\n}\n\n/**\n * Collects all root nodes in all views in a given LContainer.\n */\nexport function collectNativeNodesInLContainer(lContainer: LContainer, result: any[]) {\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const lViewInAContainer = lContainer[i];\n    const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;\n    if (lViewFirstChildTNode !== null) {\n      collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);\n    }\n  }\n\n  // When an LContainer is created, the anchor (comment) node is:\n  // - (1) either reused in case of an ElementContainer (<ng-container>)\n  // - (2) or a new comment node is created\n  // In the first case, the anchor comment node would be added to the final\n  // list by the code in the `collectNativeNodes` function\n  // (see the `result.push(unwrapRNode(lNode))` line), but the second\n  // case requires extra handling: the anchor node needs to be added to the\n  // final list manually. See additional information in the `createAnchorNode`\n  // function in the `view_container_ref.ts`.\n  //\n  // In the first case, the same reference would be stored in the `NATIVE`\n  // and `HOST` slots in an LContainer. Otherwise, this is the second case and\n  // we should add an element to the final list.\n  if (lContainer[NATIVE] !== lContainer[HOST]) {\n    result.push(lContainer[NATIVE]);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {AFTER_RENDER_SEQUENCES_TO_ADD, LView} from '../interfaces/view';\n\nexport function addAfterRenderSequencesForView(lView: LView) {\n  if (lView[AFTER_RENDER_SEQUENCES_TO_ADD] !== null) {\n    for (const sequence of lView[AFTER_RENDER_SEQUENCES_TO_ADD]) {\n      sequence.impl.addSequence(sequence);\n    }\n    lView[AFTER_RENDER_SEQUENCES_TO_ADD].length = 0;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {REACTIVE_NODE, ReactiveNode} from '@angular/core/primitives/signals';\n\nimport {\n  LView,\n  PARENT,\n  REACTIVE_TEMPLATE_CONSUMER,\n  TVIEW,\n  TView,\n  TViewType,\n} from './interfaces/view';\nimport {getLViewParent, markAncestorsForTraversal, markViewForRefresh} from './util/view_utils';\nimport {assertDefined} from '../util/assert';\n\nlet freeConsumers: ReactiveNode[] = [];\nexport interface ReactiveLViewConsumer extends ReactiveNode {\n  lView: LView | null;\n}\n\n/**\n * Create a new template consumer pointing at the specified LView.\n * Sometimes, a previously created consumer may be reused, in order to save on allocations. In that\n * case, the LView will be updated.\n */\nexport function getOrBorrowReactiveLViewConsumer(lView: LView): ReactiveLViewConsumer {\n  return lView[REACTIVE_TEMPLATE_CONSUMER] ?? borrowReactiveLViewConsumer(lView);\n}\n\nfunction borrowReactiveLViewConsumer(lView: LView): ReactiveLViewConsumer {\n  const consumer = freeConsumers.pop() ?? Object.create(REACTIVE_LVIEW_CONSUMER_NODE);\n  consumer.lView = lView;\n  return consumer;\n}\n\nexport function maybeReturnReactiveLViewConsumer(consumer: ReactiveLViewConsumer): void {\n  if (consumer.lView![REACTIVE_TEMPLATE_CONSUMER] === consumer) {\n    // The consumer got committed.\n    return;\n  }\n  consumer.lView = null;\n  freeConsumers.push(consumer);\n}\n\nexport const REACTIVE_LVIEW_CONSUMER_NODE: Omit<ReactiveLViewConsumer, 'lView'> = {\n  ...REACTIVE_NODE,\n  consumerIsAlwaysLive: true,\n  kind: 'template',\n  consumerMarkedDirty: (node: ReactiveLViewConsumer) => {\n    markAncestorsForTraversal(node.lView!);\n  },\n  consumerOnSignalRead(this: ReactiveLViewConsumer): void {\n    this.lView![REACTIVE_TEMPLATE_CONSUMER] = this;\n  },\n};\n\n/**\n * Creates a temporary consumer for use with `LView`s that should not have consumers.\n * If the LView already has a consumer, returns the existing one instead.\n *\n * This is necessary because some APIs may cause change detection directly on an LView\n * that we do not want to have a consumer (Embedded views today). As a result, there\n * would be no active consumer from running change detection on its host component\n * and any signals in the LView template would be untracked. Instead, we create\n * this temporary consumer that marks the first parent that _should_ have a consumer\n * for refresh. Once change detection runs as part of that refresh, we throw away\n * this consumer because its signals will then be tracked by the parent's consumer.\n */\nexport function getOrCreateTemporaryConsumer(lView: LView): ReactiveLViewConsumer {\n  const consumer = lView[REACTIVE_TEMPLATE_CONSUMER] ?? Object.create(TEMPORARY_CONSUMER_NODE);\n  consumer.lView = lView;\n  return consumer;\n}\n\nexport const TEMPORARY_CONSUMER_NODE = {\n  ...REACTIVE_NODE,\n  consumerIsAlwaysLive: true,\n  kind: 'template',\n  consumerMarkedDirty: (node: ReactiveLViewConsumer) => {\n    let parent = getLViewParent(node.lView!);\n    while (parent && !viewShouldHaveReactiveConsumer(parent[TVIEW])) {\n      parent = getLViewParent(parent);\n    }\n    if (!parent) {\n      // If we can't find an appropriate parent that should have a consumer, we\n      // don't have a way of appropriately refreshing this LView as part of application synchronization.\n      return;\n    }\n\n    markViewForRefresh(parent);\n  },\n  consumerOnSignalRead(this: ReactiveLViewConsumer): void {\n    this.lView![REACTIVE_TEMPLATE_CONSUMER] = this;\n  },\n};\n\n/**\n * Indicates if the view should get its own reactive consumer node.\n *\n * In the current design, all embedded views share a consumer with the component view. This allows\n * us to refresh at the component level rather than at a per-view level. In addition, root views get\n * their own reactive node because root component will have a host view that executes the\n * component's host bindings. This needs to be tracked in a consumer as well.\n *\n * To get a more granular change detection than per-component, all we would just need to update the\n * condition here so that a given view gets a reactive consumer which can become dirty independently\n * from its parent component. For example embedded views for signal components could be created with\n * a new type \"SignalEmbeddedView\" and the condition here wouldn't even need updating in order to\n * get granular per-view change detection for signal components.\n */\nexport function viewShouldHaveReactiveConsumer(tView: TView) {\n  return tView.type !== TViewType.Embedded;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EFFECTS, FLAGS, type LView, LViewFlags} from '../interfaces/view';\n\nexport function runEffectsInView(view: LView): void {\n  if (view[EFFECTS] === null) {\n    return;\n  }\n\n  // Since effects can make other effects dirty, we flush them in a loop until there are no more to\n  // flush.\n  let tryFlushEffects = true;\n\n  while (tryFlushEffects) {\n    let foundDirtyEffect = false;\n    for (const effect of view[EFFECTS]) {\n      if (!effect.dirty) {\n        continue;\n      }\n      foundDirtyEffect = true;\n\n      // `runEffectsInView` is called during change detection, and therefore runs\n      // in the Angular zone if it's available.\n      if (effect.zone === null || Zone.current === effect.zone) {\n        effect.run();\n      } else {\n        effect.zone.run(() => effect.run());\n      }\n    }\n\n    // Check if we need to continue flushing. If we didn't find any dirty effects, then there's\n    // no need to loop back. Otherwise, check the view to see if it was marked for traversal\n    // again. If so, there's a chance that one of the effects we ran caused another effect to\n    // become dirty.\n    tryFlushEffects = foundDirtyEffect && !!(view[FLAGS] & LViewFlags.HasChildViewsToRefresh);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  consumerAfterComputation,\n  consumerBeforeComputation,\n  consumerDestroy,\n  consumerPollProducersForChange,\n  getActiveConsumer,\n  ReactiveNode,\n} from '@angular/core/primitives/signals';\n\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {assertDefined, assertEqual} from '../../util/assert';\nimport {addAfterRenderSequencesForView} from '../after_render/view';\nimport {executeCheckHooks, executeInitAndCheckHooks, incrementInitPhaseFlags} from '../hooks';\nimport {CONTAINER_HEADER_OFFSET, LContainerFlags, MOVED_VIEWS} from '../interfaces/container';\nimport {ComponentTemplate, HostBindingsFunction, RenderFlags} from '../interfaces/definition';\nimport {\n  CONTEXT,\n  EFFECTS_TO_SCHEDULE,\n  ENVIRONMENT,\n  FLAGS,\n  InitPhaseState,\n  LView,\n  LViewFlags,\n  REACTIVE_TEMPLATE_CONSUMER,\n  TVIEW,\n  TView,\n} from '../interfaces/view';\nimport {\n  getOrBorrowReactiveLViewConsumer,\n  getOrCreateTemporaryConsumer,\n  maybeReturnReactiveLViewConsumer,\n  ReactiveLViewConsumer,\n  viewShouldHaveReactiveConsumer,\n} from '../reactive_lview_consumer';\nimport {\n  CheckNoChangesMode,\n  enterView,\n  isExhaustiveCheckNoChanges,\n  isInCheckNoChangesMode,\n  isRefreshingViews,\n  leaveView,\n  setBindingIndex,\n  setBindingRootForHostBindings,\n  setIsInCheckNoChangesMode,\n  setIsRefreshingViews,\n  setSelectedIndex,\n} from '../state';\nimport {getFirstLContainer, getNextLContainer} from '../util/view_traversal_utils';\nimport {\n  getComponentLViewByIndex,\n  isCreationMode,\n  markAncestorsForTraversal,\n  markViewForRefresh,\n  requiresRefreshOrTraversal,\n  resetPreOrderHookFlags,\n  viewAttachedToChangeDetector,\n} from '../util/view_utils';\n\nimport {isDestroyed} from '../interfaces/type_checks';\nimport {profiler} from '../profiler';\nimport {ProfilerEvent} from '../profiler_types';\nimport {executeViewQueryFn, refreshContentQueries} from '../queries/query_execution';\nimport {runEffectsInView} from '../reactivity/view_effect_runner';\nimport {executeTemplate, handleError} from './shared';\n\n/**\n * The maximum number of times the change detection traversal will rerun before throwing an error.\n */\nexport const MAXIMUM_REFRESH_RERUNS = 100;\n\nexport function detectChangesInternal(\n  lView: LView,\n  notifyErrorHandler = true,\n  mode = ChangeDetectionMode.Global,\n) {\n  const environment = lView[ENVIRONMENT];\n  const rendererFactory = environment.rendererFactory;\n\n  // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to invoke renderer factory functions in that mode\n  // to avoid any possible side-effects.\n  const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();\n\n  if (!checkNoChangesMode) {\n    rendererFactory.begin?.();\n  }\n\n  try {\n    detectChangesInViewWhileDirty(lView, mode);\n  } catch (error) {\n    if (notifyErrorHandler) {\n      handleError(lView, error);\n    }\n    throw error;\n  } finally {\n    if (!checkNoChangesMode) {\n      rendererFactory.end?.();\n    }\n  }\n}\n\nfunction detectChangesInViewWhileDirty(lView: LView, mode: ChangeDetectionMode) {\n  const lastIsRefreshingViewsValue = isRefreshingViews();\n  try {\n    setIsRefreshingViews(true);\n    detectChangesInView(lView, mode);\n\n    // We don't need or want to do any looping when in exhaustive checkNoChanges because we\n    // already traverse all the views and nothing should change so we shouldn't have to do\n    // another pass to pick up new changes.\n    if (ngDevMode && isExhaustiveCheckNoChanges()) {\n      return;\n    }\n\n    let retries = 0;\n    // If after running change detection, this view still needs to be refreshed or there are\n    // descendants views that need to be refreshed due to re-dirtying during the change detection\n    // run, detect changes on the view again. We run change detection in `Targeted` mode to only\n    // refresh views with the `RefreshView` flag.\n    while (requiresRefreshOrTraversal(lView)) {\n      if (retries === MAXIMUM_REFRESH_RERUNS) {\n        throw new RuntimeError(\n          RuntimeErrorCode.INFINITE_CHANGE_DETECTION,\n          ngDevMode &&\n            'Infinite change detection while trying to refresh views. ' +\n              'There may be components which each cause the other to require a refresh, ' +\n              'causing an infinite loop.',\n        );\n      }\n      retries++;\n      // Even if this view is detached, we still detect changes in targeted mode because this was\n      // the root of the change detection run.\n      detectChangesInView(lView, ChangeDetectionMode.Targeted);\n    }\n  } finally {\n    // restore state to what it was before entering this change detection loop\n    setIsRefreshingViews(lastIsRefreshingViewsValue);\n  }\n}\n\nexport function checkNoChangesInternal(\n  lView: LView,\n  mode: CheckNoChangesMode,\n  notifyErrorHandler = true,\n) {\n  setIsInCheckNoChangesMode(mode);\n  try {\n    detectChangesInternal(lView, notifyErrorHandler);\n  } finally {\n    setIsInCheckNoChangesMode(CheckNoChangesMode.Off);\n  }\n}\n\n/**\n * Different modes of traversing the logical view tree during change detection.\n *\n *\n * The change detection traversal algorithm switches between these modes based on various\n * conditions.\n */\nexport const enum ChangeDetectionMode {\n  /**\n   * In `Global` mode, `Dirty` and `CheckAlways` views are refreshed as well as views with the\n   * `RefreshView` flag.\n   */\n  Global,\n  /**\n   * In `Targeted` mode, only views with the `RefreshView` flag or updated signals are refreshed.\n   */\n  Targeted,\n}\n\n/**\n * Processes a view in update mode. This includes a number of steps in a specific order:\n * - executing a template function in update mode;\n * - executing hooks;\n * - refreshing queries;\n * - setting host bindings;\n * - refreshing child (embedded and component) views.\n */\n\nexport function refreshView<T>(\n  tView: TView,\n  lView: LView,\n  templateFn: ComponentTemplate<{}> | null,\n  context: T,\n) {\n  ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');\n\n  if (isDestroyed(lView)) return;\n\n  const flags = lView[FLAGS];\n\n  // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to execute lifecycle hooks in that mode.\n  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\n  const isInExhaustiveCheckNoChangesPass = ngDevMode && isExhaustiveCheckNoChanges();\n\n  // Start component reactive context\n  // - We might already be in a reactive context if this is an embedded view of the host.\n  // - We might be descending into a view that needs a consumer.\n  enterView(lView);\n  let returnConsumerToPool = true;\n  let prevConsumer: ReactiveNode | null = null;\n  let currentConsumer: ReactiveLViewConsumer | null = null;\n  if (!isInCheckNoChangesPass) {\n    if (viewShouldHaveReactiveConsumer(tView)) {\n      currentConsumer = getOrBorrowReactiveLViewConsumer(lView);\n      prevConsumer = consumerBeforeComputation(currentConsumer);\n    } else if (getActiveConsumer() === null) {\n      // If the current view should not have a reactive consumer but we don't have an active consumer,\n      // we still need to create a temporary consumer to track any signal reads in this template.\n      // This is a rare case that can happen with `viewContainerRef.createEmbeddedView(...).detectChanges()`.\n      // This temporary consumer marks the first parent that _should_ have a consumer for refresh.\n      // Once that refresh happens, the signals will be tracked in the parent consumer and we can destroy\n      // the temporary one.\n      returnConsumerToPool = false;\n      currentConsumer = getOrCreateTemporaryConsumer(lView);\n      prevConsumer = consumerBeforeComputation(currentConsumer);\n    } else if (lView[REACTIVE_TEMPLATE_CONSUMER]) {\n      consumerDestroy(lView[REACTIVE_TEMPLATE_CONSUMER]);\n      lView[REACTIVE_TEMPLATE_CONSUMER] = null;\n    }\n  }\n\n  try {\n    resetPreOrderHookFlags(lView);\n\n    setBindingIndex(tView.bindingStartIndex);\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, RenderFlags.Update, context);\n    }\n\n    const hooksInitPhaseCompleted =\n      (flags & LViewFlags.InitPhaseStateMask) === InitPhaseState.InitPhaseCompleted;\n\n    // execute pre-order hooks (OnInit, OnChanges, DoCheck)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const preOrderCheckHooks = tView.preOrderCheckHooks;\n        if (preOrderCheckHooks !== null) {\n          executeCheckHooks(lView, preOrderCheckHooks, null);\n        }\n      } else {\n        const preOrderHooks = tView.preOrderHooks;\n        if (preOrderHooks !== null) {\n          executeInitAndCheckHooks(lView, preOrderHooks, InitPhaseState.OnInitHooksToBeRun, null);\n        }\n        incrementInitPhaseFlags(lView, InitPhaseState.OnInitHooksToBeRun);\n      }\n    }\n\n    // We do not need to mark transplanted views for refresh when doing exhaustive checks\n    // because all views will be reached anyways during the traversal.\n    if (!isInExhaustiveCheckNoChangesPass) {\n      // First mark transplanted views that are declared in this lView as needing a refresh at their\n      // insertion points. This is needed to avoid the situation where the template is defined in this\n      // `LView` but its declaration appears after the insertion component.\n      markTransplantedViewsForRefresh(lView);\n    }\n    runEffectsInView(lView);\n    detectChangesInEmbeddedViews(lView, ChangeDetectionMode.Global);\n\n    // Content query results must be refreshed before content hooks are called.\n    if (tView.contentQueries !== null) {\n      refreshContentQueries(tView, lView);\n    }\n\n    // execute content hooks (AfterContentInit, AfterContentChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const contentCheckHooks = tView.contentCheckHooks;\n        if (contentCheckHooks !== null) {\n          executeCheckHooks(lView, contentCheckHooks);\n        }\n      } else {\n        const contentHooks = tView.contentHooks;\n        if (contentHooks !== null) {\n          executeInitAndCheckHooks(\n            lView,\n            contentHooks,\n            InitPhaseState.AfterContentInitHooksToBeRun,\n          );\n        }\n        incrementInitPhaseFlags(lView, InitPhaseState.AfterContentInitHooksToBeRun);\n      }\n    }\n\n    processHostBindingOpCodes(tView, lView);\n\n    // Refresh child component views.\n    const components = tView.components;\n    if (components !== null) {\n      detectChangesInChildComponents(lView, components, ChangeDetectionMode.Global);\n    }\n\n    // View queries must execute after refreshing child components because a template in this view\n    // could be inserted in a child component. If the view query executes before child component\n    // refresh, the template might not yet be inserted.\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn<T>(RenderFlags.Update, viewQuery, context);\n    }\n\n    // execute view hooks (AfterViewInit, AfterViewChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const viewCheckHooks = tView.viewCheckHooks;\n        if (viewCheckHooks !== null) {\n          executeCheckHooks(lView, viewCheckHooks);\n        }\n      } else {\n        const viewHooks = tView.viewHooks;\n        if (viewHooks !== null) {\n          executeInitAndCheckHooks(lView, viewHooks, InitPhaseState.AfterViewInitHooksToBeRun);\n        }\n        incrementInitPhaseFlags(lView, InitPhaseState.AfterViewInitHooksToBeRun);\n      }\n    }\n    if (tView.firstUpdatePass === true) {\n      // We need to make sure that we only flip the flag on successful `refreshView` only\n      // Don't do this in `finally` block.\n      // If we did this in `finally` block then an exception could block the execution of styling\n      // instructions which in turn would be unable to insert themselves into the styling linked\n      // list. The result of this would be that if the exception would not be throw on subsequent CD\n      // the styling would be unable to process it data and reflect to the DOM.\n      tView.firstUpdatePass = false;\n    }\n\n    // Schedule any effects that are waiting on the update pass of this view.\n    if (lView[EFFECTS_TO_SCHEDULE]) {\n      for (const notifyEffect of lView[EFFECTS_TO_SCHEDULE]) {\n        notifyEffect();\n      }\n\n      // Once they've been run, we can drop the array.\n      lView[EFFECTS_TO_SCHEDULE] = null;\n    }\n\n    // Do not reset the dirty state when running in check no changes mode. We don't want components\n    // to behave differently depending on whether check no changes is enabled or not. For example:\n    // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to\n    // refresh a `NgClass` binding should work. If we would reset the dirty state in the check\n    // no changes cycle, the component would be not be dirty for the next update pass. This would\n    // be different in production mode where the component dirty state is not reset.\n    if (!isInCheckNoChangesPass) {\n      addAfterRenderSequencesForView(lView);\n\n      lView[FLAGS] &= ~(LViewFlags.Dirty | LViewFlags.FirstLViewPass);\n    }\n  } catch (e) {\n    if (!isInCheckNoChangesPass) {\n      // If refreshing a view causes an error, we need to remark the ancestors as needing traversal\n      // because the error might have caused a situation where views below the current location are\n      // dirty but will be unreachable because the \"has dirty children\" flag in the ancestors has been\n      // cleared during change detection and we failed to run to completion.\n      markAncestorsForTraversal(lView);\n    }\n    throw e;\n  } finally {\n    if (currentConsumer !== null) {\n      consumerAfterComputation(currentConsumer, prevConsumer);\n      if (returnConsumerToPool) {\n        maybeReturnReactiveLViewConsumer(currentConsumer);\n      }\n    }\n    leaveView();\n  }\n}\n\n/**\n * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes\n * them by executing an associated template function.\n */\nfunction detectChangesInEmbeddedViews(lView: LView, mode: ChangeDetectionMode) {\n  for (\n    let lContainer = getFirstLContainer(lView);\n    lContainer !== null;\n    lContainer = getNextLContainer(lContainer)\n  ) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n      const embeddedLView = lContainer[i];\n      detectChangesInViewIfAttached(embeddedLView, mode);\n    }\n  }\n}\n\n/**\n * Mark transplanted views as needing to be refreshed at their attachment points.\n *\n * @param lView The `LView` that may have transplanted views.\n */\nfunction markTransplantedViewsForRefresh(lView: LView) {\n  for (\n    let lContainer = getFirstLContainer(lView);\n    lContainer !== null;\n    lContainer = getNextLContainer(lContainer)\n  ) {\n    if (!(lContainer[FLAGS] & LContainerFlags.HasTransplantedViews)) continue;\n\n    const movedViews = lContainer[MOVED_VIEWS]!;\n    ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');\n    for (let i = 0; i < movedViews.length; i++) {\n      const movedLView = movedViews[i]!;\n      markViewForRefresh(movedLView);\n    }\n  }\n}\n\n/**\n * Detects changes in a component by entering the component view and processing its bindings,\n * queries, etc. if it is CheckAlways, OnPush and Dirty, etc.\n *\n * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)\n */\nfunction detectChangesInComponent(\n  hostLView: LView,\n  componentHostIdx: number,\n  mode: ChangeDetectionMode,\n): void {\n  ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');\n  profiler(ProfilerEvent.ComponentStart);\n\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  detectChangesInViewIfAttached(componentView, mode);\n\n  profiler(ProfilerEvent.ComponentEnd, componentView[CONTEXT] as any as {});\n}\n\n/**\n * Visits a view as part of change detection traversal.\n *\n * If the view is detached, no additional traversal happens.\n */\nfunction detectChangesInViewIfAttached(lView: LView, mode: ChangeDetectionMode) {\n  if (!viewAttachedToChangeDetector(lView)) {\n    return;\n  }\n  detectChangesInView(lView, mode);\n}\n\n/**\n * Visits a view as part of change detection traversal.\n *\n * The view is refreshed if:\n * - If the view is CheckAlways or Dirty and ChangeDetectionMode is `Global`\n * - If the view has the `RefreshView` flag\n *\n * The view is not refreshed, but descendants are traversed in `ChangeDetectionMode.Targeted` if the\n * view HasChildViewsToRefresh flag is set.\n */\nfunction detectChangesInView(lView: LView, mode: ChangeDetectionMode) {\n  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\n  const tView = lView[TVIEW];\n  const flags = lView[FLAGS];\n  const consumer = lView[REACTIVE_TEMPLATE_CONSUMER];\n\n  // Refresh CheckAlways views in Global mode.\n  let shouldRefreshView: boolean = !!(\n    mode === ChangeDetectionMode.Global && flags & LViewFlags.CheckAlways\n  );\n\n  // Refresh Dirty views in Global mode, as long as we're not in checkNoChanges.\n  // CheckNoChanges never worked with `OnPush` components because the `Dirty` flag was\n  // cleared before checkNoChanges ran. Because there is now a loop for to check for\n  // backwards views, it gives an opportunity for `OnPush` components to be marked `Dirty`\n  // before the CheckNoChanges pass. We don't want existing errors that are hidden by the\n  // current CheckNoChanges bug to surface when making unrelated changes.\n  shouldRefreshView ||= !!(\n    flags & LViewFlags.Dirty &&\n    mode === ChangeDetectionMode.Global &&\n    !isInCheckNoChangesPass\n  );\n\n  // Always refresh views marked for refresh, regardless of mode.\n  shouldRefreshView ||= !!(flags & LViewFlags.RefreshView);\n\n  // Refresh views when they have a dirty reactive consumer, regardless of mode.\n  shouldRefreshView ||= !!(consumer?.dirty && consumerPollProducersForChange(consumer));\n\n  shouldRefreshView ||= !!(ngDevMode && isExhaustiveCheckNoChanges());\n\n  // Mark the Flags and `ReactiveNode` as not dirty before refreshing the component, so that they\n  // can be re-dirtied during the refresh process.\n  if (consumer) {\n    consumer.dirty = false;\n  }\n  lView[FLAGS] &= ~(LViewFlags.HasChildViewsToRefresh | LViewFlags.RefreshView);\n\n  if (shouldRefreshView) {\n    refreshView(tView, lView, tView.template, lView[CONTEXT]);\n  } else if (flags & LViewFlags.HasChildViewsToRefresh) {\n    if (!isInCheckNoChangesPass) {\n      runEffectsInView(lView);\n    }\n    detectChangesInEmbeddedViews(lView, ChangeDetectionMode.Targeted);\n    const components = tView.components;\n    if (components !== null) {\n      detectChangesInChildComponents(lView, components, ChangeDetectionMode.Targeted);\n    }\n    if (!isInCheckNoChangesPass) {\n      addAfterRenderSequencesForView(lView);\n    }\n  }\n}\n\n/** Refreshes child components in the current view (update mode). */\nfunction detectChangesInChildComponents(\n  hostLView: LView,\n  components: number[],\n  mode: ChangeDetectionMode,\n): void {\n  for (let i = 0; i < components.length; i++) {\n    detectChangesInComponent(hostLView, components[i], mode);\n  }\n}\n\n/**\n * Invoke `HostBindingsFunction`s for view.\n *\n * This methods executes `TView.hostBindingOpCodes`. It is used to execute the\n * `HostBindingsFunction`s associated with the current `LView`.\n *\n * @param tView Current `TView`.\n * @param lView Current `LView`.\n */\nfunction processHostBindingOpCodes(tView: TView, lView: LView): void {\n  const hostBindingOpCodes = tView.hostBindingOpCodes;\n  if (hostBindingOpCodes === null) return;\n  try {\n    for (let i = 0; i < hostBindingOpCodes.length; i++) {\n      const opCode = hostBindingOpCodes[i] as number;\n      if (opCode < 0) {\n        // Negative numbers are element indexes.\n        setSelectedIndex(~opCode);\n      } else {\n        // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n        const directiveIdx = opCode;\n        const bindingRootIndx = hostBindingOpCodes[++i] as number;\n        const hostBindingFn = hostBindingOpCodes[++i] as HostBindingsFunction<any>;\n        setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n        const context = lView[directiveIdx];\n        profiler(ProfilerEvent.HostBindingsUpdateStart, context);\n        hostBindingFn(RenderFlags.Update, context);\n        profiler(ProfilerEvent.HostBindingsUpdateEnd, context);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NotificationSource} from '../../change_detection/scheduling/zoneless_scheduling';\nimport {isRootView} from '../interfaces/type_checks';\nimport {ENVIRONMENT, FLAGS, LView, LViewFlags} from '../interfaces/view';\nimport {isRefreshingViews} from '../state';\nimport {getLViewParent} from '../util/view_utils';\n\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param lView The starting LView to mark dirty\n * @returns the root LView\n */\nexport function markViewDirty(lView: LView, source: NotificationSource): LView | null {\n  const dirtyBitsToUse = isRefreshingViews()\n    ? // When we are actively refreshing views, we only use the `Dirty` bit to mark a view\n      // for check. This bit is ignored in ChangeDetectionMode.Targeted, which is used to\n      // synchronously rerun change detection on a specific set of views (those which have\n      // the `RefreshView` flag and those with dirty signal consumers). `LViewFlags.Dirty`\n      // does not support re-entrant change detection on its own.\n      LViewFlags.Dirty\n    : // When we are not actively refreshing a view tree, it is absolutely\n      // valid to update state and mark views dirty. We use the `RefreshView` flag in this\n      // case to allow synchronously rerunning change detection. This applies today to\n      // afterRender hooks as well as animation listeners which execute after detecting\n      // changes in a view when the render factory flushes.\n      LViewFlags.RefreshView | LViewFlags.Dirty;\n  lView[ENVIRONMENT].changeDetectionScheduler?.notify(source);\n  while (lView) {\n    lView[FLAGS] |= dirtyBitsToUse;\n    const parent = getLViewParent(lView);\n    // Stop traversing up as soon as you find a root view that wasn't attached to any container\n    if (isRootView(lView) && !parent) {\n      return lView;\n    }\n    // continue otherwise\n    lView = parent!;\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {addToArray, removeFromArray} from '../../util/array_utils';\nimport {assertDefined, assertEqual} from '../../util/assert';\nimport {assertLContainer, assertLView} from '../assert';\nimport {\n  CONTAINER_HEADER_OFFSET,\n  LContainer,\n  LContainerFlags,\n  MOVED_VIEWS,\n  NATIVE,\n} from '../interfaces/container';\nimport {TNode} from '../interfaces/node';\nimport {RComment, RElement} from '../interfaces/renderer_dom';\nimport {isLView} from '../interfaces/type_checks';\nimport {\n  DECLARATION_COMPONENT_VIEW,\n  DECLARATION_LCONTAINER,\n  FLAGS,\n  HYDRATION,\n  LView,\n  LViewFlags,\n  NEXT,\n  PARENT,\n  QUERIES,\n  RENDERER,\n  T_HOST,\n  TView,\n  TVIEW,\n} from '../interfaces/view';\nimport {\n  addViewToDOM,\n  destroyLView,\n  detachMovedView,\n  getBeforeNodeForView,\n  removeViewFromDOM,\n} from '../node_manipulation';\nimport {updateAncestorTraversalFlagsOnAttach} from '../util/view_utils';\n\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\nexport function createLContainer(\n  hostNative: RElement | RComment | LView,\n  currentView: LView,\n  native: RComment,\n  tNode: TNode,\n): LContainer {\n  ngDevMode && assertLView(currentView);\n  const lContainer: LContainer = [\n    hostNative, // host native\n    true, // Boolean `true` in this position signifies that this is an `LContainer`\n    0, // flags\n    currentView, // parent\n    null, // next\n    tNode, // t_host\n    null, // dehydrated views\n    native, // native,\n    null, // view refs\n    null, // moved views\n  ];\n  ngDevMode &&\n    assertEqual(\n      lContainer.length,\n      CONTAINER_HEADER_OFFSET,\n      'Should allocate correct number of slots for LContainer header.',\n    );\n  return lContainer;\n}\n\nexport function getLViewFromLContainer<T>(\n  lContainer: LContainer,\n  index: number,\n): LView<T> | undefined {\n  const adjustedIndex = CONTAINER_HEADER_OFFSET + index;\n  // avoid reading past the array boundaries\n  if (adjustedIndex < lContainer.length) {\n    const lView = lContainer[adjustedIndex];\n    ngDevMode && assertLView(lView);\n    return lView as LView<T>;\n  }\n  return undefined;\n}\n\nexport function addLViewToLContainer(\n  lContainer: LContainer,\n  lView: LView<unknown>,\n  index: number,\n  addToDOM = true,\n): void {\n  const tView = lView[TVIEW];\n\n  // Insert into the view tree so the new view can be change-detected\n  insertView(tView, lView, lContainer, index);\n\n  // Insert elements that belong to this view into the DOM tree\n  if (addToDOM) {\n    const beforeNode = getBeforeNodeForView(index, lContainer);\n    const renderer = lView[RENDERER];\n    const parentRNode = renderer.parentNode(lContainer[NATIVE] as RElement | RComment);\n    if (parentRNode !== null) {\n      addViewToDOM(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);\n    }\n  }\n\n  // When in hydration mode, reset the pointer to the first child in\n  // the dehydrated view. This indicates that the view was hydrated and\n  // further attaching/detaching should work with this view as normal.\n  const hydrationInfo = lView[HYDRATION];\n  if (hydrationInfo !== null && hydrationInfo.firstChild !== null) {\n    hydrationInfo.firstChild = null;\n  }\n}\n\nexport function removeLViewFromLContainer(\n  lContainer: LContainer,\n  index: number,\n): LView<unknown> | undefined {\n  const lView = detachView(lContainer, index);\n  if (lView !== undefined) {\n    destroyLView(lView[TVIEW], lView);\n  }\n  return lView;\n}\n\n/**\n * Detaches a view from a container.\n *\n * This method removes the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param lContainer The container from which to detach a view\n * @param removeIndex The index of the view to detach\n * @returns Detached LView instance.\n */\nexport function detachView(lContainer: LContainer, removeIndex: number): LView | undefined {\n  if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;\n\n  const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n  const viewToDetach = lContainer[indexInContainer];\n\n  if (viewToDetach) {\n    const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];\n    if (declarationLContainer !== null && declarationLContainer !== lContainer) {\n      detachMovedView(declarationLContainer, viewToDetach);\n    }\n\n    if (removeIndex > 0) {\n      lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT] as LView;\n    }\n    const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);\n    removeViewFromDOM(viewToDetach[TVIEW], viewToDetach);\n\n    // notify query that a view has been removed\n    const lQueries = removedLView[QUERIES];\n    if (lQueries !== null) {\n      lQueries.detachView(removedLView[TVIEW]);\n    }\n\n    viewToDetach[PARENT] = null;\n    viewToDetach[NEXT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~LViewFlags.Attached;\n  }\n  return viewToDetach;\n}\n\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param tView The `TView' of the `LView` to insert\n * @param lView The view to insert\n * @param lContainer The container into which the view should be inserted\n * @param index Which index in the container to insert the child view into\n */\nfunction insertView(tView: TView, lView: LView, lContainer: LContainer, index: number) {\n  ngDevMode && assertLView(lView);\n  ngDevMode && assertLContainer(lContainer);\n  const indexInContainer = CONTAINER_HEADER_OFFSET + index;\n  const containerLength = lContainer.length;\n\n  if (index > 0) {\n    // This is a new view, we need to add it to the children.\n    lContainer[indexInContainer - 1][NEXT] = lView;\n  }\n  if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n    lView[NEXT] = lContainer[indexInContainer];\n    addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);\n  } else {\n    lContainer.push(lView);\n    lView[NEXT] = null;\n  }\n\n  lView[PARENT] = lContainer;\n\n  // track views where declaration and insertion points are different\n  const declarationLContainer = lView[DECLARATION_LCONTAINER];\n  if (declarationLContainer !== null && lContainer !== declarationLContainer) {\n    trackMovedView(declarationLContainer, lView);\n  }\n\n  // notify query that a new view has been added\n  const lQueries = lView[QUERIES];\n  if (lQueries !== null) {\n    lQueries.insertView(tView);\n  }\n\n  updateAncestorTraversalFlagsOnAttach(lView);\n  // Sets the attached flag\n  lView[FLAGS] |= LViewFlags.Attached;\n}\n\n/**\n * Track views created from the declaration container (TemplateRef) and inserted into a\n * different LContainer or attached directly to ApplicationRef.\n */\nexport function trackMovedView(declarationContainer: LContainer, lView: LView) {\n  ngDevMode && assertDefined(lView, 'LView required');\n  ngDevMode && assertLContainer(declarationContainer);\n  const movedViews = declarationContainer[MOVED_VIEWS];\n  const parent = lView[PARENT]!;\n  ngDevMode && assertDefined(parent, 'missing parent');\n  if (isLView(parent)) {\n    declarationContainer[FLAGS] |= LContainerFlags.HasTransplantedViews;\n  } else {\n    const insertedComponentLView = parent[PARENT]![DECLARATION_COMPONENT_VIEW];\n    ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');\n    const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];\n    ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');\n    if (declaredComponentLView !== insertedComponentLView) {\n      // At this point the declaration-component is not same as insertion-component; this means that\n      // this is a transplanted view. Mark the declared lView as having transplanted views so that\n      // those views can participate in CD.\n      declarationContainer[FLAGS] |= LContainerFlags.HasTransplantedViews;\n    }\n  }\n  if (movedViews === null) {\n    declarationContainer[MOVED_VIEWS] = [lView];\n  } else {\n    movedViews.push(lView);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport type {ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {NotificationSource} from '../change_detection/scheduling/zoneless_scheduling';\nimport type {ApplicationRef} from '../core';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport type {EmbeddedViewRef} from '../linker/view_ref';\nimport {removeFromArray} from '../util/array_utils';\nimport {assertEqual} from '../util/assert';\n\nimport {collectNativeNodes} from './collect_native_nodes';\nimport {checkNoChangesInternal, detectChangesInternal} from './instructions/change_detection';\nimport {markViewDirty} from './instructions/mark_view_dirty';\nimport {CONTAINER_HEADER_OFFSET, VIEW_REFS} from './interfaces/container';\nimport {isDestroyed, isLContainer, isRootView} from './interfaces/type_checks';\nimport {\n  CONTEXT,\n  DECLARATION_LCONTAINER,\n  FLAGS,\n  LView,\n  LViewFlags,\n  PARENT,\n  TVIEW,\n} from './interfaces/view';\nimport {destroyLView, detachMovedView, detachViewFromDOM} from './node_manipulation';\nimport {CheckNoChangesMode} from './state';\nimport {\n  markViewForRefresh,\n  storeLViewOnDestroy,\n  updateAncestorTraversalFlagsOnAttach,\n  requiresRefreshOrTraversal,\n} from './util/view_utils';\nimport {detachView, trackMovedView} from './view/container';\n\n// Needed due to tsickle downleveling where multiple `implements` with classes creates\n// multiple @extends in Closure annotations, which is illegal. This workaround fixes\n// the multiple @extends by making the annotation @implements instead\ninterface ChangeDetectorRefInterface extends ChangeDetectorRef {}\n\nexport class ViewRef<T> implements EmbeddedViewRef<T>, ChangeDetectorRefInterface {\n  private _appRef: ApplicationRef | null = null;\n  private _attachedToViewContainer = false;\n\n  get rootNodes(): any[] {\n    const lView = this._lView;\n    const tView = lView[TVIEW];\n    return collectNativeNodes(tView, lView, tView.firstChild, []);\n  }\n\n  constructor(\n    /**\n     * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.\n     *\n     * When ViewRef is created for a dynamic component, this also represents the `LView` for the\n     * component.\n     *\n     * For a \"regular\" ViewRef created for an embedded view, this is the `LView` for the embedded\n     * view.\n     *\n     * @internal\n     */\n    public _lView: LView,\n\n    /**\n     * This represents the `LView` associated with the point where `ChangeDetectorRef` was\n     * requested.\n     *\n     * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.\n     */\n    private _cdRefInjectingView?: LView,\n    readonly notifyErrorHandler = true,\n  ) {}\n\n  get context(): T {\n    return this._lView[CONTEXT] as unknown as T;\n  }\n\n  /**\n   * @deprecated Replacing the full context object is not supported. Modify the context\n   *   directly, or consider using a `Proxy` if you need to replace the full object.\n   * // TODO(devversion): Remove this.\n   */\n  set context(value: T) {\n    if (ngDevMode) {\n      // Note: We have a warning message here because the `@deprecated` JSDoc will not be picked\n      // up for assignments on the setter. We want to let users know about the deprecated usage.\n      console.warn(\n        'Angular: Replacing the `context` object of an `EmbeddedViewRef` is deprecated.',\n      );\n    }\n\n    this._lView[CONTEXT] = value as unknown as {};\n  }\n\n  get destroyed(): boolean {\n    return isDestroyed(this._lView);\n  }\n\n  destroy(): void {\n    if (this._appRef) {\n      this._appRef.detachView(this);\n    } else if (this._attachedToViewContainer) {\n      const parent = this._lView[PARENT];\n      if (isLContainer(parent)) {\n        const viewRefs = parent[VIEW_REFS] as ViewRef<unknown>[] | null;\n        const index = viewRefs ? viewRefs.indexOf(this) : -1;\n        if (index > -1) {\n          ngDevMode &&\n            assertEqual(\n              index,\n              parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET,\n              'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.',\n            );\n          detachView(parent, index);\n          removeFromArray(viewRefs!, index);\n        }\n      }\n      this._attachedToViewContainer = false;\n    }\n    destroyLView(this._lView[TVIEW], this._lView);\n  }\n\n  onDestroy(callback: Function) {\n    storeLViewOnDestroy(this._lView, callback as () => void);\n  }\n\n  /**\n   * Marks a view and all of its ancestors dirty.\n   *\n   * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush} component is\n   * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n   * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n   *\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```ts\n   * @Component({\n   *   selector: 'app-root',\n   *   template: `Number of ticks: {{numberOfTicks}}`\n   *   changeDetection: ChangeDetectionStrategy.OnPush,\n   * })\n   * class AppComponent {\n   *   numberOfTicks = 0;\n   *\n   *   constructor(private ref: ChangeDetectorRef) {\n   *     setInterval(() => {\n   *       this.numberOfTicks++;\n   *       // the following is required, otherwise the view will not be updated\n   *       this.ref.markForCheck();\n   *     }, 1000);\n   *   }\n   * }\n   * ```\n   */\n  markForCheck(): void {\n    markViewDirty(this._cdRefInjectingView || this._lView, NotificationSource.MarkForCheck);\n  }\n\n  /**\n   * Detaches the view from the change detection tree.\n   *\n   * Detached views will not be checked during change detection runs until they are\n   * re-attached, even if they are dirty. `detach` can be used in combination with\n   * {@link ChangeDetectorRef#detectChanges} to implement local change\n   * detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds. We can do that by detaching\n   * the component's change detector and doing a local check every five seconds.\n   *\n   * ```ts\n   * class DataProvider {\n   *   // in a real application the returned data will be different every time\n   *   get data() {\n   *     return [1,2,3,4,5];\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'giant-list',\n   *   template: `\n   *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n   *   `,\n   * })\n   * class GiantList {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n   *     ref.detach();\n   *     setInterval(() => {\n   *       this.ref.detectChanges();\n   *     }, 5000);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   providers: [DataProvider],\n   *   template: `\n   *     <giant-list><giant-list>\n   *   `,\n   * })\n   * class App {\n   * }\n   * ```\n   */\n  detach(): void {\n    this._lView[FLAGS] &= ~LViewFlags.Attached;\n  }\n\n  /**\n   * Re-attaches a view to the change detection tree.\n   *\n   * This can be used to re-attach views that were previously detached from the tree\n   * using {@link ChangeDetectorRef#detach}. Views are attached to the tree by default.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example creates a component displaying `live` data. The component will detach\n   * its change detector from the main change detector tree when the component's live property\n   * is set to false.\n   *\n   * ```ts\n   * class DataProvider {\n   *   data = 1;\n   *\n   *   constructor() {\n   *     setInterval(() => {\n   *       this.data = this.data * 2;\n   *     }, 500);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'live-data',\n   *   inputs: ['live'],\n   *   template: 'Data: {{dataProvider.data}}'\n   * })\n   * class LiveData {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n   *\n   *   set live(value) {\n   *     if (value) {\n   *       this.ref.reattach();\n   *     } else {\n   *       this.ref.detach();\n   *     }\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app-root',\n   *   providers: [DataProvider],\n   *   template: `\n   *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n   *     <live-data [live]=\"live\"><live-data>\n   *   `,\n   * })\n   * class AppComponent {\n   *   live = true;\n   * }\n   * ```\n   */\n  reattach(): void {\n    updateAncestorTraversalFlagsOnAttach(this._lView);\n    this._lView[FLAGS] |= LViewFlags.Attached;\n  }\n\n  /**\n   * Checks the view and its children.\n   *\n   * This can also be used in combination with {@link ChangeDetectorRef#detach} to implement\n   * local change detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine, the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds.\n   *\n   * We can do that by detaching the component's change detector and doing a local change detection\n   * check every five seconds.\n   *\n   * See {@link ChangeDetectorRef#detach} for more information.\n   */\n  detectChanges(): void {\n    // Add `RefreshView` flag to ensure this view is refreshed if not already dirty.\n    // `RefreshView` flag is used intentionally over `Dirty` because it gets cleared before\n    // executing any of the actual refresh code while the `Dirty` flag doesn't get cleared\n    // until the end of the refresh. Using `RefreshView` prevents creating a potential difference\n    // in the state of the LViewFlags during template execution.\n    this._lView[FLAGS] |= LViewFlags.RefreshView;\n    detectChangesInternal(this._lView, this.notifyErrorHandler);\n  }\n\n  /**\n   * Checks the change detector and its children, and throws if any changes are detected.\n   *\n   * This is used in development mode to verify that running change detection doesn't\n   * introduce other changes.\n   */\n  checkNoChanges(): void {\n    if (ngDevMode) {\n      checkNoChangesInternal(\n        this._lView,\n        CheckNoChangesMode.OnlyDirtyViews,\n        this.notifyErrorHandler,\n      );\n    }\n  }\n\n  attachToViewContainerRef() {\n    if (this._appRef) {\n      throw new RuntimeError(\n        RuntimeErrorCode.VIEW_ALREADY_ATTACHED,\n        ngDevMode && 'This view is already attached directly to the ApplicationRef!',\n      );\n    }\n    this._attachedToViewContainer = true;\n  }\n\n  detachFromAppRef() {\n    this._appRef = null;\n    const isRoot = isRootView(this._lView);\n    const declarationContainer = this._lView[DECLARATION_LCONTAINER];\n    if (declarationContainer !== null && !isRoot) {\n      detachMovedView(declarationContainer, this._lView);\n    }\n    detachViewFromDOM(this._lView[TVIEW], this._lView);\n  }\n\n  attachToAppRef(appRef: ApplicationRef) {\n    if (this._attachedToViewContainer) {\n      throw new RuntimeError(\n        RuntimeErrorCode.VIEW_ALREADY_ATTACHED,\n        ngDevMode && 'This view is already attached to a ViewContainer!',\n      );\n    }\n    this._appRef = appRef;\n    const isRoot = isRootView(this._lView);\n    const declarationContainer = this._lView[DECLARATION_LCONTAINER];\n    if (declarationContainer !== null && !isRoot) {\n      trackMovedView(declarationContainer, this._lView);\n    }\n    updateAncestorTraversalFlagsOnAttach(this._lView);\n  }\n}\n\n/**\n * Reports whether the given view is considered dirty according to the different marking mechanisms.\n */\nexport function isViewDirty(view: ViewRef<unknown>): boolean {\n  return requiresRefreshOrTraversal(view._lView) || !!(view._lView[FLAGS] & LViewFlags.Dirty);\n}\n\nexport function markForRefresh(view: ViewRef<unknown>): void {\n  markViewForRefresh(view['_cdRefInjectingView'] || view._lView);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector} from '../di/injector';\nimport {DehydratedContainerView} from '../hydration/interfaces';\nimport {TContainerNode, TNode, TNodeType} from '../render3/interfaces/node';\nimport {LView} from '../render3/interfaces/view';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {createAndRenderEmbeddedLView} from '../render3/view_manipulation';\nimport {ViewRef as R3_ViewRef} from '../render3/view_ref';\nimport {assertDefined} from '../util/assert';\n\nimport {createElementRef, ElementRef} from './element_ref';\nimport {EmbeddedViewRef} from './view_ref';\n\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see {@link ViewContainerRef}\n *\n * @publicApi\n */\nexport abstract class TemplateRef<C> {\n  /**\n   * The anchor element in the parent view for this embedded view.\n   *\n   * The data-binding and [injection contexts](guide/di/dependency-injection-context) of embedded\n   * views created from this `TemplateRef` inherit from the contexts of this location.\n   *\n   * Typically new embedded views are attached to the view container of this location, but in\n   * advanced use-cases, the view can be attached to a different container while keeping the\n   * data-binding and injection context from the original location.\n   *\n   */\n  // TODO(i): rename to anchor or location\n  abstract readonly elementRef: ElementRef;\n\n  /**\n   * Instantiates an unattached embedded view based on this template.\n   * @param context The data-binding context of the embedded view, as declared\n   * in the `<ng-template>` usage.\n   * @param injector Injector to be used within the embedded view.\n   * @returns The new embedded view object.\n   */\n  abstract createEmbeddedView(context: C, injector?: Injector): EmbeddedViewRef<C>;\n\n  /**\n   * Implementation of the `createEmbeddedView` function.\n   *\n   * This implementation is internal and allows framework code\n   * to invoke it with extra parameters (e.g. for hydration) without\n   * affecting public API.\n   *\n   * @internal\n   */\n  abstract createEmbeddedViewImpl(\n    context: C,\n    injector?: Injector,\n    dehydratedView?: DehydratedContainerView | null,\n  ): EmbeddedViewRef<C>;\n\n  /**\n   * Returns an `ssrId` associated with a TView, which was used to\n   * create this instance of the `TemplateRef`.\n   *\n   * @internal\n   */\n  abstract get ssrId(): string | null;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => TemplateRef<any> | null = injectTemplateRef;\n}\n\nconst ViewEngineTemplateRef = TemplateRef;\n\n// TODO(alxhub): combine interface and implementation. Currently this is challenging since something\n// in g3 depends on them being separate.\nconst R3TemplateRef = class TemplateRef<T> extends ViewEngineTemplateRef<T> {\n  constructor(\n    private _declarationLView: LView,\n    private _declarationTContainer: TContainerNode,\n    public override elementRef: ElementRef,\n  ) {\n    super();\n  }\n\n  /**\n   * Returns an `ssrId` associated with a TView, which was used to\n   * create this instance of the `TemplateRef`.\n   *\n   * @internal\n   */\n  override get ssrId(): string | null {\n    return this._declarationTContainer.tView?.ssrId || null;\n  }\n\n  override createEmbeddedView(context: T, injector?: Injector): EmbeddedViewRef<T> {\n    return this.createEmbeddedViewImpl(context, injector);\n  }\n\n  /**\n   * @internal\n   */\n  override createEmbeddedViewImpl(\n    context: T,\n    injector?: Injector,\n    dehydratedView?: DehydratedContainerView,\n  ): EmbeddedViewRef<T> {\n    const embeddedLView = createAndRenderEmbeddedLView(\n      this._declarationLView,\n      this._declarationTContainer,\n      context,\n      {embeddedViewInjector: injector, dehydratedView},\n    );\n    return new R3_ViewRef<T>(embeddedLView);\n  }\n};\n\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nexport function injectTemplateRef<T>(): TemplateRef<T> | null {\n  return createTemplateRef<T>(getCurrentTNode()!, getLView());\n}\n\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param hostTNode The node on which a TemplateRef is requested\n * @param hostLView The `LView` to which the node belongs\n * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type\n */\nexport function createTemplateRef<T>(hostTNode: TNode, hostLView: LView): TemplateRef<T> | null {\n  if (hostTNode.type & TNodeType.Container) {\n    ngDevMode && assertDefined(hostTNode.tView, 'TView must be allocated');\n    return new R3TemplateRef(\n      hostLView,\n      hostTNode as TContainerNode,\n      createElementRef(hostTNode, hostLView),\n    );\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertDomNode, assertIndexInRange} from '../util/assert';\n\nimport {TNode, TNodeType} from './interfaces/node';\nimport {Renderer} from './interfaces/renderer';\nimport {RElement, RNode} from './interfaces/renderer_dom';\nimport {LView} from './interfaces/view';\nimport {getInsertInFrontOfRNodeWithNoI18n} from './node_manipulation';\nimport {nativeInsertBefore} from './dom_node_manipulation';\nimport {unwrapRNode} from './util/view_utils';\n\n/**\n * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nexport function getInsertInFrontOfRNodeWithI18n(\n  parentTNode: TNode,\n  currentTNode: TNode,\n  lView: LView,\n): RNode | null {\n  const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;\n  const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex)\n    ? tNodeInsertBeforeIndex[0]\n    : tNodeInsertBeforeIndex;\n  if (insertBeforeIndex === null) {\n    return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);\n  } else {\n    ngDevMode && assertIndexInRange(lView, insertBeforeIndex);\n    return unwrapRNode(lView[insertBeforeIndex]);\n  }\n}\n\n/**\n * Process `TNode.insertBeforeIndex` by adding i18n text nodes.\n *\n * See `TNode.insertBeforeIndex`\n */\nexport function processI18nInsertBefore(\n  renderer: Renderer,\n  childTNode: TNode,\n  lView: LView,\n  childRNode: RNode | RNode[],\n  parentRElement: RElement | null,\n): void {\n  const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;\n  if (Array.isArray(tNodeInsertBeforeIndex)) {\n    // An array indicates that there are i18n nodes that need to be added as children of this\n    // `childRNode`. These i18n nodes were created before this `childRNode` was available and so\n    // only now can be added. The first element of the array is the normal index where we should\n    // insert the `childRNode`. Additional elements are the extra nodes to be added as children of\n    // `childRNode`.\n    ngDevMode && assertDomNode(childRNode);\n    let i18nParent: RElement | null = childRNode as RElement;\n    let anchorRNode: RNode | null = null;\n    if (!(childTNode.type & TNodeType.AnyRNode)) {\n      anchorRNode = i18nParent;\n      i18nParent = parentRElement;\n    }\n    if (i18nParent !== null && childTNode.componentOffset === -1) {\n      for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {\n        // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.\n        // see `assertDomNode` below.\n        const i18nChild = lView[tNodeInsertBeforeIndex[i]];\n        nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertEqual, assertGreaterThanOrEqual, assertNotSame} from '../util/assert';\nimport {assertTNodeForTView} from './assert';\nimport {\n  TAttributes,\n  TContainerNode,\n  TElementContainerNode,\n  TElementNode,\n  TIcuContainerNode,\n  TLetDeclarationNode,\n  TNode,\n  TNodeFlags,\n  TNodeType,\n  TProjectionNode,\n} from './interfaces/node';\nimport {TStylingRange} from './interfaces/styling';\nimport {HEADER_OFFSET, TView} from './interfaces/view';\nimport {assertPureTNodeType} from './node_assert';\nimport {\n  getCurrentParentTNode,\n  getCurrentTNodePlaceholderOk,\n  isCurrentTNodeParent,\n  isInI18nBlock,\n  isInSkipHydrationBlock,\n  setCurrentTNode,\n} from './state';\n\n/**\n * Create and stores the TNode, and hooks it up to the tree.\n *\n * @param tView The current `TView`.\n * @param index The index at which the TNode should be saved (null if view, since they are not\n * saved).\n * @param type The type of TNode to create\n * @param native The native element for this node, if applicable\n * @param name The tag name of the associated native element, if applicable\n * @param attrs Any attrs for the native element, if applicable\n */\nexport function getOrCreateTNode(\n  tView: TView,\n  index: number,\n  type: TNodeType.Element | TNodeType.Text,\n  name: string | null,\n  attrs: TAttributes | null,\n): TElementNode;\nexport function getOrCreateTNode(\n  tView: TView,\n  index: number,\n  type: TNodeType.Container,\n  name: string | null,\n  attrs: TAttributes | null,\n): TContainerNode;\nexport function getOrCreateTNode(\n  tView: TView,\n  index: number,\n  type: TNodeType.Projection,\n  name: null,\n  attrs: TAttributes | null,\n): TProjectionNode;\nexport function getOrCreateTNode(\n  tView: TView,\n  index: number,\n  type: TNodeType.ElementContainer,\n  name: string | null,\n  attrs: TAttributes | null,\n): TElementContainerNode;\nexport function getOrCreateTNode(\n  tView: TView,\n  index: number,\n  type: TNodeType.Icu,\n  name: null,\n  attrs: TAttributes | null,\n): TElementContainerNode;\nexport function getOrCreateTNode(\n  tView: TView,\n  index: number,\n  type: TNodeType.LetDeclaration,\n  name: null,\n  attrs: null,\n): TLetDeclarationNode;\nexport function getOrCreateTNode(\n  tView: TView,\n  index: number,\n  type: TNodeType,\n  name: string | null,\n  attrs: TAttributes | null,\n): TElementNode &\n  TContainerNode &\n  TElementContainerNode &\n  TProjectionNode &\n  TIcuContainerNode &\n  TLetDeclarationNode {\n  ngDevMode &&\n    index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in\n    // `view_engine_compatibility` for additional context.\n    assertGreaterThanOrEqual(index, HEADER_OFFSET, \"TNodes can't be in the LView header.\");\n  // Keep this function short, so that the VM will inline it.\n  ngDevMode && assertPureTNodeType(type);\n  let tNode = tView.data[index] as TNode;\n  if (tNode === null) {\n    tNode = createTNodeAtIndex(tView, index, type, name, attrs);\n    if (isInI18nBlock()) {\n      // If we are in i18n block then all elements should be pre declared through `Placeholder`\n      // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n      // If the `TNode` was not pre-declared than it means it was not mentioned which means it was\n      // removed, so we mark it as detached.\n      tNode.flags |= TNodeFlags.isDetached;\n    }\n  } else if (tNode.type & TNodeType.Placeholder) {\n    tNode.type = type;\n    tNode.value = name;\n    tNode.attrs = attrs;\n    const parent = getCurrentParentTNode();\n    tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;\n    ngDevMode && assertTNodeForTView(tNode, tView);\n    ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');\n  }\n  setCurrentTNode(tNode, true);\n  return tNode as TElementNode &\n    TContainerNode &\n    TElementContainerNode &\n    TProjectionNode &\n    TIcuContainerNode;\n}\n\nexport function createTNodeAtIndex(\n  tView: TView,\n  index: number,\n  type: TNodeType,\n  name: string | null,\n  attrs: TAttributes | null,\n) {\n  const currentTNode = getCurrentTNodePlaceholderOk();\n  const isParent = isCurrentTNodeParent();\n  const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;\n\n  // Parents cannot cross component boundaries because components will be used in multiple places.\n  const tNode = (tView.data[index] = createTNode(\n    tView,\n    parent as TElementNode | TContainerNode,\n    type,\n    index,\n    name,\n    attrs,\n  ));\n\n  // Assign a pointer to the first child node of a given view. The first node is not always the one\n  // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has\n  // the index 1 or more, so we can't just check node index.\n  linkTNodeInTView(tView, tNode, currentTNode, isParent);\n\n  return tNode;\n}\n\nfunction linkTNodeInTView(\n  tView: TView,\n  tNode: TNode,\n  currentTNode: TNode | null,\n  isParent: boolean,\n) {\n  if (tView.firstChild === null) {\n    tView.firstChild = tNode;\n  }\n  if (currentTNode !== null) {\n    if (isParent) {\n      // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?\n      if (currentTNode.child == null && tNode.parent !== null) {\n        // We are in the same view, which means we are adding content node to the parent view.\n        currentTNode.child = tNode;\n      }\n    } else {\n      if (currentTNode.next === null) {\n        // In the case of i18n the `currentTNode` may already be linked, in which case we don't want\n        // to break the links which i18n created.\n        currentTNode.next = tNode;\n        tNode.prev = currentTNode;\n      }\n    }\n  }\n}\n\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param tView `TView` to which this `TNode` belongs\n * @param tParent Parent `TNode`\n * @param type The type of the node\n * @param index The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param tagName The tag name of the node\n * @param attrs The attributes defined on this node\n * @returns the TNode object\n */\nexport function createTNode(\n  tView: TView,\n  tParent: TElementNode | TContainerNode | null,\n  type: TNodeType.Container,\n  index: number,\n  tagName: string | null,\n  attrs: TAttributes | null,\n): TContainerNode;\nexport function createTNode(\n  tView: TView,\n  tParent: TElementNode | TContainerNode | null,\n  type: TNodeType.Element | TNodeType.Text,\n  index: number,\n  tagName: string | null,\n  attrs: TAttributes | null,\n): TElementNode;\nexport function createTNode(\n  tView: TView,\n  tParent: TElementNode | TContainerNode | null,\n  type: TNodeType.ElementContainer,\n  index: number,\n  tagName: string | null,\n  attrs: TAttributes | null,\n): TElementContainerNode;\nexport function createTNode(\n  tView: TView,\n  tParent: TElementNode | TContainerNode | null,\n  type: TNodeType.Icu,\n  index: number,\n  tagName: string | null,\n  attrs: TAttributes | null,\n): TIcuContainerNode;\nexport function createTNode(\n  tView: TView,\n  tParent: TElementNode | TContainerNode | null,\n  type: TNodeType.Projection,\n  index: number,\n  tagName: string | null,\n  attrs: TAttributes | null,\n): TProjectionNode;\nexport function createTNode(\n  tView: TView,\n  tParent: TElementNode | TContainerNode | null,\n  type: TNodeType.LetDeclaration,\n  index: number,\n  tagName: null,\n  attrs: null,\n): TLetDeclarationNode;\nexport function createTNode(\n  tView: TView,\n  tParent: TElementNode | TContainerNode | null,\n  type: TNodeType,\n  index: number,\n  tagName: string | null,\n  attrs: TAttributes | null,\n): TNode;\nexport function createTNode(\n  tView: TView,\n  tParent: TElementNode | TContainerNode | null,\n  type: TNodeType,\n  index: number,\n  value: string | null,\n  attrs: TAttributes | null,\n): TNode {\n  ngDevMode &&\n    index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in\n    // `view_engine_compatibility` for additional context.\n    assertGreaterThanOrEqual(index, HEADER_OFFSET, \"TNodes can't be in the LView header.\");\n  ngDevMode && assertNotSame(attrs, undefined, \"'undefined' is not valid value for 'attrs'\");\n  ngDevMode && ngDevMode.tNode++;\n  ngDevMode && tParent && assertTNodeForTView(tParent, tView);\n  let injectorIndex = tParent ? tParent.injectorIndex : -1;\n  let flags = 0;\n  if (isInSkipHydrationBlock()) {\n    flags |= TNodeFlags.inSkipHydrationBlock;\n  }\n\n  // TODO: would it be helpful to use a prototypal inheritance here, similar to the way we do so with signals?\n  const tNode = {\n    type,\n    index,\n    insertBeforeIndex: null,\n    injectorIndex,\n    directiveStart: -1,\n    directiveEnd: -1,\n    directiveStylingLast: -1,\n    componentOffset: -1,\n    propertyBindings: null,\n    flags,\n    providerIndexes: 0,\n    value: value,\n    attrs: attrs,\n    mergedAttrs: null,\n    localNames: null,\n    initialInputs: null,\n    inputs: null,\n    hostDirectiveInputs: null,\n    outputs: null,\n    hostDirectiveOutputs: null,\n    directiveToIndex: null,\n    tView: null,\n    next: null,\n    prev: null,\n    projectionNext: null,\n    child: null,\n    parent: tParent,\n    projection: null,\n    styles: null,\n    stylesWithoutHost: null,\n    residualStyles: undefined,\n    classes: null,\n    classesWithoutHost: null,\n    residualClasses: undefined,\n    classBindings: 0 as TStylingRange,\n    styleBindings: 0 as TStylingRange,\n  };\n\n  if (ngDevMode) {\n    // For performance reasons it is important that the tNode retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tNode);\n  }\n\n  return tNode;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertEqual} from '../../util/assert';\nimport {TNode, TNodeType} from '../interfaces/node';\nimport {setI18nHandling} from '../node_manipulation';\nimport {getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore} from '../node_manipulation_i18n';\n\n/**\n * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list\n * `tNode.insertBeforeIndex`.\n *\n * Things to keep in mind:\n * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the\n *    `ɵɵi18nStart` instruction.\n * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by\n *    `ɵɵelementStart` instruction.\n * 3. `ɵɵelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a\n *    smaller index `TNode` is guaranteed to be created before a larger one)\n *\n * We use the above three invariants to determine `TNode.insertBeforeIndex`.\n *\n * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,\n * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that\n * the next node is not yet created and therefore we can't insert in front of it.\n *\n * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't\n *        know if there will be further `TNode`s inserted after.)\n * Rule2: If `previousTNode` is created after the `tNode` being inserted, then\n *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check\n *        previous to see if we can update its `insertBeforeTNode`)\n *\n * See `TNode.insertBeforeIndex` for more context.\n *\n * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in\n *     reverse order. (If `TNode` would have `previous` this would not be necessary.)\n * @param newTNode A TNode to add to the `previousTNodes` list.\n */\nexport function addTNodeAndUpdateInsertBeforeIndex(previousTNodes: TNode[], newTNode: TNode) {\n  // Start with Rule1\n  ngDevMode &&\n    assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');\n\n  previousTNodes.push(newTNode);\n  if (previousTNodes.length > 1) {\n    for (let i = previousTNodes.length - 2; i >= 0; i--) {\n      const existingTNode = previousTNodes[i];\n      // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.\n      // It is safe to ignore them.\n      if (!isI18nText(existingTNode)) {\n        if (\n          isNewTNodeCreatedBefore(existingTNode, newTNode) &&\n          getInsertBeforeIndex(existingTNode) === null\n        ) {\n          // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)\n          // then add the `insertBeforeIndex`.\n          setInsertBeforeIndex(existingTNode, newTNode.index);\n        }\n      }\n    }\n  }\n}\n\nfunction isI18nText(tNode: TNode): boolean {\n  return !(tNode.type & TNodeType.Placeholder);\n}\n\nfunction isNewTNodeCreatedBefore(existingTNode: TNode, newTNode: TNode): boolean {\n  return isI18nText(newTNode) || existingTNode.index > newTNode.index;\n}\n\nfunction getInsertBeforeIndex(tNode: TNode): number | null {\n  const index = tNode.insertBeforeIndex;\n  return Array.isArray(index) ? index[0] : index;\n}\n\nfunction setInsertBeforeIndex(tNode: TNode, value: number): void {\n  const index = tNode.insertBeforeIndex;\n  if (Array.isArray(index)) {\n    // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`\n    index[0] = value;\n  } else {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    tNode.insertBeforeIndex = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  assertEqual,\n  assertGreaterThan,\n  assertGreaterThanOrEqual,\n  throwError,\n} from '../../util/assert';\nimport {assertTIcu, assertTNode} from '../assert';\nimport {IcuCreateOpCode, TIcu} from '../interfaces/i18n';\nimport {TIcuContainerNode, TNode, TNodeType} from '../interfaces/node';\nimport {LView, TView} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {setI18nHandling} from '../node_manipulation';\nimport {getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore} from '../node_manipulation_i18n';\nimport {createTNodeAtIndex} from '../tnode_manipulation';\n\nimport {addTNodeAndUpdateInsertBeforeIndex} from './i18n_insert_before_index';\n\n/**\n * Retrieve `TIcu` at a given `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be read from.\n */\nexport function getTIcu(tView: TView, index: number): TIcu | null {\n  const value = tView.data[index] as null | TIcu | TIcuContainerNode | string;\n  if (value === null || typeof value === 'string') return null;\n  if (\n    ngDevMode &&\n    !(value.hasOwnProperty('tView') || value.hasOwnProperty('currentCaseLViewIndex'))\n  ) {\n    throwError(\"We expect to get 'null'|'TIcu'|'TIcuContainer', but got: \" + value);\n  }\n  // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be\n  // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it\n  // will be just two cases which fits into the browser inline cache (inline cache can take up to\n  // 4)\n  const tIcu = value.hasOwnProperty('currentCaseLViewIndex')\n    ? (value as TIcu)\n    : (value as TIcuContainerNode).value;\n  ngDevMode && assertTIcu(tIcu);\n  return tIcu;\n}\n\n/**\n * Store `TIcu` at a give `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be stored at in `Tview.data`\n * @param tIcu The TIcu to store.\n */\nexport function setTIcu(tView: TView, index: number, tIcu: TIcu): void {\n  const tNode = tView.data[index] as null | TIcuContainerNode;\n  ngDevMode &&\n    assertEqual(\n      tNode === null || tNode.hasOwnProperty('tView'),\n      true,\n      \"We expect to get 'null'|'TIcuContainer'\",\n    );\n  if (tNode === null) {\n    tView.data[index] = tIcu;\n  } else {\n    ngDevMode && assertTNodeType(tNode, TNodeType.Icu);\n    tNode.value = tIcu;\n  }\n}\n\n/**\n * Set `TNode.insertBeforeIndex` taking the `Array` into account.\n *\n * See `TNode.insertBeforeIndex`\n */\nexport function setTNodeInsertBeforeIndex(tNode: TNode, index: number) {\n  ngDevMode && assertTNode(tNode);\n  let insertBeforeIndex = tNode.insertBeforeIndex;\n  if (insertBeforeIndex === null) {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    insertBeforeIndex = tNode.insertBeforeIndex = [\n      null! /* may be updated to number later */,\n      index,\n    ];\n  } else {\n    assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');\n    (insertBeforeIndex as number[]).push(index);\n  }\n}\n\n/**\n * Create `TNode.type=TNodeType.Placeholder` node.\n *\n * See `TNodeType.Placeholder` for more information.\n */\nexport function createTNodePlaceholder(\n  tView: TView,\n  previousTNodes: TNode[],\n  index: number,\n): TNode {\n  const tNode = createTNodeAtIndex(tView, index, TNodeType.Placeholder, null, null);\n  addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);\n  return tNode;\n}\n\n/**\n * Returns current ICU case.\n *\n * ICU cases are stored as index into the `TIcu.cases`.\n * At times it is necessary to communicate that the ICU case just switched and that next ICU update\n * should update all bindings regardless of the mask. In such a case the we store negative numbers\n * for cases which have just been switched. This function removes the negative flag.\n */\nexport function getCurrentICUCaseIndex(tIcu: TIcu, lView: LView) {\n  const currentCase: number | null = lView[tIcu.currentCaseLViewIndex];\n  return currentCase === null ? currentCase : currentCase < 0 ? ~currentCase : currentCase;\n}\n\nexport function getParentFromIcuCreateOpCode(mergedCode: number): number {\n  return mergedCode >>> IcuCreateOpCode.SHIFT_PARENT;\n}\n\nexport function getRefFromIcuCreateOpCode(mergedCode: number): number {\n  return (mergedCode & IcuCreateOpCode.MASK_REF) >>> IcuCreateOpCode.SHIFT_REF;\n}\n\nexport function getInstructionFromIcuCreateOpCode(mergedCode: number): number {\n  return mergedCode & IcuCreateOpCode.MASK_INSTRUCTION;\n}\n\nexport function icuCreateOpCode(opCode: IcuCreateOpCode, parentIdx: number, refIdx: number) {\n  ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');\n  ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');\n  return (\n    opCode | (parentIdx << IcuCreateOpCode.SHIFT_PARENT) | (refIdx << IcuCreateOpCode.SHIFT_REF)\n  );\n}\n\n// Returns whether the given value corresponds to a root template message,\n// or a sub-template.\nexport function isRootTemplateMessage(subTemplateIndex: number): subTemplateIndex is -1 {\n  return subTemplateIndex === -1;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertDomNode, assertNumber, assertNumberInRange} from '../../util/assert';\nimport {EMPTY_ARRAY} from '../../util/empty';\nimport {assertTIcu, assertTNodeForLView} from '../assert';\nimport {getCurrentICUCaseIndex} from '../i18n/i18n_util';\nimport {I18nRemoveOpCodes, TIcu} from '../interfaces/i18n';\nimport {TIcuContainerNode} from '../interfaces/node';\nimport {RNode} from '../interfaces/renderer_dom';\nimport {LView, TVIEW} from '../interfaces/view';\n\ninterface IcuIteratorState {\n  stack: any[];\n  index: number;\n  lView?: LView;\n  removes?: I18nRemoveOpCodes;\n}\n\ntype IcuIterator = () => RNode | null;\n\nfunction enterIcu(state: IcuIteratorState, tIcu: TIcu, lView: LView) {\n  state.index = 0;\n  const currentCase = getCurrentICUCaseIndex(tIcu, lView);\n  if (currentCase !== null) {\n    ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);\n    state.removes = tIcu.remove[currentCase];\n  } else {\n    state.removes = EMPTY_ARRAY as any;\n  }\n}\n\nfunction icuContainerIteratorNext(state: IcuIteratorState): RNode | null {\n  if (state.index < state.removes!.length) {\n    const removeOpCode = state.removes![state.index++] as number;\n    ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');\n    if (removeOpCode > 0) {\n      const rNode = state.lView![removeOpCode];\n      ngDevMode && assertDomNode(rNode);\n      return rNode;\n    } else {\n      state.stack.push(state.index, state.removes);\n      // ICUs are represented by negative indices\n      const tIcuIndex = ~removeOpCode;\n      const tIcu = state.lView![TVIEW].data[tIcuIndex] as TIcu;\n      ngDevMode && assertTIcu(tIcu);\n      enterIcu(state, tIcu, state.lView!);\n      return icuContainerIteratorNext(state);\n    }\n  } else {\n    if (state.stack.length === 0) {\n      return null;\n    } else {\n      state.removes = state.stack.pop();\n      state.index = state.stack.pop();\n      return icuContainerIteratorNext(state);\n    }\n  }\n}\n\nexport function loadIcuContainerVisitor() {\n  const _state: IcuIteratorState = {\n    stack: [],\n    index: -1,\n  };\n\n  /**\n   * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`\n   * to determine which root belong to the ICU.\n   *\n   * Example of usage.\n   * ```ts\n   * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);\n   * let rNode: RNode|null;\n   * while(rNode = nextRNode()) {\n   *   console.log(rNode);\n   * }\n   * ```\n   *\n   * @param tIcuContainerNode Current `TIcuContainerNode`\n   * @param lView `LView` where the `RNode`s should be looked up.\n   */\n  function icuContainerIteratorStart(\n    tIcuContainerNode: TIcuContainerNode,\n    lView: LView,\n  ): IcuIterator {\n    _state.lView = lView;\n    while (_state.stack.length) _state.stack.pop();\n    ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);\n    enterIcu(_state, tIcuContainerNode.value, lView);\n    return icuContainerIteratorNext.bind(null, _state);\n  }\n\n  return icuContainerIteratorStart;\n}\n\nexport function createIcuIterator(tIcu: TIcu, lView: LView): IcuIterator {\n  const state: IcuIteratorState = {\n    stack: [],\n    index: -1,\n    lView,\n  };\n  ngDevMode && assertTIcu(tIcu);\n  enterIcu(state, tIcu, lView);\n  return icuContainerIteratorNext.bind(null, state);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NodeNavigationStep, REFERENCE_NODE_BODY, REFERENCE_NODE_HOST} from './interfaces';\n\n/**\n * Regexp that extracts a reference node information from the compressed node location.\n * The reference node is represented as either:\n *  - a number which points to an LView slot\n *  - the `b` char which indicates that the lookup should start from the `document.body`\n *  - the `h` char to start lookup from the component host node (`lView[HOST]`)\n */\nconst REF_EXTRACTOR_REGEXP = /* @__PURE__ */ new RegExp(\n  `^(\\\\d+)*(${REFERENCE_NODE_BODY}|${REFERENCE_NODE_HOST})*(.*)`,\n);\n\n/**\n * Helper function that takes a reference node location and a set of navigation steps\n * (from the reference node) to a target node and outputs a string that represents\n * a location.\n *\n * For example, given: referenceNode = 'b' (body) and path = ['firstChild', 'firstChild',\n * 'nextSibling'], the function returns: `bf2n`.\n */\nexport function compressNodeLocation(referenceNode: string, path: NodeNavigationStep[]): string {\n  const result: Array<string | number> = [referenceNode];\n  for (const segment of path) {\n    const lastIdx = result.length - 1;\n    if (lastIdx > 0 && result[lastIdx - 1] === segment) {\n      // An empty string in a count slot represents 1 occurrence of an instruction.\n      const value = (result[lastIdx] || 1) as number;\n      result[lastIdx] = value + 1;\n    } else {\n      // Adding a new segment to the path.\n      // Using an empty string in a counter field to avoid encoding `1`s\n      // into the path, since they are implicit (e.g. `f1n1` vs `fn`), so\n      // it's enough to have a single char in this case.\n      result.push(segment, '');\n    }\n  }\n  return result.join('');\n}\n\n/**\n * Helper function that reverts the `compressNodeLocation` and transforms a given\n * string into an array where at 0th position there is a reference node info and\n * after that it contains information (in pairs) about a navigation step and the\n * number of repetitions.\n *\n * For example, the path like 'bf2n' will be transformed to:\n * ['b', 'firstChild', 2, 'nextSibling', 1].\n *\n * This information is later consumed by the code that navigates the DOM to find\n * a given node by its location.\n */\nexport function decompressNodeLocation(\n  path: string,\n): [string | number, ...(number | NodeNavigationStep)[]] {\n  const matches = path.match(REF_EXTRACTOR_REGEXP)!;\n  const [_, refNodeId, refNodeName, rest] = matches;\n  // If a reference node is represented by an index, transform it to a number.\n  const ref = refNodeId ? parseInt(refNodeId, 10) : refNodeName;\n  const steps: (number | NodeNavigationStep)[] = [];\n  // Match all segments in a path.\n  for (const [_, step, count] of rest.matchAll(/(f|n)(\\d*)/g)) {\n    const repeat = parseInt(count, 10) || 1;\n    steps.push(step as NodeNavigationStep, repeat);\n  }\n  return [ref, ...steps];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, Injector} from '../di';\nimport {isRootTemplateMessage} from '../render3/i18n/i18n_util';\nimport {createIcuIterator} from '../render3/instructions/i18n_icu_container_visitor';\nimport {I18nNode, I18nNodeKind, I18nPlaceholderType, TI18n, TIcu} from '../render3/interfaces/i18n';\nimport {isTNodeShape, TNode, TNodeType} from '../render3/interfaces/node';\nimport type {Renderer} from '../render3/interfaces/renderer';\nimport type {RNode} from '../render3/interfaces/renderer_dom';\nimport {HEADER_OFFSET, HYDRATION, LView, RENDERER, TView, TVIEW} from '../render3/interfaces/view';\nimport {getFirstNativeNode} from '../render3/node_manipulation';\nimport {nativeRemoveNode} from '../render3/dom_node_manipulation';\nimport {unwrapRNode} from '../render3/util/view_utils';\nimport {assertDefined, assertNotEqual} from '../util/assert';\n\nimport type {HydrationContext} from './annotate';\nimport {DehydratedIcuData, DehydratedView, I18N_DATA} from './interfaces';\nimport {isDisconnectedRNode, locateNextRNode, tryLocateRNodeByPath} from './node_lookup_utils';\nimport {isI18nInSkipHydrationBlock} from './skip_hydration';\nimport {IS_I18N_HYDRATION_ENABLED} from './tokens';\nimport {\n  getNgContainerSize,\n  initDisconnectedNodes,\n  isDisconnectedNode,\n  isSerializedElementContainer,\n  processTextNodeBeforeSerialization,\n} from './utils';\n\nlet _isI18nHydrationSupportEnabled = false;\n\nlet _prepareI18nBlockForHydrationImpl: typeof prepareI18nBlockForHydrationImpl = () => {\n  // noop unless `enablePrepareI18nBlockForHydrationImpl` is invoked.\n};\n\nexport function setIsI18nHydrationSupportEnabled(enabled: boolean) {\n  _isI18nHydrationSupportEnabled = enabled;\n}\n\nexport function isI18nHydrationSupportEnabled() {\n  return _isI18nHydrationSupportEnabled;\n}\n\n/**\n * Prepares an i18n block and its children, located at the given\n * view and instruction index, for hydration.\n *\n * @param lView lView with the i18n block\n * @param index index of the i18n block in the lView\n * @param parentTNode TNode of the parent of the i18n block\n * @param subTemplateIndex sub-template index, or -1 for the main template\n */\nexport function prepareI18nBlockForHydration(\n  lView: LView,\n  index: number,\n  parentTNode: TNode | null,\n  subTemplateIndex: number,\n): void {\n  _prepareI18nBlockForHydrationImpl(lView, index, parentTNode, subTemplateIndex);\n}\n\nexport function enablePrepareI18nBlockForHydrationImpl() {\n  _prepareI18nBlockForHydrationImpl = prepareI18nBlockForHydrationImpl;\n}\n\nexport function isI18nHydrationEnabled(injector?: Injector) {\n  injector = injector ?? inject(Injector);\n  return injector.get(IS_I18N_HYDRATION_ENABLED, false);\n}\n\n/**\n * Collects, if not already cached, all of the indices in the\n * given TView which are children of an i18n block.\n *\n * Since i18n blocks don't introduce a parent TNode, this is necessary\n * in order to determine which indices in a LView are translated.\n */\nexport function getOrComputeI18nChildren(\n  tView: TView,\n  context: HydrationContext,\n): Set<number> | null {\n  let i18nChildren = context.i18nChildren.get(tView);\n  if (i18nChildren === undefined) {\n    i18nChildren = collectI18nChildren(tView);\n    context.i18nChildren.set(tView, i18nChildren);\n  }\n  return i18nChildren;\n}\n\nfunction collectI18nChildren(tView: TView): Set<number> | null {\n  const children = new Set<number>();\n\n  function collectI18nViews(node: I18nNode) {\n    children.add(node.index);\n\n    switch (node.kind) {\n      case I18nNodeKind.ELEMENT:\n      case I18nNodeKind.PLACEHOLDER: {\n        for (const childNode of node.children) {\n          collectI18nViews(childNode);\n        }\n        break;\n      }\n\n      case I18nNodeKind.ICU: {\n        for (const caseNodes of node.cases) {\n          for (const caseNode of caseNodes) {\n            collectI18nViews(caseNode);\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  // Traverse through the AST of each i18n block in the LView,\n  // and collect every instruction index.\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    const tI18n = tView.data[i] as TI18n | undefined;\n    if (!tI18n || !tI18n.ast) {\n      continue;\n    }\n\n    for (const node of tI18n.ast) {\n      collectI18nViews(node);\n    }\n  }\n\n  return children.size === 0 ? null : children;\n}\n\n/**\n * Resulting data from serializing an i18n block.\n */\nexport interface SerializedI18nBlock {\n  /**\n   * A queue of active ICU cases from a depth-first traversal\n   * of the i18n AST. This is serialized to the client in order\n   * to correctly associate DOM nodes with i18n nodes during\n   * hydration.\n   */\n  caseQueue: Array<number>;\n\n  /**\n   * A set of indices in the lView of the block for nodes\n   * that are disconnected from the DOM. In i18n, this can\n   * happen when using content projection but some nodes are\n   * not selected by an <ng-content />.\n   */\n  disconnectedNodes: Set<number>;\n\n  /**\n   * A set of indices in the lView of the block for nodes\n   * considered \"disjoint\", indicating that we need to serialize\n   * a path to the node in order to hydrate it.\n   *\n   * A node is considered disjoint when its RNode does not\n   * directly follow the RNode of the previous i18n node, for\n   * example, because of content projection.\n   */\n  disjointNodes: Set<number>;\n}\n\n/**\n * Attempts to serialize i18n data for an i18n block, located at\n * the given view and instruction index.\n *\n * @param lView lView with the i18n block\n * @param index index of the i18n block in the lView\n * @param context the hydration context\n * @returns the i18n data, or null if there is no relevant data\n */\nexport function trySerializeI18nBlock(\n  lView: LView,\n  index: number,\n  context: HydrationContext,\n): SerializedI18nBlock | null {\n  if (!context.isI18nHydrationEnabled) {\n    return null;\n  }\n\n  const tView = lView[TVIEW];\n  const tI18n = tView.data[index] as TI18n | undefined;\n  if (!tI18n || !tI18n.ast) {\n    return null;\n  }\n\n  const parentTNode = tView.data[tI18n.parentTNodeIndex] as TNode;\n  if (parentTNode && isI18nInSkipHydrationBlock(parentTNode)) {\n    return null;\n  }\n\n  const serializedI18nBlock: SerializedI18nBlock = {\n    caseQueue: [],\n    disconnectedNodes: new Set(),\n    disjointNodes: new Set(),\n  };\n  serializeI18nBlock(lView, serializedI18nBlock, context, tI18n.ast);\n\n  return serializedI18nBlock.caseQueue.length === 0 &&\n    serializedI18nBlock.disconnectedNodes.size === 0 &&\n    serializedI18nBlock.disjointNodes.size === 0\n    ? null\n    : serializedI18nBlock;\n}\n\nfunction serializeI18nBlock(\n  lView: LView,\n  serializedI18nBlock: SerializedI18nBlock,\n  context: HydrationContext,\n  nodes: I18nNode[],\n): Node | null {\n  let prevRNode = null;\n  for (const node of nodes) {\n    const nextRNode = serializeI18nNode(lView, serializedI18nBlock, context, node);\n    if (nextRNode) {\n      if (isDisjointNode(prevRNode, nextRNode)) {\n        serializedI18nBlock.disjointNodes.add(node.index - HEADER_OFFSET);\n      }\n      prevRNode = nextRNode;\n    }\n  }\n  return prevRNode;\n}\n\n/**\n * Helper to determine whether the given nodes are \"disjoint\".\n *\n * The i18n hydration process walks through the DOM and i18n nodes\n * at the same time. It expects the sibling DOM node of the previous\n * i18n node to be the first node of the next i18n node.\n *\n * In cases of content projection, this won't always be the case. So\n * when we detect that, we mark the node as \"disjoint\", ensuring that\n * we will serialize the path to the node. This way, when we hydrate the\n * i18n node, we will be able to find the correct place to start.\n */\nfunction isDisjointNode(prevNode: Node | null, nextNode: Node) {\n  return prevNode && prevNode.nextSibling !== nextNode;\n}\n\n/**\n * Process the given i18n node for serialization.\n * Returns the first RNode for the i18n node to begin hydration.\n */\nfunction serializeI18nNode(\n  lView: LView,\n  serializedI18nBlock: SerializedI18nBlock,\n  context: HydrationContext,\n  node: I18nNode,\n): Node | null {\n  const maybeRNode = unwrapRNode(lView[node.index]!);\n  if (!maybeRNode || isDisconnectedRNode(maybeRNode)) {\n    serializedI18nBlock.disconnectedNodes.add(node.index - HEADER_OFFSET);\n    return null;\n  }\n\n  const rNode = maybeRNode as Node;\n  switch (node.kind) {\n    case I18nNodeKind.TEXT: {\n      processTextNodeBeforeSerialization(context, rNode);\n      break;\n    }\n\n    case I18nNodeKind.ELEMENT:\n    case I18nNodeKind.PLACEHOLDER: {\n      serializeI18nBlock(lView, serializedI18nBlock, context, node.children);\n      break;\n    }\n\n    case I18nNodeKind.ICU: {\n      const currentCase = lView[node.currentCaseLViewIndex] as number | null;\n      if (currentCase != null) {\n        // i18n uses a negative value to signal a change to a new case, so we\n        // need to invert it to get the proper value.\n        const caseIdx = currentCase < 0 ? ~currentCase : currentCase;\n        serializedI18nBlock.caseQueue.push(caseIdx);\n        serializeI18nBlock(lView, serializedI18nBlock, context, node.cases[caseIdx]);\n      }\n      break;\n    }\n  }\n\n  return getFirstNativeNodeForI18nNode(lView, node) as Node | null;\n}\n\n/**\n * Helper function to get the first native node to begin hydrating\n * the given i18n node.\n */\nfunction getFirstNativeNodeForI18nNode(lView: LView, node: I18nNode) {\n  const tView = lView[TVIEW];\n  const maybeTNode = tView.data[node.index];\n\n  if (isTNodeShape(maybeTNode)) {\n    // If the node is backed by an actual TNode, we can simply delegate.\n    return getFirstNativeNode(lView, maybeTNode);\n  } else if (node.kind === I18nNodeKind.ICU) {\n    // A nested ICU container won't have an actual TNode. In that case, we can use\n    // an iterator to find the first child.\n    const icuIterator = createIcuIterator(maybeTNode as TIcu, lView);\n    let rNode: RNode | null = icuIterator();\n\n    // If the ICU container has no nodes, then we use the ICU anchor as the node.\n    return rNode ?? unwrapRNode(lView[node.index]);\n  } else {\n    // Otherwise, the node is a text or trivial element in an ICU container,\n    // and we can just use the RNode directly.\n    return unwrapRNode(lView[node.index]) ?? null;\n  }\n}\n\n/**\n * Describes shared data available during the hydration process.\n */\ninterface I18nHydrationContext {\n  hydrationInfo: DehydratedView;\n  lView: LView;\n  i18nNodes: Map<number, RNode | null>;\n  disconnectedNodes: Set<number>;\n  caseQueue: number[];\n  dehydratedIcuData: Map<number, DehydratedIcuData>;\n}\n\n/**\n * Describes current hydration state.\n */\ninterface I18nHydrationState {\n  // The current node\n  currentNode: Node | null;\n\n  /**\n   * Whether the tree should be connected.\n   *\n   * During hydration, it can happen that we expect to have a\n   * current RNode, but we don't. In such cases, we still need\n   * to propagate the expectation to the corresponding LViews,\n   * so that the proper downstream error handling can provide\n   * the correct context for the error.\n   */\n  isConnected: boolean;\n}\n\nfunction setCurrentNode(state: I18nHydrationState, node: Node | null) {\n  state.currentNode = node;\n}\n\n/**\n * Marks the current RNode as the hydration root for the given\n * AST node.\n */\nfunction appendI18nNodeToCollection(\n  context: I18nHydrationContext,\n  state: I18nHydrationState,\n  astNode: I18nNode,\n) {\n  const noOffsetIndex = astNode.index - HEADER_OFFSET;\n  const {disconnectedNodes} = context;\n  const currentNode = state.currentNode;\n\n  if (state.isConnected) {\n    context.i18nNodes.set(noOffsetIndex, currentNode);\n\n    // We expect the node to be connected, so ensure that it\n    // is not in the set, regardless of whether we found it,\n    // so that the downstream error handling can provide the\n    // proper context.\n    disconnectedNodes.delete(noOffsetIndex);\n  } else {\n    disconnectedNodes.add(noOffsetIndex);\n  }\n\n  return currentNode;\n}\n\n/**\n * Skip over some sibling nodes during hydration.\n *\n * Note: we use this instead of `siblingAfter` as it's expected that\n * sometimes we might encounter null nodes. In those cases, we want to\n * defer to downstream error handling to provide proper context.\n */\nfunction skipSiblingNodes(state: I18nHydrationState, skip: number) {\n  let currentNode = state.currentNode;\n  for (let i = 0; i < skip; i++) {\n    if (!currentNode) {\n      break;\n    }\n    currentNode = currentNode?.nextSibling ?? null;\n  }\n  return currentNode;\n}\n\n/**\n * Fork the given state into a new state for hydrating children.\n */\nfunction forkHydrationState(state: I18nHydrationState, nextNode: Node | null) {\n  return {currentNode: nextNode, isConnected: state.isConnected};\n}\n\nfunction prepareI18nBlockForHydrationImpl(\n  lView: LView,\n  index: number,\n  parentTNode: TNode | null,\n  subTemplateIndex: number,\n) {\n  const hydrationInfo = lView[HYDRATION];\n  if (!hydrationInfo) {\n    return;\n  }\n\n  if (\n    !isI18nHydrationSupportEnabled() ||\n    (parentTNode &&\n      (isI18nInSkipHydrationBlock(parentTNode) ||\n        isDisconnectedNode(hydrationInfo, parentTNode.index - HEADER_OFFSET)))\n  ) {\n    return;\n  }\n\n  const tView = lView[TVIEW];\n  const tI18n = tView.data[index] as TI18n;\n  ngDevMode &&\n    assertDefined(tI18n, 'Expected i18n data to be present in a given TView slot during hydration');\n\n  function findHydrationRoot() {\n    if (isRootTemplateMessage(subTemplateIndex)) {\n      // This is the root of an i18n block. In this case, our hydration root will\n      // depend on where our parent TNode (i.e. the block with i18n applied) is\n      // in the DOM.\n      ngDevMode && assertDefined(parentTNode, 'Expected parent TNode while hydrating i18n root');\n      const rootNode = locateNextRNode(hydrationInfo!, tView, lView, parentTNode!) as Node;\n\n      // If this i18n block is attached to an <ng-container>, then we want to begin\n      // hydrating directly with the RNode. Otherwise, for a TNode with a physical DOM\n      // element, we want to recurse into the first child and begin there.\n      return parentTNode!.type & TNodeType.ElementContainer ? rootNode : rootNode.firstChild;\n    }\n\n    // This is a nested template in an i18n block. In this case, the entire view\n    // is translated, and part of a dehydrated view in a container. This means that\n    // we can simply begin hydration with the first dehydrated child.\n    return hydrationInfo?.firstChild as Node;\n  }\n\n  const currentNode = findHydrationRoot();\n  ngDevMode && assertDefined(currentNode, 'Expected root i18n node during hydration');\n\n  const disconnectedNodes = initDisconnectedNodes(hydrationInfo) ?? new Set();\n  const i18nNodes = (hydrationInfo.i18nNodes ??= new Map<number, RNode | null>());\n  const caseQueue = hydrationInfo.data[I18N_DATA]?.[index - HEADER_OFFSET] ?? [];\n  const dehydratedIcuData = (hydrationInfo.dehydratedIcuData ??= new Map<\n    number,\n    DehydratedIcuData\n  >());\n\n  collectI18nNodesFromDom(\n    {hydrationInfo, lView, i18nNodes, disconnectedNodes, caseQueue, dehydratedIcuData},\n    {currentNode, isConnected: true},\n    tI18n.ast,\n  );\n\n  // Nodes from inactive ICU cases should be considered disconnected. We track them above\n  // because they aren't (and shouldn't be) serialized. Since we may mutate or create a\n  // new set, we need to be sure to write the expected value back to the DehydratedView.\n  hydrationInfo.disconnectedNodes = disconnectedNodes.size === 0 ? null : disconnectedNodes;\n}\n\nfunction collectI18nNodesFromDom(\n  context: I18nHydrationContext,\n  state: I18nHydrationState,\n  nodeOrNodes: I18nNode | I18nNode[],\n) {\n  if (Array.isArray(nodeOrNodes)) {\n    let nextState = state;\n    for (const node of nodeOrNodes) {\n      // Whenever a node doesn't directly follow the previous RNode, it\n      // is given a path. We need to resume collecting nodes from that location\n      // until and unless we find another disjoint node.\n      const targetNode = tryLocateRNodeByPath(\n        context.hydrationInfo,\n        context.lView,\n        node.index - HEADER_OFFSET,\n      );\n      if (targetNode) {\n        nextState = forkHydrationState(state, targetNode as Node);\n      }\n      collectI18nNodesFromDom(context, nextState, node);\n    }\n  } else {\n    if (context.disconnectedNodes.has(nodeOrNodes.index - HEADER_OFFSET)) {\n      // i18n nodes can be considered disconnected if e.g. they were projected.\n      // In that case, we have to make sure to skip over them.\n      return;\n    }\n\n    switch (nodeOrNodes.kind) {\n      case I18nNodeKind.TEXT: {\n        // Claim a text node for hydration\n        const currentNode = appendI18nNodeToCollection(context, state, nodeOrNodes);\n        setCurrentNode(state, currentNode?.nextSibling ?? null);\n        break;\n      }\n\n      case I18nNodeKind.ELEMENT: {\n        // Recurse into the current element's children...\n        collectI18nNodesFromDom(\n          context,\n          forkHydrationState(state, state.currentNode?.firstChild ?? null),\n          nodeOrNodes.children,\n        );\n\n        // And claim the parent element itself.\n        const currentNode = appendI18nNodeToCollection(context, state, nodeOrNodes);\n        setCurrentNode(state, currentNode?.nextSibling ?? null);\n        break;\n      }\n\n      case I18nNodeKind.PLACEHOLDER: {\n        const noOffsetIndex = nodeOrNodes.index - HEADER_OFFSET;\n        const {hydrationInfo} = context;\n        const containerSize = getNgContainerSize(hydrationInfo, noOffsetIndex);\n\n        switch (nodeOrNodes.type) {\n          case I18nPlaceholderType.ELEMENT: {\n            // Hydration expects to find the head of the element.\n            const currentNode = appendI18nNodeToCollection(context, state, nodeOrNodes);\n\n            // A TNode for the node may not yet if we're hydrating during the first pass,\n            // so use the serialized data to determine if this is an <ng-container>.\n            if (isSerializedElementContainer(hydrationInfo, noOffsetIndex)) {\n              // An <ng-container> doesn't have a physical DOM node, so we need to\n              // continue hydrating from siblings.\n              collectI18nNodesFromDom(context, state, nodeOrNodes.children);\n\n              // Skip over the anchor element. It will be claimed by the\n              // downstream container hydration.\n              const nextNode = skipSiblingNodes(state, 1);\n              setCurrentNode(state, nextNode);\n            } else {\n              // Non-container elements represent an actual node in the DOM, so we\n              // need to continue hydration with the children, and claim the node.\n              collectI18nNodesFromDom(\n                context,\n                forkHydrationState(state, state.currentNode?.firstChild ?? null),\n                nodeOrNodes.children,\n              );\n              setCurrentNode(state, currentNode?.nextSibling ?? null);\n\n              // Elements can also be the anchor of a view container, so there may\n              // be elements after this node that we need to skip.\n              if (containerSize !== null) {\n                // `+1` stands for an anchor node after all of the views in the container.\n                const nextNode = skipSiblingNodes(state, containerSize + 1);\n                setCurrentNode(state, nextNode);\n              }\n            }\n            break;\n          }\n\n          case I18nPlaceholderType.SUBTEMPLATE: {\n            ngDevMode &&\n              assertNotEqual(\n                containerSize,\n                null,\n                'Expected a container size while hydrating i18n subtemplate',\n              );\n\n            // Hydration expects to find the head of the template.\n            appendI18nNodeToCollection(context, state, nodeOrNodes);\n\n            // Skip over all of the template children, as well as the anchor\n            // node, since the template itself will handle them instead.\n            const nextNode = skipSiblingNodes(state, containerSize! + 1);\n            setCurrentNode(state, nextNode);\n            break;\n          }\n        }\n        break;\n      }\n\n      case I18nNodeKind.ICU: {\n        // If the current node is connected, we need to pop the next case from the\n        // queue, so that the active case is also considered connected.\n        const selectedCase = state.isConnected ? context.caseQueue.shift()! : null;\n        const childState = {currentNode: null, isConnected: false};\n\n        // We traverse through each case, even if it's not active,\n        // so that we correctly populate disconnected nodes.\n        for (let i = 0; i < nodeOrNodes.cases.length; i++) {\n          collectI18nNodesFromDom(\n            context,\n            i === selectedCase ? state : childState,\n            nodeOrNodes.cases[i],\n          );\n        }\n\n        if (selectedCase !== null) {\n          // ICUs represent a branching state, and the selected case could be different\n          // than what it was on the server. In that case, we need to be able to clean\n          // up the nodes from the original case. To do that, we store the selected case.\n          context.dehydratedIcuData.set(nodeOrNodes.index, {case: selectedCase, node: nodeOrNodes});\n        }\n\n        // Hydration expects to find the ICU anchor element.\n        const currentNode = appendI18nNodeToCollection(context, state, nodeOrNodes);\n        setCurrentNode(state, currentNode?.nextSibling ?? null);\n        break;\n      }\n    }\n  }\n}\n\nlet _claimDehydratedIcuCaseImpl: typeof claimDehydratedIcuCaseImpl = () => {\n  // noop unless `enableClaimDehydratedIcuCaseImpl` is invoked\n};\n\n/**\n * Mark the case for the ICU node at the given index in the view as claimed,\n * allowing its nodes to be hydrated and not cleaned up.\n */\nexport function claimDehydratedIcuCase(lView: LView, icuIndex: number, caseIndex: number) {\n  _claimDehydratedIcuCaseImpl(lView, icuIndex, caseIndex);\n}\n\nexport function enableClaimDehydratedIcuCaseImpl() {\n  _claimDehydratedIcuCaseImpl = claimDehydratedIcuCaseImpl;\n}\n\nfunction claimDehydratedIcuCaseImpl(lView: LView, icuIndex: number, caseIndex: number) {\n  const dehydratedIcuDataMap = lView[HYDRATION]?.dehydratedIcuData;\n  if (dehydratedIcuDataMap) {\n    const dehydratedIcuData = dehydratedIcuDataMap.get(icuIndex);\n    if (dehydratedIcuData?.case === caseIndex) {\n      // If the case we're attempting to claim matches the dehydrated one,\n      // we remove it from the map to mark it as \"claimed.\"\n      dehydratedIcuDataMap.delete(icuIndex);\n    }\n  }\n}\n\n/**\n * Clean up all i18n hydration data associated with the given view.\n */\nexport function cleanupI18nHydrationData(lView: LView) {\n  const hydrationInfo = lView[HYDRATION];\n  if (hydrationInfo) {\n    const {i18nNodes, dehydratedIcuData: dehydratedIcuDataMap} = hydrationInfo;\n    if (i18nNodes && dehydratedIcuDataMap) {\n      const renderer = lView[RENDERER];\n      for (const dehydratedIcuData of dehydratedIcuDataMap.values()) {\n        cleanupDehydratedIcuData(renderer, i18nNodes, dehydratedIcuData);\n      }\n    }\n\n    hydrationInfo.i18nNodes = undefined;\n    hydrationInfo.dehydratedIcuData = undefined;\n  }\n}\n\nfunction cleanupDehydratedIcuData(\n  renderer: Renderer,\n  i18nNodes: Map<number, RNode | null>,\n  dehydratedIcuData: DehydratedIcuData,\n) {\n  for (const node of dehydratedIcuData.node.cases[dehydratedIcuData.case]) {\n    const rNode = i18nNodes.get(node.index - HEADER_OFFSET);\n    if (rNode) {\n      nativeRemoveNode(renderer, rNode, false);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DEHYDRATED_VIEWS, LContainer} from '../render3/interfaces/container';\nimport {RNode} from '../render3/interfaces/renderer_dom';\n\nimport {removeDehydratedViews} from './cleanup';\nimport {\n  DehydratedContainerView,\n  MULTIPLIER,\n  NUM_ROOT_NODES,\n  SerializedContainerView,\n  TEMPLATE_ID,\n} from './interfaces';\nimport {siblingAfter} from './node_lookup_utils';\n\n/**\n * Given a current DOM node and a serialized information about the views\n * in a container, walks over the DOM structure, collecting the list of\n * dehydrated views.\n */\nexport function locateDehydratedViewsInContainer(\n  currentRNode: RNode,\n  serializedViews: SerializedContainerView[],\n): [RNode, DehydratedContainerView[]] {\n  const dehydratedViews: DehydratedContainerView[] = [];\n  for (const serializedView of serializedViews) {\n    // Repeats a view multiple times as needed, based on the serialized information\n    // (for example, for *ngFor-produced views).\n    for (let i = 0; i < (serializedView[MULTIPLIER] ?? 1); i++) {\n      const view: DehydratedContainerView = {\n        data: serializedView,\n        firstChild: null,\n      };\n      if (serializedView[NUM_ROOT_NODES] > 0) {\n        // Keep reference to the first node in this view,\n        // so it can be accessed while invoking template instructions.\n        view.firstChild = currentRNode as HTMLElement;\n\n        // Move over to the next node after this view, which can\n        // either be a first node of the next view or an anchor comment\n        // node after the last view in a container.\n        currentRNode = siblingAfter(serializedView[NUM_ROOT_NODES], currentRNode)!;\n      }\n      dehydratedViews.push(view);\n    }\n  }\n\n  return [currentRNode, dehydratedViews];\n}\n\n/**\n * Reference to a function that searches for a matching dehydrated views\n * stored on a given lContainer.\n * Returns `null` by default, when hydration is not enabled.\n */\nlet _findMatchingDehydratedViewImpl: typeof findMatchingDehydratedViewImpl = () => null;\n\n/**\n * Retrieves the next dehydrated view from the LContainer and verifies that\n * it matches a given template id (from the TView that was used to create this\n * instance of a view). If the id doesn't match, that means that we are in an\n * unexpected state and can not complete the reconciliation process. Thus,\n * all dehydrated views from this LContainer are removed (including corresponding\n * DOM nodes) and the rendering is performed as if there were no dehydrated views\n * in this container.\n */\nfunction findMatchingDehydratedViewImpl(\n  lContainer: LContainer,\n  template: string | null,\n): DehydratedContainerView | null {\n  const views = lContainer[DEHYDRATED_VIEWS];\n  if (!template || views === null || views.length === 0) {\n    return null;\n  }\n  const view = views[0];\n  // Verify whether the first dehydrated view in the container matches\n  // the template id passed to this function (that originated from a TView\n  // that was used to create an instance of an embedded or component views.\n  if (view.data[TEMPLATE_ID] === template) {\n    // If the template id matches - extract the first view and return it.\n    return views.shift()!;\n  } else {\n    // Otherwise, we are at the state when reconciliation can not be completed,\n    // thus we remove all dehydrated views within this container (remove them\n    // from internal data structures as well as delete associated elements from\n    // the DOM tree).\n    removeDehydratedViews(lContainer);\n    return null;\n  }\n}\n\nexport function enableFindMatchingDehydratedViewImpl() {\n  _findMatchingDehydratedViewImpl = findMatchingDehydratedViewImpl;\n}\n\nexport function findMatchingDehydratedView(\n  lContainer: LContainer,\n  template: string | null,\n): DehydratedContainerView | null {\n  return _findMatchingDehydratedViewImpl(lContainer, template);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport type {ChangeDetectorRef} from '../change_detection/change_detection';\nimport type {Injector} from '../di/injector';\nimport type {EnvironmentInjector} from '../di/r3_injector';\nimport {Type} from '../interface/type';\n\nimport type {ElementRef} from './element_ref';\nimport type {NgModuleRef} from './ng_module_factory';\nimport type {ViewRef} from './view_ref';\n\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nexport abstract class ComponentRef<C> {\n  /**\n   * Updates a specified input name to a new value. Using this method will properly mark for check\n   * component using the `OnPush` change detection strategy. It will also assure that the\n   * `OnChanges` lifecycle hook runs when a dynamically created component is change-detected.\n   *\n   * @param name The name of an input.\n   * @param value The new value of an input.\n   */\n  abstract setInput(name: string, value: unknown): void;\n\n  /**\n   * The host or anchor element for this component instance.\n   */\n  abstract get location(): ElementRef;\n\n  /**\n   * The dependency injector for this component instance.\n   */\n  abstract get injector(): Injector;\n\n  /**\n   * This component instance.\n   */\n  abstract get instance(): C;\n\n  /**\n   * The host view defined by the template\n   * for this component instance.\n   */\n  abstract get hostView(): ViewRef;\n\n  /**\n   * The change detector for this component instance.\n   */\n  abstract get changeDetectorRef(): ChangeDetectorRef;\n\n  /**\n   * The type of this component (as created by a `ComponentFactory` class).\n   */\n  abstract get componentType(): Type<any>;\n\n  /**\n   * Destroys the component instance and all of the data structures associated with it.\n   */\n  abstract destroy(): void;\n\n  /**\n   * A lifecycle hook that provides additional developer-defined cleanup\n   * functionality for the component.\n   * @param callback A handler function that cleans up developer-defined data\n   * associated with this component. Called when the `destroy()` method is invoked.\n   */\n  abstract onDestroy(callback: Function): void;\n}\n\n/**\n * Base class for a factory that can create a component dynamically.\n * Instantiate a factory for a given type of component with `resolveComponentFactory()`.\n * Use the resulting `ComponentFactory.create()` method to create a component of that type.\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nexport abstract class ComponentFactory<C> {\n  /**\n   * The component's HTML selector.\n   */\n  abstract get selector(): string;\n  /**\n   * The type of component the factory will create.\n   */\n  abstract get componentType(): Type<any>;\n  /**\n   * Selector for all <ng-content> elements in the component.\n   */\n  abstract get ngContentSelectors(): string[];\n  /**\n   * The inputs of the component.\n   */\n  abstract get inputs(): {\n    propName: string;\n    templateName: string;\n    transform?: (value: any) => any;\n    isSignal: boolean;\n  }[];\n  /**\n   * The outputs of the component.\n   */\n  abstract get outputs(): {propName: string; templateName: string}[];\n  /**\n   * Creates a new component.\n   */\n  abstract create(\n    injector: Injector,\n    projectableNodes?: any[][],\n    rootSelectorOrNode?: string | any,\n    environmentInjector?: EnvironmentInjector | NgModuleRef<any>,\n  ): ComponentRef<C>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Type} from '../interface/type';\nimport {stringify} from '../util/stringify';\n\nimport type {ComponentFactory} from './component_factory';\n\nclass _NullComponentFactoryResolver implements ComponentFactoryResolver {\n  resolveComponentFactory<T>(component: {new (...args: any[]): T}): ComponentFactory<T> {\n    throw Error(`No component factory found for ${stringify(component)}.`);\n  }\n}\n\n/**\n * A simple registry that maps `Components` to generated `ComponentFactory` classes\n * that can be used to create instances of components.\n * Use to obtain the factory for a given component type,\n * then use the factory's `create()` method to create a component of that type.\n *\n * Note: since v13, dynamic component creation via\n * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)\n * does **not** require resolving component factory: component class can be used directly.\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nexport abstract class ComponentFactoryResolver {\n  static NULL: ComponentFactoryResolver = /* @__PURE__ */ new _NullComponentFactoryResolver();\n  /**\n   * Retrieves the factory object that creates a component of the given type.\n   * @param component The component type.\n   */\n  abstract resolveComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {isLView} from '../render3/interfaces/type_checks';\nimport {RENDERER} from '../render3/interfaces/view';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {getComponentLViewByIndex} from '../render3/util/view_utils';\n\nimport {RendererStyleFlags2, RendererType2} from './api_flags';\n\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * @publicApi\n */\nexport abstract class RendererFactory2 {\n  /**\n   * Creates and initializes a custom renderer for a host DOM element.\n   * @param hostElement The element to render.\n   * @param type The base class to implement.\n   * @returns The new custom renderer instance.\n   */\n  abstract createRenderer(hostElement: any, type: RendererType2 | null): Renderer2;\n  /**\n   * A callback invoked when rendering has begun.\n   */\n  abstract begin?(): void;\n  /**\n   * A callback invoked when rendering has completed.\n   */\n  abstract end?(): void;\n  /**\n   * Use with animations test-only mode. Notifies the test when rendering has completed.\n   * @returns The asynchronous result of the developer-defined function.\n   */\n  abstract whenRenderingDone?(): Promise<any>;\n}\n\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * @publicApi\n */\nexport abstract class Renderer2 {\n  /**\n   * Use to store arbitrary developer-defined data on a renderer instance,\n   * as an object containing key-value pairs.\n   * This is useful for renderers that delegate to other renderers.\n   */\n  abstract get data(): {[key: string]: any};\n\n  /**\n   * Implement this callback to destroy the renderer or the host element.\n   */\n  abstract destroy(): void;\n  /**\n   * Implement this callback to create an instance of the host element.\n   * @param name An identifying name for the new element, unique within the namespace.\n   * @param namespace The namespace for the new element.\n   * @returns The new element.\n   */\n  abstract createElement(name: string, namespace?: string | null): any;\n  /**\n   * Implement this callback to add a comment to the DOM of the host element.\n   * @param value The comment text.\n   * @returns The modified element.\n   */\n  abstract createComment(value: string): any;\n\n  /**\n   * Implement this callback to add text to the DOM of the host element.\n   * @param value The text string.\n   * @returns The modified element.\n   */\n  abstract createText(value: string): any;\n  /**\n   * If null or undefined, the view engine won't call it.\n   * This is used as a performance optimization for production mode.\n   */\n  destroyNode: ((node: any) => void) | null = null;\n  /**\n   * Appends a child to a given parent node in the host element DOM.\n   * @param parent The parent node.\n   * @param newChild The new child node.\n   */\n  abstract appendChild(parent: any, newChild: any): void;\n  /**\n   * Implement this callback to insert a child node at a given position in a parent node\n   * in the host element DOM.\n   * @param parent The parent node.\n   * @param newChild The new child nodes.\n   * @param refChild The existing child node before which `newChild` is inserted.\n   * @param isMove Optional argument which signifies if the current `insertBefore` is a result of a\n   *     move. Animation uses this information to trigger move animations. In the past the Animation\n   *     would always assume that any `insertBefore` is a move. This is not strictly true because\n   *     with runtime i18n it is possible to invoke `insertBefore` as a result of i18n and it should\n   *     not trigger an animation move.\n   */\n  abstract insertBefore(parent: any, newChild: any, refChild: any, isMove?: boolean): void;\n  /**\n   * Implement this callback to remove a child node from the host element's DOM.\n   * @param parent The parent node.\n   * @param oldChild The child node to remove.\n   * @param isHostElement Optionally signal to the renderer whether this element is a host element\n   * or not\n   */\n  abstract removeChild(parent: any, oldChild: any, isHostElement?: boolean): void;\n  /**\n   * Implement this callback to prepare an element to be bootstrapped\n   * as a root element, and return the element instance.\n   * @param selectorOrNode The DOM element.\n   * @param preserveContent Whether the contents of the root element\n   * should be preserved, or cleared upon bootstrap (default behavior).\n   * Use with `ViewEncapsulation.ShadowDom` to allow simple native\n   * content projection via `<slot>` elements.\n   * @returns The root element.\n   */\n  abstract selectRootElement(selectorOrNode: string | any, preserveContent?: boolean): any;\n  /**\n   * Implement this callback to get the parent of a given node\n   * in the host element's DOM.\n   * @param node The child node to query.\n   * @returns The parent node, or null if there is no parent.\n   * This is because the check is synchronous,\n   * and the caller can't rely on checking for null.\n   */\n  abstract parentNode(node: any): any;\n  /**\n   * Implement this callback to get the next sibling node of a given node\n   * in the host element's DOM.\n   * @returns The sibling node, or null if there is no sibling.\n   * This is because the check is synchronous,\n   * and the caller can't rely on checking for null.\n   */\n  abstract nextSibling(node: any): any;\n  /**\n   * Implement this callback to set an attribute value for an element in the DOM.\n   * @param el The element.\n   * @param name The attribute name.\n   * @param value The new value.\n   * @param namespace The namespace.\n   */\n  abstract setAttribute(el: any, name: string, value: string, namespace?: string | null): void;\n\n  /**\n   * Implement this callback to remove an attribute from an element in the DOM.\n   * @param el The element.\n   * @param name The attribute name.\n   * @param namespace The namespace.\n   */\n  abstract removeAttribute(el: any, name: string, namespace?: string | null): void;\n  /**\n   * Implement this callback to add a class to an element in the DOM.\n   * @param el The element.\n   * @param name The class name.\n   */\n  abstract addClass(el: any, name: string): void;\n\n  /**\n   * Implement this callback to remove a class from an element in the DOM.\n   * @param el The element.\n   * @param name The class name.\n   */\n  abstract removeClass(el: any, name: string): void;\n\n  /**\n   * Implement this callback to set a CSS style for an element in the DOM.\n   * @param el The element.\n   * @param style The name of the style.\n   * @param value The new value.\n   * @param flags Flags for style variations. No flags are set by default.\n   */\n  abstract setStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2): void;\n\n  /**\n   * Implement this callback to remove the value from a CSS style for an element in the DOM.\n   * @param el The element.\n   * @param style The name of the style.\n   * @param flags Flags for style variations to remove, if set. ???\n   */\n  abstract removeStyle(el: any, style: string, flags?: RendererStyleFlags2): void;\n\n  /**\n   * Implement this callback to set the value of a property of an element in the DOM.\n   * @param el The element.\n   * @param name The property name.\n   * @param value The new value.\n   */\n  abstract setProperty(el: any, name: string, value: any): void;\n\n  /**\n   * Implement this callback to set the value of a node in the host element.\n   * @param node The node.\n   * @param value The new value.\n   */\n  abstract setValue(node: any, value: string): void;\n\n  /**\n   * Implement this callback to start an event listener.\n   * @param target The context in which to listen for events. Can be\n   * the entire window or document, the body of the document, or a specific\n   * DOM element.\n   * @param eventName The event to listen for.\n   * @param callback A handler function to invoke when the event occurs.\n   * @param options Options that configure how the event listener is bound.\n   * @returns An \"unlisten\" function for disposing of this handler.\n   */\n  abstract listen(\n    target: 'window' | 'document' | 'body' | any,\n    eventName: string,\n    callback: (event: any) => boolean | void,\n    options?: ListenerOptions,\n  ): () => void;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => Renderer2 = () => injectRenderer2();\n}\n\n/** Injects a Renderer2 for the current component. */\nexport function injectRenderer2(): Renderer2 {\n  // We need the Renderer to be based on the component that it's being injected into, however since\n  // DI happens before we've entered its view, `getLView` will return the parent view instead.\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n  const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);\n  return (isLView(nodeAtIndex) ? nodeAtIndex : lView)[RENDERER] as Renderer2;\n}\n\n/**\n * This enum is meant to be used by `ɵtype` properties of the different renderers implemented\n * by the framework\n *\n * We choose to not add `ɵtype` to `Renderer2` to no expose it to the public API.\n */\nexport const enum AnimationRendererType {\n  Regular = 0,\n  Delegated = 1,\n}\n\n/**\n * Options that can be used to configure an event listener.\n * @publicApi\n */\nexport interface ListenerOptions {\n  capture?: boolean;\n  once?: boolean;\n  passive?: boolean;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵɵdefineInjectable} from '../di/interface/defs';\nimport {SecurityContext} from './security';\n\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nexport abstract class Sanitizer {\n  abstract sanitize(context: SecurityContext, value: {} | string | null): string | null;\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ ɵɵdefineInjectable({\n    token: Sanitizer,\n    providedIn: 'root',\n    factory: () => null,\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {concatStringsWithSpace} from '../../util/stringify';\nimport {assertFirstCreatePass} from '../assert';\nimport {AttributeMarker} from '../interfaces/attribute_marker';\nimport {TAttributes, TNode} from '../interfaces/node';\nimport {getTView} from '../state';\n\n/**\n * Compute the static styling (class/style) from `TAttributes`.\n *\n * This function should be called during `firstCreatePass` only.\n *\n * @param tNode The `TNode` into which the styling information should be loaded.\n * @param attrs `TAttributes` containing the styling information.\n * @param writeToHost Where should the resulting static styles be written?\n *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`\n *   - `true` Write to `TNode.styles` / `TNode.classes`\n */\nexport function computeStaticStyling(\n  tNode: TNode,\n  attrs: TAttributes | null,\n  writeToHost: boolean,\n): void {\n  ngDevMode &&\n    assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');\n  let styles: string | null = writeToHost ? tNode.styles : null;\n  let classes: string | null = writeToHost ? tNode.classes : null;\n  let mode: AttributeMarker | 0 = 0;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const value = attrs[i];\n      if (typeof value === 'number') {\n        mode = value;\n      } else if (mode == AttributeMarker.Classes) {\n        classes = concatStringsWithSpace(classes, value as string);\n      } else if (mode == AttributeMarker.Styles) {\n        const style = value as string;\n        const styleValue = attrs[++i] as string;\n        styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');\n      }\n    }\n  }\n  writeToHost ? (tNode.styles = styles) : (tNode.stylesWithoutHost = styles);\n  writeToHost ? (tNode.classes = classes) : (tNode.classesWithoutHost = classes);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {InjectFlags, resolveForwardRef} from '../../di';\nimport {assertInjectImplementationNotEqual} from '../../di/inject_switch';\nimport {ɵɵinject} from '../../di/injector_compatibility';\nimport {ProviderToken} from '../../di/provider_token';\nimport {Type} from '../../interface/type';\nimport {emitInjectEvent} from '../debug/injector_profiler';\nimport {getOrCreateInjectable} from '../di';\nimport {TDirectiveHostNode} from '../interfaces/node';\nimport {getCurrentTNode, getLView} from '../state';\n\n/**\n * Returns the value associated to the given token from the injectors.\n *\n * `directiveInject` is intended to be used for directive, component and pipe factories.\n *  All other injection use `inject` which does not walk the node injector tree.\n *\n * Usage example (in factory function):\n *\n * ```ts\n * class SomeDirective {\n *   constructor(directive: DirectiveA) {}\n *\n *   static ɵdir = ɵɵdefineDirective({\n *     type: SomeDirective,\n *     factory: () => new SomeDirective(ɵɵdirectiveInject(DirectiveA))\n *   });\n * }\n * ```\n * @param token the type or token to inject\n * @param flags Injection flags\n * @returns the value from the injector or `null` when not found\n *\n * @codeGenApi\n */\nexport function ɵɵdirectiveInject<T>(token: ProviderToken<T>): T;\nexport function ɵɵdirectiveInject<T>(token: ProviderToken<T>, flags: InjectFlags): T;\nexport function ɵɵdirectiveInject<T>(\n  token: ProviderToken<T>,\n  flags = InjectFlags.Default,\n): T | null {\n  const lView = getLView();\n  // Fall back to inject() if view hasn't been created. This situation can happen in tests\n  // if inject utilities are used before bootstrapping.\n  if (lView === null) {\n    // Verify that we will not get into infinite loop.\n    ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);\n    return ɵɵinject(token, flags);\n  }\n  const tNode = getCurrentTNode();\n  const value = getOrCreateInjectable<T>(\n    tNode as TDirectiveHostNode,\n    lView,\n    resolveForwardRef(token),\n    flags,\n  );\n  ngDevMode && emitInjectEvent(token as Type<unknown>, value, flags);\n  return value;\n}\n\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n * off, saving bytes of generated code while still providing a good experience in dev mode.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nexport function ɵɵinvalidFactory(): never {\n  const msg = ngDevMode\n    ? `This constructor was not compatible with Dependency Injection.`\n    : 'invalid';\n  throw new Error(msg);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {Writable} from '../../interface/type';\nimport {DoCheck, OnChanges, OnInit} from '../../interface/lifecycle_hooks';\nimport {\n  assertDefined,\n  assertGreaterThan,\n  assertGreaterThanOrEqual,\n  assertNotEqual,\n  assertSame,\n} from '../../util/assert';\nimport {assertFirstCreatePass} from '../assert';\nimport {getFactoryDef} from '../definition_factory';\nimport {diPublicInInjector, getOrCreateNodeInjectorForNode} from '../di';\nimport {ɵɵdirectiveInject} from '../instructions/di';\nimport {AttributeMarker} from '../interfaces/attribute_marker';\nimport type {\n  ComponentDef,\n  DirectiveDef,\n  HostDirectiveDef,\n  HostDirectiveDefs,\n} from '../interfaces/definition';\nimport {NodeInjectorFactory} from '../interfaces/injector';\nimport {\n  HostDirectiveInputs,\n  HostDirectiveOutputs,\n  InitialInputs,\n  NodeInputBindings,\n  NodeOutputBindings,\n  TNodeFlags,\n  type TContainerNode,\n  type TElementContainerNode,\n  type TElementNode,\n  type TNode,\n} from '../interfaces/node';\nimport {isComponentDef} from '../interfaces/type_checks';\nimport {HEADER_OFFSET, HostBindingOpCodes, type LView, type TView} from '../interfaces/view';\nimport {isInlineTemplate} from '../node_selector_matcher';\nimport {NO_CHANGE} from '../tokens';\nimport {mergeHostAttrs} from '../util/attrs_utils';\nimport {allocExpando} from './construction';\n\nexport type DirectiveMatcherStrategy = (\n  tView: TView,\n  tNode: TElementNode | TContainerNode | TElementContainerNode,\n) => DirectiveDef<unknown>[] | null;\n\n/** Data produced after host directives are resolved for a node. */\ntype HostDirectiveResolution = [\n  matches: DirectiveDef<unknown>[],\n  hostDirectiveDefs: HostDirectiveDefs | null,\n  hostDirectiveRanges: HostDirectiveRanges | null,\n];\n\n/**\n * Map that tracks a selector-matched directive to the range within which its host directives\n * are declared. Host directives for a specific directive are always contiguous within the runtime.\n * Note that both the start and end are inclusive and they're both **after** `tNode.directiveStart`.\n */\ntype HostDirectiveRanges = Map<DirectiveDef<unknown>, [start: number, end: number]>;\n\n/**\n * Resolve the matched directives on a node.\n */\nexport function resolveDirectives(\n  tView: TView,\n  lView: LView,\n  tNode: TElementNode | TContainerNode | TElementContainerNode,\n  localRefs: string[] | null,\n  directiveMatcher: DirectiveMatcherStrategy,\n): void {\n  // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in tsickle.\n  ngDevMode && assertFirstCreatePass(tView);\n\n  const exportsMap: Record<string, number> | null = localRefs === null ? null : {'': -1};\n  const matchedDirectiveDefs = directiveMatcher(tView, tNode);\n\n  if (matchedDirectiveDefs !== null) {\n    let directiveDefs: DirectiveDef<unknown>[];\n    let hostDirectiveDefs: HostDirectiveDefs | null = null;\n    let hostDirectiveRanges: HostDirectiveRanges | null = null;\n    const hostDirectiveResolution = resolveHostDirectives(matchedDirectiveDefs);\n\n    if (hostDirectiveResolution === null) {\n      directiveDefs = matchedDirectiveDefs;\n    } else {\n      [directiveDefs, hostDirectiveDefs, hostDirectiveRanges] = hostDirectiveResolution;\n    }\n\n    initializeDirectives(\n      tView,\n      lView,\n      tNode,\n      directiveDefs,\n      exportsMap,\n      hostDirectiveDefs,\n      hostDirectiveRanges,\n    );\n  }\n  if (exportsMap !== null && localRefs !== null) {\n    cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n  }\n}\n\n/** Caches local names and their matching directive indices for query and template lookups. */\nfunction cacheMatchingLocalNames(\n  tNode: TNode,\n  localRefs: string[],\n  exportsMap: {[key: string]: number},\n): void {\n  const localNames: (string | number)[] = (tNode.localNames = []);\n\n  // Local names must be stored in tNode in the same order that localRefs are defined\n  // in the template to ensure the data is loaded in the same slots as their refs\n  // in the template (for template queries).\n  for (let i = 0; i < localRefs.length; i += 2) {\n    const index = exportsMap[localRefs[i + 1]];\n    if (index == null)\n      throw new RuntimeError(\n        RuntimeErrorCode.EXPORT_NOT_FOUND,\n        ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`,\n      );\n    localNames.push(localRefs[i], index);\n  }\n}\n\nfunction resolveHostDirectives(matches: DirectiveDef<unknown>[]): HostDirectiveResolution | null {\n  let componentDef: ComponentDef<unknown> | null = null;\n  let hasHostDirectives = false;\n\n  for (let i = 0; i < matches.length; i++) {\n    const def = matches[i];\n\n    if (i === 0 && isComponentDef(def)) {\n      componentDef = def;\n    }\n\n    if (def.findHostDirectiveDefs !== null) {\n      hasHostDirectives = true;\n      break;\n    }\n  }\n\n  if (!hasHostDirectives) {\n    return null;\n  }\n\n  let allDirectiveDefs: DirectiveDef<unknown>[] | null = null;\n  let hostDirectiveDefs: HostDirectiveDefs | null = null;\n  let hostDirectiveRanges: HostDirectiveRanges | null = null;\n\n  // Components are inserted at the front of the matches array so that their lifecycle\n  // hooks run before any directive lifecycle hooks. This appears to be for ViewEngine\n  // compatibility. This logic doesn't make sense with host directives, because it\n  // would allow the host directives to undo any overrides the host may have made.\n  // To handle this case, the host directives of components are inserted at the beginning\n  // of the array, followed by the component. As such, the insertion order is as follows:\n  // 1. Host directives belonging to the selector-matched component.\n  // 2. Selector-matched component.\n  // 3. Host directives belonging to selector-matched directives.\n  // 4. Selector-matched dir\n  for (const def of matches) {\n    if (def.findHostDirectiveDefs !== null) {\n      allDirectiveDefs ??= [];\n      hostDirectiveDefs ??= new Map();\n      hostDirectiveRanges ??= new Map();\n      resolveHostDirectivesForDef(def, allDirectiveDefs, hostDirectiveRanges, hostDirectiveDefs);\n    }\n\n    // Component definition needs to be pushed early to maintain the correct ordering.\n    if (def === componentDef) {\n      allDirectiveDefs ??= [];\n      allDirectiveDefs.push(def);\n    }\n  }\n\n  if (allDirectiveDefs !== null) {\n    allDirectiveDefs.push(...(componentDef === null ? matches : matches.slice(1)));\n    ngDevMode && assertNoDuplicateDirectives(allDirectiveDefs);\n    return [allDirectiveDefs, hostDirectiveDefs, hostDirectiveRanges];\n  }\n\n  return null;\n}\n\nfunction resolveHostDirectivesForDef(\n  def: DirectiveDef<unknown>,\n  allDirectiveDefs: DirectiveDef<unknown>[],\n  hostDirectiveRanges: HostDirectiveRanges,\n  hostDirectiveDefs: HostDirectiveDefs,\n) {\n  ngDevMode && assertDefined(def.findHostDirectiveDefs, 'Expected host directive resolve function');\n  const start = allDirectiveDefs.length;\n  // TODO(pk): probably could return matches instead of taking in an array to fill in?\n  def.findHostDirectiveDefs!(def, allDirectiveDefs, hostDirectiveDefs);\n\n  // Note that these indexes are within the offset by `directiveStart`. We can't do the\n  // offsetting here, because `directiveStart` hasn't been initialized on the TNode yet.\n  hostDirectiveRanges.set(def, [start, allDirectiveDefs.length - 1]);\n}\n\n/**\n * Marks a given TNode as a component's host. This consists of:\n * - setting the component offset on the TNode.\n * - storing index of component's host element so it will be queued for view refresh during CD.\n */\nfunction markAsComponentHost(tView: TView, hostTNode: TNode, componentOffset: number): void {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && assertGreaterThan(componentOffset, -1, 'componentOffset must be great than -1');\n  hostTNode.componentOffset = componentOffset;\n  (tView.components ??= []).push(hostTNode.index);\n}\n\n/** Initializes the data structures necessary for a list of directives to be instantiated. */\nfunction initializeDirectives(\n  tView: TView,\n  lView: LView<unknown>,\n  tNode: TElementNode | TContainerNode | TElementContainerNode,\n  directives: DirectiveDef<unknown>[],\n  exportsMap: {[key: string]: number} | null,\n  hostDirectiveDefs: HostDirectiveDefs | null,\n  hostDirectiveRanges: HostDirectiveRanges | null,\n) {\n  ngDevMode && assertFirstCreatePass(tView);\n\n  const directivesLength = directives.length;\n  let hasSeenComponent = false;\n\n  // Publishes the directive types to DI so they can be injected. Needs to\n  // happen in a separate pass before the TNode flags have been initialized.\n  for (let i = 0; i < directivesLength; i++) {\n    const def = directives[i];\n    if (!hasSeenComponent && isComponentDef(def)) {\n      hasSeenComponent = true;\n      markAsComponentHost(tView, tNode, i);\n    }\n    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, def.type);\n  }\n\n  initTNodeFlags(tNode, tView.data.length, directivesLength);\n\n  // When the same token is provided by several directives on the same node, some rules apply in\n  // the viewEngine:\n  // - viewProviders have priority over providers\n  // - the last directive in NgModule.declarations has priority over the previous one\n  // So to match these rules, the order in which providers are added in the arrays is very\n  // important.\n  for (let i = 0; i < directivesLength; i++) {\n    const def = directives[i];\n    if (def.providersResolver) def.providersResolver(def);\n  }\n  let preOrderHooksFound = false;\n  let preOrderCheckHooksFound = false;\n  let directiveIdx = allocExpando(tView, lView, directivesLength, null);\n  ngDevMode &&\n    assertSame(\n      directiveIdx,\n      tNode.directiveStart,\n      'TNode.directiveStart should point to just allocated space',\n    );\n\n  // If there's at least one directive, we'll have to track it so initialize the map.\n  if (directivesLength > 0) {\n    tNode.directiveToIndex = new Map();\n  }\n\n  for (let i = 0; i < directivesLength; i++) {\n    const def = directives[i];\n    // Merge the attrs in the order of matches. This assumes that the first directive is the\n    // component itself, so that the component has the least priority.\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n\n    configureViewWithDirective(tView, tNode, lView, directiveIdx, def);\n    saveNameToExportMap(directiveIdx, def, exportsMap);\n\n    // If a directive has host directives, we need to track both its index and the range within\n    // the host directives are declared. Host directives are not tracked, but should be resolved\n    // by looking up the host and getting its indexes from there.\n    if (hostDirectiveRanges !== null && hostDirectiveRanges.has(def)) {\n      const [start, end] = hostDirectiveRanges.get(def)!;\n      tNode.directiveToIndex!.set(def.type, [\n        directiveIdx,\n        start + tNode.directiveStart,\n        end + tNode.directiveStart,\n      ]);\n    } else if (hostDirectiveDefs === null || !hostDirectiveDefs.has(def)) {\n      tNode.directiveToIndex!.set(def.type, directiveIdx);\n    }\n\n    if (def.contentQueries !== null) tNode.flags |= TNodeFlags.hasContentQuery;\n    if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0)\n      tNode.flags |= TNodeFlags.hasHostBindings;\n\n    const lifeCycleHooks: Partial<OnChanges & OnInit & DoCheck> = def.type.prototype;\n    // Only push a node index into the preOrderHooks array if this is the first\n    // pre-order hook found on this node.\n    if (\n      !preOrderHooksFound &&\n      (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)\n    ) {\n      // We will push the actual hook function into this array later during dir instantiation.\n      // We cannot do it now because we must ensure hooks are registered in the same\n      // order that directives are created (i.e. injection order).\n      (tView.preOrderHooks ??= []).push(tNode.index);\n      preOrderHooksFound = true;\n    }\n\n    if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {\n      (tView.preOrderCheckHooks ??= []).push(tNode.index);\n      preOrderCheckHooksFound = true;\n    }\n\n    directiveIdx++;\n  }\n\n  initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs);\n}\n\n/**\n * Initializes data structures required to work with directive inputs and outputs.\n * Initialization is done for all directives matched on a given TNode.\n */\nfunction initializeInputAndOutputAliases(\n  tView: TView,\n  tNode: TNode,\n  hostDirectiveDefs: HostDirectiveDefs | null,\n): void {\n  ngDevMode && assertFirstCreatePass(tView);\n\n  for (let index = tNode.directiveStart; index < tNode.directiveEnd; index++) {\n    const directiveDef = tView.data[index] as DirectiveDef<any>;\n\n    if (hostDirectiveDefs === null || !hostDirectiveDefs.has(directiveDef)) {\n      setupSelectorMatchedInputsOrOutputs(BindingType.Inputs, tNode, directiveDef, index);\n      setupSelectorMatchedInputsOrOutputs(BindingType.Outputs, tNode, directiveDef, index);\n      setupInitialInputs(tNode, index, false);\n    } else {\n      const hostDirectiveDef = hostDirectiveDefs.get(directiveDef)!;\n      setupHostDirectiveInputsOrOutputs(BindingType.Inputs, tNode, hostDirectiveDef, index);\n      setupHostDirectiveInputsOrOutputs(BindingType.Outputs, tNode, hostDirectiveDef, index);\n      setupInitialInputs(tNode, index, true);\n    }\n  }\n}\n\n/** Types of bindings that can be exposed by a directive. */\nconst enum BindingType {\n  Inputs,\n  Outputs,\n}\n\n/**\n * Sets up the input/output bindings for a directive that was matched in the template through its\n * selector. This method is called repeatedly to build up all of the available inputs on a node.\n *\n * @param mode Whether inputs or outputs are being contructed.\n * @param tNode Node on which the bindings are being set up.\n * @param def Directive definition for which the bindings are being set up.\n * @param directiveIndex Index at which the directive instance will be stored in the LView.\n */\nfunction setupSelectorMatchedInputsOrOutputs<T>(\n  mode: BindingType,\n  tNode: TNode,\n  def: DirectiveDef<T>,\n  directiveIndex: number,\n): void {\n  const aliasMap = mode === BindingType.Inputs ? def.inputs : def.outputs;\n\n  for (const publicName in aliasMap) {\n    if (aliasMap.hasOwnProperty(publicName)) {\n      let bindings: NodeInputBindings | NodeOutputBindings;\n      if (mode === BindingType.Inputs) {\n        bindings = tNode.inputs ??= {};\n      } else {\n        bindings = tNode.outputs ??= {};\n      }\n      bindings[publicName] ??= [];\n      bindings[publicName].push(directiveIndex);\n      setShadowStylingInputFlags(tNode, publicName);\n    }\n  }\n}\n\n/**\n * Sets up input/output bindings that were defined through host directives on a specific node.\n * @param mode Whether inputs or outputs are being contructed.\n * @param tNode Node on which the bindings are being set up.\n * @param config Host directive definition that is being set up.\n * @param directiveIndex Index at which the directive instance will be stored in the LView.\n */\nfunction setupHostDirectiveInputsOrOutputs(\n  mode: BindingType,\n  tNode: TNode,\n  config: HostDirectiveDef,\n  directiveIndex: number,\n): void {\n  const aliasMap = mode === BindingType.Inputs ? config.inputs : config.outputs;\n\n  for (const initialName in aliasMap) {\n    if (aliasMap.hasOwnProperty(initialName)) {\n      const publicName = aliasMap[initialName];\n      let bindings: HostDirectiveInputs | HostDirectiveOutputs;\n      if (mode === BindingType.Inputs) {\n        bindings = tNode.hostDirectiveInputs ??= {};\n      } else {\n        bindings = tNode.hostDirectiveOutputs ??= {};\n      }\n      bindings[publicName] ??= [];\n      bindings[publicName].push(directiveIndex, initialName);\n      setShadowStylingInputFlags(tNode, publicName);\n    }\n  }\n}\n\nfunction setShadowStylingInputFlags(tNode: TNode, publicName: string): void {\n  if (publicName === 'class') {\n    tNode.flags |= TNodeFlags.hasClassInput;\n  } else if (publicName === 'style') {\n    tNode.flags |= TNodeFlags.hasStyleInput;\n  }\n}\n\n/**\n * Sets up the initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an @Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` @Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param tNode TNode on which to set up the initial inputs.\n * @param directiveIndex Index of the directive that is currently being processed.\n */\nfunction setupInitialInputs(tNode: TNode, directiveIndex: number, isHostDirective: boolean): void {\n  const {attrs, inputs, hostDirectiveInputs} = tNode;\n\n  if (\n    attrs === null ||\n    (!isHostDirective && inputs === null) ||\n    (isHostDirective && hostDirectiveInputs === null) ||\n    // Do not use unbound attributes as inputs to structural directives, since structural\n    // directive inputs can only be set using microsyntax (e.g. `<div *dir=\"exp\">`).\n    isInlineTemplate(tNode)\n  ) {\n    tNode.initialInputs ??= [];\n    tNode.initialInputs.push(null);\n    return;\n  }\n\n  let inputsToStore: InitialInputs | null = null;\n  let i = 0;\n  while (i < attrs.length) {\n    const attrName = attrs[i];\n    if (attrName === AttributeMarker.NamespaceURI) {\n      // We do not allow inputs on namespaced attributes.\n      i += 4;\n      continue;\n    } else if (attrName === AttributeMarker.ProjectAs) {\n      // Skip over the `ngProjectAs` value.\n      i += 2;\n      continue;\n    } else if (typeof attrName === 'number') {\n      // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n      break;\n    }\n\n    if (!isHostDirective && inputs!.hasOwnProperty(attrName as string)) {\n      // Find the input's public name from the input store. Note that we can be found easier\n      // through the directive def, but we want to do it using the inputs store so that it can\n      // account for host directive aliases.\n      const inputConfig = inputs![attrName as string];\n\n      for (const index of inputConfig) {\n        if (index === directiveIndex) {\n          inputsToStore ??= [];\n          inputsToStore.push(attrName as string, attrs[i + 1] as string);\n          // A directive can't have multiple inputs with the same name so we can break here.\n          break;\n        }\n      }\n    } else if (isHostDirective && hostDirectiveInputs!.hasOwnProperty(attrName as string)) {\n      const config = hostDirectiveInputs![attrName as string];\n      for (let j = 0; j < config.length; j += 2) {\n        if (config[j] === directiveIndex) {\n          inputsToStore ??= [];\n          inputsToStore.push(config[j + 1] as string, attrs[i + 1] as string);\n          break;\n        }\n      }\n    }\n\n    i += 2;\n  }\n\n  tNode.initialInputs ??= [];\n  tNode.initialInputs.push(inputsToStore);\n}\n\n/**\n * Setup directive for instantiation.\n *\n * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well\n * as `LView`. `TView` gets the `DirectiveDef`.\n *\n * @param tView `TView`\n * @param tNode `TNode`\n * @param lView `LView`\n * @param directiveIndex Index where the directive will be stored in the Expando.\n * @param def `DirectiveDef`\n */\nfunction configureViewWithDirective<T>(\n  tView: TView,\n  tNode: TNode,\n  lView: LView,\n  directiveIndex: number,\n  def: DirectiveDef<T>,\n): void {\n  ngDevMode &&\n    assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');\n  tView.data[directiveIndex] = def;\n  const directiveFactory =\n    def.factory || ((def as Writable<DirectiveDef<T>>).factory = getFactoryDef(def.type, true));\n  // Even though `directiveFactory` will already be using `ɵɵdirectiveInject` in its generated code,\n  // we also want to support `inject()` directly from the directive constructor context so we set\n  // `ɵɵdirectiveInject` as the inject implementation here too.\n  const nodeInjectorFactory = new NodeInjectorFactory(\n    directiveFactory,\n    isComponentDef(def),\n    ɵɵdirectiveInject,\n  );\n  tView.blueprint[directiveIndex] = nodeInjectorFactory;\n  lView[directiveIndex] = nodeInjectorFactory;\n\n  registerHostBindingOpCodes(\n    tView,\n    tNode,\n    directiveIndex,\n    allocExpando(tView, lView, def.hostVars, NO_CHANGE),\n    def,\n  );\n}\n\n/**\n * Add `hostBindings` to the `TView.hostBindingOpCodes`.\n *\n * @param tView `TView` to which the `hostBindings` should be added.\n * @param tNode `TNode` the element which contains the directive\n * @param directiveIdx Directive index in view.\n * @param directiveVarsIdx Where will the directive's vars be stored\n * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.\n */\nexport function registerHostBindingOpCodes(\n  tView: TView,\n  tNode: TNode,\n  directiveIdx: number,\n  directiveVarsIdx: number,\n  def: ComponentDef<any> | DirectiveDef<any>,\n): void {\n  ngDevMode && assertFirstCreatePass(tView);\n\n  const hostBindings = def.hostBindings;\n  if (hostBindings) {\n    let hostBindingOpCodes = tView.hostBindingOpCodes;\n    if (hostBindingOpCodes === null) {\n      hostBindingOpCodes = tView.hostBindingOpCodes = [] as any as HostBindingOpCodes;\n    }\n    const elementIndx = ~tNode.index;\n    if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {\n      // Conditionally add select element so that we are more efficient in execution.\n      // NOTE: this is strictly not necessary and it trades code size for runtime perf.\n      // (We could just always add it.)\n      hostBindingOpCodes.push(elementIndx);\n    }\n    hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);\n  }\n}\n\n/**\n * Returns the last selected element index in the `HostBindingOpCodes`\n *\n * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only\n * if it changes. This method returns the last index (or '0' if not found.)\n *\n * Selected element index are only the ones which are negative.\n */\nfunction lastSelectedElementIdx(hostBindingOpCodes: HostBindingOpCodes): number {\n  let i = hostBindingOpCodes.length;\n  while (i > 0) {\n    const value = hostBindingOpCodes[--i];\n    if (typeof value === 'number' && value < 0) {\n      return value;\n    }\n  }\n  return 0;\n}\n\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n */\nfunction saveNameToExportMap(\n  directiveIdx: number,\n  def: DirectiveDef<any> | ComponentDef<any>,\n  exportsMap: {[key: string]: number} | null,\n) {\n  if (exportsMap) {\n    if (def.exportAs) {\n      for (let i = 0; i < def.exportAs.length; i++) {\n        exportsMap[def.exportAs[i]] = directiveIdx;\n      }\n    }\n    if (isComponentDef(def)) exportsMap[''] = directiveIdx;\n  }\n}\n\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param index the initial index\n */\nfunction initTNodeFlags(tNode: TNode, index: number, numberOfDirectives: number) {\n  ngDevMode &&\n    assertNotEqual(\n      numberOfDirectives,\n      tNode.directiveEnd - tNode.directiveStart,\n      'Reached the max number of directives',\n    );\n  tNode.flags |= TNodeFlags.isDirectiveHost;\n  // When the first directive is created on a node, save the index\n  tNode.directiveStart = index;\n  tNode.directiveEnd = index + numberOfDirectives;\n  tNode.providerIndexes = index;\n}\n\nexport function assertNoDuplicateDirectives(directives: DirectiveDef<unknown>[]): void {\n  // The array needs at least two elements in order to have duplicates.\n  if (directives.length < 2) {\n    return;\n  }\n\n  const seenDirectives = new Set<DirectiveDef<unknown>>();\n\n  for (const current of directives) {\n    if (seenDirectives.has(current)) {\n      throw new RuntimeError(\n        RuntimeErrorCode.DUPLICATE_DIRECTIVE,\n        `Directive ${current.type.name} matches multiple times on the same element. ` +\n          `Directives can only match an element once.`,\n      );\n    }\n    seenDirectives.add(current);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertFirstCreatePass} from '../assert';\nimport {registerPostOrderHooks} from '../hooks';\nimport {TAttributes, TNode, TNodeType, type TElementNode} from '../interfaces/node';\nimport {isContentQueryHost} from '../interfaces/type_checks';\nimport type {LView, TView} from '../interfaces/view';\nimport {computeStaticStyling} from '../styling/static_styling';\nimport {getOrCreateTNode} from '../tnode_manipulation';\nimport {mergeHostAttrs} from '../util/attrs_utils';\nimport {getConstant} from '../util/view_utils';\nimport {resolveDirectives, type DirectiveMatcherStrategy} from './directives';\n\nexport function elementStartFirstCreatePass(\n  index: number,\n  tView: TView,\n  lView: LView,\n  name: string,\n  directiveMatcher: DirectiveMatcherStrategy,\n  bindingsEnabled: boolean,\n  attrsIndex?: number | null,\n  localRefsIndex?: number,\n): TElementNode {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && ngDevMode.firstCreatePass++;\n\n  const tViewConsts = tView.consts;\n  const attrs = getConstant<TAttributes>(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, TNodeType.Element, name, attrs);\n\n  if (bindingsEnabled) {\n    resolveDirectives(\n      tView,\n      lView,\n      tNode,\n      getConstant<string[]>(tViewConsts, localRefsIndex),\n      directiveMatcher,\n    );\n  }\n\n  // Merge the template attrs last so that they have the highest priority.\n  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n\n  if (tNode.attrs !== null) {\n    computeStaticStyling(tNode, tNode.attrs, false);\n  }\n\n  if (tNode.mergedAttrs !== null) {\n    computeStaticStyling(tNode, tNode.mergedAttrs, true);\n  }\n\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n\n  return tNode;\n}\n\nexport function elementEndFirstCreatePass(tView: TView, tNode: TNode) {\n  ngDevMode && assertFirstCreatePass(tView);\n  registerPostOrderHooks(tView, tNode);\n  if (isContentQueryHost(tNode)) {\n    tView.queries!.elementEnd(tNode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {setActiveConsumer} from '@angular/core/primitives/signals';\n\nimport {ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {\n  ChangeDetectionScheduler,\n  NotificationSource,\n} from '../change_detection/scheduling/zoneless_scheduling';\nimport {Injector} from '../di/injector';\nimport {EnvironmentInjector} from '../di/r3_injector';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {Type} from '../interface/type';\nimport {\n  ComponentFactory as AbstractComponentFactory,\n  ComponentRef as AbstractComponentRef,\n} from '../linker/component_factory';\nimport {ComponentFactoryResolver as AbstractComponentFactoryResolver} from '../linker/component_factory_resolver';\nimport {createElementRef, ElementRef} from '../linker/element_ref';\nimport {NgModuleRef} from '../linker/ng_module_factory';\nimport {RendererFactory2} from '../render/api';\nimport {Sanitizer} from '../sanitization/sanitizer';\n\nimport {assertComponentType} from './assert';\nimport {attachPatchData} from './context_discovery';\nimport {getComponentDef} from './def_getters';\nimport {depsTracker} from './deps_tracker/deps_tracker';\nimport {NodeInjector} from './di';\nimport {reportUnknownPropertyError} from './instructions/element_validation';\nimport {markViewDirty} from './instructions/mark_view_dirty';\nimport {renderView} from './instructions/render';\nimport {\n  createDirectivesInstances,\n  locateHostElement,\n  setAllInputsForProperty,\n} from './instructions/shared';\nimport {ComponentDef, DirectiveDef} from './interfaces/definition';\nimport {InputFlags} from './interfaces/input_flags';\nimport {TContainerNode, TElementContainerNode, TElementNode, TNode} from './interfaces/node';\nimport {RElement, RNode} from './interfaces/renderer_dom';\nimport {\n  CONTEXT,\n  HEADER_OFFSET,\n  LView,\n  LViewEnvironment,\n  LViewFlags,\n  TVIEW,\n  TViewType,\n} from './interfaces/view';\nimport {MATH_ML_NAMESPACE, SVG_NAMESPACE} from './namespaces';\n\nimport {retrieveHydrationInfo} from '../hydration/utils';\nimport {ChainedInjector} from './chained_injector';\nimport {createElementNode, setupStaticAttributes} from './dom_node_manipulation';\nimport {unregisterLView} from './interfaces/lview_tracking';\nimport {Renderer} from './interfaces/renderer';\nimport {\n  extractAttrsAndClassesFromSelector,\n  stringifyCSSSelectorList,\n} from './node_selector_matcher';\nimport {profiler} from './profiler';\nimport {ProfilerEvent} from './profiler_types';\nimport {executeContentQueries} from './queries/query_execution';\nimport {enterView, leaveView} from './state';\nimport {debugStringifyTypeForError, stringifyForError} from './util/stringify_utils';\nimport {getComponentLViewByIndex, getTNode} from './util/view_utils';\nimport {elementEndFirstCreatePass, elementStartFirstCreatePass} from './view/elements';\nimport {ViewRef} from './view_ref';\nimport {createLView, createTView, getInitialLViewFlagsFromDef} from './view/construction';\n\nexport class ComponentFactoryResolver extends AbstractComponentFactoryResolver {\n  /**\n   * @param ngModule The NgModuleRef to which all resolved factories are bound.\n   */\n  constructor(private ngModule?: NgModuleRef<any>) {\n    super();\n  }\n\n  override resolveComponentFactory<T>(component: Type<T>): AbstractComponentFactory<T> {\n    ngDevMode && assertComponentType(component);\n    const componentDef = getComponentDef(component)!;\n    return new ComponentFactory(componentDef, this.ngModule);\n  }\n}\n\nfunction toInputRefArray<T>(map: DirectiveDef<T>['inputs']): ComponentFactory<T>['inputs'] {\n  return Object.keys(map).map((name) => {\n    const [propName, flags, transform] = map[name];\n    const inputData: ComponentFactory<T>['inputs'][0] = {\n      propName: propName,\n      templateName: name,\n      isSignal: (flags & InputFlags.SignalBased) !== 0,\n    };\n    if (transform) {\n      inputData.transform = transform;\n    }\n    return inputData;\n  });\n}\n\nfunction toOutputRefArray<T>(map: DirectiveDef<T>['outputs']): ComponentFactory<T>['outputs'] {\n  return Object.keys(map).map((name) => ({propName: map[name], templateName: name}));\n}\n\nfunction verifyNotAnOrphanComponent(componentDef: ComponentDef<unknown>) {\n  // TODO(pk): create assert that verifies ngDevMode\n  if (\n    (typeof ngJitMode === 'undefined' || ngJitMode) &&\n    componentDef.debugInfo?.forbidOrphanRendering\n  ) {\n    if (depsTracker.isOrphanComponent(componentDef.type)) {\n      throw new RuntimeError(\n        RuntimeErrorCode.RUNTIME_DEPS_ORPHAN_COMPONENT,\n        `Orphan component found! Trying to render the component ${debugStringifyTypeForError(\n          componentDef.type,\n        )} without first loading the NgModule that declares it. It is recommended to make this component standalone in order to avoid this error. If this is not possible now, import the component's NgModule in the appropriate NgModule, or the standalone component in which you are trying to render this component. If this is a lazy import, load the NgModule lazily as well and use its module injector.`,\n      );\n    }\n  }\n}\n\nfunction createRootViewInjector(\n  componentDef: ComponentDef<unknown>,\n  environmentInjector: EnvironmentInjector | NgModuleRef<any> | undefined,\n  injector: Injector,\n): Injector {\n  let realEnvironmentInjector =\n    environmentInjector instanceof EnvironmentInjector\n      ? environmentInjector\n      : environmentInjector?.injector;\n\n  if (realEnvironmentInjector && componentDef.getStandaloneInjector !== null) {\n    realEnvironmentInjector =\n      componentDef.getStandaloneInjector(realEnvironmentInjector) || realEnvironmentInjector;\n  }\n\n  const rootViewInjector = realEnvironmentInjector\n    ? new ChainedInjector(injector, realEnvironmentInjector)\n    : injector;\n  return rootViewInjector;\n}\n\nfunction createRootLViewEnvironment(rootLViewInjector: Injector): LViewEnvironment {\n  const rendererFactory = rootLViewInjector.get(RendererFactory2, null);\n  if (rendererFactory === null) {\n    throw new RuntimeError(\n      RuntimeErrorCode.RENDERER_NOT_FOUND,\n      ngDevMode &&\n        'Angular was not able to inject a renderer (RendererFactory2). ' +\n          'Likely this is due to a broken DI hierarchy. ' +\n          'Make sure that any injector used to create this component has a correct parent.',\n    );\n  }\n\n  const sanitizer = rootLViewInjector.get(Sanitizer, null);\n  const changeDetectionScheduler = rootLViewInjector.get(ChangeDetectionScheduler, null);\n\n  return {\n    rendererFactory,\n    sanitizer,\n    changeDetectionScheduler,\n  };\n}\n\nfunction createHostElement(componentDef: ComponentDef<unknown>, render: Renderer): RElement {\n  // Determine a tag name used for creating host elements when this component is created\n  // dynamically. Default to 'div' if this component did not specify any tag name in its\n  // selector.\n  const tagName = ((componentDef.selectors[0][0] as string) || 'div').toLowerCase();\n  const namespace =\n    tagName === 'svg' ? SVG_NAMESPACE : tagName === 'math' ? MATH_ML_NAMESPACE : null;\n  return createElementNode(render, tagName, namespace);\n}\n\n/**\n * ComponentFactory interface implementation.\n */\nexport class ComponentFactory<T> extends AbstractComponentFactory<T> {\n  override selector: string;\n  override componentType: Type<any>;\n  override ngContentSelectors: string[];\n  isBoundToModule: boolean;\n  private cachedInputs:\n    | {\n        propName: string;\n        templateName: string;\n        isSignal: boolean;\n        transform?: (value: any) => any;\n      }[]\n    | null = null;\n  private cachedOutputs: {propName: string; templateName: string}[] | null = null;\n\n  override get inputs(): {\n    propName: string;\n    templateName: string;\n    isSignal: boolean;\n    transform?: (value: any) => any;\n  }[] {\n    this.cachedInputs ??= toInputRefArray(this.componentDef.inputs);\n    return this.cachedInputs;\n  }\n\n  override get outputs(): {propName: string; templateName: string}[] {\n    this.cachedOutputs ??= toOutputRefArray(this.componentDef.outputs);\n    return this.cachedOutputs;\n  }\n\n  /**\n   * @param componentDef The component definition.\n   * @param ngModule The NgModuleRef to which the factory is bound.\n   */\n  constructor(\n    private componentDef: ComponentDef<any>,\n    private ngModule?: NgModuleRef<any>,\n  ) {\n    super();\n    this.componentType = componentDef.type;\n    this.selector = stringifyCSSSelectorList(componentDef.selectors);\n    this.ngContentSelectors = componentDef.ngContentSelectors ?? [];\n    this.isBoundToModule = !!ngModule;\n  }\n\n  override create(\n    injector: Injector,\n    projectableNodes?: any[][] | undefined,\n    rootSelectorOrNode?: any,\n    environmentInjector?: NgModuleRef<any> | EnvironmentInjector | undefined,\n  ): AbstractComponentRef<T> {\n    profiler(ProfilerEvent.DynamicComponentStart);\n\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      const cmpDef = this.componentDef;\n      ngDevMode && verifyNotAnOrphanComponent(cmpDef);\n\n      const tAttributes = rootSelectorOrNode\n        ? ['ng-version', '19.2.3']\n        : // Extract attributes and classes from the first selector only to match VE behavior.\n          extractAttrsAndClassesFromSelector(this.componentDef.selectors[0]);\n      // Create the root view. Uses empty TView and ContentTemplate.\n      const rootTView = createTView(\n        TViewType.Root,\n        null,\n        null,\n        1,\n        0,\n        null,\n        null,\n        null,\n        null,\n        [tAttributes],\n        null,\n      );\n\n      const rootViewInjector = createRootViewInjector(\n        cmpDef,\n        environmentInjector || this.ngModule,\n        injector,\n      );\n\n      const environment = createRootLViewEnvironment(rootViewInjector);\n      const hostRenderer = environment.rendererFactory.createRenderer(null, cmpDef);\n      const hostElement = rootSelectorOrNode\n        ? locateHostElement(\n            hostRenderer,\n            rootSelectorOrNode,\n            cmpDef.encapsulation,\n            rootViewInjector,\n          )\n        : createHostElement(cmpDef, hostRenderer);\n\n      const rootLView = createLView<T>(\n        null,\n        rootTView,\n        null,\n        LViewFlags.IsRoot | getInitialLViewFlagsFromDef(cmpDef),\n        null,\n        null,\n        environment,\n        hostRenderer,\n        rootViewInjector,\n        null,\n        retrieveHydrationInfo(hostElement, rootViewInjector, true /* isRootView */),\n      );\n\n      rootLView[HEADER_OFFSET] = hostElement;\n\n      // rootView is the parent when bootstrapping\n      // TODO(misko): it looks like we are entering view here but we don't really need to as\n      // `renderView` does that. However as the code is written it is needed because\n      // `createRootComponentView` and `createRootComponent` both read global state. Fixing those\n      // issues would allow us to drop this.\n      enterView(rootLView);\n\n      let componentView: LView | null = null;\n\n      try {\n        const hostTNode = elementStartFirstCreatePass(\n          HEADER_OFFSET,\n          rootTView,\n          rootLView,\n          '#host',\n          () => [this.componentDef],\n          true,\n          0,\n        );\n\n        // ---- element instruction\n\n        // TODO(crisbeto): in practice `hostRNode` should always be defined, but there are some\n        // tests where the renderer is mocked out and `undefined` is returned. We should update the\n        // tests so that this check can be removed.\n        if (hostElement) {\n          setupStaticAttributes(hostRenderer, hostElement, hostTNode);\n          attachPatchData(hostElement, rootLView);\n        }\n\n        // TODO(pk): this logic is similar to the instruction code where a node can have directives\n        createDirectivesInstances(rootTView, rootLView, hostTNode);\n        executeContentQueries(rootTView, hostTNode, rootLView);\n\n        elementEndFirstCreatePass(rootTView, hostTNode);\n\n        if (projectableNodes !== undefined) {\n          projectNodes(hostTNode, this.ngContentSelectors, projectableNodes);\n        }\n\n        componentView = getComponentLViewByIndex(hostTNode.index, rootLView);\n\n        // TODO(pk): why do we need this logic?\n        rootLView[CONTEXT] = componentView[CONTEXT] as T;\n\n        renderView(rootTView, rootLView, null);\n      } catch (e) {\n        // Stop tracking the views if creation failed since\n        // the consumer won't have a way to dereference them.\n        if (componentView !== null) {\n          unregisterLView(componentView);\n        }\n        unregisterLView(rootLView);\n        throw e;\n      } finally {\n        profiler(ProfilerEvent.DynamicComponentEnd);\n        leaveView();\n      }\n\n      return new ComponentRef(this.componentType, rootLView);\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\n\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nexport class ComponentRef<T> extends AbstractComponentRef<T> {\n  override instance: T;\n  override hostView: ViewRef<T>;\n  override changeDetectorRef: ChangeDetectorRef;\n  override componentType: Type<T>;\n  override location: ElementRef;\n  private previousInputValues: Map<string, unknown> | null = null;\n  private _tNode: TElementNode | TContainerNode | TElementContainerNode;\n\n  constructor(\n    componentType: Type<T>,\n    private _rootLView: LView,\n  ) {\n    super();\n    this._tNode = getTNode(_rootLView[TVIEW], HEADER_OFFSET) as TElementNode;\n    this.location = createElementRef(this._tNode, _rootLView);\n    this.instance = getComponentLViewByIndex(this._tNode.index, _rootLView)[CONTEXT] as T;\n    this.hostView = this.changeDetectorRef = new ViewRef<T>(\n      _rootLView,\n      undefined /* _cdRefInjectingView */,\n      false /* notifyErrorHandler */,\n    );\n    this.componentType = componentType;\n  }\n\n  override setInput(name: string, value: unknown): void {\n    const tNode = this._tNode;\n    this.previousInputValues ??= new Map();\n    // Do not set the input if it is the same as the last value\n    // This behavior matches `bindingUpdated` when binding inputs in templates.\n    if (\n      this.previousInputValues.has(name) &&\n      Object.is(this.previousInputValues.get(name), value)\n    ) {\n      return;\n    }\n\n    const lView = this._rootLView;\n    const hasSetInput = setAllInputsForProperty(tNode, lView[TVIEW], lView, name, value);\n    this.previousInputValues.set(name, value);\n    const childComponentLView = getComponentLViewByIndex(tNode.index, lView);\n    markViewDirty(childComponentLView, NotificationSource.SetInput);\n\n    if (ngDevMode && !hasSetInput) {\n      const cmpNameForError = stringifyForError(this.componentType);\n      let message = `Can't set value of the '${name}' input on the '${cmpNameForError}' component. `;\n      message += `Make sure that the '${name}' property is annotated with @Input() or a mapped @Input('${name}') exists.`;\n      reportUnknownPropertyError(message);\n    }\n  }\n\n  override get injector(): Injector {\n    return new NodeInjector(this._tNode, this._rootLView);\n  }\n\n  override destroy(): void {\n    this.hostView.destroy();\n  }\n\n  override onDestroy(callback: () => void): void {\n    this.hostView.onDestroy(callback);\n  }\n}\n\n/** Projects the `projectableNodes` that were specified when creating a root component. */\nfunction projectNodes(\n  tNode: TElementNode,\n  ngContentSelectors: string[],\n  projectableNodes: any[][],\n) {\n  const projection: (TNode | RNode[] | null)[] = (tNode.projection = []);\n  for (let i = 0; i < ngContentSelectors.length; i++) {\n    const nodesforSlot = projectableNodes[i];\n    // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n    // case). Here we do normalize passed data structure to be an array of arrays to avoid\n    // complex checks down the line.\n    // We also normalize the length of the passed in projectable nodes (to match the number of\n    // <ng-container> slots defined by a component).\n    projection.push(nodesforSlot != null && nodesforSlot.length ? Array.from(nodesforSlot) : null);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector} from '../di/injector';\nimport {EnvironmentInjector} from '../di/r3_injector';\nimport {validateMatchingNode} from '../hydration/error_handling';\nimport {CONTAINERS} from '../hydration/interfaces';\nimport {isInSkipHydrationBlock} from '../hydration/skip_hydration';\nimport {\n  getSegmentHead,\n  isDisconnectedNode,\n  markRNodeAsClaimedByHydration,\n} from '../hydration/utils';\nimport {findMatchingDehydratedView, locateDehydratedViewsInContainer} from '../hydration/views';\nimport {isType, Type} from '../interface/type';\nimport {assertNodeInjector} from '../render3/assert';\nimport {ComponentFactory as R3ComponentFactory} from '../render3/component_ref';\nimport {getComponentDef} from '../render3/def_getters';\nimport {getParentInjectorLocation, NodeInjector} from '../render3/di';\nimport {\n  CONTAINER_HEADER_OFFSET,\n  DEHYDRATED_VIEWS,\n  LContainer,\n  NATIVE,\n  VIEW_REFS,\n} from '../render3/interfaces/container';\nimport {NodeInjectorOffset} from '../render3/interfaces/injector';\nimport {\n  TContainerNode,\n  TDirectiveHostNode,\n  TElementContainerNode,\n  TElementNode,\n  TNode,\n  TNodeType,\n} from '../render3/interfaces/node';\nimport {RComment, RNode} from '../render3/interfaces/renderer_dom';\nimport {isLContainer} from '../render3/interfaces/type_checks';\nimport {\n  HEADER_OFFSET,\n  HYDRATION,\n  LView,\n  PARENT,\n  RENDERER,\n  T_HOST,\n  TVIEW,\n} from '../render3/interfaces/view';\nimport {assertTNodeType} from '../render3/node_assert';\nimport {destroyLView} from '../render3/node_manipulation';\nimport {nativeInsertBefore} from '../render3/dom_node_manipulation';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {\n  getParentInjectorIndex,\n  getParentInjectorView,\n  hasParentInjector,\n} from '../render3/util/injector_utils';\nimport {getNativeByTNode, unwrapRNode, viewAttachedToContainer} from '../render3/util/view_utils';\nimport {shouldAddViewToDom} from '../render3/view_manipulation';\nimport {ViewRef as R3ViewRef} from '../render3/view_ref';\nimport {addToArray, removeFromArray} from '../util/array_utils';\nimport {\n  assertDefined,\n  assertEqual,\n  assertGreaterThan,\n  assertLessThan,\n  throwError,\n} from '../util/assert';\n\nimport {ComponentFactory, ComponentRef} from './component_factory';\nimport {createElementRef, ElementRef} from './element_ref';\nimport {NgModuleRef} from './ng_module_factory';\nimport {TemplateRef} from './template_ref';\nimport {EmbeddedViewRef, ViewRef} from './view_ref';\nimport {addLViewToLContainer, createLContainer, detachView} from '../render3/view/container';\nimport {addToEndOfViewTree} from '../render3/view/construction';\n\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a view hierarchy.\n *\n * @usageNotes\n *\n * The example below demonstrates how the `createComponent` function can be used\n * to create an instance of a ComponentRef dynamically and attach it to an ApplicationRef,\n * so that it gets included into change detection cycles.\n *\n * Note: the example uses standalone components, but the function can also be used for\n * non-standalone components (declared in an NgModule) as well.\n *\n * ```angular-ts\n * @Component({\n *   standalone: true,\n *   selector: 'dynamic',\n *   template: `<span>This is a content of a dynamic component.</span>`,\n * })\n * class DynamicComponent {\n *   vcr = inject(ViewContainerRef);\n * }\n *\n * @Component({\n *   standalone: true,\n *   selector: 'app',\n *   template: `<main>Hi! This is the main content.</main>`,\n * })\n * class AppComponent {\n *   vcr = inject(ViewContainerRef);\n *\n *   ngAfterViewInit() {\n *     const compRef = this.vcr.createComponent(DynamicComponent);\n *     compRef.changeDetectorRef.detectChanges();\n *   }\n * }\n * ```\n *\n * @see {@link ComponentRef}\n * @see {@link EmbeddedViewRef}\n *\n * @publicApi\n */\nexport abstract class ViewContainerRef {\n  /**\n   * Anchor element that specifies the location of this container in the containing view.\n   * Each view container can have only one anchor element, and each anchor element\n   * can have only a single view container.\n   *\n   * Root elements of views attached to this container become siblings of the anchor element in\n   * the rendered view.\n   *\n   * Access the `ViewContainerRef` of an element by placing a `Directive` injected\n   * with `ViewContainerRef` on the element, or use a `ViewChild` query.\n   *\n   * <!-- TODO: rename to anchorElement -->\n   */\n  abstract get element(): ElementRef;\n\n  /**\n   * The dependency injector for this view container.\n   */\n  abstract get injector(): Injector;\n\n  /** @deprecated No replacement */\n  abstract get parentInjector(): Injector;\n\n  /**\n   * Destroys all views in this container.\n   */\n  abstract clear(): void;\n\n  /**\n   * Retrieves a view from this container.\n   * @param index The 0-based index of the view to retrieve.\n   * @returns The `ViewRef` instance, or null if the index is out of range.\n   */\n  abstract get(index: number): ViewRef | null;\n\n  /**\n   * Reports how many views are currently attached to this container.\n   * @returns The number of views.\n   */\n  abstract get length(): number;\n\n  /**\n   * Instantiates an embedded view and inserts it\n   * into this container.\n   * @param templateRef The HTML template that defines the view.\n   * @param context The data-binding context of the embedded view, as declared\n   * in the `<ng-template>` usage.\n   * @param options Extra configuration for the created view. Includes:\n   *  * index: The 0-based index at which to insert the new view into this container.\n   *           If not specified, appends the new view as the last entry.\n   *  * injector: Injector to be used within the embedded view.\n   *\n   * @returns The `ViewRef` instance for the newly created view.\n   */\n  abstract createEmbeddedView<C>(\n    templateRef: TemplateRef<C>,\n    context?: C,\n    options?: {\n      index?: number;\n      injector?: Injector;\n    },\n  ): EmbeddedViewRef<C>;\n\n  /**\n   * Instantiates an embedded view and inserts it\n   * into this container.\n   * @param templateRef The HTML template that defines the view.\n   * @param context The data-binding context of the embedded view, as declared\n   * in the `<ng-template>` usage.\n   * @param index The 0-based index at which to insert the new view into this container.\n   * If not specified, appends the new view as the last entry.\n   *\n   * @returns The `ViewRef` instance for the newly created view.\n   */\n  abstract createEmbeddedView<C>(\n    templateRef: TemplateRef<C>,\n    context?: C,\n    index?: number,\n  ): EmbeddedViewRef<C>;\n\n  /**\n   * Instantiates a single component and inserts its host view into this container.\n   *\n   * @param componentType Component Type to use.\n   * @param options An object that contains extra parameters:\n   *  * index: the index at which to insert the new component's host view into this container.\n   *           If not specified, appends the new view as the last entry.\n   *  * injector: the injector to use as the parent for the new component.\n   *  * ngModuleRef: an NgModuleRef of the component's NgModule, you should almost always provide\n   *                 this to ensure that all expected providers are available for the component\n   *                 instantiation.\n   *  * environmentInjector: an EnvironmentInjector which will provide the component's environment.\n   *                 you should almost always provide this to ensure that all expected providers\n   *                 are available for the component instantiation. This option is intended to\n   *                 replace the `ngModuleRef` parameter.\n   *  * projectableNodes: list of DOM nodes that should be projected through\n   *                      [`<ng-content>`](api/core/ng-content) of the new component instance.\n   *\n   * @returns The new `ComponentRef` which contains the component instance and the host view.\n   */\n  abstract createComponent<C>(\n    componentType: Type<C>,\n    options?: {\n      index?: number;\n      injector?: Injector;\n      ngModuleRef?: NgModuleRef<unknown>;\n      environmentInjector?: EnvironmentInjector | NgModuleRef<unknown>;\n      projectableNodes?: Node[][];\n    },\n  ): ComponentRef<C>;\n\n  /**\n   * Instantiates a single component and inserts its host view into this container.\n   *\n   * @param componentFactory Component factory to use.\n   * @param index The index at which to insert the new component's host view into this container.\n   * If not specified, appends the new view as the last entry.\n   * @param injector The injector to use as the parent for the new component.\n   * @param projectableNodes List of DOM nodes that should be projected through\n   *     [`<ng-content>`](api/core/ng-content) of the new component instance.\n   * @param ngModuleRef An instance of the NgModuleRef that represent an NgModule.\n   * This information is used to retrieve corresponding NgModule injector.\n   *\n   * @returns The new `ComponentRef` which contains the component instance and the host view.\n   *\n   * @deprecated Angular no longer requires component factories to dynamically create components.\n   *     Use different signature of the `createComponent` method, which allows passing\n   *     Component class directly.\n   */\n  abstract createComponent<C>(\n    componentFactory: ComponentFactory<C>,\n    index?: number,\n    injector?: Injector,\n    projectableNodes?: any[][],\n    environmentInjector?: EnvironmentInjector | NgModuleRef<any>,\n  ): ComponentRef<C>;\n\n  /**\n   * Inserts a view into this container.\n   * @param viewRef The view to insert.\n   * @param index The 0-based index at which to insert the view.\n   * If not specified, appends the new view as the last entry.\n   * @returns The inserted `ViewRef` instance.\n   *\n   */\n  abstract insert(viewRef: ViewRef, index?: number): ViewRef;\n\n  /**\n   * Moves a view to a new location in this container.\n   * @param viewRef The view to move.\n   * @param index The 0-based index of the new location.\n   * @returns The moved `ViewRef` instance.\n   */\n  abstract move(viewRef: ViewRef, currentIndex: number): ViewRef;\n\n  /**\n   * Returns the index of a view within the current container.\n   * @param viewRef The view to query.\n   * @returns The 0-based index of the view's position in this container,\n   * or `-1` if this container doesn't contain the view.\n   */\n  abstract indexOf(viewRef: ViewRef): number;\n\n  /**\n   * Destroys a view attached to this container\n   * @param index The 0-based index of the view to destroy.\n   * If not specified, the last view in the container is removed.\n   */\n  abstract remove(index?: number): void;\n\n  /**\n   * Detaches a view from this container without destroying it.\n   * Use along with `insert()` to move a view within the current container.\n   * @param index The 0-based index of the view to detach.\n   * If not specified, the last view in the container is detached.\n   */\n  abstract detach(index?: number): ViewRef | null;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => ViewContainerRef = injectViewContainerRef;\n}\n\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\nexport function injectViewContainerRef(): ViewContainerRef {\n  const previousTNode = getCurrentTNode() as TElementNode | TElementContainerNode | TContainerNode;\n  return createContainerRef(previousTNode, getLView());\n}\n\nconst VE_ViewContainerRef = ViewContainerRef;\n\n// TODO(alxhub): cleaning up this indirection triggers a subtle bug in Closure in g3. Once the fix\n// for that lands, this can be cleaned up.\nconst R3ViewContainerRef = class ViewContainerRef extends VE_ViewContainerRef {\n  constructor(\n    private _lContainer: LContainer,\n    private _hostTNode: TElementNode | TContainerNode | TElementContainerNode,\n    private _hostLView: LView,\n  ) {\n    super();\n  }\n\n  override get element(): ElementRef {\n    return createElementRef(this._hostTNode, this._hostLView);\n  }\n\n  override get injector(): Injector {\n    return new NodeInjector(this._hostTNode, this._hostLView);\n  }\n\n  /** @deprecated No replacement */\n  override get parentInjector(): Injector {\n    const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);\n    if (hasParentInjector(parentLocation)) {\n      const parentView = getParentInjectorView(parentLocation, this._hostLView);\n      const injectorIndex = getParentInjectorIndex(parentLocation);\n      ngDevMode && assertNodeInjector(parentView, injectorIndex);\n      const parentTNode = parentView[TVIEW].data[\n        injectorIndex + NodeInjectorOffset.TNODE\n      ] as TElementNode;\n      return new NodeInjector(parentTNode, parentView);\n    } else {\n      return new NodeInjector(null, this._hostLView);\n    }\n  }\n\n  override clear(): void {\n    while (this.length > 0) {\n      this.remove(this.length - 1);\n    }\n  }\n\n  override get(index: number): ViewRef | null {\n    const viewRefs = getViewRefs(this._lContainer);\n    return (viewRefs !== null && viewRefs[index]) || null;\n  }\n\n  override get length(): number {\n    return this._lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n\n  override createEmbeddedView<C>(\n    templateRef: TemplateRef<C>,\n    context?: C,\n    options?: {\n      index?: number;\n      injector?: Injector;\n    },\n  ): EmbeddedViewRef<C>;\n  override createEmbeddedView<C>(\n    templateRef: TemplateRef<C>,\n    context?: C,\n    index?: number,\n  ): EmbeddedViewRef<C>;\n  override createEmbeddedView<C>(\n    templateRef: TemplateRef<C>,\n    context?: C,\n    indexOrOptions?:\n      | number\n      | {\n          index?: number;\n          injector?: Injector;\n        },\n  ): EmbeddedViewRef<C> {\n    let index: number | undefined;\n    let injector: Injector | undefined;\n\n    if (typeof indexOrOptions === 'number') {\n      index = indexOrOptions;\n    } else if (indexOrOptions != null) {\n      index = indexOrOptions.index;\n      injector = indexOrOptions.injector;\n    }\n\n    const dehydratedView = findMatchingDehydratedView(this._lContainer, templateRef.ssrId);\n    const viewRef = templateRef.createEmbeddedViewImpl(\n      context || <any>{},\n      injector,\n      dehydratedView,\n    );\n    this.insertImpl(viewRef, index, shouldAddViewToDom(this._hostTNode, dehydratedView));\n    return viewRef;\n  }\n\n  override createComponent<C>(\n    componentType: Type<C>,\n    options?: {\n      index?: number;\n      injector?: Injector;\n      projectableNodes?: Node[][];\n      ngModuleRef?: NgModuleRef<unknown>;\n    },\n  ): ComponentRef<C>;\n  /**\n   * @deprecated Angular no longer requires component factories to dynamically create components.\n   *     Use different signature of the `createComponent` method, which allows passing\n   *     Component class directly.\n   */\n  override createComponent<C>(\n    componentFactory: ComponentFactory<C>,\n    index?: number | undefined,\n    injector?: Injector | undefined,\n    projectableNodes?: any[][] | undefined,\n    environmentInjector?: EnvironmentInjector | NgModuleRef<any> | undefined,\n  ): ComponentRef<C>;\n  override createComponent<C>(\n    componentFactoryOrType: ComponentFactory<C> | Type<C>,\n    indexOrOptions?:\n      | number\n      | undefined\n      | {\n          index?: number;\n          injector?: Injector;\n          ngModuleRef?: NgModuleRef<unknown>;\n          environmentInjector?: EnvironmentInjector | NgModuleRef<unknown>;\n          projectableNodes?: Node[][];\n        },\n    injector?: Injector | undefined,\n    projectableNodes?: any[][] | undefined,\n    environmentInjector?: EnvironmentInjector | NgModuleRef<any> | undefined,\n  ): ComponentRef<C> {\n    const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);\n    let index: number | undefined;\n\n    // This function supports 2 signatures and we need to handle options correctly for both:\n    //   1. When first argument is a Component type. This signature also requires extra\n    //      options to be provided as object (more ergonomic option).\n    //   2. First argument is a Component factory. In this case extra options are represented as\n    //      positional arguments. This signature is less ergonomic and will be deprecated.\n    if (isComponentFactory) {\n      if (ngDevMode) {\n        assertEqual(\n          typeof indexOrOptions !== 'object',\n          true,\n          'It looks like Component factory was provided as the first argument ' +\n            'and an options object as the second argument. This combination of arguments ' +\n            'is incompatible. You can either change the first argument to provide Component ' +\n            'type or change the second argument to be a number (representing an index at ' +\n            \"which to insert the new component's host view into this container)\",\n        );\n      }\n      index = indexOrOptions as number | undefined;\n    } else {\n      if (ngDevMode) {\n        assertDefined(\n          getComponentDef(componentFactoryOrType),\n          `Provided Component class doesn't contain Component definition. ` +\n            `Please check whether provided class has @Component decorator.`,\n        );\n        assertEqual(\n          typeof indexOrOptions !== 'number',\n          true,\n          'It looks like Component type was provided as the first argument ' +\n            \"and a number (representing an index at which to insert the new component's \" +\n            'host view into this container as the second argument. This combination of arguments ' +\n            'is incompatible. Please use an object as the second argument instead.',\n        );\n      }\n      const options = (indexOrOptions || {}) as {\n        index?: number;\n        injector?: Injector;\n        ngModuleRef?: NgModuleRef<unknown>;\n        environmentInjector?: EnvironmentInjector | NgModuleRef<unknown>;\n        projectableNodes?: Node[][];\n      };\n      if (ngDevMode && options.environmentInjector && options.ngModuleRef) {\n        throwError(\n          `Cannot pass both environmentInjector and ngModuleRef options to createComponent().`,\n        );\n      }\n      index = options.index;\n      injector = options.injector;\n      projectableNodes = options.projectableNodes;\n      environmentInjector = options.environmentInjector || options.ngModuleRef;\n    }\n\n    const componentFactory: ComponentFactory<C> = isComponentFactory\n      ? (componentFactoryOrType as ComponentFactory<C>)\n      : new R3ComponentFactory(getComponentDef(componentFactoryOrType)!);\n    const contextInjector = injector || this.parentInjector;\n\n    // If an `NgModuleRef` is not provided explicitly, try retrieving it from the DI tree.\n    if (!environmentInjector && (componentFactory as any).ngModule == null) {\n      // For the `ComponentFactory` case, entering this logic is very unlikely, since we expect that\n      // an instance of a `ComponentFactory`, resolved via `ComponentFactoryResolver` would have an\n      // `ngModule` field. This is possible in some test scenarios and potentially in some JIT-based\n      // use-cases. For the `ComponentFactory` case we preserve backwards-compatibility and try\n      // using a provided injector first, then fall back to the parent injector of this\n      // `ViewContainerRef` instance.\n      //\n      // For the factory-less case, it's critical to establish a connection with the module\n      // injector tree (by retrieving an instance of an `NgModuleRef` and accessing its injector),\n      // so that a component can use DI tokens provided in MgModules. For this reason, we can not\n      // rely on the provided injector, since it might be detached from the DI tree (for example, if\n      // it was created via `Injector.create` without specifying a parent injector, or if an\n      // injector is retrieved from an `NgModuleRef` created via `createNgModule` using an\n      // NgModule outside of a module tree). Instead, we always use `ViewContainerRef`'s parent\n      // injector, which is normally connected to the DI tree, which includes module injector\n      // subtree.\n      const _injector = isComponentFactory ? contextInjector : this.parentInjector;\n\n      // DO NOT REFACTOR. The code here used to have a `injector.get(NgModuleRef, null) ||\n      // undefined` expression which seems to cause internal google apps to fail. This is documented\n      // in the following internal bug issue: go/b/142967802\n      const result = _injector.get(EnvironmentInjector, null);\n      if (result) {\n        environmentInjector = result;\n      }\n    }\n\n    const componentDef = getComponentDef(componentFactory.componentType ?? {});\n    const dehydratedView = findMatchingDehydratedView(this._lContainer, componentDef?.id ?? null);\n    const rNode = dehydratedView?.firstChild ?? null;\n    const componentRef = componentFactory.create(\n      contextInjector,\n      projectableNodes,\n      rNode,\n      environmentInjector,\n    );\n    this.insertImpl(\n      componentRef.hostView,\n      index,\n      shouldAddViewToDom(this._hostTNode, dehydratedView),\n    );\n    return componentRef;\n  }\n\n  override insert(viewRef: ViewRef, index?: number): ViewRef {\n    return this.insertImpl(viewRef, index, true);\n  }\n\n  private insertImpl(viewRef: ViewRef, index?: number, addToDOM?: boolean): ViewRef {\n    const lView = (viewRef as R3ViewRef<any>)._lView!;\n\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n    }\n\n    if (viewAttachedToContainer(lView)) {\n      // If view is already attached, detach it first so we clean up references appropriately.\n\n      const prevIdx = this.indexOf(viewRef);\n\n      // A view might be attached either to this or a different container. The `prevIdx` for\n      // those cases will be:\n      // equal to -1 for views attached to this ViewContainerRef\n      // >= 0 for views attached to a different ViewContainerRef\n      if (prevIdx !== -1) {\n        this.detach(prevIdx);\n      } else {\n        const prevLContainer = lView[PARENT] as LContainer;\n        ngDevMode &&\n          assertEqual(\n            isLContainer(prevLContainer),\n            true,\n            'An attached view should have its PARENT point to a container.',\n          );\n\n        // We need to re-create a R3ViewContainerRef instance since those are not stored on\n        // LView (nor anywhere else).\n        const prevVCRef = new R3ViewContainerRef(\n          prevLContainer,\n          prevLContainer[T_HOST] as TDirectiveHostNode,\n          prevLContainer[PARENT],\n        );\n\n        prevVCRef.detach(prevVCRef.indexOf(viewRef));\n      }\n    }\n\n    // Logical operation of adding `LView` to `LContainer`\n    const adjustedIdx = this._adjustIndex(index);\n    const lContainer = this._lContainer;\n\n    addLViewToLContainer(lContainer, lView, adjustedIdx, addToDOM);\n\n    (viewRef as R3ViewRef<any>).attachToViewContainerRef();\n    addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);\n\n    return viewRef;\n  }\n\n  override move(viewRef: ViewRef, newIndex: number): ViewRef {\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot move a destroyed View in a ViewContainer!');\n    }\n    return this.insert(viewRef, newIndex);\n  }\n\n  override indexOf(viewRef: ViewRef): number {\n    const viewRefsArr = getViewRefs(this._lContainer);\n    return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;\n  }\n\n  override remove(index?: number): void {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const detachedView = detachView(this._lContainer, adjustedIdx);\n\n    if (detachedView) {\n      // Before destroying the view, remove it from the container's array of `ViewRef`s.\n      // This ensures the view container length is updated before calling\n      // `destroyLView`, which could recursively call view container methods that\n      // rely on an accurate container length.\n      // (e.g. a method on this view container being called by a child directive's OnDestroy\n      // lifecycle hook)\n      removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);\n      destroyLView(detachedView[TVIEW], detachedView);\n    }\n  }\n\n  override detach(index?: number): ViewRef | null {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const view = detachView(this._lContainer, adjustedIdx);\n\n    const wasDetached =\n      view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;\n    return wasDetached ? new R3ViewRef(view!) : null;\n  }\n\n  private _adjustIndex(index?: number, shift: number = 0) {\n    if (index == null) {\n      return this.length + shift;\n    }\n    if (ngDevMode) {\n      assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);\n      // +1 because it's legal to insert at the end.\n      assertLessThan(index, this.length + 1 + shift, 'index');\n    }\n    return index;\n  }\n};\n\nfunction getViewRefs(lContainer: LContainer): ViewRef[] | null {\n  return lContainer[VIEW_REFS] as ViewRef[];\n}\n\nfunction getOrCreateViewRefs(lContainer: LContainer): ViewRef[] {\n  return (lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = [])) as ViewRef[];\n}\n\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostLView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\nexport function createContainerRef(\n  hostTNode: TElementNode | TContainerNode | TElementContainerNode,\n  hostLView: LView,\n): ViewContainerRef {\n  ngDevMode && assertTNodeType(hostTNode, TNodeType.AnyContainer | TNodeType.AnyRNode);\n\n  let lContainer: LContainer;\n  const slotValue = hostLView[hostTNode.index];\n  if (isLContainer(slotValue)) {\n    // If the host is a container, we don't need to create a new LContainer\n    lContainer = slotValue;\n  } else {\n    // An LContainer anchor can not be `null`, but we set it here temporarily\n    // and update to the actual value later in this function (see\n    // `_locateOrCreateAnchorNode`).\n    lContainer = createLContainer(slotValue, hostLView, null!, hostTNode);\n    hostLView[hostTNode.index] = lContainer;\n    addToEndOfViewTree(hostLView, lContainer);\n  }\n  _locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue);\n\n  return new R3ViewContainerRef(lContainer, hostTNode, hostLView);\n}\n\n/**\n * Creates and inserts a comment node that acts as an anchor for a view container.\n *\n * If the host is a regular element, we have to insert a comment node manually which will\n * be used as an anchor when inserting elements. In this specific case we use low-level DOM\n * manipulation to insert it.\n */\nfunction insertAnchorNode(hostLView: LView, hostTNode: TNode): RComment {\n  const renderer = hostLView[RENDERER];\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  const commentNode = renderer.createComment(ngDevMode ? 'container' : '');\n\n  const hostNative = getNativeByTNode(hostTNode, hostLView)!;\n  const parentOfHostNative = renderer.parentNode(hostNative);\n  nativeInsertBefore(\n    renderer,\n    parentOfHostNative!,\n    commentNode,\n    renderer.nextSibling(hostNative),\n    false,\n  );\n  return commentNode;\n}\n\nlet _locateOrCreateAnchorNode = createAnchorNode;\nlet _populateDehydratedViewsInLContainer: typeof populateDehydratedViewsInLContainerImpl = () =>\n  false; // noop by default\n\n/**\n * Looks up dehydrated views that belong to a given LContainer and populates\n * this information into the `LContainer[DEHYDRATED_VIEWS]` slot. When running\n * in client-only mode, this function is a noop.\n *\n * @param lContainer LContainer that should be populated.\n * @param tNode Corresponding TNode.\n * @param hostLView LView that hosts LContainer.\n * @returns a boolean flag that indicates whether a populating operation\n *   was successful. The operation might be unsuccessful in case is has completed\n *   previously, we are rendering in client-only mode or this content is located\n *   in a skip hydration section.\n */\nexport function populateDehydratedViewsInLContainer(\n  lContainer: LContainer,\n  tNode: TNode,\n  hostLView: LView,\n): boolean {\n  return _populateDehydratedViewsInLContainer(lContainer, tNode, hostLView);\n}\n\n/**\n * Regular creation mode: an anchor is created and\n * assigned to the `lContainer[NATIVE]` slot.\n */\nfunction createAnchorNode(\n  lContainer: LContainer,\n  hostLView: LView,\n  hostTNode: TNode,\n  slotValue: any,\n) {\n  // We already have a native element (anchor) set, return.\n  if (lContainer[NATIVE]) return;\n\n  let commentNode: RComment;\n  // If the host is an element container, the native host element is guaranteed to be a\n  // comment and we can reuse that comment as anchor element for the new LContainer.\n  // The comment node in question is already part of the DOM structure so we don't need to append\n  // it again.\n  if (hostTNode.type & TNodeType.ElementContainer) {\n    commentNode = unwrapRNode(slotValue) as RComment;\n  } else {\n    commentNode = insertAnchorNode(hostLView, hostTNode);\n  }\n  lContainer[NATIVE] = commentNode;\n}\n\n/**\n * Hydration logic that looks up all dehydrated views in this container\n * and puts them into `lContainer[DEHYDRATED_VIEWS]` slot.\n *\n * @returns a boolean flag that indicates whether a populating operation\n *   was successful. The operation might be unsuccessful in case is has completed\n *   previously, we are rendering in client-only mode or this content is located\n *   in a skip hydration section.\n */\nfunction populateDehydratedViewsInLContainerImpl(\n  lContainer: LContainer,\n  tNode: TNode,\n  hostLView: LView,\n): boolean {\n  // We already have a native element (anchor) set and the process\n  // of finding dehydrated views happened (so the `lContainer[DEHYDRATED_VIEWS]`\n  // is not null), exit early.\n  if (lContainer[NATIVE] && lContainer[DEHYDRATED_VIEWS]) {\n    return true;\n  }\n\n  const hydrationInfo = hostLView[HYDRATION];\n  const noOffsetIndex = tNode.index - HEADER_OFFSET;\n  const isNodeCreationMode =\n    !hydrationInfo ||\n    isInSkipHydrationBlock(tNode) ||\n    isDisconnectedNode(hydrationInfo, noOffsetIndex);\n\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return false;\n  }\n\n  // Hydration mode, looking up an anchor node and dehydrated views in DOM.\n  const currentRNode: RNode | null = getSegmentHead(hydrationInfo, noOffsetIndex);\n\n  const serializedViews = hydrationInfo.data[CONTAINERS]?.[noOffsetIndex];\n  ngDevMode &&\n    assertDefined(\n      serializedViews,\n      'Unexpected state: no hydration info available for a given TNode, ' +\n        'which represents a view container.',\n    );\n\n  const [commentNode, dehydratedViews] = locateDehydratedViewsInContainer(\n    currentRNode!,\n    serializedViews!,\n  );\n\n  if (ngDevMode) {\n    validateMatchingNode(commentNode, Node.COMMENT_NODE, null, hostLView, tNode, true);\n    // Do not throw in case this node is already claimed (thus `false` as a second\n    // argument). If this container is created based on an `<ng-template>`, the comment\n    // node would be already claimed from the `template` instruction. If an element acts\n    // as an anchor (e.g. <div #vcRef>), a separate comment node would be created/located,\n    // so we need to claim it here.\n    markRNodeAsClaimedByHydration(commentNode, false);\n  }\n\n  lContainer[NATIVE] = commentNode as RComment;\n  lContainer[DEHYDRATED_VIEWS] = dehydratedViews;\n\n  return true;\n}\n\nfunction locateOrCreateAnchorNode(\n  lContainer: LContainer,\n  hostLView: LView,\n  hostTNode: TNode,\n  slotValue: any,\n): void {\n  if (!_populateDehydratedViewsInLContainer(lContainer, hostTNode, hostLView)) {\n    // Populating dehydrated views operation returned `false`, which indicates\n    // that the logic was running in client-only mode, this an anchor comment\n    // node should be created for this container.\n    createAnchorNode(lContainer, hostLView, hostTNode, slotValue);\n  }\n}\n\nexport function enableLocateOrCreateContainerRefImpl() {\n  _locateOrCreateAnchorNode = locateOrCreateAnchorNode;\n  _populateDehydratedViewsInLContainer = populateDehydratedViewsInLContainerImpl;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n// We are temporarily importing the existing viewEngine_from core so we can be sure we are\n// correctly implementing its interfaces for backwards compatibility.\n\nimport {ProviderToken} from '../../di/provider_token';\nimport {createElementRef, ElementRef as ViewEngine_ElementRef} from '../../linker/element_ref';\nimport {QueryList} from '../../linker/query_list';\nimport {createTemplateRef, TemplateRef as ViewEngine_TemplateRef} from '../../linker/template_ref';\nimport {createContainerRef, ViewContainerRef} from '../../linker/view_container_ref';\nimport {assertDefined, assertIndexInRange, assertNumber, throwError} from '../../util/assert';\nimport {stringify} from '../../util/stringify';\n\nimport {assertFirstCreatePass, assertLContainer} from '../assert';\nimport {getNodeInjectable, locateDirectiveOrProvider} from '../di';\nimport {CONTAINER_HEADER_OFFSET, LContainer, MOVED_VIEWS} from '../interfaces/container';\nimport {\n  TContainerNode,\n  TElementContainerNode,\n  TElementNode,\n  TNode,\n  TNodeType,\n} from '../interfaces/node';\nimport {LQueries, LQuery, QueryFlags, TQueries, TQuery, TQueryMetadata} from '../interfaces/query';\nimport {DECLARATION_LCONTAINER, LView, PARENT, QUERIES, TVIEW, TView} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {getCurrentTNode, getLView, getTView} from '../state';\nimport {storeCleanupWithContext} from '../util/view_utils';\n\nclass LQuery_<T> implements LQuery<T> {\n  matches: (T | null)[] | null = null;\n  constructor(public queryList: QueryList<T>) {}\n  clone(): LQuery<T> {\n    return new LQuery_(this.queryList);\n  }\n  setDirty(): void {\n    this.queryList.setDirty();\n  }\n}\n\nclass LQueries_ implements LQueries {\n  constructor(public queries: LQuery<any>[] = []) {}\n\n  createEmbeddedView(tView: TView): LQueries | null {\n    const tQueries = tView.queries;\n    if (tQueries !== null) {\n      const noOfInheritedQueries =\n        tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;\n      const viewLQueries: LQuery<any>[] = [];\n\n      // An embedded view has queries propagated from a declaration view at the beginning of the\n      // TQueries collection and up until a first content query declared in the embedded view. Only\n      // propagated LQueries are created at this point (LQuery corresponding to declared content\n      // queries will be instantiated from the content query instructions for each directive).\n      for (let i = 0; i < noOfInheritedQueries; i++) {\n        const tQuery = tQueries.getByIndex(i);\n        const parentLQuery = this.queries[tQuery.indexInDeclarationView];\n        viewLQueries.push(parentLQuery.clone());\n      }\n\n      return new LQueries_(viewLQueries);\n    }\n\n    return null;\n  }\n\n  insertView(tView: TView): void {\n    this.dirtyQueriesWithMatches(tView);\n  }\n\n  detachView(tView: TView): void {\n    this.dirtyQueriesWithMatches(tView);\n  }\n\n  finishViewCreation(tView: TView): void {\n    this.dirtyQueriesWithMatches(tView);\n  }\n\n  private dirtyQueriesWithMatches(tView: TView) {\n    for (let i = 0; i < this.queries.length; i++) {\n      if (getTQuery(tView, i).matches !== null) {\n        this.queries[i].setDirty();\n      }\n    }\n  }\n}\n\nexport class TQueryMetadata_ implements TQueryMetadata {\n  public predicate: ProviderToken<unknown> | string[];\n  constructor(\n    predicate: ProviderToken<unknown> | string[] | string,\n    public flags: QueryFlags,\n    public read: any = null,\n  ) {\n    // Compiler might not be able to pre-optimize and split multiple selectors.\n    if (typeof predicate === 'string') {\n      this.predicate = splitQueryMultiSelectors(predicate);\n    } else {\n      this.predicate = predicate;\n    }\n  }\n}\n\nclass TQueries_ implements TQueries {\n  constructor(private queries: TQuery[] = []) {}\n\n  elementStart(tView: TView, tNode: TNode): void {\n    ngDevMode &&\n      assertFirstCreatePass(\n        tView,\n        'Queries should collect results on the first template pass only',\n      );\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementStart(tView, tNode);\n    }\n  }\n  elementEnd(tNode: TNode): void {\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementEnd(tNode);\n    }\n  }\n  embeddedTView(tNode: TNode): TQueries | null {\n    let queriesForTemplateRef: TQuery[] | null = null;\n\n    for (let i = 0; i < this.length; i++) {\n      const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;\n      const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);\n\n      if (tqueryClone) {\n        tqueryClone.indexInDeclarationView = i;\n        if (queriesForTemplateRef !== null) {\n          queriesForTemplateRef.push(tqueryClone);\n        } else {\n          queriesForTemplateRef = [tqueryClone];\n        }\n      }\n    }\n\n    return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;\n  }\n\n  template(tView: TView, tNode: TNode): void {\n    ngDevMode &&\n      assertFirstCreatePass(\n        tView,\n        'Queries should collect results on the first template pass only',\n      );\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].template(tView, tNode);\n    }\n  }\n\n  getByIndex(index: number): TQuery {\n    ngDevMode && assertIndexInRange(this.queries, index);\n    return this.queries[index];\n  }\n\n  get length(): number {\n    return this.queries.length;\n  }\n\n  track(tquery: TQuery): void {\n    this.queries.push(tquery);\n  }\n}\n\nclass TQuery_ implements TQuery {\n  matches: number[] | null = null;\n  indexInDeclarationView = -1;\n  crossesNgTemplate = false;\n\n  /**\n   * A node index on which a query was declared (-1 for view queries and ones inherited from the\n   * declaration template). We use this index (alongside with _appliesToNextNode flag) to know\n   * when to apply content queries to elements in a template.\n   */\n  private _declarationNodeIndex: number;\n\n  /**\n   * A flag indicating if a given query still applies to nodes it is crossing. We use this flag\n   * (alongside with _declarationNodeIndex) to know when to stop applying content queries to\n   * elements in a template.\n   */\n  private _appliesToNextNode = true;\n\n  constructor(\n    public metadata: TQueryMetadata,\n    nodeIndex: number = -1,\n  ) {\n    this._declarationNodeIndex = nodeIndex;\n  }\n\n  elementStart(tView: TView, tNode: TNode): void {\n    if (this.isApplyingToNode(tNode)) {\n      this.matchTNode(tView, tNode);\n    }\n  }\n\n  elementEnd(tNode: TNode): void {\n    if (this._declarationNodeIndex === tNode.index) {\n      this._appliesToNextNode = false;\n    }\n  }\n\n  template(tView: TView, tNode: TNode): void {\n    this.elementStart(tView, tNode);\n  }\n\n  embeddedTView(tNode: TNode, childQueryIndex: number): TQuery | null {\n    if (this.isApplyingToNode(tNode)) {\n      this.crossesNgTemplate = true;\n      // A marker indicating a `<ng-template>` element (a placeholder for query results from\n      // embedded views created based on this `<ng-template>`).\n      this.addMatch(-tNode.index, childQueryIndex);\n      return new TQuery_(this.metadata);\n    }\n    return null;\n  }\n\n  private isApplyingToNode(tNode: TNode): boolean {\n    if (\n      this._appliesToNextNode &&\n      (this.metadata.flags & QueryFlags.descendants) !== QueryFlags.descendants\n    ) {\n      const declarationNodeIdx = this._declarationNodeIndex;\n      let parent = tNode.parent;\n      // Determine if a given TNode is a \"direct\" child of a node on which a content query was\n      // declared (only direct children of query's host node can match with the descendants: false\n      // option). There are 3 main use-case / conditions to consider here:\n      // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query\n      // host node;\n      // - <needs-target><ng-template [ngIf]=\"true\"><i #target></i></ng-template></needs-target>:\n      // here <i #target> parent node is null;\n      // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need\n      // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse\n      // up past the query's host node!).\n      while (\n        parent !== null &&\n        parent.type & TNodeType.ElementContainer &&\n        parent.index !== declarationNodeIdx\n      ) {\n        parent = parent.parent;\n      }\n      return declarationNodeIdx === (parent !== null ? parent.index : -1);\n    }\n    return this._appliesToNextNode;\n  }\n\n  private matchTNode(tView: TView, tNode: TNode): void {\n    const predicate = this.metadata.predicate;\n    if (Array.isArray(predicate)) {\n      for (let i = 0; i < predicate.length; i++) {\n        const name = predicate[i];\n        this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));\n        // Also try matching the name to a provider since strings can be used as DI tokens too.\n        this.matchTNodeWithReadOption(\n          tView,\n          tNode,\n          locateDirectiveOrProvider(tNode, tView, name, false, false),\n        );\n      }\n    } else {\n      if ((predicate as any) === ViewEngine_TemplateRef) {\n        if (tNode.type & TNodeType.Container) {\n          this.matchTNodeWithReadOption(tView, tNode, -1);\n        }\n      } else {\n        this.matchTNodeWithReadOption(\n          tView,\n          tNode,\n          locateDirectiveOrProvider(tNode, tView, predicate, false, false),\n        );\n      }\n    }\n  }\n\n  private matchTNodeWithReadOption(tView: TView, tNode: TNode, nodeMatchIdx: number | null): void {\n    if (nodeMatchIdx !== null) {\n      const read = this.metadata.read;\n      if (read !== null) {\n        if (\n          read === ViewEngine_ElementRef ||\n          read === ViewContainerRef ||\n          (read === ViewEngine_TemplateRef && tNode.type & TNodeType.Container)\n        ) {\n          this.addMatch(tNode.index, -2);\n        } else {\n          const directiveOrProviderIdx = locateDirectiveOrProvider(\n            tNode,\n            tView,\n            read,\n            false,\n            false,\n          );\n          if (directiveOrProviderIdx !== null) {\n            this.addMatch(tNode.index, directiveOrProviderIdx);\n          }\n        }\n      } else {\n        this.addMatch(tNode.index, nodeMatchIdx);\n      }\n    }\n  }\n\n  private addMatch(tNodeIdx: number, matchIdx: number) {\n    if (this.matches === null) {\n      this.matches = [tNodeIdx, matchIdx];\n    } else {\n      this.matches.push(tNodeIdx, matchIdx);\n    }\n  }\n}\n\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param tNode static data of a node to check\n * @param selector selector to match\n * @returns directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode: TNode, selector: string): number | null {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    for (let i = 0; i < localNames.length; i += 2) {\n      if (localNames[i] === selector) {\n        return localNames[i + 1] as number;\n      }\n    }\n  }\n  return null;\n}\n\nfunction createResultByTNodeType(tNode: TNode, currentView: LView): any {\n  if (tNode.type & (TNodeType.AnyRNode | TNodeType.ElementContainer)) {\n    return createElementRef(tNode, currentView);\n  } else if (tNode.type & TNodeType.Container) {\n    return createTemplateRef(tNode, currentView);\n  }\n  return null;\n}\n\nfunction createResultForNode(lView: LView, tNode: TNode, matchingIdx: number, read: any): any {\n  if (matchingIdx === -1) {\n    // if read token and / or strategy is not specified, detect it using appropriate tNode type\n    return createResultByTNodeType(tNode, lView);\n  } else if (matchingIdx === -2) {\n    // read a special token from a node injector\n    return createSpecialToken(lView, tNode, read);\n  } else {\n    // read a token\n    return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode as TElementNode);\n  }\n}\n\nfunction createSpecialToken(lView: LView, tNode: TNode, read: any): any {\n  if (read === ViewEngine_ElementRef) {\n    return createElementRef(tNode, lView);\n  } else if (read === ViewEngine_TemplateRef) {\n    return createTemplateRef(tNode, lView);\n  } else if (read === ViewContainerRef) {\n    ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode | TNodeType.AnyContainer);\n    return createContainerRef(\n      tNode as TElementNode | TContainerNode | TElementContainerNode,\n      lView,\n    );\n  } else {\n    ngDevMode &&\n      throwError(\n        `Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(\n          read,\n        )}.`,\n      );\n  }\n}\n\n/**\n * A helper function that creates query results for a given view. This function is meant to do the\n * processing once and only once for a given view instance (a set of results for a given view\n * doesn't change).\n */\nfunction materializeViewResults<T>(\n  tView: TView,\n  lView: LView,\n  tQuery: TQuery,\n  queryIndex: number,\n): T[] {\n  const lQuery = lView[QUERIES]!.queries![queryIndex];\n  if (lQuery.matches === null) {\n    const tViewData = tView.data;\n    const tQueryMatches = tQuery.matches;\n    const result: Array<T | null> = [];\n    for (let i = 0; tQueryMatches !== null && i < tQueryMatches.length; i += 2) {\n      const matchedNodeIdx = tQueryMatches[i];\n      if (matchedNodeIdx < 0) {\n        // we at the <ng-template> marker which might have results in views created based on this\n        // <ng-template> - those results will be in separate views though, so here we just leave\n        // null as a placeholder\n        result.push(null);\n      } else {\n        ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);\n        const tNode = tViewData[matchedNodeIdx] as TNode;\n        result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));\n      }\n    }\n    lQuery.matches = result;\n  }\n\n  return lQuery.matches;\n}\n\n/**\n * A helper function that collects (already materialized) query results from a tree of views,\n * starting with a provided LView.\n */\nfunction collectQueryResults<T>(tView: TView, lView: LView, queryIndex: number, result: T[]): T[] {\n  const tQuery = tView.queries!.getByIndex(queryIndex);\n  const tQueryMatches = tQuery.matches;\n  if (tQueryMatches !== null) {\n    const lViewResults = materializeViewResults<T>(tView, lView, tQuery, queryIndex);\n\n    for (let i = 0; i < tQueryMatches.length; i += 2) {\n      const tNodeIdx = tQueryMatches[i];\n      if (tNodeIdx > 0) {\n        result.push(lViewResults[i / 2] as T);\n      } else {\n        const childQueryIndex = tQueryMatches[i + 1];\n\n        const declarationLContainer = lView[-tNodeIdx] as LContainer;\n        ngDevMode && assertLContainer(declarationLContainer);\n\n        // collect matches for views inserted in this container\n        for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {\n          const embeddedLView = declarationLContainer[i];\n          if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n\n        // collect matches for views created from this declaration container and inserted into\n        // different containers\n        if (declarationLContainer[MOVED_VIEWS] !== null) {\n          const embeddedLViews = declarationLContainer[MOVED_VIEWS]!;\n          for (let i = 0; i < embeddedLViews.length; i++) {\n            const embeddedLView = embeddedLViews[i];\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\nexport function loadQueryInternal<T>(lView: LView, queryIndex: number): QueryList<T> {\n  ngDevMode &&\n    assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');\n  ngDevMode && assertIndexInRange(lView[QUERIES]!.queries, queryIndex);\n  return lView[QUERIES]!.queries[queryIndex].queryList;\n}\n\n/**\n * Creates a new instance of LQuery and returns its index in the collection of LQuery objects.\n *\n * @returns index in the collection of LQuery objects\n */\nfunction createLQuery<T>(tView: TView, lView: LView, flags: QueryFlags): number {\n  const queryList = new QueryList<T>(\n    (flags & QueryFlags.emitDistinctChangesOnly) === QueryFlags.emitDistinctChangesOnly,\n  );\n\n  storeCleanupWithContext(tView, lView, queryList, queryList.destroy);\n\n  const lQueries = (lView[QUERIES] ??= new LQueries_()).queries;\n  return lQueries.push(new LQuery_(queryList)) - 1;\n}\n\nexport function createViewQuery<T>(\n  predicate: ProviderToken<unknown> | string[] | string,\n  flags: QueryFlags,\n  read?: any,\n): number {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);\n    if ((flags & QueryFlags.isStatic) === QueryFlags.isStatic) {\n      tView.staticViewQueries = true;\n    }\n  }\n\n  return createLQuery<T>(tView, getLView(), flags);\n}\n\nexport function createContentQuery<T>(\n  directiveIndex: number,\n  predicate: ProviderToken<unknown> | string[] | string,\n  flags: QueryFlags,\n  read?: ProviderToken<T>,\n): number {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const tNode = getCurrentTNode()!;\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);\n    saveContentQueryAndDirectiveIndex(tView, directiveIndex);\n    if ((flags & QueryFlags.isStatic) === QueryFlags.isStatic) {\n      tView.staticContentQueries = true;\n    }\n  }\n\n  return createLQuery<T>(tView, getLView(), flags);\n}\n\n/** Splits multiple selectors in the locator. */\nfunction splitQueryMultiSelectors(locator: string): string[] {\n  return locator.split(',').map((s) => s.trim());\n}\n\nexport function createTQuery(tView: TView, metadata: TQueryMetadata, nodeIndex: number): void {\n  if (tView.queries === null) tView.queries = new TQueries_();\n  tView.queries.track(new TQuery_(metadata, nodeIndex));\n}\n\nexport function saveContentQueryAndDirectiveIndex(tView: TView, directiveIndex: number) {\n  const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n  const lastSavedDirectiveIndex = tViewContentQueries.length\n    ? tViewContentQueries[tViewContentQueries.length - 1]\n    : -1;\n  if (directiveIndex !== lastSavedDirectiveIndex) {\n    tViewContentQueries.push(tView.queries!.length - 1, directiveIndex);\n  }\n}\n\nexport function getTQuery(tView: TView, index: number): TQuery {\n  ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');\n  return tView.queries!.getByIndex(index);\n}\n\n/**\n * A helper function collecting results from all the views where a given query was active.\n * @param lView\n * @param queryIndex\n */\nexport function getQueryResults<V>(lView: LView, queryIndex: number): V[] {\n  const tView = lView[TVIEW];\n  const tQuery = getTQuery(tView, queryIndex);\n  return tQuery.crossesNgTemplate\n    ? collectQueryResults<V>(tView, lView, queryIndex, [])\n    : materializeViewResults<V>(tView, lView, tQuery, queryIndex);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ComputedNode, createComputed, SIGNAL} from '@angular/core/primitives/signals';\n\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {unwrapElementRef} from '../../linker/element_ref';\nimport {QueryList} from '../../linker/query_list';\nimport {EMPTY_ARRAY} from '../../util/empty';\n\nimport {FLAGS, LView, LViewFlags} from '../interfaces/view';\nimport {Signal} from '../reactivity/api';\nimport {signal, WritableSignal} from '../reactivity/signal';\nimport {getLView} from '../state';\nimport {getQueryResults, loadQueryInternal} from './query';\n\ninterface QuerySignalNode<T> extends ComputedNode<T | ReadonlyArray<T>> {\n  _lView?: LView;\n  _queryIndex?: number;\n  _queryList?: QueryList<T>;\n  _dirtyCounter: WritableSignal<number>;\n  /**\n   * Stores the last seen, flattened results for a query. This is to avoid marking the signal result\n   * computed as dirty when there was view manipulation that didn't impact final results.\n   */\n  _flatValue?: T | ReadonlyArray<T>;\n}\n\n/**\n * A signal factory function in charge of creating a new computed signal capturing query\n * results. This centralized creation function is used by all types of queries (child / children,\n * required / optional).\n *\n * @param firstOnly indicates if all or only the first result should be returned\n * @param required indicates if at least one result is required\n * @returns a read-only signal with query results\n */\nfunction createQuerySignalFn<V>(\n  firstOnly: boolean,\n  required: boolean,\n  opts?: {debugName?: string},\n) {\n  let node: QuerySignalNode<V>;\n  const signalFn = createComputed(() => {\n    // A dedicated signal that increments its value every time a query changes its dirty status. By\n    // using this signal we can implement a query as computed and avoid creation of a specialized\n    // reactive node type. Please note that a query gets marked dirty under the following\n    // circumstances:\n    // - a view (where a query is active) finished its first creation pass;\n    // - a new view is inserted / deleted and it impacts query results.\n    node._dirtyCounter();\n\n    const value = refreshSignalQuery<V>(node, firstOnly);\n\n    if (required && value === undefined) {\n      throw new RuntimeError(\n        RuntimeErrorCode.REQUIRED_QUERY_NO_VALUE,\n        ngDevMode && 'Child query result is required but no value is available.',\n      );\n    }\n\n    return value;\n  });\n  node = signalFn[SIGNAL] as QuerySignalNode<V>;\n  node._dirtyCounter = signal(0);\n  node._flatValue = undefined;\n\n  if (ngDevMode) {\n    signalFn.toString = () => `[Query Signal]`;\n    node.debugName = opts?.debugName;\n  }\n\n  return signalFn;\n}\n\nexport function createSingleResultOptionalQuerySignalFn<ReadT>(opts?: {\n  debugName?: string;\n}): Signal<ReadT | undefined> {\n  return createQuerySignalFn(/* firstOnly */ true, /* required */ false, opts) as Signal<\n    ReadT | undefined\n  >;\n}\n\nexport function createSingleResultRequiredQuerySignalFn<ReadT>(opts?: {\n  debugName?: string;\n}): Signal<ReadT> {\n  return createQuerySignalFn(/* firstOnly */ true, /* required */ true, opts) as Signal<ReadT>;\n}\n\nexport function createMultiResultQuerySignalFn<ReadT>(opts?: {\n  debugName?: string;\n}): Signal<ReadonlyArray<ReadT>> {\n  return createQuerySignalFn(/* firstOnly */ false, /* required */ false, opts) as Signal<\n    ReadonlyArray<ReadT>\n  >;\n}\n\nexport function bindQueryToSignal(target: Signal<unknown>, queryIndex: number): void {\n  const node = target[SIGNAL] as QuerySignalNode<unknown>;\n  node._lView = getLView();\n  node._queryIndex = queryIndex;\n  node._queryList = loadQueryInternal(node._lView, queryIndex);\n  node._queryList.onDirty(() => node._dirtyCounter.update((v) => v + 1));\n}\n\nfunction refreshSignalQuery<V>(node: QuerySignalNode<V>, firstOnly: boolean): V | ReadonlyArray<V> {\n  const lView = node._lView;\n  const queryIndex = node._queryIndex;\n\n  // There are 2 conditions under which we want to return \"empty\" results instead of the ones\n  // collected by a query:\n  //\n  // 1) a given query wasn't created yet (this is a period of time between the directive creation\n  // and execution of the query creation function) - in this case a query doesn't exist yet and we\n  // don't have any results to return.\n  //\n  // 2) we are in the process of constructing a view (the first\n  // creation pass didn't finish) and a query might have partial results, but we don't want to\n  // return those - instead we do delay results collection until all nodes had a chance of matching\n  // and we can present consistent, \"atomic\" (on a view level) results.\n  if (lView === undefined || queryIndex === undefined || lView[FLAGS] & LViewFlags.CreationMode) {\n    return (firstOnly ? undefined : EMPTY_ARRAY) as V;\n  }\n\n  const queryList = loadQueryInternal<V>(lView, queryIndex);\n  const results = getQueryResults<V>(lView, queryIndex);\n\n  queryList.reset(results, unwrapElementRef);\n\n  if (firstOnly) {\n    return queryList.first;\n  } else {\n    // TODO: remove access to the private _changesDetected field by abstracting / removing usage of\n    // QueryList in the signal-based queries (perf follow-up)\n    const resultChanged = (queryList as any as {_changesDetected: boolean})._changesDetected;\n    if (resultChanged || node._flatValue === undefined) {\n      return (node._flatValue = queryList.toArray());\n    }\n    return node._flatValue;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertInInjectionContext} from '../di';\nimport {ProviderToken} from '../di/provider_token';\nimport {\n  createMultiResultQuerySignalFn,\n  createSingleResultOptionalQuerySignalFn,\n  createSingleResultRequiredQuerySignalFn,\n} from '../render3/queries/query_reactive';\nimport {Signal} from '../render3/reactivity/api';\n\nfunction viewChildFn<LocatorT, ReadT>(\n  locator: ProviderToken<LocatorT> | string,\n  opts?: {read?: ProviderToken<ReadT>; debugName?: string},\n): Signal<ReadT | undefined> {\n  ngDevMode && assertInInjectionContext(viewChild);\n  return createSingleResultOptionalQuerySignalFn<ReadT>(opts);\n}\n\nfunction viewChildRequiredFn<LocatorT, ReadT>(\n  locator: ProviderToken<LocatorT> | string,\n  opts?: {read?: ProviderToken<ReadT>; debugName?: string},\n): Signal<ReadT> {\n  ngDevMode && assertInInjectionContext(viewChild);\n  return createSingleResultRequiredQuerySignalFn<ReadT>(opts);\n}\n\n/**\n * Type of the `viewChild` function. The viewChild function creates a singular view query.\n *\n * It is a special function that also provides access to required query results via the `.required`\n * property.\n *\n * @publicAPI\n * @docsPrivate Ignored because `viewChild` is the canonical API entry.\n */\nexport interface ViewChildFunction {\n  /**\n   * Initializes a view child query. Consider using `viewChild.required` for queries that should\n   * always match.\n   *\n   * @publicAPI\n   */\n\n  <LocatorT, ReadT>(\n    locator: ProviderToken<LocatorT> | string,\n    opts: {\n      read: ProviderToken<ReadT>;\n      debugName?: string;\n    },\n  ): Signal<ReadT | undefined>;\n\n  <LocatorT>(\n    locator: ProviderToken<LocatorT> | string,\n    opts?: {\n      debugName?: string;\n    },\n  ): Signal<LocatorT | undefined>;\n\n  /**\n   * Initializes a view child query that is expected to always match an element.\n   *\n   * @publicAPI\n   */\n  required: {\n    <LocatorT>(\n      locator: ProviderToken<LocatorT> | string,\n      opts?: {\n        debugName?: string;\n      },\n    ): Signal<LocatorT>;\n\n    <LocatorT, ReadT>(\n      locator: ProviderToken<LocatorT> | string,\n      opts: {\n        read: ProviderToken<ReadT>;\n        debugName?: string;\n      },\n    ): Signal<ReadT>;\n  };\n}\n\n/**\n * Initializes a view child query.\n *\n * Consider using `viewChild.required` for queries that should always match.\n *\n * @usageNotes\n * Create a child query in your component by declaring a\n * class field and initializing it with the `viewChild()` function.\n *\n * ```angular-ts\n * @Component({template: '<div #el></div><my-component #cmp />'})\n * export class TestComponent {\n *   divEl = viewChild<ElementRef>('el');                   // Signal<ElementRef|undefined>\n *   divElRequired = viewChild.required<ElementRef>('el');  // Signal<ElementRef>\n *   cmp = viewChild(MyComponent);                          // Signal<MyComponent|undefined>\n *   cmpRequired = viewChild.required(MyComponent);         // Signal<MyComponent>\n * }\n * ```\n *\n * @publicAPI\n * @initializerApiFunction\n */\nexport const viewChild: ViewChildFunction = (() => {\n  // Note: This may be considered a side-effect, but nothing will depend on\n  // this assignment, unless this `viewChild` constant export is accessed. It's a\n  // self-contained side effect that is local to the user facing `viewChild` export.\n  (viewChildFn as any).required = viewChildRequiredFn;\n  return viewChildFn as typeof viewChildFn & {required: typeof viewChildRequiredFn};\n})();\n\nexport function viewChildren<LocatorT>(\n  locator: ProviderToken<LocatorT> | string,\n  opts?: {debugName?: string},\n): Signal<ReadonlyArray<LocatorT>>;\nexport function viewChildren<LocatorT, ReadT>(\n  locator: ProviderToken<LocatorT> | string,\n  opts: {\n    read: ProviderToken<ReadT>;\n    debugName?: string;\n  },\n): Signal<ReadonlyArray<ReadT>>;\n\n/**\n * Initializes a view children query.\n *\n * Query results are represented as a signal of a read-only collection containing all matched\n * elements.\n *\n * @usageNotes\n * Create a children query in your component by declaring a\n * class field and initializing it with the `viewChildren()` function.\n *\n * ```ts\n * @Component({...})\n * export class TestComponent {\n *   divEls = viewChildren<ElementRef>('el');   // Signal<ReadonlyArray<ElementRef>>\n * }\n * ```\n *\n * @initializerApiFunction\n * @publicAPI\n */\nexport function viewChildren<LocatorT, ReadT>(\n  locator: ProviderToken<LocatorT> | string,\n  opts?: {\n    read?: ProviderToken<ReadT>;\n    debugName?: string;\n  },\n): Signal<ReadonlyArray<ReadT>> {\n  ngDevMode && assertInInjectionContext(viewChildren);\n  return createMultiResultQuerySignalFn<ReadT>(opts);\n}\n\nexport function contentChildFn<LocatorT, ReadT>(\n  locator: ProviderToken<LocatorT> | string,\n  opts?: {\n    descendants?: boolean;\n    read?: ProviderToken<ReadT>;\n    debugName?: string;\n  },\n): Signal<ReadT | undefined> {\n  ngDevMode && assertInInjectionContext(contentChild);\n  return createSingleResultOptionalQuerySignalFn<ReadT>(opts);\n}\n\nfunction contentChildRequiredFn<LocatorT, ReadT>(\n  locator: ProviderToken<LocatorT> | string,\n  opts?: {\n    descendants?: boolean;\n    read?: ProviderToken<ReadT>;\n    debugName?: string;\n  },\n): Signal<ReadT> {\n  ngDevMode && assertInInjectionContext(contentChildren);\n  return createSingleResultRequiredQuerySignalFn<ReadT>(opts);\n}\n\n/**\n * Type of the `contentChild` function.\n *\n * The contentChild function creates a singular content query. It is a special function that also\n * provides access to required query results via the `.required` property.\n *\n * @publicAPI\n * @docsPrivate Ignored because `contentChild` is the canonical API entry.\n */\nexport interface ContentChildFunction {\n  /**\n   * Initializes a content child query.\n   *\n   * Consider using `contentChild.required` for queries that should always match.\n   * @publicAPI\n   */\n  <LocatorT>(\n    locator: ProviderToken<LocatorT> | string,\n    opts?: {\n      descendants?: boolean;\n      read?: undefined;\n      debugName?: string;\n    },\n  ): Signal<LocatorT | undefined>;\n\n  <LocatorT, ReadT>(\n    locator: ProviderToken<LocatorT> | string,\n    opts: {\n      descendants?: boolean;\n      read: ProviderToken<ReadT>;\n      debugName?: string;\n    },\n  ): Signal<ReadT | undefined>;\n\n  /**\n   * Initializes a content child query that is always expected to match.\n   */\n  required: {\n    <LocatorT>(\n      locator: ProviderToken<LocatorT> | string,\n      opts?: {\n        descendants?: boolean;\n        read?: undefined;\n        debugName?: string;\n      },\n    ): Signal<LocatorT>;\n\n    <LocatorT, ReadT>(\n      locator: ProviderToken<LocatorT> | string,\n      opts: {\n        descendants?: boolean;\n        read: ProviderToken<ReadT>;\n        debugName?: string;\n      },\n    ): Signal<ReadT>;\n  };\n}\n\n/**\n * Initializes a content child query. Consider using `contentChild.required` for queries that should\n * always match.\n *\n * @usageNotes\n * Create a child query in your component by declaring a\n * class field and initializing it with the `contentChild()` function.\n *\n * ```ts\n * @Component({...})\n * export class TestComponent {\n *   headerEl = contentChild<ElementRef>('h');                    // Signal<ElementRef|undefined>\n *   headerElElRequired = contentChild.required<ElementRef>('h'); // Signal<ElementRef>\n *   header = contentChild(MyHeader);                             // Signal<MyHeader|undefined>\n *   headerRequired = contentChild.required(MyHeader);            // Signal<MyHeader>\n * }\n * ```\n *\n * @initializerApiFunction\n * @publicAPI\n */\nexport const contentChild: ContentChildFunction = (() => {\n  // Note: This may be considered a side-effect, but nothing will depend on\n  // this assignment, unless this `viewChild` constant export is accessed. It's a\n  // self-contained side effect that is local to the user facing `viewChild` export.\n  (contentChildFn as any).required = contentChildRequiredFn;\n  return contentChildFn as typeof contentChildFn & {required: typeof contentChildRequiredFn};\n})();\n\nexport function contentChildren<LocatorT>(\n  locator: ProviderToken<LocatorT> | string,\n  opts?: {\n    descendants?: boolean;\n    read?: undefined;\n    debugName?: string;\n  },\n): Signal<ReadonlyArray<LocatorT>>;\nexport function contentChildren<LocatorT, ReadT>(\n  locator: ProviderToken<LocatorT> | string,\n  opts: {\n    descendants?: boolean;\n    read: ProviderToken<ReadT>;\n    debugName?: string;\n  },\n): Signal<ReadonlyArray<ReadT>>;\n\n/**\n * Initializes a content children query.\n *\n * Query results are represented as a signal of a read-only collection containing all matched\n * elements.\n *\n * @usageNotes\n * Create a children query in your component by declaring a\n * class field and initializing it with the `contentChildren()` function.\n *\n * ```ts\n * @Component({...})\n * export class TestComponent {\n *   headerEl = contentChildren<ElementRef>('h');   // Signal<ReadonlyArray<ElementRef>>\n * }\n * ```\n *\n * @initializerApiFunction\n * @publicAPI\n */\nexport function contentChildren<LocatorT, ReadT>(\n  locator: ProviderToken<LocatorT> | string,\n  opts?: {\n    descendants?: boolean;\n    read?: ProviderToken<ReadT>;\n    debugName?: string;\n  },\n): Signal<ReadonlyArray<ReadT>> {\n  return createMultiResultQuerySignalFn<ReadT>(opts);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector} from '../di/injector';\nimport {EnvironmentInjector, R3Injector} from '../di/r3_injector';\nimport {Type} from '../interface/type';\n\nimport {ComponentFactoryResolver} from './component_factory_resolver';\n\n/**\n * Represents an instance of an `NgModule` created by an `NgModuleFactory`.\n * Provides access to the `NgModule` instance and related objects.\n *\n * @publicApi\n */\nexport abstract class NgModuleRef<T> {\n  /**\n   * The injector that contains all of the providers of the `NgModule`.\n   */\n  abstract get injector(): EnvironmentInjector;\n\n  /**\n   * The resolver that can retrieve component factories in a context of this module.\n   *\n   * Note: since v13, dynamic component creation via\n   * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)\n   * does **not** require resolving component factory: component class can be used directly.\n   *\n   * @deprecated Angular no longer requires Component factories. Please use other APIs where\n   *     Component class can be used directly.\n   */\n  abstract get componentFactoryResolver(): ComponentFactoryResolver;\n\n  /**\n   * The `NgModule` instance.\n   */\n  abstract get instance(): T;\n\n  /**\n   * Destroys the module instance and all of the data structures associated with it.\n   */\n  abstract destroy(): void;\n\n  /**\n   * Registers a callback to be executed when the module is destroyed.\n   */\n  abstract onDestroy(callback: () => void): void;\n}\n\nexport interface InternalNgModuleRef<T> extends NgModuleRef<T> {\n  // Note: we are using the prefix _ as NgModuleData is an NgModuleRef and therefore directly\n  // exposed to the user.\n  _bootstrapComponents: Type<any>[];\n  resolveInjectorInitializers(): void;\n}\n\n/**\n * @publicApi\n *\n * @deprecated\n * This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy\n * JIT mode. Angular provides APIs that accept NgModule classes directly (such as\n * [PlatformRef.bootstrapModule](api/core/PlatformRef#bootstrapModule) and\n * [createNgModule](api/core/createNgModule)), consider switching to those APIs instead of\n * using factory-based ones.\n */\nexport abstract class NgModuleFactory<T> {\n  abstract get moduleType(): Type<T>;\n  abstract create(parentInjector: Injector | null): NgModuleRef<T>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {createInjectorWithoutInjectorInstances} from '../di/create_injector';\nimport {Injector} from '../di/injector';\nimport {EnvironmentProviders, Provider, StaticProvider} from '../di/interface/provider';\nimport {EnvironmentInjector, getNullInjector, R3Injector} from '../di/r3_injector';\nimport {Type} from '../interface/type';\nimport {ComponentFactoryResolver as viewEngine_ComponentFactoryResolver} from '../linker/component_factory_resolver';\nimport {\n  InternalNgModuleRef,\n  NgModuleFactory as viewEngine_NgModuleFactory,\n  NgModuleRef as viewEngine_NgModuleRef,\n} from '../linker/ng_module_factory';\nimport {assertDefined} from '../util/assert';\nimport {stringify} from '../util/stringify';\n\nimport {ComponentFactoryResolver} from './component_ref';\nimport {getNgModuleDef} from './def_getters';\nimport {maybeUnwrapFn} from './util/misc_utils';\n\n/**\n * Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.\n *\n * @param ngModule NgModule class.\n * @param parentInjector Optional injector instance to use as a parent for the module injector. If\n *     not provided, `NullInjector` will be used instead.\n * @returns NgModuleRef that represents an NgModule instance.\n *\n * @publicApi\n */\nexport function createNgModule<T>(\n  ngModule: Type<T>,\n  parentInjector?: Injector,\n): viewEngine_NgModuleRef<T> {\n  return new NgModuleRef<T>(ngModule, parentInjector ?? null, []);\n}\n\n/**\n * The `createNgModule` function alias for backwards-compatibility.\n * Please avoid using it directly and use `createNgModule` instead.\n *\n * @deprecated Use `createNgModule` instead.\n */\nexport const createNgModuleRef = createNgModule;\nexport class NgModuleRef<T> extends viewEngine_NgModuleRef<T> implements InternalNgModuleRef<T> {\n  // tslint:disable-next-line:require-internal-with-underscore\n  _bootstrapComponents: Type<any>[] = [];\n  private readonly _r3Injector: R3Injector;\n  override instance!: T;\n  destroyCbs: (() => void)[] | null = [];\n\n  // When bootstrapping a module we have a dependency graph that looks like this:\n  // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the\n  // module being resolved tries to inject the ComponentFactoryResolver, it'll create a\n  // circular dependency which will result in a runtime error, because the injector doesn't\n  // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves\n  // and providing it, rather than letting the injector resolve it.\n  override readonly componentFactoryResolver: ComponentFactoryResolver =\n    new ComponentFactoryResolver(this);\n\n  constructor(\n    private readonly ngModuleType: Type<T>,\n    public _parent: Injector | null,\n    additionalProviders: StaticProvider[],\n    runInjectorInitializers = true,\n  ) {\n    super();\n    const ngModuleDef = getNgModuleDef(ngModuleType);\n    ngDevMode &&\n      assertDefined(\n        ngModuleDef,\n        `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`,\n      );\n\n    this._bootstrapComponents = maybeUnwrapFn(ngModuleDef!.bootstrap);\n    this._r3Injector = createInjectorWithoutInjectorInstances(\n      ngModuleType,\n      _parent,\n      [\n        {provide: viewEngine_NgModuleRef, useValue: this},\n        {\n          provide: viewEngine_ComponentFactoryResolver,\n          useValue: this.componentFactoryResolver,\n        },\n        ...additionalProviders,\n      ],\n      stringify(ngModuleType),\n      new Set(['environment']),\n    ) as R3Injector;\n\n    // We need to resolve the injector types separately from the injector creation, because\n    // the module might be trying to use this ref in its constructor for DI which will cause a\n    // circular error that will eventually error out, because the injector isn't created yet.\n    if (runInjectorInitializers) {\n      this.resolveInjectorInitializers();\n    }\n  }\n\n  resolveInjectorInitializers() {\n    this._r3Injector.resolveInjectorInitializers();\n    this.instance = this._r3Injector.get(this.ngModuleType);\n  }\n\n  override get injector(): EnvironmentInjector {\n    return this._r3Injector;\n  }\n\n  override destroy(): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    const injector = this._r3Injector;\n    !injector.destroyed && injector.destroy();\n    this.destroyCbs!.forEach((fn) => fn());\n    this.destroyCbs = null;\n  }\n  override onDestroy(callback: () => void): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs!.push(callback);\n  }\n}\n\nexport class NgModuleFactory<T> extends viewEngine_NgModuleFactory<T> {\n  constructor(public moduleType: Type<T>) {\n    super();\n  }\n\n  override create(parentInjector: Injector | null): viewEngine_NgModuleRef<T> {\n    return new NgModuleRef(this.moduleType, parentInjector, []);\n  }\n}\n\nexport function createNgModuleRefWithProviders<T>(\n  moduleType: Type<T>,\n  parentInjector: Injector | null,\n  additionalProviders: StaticProvider[],\n): InternalNgModuleRef<T> {\n  return new NgModuleRef(moduleType, parentInjector, additionalProviders, false);\n}\n\nexport class EnvironmentNgModuleRefAdapter extends viewEngine_NgModuleRef<null> {\n  override readonly injector: R3Injector;\n  override readonly componentFactoryResolver: ComponentFactoryResolver =\n    new ComponentFactoryResolver(this);\n  override readonly instance = null;\n\n  constructor(config: {\n    providers: Array<Provider | EnvironmentProviders>;\n    parent: EnvironmentInjector | null;\n    debugName: string | null;\n    runEnvironmentInitializers: boolean;\n  }) {\n    super();\n    const injector = new R3Injector(\n      [\n        ...config.providers,\n        {provide: viewEngine_NgModuleRef, useValue: this},\n        {provide: viewEngine_ComponentFactoryResolver, useValue: this.componentFactoryResolver},\n      ],\n      config.parent || getNullInjector(),\n      config.debugName,\n      new Set(['environment']),\n    );\n    this.injector = injector;\n    if (config.runEnvironmentInitializers) {\n      injector.resolveInjectorInitializers();\n    }\n  }\n\n  override destroy(): void {\n    this.injector.destroy();\n  }\n\n  override onDestroy(callback: () => void): void {\n    this.injector.onDestroy(callback);\n  }\n}\n\n/**\n * Create a new environment injector.\n *\n * @param providers An array of providers.\n * @param parent A parent environment injector.\n * @param debugName An optional name for this injector instance, which will be used in error\n *     messages.\n *\n * @publicApi\n */\nexport function createEnvironmentInjector(\n  providers: Array<Provider | EnvironmentProviders>,\n  parent: EnvironmentInjector,\n  debugName: string | null = null,\n): EnvironmentInjector {\n  const adapter = new EnvironmentNgModuleRefAdapter({\n    providers,\n    parent,\n    debugName,\n    runEnvironmentInitializers: true,\n  });\n  return adapter.injector;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {ɵɵinject as inject} from '../di/injector_compatibility';\nimport {ɵɵdefineInjectable as defineInjectable} from '../di/interface/defs';\nimport {internalImportProvidersFrom} from '../di/provider_collection';\nimport {EnvironmentInjector} from '../di/r3_injector';\nimport {OnDestroy} from '../interface/lifecycle_hooks';\nimport {ComponentDef} from './interfaces/definition';\nimport {createEnvironmentInjector} from './ng_module_ref';\n\n/**\n * A service used by the framework to create instances of standalone injectors. Those injectors are\n * created on demand in case of dynamic component instantiation and contain ambient providers\n * collected from the imports graph rooted at a given standalone component.\n */\nexport class StandaloneService implements OnDestroy {\n  cachedInjectors = new Map<ComponentDef<unknown>, EnvironmentInjector | null>();\n\n  constructor(private _injector: EnvironmentInjector) {}\n\n  getOrCreateStandaloneInjector(componentDef: ComponentDef<unknown>): EnvironmentInjector | null {\n    if (!componentDef.standalone) {\n      return null;\n    }\n\n    if (!this.cachedInjectors.has(componentDef)) {\n      const providers = internalImportProvidersFrom(false, componentDef.type);\n      const standaloneInjector =\n        providers.length > 0\n          ? createEnvironmentInjector(\n              [providers],\n              this._injector,\n              `Standalone[${componentDef.type.name}]`,\n            )\n          : null;\n      this.cachedInjectors.set(componentDef, standaloneInjector);\n    }\n\n    return this.cachedInjectors.get(componentDef)!;\n  }\n\n  ngOnDestroy() {\n    try {\n      for (const injector of this.cachedInjectors.values()) {\n        if (injector !== null) {\n          injector.destroy();\n        }\n      }\n    } finally {\n      this.cachedInjectors.clear();\n    }\n  }\n\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ defineInjectable({\n    token: StandaloneService,\n    providedIn: 'environment',\n    factory: () => new StandaloneService(inject(EnvironmentInjector)),\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChangeDetectionStrategy} from '../change_detection/constants';\nimport {EnvironmentInjector} from '../di/r3_injector';\nimport {formatRuntimeError, RuntimeErrorCode} from '../errors';\nimport {Type, Writable} from '../interface/type';\nimport {NgModuleDef} from '../metadata/ng_module_def';\nimport {SchemaMetadata} from '../metadata/schema';\nimport {ViewEncapsulation} from '../metadata/view';\nimport {assertNotEqual} from '../util/assert';\nimport {noSideEffects} from '../util/closure';\nimport {EMPTY_ARRAY, EMPTY_OBJ} from '../util/empty';\nimport {initNgDevMode} from '../util/ng_dev_mode';\nimport {performanceMarkFeature} from '../util/performance';\nimport {getComponentDef, getDirectiveDef, getPipeDef} from './def_getters';\n\nimport type {\n  ComponentDef,\n  ComponentDefFeature,\n  ComponentTemplate,\n  ContentQueriesFunction,\n  DependencyTypeList,\n  DirectiveDef,\n  DirectiveDefFeature,\n  DirectiveDefListOrFactory,\n  HostBindingsFunction,\n  InputTransformFunction,\n  PipeDef,\n  PipeDefListOrFactory,\n  TypeOrFactory,\n  ViewQueriesFunction,\n} from './interfaces/definition';\nimport {InputFlags} from './interfaces/input_flags';\nimport type {TAttributes, TConstantsOrFactory} from './interfaces/node';\nimport {CssSelectorList} from './interfaces/projection';\nimport {stringifyCSSSelectorList} from './node_selector_matcher';\nimport {StandaloneService} from './standalone_service';\n\n/**\n * Map of inputs for a given directive/component.\n *\n * Given:\n * ```ts\n * class MyComponent {\n *   @Input()\n *   publicInput1: string;\n *\n *   @Input('publicInput2')\n *   declaredInput2: string;\n *\n *   @Input({transform: (value: boolean) => value ? 1 : 0})\n *   transformedInput3: number;\n *\n *   signalInput = input(3);\n * }\n * ```\n *\n * is described as:\n * ```ts\n * {\n *   publicInput1: 'publicInput1',\n *   declaredInput2: [InputFlags.None, 'declaredInput2', 'publicInput2'],\n *   transformedInput3: [\n *     InputFlags.None,\n *     'transformedInput3',\n *     'transformedInput3',\n *     (value: boolean) => value ? 1 : 0\n *   ],\n *   signalInput: [InputFlags.SignalBased, \"signalInput\"],\n * }\n * ```\n *\n * Which the minifier may translate to:\n * ```ts\n * {\n *   minifiedPublicInput1: 'publicInput1',\n *   minifiedDeclaredInput2: [InputFlags.None, 'publicInput2', 'declaredInput2'],\n *   minifiedTransformedInput3: [\n *     InputFlags.None,\n *     'transformedInput3',\n *     'transformedInput3',\n *     (value: boolean) => value ? 1 : 0\n *   ],\n *   minifiedSignalInput: [InputFlags.SignalBased, \"signalInput\"],\n * }\n * ```\n *\n * This allows the render to re-construct the minified, public, and declared names\n * of properties.\n *\n * NOTE:\n *  - Because declared and public name are usually same we only generate the array\n *    `['declared', 'public']` format when they differ, or there is a transform.\n *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n *    inconsistent behavior in that it uses declared names rather than minified or public.\n */\ntype DirectiveInputs<T> = {\n  [P in keyof T]?:  // Basic case. Mapping minified name to public name.\n    | string\n    // Complex input when there are flags, or differing public name and declared name, or there\n    // is a transform. Such inputs are not as common, so the array form is only generated then.\n    | [\n        flags: InputFlags,\n        publicName: string,\n        declaredName?: string,\n        transform?: InputTransformFunction,\n      ];\n};\n\ninterface DirectiveDefinition<T> {\n  /**\n   * Directive type, needed to configure the injector.\n   */\n  type: Type<T>;\n\n  /** The selectors that will be used to match nodes to this directive. */\n  selectors?: CssSelectorList;\n\n  /**\n   * A map of input names.\n   */\n  inputs?: DirectiveInputs<T>;\n\n  /**\n   * A map of output names.\n   *\n   * The format is in: `{[actualPropertyName: string]:string}`.\n   *\n   * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n   *\n   * This allows the render to re-construct the minified and non-minified names\n   * of properties.\n   */\n  outputs?: {[P in keyof T]?: string};\n\n  /**\n   * A list of optional features to apply.\n   *\n   * See: {@link NgOnChangesFeature}, {@link ProvidersFeature}, {@link InheritDefinitionFeature}\n   */\n  features?: DirectiveDefFeature[];\n\n  /**\n   * Function executed by the parent template to allow child directive to apply host bindings.\n   */\n  hostBindings?: HostBindingsFunction<T>;\n\n  /**\n   * The number of bindings in this directive `hostBindings` (including pure fn bindings).\n   *\n   * Used to calculate the length of the component's LView array, so we\n   * can pre-fill the array and set the host binding start index.\n   */\n  hostVars?: number;\n\n  /**\n   * Assign static attribute values to a host element.\n   *\n   * This property will assign static attribute values as well as class and style\n   * values to a host element. Since attribute values can consist of different types of values,\n   * the `hostAttrs` array must include the values in the following format:\n   *\n   * attrs = [\n   *   // static attributes (like `title`, `name`, `id`...)\n   *   attr1, value1, attr2, value,\n   *\n   *   // a single namespace value (like `x:id`)\n   *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n   *\n   *   // another single namespace value (like `x:name`)\n   *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n   *\n   *   // a series of CSS classes that will be applied to the element (no spaces)\n   *   CLASSES_MARKER, class1, class2, class3,\n   *\n   *   // a series of CSS styles (property + value) that will be applied to the element\n   *   STYLES_MARKER, prop1, value1, prop2, value2\n   * ]\n   *\n   * All non-class and non-style attributes must be defined at the start of the list\n   * first before all class and style values are set. When there is a change in value\n   * type (like when classes and styles are introduced) a marker must be used to separate\n   * the entries. The marker values themselves are set via entries found in the\n   * [AttributeMarker] enum.\n   */\n  hostAttrs?: TAttributes;\n\n  /**\n   * Function to create instances of content queries associated with a given directive.\n   */\n  contentQueries?: ContentQueriesFunction<T>;\n\n  /**\n   * Additional set of instructions specific to view query processing. This could be seen as a\n   * set of instructions to be inserted into the template function.\n   */\n  viewQuery?: ViewQueriesFunction<T> | null;\n\n  /**\n   * Defines the name that can be used in the template to assign this directive to a variable.\n   *\n   * See: {@link Directive.exportAs}\n   */\n  exportAs?: string[];\n\n  /**\n   * Whether this directive/component is standalone.\n   */\n  standalone?: boolean;\n\n  /**\n   * Whether this directive/component is signal-based.\n   */\n  signals?: boolean;\n}\n\ninterface ComponentDefinition<T> extends Omit<DirectiveDefinition<T>, 'features'> {\n  /**\n   * The number of nodes, local refs, and pipes in this component template.\n   *\n   * Used to calculate the length of this component's LView array, so we\n   * can pre-fill the array and set the binding start index.\n   */\n  decls: number;\n\n  /**\n   * The number of bindings in this component template (including pure fn bindings).\n   *\n   * Used to calculate the length of this component's LView array, so we\n   * can pre-fill the array and set the host binding start index.\n   */\n  vars: number;\n\n  /**\n   * Template function use for rendering DOM.\n   *\n   * This function has following structure.\n   *\n   * ```ts\n   * function Template<T>(ctx:T, creationMode: boolean) {\n   *   if (creationMode) {\n   *     // Contains creation mode instructions.\n   *   }\n   *   // Contains binding update instructions\n   * }\n   * ```\n   *\n   * Common instructions are:\n   * Creation mode instructions:\n   *  - `elementStart`, `elementEnd`\n   *  - `text`\n   *  - `container`\n   *  - `listener`\n   *\n   * Binding update instructions:\n   * - `bind`\n   * - `elementAttribute`\n   * - `elementProperty`\n   * - `elementClass`\n   * - `elementStyle`\n   *\n   */\n  template: ComponentTemplate<T>;\n\n  /**\n   * Constants for the nodes in the component's view.\n   * Includes attribute arrays, local definition arrays etc.\n   */\n  consts?: TConstantsOrFactory;\n\n  /**\n   * An array of `ngContent[selector]` values that were found in the template.\n   */\n  ngContentSelectors?: string[];\n  /**\n   * A list of optional features to apply.\n   *\n   * See: {@link NgOnChangesFeature}, {@link ProvidersFeature}\n   */\n  features?: ComponentDefFeature[];\n\n  /**\n   * Defines template and style encapsulation options available for Component's {@link /api/core/Component Component}.\n   */\n  encapsulation?: ViewEncapsulation;\n\n  /**\n   * Defines arbitrary developer-defined data to be stored on a renderer instance.\n   * This is useful for renderers that delegate to other renderers.\n   *\n   * see: animation\n   */\n  data?: {[kind: string]: any};\n\n  /**\n   * A set of styles that the component needs to be present for component to render correctly.\n   */\n  styles?: string[];\n\n  /**\n   * The strategy that the default change detector uses to detect changes.\n   * When set, takes effect the next time change detection is triggered.\n   */\n  changeDetection?: ChangeDetectionStrategy;\n\n  /**\n   * Registry of directives, components, and pipes that may be found in this component's view.\n   *\n   * This property is either an array of types or a function that returns the array of types. This\n   * function may be necessary to support forward declarations.\n   */\n  dependencies?: TypeOrFactory<DependencyTypeList>;\n\n  /**\n   * The set of schemas that declare elements to be allowed in the component's template.\n   */\n  schemas?: SchemaMetadata[] | null;\n}\n\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```ts\n * class MyComponent {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵcmp = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @codeGenApi\n */\nexport function ɵɵdefineComponent<T>(\n  componentDefinition: ComponentDefinition<T>,\n): ComponentDef<any> {\n  return noSideEffects(() => {\n    // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.\n    // See the `initNgDevMode` docstring for more information.\n    (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n\n    const baseDef = getNgDirectiveDef(componentDefinition as DirectiveDefinition<T>);\n    const def: Writable<ComponentDef<T>> = {\n      ...baseDef,\n      decls: componentDefinition.decls,\n      vars: componentDefinition.vars,\n      template: componentDefinition.template,\n      consts: componentDefinition.consts || null,\n      ngContentSelectors: componentDefinition.ngContentSelectors,\n      onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n      directiveDefs: null!, // assigned in noSideEffects\n      pipeDefs: null!, // assigned in noSideEffects\n      dependencies: (baseDef.standalone && componentDefinition.dependencies) || null,\n      getStandaloneInjector: baseDef.standalone\n        ? (parentInjector: EnvironmentInjector) => {\n            return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(def);\n          }\n        : null,\n      getExternalStyles: null,\n      signals: componentDefinition.signals ?? false,\n      data: componentDefinition.data || {},\n      encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n      styles: componentDefinition.styles || EMPTY_ARRAY,\n      _: null,\n      schemas: componentDefinition.schemas || null,\n      tView: null,\n      id: '',\n    };\n\n    // TODO: Do we still need/want this ?\n    if (baseDef.standalone) {\n      performanceMarkFeature('NgStandalone');\n    }\n\n    initFeatures(def);\n    const dependencies = componentDefinition.dependencies;\n    def.directiveDefs = extractDefListOrFactory(dependencies, /* pipeDef */ false);\n    def.pipeDefs = extractDefListOrFactory(dependencies, /* pipeDef */ true);\n    def.id = getComponentId(def);\n\n    return def;\n  });\n}\n\nexport function extractDirectiveDef(type: Type<any>): DirectiveDef<any> | ComponentDef<any> | null {\n  return getComponentDef(type) || getDirectiveDef(type);\n}\n\nfunction nonNull<T>(value: T | null): value is T {\n  return value !== null;\n}\n\n/**\n * @codeGenApi\n */\nexport function ɵɵdefineNgModule<T>(def: {\n  /** Token representing the module. Used by DI. */\n  type: T;\n\n  /** List of components to bootstrap. */\n  bootstrap?: Type<any>[] | (() => Type<any>[]);\n\n  /** List of components, directives, and pipes declared by this module. */\n  declarations?: Type<any>[] | (() => Type<any>[]);\n\n  /** List of modules or `ModuleWithProviders` imported by this module. */\n  imports?: Type<any>[] | (() => Type<any>[]);\n\n  /**\n   * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\n   * module.\n   */\n  exports?: Type<any>[] | (() => Type<any>[]);\n\n  /** The set of schemas that declare elements to be allowed in the NgModule. */\n  schemas?: SchemaMetadata[] | null;\n\n  /** Unique ID for the module that is used with `getModuleFactory`. */\n  id?: string | null;\n}): unknown {\n  return noSideEffects(() => {\n    const res: NgModuleDef<T> = {\n      type: def.type,\n      bootstrap: def.bootstrap || EMPTY_ARRAY,\n      declarations: def.declarations || EMPTY_ARRAY,\n      imports: def.imports || EMPTY_ARRAY,\n      exports: def.exports || EMPTY_ARRAY,\n      transitiveCompileScopes: null,\n      schemas: def.schemas || null,\n      id: def.id || null,\n    };\n    return res;\n  });\n}\n\n/**\n * Converts binding objects from the `DirectiveDefinition` into more efficient\n * lookup dictionaries that are optimized for the framework runtime.\n *\n * This function converts inputs or output directive information into new objects\n * where the public name conveniently maps to the minified internal field name.\n *\n * For inputs, the input flags are additionally persisted into the new data structure,\n * so that those can be quickly retrieved when needed.\n *\n * e.g. for\n *\n * ```ts\n * class Comp {\n *   @Input()\n *   propName1: string;\n *\n *   @Input('publicName2')\n *   declaredPropName2: number;\n *\n *   inputSignal = input(3);\n * }\n * ```\n *\n * will be serialized as\n *\n * ```ts\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n *   inputSignal: [InputFlags.SignalBased, 'inputSignal'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```ts\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n *   minifiedInputSignal: [InputFlags.SignalBased, 'inputSignal'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName + isSignal if needed)\n *\n * ```ts\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n *  'inputSignal': ['minifiedInputSignal', InputFlags.SignalBased],\n * }\n * ```\n *\n * Optionally the function can take `declaredInputs` which will result\n * in: (public name => declared name)\n *\n * ```ts\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n *  'inputSignal': 'inputSignal',\n * }\n * ```\n *\n\n */\nfunction parseAndConvertInputsForDefinition<T>(\n  obj: DirectiveDefinition<T>['inputs'],\n  declaredInputs: Record<string, string>,\n) {\n  if (obj == null) return EMPTY_OBJ as any;\n  const newLookup: Record<\n    string,\n    [minifiedName: string, flags: InputFlags, transform: InputTransformFunction | null]\n  > = {};\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      const value = obj[minifiedKey]!;\n      let publicName: string;\n      let declaredName: string;\n      let inputFlags: InputFlags;\n      let transform: InputTransformFunction | null;\n\n      if (Array.isArray(value)) {\n        inputFlags = value[0];\n        publicName = value[1];\n        declaredName = value[2] ?? publicName; // declared name might not be set to save bytes.\n        transform = value[3] || null;\n      } else {\n        publicName = value;\n        declaredName = value;\n        inputFlags = InputFlags.None;\n        transform = null;\n      }\n\n      newLookup[publicName] = [minifiedKey, inputFlags, transform];\n      declaredInputs[publicName] = declaredName as string;\n    }\n  }\n  return newLookup;\n}\n\nfunction parseAndConvertOutputsForDefinition<T>(\n  obj: DirectiveDefinition<T>['outputs'],\n): Record<keyof T, string> {\n  if (obj == null) return EMPTY_OBJ as any;\n  const newLookup: any = {};\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      newLookup[obj[minifiedKey]!] = minifiedKey;\n    }\n  }\n  return newLookup;\n}\n\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```ts\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵdir = ɵɵdefineDirective({\n *     ...\n *   });\n * }\n * ```\n *\n * @codeGenApi\n */\nexport function ɵɵdefineDirective<T>(\n  directiveDefinition: DirectiveDefinition<T>,\n): DirectiveDef<any> {\n  return noSideEffects(() => {\n    const def = getNgDirectiveDef(directiveDefinition);\n    initFeatures(def);\n\n    return def;\n  });\n}\n\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```ts\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ɵpipe = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n *\n * @codeGenApi\n */\nexport function ɵɵdefinePipe<T>(pipeDef: {\n  /** Name of the pipe. Used for matching pipes in template to pipe defs. */\n  name: string;\n\n  /** Pipe class reference. Needed to extract pipe lifecycle hooks. */\n  type: Type<T>;\n\n  /** Whether the pipe is pure. */\n  pure?: boolean;\n\n  /**\n   * Whether the pipe is standalone.\n   */\n  standalone?: boolean;\n}): unknown {\n  return <PipeDef<T>>{\n    type: pipeDef.type,\n    name: pipeDef.name,\n    factory: null,\n    pure: pipeDef.pure !== false,\n    standalone: pipeDef.standalone ?? true,\n    onDestroy: pipeDef.type.prototype.ngOnDestroy || null,\n  };\n}\n\nfunction getNgDirectiveDef<T>(directiveDefinition: DirectiveDefinition<T>): DirectiveDef<T> {\n  const declaredInputs: Record<string, string> = {};\n\n  return {\n    type: directiveDefinition.type,\n    providersResolver: null,\n    factory: null,\n    hostBindings: directiveDefinition.hostBindings || null,\n    hostVars: directiveDefinition.hostVars || 0,\n    hostAttrs: directiveDefinition.hostAttrs || null,\n    contentQueries: directiveDefinition.contentQueries || null,\n    declaredInputs: declaredInputs,\n    inputConfig: directiveDefinition.inputs || EMPTY_OBJ,\n    exportAs: directiveDefinition.exportAs || null,\n    standalone: directiveDefinition.standalone ?? true,\n    signals: directiveDefinition.signals === true,\n    selectors: directiveDefinition.selectors || EMPTY_ARRAY,\n    viewQuery: directiveDefinition.viewQuery || null,\n    features: directiveDefinition.features || null,\n    setInput: null,\n    findHostDirectiveDefs: null,\n    hostDirectives: null,\n    inputs: parseAndConvertInputsForDefinition(directiveDefinition.inputs, declaredInputs),\n    outputs: parseAndConvertOutputsForDefinition(directiveDefinition.outputs),\n    debugInfo: null,\n  };\n}\n\nfunction initFeatures<T>(definition: DirectiveDef<T> | ComponentDef<T>): void {\n  definition.features?.forEach((fn) => fn(definition));\n}\n\nexport function extractDefListOrFactory(\n  dependencies: TypeOrFactory<DependencyTypeList> | undefined,\n  pipeDef: false,\n): DirectiveDefListOrFactory | null;\nexport function extractDefListOrFactory(\n  dependencies: TypeOrFactory<DependencyTypeList> | undefined,\n  pipeDef: true,\n): PipeDefListOrFactory | null;\nexport function extractDefListOrFactory(\n  dependencies: TypeOrFactory<DependencyTypeList> | undefined,\n  pipeDef: boolean,\n): unknown {\n  if (!dependencies) {\n    return null;\n  }\n\n  const defExtractor = pipeDef ? getPipeDef : extractDirectiveDef;\n\n  return () =>\n    (typeof dependencies === 'function' ? dependencies() : dependencies)\n      .map((dep) => defExtractor(dep))\n      .filter(nonNull);\n}\n\n/**\n * A map that contains the generated component IDs and type.\n */\nexport const GENERATED_COMP_IDS = new Map<string, Type<unknown>>();\n\n/**\n * A method can returns a component ID from the component definition using a variant of DJB2 hash\n * algorithm.\n */\nfunction getComponentId<T>(componentDef: ComponentDef<T>): string {\n  let hash = 0;\n\n  // For components with i18n in templates, the `consts` array is generated by the compiler\n  // as a function. If client and server bundles were produced with different minification\n  // configurations, the serializable contents of the function body would be different on\n  // the client and on the server. This might result in different ids generated. To avoid this\n  // issue, we do not take the `consts` contents into account if it's a function.\n  // See https://github.com/angular/angular/issues/58713.\n  const componentDefConsts = typeof componentDef.consts === 'function' ? '' : componentDef.consts;\n\n  // We cannot rely solely on the component selector as the same selector can be used in different\n  // modules.\n  //\n  // `componentDef.style` is not used, due to it causing inconsistencies. Ex: when server\n  // component styles has no sourcemaps and browsers do.\n  //\n  // Example:\n  // https://github.com/angular/components/blob/d9f82c8f95309e77a6d82fd574c65871e91354c2/src/material/core/option/option.ts#L248\n  // https://github.com/angular/components/blob/285f46dc2b4c5b127d356cb7c4714b221f03ce50/src/material/legacy-core/option/option.ts#L32\n  const hashSelectors = [\n    componentDef.selectors,\n    componentDef.ngContentSelectors,\n    componentDef.hostVars,\n    componentDef.hostAttrs,\n    componentDefConsts,\n    componentDef.vars,\n    componentDef.decls,\n    componentDef.encapsulation,\n    componentDef.standalone,\n    componentDef.signals,\n    componentDef.exportAs,\n    JSON.stringify(componentDef.inputs),\n    JSON.stringify(componentDef.outputs),\n    // We cannot use 'componentDef.type.name' as the name of the symbol will change and will not\n    // match in the server and browser bundles.\n    Object.getOwnPropertyNames(componentDef.type.prototype),\n    !!componentDef.contentQueries,\n    !!componentDef.viewQuery,\n  ];\n\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    // If client and server bundles were produced with different minification configurations,\n    // the serializable contents of the function body would be different on the client and on\n    // the server. Ensure that we do not accidentally use functions in component id computation.\n    for (const item of hashSelectors) {\n      assertNotEqual(\n        typeof item,\n        'function',\n        'Internal error: attempting to use a function in component id computation logic.',\n      );\n    }\n  }\n\n  for (const char of hashSelectors.join('|')) {\n    hash = (Math.imul(31, hash) + char.charCodeAt(0)) << 0;\n  }\n\n  // Force positive number hash.\n  // 2147483647 = equivalent of Integer.MAX_VALUE.\n  hash += 2147483647 + 1;\n\n  const compId = 'c' + hash;\n\n  if (\n    (typeof ngDevMode === 'undefined' || ngDevMode) &&\n    // Skip the check on the server since we can't guarantee the same component instance between\n    // requests. Note that we can't use DI to check if we're on the server, because the component\n    // hasn't been instantiated yet.\n    (typeof ngServerMode === 'undefined' || !ngServerMode)\n  ) {\n    if (GENERATED_COMP_IDS.has(compId)) {\n      const previousCompDefType = GENERATED_COMP_IDS.get(compId)!;\n      if (previousCompDefType !== componentDef.type) {\n        console.warn(\n          formatRuntimeError(\n            RuntimeErrorCode.COMPONENT_ID_COLLISION,\n            `Component ID generation collision detected. Components '${\n              previousCompDefType.name\n            }' and '${componentDef.type.name}' with selector '${stringifyCSSSelectorList(\n              componentDef.selectors,\n            )}' generated the same component ID. To fix this, you can change the selector of one of those components or add an extra host attribute to force a different ID.`,\n          ),\n        );\n      }\n    } else {\n      GENERATED_COMP_IDS.set(compId, componentDef.type);\n    }\n  }\n\n  return compId;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {Type, Writable} from '../../interface/type';\nimport {EMPTY_ARRAY, EMPTY_OBJ} from '../../util/empty';\nimport {fillProperties} from '../../util/property';\nimport {\n  ComponentDef,\n  ContentQueriesFunction,\n  DirectiveDef,\n  DirectiveDefFeature,\n  HostBindingsFunction,\n  RenderFlags,\n  ViewQueriesFunction,\n} from '../interfaces/definition';\nimport {TAttributes} from '../interfaces/node';\nimport {isComponentDef} from '../interfaces/type_checks';\nimport {mergeHostAttrs} from '../util/attrs_utils';\nimport {stringifyForError} from '../util/stringify_utils';\n\nexport function getSuperType(\n  type: Type<any>,\n): Type<any> & {ɵcmp?: ComponentDef<any>; ɵdir?: DirectiveDef<any>} {\n  return Object.getPrototypeOf(type.prototype).constructor;\n}\n\ntype WritableDef = Writable<DirectiveDef<any> | ComponentDef<any>>;\n\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n *\n * @codeGenApi\n */\nexport function ɵɵInheritDefinitionFeature(\n  definition: DirectiveDef<any> | ComponentDef<any>,\n): void {\n  let superType = getSuperType(definition.type);\n  let shouldInheritFields = true;\n  const inheritanceChain: WritableDef[] = [definition];\n\n  while (superType) {\n    let superDef: DirectiveDef<any> | ComponentDef<any> | undefined = undefined;\n    if (isComponentDef(definition)) {\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵcmp || superType.ɵdir;\n    } else {\n      if (superType.ɵcmp) {\n        throw new RuntimeError(\n          RuntimeErrorCode.INVALID_INHERITANCE,\n          ngDevMode &&\n            `Directives cannot inherit Components. Directive ${stringifyForError(\n              definition.type,\n            )} is attempting to extend component ${stringifyForError(superType)}`,\n        );\n      }\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵdir;\n    }\n\n    if (superDef) {\n      if (shouldInheritFields) {\n        inheritanceChain.push(superDef);\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        const writeableDef = definition as WritableDef;\n        writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n        writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n        writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n\n        // Merge hostBindings\n        const superHostBindings = superDef.hostBindings;\n        superHostBindings && inheritHostBindings(definition, superHostBindings);\n\n        // Merge queries\n        const superViewQuery = superDef.viewQuery;\n        const superContentQueries = superDef.contentQueries;\n        superViewQuery && inheritViewQuery(definition, superViewQuery);\n        superContentQueries && inheritContentQueries(definition, superContentQueries);\n\n        // Merge inputs and outputs\n        mergeInputsWithTransforms(definition, superDef);\n        fillProperties(definition.outputs, superDef.outputs);\n\n        // Merge animations metadata.\n        // If `superDef` is a Component, the `data` field is present (defaults to an empty object).\n        if (isComponentDef(superDef) && superDef.data.animation) {\n          // If super def is a Component, the `definition` is also a Component, since Directives can\n          // not inherit Components (we throw an error above and cannot reach this code).\n          const defData = (definition as ComponentDef<any>).data;\n          defData.animation = (defData.animation || []).concat(superDef.data.animation);\n        }\n      }\n\n      // Run parent features\n      const features = superDef.features;\n      if (features) {\n        for (let i = 0; i < features.length; i++) {\n          const feature = features[i];\n          if (feature && feature.ngInherit) {\n            (feature as DirectiveDefFeature)(definition);\n          }\n          // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this\n          // def already has all the necessary information inherited from its super class(es), so we\n          // can stop merging fields from super classes. However we need to iterate through the\n          // prototype chain to look for classes that might contain other \"features\" (like\n          // NgOnChanges), which we should invoke for the original `definition`. We set the\n          // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance\n          // logic and only invoking functions from the \"features\" list.\n          if (feature === ɵɵInheritDefinitionFeature) {\n            shouldInheritFields = false;\n          }\n        }\n      }\n    }\n\n    superType = Object.getPrototypeOf(superType);\n  }\n  mergeHostAttrsAcrossInheritance(inheritanceChain);\n}\n\nfunction mergeInputsWithTransforms<T>(target: WritableDef, source: DirectiveDef<any>) {\n  for (const key in source.inputs) {\n    if (!source.inputs.hasOwnProperty(key)) {\n      continue;\n    }\n    if (target.inputs.hasOwnProperty(key)) {\n      continue;\n    }\n\n    const value = source.inputs[key];\n\n    if (value !== undefined) {\n      target.inputs[key] = value;\n      target.declaredInputs[key] = source.declaredInputs[key];\n    }\n  }\n}\n\n/**\n * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.\n *\n * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing\n * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child\n * type.\n */\nfunction mergeHostAttrsAcrossInheritance(inheritanceChain: WritableDef[]) {\n  let hostVars: number = 0;\n  let hostAttrs: TAttributes | null = null;\n  // We process the inheritance order from the base to the leaves here.\n  for (let i = inheritanceChain.length - 1; i >= 0; i--) {\n    const def = inheritanceChain[i];\n    // For each `hostVars`, we need to add the superclass amount.\n    def.hostVars = hostVars += def.hostVars;\n    // for each `hostAttrs` we need to merge it with superclass.\n    def.hostAttrs = mergeHostAttrs(\n      def.hostAttrs,\n      (hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs)),\n    );\n  }\n}\n\nfunction maybeUnwrapEmpty<T>(value: T[]): T[];\nfunction maybeUnwrapEmpty<T>(value: T): T;\nfunction maybeUnwrapEmpty(value: any): any {\n  if (value === EMPTY_OBJ) {\n    return {};\n  } else if (value === EMPTY_ARRAY) {\n    return [];\n  } else {\n    return value;\n  }\n}\n\nfunction inheritViewQuery(definition: WritableDef, superViewQuery: ViewQueriesFunction<any>) {\n  const prevViewQuery = definition.viewQuery;\n  if (prevViewQuery) {\n    definition.viewQuery = (rf, ctx) => {\n      superViewQuery(rf, ctx);\n      prevViewQuery(rf, ctx);\n    };\n  } else {\n    definition.viewQuery = superViewQuery;\n  }\n}\n\nfunction inheritContentQueries(\n  definition: WritableDef,\n  superContentQueries: ContentQueriesFunction<any>,\n) {\n  const prevContentQueries = definition.contentQueries;\n  if (prevContentQueries) {\n    definition.contentQueries = (rf, ctx, directiveIndex) => {\n      superContentQueries(rf, ctx, directiveIndex);\n      prevContentQueries(rf, ctx, directiveIndex);\n    };\n  } else {\n    definition.contentQueries = superContentQueries;\n  }\n}\n\nfunction inheritHostBindings(\n  definition: WritableDef,\n  superHostBindings: HostBindingsFunction<any>,\n) {\n  const prevHostBindings = definition.hostBindings;\n  if (prevHostBindings) {\n    definition.hostBindings = (rf: RenderFlags, ctx: any) => {\n      superHostBindings(rf, ctx);\n      prevHostBindings(rf, ctx);\n    };\n  } else {\n    definition.hostBindings = superHostBindings;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {resolveForwardRef} from '../../di';\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {assertEqual} from '../../util/assert';\nimport {EMPTY_OBJ} from '../../util/empty';\nimport {getComponentDef, getDirectiveDef} from '../def_getters';\nimport type {\n  DirectiveDef,\n  DirectiveDefFeature,\n  HostDirectiveBindingMap,\n  HostDirectiveConfig,\n  HostDirectiveDef,\n  HostDirectiveDefs,\n} from '../interfaces/definition';\n\n/**\n * This feature adds the host directives behavior to a directive definition by patching a\n * function onto it. The expectation is that the runtime will invoke the function during\n * directive matching.\n *\n * For example:\n * ```ts\n * class ComponentWithHostDirective {\n *   static ɵcmp = defineComponent({\n *    type: ComponentWithHostDirective,\n *    features: [ɵɵHostDirectivesFeature([\n *      SimpleHostDirective,\n *      {directive: AdvancedHostDirective, inputs: ['foo: alias'], outputs: ['bar']},\n *    ])]\n *  });\n * }\n * ```\n *\n * @codeGenApi\n */\nexport function ɵɵHostDirectivesFeature(\n  rawHostDirectives: HostDirectiveConfig[] | (() => HostDirectiveConfig[]),\n) {\n  const feature: DirectiveDefFeature = (definition: DirectiveDef<unknown>) => {\n    const isEager = Array.isArray(rawHostDirectives);\n\n    if (definition.hostDirectives === null) {\n      definition.findHostDirectiveDefs = findHostDirectiveDefs;\n      definition.hostDirectives = isEager\n        ? rawHostDirectives.map(createHostDirectiveDef)\n        : [rawHostDirectives];\n    } else if (isEager) {\n      definition.hostDirectives.unshift(...rawHostDirectives.map(createHostDirectiveDef));\n    } else {\n      definition.hostDirectives.unshift(rawHostDirectives);\n    }\n  };\n  feature.ngInherit = true;\n  return feature;\n}\n\nfunction findHostDirectiveDefs(\n  currentDef: DirectiveDef<unknown>,\n  matchedDefs: DirectiveDef<unknown>[],\n  hostDirectiveDefs: HostDirectiveDefs,\n): void {\n  if (currentDef.hostDirectives !== null) {\n    for (const configOrFn of currentDef.hostDirectives) {\n      if (typeof configOrFn === 'function') {\n        const resolved = configOrFn();\n        for (const config of resolved) {\n          trackHostDirectiveDef(createHostDirectiveDef(config), matchedDefs, hostDirectiveDefs);\n        }\n      } else {\n        trackHostDirectiveDef(configOrFn, matchedDefs, hostDirectiveDefs);\n      }\n    }\n  }\n}\n\n/** Tracks a single host directive during directive matching. */\nfunction trackHostDirectiveDef(\n  def: HostDirectiveDef,\n  matchedDefs: DirectiveDef<unknown>[],\n  hostDirectiveDefs: HostDirectiveDefs,\n) {\n  const hostDirectiveDef = getDirectiveDef(def.directive)!;\n\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    validateHostDirective(def, hostDirectiveDef);\n  }\n\n  // We need to patch the `declaredInputs` so that\n  // `ngOnChanges` can map the properties correctly.\n  patchDeclaredInputs(hostDirectiveDef.declaredInputs, def.inputs);\n\n  // Host directives execute before the host so that its host bindings can be overwritten.\n  findHostDirectiveDefs(hostDirectiveDef, matchedDefs, hostDirectiveDefs);\n  hostDirectiveDefs.set(hostDirectiveDef, def);\n  matchedDefs.push(hostDirectiveDef);\n}\n\n/** Creates a `HostDirectiveDef` from a used-defined host directive configuration. */\nfunction createHostDirectiveDef(config: HostDirectiveConfig): HostDirectiveDef {\n  return typeof config === 'function'\n    ? {directive: resolveForwardRef(config), inputs: EMPTY_OBJ, outputs: EMPTY_OBJ}\n    : {\n        directive: resolveForwardRef(config.directive),\n        inputs: bindingArrayToMap(config.inputs),\n        outputs: bindingArrayToMap(config.outputs),\n      };\n}\n\n/**\n * Converts an array in the form of `['publicName', 'alias', 'otherPublicName', 'otherAlias']` into\n * a map in the form of `{publicName: 'alias', otherPublicName: 'otherAlias'}`.\n */\nfunction bindingArrayToMap(bindings: string[] | undefined): HostDirectiveBindingMap {\n  if (bindings === undefined || bindings.length === 0) {\n    return EMPTY_OBJ;\n  }\n\n  const result: HostDirectiveBindingMap = {};\n\n  for (let i = 0; i < bindings.length; i += 2) {\n    result[bindings[i]] = bindings[i + 1];\n  }\n\n  return result;\n}\n\n/**\n * `ngOnChanges` has some leftover legacy ViewEngine behavior where the keys inside the\n * `SimpleChanges` event refer to the *declared* name of the input, not its public name or its\n * minified name. E.g. in `@Input('alias') foo: string`, the name in the `SimpleChanges` object\n * will always be `foo`, and not `alias` or the minified name of `foo` in apps using property\n * minification.\n *\n * This is achieved through the `DirectiveDef.declaredInputs` map that is constructed when the\n * definition is declared. When a property is written to the directive instance, the\n * `NgOnChangesFeature` will try to remap the property name being written to using the\n * `declaredInputs`.\n *\n * Since the host directive input remapping happens during directive matching, `declaredInputs`\n * won't contain the new alias that the input is available under. This function addresses the\n * issue by patching the host directive aliases to the `declaredInputs`. There is *not* a risk of\n * this patching accidentally introducing new inputs to the host directive, because `declaredInputs`\n * is used *only* by the `NgOnChangesFeature` when determining what name is used in the\n * `SimpleChanges` object which won't be reached if an input doesn't exist.\n */\nfunction patchDeclaredInputs(\n  declaredInputs: Record<string, string>,\n  exposedInputs: HostDirectiveBindingMap,\n): void {\n  for (const publicName in exposedInputs) {\n    if (exposedInputs.hasOwnProperty(publicName)) {\n      const remappedPublicName = exposedInputs[publicName];\n      const privateName = declaredInputs[publicName];\n\n      // We *technically* shouldn't be able to hit this case because we can't have multiple\n      // inputs on the same property and we have validations against conflicting aliases in\n      // `validateMappings`. If we somehow did, it would lead to `ngOnChanges` being invoked\n      // with the wrong name so we have a non-user-friendly assertion here just in case.\n      if (\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        declaredInputs.hasOwnProperty(remappedPublicName)\n      ) {\n        assertEqual(\n          declaredInputs[remappedPublicName],\n          declaredInputs[publicName],\n          `Conflicting host directive input alias ${publicName}.`,\n        );\n      }\n\n      declaredInputs[remappedPublicName] = privateName;\n    }\n  }\n}\n\n/**\n * Verifies that the host directive has been configured correctly.\n * @param hostDirectiveConfig Host directive configuration object.\n * @param directiveDef Directive definition of the host directive.\n */\nfunction validateHostDirective(\n  hostDirectiveConfig: HostDirectiveDef<unknown>,\n  directiveDef: DirectiveDef<any> | null,\n): asserts directiveDef is DirectiveDef<unknown> {\n  const type = hostDirectiveConfig.directive;\n\n  if (directiveDef === null) {\n    if (getComponentDef(type) !== null) {\n      throw new RuntimeError(\n        RuntimeErrorCode.HOST_DIRECTIVE_COMPONENT,\n        `Host directive ${type.name} cannot be a component.`,\n      );\n    }\n\n    throw new RuntimeError(\n      RuntimeErrorCode.HOST_DIRECTIVE_UNRESOLVABLE,\n      `Could not resolve metadata for host directive ${type.name}. ` +\n        `Make sure that the ${type.name} class is annotated with an @Directive decorator.`,\n    );\n  }\n\n  if (!directiveDef.standalone) {\n    throw new RuntimeError(\n      RuntimeErrorCode.HOST_DIRECTIVE_NOT_STANDALONE,\n      `Host directive ${directiveDef.type.name} must be standalone.`,\n    );\n  }\n\n  validateMappings('input', directiveDef, hostDirectiveConfig.inputs);\n  validateMappings('output', directiveDef, hostDirectiveConfig.outputs);\n}\n\n/**\n * Checks that the host directive inputs/outputs configuration is valid.\n * @param bindingType Kind of binding that is being validated. Used in the error message.\n * @param def Definition of the host directive that is being validated against.\n * @param hostDirectiveBindings Host directive mapping object that shold be validated.\n */\nfunction validateMappings<T>(\n  bindingType: 'input' | 'output',\n  def: DirectiveDef<T>,\n  hostDirectiveBindings: HostDirectiveBindingMap,\n) {\n  const className = def.type.name;\n  const bindings = bindingType === 'input' ? def.inputs : def.outputs;\n\n  for (const publicName in hostDirectiveBindings) {\n    if (hostDirectiveBindings.hasOwnProperty(publicName)) {\n      if (!bindings.hasOwnProperty(publicName)) {\n        throw new RuntimeError(\n          RuntimeErrorCode.HOST_DIRECTIVE_UNDEFINED_BINDING,\n          `Directive ${className} does not have an ${bindingType} with a public name of ${publicName}.`,\n        );\n      }\n\n      const remappedPublicName = hostDirectiveBindings[publicName];\n\n      if (bindings.hasOwnProperty(remappedPublicName) && remappedPublicName !== publicName) {\n        throw new RuntimeError(\n          RuntimeErrorCode.HOST_DIRECTIVE_CONFLICTING_ALIAS,\n          `Cannot alias ${bindingType} ${publicName} of host directive ${className} to ${remappedPublicName}, because it already has a different ${bindingType} with the same public name.`,\n        );\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport function isIterable(obj: any): obj is Iterable<any> {\n  return obj !== null && typeof obj === 'object' && obj[Symbol.iterator] !== undefined;\n}\n\nexport function isListLikeIterable(obj: any): boolean {\n  if (!isJsObject(obj)) return false;\n  return (\n    Array.isArray(obj) ||\n    (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n      Symbol.iterator in obj)\n  ); // JS Iterable have a Symbol.iterator prop\n}\n\nexport function areIterablesEqual<T>(\n  a: Iterable<T>,\n  b: Iterable<T>,\n  comparator: (a: T, b: T) => boolean,\n): boolean {\n  const iterator1 = a[Symbol.iterator]();\n  const iterator2 = b[Symbol.iterator]();\n\n  while (true) {\n    const item1 = iterator1.next();\n    const item2 = iterator2.next();\n    if (item1.done && item2.done) return true;\n    if (item1.done || item2.done) return false;\n    if (!comparator(item1.value, item2.value)) return false;\n  }\n}\n\nexport function iterateListLike<T>(obj: Iterable<T>, fn: (p: T) => void) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      fn(obj[i]);\n    }\n  } else {\n    const iterator = obj[Symbol.iterator]();\n    let item: IteratorResult<T, any>;\n    while (!(item = iterator.next()).done) {\n      fn(item.value);\n    }\n  }\n}\n\nexport function isJsObject(o: any): boolean {\n  return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertIndexInRange, assertLessThan, assertNotSame} from '../util/assert';\nimport {devModeEqual} from '../util/comparison';\n\nimport {getExpressionChangedErrorDetails, throwErrorIfNoChangesMode} from './errors';\nimport {LView} from './interfaces/view';\nimport {isInCheckNoChangesMode} from './state';\nimport {NO_CHANGE} from './tokens';\n\n// TODO(misko): consider inlining\n/** Updates binding and returns the value. */\nexport function updateBinding(lView: LView, bindingIndex: number, value: any): any {\n  return (lView[bindingIndex] = value);\n}\n\n/** Gets the current binding value. */\nexport function getBinding(lView: LView, bindingIndex: number): any {\n  ngDevMode && assertIndexInRange(lView, bindingIndex);\n  ngDevMode &&\n    assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n  return lView[bindingIndex];\n}\n\n/**\n * Updates binding if changed, then returns whether it was updated.\n *\n * This function also checks the `CheckNoChangesMode` and throws if changes are made.\n * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE\n * behavior.\n *\n * @param lView current `LView`\n * @param bindingIndex The binding in the `LView` to check\n * @param value New value to check against `lView[bindingIndex]`\n * @returns `true` if the bindings has changed. (Throws if binding has changed during\n *          `CheckNoChangesMode`)\n */\nexport function bindingUpdated(lView: LView, bindingIndex: number, value: any): boolean {\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n  ngDevMode &&\n    assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n  const oldValue = lView[bindingIndex];\n\n  if (Object.is(oldValue, value)) {\n    return false;\n  } else {\n    if (ngDevMode && isInCheckNoChangesMode()) {\n      // View engine didn't report undefined values as changed on the first checkNoChanges pass\n      // (before the change detection was run).\n      const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n      if (!devModeEqual(oldValueToCompare, value)) {\n        const details = getExpressionChangedErrorDetails(\n          lView,\n          bindingIndex,\n          oldValueToCompare,\n          value,\n        );\n        throwErrorIfNoChangesMode(\n          oldValue === NO_CHANGE,\n          details.oldValue,\n          details.newValue,\n          details.propName,\n          lView,\n        );\n      }\n      // There was a change, but the `devModeEqual` decided that the change is exempt from an error.\n      // For this reason we exit as if no change. The early exit is needed to prevent the changed\n      // value to be written into `LView` (If we would write the new value that we would not see it\n      // as change on next CD.)\n      return false;\n    }\n    lView[bindingIndex] = value;\n    return true;\n  }\n}\n\n/** Updates 2 bindings if changed, then returns whether either was updated. */\nexport function bindingUpdated2(lView: LView, bindingIndex: number, exp1: any, exp2: any): boolean {\n  const different = bindingUpdated(lView, bindingIndex, exp1);\n  return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n\n/** Updates 3 bindings if changed, then returns whether any was updated. */\nexport function bindingUpdated3(\n  lView: LView,\n  bindingIndex: number,\n  exp1: any,\n  exp2: any,\n  exp3: any,\n): boolean {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n\n/** Updates 4 bindings if changed, then returns whether any was updated. */\nexport function bindingUpdated4(\n  lView: LView,\n  bindingIndex: number,\n  exp1: any,\n  exp2: any,\n  exp3: any,\n  exp4: any,\n): boolean {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {validateMatchingNode, validateNodeExists} from '../../hydration/error_handling';\nimport {TEMPLATES} from '../../hydration/interfaces';\nimport {locateNextRNode, siblingAfter} from '../../hydration/node_lookup_utils';\nimport {\n  calcSerializedContainerSize,\n  isDisconnectedNode,\n  markRNodeAsClaimedByHydration,\n  setSegmentHead,\n} from '../../hydration/utils';\nimport {isDetachedByI18n} from '../../i18n/utils';\nimport {populateDehydratedViewsInLContainer} from '../../linker/view_container_ref';\nimport {assertEqual} from '../../util/assert';\nimport {assertFirstCreatePass} from '../assert';\nimport {attachPatchData} from '../context_discovery';\nimport {registerPostOrderHooks} from '../hooks';\nimport {ComponentTemplate} from '../interfaces/definition';\nimport {LocalRefExtractor, TAttributes, TContainerNode, TNode, TNodeType} from '../interfaces/node';\nimport {RComment} from '../interfaces/renderer_dom';\nimport {isDirectiveHost} from '../interfaces/type_checks';\nimport {HEADER_OFFSET, HYDRATION, LView, RENDERER, TView, TViewType} from '../interfaces/view';\nimport {appendChild} from '../node_manipulation';\nimport {\n  getBindingsEnabled,\n  getLView,\n  getTView,\n  isInSkipHydrationBlock,\n  lastNodeWasCreated,\n  setCurrentTNode,\n  wasLastNodeCreated,\n} from '../state';\nimport {getOrCreateTNode} from '../tnode_manipulation';\nimport {mergeHostAttrs} from '../util/attrs_utils';\nimport {getConstant} from '../util/view_utils';\nimport {addToEndOfViewTree, createTView} from '../view/construction';\nimport {createLContainer} from '../view/container';\nimport {resolveDirectives} from '../view/directives';\n\nimport {\n  createDirectivesInstances,\n  findDirectiveDefMatches,\n  saveResolvedLocalsInData,\n} from './shared';\n\nfunction templateFirstCreatePass(\n  index: number,\n  tView: TView,\n  lView: LView,\n  templateFn: ComponentTemplate<any> | null,\n  decls: number,\n  vars: number,\n  tagName?: string | null,\n  attrs?: TAttributes | null,\n  localRefsIndex?: number | null,\n): TContainerNode {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && ngDevMode.firstCreatePass++;\n  const tViewConsts = tView.consts;\n\n  // TODO(pk): refactor getOrCreateTNode to have the \"create\" only version\n  const tNode = getOrCreateTNode(tView, index, TNodeType.Container, tagName || null, attrs || null);\n\n  if (getBindingsEnabled()) {\n    resolveDirectives(\n      tView,\n      lView,\n      tNode,\n      getConstant<string[]>(tViewConsts, localRefsIndex),\n      findDirectiveDefMatches,\n    );\n  }\n\n  // Merge the template attrs last so that they have the highest priority.\n  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n\n  registerPostOrderHooks(tView, tNode);\n\n  const embeddedTView = (tNode.tView = createTView(\n    TViewType.Embedded,\n    tNode,\n    templateFn,\n    decls,\n    vars,\n    tView.directiveRegistry,\n    tView.pipeRegistry,\n    null,\n    tView.schemas,\n    tViewConsts,\n    null /* ssrId */,\n  ));\n\n  if (tView.queries !== null) {\n    tView.queries.template(tView, tNode);\n    embeddedTView.queries = tView.queries.embeddedTView(tNode);\n  }\n\n  return tNode;\n}\n\n/**\n * Creates an LContainer for an embedded view.\n *\n * @param declarationLView LView in which the template was declared.\n * @param declarationTView TView in which the template wa declared.\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n */\nexport function declareTemplate(\n  declarationLView: LView,\n  declarationTView: TView,\n  index: number,\n  templateFn: ComponentTemplate<any> | null,\n  decls: number,\n  vars: number,\n  tagName?: string | null,\n  attrs?: TAttributes | null,\n  localRefsIndex?: number | null,\n  localRefExtractor?: LocalRefExtractor,\n): TNode {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const tNode = declarationTView.firstCreatePass\n    ? templateFirstCreatePass(\n        adjustedIndex,\n        declarationTView,\n        declarationLView,\n        templateFn,\n        decls,\n        vars,\n        tagName,\n        attrs,\n        localRefsIndex,\n      )\n    : (declarationTView.data[adjustedIndex] as TContainerNode);\n  setCurrentTNode(tNode, false);\n\n  const comment = _locateOrCreateContainerAnchor(\n    declarationTView,\n    declarationLView,\n    tNode,\n    index,\n  ) as RComment;\n\n  if (wasLastNodeCreated()) {\n    appendChild(declarationTView, declarationLView, comment, tNode);\n  }\n  attachPatchData(comment, declarationLView);\n\n  const lContainer = createLContainer(comment, declarationLView, comment, tNode);\n  declarationLView[adjustedIndex] = lContainer;\n  addToEndOfViewTree(declarationLView, lContainer);\n\n  // If hydration is enabled, looks up dehydrated views in the DOM\n  // using hydration annotation info and stores those views on LContainer.\n  // In client-only mode, this function is a noop.\n  populateDehydratedViewsInLContainer(lContainer, tNode, declarationLView);\n\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(declarationTView, declarationLView, tNode);\n  }\n\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(declarationLView, tNode, localRefExtractor);\n  }\n\n  return tNode;\n}\n\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @codeGenApi\n */\nexport function ɵɵtemplate(\n  index: number,\n  templateFn: ComponentTemplate<any> | null,\n  decls: number,\n  vars: number,\n  tagName?: string | null,\n  attrsIndex?: number | null,\n  localRefsIndex?: number | null,\n  localRefExtractor?: LocalRefExtractor,\n): typeof ɵɵtemplate {\n  const lView = getLView();\n  const tView = getTView();\n  const attrs = getConstant<TAttributes>(tView.consts, attrsIndex);\n  declareTemplate(\n    lView,\n    tView,\n    index,\n    templateFn,\n    decls,\n    vars,\n    tagName,\n    attrs,\n    localRefsIndex,\n    localRefExtractor,\n  );\n  return ɵɵtemplate;\n}\n\nlet _locateOrCreateContainerAnchor = createContainerAnchorImpl;\n\n/**\n * Regular creation mode for LContainers and their anchor (comment) nodes.\n */\nfunction createContainerAnchorImpl(\n  tView: TView,\n  lView: LView,\n  tNode: TNode,\n  index: number,\n): RComment {\n  lastNodeWasCreated(true);\n  return lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n}\n\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode for LContainers and their\n * anchor (comment) nodes.\n */\nfunction locateOrCreateContainerAnchorImpl(\n  tView: TView,\n  lView: LView,\n  tNode: TNode,\n  index: number,\n): RComment {\n  const hydrationInfo = lView[HYDRATION];\n  const isNodeCreationMode =\n    !hydrationInfo ||\n    isInSkipHydrationBlock() ||\n    isDetachedByI18n(tNode) ||\n    isDisconnectedNode(hydrationInfo, index);\n  lastNodeWasCreated(isNodeCreationMode);\n\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createContainerAnchorImpl(tView, lView, tNode, index);\n  }\n\n  const ssrId = hydrationInfo.data[TEMPLATES]?.[index] ?? null;\n\n  // Apply `ssrId` value to the underlying TView if it was not previously set.\n  //\n  // There might be situations when the same component is present in a template\n  // multiple times and some instances are opted-out of using hydration via\n  // `ngSkipHydration` attribute. In this scenario, at the time a TView is created,\n  // the `ssrId` might be `null` (if the first component is opted-out of hydration).\n  // The code below makes sure that the `ssrId` is applied to the TView if it's still\n  // `null` and verifies we never try to override it with a different value.\n  if (ssrId !== null && tNode.tView !== null) {\n    if (tNode.tView.ssrId === null) {\n      tNode.tView.ssrId = ssrId;\n    } else {\n      ngDevMode &&\n        assertEqual(tNode.tView.ssrId, ssrId, 'Unexpected value of the `ssrId` for this TView');\n    }\n  }\n\n  // Hydration mode, looking up existing elements in DOM.\n  const currentRNode = locateNextRNode(hydrationInfo, tView, lView, tNode)!;\n  ngDevMode && validateNodeExists(currentRNode, lView, tNode);\n\n  setSegmentHead(hydrationInfo, index, currentRNode);\n  const viewContainerSize = calcSerializedContainerSize(hydrationInfo, index);\n  const comment = siblingAfter<RComment>(viewContainerSize, currentRNode)!;\n\n  if (ngDevMode) {\n    validateMatchingNode(comment, Node.COMMENT_NODE, null, lView, tNode);\n    markRNodeAsClaimedByHydration(comment);\n  }\n\n  return comment;\n}\n\nexport function enableLocateOrCreateContainerAnchorImpl() {\n  _locateOrCreateContainerAnchor = locateOrCreateContainerAnchorImpl;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector, inject, ɵɵdefineInjectable} from '../di';\nimport {NgZone} from '../zone';\n\n/**\n * Helper function to schedule a callback to be invoked when a browser becomes idle.\n *\n * @param callback A function to be invoked when a browser becomes idle.\n * @param injector injector for the app\n */\nexport function onIdle(callback: VoidFunction, injector: Injector) {\n  const scheduler = injector.get(IdleScheduler);\n  const cleanupFn = () => scheduler.remove(callback);\n  scheduler.add(callback);\n  return cleanupFn;\n}\n\n/**\n * Use shims for the `requestIdleCallback` and `cancelIdleCallback` functions for\n * environments where those functions are not available (e.g. Node.js and Safari).\n *\n * Note: we wrap the `requestIdleCallback` call into a function, so that it can be\n * overridden/mocked in test environment and picked up by the runtime code.\n */\nconst _requestIdleCallback = () =>\n  typeof requestIdleCallback !== 'undefined' ? requestIdleCallback : setTimeout;\nconst _cancelIdleCallback = () =>\n  typeof requestIdleCallback !== 'undefined' ? cancelIdleCallback : clearTimeout;\n\n/**\n * Helper service to schedule `requestIdleCallback`s for batches of defer blocks,\n * to avoid calling `requestIdleCallback` for each defer block (e.g. if\n * defer blocks are defined inside a for loop).\n */\nexport class IdleScheduler {\n  // Indicates whether current callbacks are being invoked.\n  executingCallbacks = false;\n\n  // Currently scheduled idle callback id.\n  idleId: number | null = null;\n\n  // Set of callbacks to be invoked next.\n  current = new Set<VoidFunction>();\n\n  // Set of callbacks collected while invoking current set of callbacks.\n  // Those callbacks are scheduled for the next idle period.\n  deferred = new Set<VoidFunction>();\n\n  ngZone = inject(NgZone);\n\n  requestIdleCallbackFn = _requestIdleCallback().bind(globalThis);\n  cancelIdleCallbackFn = _cancelIdleCallback().bind(globalThis);\n\n  add(callback: VoidFunction) {\n    const target = this.executingCallbacks ? this.deferred : this.current;\n    target.add(callback);\n    if (this.idleId === null) {\n      this.scheduleIdleCallback();\n    }\n  }\n\n  remove(callback: VoidFunction) {\n    const {current, deferred} = this;\n\n    current.delete(callback);\n    deferred.delete(callback);\n\n    // If the last callback was removed and there is a pending\n    // idle callback - cancel it.\n    if (current.size === 0 && deferred.size === 0) {\n      this.cancelIdleCallback();\n    }\n  }\n\n  private scheduleIdleCallback() {\n    const callback = () => {\n      this.cancelIdleCallback();\n\n      this.executingCallbacks = true;\n\n      for (const callback of this.current) {\n        callback();\n      }\n      this.current.clear();\n\n      this.executingCallbacks = false;\n\n      // If there are any callbacks added during an invocation\n      // of the current ones - make them \"current\" and schedule\n      // a new idle callback.\n      if (this.deferred.size > 0) {\n        for (const callback of this.deferred) {\n          this.current.add(callback);\n        }\n        this.deferred.clear();\n        this.scheduleIdleCallback();\n      }\n    };\n    // Ensure that the callback runs in the NgZone since\n    // the `requestIdleCallback` is not currently patched by Zone.js.\n    this.idleId = this.requestIdleCallbackFn(() => this.ngZone.run(callback)) as number;\n  }\n\n  private cancelIdleCallback() {\n    if (this.idleId !== null) {\n      this.cancelIdleCallbackFn(this.idleId);\n      this.idleId = null;\n    }\n  }\n\n  ngOnDestroy() {\n    this.cancelIdleCallback();\n    this.current.clear();\n    this.deferred.clear();\n  }\n\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ ɵɵdefineInjectable({\n    token: IdleScheduler,\n    providedIn: 'root',\n    factory: () => new IdleScheduler(),\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector, ɵɵdefineInjectable} from '../di';\nimport {arrayInsert2, arraySplice} from '../util/array_utils';\nimport {NgZone} from '../zone';\n\n/**\n * Returns a function that captures a provided delay.\n * Invoking the returned function schedules a trigger.\n */\nexport function onTimer(delay: number) {\n  return (callback: VoidFunction, injector: Injector) =>\n    scheduleTimerTrigger(delay, callback, injector);\n}\n\n/**\n * Schedules a callback to be invoked after a given timeout.\n *\n * @param delay A number of ms to wait until firing a callback.\n * @param callback A function to be invoked after a timeout.\n * @param injector injector for the app.\n */\nexport function scheduleTimerTrigger(delay: number, callback: VoidFunction, injector: Injector) {\n  const scheduler = injector.get(TimerScheduler);\n  const ngZone = injector.get(NgZone);\n  const cleanupFn = () => scheduler.remove(callback);\n  scheduler.add(delay, callback, ngZone);\n  return cleanupFn;\n}\n\n/**\n * Helper service to schedule `setTimeout`s for batches of defer blocks,\n * to avoid calling `setTimeout` for each defer block (e.g. if defer blocks\n * are created inside a for loop).\n */\nexport class TimerScheduler {\n  // Indicates whether current callbacks are being invoked.\n  executingCallbacks = false;\n\n  // Currently scheduled `setTimeout` id.\n  timeoutId: number | null = null;\n\n  // When currently scheduled timer would fire.\n  invokeTimerAt: number | null = null;\n\n  // List of callbacks to be invoked.\n  // For each callback we also store a timestamp on when the callback\n  // should be invoked. We store timestamps and callback functions\n  // in a flat array to avoid creating new objects for each entry.\n  // [timestamp1, callback1, timestamp2, callback2, ...]\n  current: Array<number | VoidFunction> = [];\n\n  // List of callbacks collected while invoking current set of callbacks.\n  // Those callbacks are added to the \"current\" queue at the end of\n  // the current callback invocation. The shape of this list is the same\n  // as the shape of the `current` list.\n  deferred: Array<number | VoidFunction> = [];\n\n  add(delay: number, callback: VoidFunction, ngZone: NgZone) {\n    const target = this.executingCallbacks ? this.deferred : this.current;\n    this.addToQueue(target, Date.now() + delay, callback);\n    this.scheduleTimer(ngZone);\n  }\n\n  remove(callback: VoidFunction) {\n    const {current, deferred} = this;\n    const callbackIndex = this.removeFromQueue(current, callback);\n    if (callbackIndex === -1) {\n      // Try cleaning up deferred queue only in case\n      // we didn't find a callback in the \"current\" queue.\n      this.removeFromQueue(deferred, callback);\n    }\n    // If the last callback was removed and there is a pending timeout - cancel it.\n    if (current.length === 0 && deferred.length === 0) {\n      this.clearTimeout();\n    }\n  }\n\n  private addToQueue(\n    target: Array<number | VoidFunction>,\n    invokeAt: number,\n    callback: VoidFunction,\n  ) {\n    let insertAtIndex = target.length;\n    for (let i = 0; i < target.length; i += 2) {\n      const invokeQueuedCallbackAt = target[i] as number;\n      if (invokeQueuedCallbackAt > invokeAt) {\n        // We've reached a first timer that is scheduled\n        // for a later time than what we are trying to insert.\n        // This is the location at which we need to insert,\n        // no need to iterate further.\n        insertAtIndex = i;\n        break;\n      }\n    }\n    arrayInsert2(target, insertAtIndex, invokeAt, callback);\n  }\n\n  private removeFromQueue(target: Array<number | VoidFunction>, callback: VoidFunction) {\n    let index = -1;\n    for (let i = 0; i < target.length; i += 2) {\n      const queuedCallback = target[i + 1];\n      if (queuedCallback === callback) {\n        index = i;\n        break;\n      }\n    }\n    if (index > -1) {\n      // Remove 2 elements: a timestamp slot and\n      // the following slot with a callback function.\n      arraySplice(target, index, 2);\n    }\n    return index;\n  }\n\n  private scheduleTimer(ngZone: NgZone) {\n    const callback = () => {\n      this.clearTimeout();\n\n      this.executingCallbacks = true;\n\n      // Clone the current state of the queue, since it might be altered\n      // as we invoke callbacks.\n      const current = [...this.current];\n\n      // Invoke callbacks that were scheduled to run before the current time.\n      const now = Date.now();\n      for (let i = 0; i < current.length; i += 2) {\n        const invokeAt = current[i] as number;\n        const callback = current[i + 1] as VoidFunction;\n        if (invokeAt <= now) {\n          callback();\n        } else {\n          // We've reached a timer that should not be invoked yet.\n          break;\n        }\n      }\n      // The state of the queue might've changed after callbacks invocation,\n      // run the cleanup logic based on the *current* state of the queue.\n      let lastCallbackIndex = -1;\n      for (let i = 0; i < this.current.length; i += 2) {\n        const invokeAt = this.current[i] as number;\n        if (invokeAt <= now) {\n          // Add +1 to account for a callback function that\n          // goes after the timestamp in events array.\n          lastCallbackIndex = i + 1;\n        } else {\n          // We've reached a timer that should not be invoked yet.\n          break;\n        }\n      }\n      if (lastCallbackIndex >= 0) {\n        arraySplice(this.current, 0, lastCallbackIndex + 1);\n      }\n\n      this.executingCallbacks = false;\n\n      // If there are any callbacks added during an invocation\n      // of the current ones - move them over to the \"current\"\n      // queue.\n      if (this.deferred.length > 0) {\n        for (let i = 0; i < this.deferred.length; i += 2) {\n          const invokeAt = this.deferred[i] as number;\n          const callback = this.deferred[i + 1] as VoidFunction;\n          this.addToQueue(this.current, invokeAt, callback);\n        }\n        this.deferred.length = 0;\n      }\n      this.scheduleTimer(ngZone);\n    };\n\n    // Avoid running timer callbacks more than once per\n    // average frame duration. This is needed for better\n    // batching and to avoid kicking off excessive change\n    // detection cycles.\n    const FRAME_DURATION_MS = 16; // 1000ms / 60fps\n\n    if (this.current.length > 0) {\n      const now = Date.now();\n      // First element in the queue points at the timestamp\n      // of the first (earliest) event.\n      const invokeAt = this.current[0] as number;\n      if (\n        this.timeoutId === null ||\n        // Reschedule a timer in case a queue contains an item with\n        // an earlier timestamp and the delta is more than an average\n        // frame duration.\n        (this.invokeTimerAt && this.invokeTimerAt - invokeAt > FRAME_DURATION_MS)\n      ) {\n        // There was a timeout already, but an earlier event was added\n        // into the queue. In this case we drop an old timer and setup\n        // a new one with an updated (smaller) timeout.\n        this.clearTimeout();\n\n        const timeout = Math.max(invokeAt - now, FRAME_DURATION_MS);\n        this.invokeTimerAt = invokeAt;\n        this.timeoutId = ngZone.runOutsideAngular(() => {\n          return setTimeout(() => ngZone.run(callback), timeout) as unknown as number;\n        });\n      }\n    }\n  }\n\n  private clearTimeout() {\n    if (this.timeoutId !== null) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n  }\n\n  ngOnDestroy() {\n    this.clearTimeout();\n    this.current.length = 0;\n    this.deferred.length = 0;\n  }\n\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ ɵɵdefineInjectable({\n    token: TimerScheduler,\n    providedIn: 'root',\n    factory: () => new TimerScheduler(),\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵɵdefineInjectable as defineInjectable} from './di/interface/defs';\nimport {Provider} from './di/interface/provider';\nimport {EnvironmentInjector} from './di/r3_injector';\nimport {OnDestroy} from './interface/lifecycle_hooks';\nimport {createEnvironmentInjector} from './render3/ng_module_ref';\n\n/**\n * A service used by the framework to create and cache injector instances.\n *\n * This service is used to create a single injector instance for each defer\n * block definition, to avoid creating an injector for each defer block instance\n * of a certain type.\n */\nexport class CachedInjectorService implements OnDestroy {\n  private cachedInjectors = new Map<unknown, EnvironmentInjector | null>();\n\n  getOrCreateInjector(\n    key: unknown,\n    parentInjector: EnvironmentInjector,\n    providers: Provider[],\n    debugName?: string,\n  ) {\n    if (!this.cachedInjectors.has(key)) {\n      const injector =\n        providers.length > 0\n          ? createEnvironmentInjector(providers, parentInjector, debugName)\n          : null;\n      this.cachedInjectors.set(key, injector);\n    }\n    return this.cachedInjectors.get(key)!;\n  }\n\n  ngOnDestroy() {\n    try {\n      for (const injector of this.cachedInjectors.values()) {\n        if (injector !== null) {\n          injector.destroy();\n        }\n      }\n    } finally {\n      this.cachedInjectors.clear();\n    }\n  }\n\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ defineInjectable({\n    token: CachedInjectorService,\n    providedIn: 'environment',\n    factory: () => new CachedInjectorService(),\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {CachedInjectorService} from '../cached_injector_service';\nimport {NotificationSource} from '../change_detection/scheduling/zoneless_scheduling';\nimport {EnvironmentInjector, InjectionToken, Injector, Provider} from '../di';\nimport {\n  DehydratedContainerView,\n  DEFER_BLOCK_STATE as SERIALIZED_DEFER_BLOCK_STATE,\n} from '../hydration/interfaces';\nimport {assertLContainer, assertTNodeForLView} from '../render3/assert';\nimport {ChainedInjector} from '../render3/chained_injector';\nimport {markViewDirty} from '../render3/instructions/mark_view_dirty';\nimport {handleError} from '../render3/instructions/shared';\nimport {DEHYDRATED_VIEWS, LContainer} from '../render3/interfaces/container';\nimport {TContainerNode, TNode} from '../render3/interfaces/node';\nimport {isDestroyed} from '../render3/interfaces/type_checks';\nimport {HEADER_OFFSET, INJECTOR, LView, PARENT, TVIEW, TView} from '../render3/interfaces/view';\nimport {getConstant, getTNode} from '../render3/util/view_utils';\nimport {createAndRenderEmbeddedLView, shouldAddViewToDom} from '../render3/view_manipulation';\nimport {assertDefined} from '../util/assert';\n\nimport {\n  DEFER_BLOCK_STATE,\n  DeferBlockConfig,\n  DeferBlockDependencyInterceptor,\n  DeferBlockInternalState,\n  DeferBlockState,\n  DeferDependenciesLoadingState,\n  DeferredLoadingBlockConfig,\n  DeferredPlaceholderBlockConfig,\n  LDeferBlockDetails,\n  LOADING_AFTER_CLEANUP_FN,\n  NEXT_DEFER_BLOCK_STATE,\n  ON_COMPLETE_FNS,\n  SSR_BLOCK_STATE,\n  STATE_IS_FROZEN_UNTIL,\n  TDeferBlockDetails,\n} from './interfaces';\nimport {scheduleTimerTrigger} from './timer_scheduler';\nimport {\n  assertDeferredDependenciesLoaded,\n  getLDeferBlockDetails,\n  getLoadingBlockAfter,\n  getMinimumDurationForState,\n  getTDeferBlockDetails,\n  getTemplateIndexForState,\n} from './utils';\nimport {profiler} from '../render3/profiler';\nimport {ProfilerEvent} from '../render3/profiler_types';\nimport {addLViewToLContainer, removeLViewFromLContainer} from '../render3/view/container';\n\n/**\n * **INTERNAL**, avoid referencing it in application code.\n * *\n * Injector token that allows to provide `DeferBlockDependencyInterceptor` class\n * implementation.\n *\n * This token is only injected in devMode\n */\nexport const DEFER_BLOCK_DEPENDENCY_INTERCEPTOR =\n  /* @__PURE__ */ new InjectionToken<DeferBlockDependencyInterceptor>(\n    'DEFER_BLOCK_DEPENDENCY_INTERCEPTOR',\n  );\n\n/**\n * **INTERNAL**, token used for configuring defer block behavior.\n */\nexport const DEFER_BLOCK_CONFIG = new InjectionToken<DeferBlockConfig>(\n  ngDevMode ? 'DEFER_BLOCK_CONFIG' : '',\n);\n\n/**\n * Checks whether there is a cached injector associated with a given defer block\n * declaration and returns if it exists. If there is no cached injector present -\n * creates a new injector and stores in the cache.\n */\nfunction getOrCreateEnvironmentInjector(\n  parentInjector: Injector,\n  tDetails: TDeferBlockDetails,\n  providers: Provider[],\n) {\n  return parentInjector\n    .get(CachedInjectorService)\n    .getOrCreateInjector(\n      tDetails,\n      parentInjector as EnvironmentInjector,\n      providers,\n      ngDevMode ? 'DeferBlock Injector' : '',\n    );\n}\n\n/** Injector Helpers */\n\n/**\n * Creates a new injector, which contains providers collected from dependencies (NgModules) of\n * defer-loaded components. This function detects different types of parent injectors and creates\n * a new injector based on that.\n */\nfunction createDeferBlockInjector(\n  parentInjector: Injector,\n  tDetails: TDeferBlockDetails,\n  providers: Provider[],\n) {\n  // Check if the parent injector is an instance of a `ChainedInjector`.\n  //\n  // In this case, we retain the shape of the injector and use a newly created\n  // `EnvironmentInjector` as a parent in the `ChainedInjector`. That is needed to\n  // make sure that the primary injector gets consulted first (since it's typically\n  // a NodeInjector) and `EnvironmentInjector` tree is consulted after that.\n  if (parentInjector instanceof ChainedInjector) {\n    const origInjector = parentInjector.injector;\n    // Guaranteed to be an environment injector\n    const parentEnvInjector = parentInjector.parentInjector;\n\n    const envInjector = getOrCreateEnvironmentInjector(parentEnvInjector, tDetails, providers);\n    return new ChainedInjector(origInjector, envInjector);\n  }\n\n  const parentEnvInjector = parentInjector.get(EnvironmentInjector);\n\n  // If the `parentInjector` is *not* an `EnvironmentInjector` - we need to create\n  // a new `ChainedInjector` with the following setup:\n  //\n  //  - the provided `parentInjector` becomes a primary injector\n  //  - an existing (real) `EnvironmentInjector` becomes a parent injector for\n  //    a newly-created one, which contains extra providers\n  //\n  // So the final order in which injectors would be consulted in this case would look like this:\n  //\n  //  1. Provided `parentInjector`\n  //  2. Newly-created `EnvironmentInjector` with extra providers\n  //  3. `EnvironmentInjector` from the `parentInjector`\n  if (parentEnvInjector !== parentInjector) {\n    const envInjector = getOrCreateEnvironmentInjector(parentEnvInjector, tDetails, providers);\n    return new ChainedInjector(parentInjector, envInjector);\n  }\n\n  // The `parentInjector` is an instance of an `EnvironmentInjector`.\n  // No need for special handling, we can use `parentInjector` as a\n  // parent injector directly.\n  return getOrCreateEnvironmentInjector(parentInjector, tDetails, providers);\n}\n\n/** Rendering Helpers */\n\n/**\n * Transitions a defer block to the new state. Updates the  necessary\n * data structures and renders corresponding block.\n *\n * @param newState New state that should be applied to the defer block.\n * @param tNode TNode that represents a defer block.\n * @param lContainer Represents an instance of a defer block.\n * @param skipTimerScheduling Indicates that `@loading` and `@placeholder` block\n *   should be rendered immediately, even if they have `after` or `minimum` config\n *   options setup. This flag to needed for testing APIs to transition defer block\n *   between states via `DeferFixture.render` method.\n */\nexport function renderDeferBlockState(\n  newState: DeferBlockState,\n  tNode: TNode,\n  lContainer: LContainer,\n  skipTimerScheduling = false,\n): void {\n  const hostLView = lContainer[PARENT];\n  const hostTView = hostLView[TVIEW];\n\n  // Check if this view is not destroyed. Since the loading process was async,\n  // the view might end up being destroyed by the time rendering happens.\n  if (isDestroyed(hostLView)) return;\n\n  // Make sure this TNode belongs to TView that represents host LView.\n  ngDevMode && assertTNodeForLView(tNode, hostLView);\n\n  const lDetails = getLDeferBlockDetails(hostLView, tNode);\n\n  ngDevMode && assertDefined(lDetails, 'Expected a defer block state defined');\n\n  const currentState = lDetails[DEFER_BLOCK_STATE];\n\n  const ssrState = lDetails[SSR_BLOCK_STATE];\n  if (ssrState !== null && newState < ssrState) {\n    return; // trying to render a previous state, exit\n  }\n\n  if (\n    isValidStateChange(currentState, newState) &&\n    isValidStateChange(lDetails[NEXT_DEFER_BLOCK_STATE] ?? -1, newState)\n  ) {\n    const tDetails = getTDeferBlockDetails(hostTView, tNode);\n    // Skips scheduling on the server since it can delay the server response.\n    const needsScheduling =\n      !skipTimerScheduling &&\n      (typeof ngServerMode === 'undefined' || !ngServerMode) &&\n      (getLoadingBlockAfter(tDetails) !== null ||\n        getMinimumDurationForState(tDetails, DeferBlockState.Loading) !== null ||\n        getMinimumDurationForState(tDetails, DeferBlockState.Placeholder));\n\n    if (ngDevMode && needsScheduling) {\n      assertDefined(\n        applyDeferBlockStateWithSchedulingImpl,\n        'Expected scheduling function to be defined',\n      );\n    }\n\n    const applyStateFn = needsScheduling\n      ? applyDeferBlockStateWithSchedulingImpl!\n      : applyDeferBlockState;\n    try {\n      applyStateFn(newState, lDetails, lContainer, tNode, hostLView);\n    } catch (error: unknown) {\n      handleError(hostLView, error);\n    }\n  }\n}\n\nfunction findMatchingDehydratedViewForDeferBlock(\n  lContainer: LContainer,\n  lDetails: LDeferBlockDetails,\n): {dehydratedView: DehydratedContainerView | null; dehydratedViewIx: number} {\n  const dehydratedViewIx =\n    lContainer[DEHYDRATED_VIEWS]?.findIndex(\n      (view: any) => view.data[SERIALIZED_DEFER_BLOCK_STATE] === lDetails[DEFER_BLOCK_STATE],\n    ) ?? -1;\n  const dehydratedView =\n    dehydratedViewIx > -1 ? lContainer[DEHYDRATED_VIEWS]![dehydratedViewIx] : null;\n  return {dehydratedView, dehydratedViewIx};\n}\n\n/**\n * Applies changes to the DOM to reflect a given state.\n */\nfunction applyDeferBlockState(\n  newState: DeferBlockState,\n  lDetails: LDeferBlockDetails,\n  lContainer: LContainer,\n  tNode: TNode,\n  hostLView: LView<unknown>,\n) {\n  profiler(ProfilerEvent.DeferBlockStateStart);\n\n  const stateTmplIndex = getTemplateIndexForState(newState, hostLView, tNode);\n\n  if (stateTmplIndex !== null) {\n    lDetails[DEFER_BLOCK_STATE] = newState;\n    const hostTView = hostLView[TVIEW];\n    const adjustedIndex = stateTmplIndex + HEADER_OFFSET;\n\n    // The TNode that represents a template that will activated in the defer block\n    const activeBlockTNode = getTNode(hostTView, adjustedIndex) as TContainerNode;\n\n    // There is only 1 view that can be present in an LContainer that\n    // represents a defer block, so always refer to the first one.\n    const viewIndex = 0;\n\n    removeLViewFromLContainer(lContainer, viewIndex);\n\n    let injector: Injector | undefined;\n    if (newState === DeferBlockState.Complete) {\n      // When we render a defer block in completed state, there might be\n      // newly loaded standalone components used within the block, which may\n      // import NgModules with providers. In order to make those providers\n      // available for components declared in that NgModule, we create an instance\n      // of an environment injector to host those providers and pass this injector\n      // to the logic that creates a view.\n      const tDetails = getTDeferBlockDetails(hostTView, tNode);\n      const providers = tDetails.providers;\n      if (providers && providers.length > 0) {\n        injector = createDeferBlockInjector(hostLView[INJECTOR], tDetails, providers);\n      }\n    }\n    const {dehydratedView, dehydratedViewIx} = findMatchingDehydratedViewForDeferBlock(\n      lContainer,\n      lDetails,\n    );\n\n    const embeddedLView = createAndRenderEmbeddedLView(hostLView, activeBlockTNode, null, {\n      injector,\n      dehydratedView,\n    });\n    addLViewToLContainer(\n      lContainer,\n      embeddedLView,\n      viewIndex,\n      shouldAddViewToDom(activeBlockTNode, dehydratedView),\n    );\n    markViewDirty(embeddedLView, NotificationSource.DeferBlockStateUpdate);\n\n    if (dehydratedViewIx > -1) {\n      // Erase dehydrated view info in a given LContainer, so that the view is not\n      // removed later by post-hydration cleanup process (which iterates over all\n      // dehydrated views in component tree). This clears only the dehydrated view\n      // that was found for this render, which in most cases will be the only view.\n      // In the case that there was control flow that changed, there may be either\n      // more than one or the views would not match up due to the server rendered\n      // content being a different branch of the control flow.\n      lContainer[DEHYDRATED_VIEWS]?.splice(dehydratedViewIx, 1);\n    }\n\n    if (\n      (newState === DeferBlockState.Complete || newState === DeferBlockState.Error) &&\n      Array.isArray(lDetails[ON_COMPLETE_FNS])\n    ) {\n      for (const callback of lDetails[ON_COMPLETE_FNS]) {\n        callback();\n      }\n      lDetails[ON_COMPLETE_FNS] = null;\n    }\n  }\n\n  profiler(ProfilerEvent.DeferBlockStateEnd);\n}\n\n/**\n * Extends the `applyDeferBlockState` with timer-based scheduling.\n * This function becomes available on a page if there are defer blocks\n * that use `after` or `minimum` parameters in the `@loading` or\n * `@placeholder` blocks.\n */\nfunction applyDeferBlockStateWithScheduling(\n  newState: DeferBlockState,\n  lDetails: LDeferBlockDetails,\n  lContainer: LContainer,\n  tNode: TNode,\n  hostLView: LView<unknown>,\n) {\n  const now = Date.now();\n  const hostTView = hostLView[TVIEW];\n  const tDetails = getTDeferBlockDetails(hostTView, tNode);\n\n  if (lDetails[STATE_IS_FROZEN_UNTIL] === null || lDetails[STATE_IS_FROZEN_UNTIL] <= now) {\n    lDetails[STATE_IS_FROZEN_UNTIL] = null;\n\n    const loadingAfter = getLoadingBlockAfter(tDetails);\n    const inLoadingAfterPhase = lDetails[LOADING_AFTER_CLEANUP_FN] !== null;\n    if (newState === DeferBlockState.Loading && loadingAfter !== null && !inLoadingAfterPhase) {\n      // Trying to render loading, but it has an `after` config,\n      // so schedule an update action after a timeout.\n      lDetails[NEXT_DEFER_BLOCK_STATE] = newState;\n      const cleanupFn = scheduleDeferBlockUpdate(\n        loadingAfter,\n        lDetails,\n        tNode,\n        lContainer,\n        hostLView,\n      );\n      lDetails[LOADING_AFTER_CLEANUP_FN] = cleanupFn;\n    } else {\n      // If we transition to a complete or an error state and there is a pending\n      // operation to render loading after a timeout - invoke a cleanup operation,\n      // which stops the timer.\n      if (newState > DeferBlockState.Loading && inLoadingAfterPhase) {\n        lDetails[LOADING_AFTER_CLEANUP_FN]!();\n        lDetails[LOADING_AFTER_CLEANUP_FN] = null;\n        lDetails[NEXT_DEFER_BLOCK_STATE] = null;\n      }\n\n      applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView);\n\n      const duration = getMinimumDurationForState(tDetails, newState);\n      if (duration !== null) {\n        lDetails[STATE_IS_FROZEN_UNTIL] = now + duration;\n        scheduleDeferBlockUpdate(duration, lDetails, tNode, lContainer, hostLView);\n      }\n    }\n  } else {\n    // We are still rendering the previous state.\n    // Update the `NEXT_DEFER_BLOCK_STATE`, which would be\n    // picked up once it's time to transition to the next state.\n    lDetails[NEXT_DEFER_BLOCK_STATE] = newState;\n  }\n}\n\n/**\n * Schedules an update operation after a specified timeout.\n */\nfunction scheduleDeferBlockUpdate(\n  timeout: number,\n  lDetails: LDeferBlockDetails,\n  tNode: TNode,\n  lContainer: LContainer,\n  hostLView: LView<unknown>,\n): VoidFunction {\n  const callback = () => {\n    const nextState = lDetails[NEXT_DEFER_BLOCK_STATE];\n    lDetails[STATE_IS_FROZEN_UNTIL] = null;\n    lDetails[NEXT_DEFER_BLOCK_STATE] = null;\n    if (nextState !== null) {\n      renderDeferBlockState(nextState, tNode, lContainer);\n    }\n  };\n  return scheduleTimerTrigger(timeout, callback, hostLView[INJECTOR]);\n}\n\n/**\n * Checks whether we can transition to the next state.\n *\n * We transition to the next state if the previous state was represented\n * with a number that is less than the next state. For example, if the current\n * state is \"loading\" (represented as `1`), we should not show a placeholder\n * (represented as `0`), but we can show a completed state (represented as `2`)\n * or an error state (represented as `3`).\n */\nfunction isValidStateChange(\n  currentState: DeferBlockState | DeferBlockInternalState,\n  newState: DeferBlockState,\n): boolean {\n  return currentState < newState;\n}\n\n/** Utility function to render placeholder content (if present) */\nexport function renderPlaceholder(lView: LView, tNode: TNode) {\n  const lContainer = lView[tNode.index];\n  ngDevMode && assertLContainer(lContainer);\n\n  renderDeferBlockState(DeferBlockState.Placeholder, tNode, lContainer);\n}\n\n/**\n * Subscribes to the \"loading\" Promise and renders corresponding defer sub-block,\n * based on the loading results.\n *\n * @param lContainer Represents an instance of a defer block.\n * @param tNode Represents defer block info shared across all instances.\n */\nexport function renderDeferStateAfterResourceLoading(\n  tDetails: TDeferBlockDetails,\n  tNode: TNode,\n  lContainer: LContainer,\n) {\n  ngDevMode &&\n    assertDefined(tDetails.loadingPromise, 'Expected loading Promise to exist on this defer block');\n\n  tDetails.loadingPromise!.then(() => {\n    if (tDetails.loadingState === DeferDependenciesLoadingState.COMPLETE) {\n      ngDevMode && assertDeferredDependenciesLoaded(tDetails);\n\n      // Everything is loaded, show the primary block content\n      renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);\n    } else if (tDetails.loadingState === DeferDependenciesLoadingState.FAILED) {\n      renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);\n    }\n  });\n}\n\n/**\n * Reference to the timer-based scheduler implementation of defer block state\n * rendering method. It's used to make timer-based scheduling tree-shakable.\n * If `minimum` or `after` parameters are used, compiler generates an extra\n * argument for the `ɵɵdefer` instruction, which references a timer-based\n * implementation.\n */\nlet applyDeferBlockStateWithSchedulingImpl: typeof applyDeferBlockState | null = null;\n\n/**\n * Enables timer-related scheduling if `after` or `minimum` parameters are setup\n * on the `@loading` or `@placeholder` blocks.\n */\nexport function ɵɵdeferEnableTimerScheduling(\n  tView: TView,\n  tDetails: TDeferBlockDetails,\n  placeholderConfigIndex?: number | null,\n  loadingConfigIndex?: number | null,\n) {\n  const tViewConsts = tView.consts;\n  if (placeholderConfigIndex != null) {\n    tDetails.placeholderBlockConfig = getConstant<DeferredPlaceholderBlockConfig>(\n      tViewConsts,\n      placeholderConfigIndex,\n    );\n  }\n  if (loadingConfigIndex != null) {\n    tDetails.loadingBlockConfig = getConstant<DeferredLoadingBlockConfig>(\n      tViewConsts,\n      loadingConfigIndex,\n    );\n  }\n\n  // Enable implementation that supports timer-based scheduling.\n  if (applyDeferBlockStateWithSchedulingImpl === null) {\n    applyDeferBlockStateWithSchedulingImpl = applyDeferBlockStateWithScheduling;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Type} from '../interface/type';\nimport {noSideEffects} from '../util/closure';\n\ninterface TypeWithMetadata extends Type<any> {\n  decorators?: any[];\n  ctorParameters?: () => any[];\n  propDecorators?: {[field: string]: any};\n}\n\n/**\n * The name of a field that Angular monkey-patches onto a component\n * class to store a function that loads defer-loadable dependencies\n * and applies metadata to a class.\n */\nconst ASYNC_COMPONENT_METADATA_FN = '__ngAsyncComponentMetadataFn__';\n\n/**\n * If a given component has unresolved async metadata - returns a reference\n * to a function that applies component metadata after resolving defer-loadable\n * dependencies. Otherwise - this function returns `null`.\n */\nexport function getAsyncClassMetadataFn(\n  type: Type<unknown>,\n): (() => Promise<Array<Type<unknown>>>) | null {\n  const componentClass = type as any; // cast to `any`, so that we can read a monkey-patched field\n  return componentClass[ASYNC_COMPONENT_METADATA_FN] ?? null;\n}\n\n/**\n * Handles the process of applying metadata info to a component class in case\n * component template has defer blocks (thus some dependencies became deferrable).\n *\n * @param type Component class where metadata should be added\n * @param dependencyLoaderFn Function that loads dependencies\n * @param metadataSetterFn Function that forms a scope in which the `setClassMetadata` is invoked\n */\nexport function setClassMetadataAsync(\n  type: Type<any>,\n  dependencyLoaderFn: () => Array<Promise<Type<unknown>>>,\n  metadataSetterFn: (...types: Type<unknown>[]) => void,\n): () => Promise<Array<Type<unknown>>> {\n  const componentClass = type as any; // cast to `any`, so that we can monkey-patch it\n  componentClass[ASYNC_COMPONENT_METADATA_FN] = () =>\n    Promise.all(dependencyLoaderFn()).then((dependencies) => {\n      metadataSetterFn(...dependencies);\n      // Metadata is now set, reset field value to indicate that this component\n      // can by used/compiled synchronously.\n      componentClass[ASYNC_COMPONENT_METADATA_FN] = null;\n\n      return dependencies;\n    });\n  return componentClass[ASYNC_COMPONENT_METADATA_FN];\n}\n\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be guarded by ngDevMode, resulting in the metadata assignments\n * being tree-shaken away during production builds.\n */\nexport function setClassMetadata(\n  type: Type<any>,\n  decorators: any[] | null,\n  ctorParameters: (() => any[]) | null,\n  propDecorators: {[field: string]: any} | null,\n): void {\n  return noSideEffects(() => {\n    const clazz = type as TypeWithMetadata;\n\n    if (decorators !== null) {\n      if (clazz.hasOwnProperty('decorators') && clazz.decorators !== undefined) {\n        clazz.decorators.push(...decorators);\n      } else {\n        clazz.decorators = decorators;\n      }\n    }\n    if (ctorParameters !== null) {\n      // Rather than merging, clobber the existing parameters. If other projects exist which\n      // use tsickle-style annotations and reflect over them in the same way, this could\n      // cause issues, but that is vanishingly unlikely.\n      clazz.ctorParameters = ctorParameters;\n    }\n    if (propDecorators !== null) {\n      // The property decorator objects are merged as it is possible different fields have\n      // different decorator types. Decorators on individual fields are not merged, as it's\n      // also incredibly unlikely that a field will be decorated both with an Angular\n      // decorator and a non-Angular decorator that's also been downleveled.\n      if (clazz.hasOwnProperty('propDecorators') && clazz.propDecorators !== undefined) {\n        clazz.propDecorators = {...clazz.propDecorators, ...propDecorators};\n      } else {\n        clazz.propDecorators = propDecorators;\n      }\n    }\n  }) as never;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable} from './di';\n\n@Injectable({providedIn: 'platform'})\nexport class Console {\n  log(message: string): void {\n    // tslint:disable-next-line:no-console\n    console.log(message);\n  }\n  // Note: for reporting errors use `DOM.logError()` as it is platform specific\n  warn(message: string): void {\n    console.warn(message);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Inject, Injectable, InjectionToken} from '../di';\nimport {NgZone} from '../zone/ng_zone';\n\n/**\n * Testability API.\n * `declare` keyword causes tsickle to generate externs, so these methods are\n * not renamed by Closure Compiler.\n * @publicApi\n */\nexport declare interface PublicTestability {\n  isStable(): boolean;\n  whenStable(callback: Function, timeout?: number, updateCallback?: Function): void;\n  findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\n\n// Angular internal, not intended for public API.\nexport interface PendingMacrotask {\n  source: string;\n  creationLocation: Error;\n  runCount?: number;\n  data?: TaskData;\n}\n\nexport interface TaskData {\n  target?: XMLHttpRequest;\n  delay?: number;\n  isPeriodic?: boolean;\n}\n\ninterface WaitCallback {\n  // Needs to be 'any' - setTimeout returns a number according to ES6, but\n  // on NodeJS it returns a Timer.\n  timeoutId: any;\n  doneCb: Function;\n  updateCb?: Function;\n}\n\n/**\n * Internal injection token that can used to access an instance of a Testability class.\n *\n * This token acts as a bridge between the core bootstrap code and the `Testability` class. This is\n * needed to ensure that there are no direct references to the `Testability` class, so it can be\n * tree-shaken away (if not referenced). For the environments/setups when the `Testability` class\n * should be available, this token is used to add a provider that references the `Testability`\n * class. Otherwise, only this token is retained in a bundle, but the `Testability` class is not.\n */\nexport const TESTABILITY = new InjectionToken<Testability>('');\n\n/**\n * Internal injection token to retrieve Testability getter class instance.\n */\nexport const TESTABILITY_GETTER = new InjectionToken<GetTestability>('');\n\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser.\n *\n * Angular applications bootstrapped using an NgModule (via `@NgModule.bootstrap` field) will also\n * instantiate Testability by default (in both development and production modes).\n *\n * For applications bootstrapped using the `bootstrapApplication` function, Testability is not\n * included by default. You can include it into your applications by getting the list of necessary\n * providers using the `provideProtractorTestingSupport()` function and adding them into the\n * `options.providers` array. Example:\n *\n * ```ts\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, providers: [provideProtractorTestingSupport()]);\n * ```\n *\n * @publicApi\n */\n@Injectable()\nexport class Testability implements PublicTestability {\n  private _isZoneStable: boolean = true;\n  private _callbacks: WaitCallback[] = [];\n\n  private taskTrackingZone: {macroTasks: Task[]} | null = null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private registry: TestabilityRegistry,\n    @Inject(TESTABILITY_GETTER) testabilityGetter: GetTestability,\n  ) {\n    // If there was no Testability logic registered in the global scope\n    // before, register the current testability getter as a global one.\n    if (!_testabilityGetter) {\n      setTestabilityGetter(testabilityGetter);\n      testabilityGetter.addToWindow(registry);\n    }\n    this._watchAngularEvents();\n    _ngZone.run(() => {\n      this.taskTrackingZone =\n        typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n    });\n  }\n\n  private _watchAngularEvents(): void {\n    this._ngZone.onUnstable.subscribe({\n      next: () => {\n        this._isZoneStable = false;\n      },\n    });\n\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.subscribe({\n        next: () => {\n          NgZone.assertNotInAngularZone();\n          queueMicrotask(() => {\n            this._isZoneStable = true;\n            this._runCallbacksIfReady();\n          });\n        },\n      });\n    });\n  }\n\n  /**\n   * Whether an associated application is stable\n   */\n  isStable(): boolean {\n    return this._isZoneStable && !this._ngZone.hasPendingMacrotasks;\n  }\n\n  private _runCallbacksIfReady(): void {\n    if (this.isStable()) {\n      // Schedules the call backs in a new frame so that it is always async.\n      queueMicrotask(() => {\n        while (this._callbacks.length !== 0) {\n          let cb = this._callbacks.pop()!;\n          clearTimeout(cb.timeoutId);\n          cb.doneCb();\n        }\n      });\n    } else {\n      // Still not stable, send updates.\n      let pending = this.getPendingTasks();\n      this._callbacks = this._callbacks.filter((cb) => {\n        if (cb.updateCb && cb.updateCb(pending)) {\n          clearTimeout(cb.timeoutId);\n          return false;\n        }\n\n        return true;\n      });\n    }\n  }\n\n  private getPendingTasks(): PendingMacrotask[] {\n    if (!this.taskTrackingZone) {\n      return [];\n    }\n\n    // Copy the tasks data so that we don't leak tasks.\n    return this.taskTrackingZone.macroTasks.map((t: Task) => {\n      return {\n        source: t.source,\n        // From TaskTrackingZone:\n        // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n        creationLocation: (t as any).creationLocation as Error,\n        data: t.data,\n      };\n    });\n  }\n\n  private addCallback(cb: Function, timeout?: number, updateCb?: Function) {\n    let timeoutId: any = -1;\n    if (timeout && timeout > 0) {\n      timeoutId = setTimeout(() => {\n        this._callbacks = this._callbacks.filter((cb) => cb.timeoutId !== timeoutId);\n        cb();\n      }, timeout);\n    }\n    this._callbacks.push(<WaitCallback>{doneCb: cb, timeoutId: timeoutId, updateCb: updateCb});\n  }\n\n  /**\n   * Wait for the application to be stable with a timeout. If the timeout is reached before that\n   * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n   *\n   * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n   *    whichever comes first.\n   * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n   *    specified, whenStable() will wait forever.\n   * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n   *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n   *    and no further updates will be issued.\n   */\n  whenStable(doneCb: Function, timeout?: number, updateCb?: Function): void {\n    if (updateCb && !this.taskTrackingZone) {\n      throw new Error(\n        'Task tracking zone is required when passing an update callback to ' +\n          'whenStable(). Is \"zone.js/plugins/task-tracking\" loaded?',\n      );\n    }\n    this.addCallback(doneCb, timeout, updateCb);\n    this._runCallbacksIfReady();\n  }\n\n  /**\n   * Registers an application with a testability hook so that it can be tracked.\n   * @param token token of application, root element\n   *\n   * @internal\n   */\n  registerApplication(token: any) {\n    this.registry.registerApplication(token, this);\n  }\n\n  /**\n   * Unregisters an application.\n   * @param token token of application, root element\n   *\n   * @internal\n   */\n  unregisterApplication(token: any) {\n    this.registry.unregisterApplication(token);\n  }\n\n  /**\n   * Find providers by name\n   * @param using The root element to search from\n   * @param provider The name of binding variable\n   * @param exactMatch Whether using exactMatch\n   */\n  findProviders(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\n}\n\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @publicApi\n */\n@Injectable({providedIn: 'platform'})\nexport class TestabilityRegistry {\n  /** @internal */\n  _applications = new Map<any, Testability>();\n\n  /**\n   * Registers an application with a testability hook so that it can be tracked\n   * @param token token of application, root element\n   * @param testability Testability hook\n   */\n  registerApplication(token: any, testability: Testability) {\n    this._applications.set(token, testability);\n  }\n\n  /**\n   * Unregisters an application.\n   * @param token token of application, root element\n   */\n  unregisterApplication(token: any) {\n    this._applications.delete(token);\n  }\n\n  /**\n   * Unregisters all applications\n   */\n  unregisterAllApplications() {\n    this._applications.clear();\n  }\n\n  /**\n   * Get a testability hook associated with the application\n   * @param elem root element\n   */\n  getTestability(elem: any): Testability | null {\n    return this._applications.get(elem) || null;\n  }\n\n  /**\n   * Get all registered testabilities\n   */\n  getAllTestabilities(): Testability[] {\n    return Array.from(this._applications.values());\n  }\n\n  /**\n   * Get all registered applications(root elements)\n   */\n  getAllRootElements(): any[] {\n    return Array.from(this._applications.keys());\n  }\n\n  /**\n   * Find testability of a node in the Tree\n   * @param elem node\n   * @param findInAncestors whether finding testability in ancestors if testability was not found in\n   * current node\n   */\n  findTestabilityInTree(elem: Node, findInAncestors: boolean = true): Testability | null {\n    return _testabilityGetter?.findTestabilityInTree(this, elem, findInAncestors) ?? null;\n  }\n}\n\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * @publicApi\n */\nexport interface GetTestability {\n  addToWindow(registry: TestabilityRegistry): void;\n  findTestabilityInTree(\n    registry: TestabilityRegistry,\n    elem: any,\n    findInAncestors: boolean,\n  ): Testability | null;\n}\n\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @publicApi\n */\nexport function setTestabilityGetter(getter: GetTestability): void {\n  _testabilityGetter = getter;\n}\n\nlet _testabilityGetter: GetTestability | undefined;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵɵdefineInjectable} from '../../di/interface/defs';\nimport {PendingTasksInternal} from '../../pending_tasks';\nimport {inject} from '../../di/injector_compatibility';\n\n/**\n * Abstraction that encompasses any kind of effect that can be scheduled.\n */\nexport interface SchedulableEffect {\n  run(): void;\n  zone: {\n    run<T>(fn: () => T): T;\n  } | null;\n}\n\n/**\n * A scheduler which manages the execution of effects.\n */\nexport abstract class EffectScheduler {\n  /**\n   * Schedule the given effect to be executed at a later time.\n   *\n   * It is an error to attempt to execute any effects synchronously during a scheduling operation.\n   */\n  abstract schedule(e: SchedulableEffect): void;\n\n  /**\n   * Run any scheduled effects.\n   */\n  abstract flush(): void;\n\n  /** Remove a scheduled effect */\n  abstract remove(e: SchedulableEffect): void;\n\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ ɵɵdefineInjectable({\n    token: EffectScheduler,\n    providedIn: 'root',\n    factory: () => new ZoneAwareEffectScheduler(),\n  });\n}\n\n/**\n * A wrapper around `ZoneAwareQueueingScheduler` that schedules flushing via the microtask queue\n * when.\n */\nexport class ZoneAwareEffectScheduler implements EffectScheduler {\n  private queuedEffectCount = 0;\n  private queues = new Map<Zone | null, Set<SchedulableEffect>>();\n\n  schedule(handle: SchedulableEffect): void {\n    this.enqueue(handle);\n  }\n\n  remove(handle: SchedulableEffect): void {\n    const zone = handle.zone as Zone | null;\n    const queue = this.queues.get(zone)!;\n    if (!queue.has(handle)) {\n      return;\n    }\n\n    queue.delete(handle);\n    this.queuedEffectCount--;\n  }\n\n  private enqueue(handle: SchedulableEffect): void {\n    const zone = handle.zone as Zone | null;\n    if (!this.queues.has(zone)) {\n      this.queues.set(zone, new Set());\n    }\n\n    const queue = this.queues.get(zone)!;\n    if (queue.has(handle)) {\n      return;\n    }\n    this.queuedEffectCount++;\n    queue.add(handle);\n  }\n\n  /**\n   * Run all scheduled effects.\n   *\n   * Execution order of effects within the same zone is guaranteed to be FIFO, but there is no\n   * ordering guarantee between effects scheduled in different zones.\n   */\n  flush(): void {\n    while (this.queuedEffectCount > 0) {\n      for (const [zone, queue] of this.queues) {\n        // `zone` here must be defined.\n        if (zone === null) {\n          this.flushQueue(queue);\n        } else {\n          zone.run(() => this.flushQueue(queue));\n        }\n      }\n    }\n  }\n\n  private flushQueue(queue: Set<SchedulableEffect>): void {\n    for (const handle of queue) {\n      queue.delete(handle);\n      this.queuedEffectCount--;\n\n      // TODO: what happens if this throws an error?\n      handle.run();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Subscribable} from 'rxjs';\n\n/**\n * Determine if the argument is shaped like a Promise\n */\nexport function isPromise<T = any>(obj: any): obj is Promise<T> {\n  // allow any Promise/A+ compliant thenable.\n  // It's up to the caller to ensure that obj.then conforms to the spec\n  return !!obj && typeof obj.then === 'function';\n}\n\n/**\n * Determine if the argument is a Subscribable\n */\nexport function isSubscribable<T>(obj: any | Subscribable<T>): obj is Subscribable<T> {\n  return !!obj && typeof obj.subscribe === 'function';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {\n  EnvironmentProviders,\n  inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  makeEnvironmentProviders,\n  runInInjectionContext,\n} from '../di';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {isPromise, isSubscribable} from '../util/lang';\n\n/**\n * A DI token that you can use to provide\n * one or more initialization functions.\n *\n * The provided functions are injected at application startup and executed during\n * app initialization. If any of these functions returns a Promise or an Observable, initialization\n * does not complete until the Promise is resolved or the Observable is completed.\n *\n * You can, for example, create a factory function that loads language data\n * or an external configuration, and provide that function to the `APP_INITIALIZER` token.\n * The function is executed during the application bootstrap process,\n * and the needed data is available on startup.\n *\n * Note that the provided initializer is run in the injection context.\n *\n * @deprecated from v19.0.0, use provideAppInitializer instead\n *\n * @see {@link ApplicationInitStatus}\n * @see {@link provideAppInitializer}\n *\n * @usageNotes\n *\n * The following example illustrates how to configure a multi-provider using `APP_INITIALIZER` token\n * and a function returning a promise.\n * ### Example with NgModule-based application\n * ```ts\n *  function initializeApp(): Promise<any> {\n *    const http = inject(HttpClient);\n *    return firstValueFrom(\n *      http\n *        .get(\"https://someUrl.com/api/user\")\n *        .pipe(tap(user => { ... }))\n *    );\n *  }\n *\n *  @NgModule({\n *   imports: [BrowserModule],\n *   declarations: [AppComponent],\n *   bootstrap: [AppComponent],\n *   providers: [{\n *     provide: APP_INITIALIZER,\n *     useValue: initializeApp,\n *     multi: true,\n *    }]\n *   })\n *  export class AppModule {}\n * ```\n *\n * ### Example with standalone application\n * ```ts\n * function initializeApp() {\n *   const http = inject(HttpClient);\n *   return firstValueFrom(\n *     http\n *       .get(\"https://someUrl.com/api/user\")\n *       .pipe(tap(user => { ... }))\n *   );\n * }\n *\n * bootstrapApplication(App, {\n *   providers: [\n *     provideHttpClient(),\n *     {\n *       provide: APP_INITIALIZER,\n *       useValue: initializeApp,\n *       multi: true,\n *     },\n *   ],\n * });\n\n * ```\n *\n *\n * It's also possible to configure a multi-provider using `APP_INITIALIZER` token and a function\n * returning an observable, see an example below. Note: the `HttpClient` in this example is used for\n * demo purposes to illustrate how the factory function can work with other providers available\n * through DI.\n *\n * ### Example with NgModule-based application\n * ```ts\n * function initializeApp() {\n *   const http = inject(HttpClient);\n *   return firstValueFrom(\n *     http\n *       .get(\"https://someUrl.com/api/user\")\n *       .pipe(tap(user => { ... }))\n *   );\n * }\n *\n * @NgModule({\n *   imports: [BrowserModule, HttpClientModule],\n *   declarations: [AppComponent],\n *   bootstrap: [AppComponent],\n *   providers: [{\n *     provide: APP_INITIALIZER,\n *     useValue: initializeApp,\n *     multi: true,\n *   }]\n * })\n * export class AppModule {}\n * ```\n *\n * ### Example with standalone application\n * ```ts\n * function initializeApp() {\n *   const http = inject(HttpClient);\n *   return firstValueFrom(\n *     http\n *       .get(\"https://someUrl.com/api/user\")\n *       .pipe(tap(user => { ... }))\n *   );\n * }\n *\n * bootstrapApplication(App, {\n *   providers: [\n *     provideHttpClient(),\n *     {\n *       provide: APP_INITIALIZER,\n *       useValue: initializeApp,\n *       multi: true,\n *     },\n *   ],\n * });\n * ```\n *\n * @publicApi\n */\nexport const APP_INITIALIZER = new InjectionToken<\n  ReadonlyArray<() => Observable<unknown> | Promise<unknown> | void>\n>(ngDevMode ? 'Application Initializer' : '');\n\n/**\n * @description\n * The provided function is injected at application startup and executed during\n * app initialization. If the function returns a Promise or an Observable, initialization\n * does not complete until the Promise is resolved or the Observable is completed.\n *\n * You can, for example, create a function that loads language data\n * or an external configuration, and provide that function using `provideAppInitializer()`.\n * The function is executed during the application bootstrap process,\n * and the needed data is available on startup.\n *\n * Note that the provided initializer is run in the injection context.\n *\n * Previously, this was achieved using the `APP_INITIALIZER` token which is now deprecated.\n *\n * @see {@link APP_INITIALIZER}\n *\n * @usageNotes\n * The following example illustrates how to configure an initialization function using\n * `provideAppInitializer()`\n * ```ts\n * bootstrapApplication(App, {\n *   providers: [\n *     provideAppInitializer(() => {\n *       const http = inject(HttpClient);\n *       return firstValueFrom(\n *         http\n *           .get(\"https://someUrl.com/api/user\")\n *           .pipe(tap(user => { ... }))\n *       );\n *     }),\n *     provideHttpClient(),\n *   ],\n * });\n * ```\n *\n * @publicApi\n */\nexport function provideAppInitializer(\n  initializerFn: () => Observable<unknown> | Promise<unknown> | void,\n): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useValue: initializerFn,\n    },\n  ]);\n}\n\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER} functions.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class ApplicationInitStatus {\n  // Using non null assertion, these fields are defined below\n  // within the `new Promise` callback (synchronously).\n  private resolve!: (...args: any[]) => void;\n  private reject!: (...args: any[]) => void;\n\n  private initialized = false;\n  public readonly done = false;\n  public readonly donePromise: Promise<any> = new Promise((res, rej) => {\n    this.resolve = res;\n    this.reject = rej;\n  });\n\n  private readonly appInits = inject(APP_INITIALIZER, {optional: true}) ?? [];\n  private readonly injector = inject(Injector);\n\n  constructor() {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !Array.isArray(this.appInits)) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_MULTI_PROVIDER,\n        'Unexpected type of the `APP_INITIALIZER` token value ' +\n          `(expected an array, but got ${typeof this.appInits}). ` +\n          'Please check that the `APP_INITIALIZER` token is configured as a ' +\n          '`multi: true` provider.',\n      );\n    }\n  }\n\n  /** @internal */\n  runInitializers() {\n    if (this.initialized) {\n      return;\n    }\n\n    const asyncInitPromises = [];\n    for (const appInits of this.appInits) {\n      const initResult = runInInjectionContext(this.injector, appInits);\n      if (isPromise(initResult)) {\n        asyncInitPromises.push(initResult);\n      } else if (isSubscribable(initResult)) {\n        const observableAsPromise = new Promise<void>((resolve, reject) => {\n          initResult.subscribe({complete: resolve, error: reject});\n        });\n        asyncInitPromises.push(observableAsPromise);\n      }\n    }\n\n    const complete = () => {\n      // @ts-expect-error overwriting a readonly\n      this.done = true;\n      this.resolve();\n    };\n\n    Promise.all(asyncInitPromises)\n      .then(() => {\n        complete();\n      })\n      .catch((e) => {\n        this.reject(e);\n      });\n\n    if (asyncInitPromises.length === 0) {\n      complete();\n    }\n    this.initialized = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport '../util/ng_jit_mode';\nimport '../util/ng_server_mode';\n\nimport {\n  setActiveConsumer,\n  setThrowInvalidWriteToSignalError,\n} from '@angular/core/primitives/signals';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {ZONELESS_ENABLED} from '../change_detection/scheduling/zoneless_scheduling';\nimport {Console} from '../console';\nimport {inject} from '../di';\nimport {Injectable} from '../di/injectable';\nimport {InjectionToken} from '../di/injection_token';\nimport {Injector} from '../di/injector';\nimport {EnvironmentInjector, type R3Injector} from '../di/r3_injector';\nimport {ErrorHandler, INTERNAL_APPLICATION_ERROR_HANDLER} from '../error_handler';\nimport {formatRuntimeError, RuntimeError, RuntimeErrorCode} from '../errors';\nimport {Type} from '../interface/type';\nimport {ComponentFactory, ComponentRef} from '../linker/component_factory';\nimport {ComponentFactoryResolver} from '../linker/component_factory_resolver';\nimport {NgModuleRef} from '../linker/ng_module_factory';\nimport {ViewRef} from '../linker/view_ref';\nimport {PendingTasksInternal} from '../pending_tasks';\nimport {RendererFactory2} from '../render/api';\nimport {AfterRenderManager} from '../render3/after_render/manager';\nimport {ComponentFactory as R3ComponentFactory} from '../render3/component_ref';\nimport {isStandalone} from '../render3/def_getters';\nimport {ChangeDetectionMode, detectChangesInternal} from '../render3/instructions/change_detection';\nimport {LView} from '../render3/interfaces/view';\nimport {publishDefaultGlobalUtils as _publishDefaultGlobalUtils} from '../render3/util/global_utils';\nimport {requiresRefreshOrTraversal} from '../render3/util/view_utils';\nimport {ViewRef as InternalViewRef} from '../render3/view_ref';\nimport {TESTABILITY} from '../testability/testability';\nimport {NgZone} from '../zone/ng_zone';\n\nimport {profiler} from '../render3/profiler';\nimport {ProfilerEvent} from '../render3/profiler_types';\nimport {EffectScheduler} from '../render3/reactivity/root_effect_scheduler';\nimport {ApplicationInitStatus} from './application_init';\nimport {TracingAction, TracingService, TracingSnapshot} from './tracing';\n\n/**\n * A DI token that provides a set of callbacks to\n * be called for every component that is bootstrapped.\n *\n * Each callback must take a `ComponentRef` instance and return nothing.\n *\n * `(componentRef: ComponentRef) => void`\n *\n * @publicApi\n */\nexport const APP_BOOTSTRAP_LISTENER = new InjectionToken<\n  ReadonlyArray<(compRef: ComponentRef<any>) => void>\n>(ngDevMode ? 'appBootstrapListener' : '');\n\nexport function publishDefaultGlobalUtils() {\n  ngDevMode && _publishDefaultGlobalUtils();\n}\n\n/**\n * Sets the error for an invalid write to a signal to be an Angular `RuntimeError`.\n */\nexport function publishSignalConfiguration(): void {\n  setThrowInvalidWriteToSignalError(() => {\n    throw new RuntimeError(\n      RuntimeErrorCode.SIGNAL_WRITE_FROM_ILLEGAL_CONTEXT,\n      ngDevMode && 'Writing to signals is not allowed in a `computed`.',\n    );\n  });\n}\n\nexport function isBoundToModule<C>(cf: ComponentFactory<C>): boolean {\n  return (cf as R3ComponentFactory<C>).isBoundToModule;\n}\n\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @deprecated\n * @publicApi\n */\nexport class NgProbeToken {\n  constructor(\n    public name: string,\n    public token: any,\n  ) {}\n}\n\n/**\n * Provides additional options to the bootstrapping process.\n *\n * @publicApi\n */\nexport interface BootstrapOptions {\n  /**\n   * Optionally specify which `NgZone` should be used when not configured in the providers.\n   *\n   * - Provide your own `NgZone` instance.\n   * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n   * - `noop` - Use `NoopNgZone` which does nothing.\n   */\n  ngZone?: NgZone | 'zone.js' | 'noop';\n\n  /**\n   * Optionally specify coalescing event change detections or not.\n   * Consider the following case.\n   *\n   * ```html\n   * <div (click)=\"doSomething()\">\n   *   <button (click)=\"doSomethingElse()\"></button>\n   * </div>\n   * ```\n   *\n   * When button is clicked, because of the event bubbling, both\n   * event handlers will be called and 2 change detections will be\n   * triggered. We can coalesce such kind of events to only trigger\n   * change detection only once.\n   *\n   * By default, this option will be false. So the events will not be\n   * coalesced and the change detection will be triggered multiple times.\n   * And if this option be set to true, the change detection will be\n   * triggered async by scheduling a animation frame. So in the case above,\n   * the change detection will only be triggered once.\n   */\n  ngZoneEventCoalescing?: boolean;\n\n  /**\n   * Optionally specify if `NgZone#run()` method invocations should be coalesced\n   * into a single change detection.\n   *\n   * Consider the following case.\n   * ```ts\n   * for (let i = 0; i < 10; i ++) {\n   *   ngZone.run(() => {\n   *     // do something\n   *   });\n   * }\n   * ```\n   *\n   * This case triggers the change detection multiple times.\n   * With ngZoneRunCoalescing options, all change detections in an event loop trigger only once.\n   * In addition, the change detection executes in requestAnimation.\n   *\n   */\n  ngZoneRunCoalescing?: boolean;\n\n  /**\n   * When false, change detection is scheduled when Angular receives\n   * a clear indication that templates need to be refreshed. This includes:\n   *\n   * - calling `ChangeDetectorRef.markForCheck`\n   * - calling `ComponentRef.setInput`\n   * - updating a signal that is read in a template\n   * - attaching a view that is marked dirty\n   * - removing a view\n   * - registering a render hook (templates are only refreshed if render hooks do one of the above)\n   *\n   * @deprecated This option was introduced out of caution as a way for developers to opt out of the\n   *    new behavior in v18 which schedule change detection for the above events when they occur\n   *    outside the Zone. After monitoring the results post-release, we have determined that this\n   *    feature is working as desired and do not believe it should ever be disabled by setting\n   *    this option to `true`.\n   */\n  ignoreChangesOutsideZone?: boolean;\n}\n\n/** Maximum number of times ApplicationRef will refresh all attached views in a single tick. */\nconst MAXIMUM_REFRESH_RERUNS = 10;\n\nexport function optionsReducer<T extends Object>(dst: T, objs: T | T[]): T {\n  if (Array.isArray(objs)) {\n    return objs.reduce(optionsReducer, dst);\n  }\n  return {...dst, ...objs};\n}\n\n/**\n * A reference to an Angular application running on a page.\n *\n * @usageNotes\n * ### isStable examples and caveats\n *\n * Note two important points about `isStable`, demonstrated in the examples below:\n * - the application will never be stable if you start any kind\n * of recurrent asynchronous task when the application starts\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n * or using RxJS operators like `interval`);\n * - the `isStable` Observable runs outside of the Angular zone.\n *\n * Let's imagine that you start a recurrent task\n * (here incrementing a counter, using RxJS `interval`),\n * and at the same time subscribe to `isStable`.\n *\n * ```ts\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *      filter(stable => stable)\n *   ).subscribe(() => console.log('App is stable now');\n *   interval(1000).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, `isStable` will never emit `true`,\n * and the trace \"App is stable now\" will never get logged.\n *\n * If you want to execute something when the app is stable,\n * you have to wait for the application to be stable\n * before starting your polling process.\n *\n * ```ts\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     tap(stable => console.log('App is stable now')),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, the trace \"App is stable now\" will be logged\n * and then the counter starts incrementing every second.\n *\n * Note also that this Observable runs outside of the Angular zone,\n * which means that the code in the subscription\n * to this Observable will not trigger the change detection.\n *\n * Let's imagine that instead of logging the counter value,\n * you update a field of your component\n * and display it in its template.\n *\n * ```ts\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => this.value = counter);\n * }\n * ```\n * As the `isStable` Observable runs outside the zone,\n * the `value` field will be updated properly,\n * but the template will not be refreshed!\n *\n * You'll have to manually trigger the change detection to update the template.\n *\n * ```ts\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => {\n *     this.value = counter;\n *     cd.detectChanges();\n *   });\n * }\n * ```\n *\n * Or make the subscription callback run inside the zone.\n *\n * ```ts\n * constructor(appRef: ApplicationRef, zone: NgZone) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => zone.run(() => this.value = counter));\n * }\n * ```\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class ApplicationRef {\n  /** @internal */\n  _runningTick: boolean = false;\n  private _destroyed = false;\n  private _destroyListeners: Array<() => void> = [];\n  /** @internal */\n  _views: InternalViewRef<unknown>[] = [];\n  private readonly internalErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);\n  private readonly afterRenderManager = inject(AfterRenderManager);\n  private readonly zonelessEnabled = inject(ZONELESS_ENABLED);\n  private readonly rootEffectScheduler = inject(EffectScheduler);\n\n  /**\n   * Current dirty state of the application across a number of dimensions (views, afterRender hooks,\n   * etc).\n   *\n   * A flag set here means that `tick()` will attempt to resolve the dirtiness when executed.\n   *\n   * @internal\n   */\n  dirtyFlags = ApplicationRefDirtyFlags.None;\n\n  /**\n   * Most recent snapshot from the `TracingService`, if any.\n   *\n   * This snapshot attempts to capture the context when `tick()` was first\n   * scheduled. It then runs wrapped in this context.\n   *\n   * @internal\n   */\n  tracingSnapshot: TracingSnapshot | null = null;\n\n  // Needed for ComponentFixture temporarily during migration of autoDetect behavior\n  // Eventually the hostView of the fixture should just attach to ApplicationRef.\n  private externalTestViews: Set<InternalViewRef<unknown>> = new Set();\n  /** @internal */\n  afterTick = new Subject<void>();\n  /** @internal */\n  get allViews(): Array<InternalViewRef<unknown>> {\n    return [...this.externalTestViews.keys(), ...this._views];\n  }\n\n  /**\n   * Indicates whether this instance was destroyed.\n   */\n  get destroyed() {\n    return this._destroyed;\n  }\n\n  /**\n   * Get a list of component types registered to this application.\n   * This list is populated even before the component is created.\n   */\n  public readonly componentTypes: Type<any>[] = [];\n\n  /**\n   * Get a list of components registered to this application.\n   */\n  public readonly components: ComponentRef<any>[] = [];\n\n  /**\n   * Returns an Observable that indicates when the application is stable or unstable.\n   */\n  public readonly isStable: Observable<boolean> = inject(PendingTasksInternal).hasPendingTasks.pipe(\n    map((pending) => !pending),\n  );\n\n  constructor() {\n    // Inject the tracing service to initialize it.\n    inject(TracingService, {optional: true});\n  }\n\n  /**\n   * @returns A promise that resolves when the application becomes stable\n   */\n  whenStable(): Promise<void> {\n    let subscription: Subscription;\n    return new Promise<void>((resolve) => {\n      subscription = this.isStable.subscribe({\n        next: (stable) => {\n          if (stable) {\n            resolve();\n          }\n        },\n      });\n    }).finally(() => {\n      subscription.unsubscribe();\n    });\n  }\n\n  private readonly _injector = inject(EnvironmentInjector);\n  private _rendererFactory: RendererFactory2 | null = null;\n\n  /**\n   * The `EnvironmentInjector` used to create this application.\n   */\n  get injector(): EnvironmentInjector {\n    return this._injector;\n  }\n\n  /**\n   * Bootstrap a component onto the element identified by its selector or, optionally, to a\n   * specified element.\n   *\n   * @usageNotes\n   * ### Bootstrap process\n   *\n   * When bootstrapping a component, Angular mounts it onto a target DOM element\n   * and kicks off automatic change detection. The target DOM element can be\n   * provided using the `rootSelectorOrNode` argument.\n   *\n   * If the target DOM element is not provided, Angular tries to find one on a page\n   * using the `selector` of the component that is being bootstrapped\n   * (first matched element is used).\n   *\n   * ### Example\n   *\n   * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,\n   * but it requires us to know the component while writing the application code.\n   *\n   * Imagine a situation where we have to wait for an API call to decide about the component to\n   * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to\n   * dynamically bootstrap a component.\n   *\n   * {@example core/ts/platform/platform.ts region='componentSelector'}\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * selector of the bootstrapped component.\n   *\n   * In the following example, we are providing a CSS selector to match the target element.\n   *\n   * {@example core/ts/platform/platform.ts region='cssSelector'}\n   *\n   * While in this example, we are providing reference to a DOM node.\n   *\n   * {@example core/ts/platform/platform.ts region='domNode'}\n   */\n  bootstrap<C>(component: Type<C>, rootSelectorOrNode?: string | any): ComponentRef<C>;\n\n  /**\n   * Bootstrap a component onto the element identified by its selector or, optionally, to a\n   * specified element.\n   *\n   * @usageNotes\n   * ### Bootstrap process\n   *\n   * When bootstrapping a component, Angular mounts it onto a target DOM element\n   * and kicks off automatic change detection. The target DOM element can be\n   * provided using the `rootSelectorOrNode` argument.\n   *\n   * If the target DOM element is not provided, Angular tries to find one on a page\n   * using the `selector` of the component that is being bootstrapped\n   * (first matched element is used).\n   *\n   * ### Example\n   *\n   * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,\n   * but it requires us to know the component while writing the application code.\n   *\n   * Imagine a situation where we have to wait for an API call to decide about the component to\n   * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to\n   * dynamically bootstrap a component.\n   *\n   * {@example core/ts/platform/platform.ts region='componentSelector'}\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * selector of the bootstrapped component.\n   *\n   * In the following example, we are providing a CSS selector to match the target element.\n   *\n   * {@example core/ts/platform/platform.ts region='cssSelector'}\n   *\n   * While in this example, we are providing reference to a DOM node.\n   *\n   * {@example core/ts/platform/platform.ts region='domNode'}\n   *\n   * @deprecated Passing Component factories as the `Application.bootstrap` function argument is\n   *     deprecated. Pass Component Types instead.\n   */\n  bootstrap<C>(\n    componentFactory: ComponentFactory<C>,\n    rootSelectorOrNode?: string | any,\n  ): ComponentRef<C>;\n\n  /**\n   * Bootstrap a component onto the element identified by its selector or, optionally, to a\n   * specified element.\n   *\n   * @usageNotes\n   * ### Bootstrap process\n   *\n   * When bootstrapping a component, Angular mounts it onto a target DOM element\n   * and kicks off automatic change detection. The target DOM element can be\n   * provided using the `rootSelectorOrNode` argument.\n   *\n   * If the target DOM element is not provided, Angular tries to find one on a page\n   * using the `selector` of the component that is being bootstrapped\n   * (first matched element is used).\n   *\n   * ### Example\n   *\n   * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,\n   * but it requires us to know the component while writing the application code.\n   *\n   * Imagine a situation where we have to wait for an API call to decide about the component to\n   * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to\n   * dynamically bootstrap a component.\n   *\n   * {@example core/ts/platform/platform.ts region='componentSelector'}\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * selector of the bootstrapped component.\n   *\n   * In the following example, we are providing a CSS selector to match the target element.\n   *\n   * {@example core/ts/platform/platform.ts region='cssSelector'}\n   *\n   * While in this example, we are providing reference to a DOM node.\n   *\n   * {@example core/ts/platform/platform.ts region='domNode'}\n   */\n  bootstrap<C>(\n    componentOrFactory: ComponentFactory<C> | Type<C>,\n    rootSelectorOrNode?: string | any,\n  ): ComponentRef<C> {\n    profiler(ProfilerEvent.BootstrapComponentStart);\n\n    (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\n    const isComponentFactory = componentOrFactory instanceof ComponentFactory;\n    const initStatus = this._injector.get(ApplicationInitStatus);\n\n    if (!initStatus.done) {\n      let errorMessage = '';\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        const standalone = !isComponentFactory && isStandalone(componentOrFactory);\n        errorMessage =\n          'Cannot bootstrap as there are still asynchronous initializers running.' +\n          (standalone\n            ? ''\n            : ' Bootstrap components in the `ngDoBootstrap` method of the root module.');\n      }\n      throw new RuntimeError(RuntimeErrorCode.ASYNC_INITIALIZERS_STILL_RUNNING, errorMessage);\n    }\n\n    let componentFactory: ComponentFactory<C>;\n    if (isComponentFactory) {\n      componentFactory = componentOrFactory;\n    } else {\n      const resolver = this._injector.get(ComponentFactoryResolver);\n      componentFactory = resolver.resolveComponentFactory(componentOrFactory)!;\n    }\n    this.componentTypes.push(componentFactory.componentType);\n\n    // Create a factory associated with the current module if it's not bound to some other\n    const ngModule = isBoundToModule(componentFactory)\n      ? undefined\n      : this._injector.get(NgModuleRef);\n    const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n    const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n    const nativeElement = compRef.location.nativeElement;\n    const testability = compRef.injector.get(TESTABILITY, null);\n    testability?.registerApplication(nativeElement);\n\n    compRef.onDestroy(() => {\n      this.detachView(compRef.hostView);\n      remove(this.components, compRef);\n      testability?.unregisterApplication(nativeElement);\n    });\n\n    this._loadComponent(compRef);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const _console = this._injector.get(Console);\n      _console.log(`Angular is running in development mode.`);\n    }\n\n    profiler(ProfilerEvent.BootstrapComponentEnd, compRef);\n\n    return compRef;\n  }\n\n  /**\n   * Invoke this method to explicitly process change detection and its side-effects.\n   *\n   * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n   * further changes are detected. If additional changes are picked up during this second cycle,\n   * bindings in the app have side-effects that cannot be resolved in a single change detection\n   * pass.\n   * In this case, Angular throws an error, since an Angular application can only have one change\n   * detection pass during which all change detection must complete.\n   */\n  tick(): void {\n    if (!this.zonelessEnabled) {\n      this.dirtyFlags |= ApplicationRefDirtyFlags.ViewTreeGlobal;\n    }\n    this._tick();\n  }\n\n  /** @internal */\n  _tick(): void {\n    profiler(ProfilerEvent.ChangeDetectionStart);\n\n    if (this.tracingSnapshot !== null) {\n      // Ensure we always run `tickImpl()` in the context of the most recent snapshot,\n      // if one exists. Snapshots may be reference counted by the implementation so\n      // we want to ensure that if we request a snapshot that we use it.\n      this.tracingSnapshot.run(TracingAction.CHANGE_DETECTION, this.tickImpl);\n    } else {\n      this.tickImpl();\n    }\n  }\n\n  private tickImpl = (): void => {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\n    if (this._runningTick) {\n      throw new RuntimeError(\n        RuntimeErrorCode.RECURSIVE_APPLICATION_REF_TICK,\n        ngDevMode && 'ApplicationRef.tick is called recursively',\n      );\n    }\n\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      this._runningTick = true;\n      this.synchronize();\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        for (let view of this.allViews) {\n          view.checkNoChanges();\n        }\n      }\n    } catch (e) {\n      // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n      this.internalErrorHandler(e);\n    } finally {\n      this._runningTick = false;\n      this.tracingSnapshot?.dispose();\n      this.tracingSnapshot = null;\n      setActiveConsumer(prevConsumer);\n      this.afterTick.next();\n\n      profiler(ProfilerEvent.ChangeDetectionEnd);\n    }\n  };\n\n  /**\n   * Performs the core work of synchronizing the application state with the UI, resolving any\n   * pending dirtiness (potentially in a loop).\n   */\n  private synchronize(): void {\n    if (this._rendererFactory === null && !(this._injector as R3Injector).destroyed) {\n      this._rendererFactory = this._injector.get(RendererFactory2, null, {optional: true});\n    }\n\n    let runs = 0;\n    while (this.dirtyFlags !== ApplicationRefDirtyFlags.None && runs++ < MAXIMUM_REFRESH_RERUNS) {\n      profiler(ProfilerEvent.ChangeDetectionSyncStart);\n      this.synchronizeOnce();\n      profiler(ProfilerEvent.ChangeDetectionSyncEnd);\n    }\n\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && runs >= MAXIMUM_REFRESH_RERUNS) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INFINITE_CHANGE_DETECTION,\n        ngDevMode &&\n          'Infinite change detection while refreshing application views. ' +\n            'Ensure views are not calling `markForCheck` on every template execution or ' +\n            'that afterRender hooks always mark views for check.',\n      );\n    }\n  }\n\n  /**\n   * Perform a single synchronization pass.\n   */\n  private synchronizeOnce(): void {\n    // First, process any dirty root effects.\n    if (this.dirtyFlags & ApplicationRefDirtyFlags.RootEffects) {\n      this.dirtyFlags &= ~ApplicationRefDirtyFlags.RootEffects;\n      this.rootEffectScheduler.flush();\n    }\n\n    // First check dirty views, if there are any.\n    if (this.dirtyFlags & ApplicationRefDirtyFlags.ViewTreeAny) {\n      // Change detection on views starts in targeted mode (only check components if they're\n      // marked as dirty) unless global checking is specifically requested via APIs like\n      // `ApplicationRef.tick()` and the `NgZone` integration.\n      const useGlobalCheck = Boolean(this.dirtyFlags & ApplicationRefDirtyFlags.ViewTreeGlobal);\n\n      // Clear the view-related dirty flags.\n      this.dirtyFlags &= ~ApplicationRefDirtyFlags.ViewTreeAny;\n\n      // Set the AfterRender bit, as we're checking views and will need to run afterRender hooks.\n      this.dirtyFlags |= ApplicationRefDirtyFlags.AfterRender;\n\n      // Check all potentially dirty views.\n      for (let {_lView, notifyErrorHandler} of this.allViews) {\n        detectChangesInViewIfRequired(\n          _lView,\n          notifyErrorHandler,\n          useGlobalCheck,\n          this.zonelessEnabled,\n        );\n      }\n\n      // If `markForCheck()` was called during view checking, it will have set the `ViewTreeCheck`\n      // flag. We clear the flag here because, for backwards compatibility, `markForCheck()`\n      // during view checking doesn't cause the view to be re-checked.\n      this.dirtyFlags &= ~ApplicationRefDirtyFlags.ViewTreeCheck;\n\n      // Check if any views are still dirty after checking and we need to loop back.\n      this.syncDirtyFlagsWithViews();\n      if (\n        this.dirtyFlags &\n        (ApplicationRefDirtyFlags.ViewTreeAny | ApplicationRefDirtyFlags.RootEffects)\n      ) {\n        // If any views or effects are still dirty after checking, loop back before running render\n        // hooks.\n        return;\n      }\n    } else {\n      // If we skipped refreshing views above, there might still be unflushed animations\n      // because we never called `detectChangesInternal` on the views.\n      this._rendererFactory?.begin?.();\n      this._rendererFactory?.end?.();\n    }\n\n    // Even if there were no dirty views, afterRender hooks might still be dirty.\n    if (this.dirtyFlags & ApplicationRefDirtyFlags.AfterRender) {\n      this.dirtyFlags &= ~ApplicationRefDirtyFlags.AfterRender;\n      this.afterRenderManager.execute();\n\n      // afterRender hooks might influence dirty flags.\n    }\n    this.syncDirtyFlagsWithViews();\n  }\n\n  /**\n   * Checks `allViews` for views which require refresh/traversal, and updates `dirtyFlags`\n   * accordingly, with two potential behaviors:\n   *\n   * 1. If any of our views require updating, then this adds the `ViewTreeTraversal` dirty flag.\n   *    This _should_ be a no-op, since the scheduler should've added the flag at the same time the\n   *    view was marked as needing updating.\n   *\n   *    TODO(alxhub): figure out if this behavior is still needed for edge cases.\n   *\n   * 2. If none of our views require updating, then clear the view-related `dirtyFlag`s. This\n   *    happens when the scheduler is notified of a view becoming dirty, but the view itself isn't\n   *    reachable through traversal from our roots (e.g. it's detached from the CD tree).\n   */\n  private syncDirtyFlagsWithViews(): void {\n    if (this.allViews.some(({_lView}) => requiresRefreshOrTraversal(_lView))) {\n      // If after running all afterRender callbacks new views are dirty, ensure we loop back.\n      this.dirtyFlags |= ApplicationRefDirtyFlags.ViewTreeTraversal;\n      return;\n    } else {\n      // Even though this flag may be set, none of _our_ views require traversal, and so the\n      // `ApplicationRef` doesn't require any repeated checking.\n      this.dirtyFlags &= ~ApplicationRefDirtyFlags.ViewTreeAny;\n    }\n  }\n\n  /**\n   * Attaches a view so that it will be dirty checked.\n   * The view will be automatically detached when it is destroyed.\n   * This will throw if the view is already attached to a ViewContainer.\n   */\n  attachView(viewRef: ViewRef): void {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\n    const view = viewRef as InternalViewRef<unknown>;\n    this._views.push(view);\n    view.attachToAppRef(this);\n  }\n\n  /**\n   * Detaches a view from dirty checking again.\n   */\n  detachView(viewRef: ViewRef): void {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\n    const view = viewRef as InternalViewRef<unknown>;\n    remove(this._views, view);\n    view.detachFromAppRef();\n  }\n\n  private _loadComponent(componentRef: ComponentRef<any>): void {\n    this.attachView(componentRef.hostView);\n    this.tick();\n    this.components.push(componentRef);\n    // Get the listeners lazily to prevent DI cycles.\n    const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []);\n    if (ngDevMode && !Array.isArray(listeners)) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_MULTI_PROVIDER,\n        'Unexpected type of the `APP_BOOTSTRAP_LISTENER` token value ' +\n          `(expected an array, but got ${typeof listeners}). ` +\n          'Please check that the `APP_BOOTSTRAP_LISTENER` token is configured as a ' +\n          '`multi: true` provider.',\n      );\n    }\n    listeners.forEach((listener) => listener(componentRef));\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    if (this._destroyed) return;\n\n    try {\n      // Call all the lifecycle hooks.\n      this._destroyListeners.forEach((listener) => listener());\n\n      // Destroy all registered views.\n      this._views.slice().forEach((view) => view.destroy());\n    } finally {\n      // Indicate that this instance is destroyed.\n      this._destroyed = true;\n\n      // Release all references.\n      this._views = [];\n      this._destroyListeners = [];\n    }\n  }\n\n  /**\n   * Registers a listener to be called when an instance is destroyed.\n   *\n   * @param callback A callback function to add as a listener.\n   * @returns A function which unregisters a listener.\n   */\n  onDestroy(callback: () => void): VoidFunction {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && warnIfDestroyed(this._destroyed);\n    this._destroyListeners.push(callback);\n    return () => remove(this._destroyListeners, callback);\n  }\n\n  /**\n   * Destroys an Angular application represented by this `ApplicationRef`. Calling this function\n   * will destroy the associated environment injectors as well as all the bootstrapped components\n   * with their views.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      throw new RuntimeError(\n        RuntimeErrorCode.APPLICATION_REF_ALREADY_DESTROYED,\n        ngDevMode && 'This instance of the `ApplicationRef` has already been destroyed.',\n      );\n    }\n\n    const injector = this._injector as R3Injector;\n\n    // Check that this injector instance supports destroy operation.\n    if (injector.destroy && !injector.destroyed) {\n      // Destroying an underlying injector will trigger the `ngOnDestroy` lifecycle\n      // hook, which invokes the remaining cleanup actions.\n      injector.destroy();\n    }\n  }\n\n  /**\n   * Returns the number of attached views.\n   */\n  get viewCount() {\n    return this._views.length;\n  }\n}\n\nfunction warnIfDestroyed(destroyed: boolean): void {\n  if (destroyed) {\n    console.warn(\n      formatRuntimeError(\n        RuntimeErrorCode.APPLICATION_REF_ALREADY_DESTROYED,\n        'This instance of the `ApplicationRef` has already been destroyed.',\n      ),\n    );\n  }\n}\n\nexport function remove<T>(list: T[], el: T): void {\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n\nexport const enum ApplicationRefDirtyFlags {\n  None = 0,\n\n  /**\n   * A global change detection round has been requested.\n   */\n  ViewTreeGlobal = 0b00000001,\n\n  /**\n   * Part of the view tree is marked for traversal.\n   */\n  ViewTreeTraversal = 0b00000010,\n\n  /**\n   * Part of the view tree is marked to be checked (dirty).\n   */\n  ViewTreeCheck = 0b00000100,\n\n  /**\n   * Helper for any view tree bit being set.\n   */\n  ViewTreeAny = ViewTreeGlobal | ViewTreeTraversal | ViewTreeCheck,\n\n  /**\n   * After render hooks need to run.\n   */\n  AfterRender = 0b00001000,\n\n  /**\n   * Effects at the `ApplicationRef` level.\n   */\n  RootEffects = 0b00010000,\n}\n\nexport function detectChangesInViewIfRequired(\n  lView: LView,\n  notifyErrorHandler: boolean,\n  isFirstPass: boolean,\n  zonelessEnabled: boolean,\n) {\n  // When re-checking, only check views which actually need it.\n  if (!isFirstPass && !requiresRefreshOrTraversal(lView)) {\n    return;\n  }\n\n  const mode =\n    isFirstPass && !zonelessEnabled\n      ? // The first pass is always in Global mode, which includes `CheckAlways` views.\n        // When using zoneless, all root views must be explicitly marked for refresh, even if they are\n        // `CheckAlways`.\n        ChangeDetectionMode.Global\n      : // Only refresh views with the `RefreshView` flag or views is a changed signal\n        ChangeDetectionMode.Targeted;\n  detectChangesInternal(lView, notifyErrorHandler, mode);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {afterNextRender} from '../render3/after_render/hooks';\nimport {Injector} from '../di';\nimport {internalImportProvidersFrom} from '../di/provider_collection';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {\n  cleanupHydratedDeferBlocks,\n  cleanupLContainer,\n  removeDehydratedViewList,\n} from '../hydration/cleanup';\nimport {BlockSummary, ElementTrigger, NUM_ROOT_NODES} from '../hydration/interfaces';\nimport {\n  assertSsrIdDefined,\n  getParentBlockHydrationQueue,\n  isIncrementalHydrationEnabled,\n} from '../hydration/utils';\nimport {PendingTasksInternal} from '../pending_tasks';\nimport {assertLContainer} from '../render3/assert';\nimport {getComponentDef, getDirectiveDef, getPipeDef} from '../render3/def_getters';\nimport {getTemplateLocationDetails} from '../render3/instructions/element_validation';\nimport {handleError} from '../render3/instructions/shared';\nimport {DirectiveDefList, PipeDefList} from '../render3/interfaces/definition';\nimport {TNode} from '../render3/interfaces/node';\nimport {INJECTOR, LView, TView, TVIEW} from '../render3/interfaces/view';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {throwError} from '../util/assert';\nimport {\n  invokeAllTriggerCleanupFns,\n  invokeTriggerCleanupFns,\n  storeTriggerCleanupFn,\n} from './cleanup';\nimport {onViewport} from './dom_triggers';\nimport {onIdle} from './idle_scheduler';\nimport {\n  DEFER_BLOCK_STATE,\n  DeferBlockBehavior,\n  DeferBlockState,\n  DeferBlockTrigger,\n  DeferDependenciesLoadingState,\n  DehydratedDeferBlock,\n  HydrateTriggerDetails,\n  LDeferBlockDetails,\n  ON_COMPLETE_FNS,\n  SSR_UNIQUE_ID,\n  TDeferBlockDetails,\n  TDeferDetailsFlags,\n  TriggerType,\n} from './interfaces';\nimport {DEHYDRATED_BLOCK_REGISTRY, DehydratedBlockRegistry} from './registry';\nimport {\n  DEFER_BLOCK_CONFIG,\n  DEFER_BLOCK_DEPENDENCY_INTERCEPTOR,\n  renderDeferBlockState,\n  renderDeferStateAfterResourceLoading,\n  renderPlaceholder,\n} from './rendering';\nimport {onTimer} from './timer_scheduler';\nimport {\n  addDepsToRegistry,\n  assertDeferredDependenciesLoaded,\n  getLDeferBlockDetails,\n  getPrimaryBlockTNode,\n  getTDeferBlockDetails,\n} from './utils';\nimport {ApplicationRef} from '../application/application_ref';\nimport {DEHYDRATED_VIEWS} from '../render3/interfaces/container';\n\n/**\n * Schedules triggering of a defer block for `on idle` and `on timer` conditions.\n */\nexport function scheduleDelayedTrigger(\n  scheduleFn: (callback: VoidFunction, injector: Injector) => VoidFunction,\n) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  renderPlaceholder(lView, tNode);\n\n  // Exit early to avoid invoking `scheduleFn`, which would\n  // add `setTimeout` call and potentially delay serialization\n  // on the server unnecessarily.\n  if (!shouldTriggerDeferBlock(TriggerType.Regular, lView)) return;\n\n  const injector = lView[INJECTOR];\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n\n  const cleanupFn = scheduleFn(\n    () => triggerDeferBlock(TriggerType.Regular, lView, tNode),\n    injector,\n  );\n  storeTriggerCleanupFn(TriggerType.Regular, lDetails, cleanupFn);\n}\n\n/**\n * Schedules prefetching for `on idle` and `on timer` triggers.\n *\n * @param scheduleFn A function that does the scheduling.\n */\nexport function scheduleDelayedPrefetching(\n  scheduleFn: (callback: VoidFunction, injector: Injector) => VoidFunction,\n  trigger: DeferBlockTrigger,\n) {\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) return;\n\n  const lView = getLView();\n  const injector = lView[INJECTOR];\n\n  // Only trigger the scheduled trigger on the browser\n  // since we don't want to delay the server response.\n  const tNode = getCurrentTNode()!;\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    const lDetails = getLDeferBlockDetails(lView, tNode);\n    const prefetch = () => triggerPrefetching(tDetails, lView, tNode);\n    const cleanupFn = scheduleFn(prefetch, injector);\n    storeTriggerCleanupFn(TriggerType.Prefetch, lDetails, cleanupFn);\n  }\n}\n\n/**\n * Schedules hydration triggering of a defer block for `on idle` and `on timer` conditions.\n */\nexport function scheduleDelayedHydrating(\n  scheduleFn: (callback: VoidFunction, injector: Injector) => VoidFunction,\n  lView: LView,\n  tNode: TNode,\n) {\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) return;\n\n  // Only trigger the scheduled trigger on the browser\n  // since we don't want to delay the server response.\n  const injector = lView[INJECTOR];\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  const ssrUniqueId = lDetails[SSR_UNIQUE_ID]!;\n  ngDevMode && assertSsrIdDefined(ssrUniqueId);\n\n  const cleanupFn = scheduleFn(\n    () => triggerHydrationFromBlockName(injector, ssrUniqueId),\n    injector,\n  );\n  storeTriggerCleanupFn(TriggerType.Hydrate, lDetails, cleanupFn);\n}\n\n/**\n * Trigger prefetching of dependencies for a defer block.\n *\n * @param tDetails Static information about this defer block.\n * @param lView LView of a host view.\n * @param tNode TNode that represents a defer block.\n */\nexport function triggerPrefetching(tDetails: TDeferBlockDetails, lView: LView, tNode: TNode) {\n  triggerResourceLoading(tDetails, lView, tNode);\n}\n\n/**\n * Trigger loading of defer block dependencies if the process hasn't started yet.\n *\n * @param tDetails Static information about this defer block.\n * @param lView LView of a host view.\n */\nexport function triggerResourceLoading(\n  tDetails: TDeferBlockDetails,\n  lView: LView,\n  tNode: TNode,\n): Promise<unknown> {\n  const injector = lView[INJECTOR];\n  const tView = lView[TVIEW];\n\n  if (tDetails.loadingState !== DeferDependenciesLoadingState.NOT_STARTED) {\n    // If the loading status is different from initial one, it means that\n    // the loading of dependencies is in progress and there is nothing to do\n    // in this function. All details can be obtained from the `tDetails` object.\n    return tDetails.loadingPromise ?? Promise.resolve();\n  }\n\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  const primaryBlockTNode = getPrimaryBlockTNode(tView, tDetails);\n\n  // Switch from NOT_STARTED -> IN_PROGRESS state.\n  tDetails.loadingState = DeferDependenciesLoadingState.IN_PROGRESS;\n\n  // Prefetching is triggered, cleanup all registered prefetch triggers.\n  invokeTriggerCleanupFns(TriggerType.Prefetch, lDetails);\n\n  let dependenciesFn = tDetails.dependencyResolverFn;\n\n  if (ngDevMode) {\n    // Check if dependency function interceptor is configured.\n    const deferDependencyInterceptor = injector.get(DEFER_BLOCK_DEPENDENCY_INTERCEPTOR, null, {\n      optional: true,\n    });\n\n    if (deferDependencyInterceptor) {\n      dependenciesFn = deferDependencyInterceptor.intercept(dependenciesFn);\n    }\n  }\n\n  // Indicate that an application is not stable and has a pending task.\n  const pendingTasks = injector.get(PendingTasksInternal);\n  const taskId = pendingTasks.add();\n\n  // The `dependenciesFn` might be `null` when all dependencies within\n  // a given defer block were eagerly referenced elsewhere in a file,\n  // thus no dynamic `import()`s were produced.\n  if (!dependenciesFn) {\n    tDetails.loadingPromise = Promise.resolve().then(() => {\n      tDetails.loadingPromise = null;\n      tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;\n      pendingTasks.remove(taskId);\n    });\n    return tDetails.loadingPromise;\n  }\n\n  // Start downloading of defer block dependencies.\n  tDetails.loadingPromise = Promise.allSettled(dependenciesFn()).then((results) => {\n    let failed = false;\n    const directiveDefs: DirectiveDefList = [];\n    const pipeDefs: PipeDefList = [];\n\n    for (const result of results) {\n      if (result.status === 'fulfilled') {\n        const dependency = result.value;\n        const directiveDef = getComponentDef(dependency) || getDirectiveDef(dependency);\n        if (directiveDef) {\n          directiveDefs.push(directiveDef);\n        } else {\n          const pipeDef = getPipeDef(dependency);\n          if (pipeDef) {\n            pipeDefs.push(pipeDef);\n          }\n        }\n      } else {\n        failed = true;\n        break;\n      }\n    }\n\n    // Loading is completed, we no longer need the loading Promise\n    // and a pending task should also be removed.\n    tDetails.loadingPromise = null;\n    pendingTasks.remove(taskId);\n\n    if (failed) {\n      tDetails.loadingState = DeferDependenciesLoadingState.FAILED;\n\n      if (tDetails.errorTmplIndex === null) {\n        const templateLocation = ngDevMode ? getTemplateLocationDetails(lView) : '';\n        const error = new RuntimeError(\n          RuntimeErrorCode.DEFER_LOADING_FAILED,\n          ngDevMode &&\n            'Loading dependencies for `@defer` block failed, ' +\n              `but no \\`@error\\` block was configured${templateLocation}. ` +\n              'Consider using the `@error` block to render an error state.',\n        );\n        handleError(lView, error);\n      }\n    } else {\n      tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;\n\n      // Update directive and pipe registries to add newly downloaded dependencies.\n      const primaryBlockTView = primaryBlockTNode.tView!;\n      if (directiveDefs.length > 0) {\n        primaryBlockTView.directiveRegistry = addDepsToRegistry<DirectiveDefList>(\n          primaryBlockTView.directiveRegistry,\n          directiveDefs,\n        );\n\n        // Extract providers from all NgModules imported by standalone components\n        // used within this defer block.\n        const directiveTypes = directiveDefs.map((def) => def.type);\n        const providers = internalImportProvidersFrom(false, ...directiveTypes);\n        tDetails.providers = providers;\n      }\n      if (pipeDefs.length > 0) {\n        primaryBlockTView.pipeRegistry = addDepsToRegistry<PipeDefList>(\n          primaryBlockTView.pipeRegistry,\n          pipeDefs,\n        );\n      }\n    }\n  });\n  return tDetails.loadingPromise;\n}\n\n/**\n * Defines whether we should proceed with triggering a given defer block.\n */\nfunction shouldTriggerDeferBlock(triggerType: TriggerType, lView: LView): boolean {\n  // prevents triggering regular triggers when on the server.\n  if (triggerType === TriggerType.Regular && typeof ngServerMode !== 'undefined' && ngServerMode) {\n    return false;\n  }\n\n  // prevents triggering in the case of a test run with manual defer block configuration.\n  const injector = lView[INJECTOR];\n  const config = injector.get(DEFER_BLOCK_CONFIG, null, {optional: true});\n  if (config?.behavior === DeferBlockBehavior.Manual) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Attempts to trigger loading of defer block dependencies.\n * If the block is already in a loading, completed or an error state -\n * no additional actions are taken.\n */\nexport function triggerDeferBlock(triggerType: TriggerType, lView: LView, tNode: TNode) {\n  const tView = lView[TVIEW];\n  const lContainer = lView[tNode.index];\n  ngDevMode && assertLContainer(lContainer);\n\n  if (!shouldTriggerDeferBlock(triggerType, lView)) return;\n\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n\n  // Defer block is triggered, cleanup all registered trigger functions.\n  invokeAllTriggerCleanupFns(lDetails);\n\n  switch (tDetails.loadingState) {\n    case DeferDependenciesLoadingState.NOT_STARTED:\n      renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);\n      triggerResourceLoading(tDetails, lView, tNode);\n\n      // The `loadingState` might have changed to \"loading\".\n      if (\n        (tDetails.loadingState as DeferDependenciesLoadingState) ===\n        DeferDependenciesLoadingState.IN_PROGRESS\n      ) {\n        renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);\n      }\n      break;\n    case DeferDependenciesLoadingState.IN_PROGRESS:\n      renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);\n      renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);\n      break;\n    case DeferDependenciesLoadingState.COMPLETE:\n      ngDevMode && assertDeferredDependenciesLoaded(tDetails);\n      renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);\n      break;\n    case DeferDependenciesLoadingState.FAILED:\n      renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);\n      break;\n    default:\n      if (ngDevMode) {\n        throwError('Unknown defer block state');\n      }\n  }\n}\n\n/**\n * The core mechanism for incremental hydration. This triggers or\n * queues hydration for all the blocks in the tree that need to be hydrated\n * and keeps track of all those blocks that were hydrated along the way.\n *\n * Note: the `replayQueuedEventsFn` is only provided when hydration is invoked\n * as a result of an event replay (via JsAction). When hydration is invoked from\n * an instruction set (e.g. `deferOnImmediate`) - there is no need to replay any\n * events.\n */\nexport async function triggerHydrationFromBlockName(\n  injector: Injector,\n  blockName: string,\n  replayQueuedEventsFn?: Function,\n) {\n  const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n  const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;\n\n  // Make sure we don't hydrate/trigger the same thing multiple times\n  if (blocksBeingHydrated.has(blockName)) {\n    return;\n  }\n\n  // Trigger resource loading and hydration for the blocks in the queue in the order of highest block\n  // to lowest block. Once a block has finished resource loading, after next render fires after hydration\n  // finishes. The new block will have its defer instruction called and will be in the registry.\n  // Due to timing related to potential nested control flow, this has to be scheduled after the next render.\n  const {parentBlockPromise, hydrationQueue} = getParentBlockHydrationQueue(blockName, injector);\n  if (hydrationQueue.length === 0) return;\n\n  // It's possible that the hydrationQueue topmost item is actually in the process of hydrating and has\n  // a promise already. In that case, we don't want to destroy that promise and queue it again.\n  if (parentBlockPromise !== null) {\n    hydrationQueue.shift();\n  }\n\n  // The hydrating map in the registry prevents re-triggering hydration for a block that's already in\n  // the hydration queue. Here we generate promises for each of the blocks about to be hydrated\n  populateHydratingStateForQueue(dehydratedBlockRegistry, hydrationQueue);\n\n  // We await this after populating the hydration state so we can prevent re-triggering hydration for\n  // the same blocks while this promise is being awaited.\n  if (parentBlockPromise !== null) {\n    await parentBlockPromise;\n  }\n\n  const topmostParentBlock = hydrationQueue[0];\n  if (dehydratedBlockRegistry.has(topmostParentBlock)) {\n    // the topmost parent block is already in the registry and we can proceed\n    // with hydration.\n    await triggerHydrationForBlockQueue(injector, hydrationQueue, replayQueuedEventsFn);\n  } else {\n    // the topmost parent block is not yet in the registry, which may mean\n    // a lazy loaded route, a control flow branch was taken, a route has\n    // been navigated, etc. So we need to queue up the hydration process\n    // so that it can be finished after the top block has had its defer\n    // instruction executed.\n    dehydratedBlockRegistry.awaitParentBlock(\n      topmostParentBlock,\n      async () =>\n        await triggerHydrationForBlockQueue(injector, hydrationQueue, replayQueuedEventsFn),\n    );\n  }\n}\n\n/**\n * The core mechanism for incremental hydration. This triggers\n * hydration for all the blocks in the tree that need to be hydrated\n * and keeps track of all those blocks that were hydrated along the way.\n *\n * Note: the `replayQueuedEventsFn` is only provided when hydration is invoked\n * as a result of an event replay (via JsAction). When hydration is invoked from\n * an instruction set (e.g. `deferOnImmediate`) - there is no need to replay any\n * events.\n */\nexport async function triggerHydrationForBlockQueue(\n  injector: Injector,\n  hydrationQueue: string[],\n  replayQueuedEventsFn?: Function,\n): Promise<void> {\n  const dehydratedBlockRegistry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n  const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;\n\n  // Indicate that we have some pending async work.\n  const pendingTasks = injector.get(PendingTasksInternal);\n  const taskId = pendingTasks.add();\n\n  // Actually do the triggering and hydration of the queue of blocks\n  for (let blockQueueIdx = 0; blockQueueIdx < hydrationQueue.length; blockQueueIdx++) {\n    const dehydratedBlockId = hydrationQueue[blockQueueIdx];\n    const dehydratedDeferBlock = dehydratedBlockRegistry.get(dehydratedBlockId);\n\n    if (dehydratedDeferBlock != null) {\n      // trigger the block resources and await next render for hydration. This should result\n      // in the next block ɵɵdefer instruction being called and that block being added to the dehydrated registry.\n      await triggerResourceLoadingForHydration(dehydratedDeferBlock);\n      await nextRender(injector);\n\n      // if the content has changed since server rendering, we need to check for the expected block\n      // being in the registry or if errors occurred. In that case, we need to clean up the remaining expected\n      // content that won't be rendered or fetched.\n      if (deferBlockHasErrored(dehydratedDeferBlock)) {\n        // Either the expected block has not yet had its ɵɵdefer instruction called or the block errored out when fetching\n        // resources. In the former case, either we're hydrating too soon or the client and server differ. In both cases,\n        // we need to clean up child content and promises.\n        removeDehydratedViewList(dehydratedDeferBlock);\n        cleanupRemainingHydrationQueue(\n          hydrationQueue.slice(blockQueueIdx),\n          dehydratedBlockRegistry,\n        );\n        break;\n      }\n      // The defer block has not errored and we've finished fetching resources and rendering.\n      // At this point it is safe to resolve the hydration promise.\n      blocksBeingHydrated.get(dehydratedBlockId)!.resolve();\n    } else {\n      // The expected block has not yet had its ɵɵdefer instruction called. This is likely due to content changing between\n      // client and server. We need to clean up the dehydrated DOM in the container since it no longer is valid.\n      cleanupParentContainer(blockQueueIdx, hydrationQueue, dehydratedBlockRegistry);\n      cleanupRemainingHydrationQueue(hydrationQueue.slice(blockQueueIdx), dehydratedBlockRegistry);\n      break;\n    }\n  }\n\n  const lastBlockName = hydrationQueue[hydrationQueue.length - 1];\n\n  // Await hydration completion for the last block.\n  await blocksBeingHydrated.get(lastBlockName)?.promise;\n\n  // All async work is done, remove the taskId from the registry.\n  pendingTasks.remove(taskId);\n\n  // Replay any queued events, if any exist and the replay operation was requested.\n  if (replayQueuedEventsFn) {\n    replayQueuedEventsFn(hydrationQueue);\n  }\n\n  // Cleanup after hydration of all affected defer blocks.\n  cleanupHydratedDeferBlocks(\n    dehydratedBlockRegistry.get(lastBlockName),\n    hydrationQueue,\n    dehydratedBlockRegistry,\n    injector.get(ApplicationRef),\n  );\n}\n\nexport function deferBlockHasErrored(deferBlock: DehydratedDeferBlock): boolean {\n  return (\n    getLDeferBlockDetails(deferBlock.lView, deferBlock.tNode)[DEFER_BLOCK_STATE] ===\n    DeferBlockState.Error\n  );\n}\n\n/**\n * Clean up the parent container of a block where content changed between server and client.\n * The parent of a block going through `triggerHydrationFromBlockName` will contain the\n * dehydrated content that needs to be cleaned up. So we have to do the clean up from that location\n * in the tree.\n */\nfunction cleanupParentContainer(\n  currentBlockIdx: number,\n  hydrationQueue: string[],\n  dehydratedBlockRegistry: DehydratedBlockRegistry,\n) {\n  // If a parent block exists, it's in the hydration queue in front of the current block.\n  const parentDeferBlockIdx = currentBlockIdx - 1;\n  const parentDeferBlock =\n    parentDeferBlockIdx > -1\n      ? dehydratedBlockRegistry.get(hydrationQueue[parentDeferBlockIdx])\n      : null;\n  if (parentDeferBlock) {\n    cleanupLContainer(parentDeferBlock.lContainer);\n  }\n}\n\nfunction cleanupRemainingHydrationQueue(\n  hydrationQueue: string[],\n  dehydratedBlockRegistry: DehydratedBlockRegistry,\n) {\n  const blocksBeingHydrated = dehydratedBlockRegistry.hydrating;\n  for (const dehydratedBlockId in hydrationQueue) {\n    blocksBeingHydrated.get(dehydratedBlockId)?.reject();\n  }\n  dehydratedBlockRegistry.cleanup(hydrationQueue);\n}\n\n/**\n * Generates a new promise for every defer block in the hydrating queue\n */\nfunction populateHydratingStateForQueue(registry: DehydratedBlockRegistry, queue: string[]) {\n  for (let blockId of queue) {\n    registry.hydrating.set(blockId, Promise.withResolvers());\n  }\n}\n\n// Waits for the next render cycle to complete\nfunction nextRender(injector: Injector): Promise<void> {\n  return new Promise<void>((resolveFn) => afterNextRender(resolveFn, {injector}));\n}\n\nasync function triggerResourceLoadingForHydration(\n  dehydratedBlock: DehydratedDeferBlock,\n): Promise<void> {\n  const {tNode, lView} = dehydratedBlock;\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n\n  return new Promise<void>((resolve) => {\n    onDeferBlockCompletion(lDetails, resolve);\n    triggerDeferBlock(TriggerType.Hydrate, lView, tNode);\n  });\n}\n\n/**\n * Registers cleanup functions for a defer block when the block has finished\n * fetching and rendering\n */\nfunction onDeferBlockCompletion(lDetails: LDeferBlockDetails, callback: VoidFunction) {\n  if (!Array.isArray(lDetails[ON_COMPLETE_FNS])) {\n    lDetails[ON_COMPLETE_FNS] = [];\n  }\n  lDetails[ON_COMPLETE_FNS].push(callback);\n}\n\n/**\n * Determines whether specific trigger types should be attached during an instruction firing\n * to ensure the proper triggers for a given type are used.\n */\nexport function shouldAttachTrigger(triggerType: TriggerType, lView: LView, tNode: TNode): boolean {\n  if (triggerType === TriggerType.Regular) {\n    return shouldAttachRegularTrigger(lView, tNode);\n  } else if (triggerType === TriggerType.Hydrate) {\n    return !shouldAttachRegularTrigger(lView, tNode);\n  }\n  // TriggerType.Prefetch is active only on the client\n  return !(typeof ngServerMode !== 'undefined' && ngServerMode);\n}\n\n/**\n * Defines whether a regular trigger logic (e.g. \"on viewport\") should be attached\n * to a defer block. This function defines a condition, which mutually excludes\n * `deferOn*` and `deferHydrateOn*` triggers, to make sure only one of the trigger\n * types is active for a block with the current state.\n */\nfunction shouldAttachRegularTrigger(lView: LView, tNode: TNode): boolean {\n  const injector = lView[INJECTOR];\n\n  const tDetails = getTDeferBlockDetails(lView[TVIEW], tNode);\n  const incrementalHydrationEnabled = isIncrementalHydrationEnabled(injector);\n  const hasHydrateTriggers =\n    tDetails.flags !== null &&\n    (tDetails.flags & TDeferDetailsFlags.HasHydrateTriggers) ===\n      TDeferDetailsFlags.HasHydrateTriggers;\n\n  // On the server:\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // Regular triggers are activated on the server when:\n    //  - Either Incremental Hydration is *not* enabled\n    //  - Or Incremental Hydration is enabled, but a given block doesn't have \"hydrate\" triggers\n    return !incrementalHydrationEnabled || !hasHydrateTriggers;\n  }\n\n  // On the client:\n  const lDetails = getLDeferBlockDetails(lView, tNode);\n  const wasServerSideRendered = lDetails[SSR_UNIQUE_ID] !== null;\n\n  if (hasHydrateTriggers && wasServerSideRendered && incrementalHydrationEnabled) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Retrives a Defer Block's list of hydration triggers\n */\nexport function getHydrateTriggers(\n  tView: TView,\n  tNode: TNode,\n): Map<DeferBlockTrigger, HydrateTriggerDetails | null> {\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n  return (tDetails.hydrateTriggers ??= new Map());\n}\n\n/**\n * Loops through all defer block summaries and ensures all the blocks triggers are\n * properly initialized\n */\nexport function processAndInitTriggers(\n  injector: Injector,\n  blockData: Map<string, BlockSummary>,\n  nodes: Map<string, Comment>,\n) {\n  const idleElements: ElementTrigger[] = [];\n  const timerElements: ElementTrigger[] = [];\n  const viewportElements: ElementTrigger[] = [];\n  const immediateElements: ElementTrigger[] = [];\n  for (let [blockId, blockSummary] of blockData) {\n    const commentNode = nodes.get(blockId);\n    if (commentNode !== undefined) {\n      const numRootNodes = blockSummary.data[NUM_ROOT_NODES];\n      let currentNode: Comment | HTMLElement = commentNode;\n      for (let i = 0; i < numRootNodes; i++) {\n        currentNode = currentNode.previousSibling as HTMLElement;\n        if (currentNode.nodeType !== Node.ELEMENT_NODE) {\n          continue;\n        }\n        const elementTrigger: ElementTrigger = {el: currentNode, blockName: blockId};\n        // hydrate\n        if (blockSummary.hydrate.idle) {\n          idleElements.push(elementTrigger);\n        }\n        if (blockSummary.hydrate.immediate) {\n          immediateElements.push(elementTrigger);\n        }\n        if (blockSummary.hydrate.timer !== null) {\n          elementTrigger.delay = blockSummary.hydrate.timer;\n          timerElements.push(elementTrigger);\n        }\n        if (blockSummary.hydrate.viewport) {\n          viewportElements.push(elementTrigger);\n        }\n      }\n    }\n  }\n\n  setIdleTriggers(injector, idleElements);\n  setImmediateTriggers(injector, immediateElements);\n  setViewportTriggers(injector, viewportElements);\n  setTimerTriggers(injector, timerElements);\n}\n\nfunction setIdleTriggers(injector: Injector, elementTriggers: ElementTrigger[]) {\n  for (const elementTrigger of elementTriggers) {\n    const registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n    const onInvoke = () => triggerHydrationFromBlockName(injector, elementTrigger.blockName);\n    const cleanupFn = onIdle(onInvoke, injector);\n    registry.addCleanupFn(elementTrigger.blockName, cleanupFn);\n  }\n}\n\nfunction setViewportTriggers(injector: Injector, elementTriggers: ElementTrigger[]) {\n  if (elementTriggers.length > 0) {\n    const registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n    for (let elementTrigger of elementTriggers) {\n      const cleanupFn = onViewport(\n        elementTrigger.el,\n        () => triggerHydrationFromBlockName(injector, elementTrigger.blockName),\n        injector,\n      );\n      registry.addCleanupFn(elementTrigger.blockName, cleanupFn);\n    }\n  }\n}\n\nfunction setTimerTriggers(injector: Injector, elementTriggers: ElementTrigger[]) {\n  for (const elementTrigger of elementTriggers) {\n    const registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n    const onInvoke = () => triggerHydrationFromBlockName(injector, elementTrigger.blockName);\n    const timerFn = onTimer(elementTrigger.delay!);\n    const cleanupFn = timerFn(onInvoke, injector);\n    registry.addCleanupFn(elementTrigger.blockName, cleanupFn);\n  }\n}\n\nfunction setImmediateTriggers(injector: Injector, elementTriggers: ElementTrigger[]) {\n  for (const elementTrigger of elementTriggers) {\n    // Note: we intentionally avoid awaiting each call and instead kick off\n    // the hydration process simultaneously for all defer blocks with this trigger;\n    triggerHydrationFromBlockName(injector, elementTrigger.blockName);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {setActiveConsumer} from '@angular/core/primitives/signals';\n\nimport {\n  DEFER_BLOCK_ID,\n  DEFER_BLOCK_STATE as SERIALIZED_DEFER_BLOCK_STATE,\n} from '../hydration/interfaces';\nimport {populateDehydratedViewsInLContainer} from '../linker/view_container_ref';\nimport {bindingUpdated} from '../render3/bindings';\nimport {declareTemplate} from '../render3/instructions/template';\nimport {DEHYDRATED_VIEWS} from '../render3/interfaces/container';\nimport {HEADER_OFFSET, INJECTOR, TVIEW} from '../render3/interfaces/view';\nimport {\n  getCurrentTNode,\n  getLView,\n  getSelectedTNode,\n  getTView,\n  nextBindingIndex,\n} from '../render3/state';\nimport {removeLViewOnDestroy, storeLViewOnDestroy} from '../render3/util/view_utils';\nimport {performanceMarkFeature} from '../util/performance';\nimport {invokeAllTriggerCleanupFns, storeTriggerCleanupFn} from './cleanup';\nimport {onHover, onInteraction, onViewport, registerDomTrigger} from './dom_triggers';\nimport {onIdle} from './idle_scheduler';\nimport {\n  DEFER_BLOCK_STATE,\n  DeferBlockInternalState,\n  DeferBlockState,\n  DeferDependenciesLoadingState,\n  DependencyResolverFn,\n  DeferBlockTrigger,\n  LDeferBlockDetails,\n  TDeferBlockDetails,\n  TriggerType,\n  SSR_UNIQUE_ID,\n  TDeferDetailsFlags,\n} from './interfaces';\nimport {onTimer} from './timer_scheduler';\nimport {\n  getLDeferBlockDetails,\n  getTDeferBlockDetails,\n  setLDeferBlockDetails,\n  setTDeferBlockDetails,\n  trackTriggerForDebugging,\n} from './utils';\nimport {DEHYDRATED_BLOCK_REGISTRY, DehydratedBlockRegistry} from './registry';\nimport {assertIncrementalHydrationIsConfigured, assertSsrIdDefined} from '../hydration/utils';\nimport {ɵɵdeferEnableTimerScheduling, renderPlaceholder} from './rendering';\n\nimport {\n  getHydrateTriggers,\n  triggerHydrationFromBlockName,\n  scheduleDelayedHydrating,\n  scheduleDelayedPrefetching,\n  scheduleDelayedTrigger,\n  triggerDeferBlock,\n  triggerPrefetching,\n  triggerResourceLoading,\n  shouldAttachTrigger,\n} from './triggering';\n\n/**\n * Creates runtime data structures for defer blocks.\n *\n * @param index Index of the `defer` instruction.\n * @param primaryTmplIndex Index of the template with the primary block content.\n * @param dependencyResolverFn Function that contains dependencies for this defer block.\n * @param loadingTmplIndex Index of the template with the loading block content.\n * @param placeholderTmplIndex Index of the template with the placeholder block content.\n * @param errorTmplIndex Index of the template with the error block content.\n * @param loadingConfigIndex Index in the constants array of the configuration of the loading.\n *     block.\n * @param placeholderConfigIndex Index in the constants array of the configuration of the\n *     placeholder block.\n * @param enableTimerScheduling Function that enables timer-related scheduling if `after`\n *     or `minimum` parameters are setup on the `@loading` or `@placeholder` blocks.\n * @param flags A set of flags to define a particular behavior (e.g. to indicate that\n *              hydrate triggers are present and regular triggers should be deactivated\n *              in certain scenarios).\n *\n * @codeGenApi\n */\nexport function ɵɵdefer(\n  index: number,\n  primaryTmplIndex: number,\n  dependencyResolverFn?: DependencyResolverFn | null,\n  loadingTmplIndex?: number | null,\n  placeholderTmplIndex?: number | null,\n  errorTmplIndex?: number | null,\n  loadingConfigIndex?: number | null,\n  placeholderConfigIndex?: number | null,\n  enableTimerScheduling?: typeof ɵɵdeferEnableTimerScheduling,\n  flags?: TDeferDetailsFlags | null,\n) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  const tNode = declareTemplate(lView, tView, index, null, 0, 0);\n  const injector = lView[INJECTOR];\n\n  if (tView.firstCreatePass) {\n    performanceMarkFeature('NgDefer');\n\n    const tDetails: TDeferBlockDetails = {\n      primaryTmplIndex,\n      loadingTmplIndex: loadingTmplIndex ?? null,\n      placeholderTmplIndex: placeholderTmplIndex ?? null,\n      errorTmplIndex: errorTmplIndex ?? null,\n      placeholderBlockConfig: null,\n      loadingBlockConfig: null,\n      dependencyResolverFn: dependencyResolverFn ?? null,\n      loadingState: DeferDependenciesLoadingState.NOT_STARTED,\n      loadingPromise: null,\n      providers: null,\n      hydrateTriggers: null,\n      debug: null,\n      flags: flags ?? TDeferDetailsFlags.Default,\n    };\n    enableTimerScheduling?.(tView, tDetails, placeholderConfigIndex, loadingConfigIndex);\n    setTDeferBlockDetails(tView, adjustedIndex, tDetails);\n  }\n\n  const lContainer = lView[adjustedIndex];\n\n  // If hydration is enabled, looks up dehydrated views in the DOM\n  // using hydration annotation info and stores those views on LContainer.\n  // In client-only mode, this function is a noop.\n  populateDehydratedViewsInLContainer(lContainer, tNode, lView);\n\n  let ssrBlockState = null;\n  let ssrUniqueId: string | null = null;\n  if (lContainer[DEHYDRATED_VIEWS]?.length > 0) {\n    const info = lContainer[DEHYDRATED_VIEWS][0].data;\n    ssrUniqueId = info[DEFER_BLOCK_ID] ?? null;\n    ssrBlockState = info[SERIALIZED_DEFER_BLOCK_STATE];\n  }\n\n  // Init instance-specific defer details and store it.\n  const lDetails: LDeferBlockDetails = [\n    null, // NEXT_DEFER_BLOCK_STATE\n    DeferBlockInternalState.Initial, // DEFER_BLOCK_STATE\n    null, // STATE_IS_FROZEN_UNTIL\n    null, // LOADING_AFTER_CLEANUP_FN\n    null, // TRIGGER_CLEANUP_FNS\n    null, // PREFETCH_TRIGGER_CLEANUP_FNS\n    ssrUniqueId, // SSR_UNIQUE_ID\n    ssrBlockState, // SSR_BLOCK_STATE\n    null, // ON_COMPLETE_FNS\n    null, // HYDRATE_TRIGGER_CLEANUP_FNS\n  ];\n  setLDeferBlockDetails(lView, adjustedIndex, lDetails);\n\n  let registry: DehydratedBlockRegistry | null = null;\n  if (ssrUniqueId !== null) {\n    ngDevMode && assertIncrementalHydrationIsConfigured(injector);\n\n    // Store this defer block in the registry, to have an access to\n    // internal data structures from hydration runtime code.\n    registry = injector.get(DEHYDRATED_BLOCK_REGISTRY);\n    registry.add(ssrUniqueId, {lView, tNode, lContainer});\n  }\n\n  const onLViewDestroy = () => {\n    invokeAllTriggerCleanupFns(lDetails);\n    if (ssrUniqueId !== null) {\n      registry?.cleanup([ssrUniqueId]);\n    }\n  };\n\n  // When defer block is triggered - unsubscribe from LView destroy cleanup.\n  storeTriggerCleanupFn(TriggerType.Regular, lDetails, () =>\n    removeLViewOnDestroy(lView, onLViewDestroy),\n  );\n  storeLViewOnDestroy(lView, onLViewDestroy);\n}\n\n/**\n * Loads defer block dependencies when a trigger value becomes truthy.\n * @codeGenApi\n */\nexport function ɵɵdeferWhen(rawValue: unknown) {\n  const lView = getLView();\n  const tNode = getSelectedTNode();\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'when <expression>');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Regular, lView, tNode)) return;\n\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, rawValue)) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      const value = Boolean(rawValue); // handle truthy or falsy values\n      const lDetails = getLDeferBlockDetails(lView, tNode);\n      const renderedState = lDetails[DEFER_BLOCK_STATE];\n      if (value === false && renderedState === DeferBlockInternalState.Initial) {\n        // If nothing is rendered yet, render a placeholder (if defined).\n        renderPlaceholder(lView, tNode);\n      } else if (\n        value === true &&\n        (renderedState === DeferBlockInternalState.Initial ||\n          renderedState === DeferBlockState.Placeholder)\n      ) {\n        triggerDeferBlock(TriggerType.Regular, lView, tNode);\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\n\n/**\n * Prefetches the deferred content when a value becomes truthy.\n * @codeGenApi\n */\nexport function ɵɵdeferPrefetchWhen(rawValue: unknown) {\n  const lView = getLView();\n  const tNode = getSelectedTNode();\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'prefetch when <expression>');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Prefetch, lView, tNode)) return;\n\n  const bindingIndex = nextBindingIndex();\n\n  if (bindingUpdated(lView, bindingIndex, rawValue)) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      const value = Boolean(rawValue); // handle truthy or falsy values\n      const tView = lView[TVIEW];\n      const tNode = getSelectedTNode();\n      const tDetails = getTDeferBlockDetails(tView, tNode);\n      if (value === true && tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n        // If loading has not been started yet, trigger it now.\n        triggerPrefetching(tDetails, lView, tNode);\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  }\n}\n\n/**\n * Hydrates the deferred content when a value becomes truthy.\n * @codeGenApi\n */\nexport function ɵɵdeferHydrateWhen(rawValue: unknown) {\n  const lView = getLView();\n  const tNode = getSelectedTNode();\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate when <expression>');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Hydrate, lView, tNode)) return;\n\n  // TODO(incremental-hydration): audit all defer instructions to reduce unnecessary work by\n  // moving function calls inside their relevant control flow blocks\n  const bindingIndex = nextBindingIndex();\n  const tView = getTView();\n  const hydrateTriggers = getHydrateTriggers(tView, tNode);\n  hydrateTriggers.set(DeferBlockTrigger.When, null);\n\n  if (bindingUpdated(lView, bindingIndex, rawValue)) {\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n      // We are on the server and SSR for defer blocks is enabled.\n      triggerDeferBlock(TriggerType.Hydrate, lView, tNode);\n    } else {\n      const injector = lView[INJECTOR];\n      const prevConsumer = setActiveConsumer(null);\n      try {\n        const value = Boolean(rawValue); // handle truthy or falsy values\n        if (value === true) {\n          // The `when` condition has changed to `true`, trigger defer block loading\n          // if the block is either in initial (nothing is rendered) or a placeholder\n          // state.\n          const lDetails = getLDeferBlockDetails(lView, tNode);\n          const ssrUniqueId = lDetails[SSR_UNIQUE_ID]!;\n          ngDevMode && assertSsrIdDefined(ssrUniqueId);\n          triggerHydrationFromBlockName(injector, ssrUniqueId);\n        }\n      } finally {\n        setActiveConsumer(prevConsumer);\n      }\n    }\n  }\n}\n\n/**\n * Specifies that hydration never occurs.\n * @codeGenApi\n */\nexport function ɵɵdeferHydrateNever() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate never');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Hydrate, lView, tNode)) return;\n\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(DeferBlockTrigger.Never, null);\n\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(TriggerType.Hydrate, lView, tNode);\n  }\n}\n\n/**\n * Sets up logic to handle the `on idle` deferred trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferOnIdle() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'on idle');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Regular, lView, tNode)) return;\n\n  scheduleDelayedTrigger(onIdle);\n}\n\n/**\n * Sets up logic to handle the `prefetch on idle` deferred trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferPrefetchOnIdle() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'prefetch on idle');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Prefetch, lView, tNode)) return;\n\n  scheduleDelayedPrefetching(onIdle, DeferBlockTrigger.Idle);\n}\n\n/**\n * Sets up logic to handle the `on idle` deferred trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferHydrateOnIdle() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on idle');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Hydrate, lView, tNode)) return;\n\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(DeferBlockTrigger.Idle, null);\n\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(TriggerType.Hydrate, lView, tNode);\n  } else {\n    scheduleDelayedHydrating(onIdle, lView, tNode);\n  }\n}\n\n/**\n * Sets up logic to handle the `on immediate` deferred trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferOnImmediate() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'on immediate');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Regular, lView, tNode)) return;\n\n  // Render placeholder block only if loading template is not present and we're on\n  // the client to avoid content flickering, since it would be immediately replaced\n  // by the loading block.\n  const tDetails = getTDeferBlockDetails(lView[TVIEW], tNode);\n  if (tDetails.loadingTmplIndex === null) {\n    renderPlaceholder(lView, tNode);\n  }\n  triggerDeferBlock(TriggerType.Regular, lView, tNode);\n}\n\n/**\n * Sets up logic to handle the `prefetch on immediate` deferred trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferPrefetchOnImmediate() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'prefetch on immediate');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Prefetch, lView, tNode)) return;\n\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    triggerResourceLoading(tDetails, lView, tNode);\n  }\n}\n\n/**\n * Sets up logic to handle the `on immediate` hydrate trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferHydrateOnImmediate() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on immediate');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Hydrate, lView, tNode)) return;\n\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(DeferBlockTrigger.Immediate, null);\n\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    triggerDeferBlock(TriggerType.Hydrate, lView, tNode);\n  } else {\n    const injector = lView[INJECTOR];\n    const lDetails = getLDeferBlockDetails(lView, tNode);\n    const ssrUniqueId = lDetails[SSR_UNIQUE_ID]!;\n    ngDevMode && assertSsrIdDefined(ssrUniqueId);\n    triggerHydrationFromBlockName(injector, ssrUniqueId);\n  }\n}\n/**\n * Creates runtime data structures for the `on timer` deferred trigger.\n * @param delay Amount of time to wait before loading the content.\n * @codeGenApi\n */\nexport function ɵɵdeferOnTimer(delay: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `on timer(${delay}ms)`);\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Regular, lView, tNode)) return;\n\n  scheduleDelayedTrigger(onTimer(delay));\n}\n\n/**\n * Creates runtime data structures for the `prefetch on timer` deferred trigger.\n * @param delay Amount of time to wait before prefetching the content.\n * @codeGenApi\n */\nexport function ɵɵdeferPrefetchOnTimer(delay: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `prefetch on timer(${delay}ms)`);\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Prefetch, lView, tNode)) return;\n\n  scheduleDelayedPrefetching(onTimer(delay), DeferBlockTrigger.Timer);\n}\n\n/**\n * Creates runtime data structures for the `on timer` hydrate trigger.\n * @param delay Amount of time to wait before loading the content.\n * @codeGenApi\n */\nexport function ɵɵdeferHydrateOnTimer(delay: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, `hydrate on timer(${delay}ms)`);\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Hydrate, lView, tNode)) return;\n\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(DeferBlockTrigger.Timer, {delay});\n\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(TriggerType.Hydrate, lView, tNode);\n  } else {\n    scheduleDelayedHydrating(onTimer(delay), lView, tNode);\n  }\n}\n\n/**\n * Creates runtime data structures for the `on hover` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferOnHover(triggerIndex: number, walkUpTimes?: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(\n      lView[TVIEW],\n      tNode,\n      `on hover${walkUpTimes === -1 ? '' : '(<target>)'}`,\n    );\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Regular, lView, tNode)) return;\n\n  renderPlaceholder(lView, tNode);\n\n  // Avoid adding event listeners when this instruction is invoked on the server.\n  if (!(typeof ngServerMode !== 'undefined' && ngServerMode)) {\n    registerDomTrigger(\n      lView,\n      tNode,\n      triggerIndex,\n      walkUpTimes,\n      onHover,\n      () => triggerDeferBlock(TriggerType.Regular, lView, tNode),\n      TriggerType.Regular,\n    );\n  }\n}\n\n/**\n * Creates runtime data structures for the `prefetch on hover` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferPrefetchOnHover(triggerIndex: number, walkUpTimes?: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(\n      lView[TVIEW],\n      tNode,\n      `prefetch on hover${walkUpTimes === -1 ? '' : '(<target>)'}`,\n    );\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Prefetch, lView, tNode)) return;\n\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    registerDomTrigger(\n      lView,\n      tNode,\n      triggerIndex,\n      walkUpTimes,\n      onHover,\n      () => triggerPrefetching(tDetails, lView, tNode),\n      TriggerType.Prefetch,\n    );\n  }\n}\n\n/**\n * Creates runtime data structures for the `on hover` hydrate trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferHydrateOnHover() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on hover');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Hydrate, lView, tNode)) return;\n\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(DeferBlockTrigger.Hover, null);\n\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(TriggerType.Hydrate, lView, tNode);\n  }\n  // The actual triggering of hydration on hover is handled by JSAction in\n  // event_replay.ts.\n}\n\n/**\n * Creates runtime data structures for the `on interaction` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferOnInteraction(triggerIndex: number, walkUpTimes?: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(\n      lView[TVIEW],\n      tNode,\n      `on interaction${walkUpTimes === -1 ? '' : '(<target>)'}`,\n    );\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Regular, lView, tNode)) return;\n\n  renderPlaceholder(lView, tNode);\n\n  // Avoid adding event listeners when this instruction is invoked on the server.\n  if (!(typeof ngServerMode !== 'undefined' && ngServerMode)) {\n    registerDomTrigger(\n      lView,\n      tNode,\n      triggerIndex,\n      walkUpTimes,\n      onInteraction,\n      () => triggerDeferBlock(TriggerType.Regular, lView, tNode),\n      TriggerType.Regular,\n    );\n  }\n}\n\n/**\n * Creates runtime data structures for the `prefetch on interaction` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferPrefetchOnInteraction(triggerIndex: number, walkUpTimes?: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(\n      lView[TVIEW],\n      tNode,\n      `prefetch on interaction${walkUpTimes === -1 ? '' : '(<target>)'}`,\n    );\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Prefetch, lView, tNode)) return;\n\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    registerDomTrigger(\n      lView,\n      tNode,\n      triggerIndex,\n      walkUpTimes,\n      onInteraction,\n      () => triggerPrefetching(tDetails, lView, tNode),\n      TriggerType.Prefetch,\n    );\n  }\n}\n\n/**\n * Creates runtime data structures for the `on interaction` hydrate trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferHydrateOnInteraction() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on interaction');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Hydrate, lView, tNode)) return;\n\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(DeferBlockTrigger.Interaction, null);\n\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(TriggerType.Hydrate, lView, tNode);\n  }\n  // The actual triggering of hydration on interaction is handled by JSAction in\n  // event_replay.ts.\n}\n\n/**\n * Creates runtime data structures for the `on viewport` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferOnViewport(triggerIndex: number, walkUpTimes?: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(\n      lView[TVIEW],\n      tNode,\n      `on viewport${walkUpTimes === -1 ? '' : '(<target>)'}`,\n    );\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Regular, lView, tNode)) return;\n\n  renderPlaceholder(lView, tNode);\n\n  // Avoid adding event listeners when this instruction is invoked on the server.\n  if (!(typeof ngServerMode !== 'undefined' && ngServerMode)) {\n    registerDomTrigger(\n      lView,\n      tNode,\n      triggerIndex,\n      walkUpTimes,\n      onViewport,\n      () => triggerDeferBlock(TriggerType.Regular, lView, tNode),\n      TriggerType.Regular,\n    );\n  }\n}\n\n/**\n * Creates runtime data structures for the `prefetch on viewport` deferred trigger.\n * @param triggerIndex Index at which to find the trigger element.\n * @param walkUpTimes Number of times to walk up/down the tree hierarchy to find the trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferPrefetchOnViewport(triggerIndex: number, walkUpTimes?: number) {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(\n      lView[TVIEW],\n      tNode,\n      `prefetch on viewport${walkUpTimes === -1 ? '' : '(<target>)'}`,\n    );\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Prefetch, lView, tNode)) return;\n\n  const tView = lView[TVIEW];\n  const tDetails = getTDeferBlockDetails(tView, tNode);\n\n  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {\n    registerDomTrigger(\n      lView,\n      tNode,\n      triggerIndex,\n      walkUpTimes,\n      onViewport,\n      () => triggerPrefetching(tDetails, lView, tNode),\n      TriggerType.Prefetch,\n    );\n  }\n}\n\n/**\n * Creates runtime data structures for the `on viewport` hydrate trigger.\n * @codeGenApi\n */\nexport function ɵɵdeferHydrateOnViewport() {\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n\n  if (ngDevMode) {\n    trackTriggerForDebugging(lView[TVIEW], tNode, 'hydrate on viewport');\n  }\n\n  if (!shouldAttachTrigger(TriggerType.Hydrate, lView, tNode)) return;\n\n  const hydrateTriggers = getHydrateTriggers(getTView(), tNode);\n  hydrateTriggers.set(DeferBlockTrigger.Viewport, null);\n\n  if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n    // We are on the server and SSR for defer blocks is enabled.\n    triggerDeferBlock(TriggerType.Hydrate, lView, tNode);\n  }\n  // The actual triggering of hydration on viewport happens in triggering.ts,\n  // since these instructions won't exist for dehydrated content.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {bindingUpdated} from '../bindings';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {getLView, getSelectedTNode, getTView, nextBindingIndex} from '../state';\nimport {elementAttributeInternal, storePropertyBindingMetadata} from './shared';\n\n/**\n * Updates the value of or removes a bound attribute on an Element.\n *\n * Used in the case of `[attr.title]=\"value\"`\n *\n * @param name name The name of the attribute.\n * @param value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param sanitizer An optional function used to sanitize the value.\n * @param namespace Optional namespace to use when setting the attribute.\n *\n * @codeGenApi\n */\nexport function ɵɵattribute(\n  name: string,\n  value: any,\n  sanitizer?: SanitizerFn | null,\n  namespace?: string,\n): typeof ɵɵattribute {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);\n  }\n  return ɵɵattribute;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertEqual, assertLessThan} from '../../util/assert';\nimport {bindingUpdated, bindingUpdated2, bindingUpdated3, bindingUpdated4} from '../bindings';\nimport {LView} from '../interfaces/view';\nimport {getBindingIndex, incrementBindingIndex, nextBindingIndex, setBindingIndex} from '../state';\nimport {NO_CHANGE} from '../tokens';\nimport {renderStringify} from '../util/stringify_utils';\n\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function interpolationV(lView: LView, values: any[]): string | NO_CHANGE {\n  ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n  ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n  let isBindingUpdated = false;\n  let bindingIndex = getBindingIndex();\n\n  for (let i = 1; i < values.length; i += 2) {\n    // Check if bindings (odd indexes) have changed\n    isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\n  }\n  setBindingIndex(bindingIndex);\n\n  if (!isBindingUpdated) {\n    return NO_CHANGE;\n  }\n\n  // Build the updated content\n  let content = values[0];\n  for (let i = 1; i < values.length; i += 2) {\n    content += renderStringify(values[i]) + values[i + 1];\n  }\n\n  return content;\n}\n\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param prefix static value used for concatenation only.\n * @param v0 value checked for change.\n * @param suffix static value used for concatenation only.\n */\nexport function interpolation1(\n  lView: LView,\n  prefix: string,\n  v0: any,\n  suffix: string,\n): string | NO_CHANGE {\n  const different = bindingUpdated(lView, nextBindingIndex(), v0);\n  return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 2 expressions.\n */\nexport function interpolation2(\n  lView: LView,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  suffix: string,\n): string | NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated2(lView, bindingIndex, v0, v1);\n  incrementBindingIndex(2);\n\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 3 expressions.\n */\nexport function interpolation3(\n  lView: LView,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  suffix: string,\n): string | NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n  incrementBindingIndex(3);\n\n  return different\n    ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix\n    : NO_CHANGE;\n}\n\n/**\n * Create an interpolation binding with 4 expressions.\n */\nexport function interpolation4(\n  lView: LView,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  suffix: string,\n): string | NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  incrementBindingIndex(4);\n\n  return different\n    ? prefix +\n        renderStringify(v0) +\n        i0 +\n        renderStringify(v1) +\n        i1 +\n        renderStringify(v2) +\n        i2 +\n        renderStringify(v3) +\n        suffix\n    : NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 5 expressions.\n */\nexport function interpolation5(\n  lView: LView,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  suffix: string,\n): string | NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n  incrementBindingIndex(5);\n\n  return different\n    ? prefix +\n        renderStringify(v0) +\n        i0 +\n        renderStringify(v1) +\n        i1 +\n        renderStringify(v2) +\n        i2 +\n        renderStringify(v3) +\n        i3 +\n        renderStringify(v4) +\n        suffix\n    : NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 6 expressions.\n */\nexport function interpolation6(\n  lView: LView,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  suffix: string,\n): string | NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n  incrementBindingIndex(6);\n\n  return different\n    ? prefix +\n        renderStringify(v0) +\n        i0 +\n        renderStringify(v1) +\n        i1 +\n        renderStringify(v2) +\n        i2 +\n        renderStringify(v3) +\n        i3 +\n        renderStringify(v4) +\n        i4 +\n        renderStringify(v5) +\n        suffix\n    : NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 7 expressions.\n */\nexport function interpolation7(\n  lView: LView,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  suffix: string,\n): string | NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n  incrementBindingIndex(7);\n\n  return different\n    ? prefix +\n        renderStringify(v0) +\n        i0 +\n        renderStringify(v1) +\n        i1 +\n        renderStringify(v2) +\n        i2 +\n        renderStringify(v3) +\n        i3 +\n        renderStringify(v4) +\n        i4 +\n        renderStringify(v5) +\n        i5 +\n        renderStringify(v6) +\n        suffix\n    : NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 8 expressions.\n */\nexport function interpolation8(\n  lView: LView,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  i6: string,\n  v7: any,\n  suffix: string,\n): string | NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n  incrementBindingIndex(8);\n\n  return different\n    ? prefix +\n        renderStringify(v0) +\n        i0 +\n        renderStringify(v1) +\n        i1 +\n        renderStringify(v2) +\n        i2 +\n        renderStringify(v3) +\n        i3 +\n        renderStringify(v4) +\n        i4 +\n        renderStringify(v5) +\n        i5 +\n        renderStringify(v6) +\n        i6 +\n        renderStringify(v7) +\n        suffix\n    : NO_CHANGE;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {KeyValueArray} from '../../util/array_utils';\nimport {assertNumber, assertNumberInRange} from '../../util/assert';\n\n/**\n * Value stored in the `TData` which is needed to re-concatenate the styling.\n *\n * See: `TStylingKeyPrimitive` and `TStylingStatic`\n */\nexport type TStylingKey = TStylingKeyPrimitive | TStylingStatic;\n\n/**\n * The primitive portion (`TStylingStatic` removed) of the value stored in the `TData` which is\n * needed to re-concatenate the styling.\n *\n * - `string`: Stores the property name. Used with `ɵɵstyleProp`/`ɵɵclassProp` instruction.\n * - `null`: Represents map, so there is no name. Used with `ɵɵstyleMap`/`ɵɵclassMap`.\n * - `false`: Represents an ignore case. This happens when `ɵɵstyleProp`/`ɵɵclassProp` instruction\n *   is combined with directive which shadows its input `@Input('class')`. That way the binding\n *   should not participate in the styling resolution.\n */\nexport type TStylingKeyPrimitive = string | null | false;\n\n/**\n * Store the static values for the styling binding.\n *\n * The `TStylingStatic` is just `KeyValueArray` where key `\"\"` (stored at location 0) contains the\n * `TStylingKey` (stored at location 1). In other words this wraps the `TStylingKey` such that the\n * `\"\"` contains the wrapped value.\n *\n * When instructions are resolving styling they may need to look forward or backwards in the linked\n * list to resolve the value. For this reason we have to make sure that he linked list also contains\n * the static values. However the list only has space for one item per styling instruction. For this\n * reason we store the static values here as part of the `TStylingKey`. This means that the\n * resolution function when looking for a value needs to first look at the binding value, and than\n * at `TStylingKey` (if it exists).\n *\n * Imagine we have:\n *\n * ```angular-ts\n * <div class=\"TEMPLATE\" my-dir>\n *\n * @Directive({\n *   host: {\n *     class: 'DIR',\n *     '[class.dynamic]': 'exp' // ɵɵclassProp('dynamic', ctx.exp);\n *   }\n * })\n * ```\n *\n * In the above case the linked list will contain one item:\n *\n * ```ts\n *   // assume binding location: 10 for `ɵɵclassProp('dynamic', ctx.exp);`\n *   tData[10] = <TStylingStatic>[\n *     '': 'dynamic', // This is the wrapped value of `TStylingKey`\n *     'DIR': true,   // This is the default static value of directive binding.\n *   ];\n *   tData[10 + 1] = 0; // We don't have prev/next.\n *\n *   lView[10] = undefined;     // assume `ctx.exp` is `undefined`\n *   lView[10 + 1] = undefined; // Just normalized `lView[10]`\n * ```\n *\n * So when the function is resolving styling value, it first needs to look into the linked list\n * (there is none) and than into the static `TStylingStatic` too see if there is a default value for\n * `dynamic` (there is not). Therefore it is safe to remove it.\n *\n * If setting `true` case:\n * ```ts\n *   lView[10] = true;     // assume `ctx.exp` is `true`\n *   lView[10 + 1] = true; // Just normalized `lView[10]`\n * ```\n * So when the function is resolving styling value, it first needs to look into the linked list\n * (there is none) and than into `TNode.residualClass` (TNode.residualStyle) which contains\n * ```ts\n *   tNode.residualClass = [\n *     'TEMPLATE': true,\n *   ];\n * ```\n *\n * This means that it is safe to add class.\n */\nexport interface TStylingStatic extends KeyValueArray<any> {}\n\n/**\n * This is a branded number which contains previous and next index.\n *\n * When we come across styling instructions we need to store the `TStylingKey` in the correct\n * order so that we can re-concatenate the styling value in the desired priority.\n *\n * The insertion can happen either at the:\n * - end of template as in the case of coming across additional styling instruction in the template\n * - in front of the template in the case of coming across additional instruction in the\n *   `hostBindings`.\n *\n * We use `TStylingRange` to store the previous and next index into the `TData` where the template\n * bindings can be found.\n *\n * - bit 0 is used to mark that the previous index has a duplicate for current value.\n * - bit 1 is used to mark that the next index has a duplicate for the current value.\n * - bits 2-16 are used to encode the next/tail of the template.\n * - bits 17-32 are used to encode the previous/head of template.\n *\n * NODE: *duplicate* false implies that it is statically known that this binding will not collide\n * with other bindings and therefore there is no need to check other bindings. For example the\n * bindings in `<div [style.color]=\"exp\" [style.width]=\"exp\">` will never collide and will have\n * their bits set accordingly. Previous duplicate means that we may need to check previous if the\n * current binding is `null`. Next duplicate means that we may need to check next bindings if the\n * current binding is not `null`.\n *\n * NOTE: `0` has special significance and represents `null` as in no additional pointer.\n */\nexport type TStylingRange = number & {\n  __brand__: 'TStylingRange';\n};\n\n/**\n * Shift and masks constants for encoding two numbers into and duplicate info into a single number.\n */\nexport const enum StylingRange {\n  /// Number of bits to shift for the previous pointer\n  PREV_SHIFT = 17,\n  /// Previous pointer mask.\n  PREV_MASK = 0xfffe0000,\n\n  /// Number of bits to shift for the next pointer\n  NEXT_SHIFT = 2,\n  /// Next pointer mask.\n  NEXT_MASK = 0x001fffc,\n\n  // Mask to remove negative bit. (interpret number as positive)\n  UNSIGNED_MASK = 0x7fff,\n\n  /**\n   * This bit is set if the previous bindings contains a binding which could possibly cause a\n   * duplicate. For example: `<div [style]=\"map\" [style.width]=\"width\">`, the `width` binding will\n   * have previous duplicate set. The implication is that if `width` binding becomes `null`, it is\n   * necessary to defer the value to `map.width`. (Because `width` overwrites `map.width`.)\n   */\n  PREV_DUPLICATE = 0x02,\n\n  /**\n   * This bit is set to if the next binding contains a binding which could possibly cause a\n   * duplicate. For example: `<div [style]=\"map\" [style.width]=\"width\">`, the `map` binding will\n   * have next duplicate set. The implication is that if `map.width` binding becomes not `null`, it\n   * is necessary to defer the value to `width`. (Because `width` overwrites `map.width`.)\n   */\n  NEXT_DUPLICATE = 0x01,\n}\n\nexport function toTStylingRange(prev: number, next: number): TStylingRange {\n  ngDevMode && assertNumberInRange(prev, 0, StylingRange.UNSIGNED_MASK);\n  ngDevMode && assertNumberInRange(next, 0, StylingRange.UNSIGNED_MASK);\n  return ((prev << StylingRange.PREV_SHIFT) | (next << StylingRange.NEXT_SHIFT)) as TStylingRange;\n}\n\nexport function getTStylingRangePrev(tStylingRange: TStylingRange): number {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange >> StylingRange.PREV_SHIFT) & StylingRange.UNSIGNED_MASK;\n}\n\nexport function getTStylingRangePrevDuplicate(tStylingRange: TStylingRange): boolean {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & StylingRange.PREV_DUPLICATE) == StylingRange.PREV_DUPLICATE;\n}\n\nexport function setTStylingRangePrev(\n  tStylingRange: TStylingRange,\n  previous: number,\n): TStylingRange {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(previous, 0, StylingRange.UNSIGNED_MASK);\n  return ((tStylingRange & ~StylingRange.PREV_MASK) |\n    (previous << StylingRange.PREV_SHIFT)) as TStylingRange;\n}\n\nexport function setTStylingRangePrevDuplicate(tStylingRange: TStylingRange): TStylingRange {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange | StylingRange.PREV_DUPLICATE) as TStylingRange;\n}\n\nexport function getTStylingRangeNext(tStylingRange: TStylingRange): number {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & StylingRange.NEXT_MASK) >> StylingRange.NEXT_SHIFT;\n}\n\nexport function setTStylingRangeNext(tStylingRange: TStylingRange, next: number): TStylingRange {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(next, 0, StylingRange.UNSIGNED_MASK);\n  return ((tStylingRange & ~StylingRange.NEXT_MASK) | //\n    (next << StylingRange.NEXT_SHIFT)) as TStylingRange;\n}\n\nexport function getTStylingRangeNextDuplicate(tStylingRange: TStylingRange): boolean {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & StylingRange.NEXT_DUPLICATE) === StylingRange.NEXT_DUPLICATE;\n}\n\nexport function setTStylingRangeNextDuplicate(tStylingRange: TStylingRange): TStylingRange {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange | StylingRange.NEXT_DUPLICATE) as TStylingRange;\n}\n\nexport function getTStylingRangeTail(tStylingRange: TStylingRange): number {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  const next = getTStylingRangeNext(tStylingRange);\n  return next === 0 ? getTStylingRangePrev(tStylingRange) : next;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {KeyValueArray, keyValueArrayIndexOf} from '../../util/array_utils';\nimport {assertEqual, assertIndexInRange, assertNotEqual} from '../../util/assert';\nimport {assertFirstUpdatePass} from '../assert';\nimport {TNode} from '../interfaces/node';\nimport {\n  getTStylingRangeNext,\n  getTStylingRangePrev,\n  setTStylingRangeNext,\n  setTStylingRangeNextDuplicate,\n  setTStylingRangePrev,\n  setTStylingRangePrevDuplicate,\n  toTStylingRange,\n  TStylingKey,\n  TStylingKeyPrimitive,\n  TStylingRange,\n} from '../interfaces/styling';\nimport {TData} from '../interfaces/view';\nimport {getTView} from '../state';\n\n/**\n * NOTE: The word `styling` is used interchangeably as style or class styling.\n *\n * This file contains code to link styling instructions together so that they can be replayed in\n * priority order. The file exists because Ivy styling instruction execution order does not match\n * that of the priority order. The purpose of this code is to create a linked list so that the\n * instructions can be traversed in priority order when computing the styles.\n *\n * Assume we are dealing with the following code:\n * ```angular-ts\n * @Component({\n *   template: `\n *     <my-cmp [style]=\" {color: '#001'} \"\n *             [style.color]=\" #002 \"\n *             dir-style-color-1\n *             dir-style-color-2> `\n * })\n * class ExampleComponent {\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#001'});\n *     ɵɵstyleProp('color', '#002');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-1]',\n * })\n * class Style1Directive {\n *   @HostBinding('style') style = {color: '#005'};\n *   @HostBinding('style.color') color = '#006';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#005'});\n *     ɵɵstyleProp('color', '#006');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-2]',\n * })\n * class Style2Directive {\n *   @HostBinding('style') style = {color: '#007'};\n *   @HostBinding('style.color') color = '#008';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#007'});\n *     ɵɵstyleProp('color', '#008');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `my-cmp',\n * })\n * class MyComponent {\n *   @HostBinding('style') style = {color: '#003'};\n *   @HostBinding('style.color') color = '#004';\n *\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#003'});\n *     ɵɵstyleProp('color', '#004');\n *     ...\n *   }\n * }\n * ```\n *\n * The Order of instruction execution is:\n *\n * NOTE: the comment binding location is for illustrative purposes only.\n *\n * ```ts\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * ```\n *\n * The correct priority order of concatenation is:\n *\n * ```ts\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * ```\n *\n * What color should be rendered?\n *\n * Once the items are correctly sorted in the list, the answer is simply the last item in the\n * concatenation list which is `#002`.\n *\n * To do so we keep a linked list of all of the bindings which pertain to this element.\n * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows\n * us to traverse them in the order of priority.\n *\n * |Idx|`TView.data`|`LView`          | Notes\n * |---|------------|-----------------|--------------\n * |...|            |                 |\n * |10 |`null`      |`{color: '#001'}`| `ɵɵstyleMap('color', {color: '#001'})`\n * |11 |`30 | 12`   | ...             |\n * |12 |`color`     |`'#002'`         | `ɵɵstyleProp('color', '#002')`\n * |13 |`10 | 0`    | ...             |\n * |...|            |                 |\n * |20 |`null`      |`{color: '#003'}`| `ɵɵstyleMap('color', {color: '#003'})`\n * |21 |`0 | 22`    | ...             |\n * |22 |`color`     |`'#004'`         | `ɵɵstyleProp('color', '#004')`\n * |23 |`20 | 24`   | ...             |\n * |24 |`null`      |`{color: '#005'}`| `ɵɵstyleMap('color', {color: '#005'})`\n * |25 |`22 | 26`   | ...             |\n * |26 |`color`     |`'#006'`         | `ɵɵstyleProp('color', '#006')`\n * |27 |`24 | 28`   | ...             |\n * |28 |`null`      |`{color: '#007'}`| `ɵɵstyleMap('color', {color: '#007'})`\n * |29 |`26 | 30`   | ...             |\n * |30 |`color`     |`'#008'`         | `ɵɵstyleProp('color', '#008')`\n * |31 |`28 | 10`   | ...             |\n *\n * The above data structure allows us to re-concatenate the styling no matter which data binding\n * changes.\n *\n * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next\n * duplicate bit. The duplicate bit if true says there either is a binding with the same name or\n * there is a map (which may contain the name). This information is useful in knowing if other\n * styles with higher priority need to be searched for overwrites.\n *\n * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in\n * `tnode_linked_list_spec.ts` for working example.\n */\nlet __unused_const_as_closure_does_not_like_standalone_comment_blocks__: undefined;\n\n/**\n * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked\n * list of styles and compute the duplicate flag.\n *\n * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.\n *\n * The function works by keeping track of `tStylingRange` which contains two pointers pointing to\n * the head/tail of the template portion of the styles.\n *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`\n *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`\n *\n * @param tData The `TData` to insert into.\n * @param tNode `TNode` associated with the styling element.\n * @param tStylingKey See `TStylingKey`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of\n *               template.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nexport function insertTStylingBinding(\n  tData: TData,\n  tNode: TNode,\n  tStylingKeyWithStatic: TStylingKey,\n  index: number,\n  isHostBinding: boolean,\n  isClassBinding: boolean,\n): void {\n  ngDevMode && assertFirstUpdatePass(getTView());\n  let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;\n  let tmplHead = getTStylingRangePrev(tBindings);\n  let tmplTail = getTStylingRangeNext(tBindings);\n\n  tData[index] = tStylingKeyWithStatic;\n  let isKeyDuplicateOfStatic = false;\n  let tStylingKey: TStylingKeyPrimitive;\n  if (Array.isArray(tStylingKeyWithStatic)) {\n    // We are case when the `TStylingKey` contains static fields as well.\n    const staticKeyValueArray = tStylingKeyWithStatic as KeyValueArray<any>;\n    tStylingKey = staticKeyValueArray[1]; // unwrap.\n    // We need to check if our key is present in the static so that we can mark it as duplicate.\n    if (\n      tStylingKey === null ||\n      keyValueArrayIndexOf(staticKeyValueArray, tStylingKey as string) > 0\n    ) {\n      // tStylingKey is present in the statics, need to mark it as duplicate.\n      isKeyDuplicateOfStatic = true;\n    }\n  } else {\n    tStylingKey = tStylingKeyWithStatic;\n  }\n  if (isHostBinding) {\n    // We are inserting host bindings\n\n    // If we don't have template bindings then `tail` is 0.\n    const hasTemplateBindings = tmplTail !== 0;\n    // This is important to know because that means that the `head` can't point to the first\n    // template bindings (there are none.) Instead the head points to the tail of the template.\n    if (hasTemplateBindings) {\n      // template head's \"prev\" will point to last host binding or to 0 if no host bindings yet\n      const previousNode = getTStylingRangePrev(tData[tmplHead + 1] as TStylingRange);\n      tData[index + 1] = toTStylingRange(previousNode, tmplHead);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (previousNode !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[previousNode + 1] = setTStylingRangeNext(\n          tData[previousNode + 1] as TStylingRange,\n          index,\n        );\n      }\n      // The \"previous\" of the template binding head should point to this host binding\n      tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1] as TStylingRange, index);\n    } else {\n      tData[index + 1] = toTStylingRange(tmplHead, 0);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (tmplHead !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1] as TStylingRange, index);\n      }\n      // if we don't have template, the head points to template-tail, and needs to be advanced.\n      tmplHead = index;\n    }\n  } else {\n    // We are inserting in template section.\n    // We need to set this binding's \"previous\" to the current template tail\n    tData[index + 1] = toTStylingRange(tmplTail, 0);\n    ngDevMode &&\n      assertEqual(\n        tmplHead !== 0 && tmplTail === 0,\n        false,\n        'Adding template bindings after hostBindings is not allowed.',\n      );\n    if (tmplHead === 0) {\n      tmplHead = index;\n    } else {\n      // We need to update the previous value \"next\" to point to this binding\n      tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1] as TStylingRange, index);\n    }\n    tmplTail = index;\n  }\n\n  // Now we need to update / compute the duplicates.\n  // Starting with our location search towards head (least priority)\n  if (isKeyDuplicateOfStatic) {\n    tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1] as TStylingRange);\n  }\n  markDuplicates(tData, tStylingKey, index, true);\n  markDuplicates(tData, tStylingKey, index, false);\n  markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);\n\n  tBindings = toTStylingRange(tmplHead, tmplTail);\n  if (isClassBinding) {\n    tNode.classBindings = tBindings;\n  } else {\n    tNode.styleBindings = tBindings;\n  }\n}\n\n/**\n * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.\n *\n * @param tNode `TNode` where the residual is stored.\n * @param tStylingKey `TStylingKey` to store.\n * @param tData `TData` associated with the current `LView`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction markDuplicateOfResidualStyling(\n  tNode: TNode,\n  tStylingKey: TStylingKey,\n  tData: TData,\n  index: number,\n  isClassBinding: boolean,\n) {\n  const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;\n  if (\n    residual != null /* or undefined */ &&\n    typeof tStylingKey == 'string' &&\n    keyValueArrayIndexOf(residual, tStylingKey) >= 0\n  ) {\n    // We have duplicate in the residual so mark ourselves as duplicate.\n    tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1] as TStylingRange);\n  }\n}\n\n/**\n * Marks `TStyleValue`s as duplicates if another style binding in the list has the same\n * `TStyleValue`.\n *\n * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once\n * with it set to `false` to search both the previous as well as next items in the list.\n *\n * No duplicate case\n * ```\n *   [style.color]\n *   [style.width.px] <<- index\n *   [style.height.px]\n * ```\n *\n * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no\n * duplicates because `width` is not found in any other part of the linked list.\n *\n * Duplicate case\n * ```\n *   [style.color]\n *   [style.width.em]\n *   [style.width.px] <<- index\n * ```\n * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`\n * because `width` is found in the chain.\n *\n * Map case 1\n * ```\n *   [style.width.px]\n *   [style.color]\n *   [style]  <<- index\n * ```\n * In the above case adding `[style]` will produce a duplicate with any other bindings because\n * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.\n *\n * Map case 2\n * ```\n *   [style]\n *   [style.width.px]\n *   [style.color]  <<- index\n * ```\n * In the above case adding `[style.color]` will produce a duplicate because there is already a\n * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or\n * `width`.\n *\n * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.\n * NOTE: We use `style` as example, but same logic is applied to `class`es as well.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in\n *        the linked list.\n * @param index Starting location in the linked list to search from\n * @param isPrevDir Direction.\n *        - `true` for previous (lower priority);\n *        - `false` for next (higher priority).\n */\nfunction markDuplicates(\n  tData: TData,\n  tStylingKey: TStylingKeyPrimitive,\n  index: number,\n  isPrevDir: boolean,\n) {\n  const tStylingAtIndex = tData[index + 1] as TStylingRange;\n  const isMap = tStylingKey === null;\n  let cursor = isPrevDir\n    ? getTStylingRangePrev(tStylingAtIndex)\n    : getTStylingRangeNext(tStylingAtIndex);\n  let foundDuplicate = false;\n  // We keep iterating as long as we have a cursor\n  // AND either:\n  // - we found what we are looking for, OR\n  // - we are a map in which case we have to continue searching even after we find what we were\n  //   looking for since we are a wild card and everything needs to be flipped to duplicate.\n  while (cursor !== 0 && (foundDuplicate === false || isMap)) {\n    ngDevMode && assertIndexInRange(tData, cursor);\n    const tStylingValueAtCursor = tData[cursor] as TStylingKey;\n    const tStyleRangeAtCursor = tData[cursor + 1] as TStylingRange;\n    if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {\n      foundDuplicate = true;\n      tData[cursor + 1] = isPrevDir\n        ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor)\n        : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);\n    }\n    cursor = isPrevDir\n      ? getTStylingRangePrev(tStyleRangeAtCursor)\n      : getTStylingRangeNext(tStyleRangeAtCursor);\n  }\n  if (foundDuplicate) {\n    // if we found a duplicate, than mark ourselves.\n    tData[index + 1] = isPrevDir\n      ? setTStylingRangePrevDuplicate(tStylingAtIndex)\n      : setTStylingRangeNextDuplicate(tStylingAtIndex);\n  }\n}\n\n/**\n * Determines if two `TStylingKey`s are a match.\n *\n * When computing whether a binding contains a duplicate, we need to compare if the instruction\n * `TStylingKey` has a match.\n *\n * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:\n * - `color`\n *    - `color`    // Match another color\n *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction\n *    - `['', 'color', 'other', true]` // wrapped `color` so match\n *    - `['', null, 'other', true]`       // wrapped `null` so match\n *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`\n * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction\n *\n * @param tStylingKeyCursor\n * @param tStylingKey\n */\nfunction isStylingMatch(tStylingKeyCursor: TStylingKey, tStylingKey: TStylingKeyPrimitive) {\n  ngDevMode &&\n    assertNotEqual(\n      Array.isArray(tStylingKey),\n      true,\n      \"Expected that 'tStylingKey' has been unwrapped\",\n    );\n  if (\n    tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that\n    // location so we must assume that we have a match.\n    tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it\n    // contains a match.\n    (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey // If the keys match explicitly than we are a match.\n  ) {\n    return true;\n  } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {\n    // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has\n    // statics and we need to check those as well.\n    return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0; // see if we are matching the key\n  }\n  return false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertEqual, throwError} from '../../util/assert';\nimport {CharCode} from '../../util/char_code';\n\n/**\n * Stores the locations of key/value indexes while parsing styling.\n *\n * In case of `cssText` parsing the indexes are like so:\n * ```\n *   \"key1: value1; key2: value2; key3: value3\"\n *                  ^   ^ ^     ^             ^\n *                  |   | |     |             +-- textEnd\n *                  |   | |     +---------------- valueEnd\n *                  |   | +---------------------- value\n *                  |   +------------------------ keyEnd\n *                  +---------------------------- key\n * ```\n *\n * In case of `className` parsing the indexes are like so:\n * ```\n *   \"key1 key2 key3\"\n *         ^   ^    ^\n *         |   |    +-- textEnd\n *         |   +------------------------ keyEnd\n *         +---------------------------- key\n * ```\n * NOTE: `value` and `valueEnd` are used only for styles, not classes.\n */\ninterface ParserState {\n  textEnd: number;\n  key: number;\n  keyEnd: number;\n  value: number;\n  valueEnd: number;\n}\n// Global state of the parser. (This makes parser non-reentrant, but that is not an issue)\nconst parserState: ParserState = {\n  textEnd: 0,\n  key: 0,\n  keyEnd: 0,\n  value: 0,\n  valueEnd: 0,\n};\n\n/**\n * Retrieves the last parsed `key` of style.\n * @param text the text to substring the key from.\n */\nexport function getLastParsedKey(text: string): string {\n  return text.substring(parserState.key, parserState.keyEnd);\n}\n\n/**\n * Retrieves the last parsed `value` of style.\n * @param text the text to substring the key from.\n */\nexport function getLastParsedValue(text: string): string {\n  return text.substring(parserState.value, parserState.valueEnd);\n}\n\n/**\n * Initializes `className` string for parsing and parses the first token.\n *\n * This function is intended to be used in this format:\n * ```ts\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n * @param text `className` to parse\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nexport function parseClassName(text: string): number {\n  resetParserState(text);\n  return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n\n/**\n * Parses next `className` token.\n *\n * This function is intended to be used in this format:\n * ```ts\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n *\n * @param text `className` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nexport function parseClassNameNext(text: string, index: number): number {\n  const end = parserState.textEnd;\n  if (end === index) {\n    return -1;\n  }\n  index = parserState.keyEnd = consumeClassToken(text, (parserState.key = index), end);\n  return consumeWhitespace(text, index, end);\n}\n\n/**\n * Initializes `cssText` string for parsing and parses the first key/values.\n *\n * This function is intended to be used in this format:\n * ```ts\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n * ```\n * @param text `cssText` to parse\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nexport function parseStyle(text: string): number {\n  resetParserState(text);\n  return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n\n/**\n * Parses the next `cssText` key/values.\n *\n * This function is intended to be used in this format:\n * ```ts\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n *\n * @param text `cssText` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nexport function parseStyleNext(text: string, startIndex: number): number {\n  const end = parserState.textEnd;\n  let index = (parserState.key = consumeWhitespace(text, startIndex, end));\n  if (end === index) {\n    // we reached an end so just quit\n    return -1;\n  }\n  index = parserState.keyEnd = consumeStyleKey(text, index, end);\n  index = consumeSeparator(text, index, end, CharCode.COLON);\n  index = parserState.value = consumeWhitespace(text, index, end);\n  index = parserState.valueEnd = consumeStyleValue(text, index, end);\n  return consumeSeparator(text, index, end, CharCode.SEMI_COLON);\n}\n\n/**\n * Reset the global state of the styling parser.\n * @param text The styling text to parse.\n */\nexport function resetParserState(text: string): void {\n  parserState.key = 0;\n  parserState.keyEnd = 0;\n  parserState.value = 0;\n  parserState.valueEnd = 0;\n  parserState.textEnd = text.length;\n}\n\n/**\n * Returns index of next non-whitespace character.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at\n *          that location.)\n */\nexport function consumeWhitespace(text: string, startIndex: number, endIndex: number): number {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) <= CharCode.SPACE) {\n    startIndex++;\n  }\n  return startIndex;\n}\n\n/**\n * Returns index of last char in class token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last char in class token.\n */\nexport function consumeClassToken(text: string, startIndex: number, endIndex: number): number {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) > CharCode.SPACE) {\n    startIndex++;\n  }\n  return startIndex;\n}\n\n/**\n * Consumes all of the characters belonging to style key and token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style key character.\n */\nexport function consumeStyleKey(text: string, startIndex: number, endIndex: number): number {\n  let ch: number;\n  while (\n    startIndex < endIndex &&\n    ((ch = text.charCodeAt(startIndex)) === CharCode.DASH ||\n      ch === CharCode.UNDERSCORE ||\n      ((ch & CharCode.UPPER_CASE) >= CharCode.A && (ch & CharCode.UPPER_CASE) <= CharCode.Z) ||\n      (ch >= CharCode.ZERO && ch <= CharCode.NINE))\n  ) {\n    startIndex++;\n  }\n  return startIndex;\n}\n\n/**\n * Consumes all whitespace and the separator `:` after the style key.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after separator and surrounding whitespace.\n */\nexport function consumeSeparator(\n  text: string,\n  startIndex: number,\n  endIndex: number,\n  separator: number,\n): number {\n  startIndex = consumeWhitespace(text, startIndex, endIndex);\n  if (startIndex < endIndex) {\n    if (ngDevMode && text.charCodeAt(startIndex) !== separator) {\n      malformedStyleError(text, String.fromCharCode(separator), startIndex);\n    }\n    startIndex++;\n  }\n  return startIndex;\n}\n\n/**\n * Consumes style value honoring `url()` and `\"\"` text.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style value character.\n */\nexport function consumeStyleValue(text: string, startIndex: number, endIndex: number): number {\n  let ch1 = -1; // 1st previous character\n  let ch2 = -1; // 2nd previous character\n  let ch3 = -1; // 3rd previous character\n  let i = startIndex;\n  let lastChIndex = i;\n  while (i < endIndex) {\n    const ch: number = text.charCodeAt(i++);\n    if (ch === CharCode.SEMI_COLON) {\n      return lastChIndex;\n    } else if (ch === CharCode.DOUBLE_QUOTE || ch === CharCode.SINGLE_QUOTE) {\n      lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);\n    } else if (\n      startIndex === i - 4 && // We have seen only 4 characters so far \"URL(\" (Ignore \"foo_URL()\")\n      ch3 === CharCode.U &&\n      ch2 === CharCode.R &&\n      ch1 === CharCode.L &&\n      ch === CharCode.OPEN_PAREN\n    ) {\n      lastChIndex = i = consumeQuotedText(text, CharCode.CLOSE_PAREN, i, endIndex);\n    } else if (ch > CharCode.SPACE) {\n      // if we have a non-whitespace character then capture its location\n      lastChIndex = i;\n    }\n    ch3 = ch2;\n    ch2 = ch1;\n    ch1 = ch & CharCode.UPPER_CASE;\n  }\n  return lastChIndex;\n}\n\n/**\n * Consumes all of the quoted characters.\n *\n * @param text Text to scan\n * @param quoteCharCode CharCode of either `\"` or `'` quote or `)` for `url(...)`.\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after quoted characters.\n */\nexport function consumeQuotedText(\n  text: string,\n  quoteCharCode: number,\n  startIndex: number,\n  endIndex: number,\n): number {\n  let ch1 = -1; // 1st previous character\n  let index = startIndex;\n  while (index < endIndex) {\n    const ch = text.charCodeAt(index++);\n    if (ch == quoteCharCode && ch1 !== CharCode.BACK_SLASH) {\n      return index;\n    }\n    if (ch == CharCode.BACK_SLASH && ch1 === CharCode.BACK_SLASH) {\n      // two back slashes cancel each other out. For example `\"\\\\\"` should properly end the\n      // quotation. (It should not assume that the last `\"` is escaped.)\n      ch1 = 0;\n    } else {\n      ch1 = ch;\n    }\n  }\n  throw ngDevMode\n    ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex)\n    : new Error();\n}\n\nfunction malformedStyleError(text: string, expecting: string, index: number): never {\n  ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');\n  throw throwError(\n    `Malformed style at location ${index} in string '` +\n      text.substring(0, index) +\n      '[>>' +\n      text.substring(index, index + 1) +\n      '<<]' +\n      text.slice(index + 1) +\n      `'. Expecting '${expecting}'.`,\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {bindingUpdated} from '../bindings';\nimport {TNode} from '../interfaces/node';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {LView, RENDERER, TView} from '../interfaces/view';\nimport {getLView, getSelectedTNode, getTView, nextBindingIndex} from '../state';\n\nimport {\n  elementPropertyInternal,\n  setAllInputsForProperty,\n  storePropertyBindingMetadata,\n} from './shared';\n\n/**\n * Update a property on a selected element.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nexport function ɵɵproperty<T>(\n  propName: string,\n  value: T,\n  sanitizer?: SanitizerFn | null,\n): typeof ɵɵproperty {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n      tView,\n      tNode,\n      lView,\n      propName,\n      value,\n      lView[RENDERER],\n      sanitizer,\n      false,\n    );\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵproperty;\n}\n\n/**\n * Given `<div style=\"...\" my-dir>` and `MyDir` with `@Input('style')` we need to write to\n * directive input.\n */\nexport function setDirectiveInputsWhichShadowsStyling(\n  tView: TView,\n  tNode: TNode,\n  lView: LView,\n  value: any,\n  isClassBased: boolean,\n) {\n  // We support both 'class' and `className` hence the fallback.\n  setAllInputsForProperty(tNode, tView, lView, isClassBased ? 'class' : 'style', value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {SafeValue, unwrapSafeValue} from '../../sanitization/bypass';\nimport {KeyValueArray, keyValueArrayGet, keyValueArraySet} from '../../util/array_utils';\nimport {\n  assertDefined,\n  assertEqual,\n  assertLessThan,\n  assertNotEqual,\n  throwError,\n} from '../../util/assert';\nimport {EMPTY_ARRAY} from '../../util/empty';\nimport {concatStringsWithSpace, stringify} from '../../util/stringify';\nimport {assertFirstUpdatePass} from '../assert';\nimport {bindingUpdated} from '../bindings';\nimport {AttributeMarker} from '../interfaces/attribute_marker';\nimport {DirectiveDef} from '../interfaces/definition';\nimport {TAttributes, TNode, TNodeFlags, TNodeType} from '../interfaces/node';\nimport {Renderer} from '../interfaces/renderer';\nimport {RElement} from '../interfaces/renderer_dom';\nimport {\n  getTStylingRangeNext,\n  getTStylingRangeNextDuplicate,\n  getTStylingRangePrev,\n  getTStylingRangePrevDuplicate,\n  TStylingKey,\n  TStylingRange,\n} from '../interfaces/styling';\nimport {LView, RENDERER, TData, TView} from '../interfaces/view';\nimport {applyStyling} from '../node_manipulation';\nimport {\n  getCurrentDirectiveDef,\n  getLView,\n  getSelectedIndex,\n  getTView,\n  incrementBindingIndex,\n} from '../state';\nimport {insertTStylingBinding} from '../styling/style_binding_list';\nimport {\n  getLastParsedKey,\n  getLastParsedValue,\n  parseClassName,\n  parseClassNameNext,\n  parseStyle,\n  parseStyleNext,\n} from '../styling/styling_parser';\nimport {NO_CHANGE} from '../tokens';\nimport {getNativeByIndex} from '../util/view_utils';\n\nimport {setDirectiveInputsWhichShadowsStyling} from './property';\n\n/**\n * Update a style binding on an element with the provided value.\n *\n * If the style value is falsy then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `styleMap` or any static styles that are\n * present from when the element was created with `styling`).\n *\n * Note that the styling element is updated as part of `stylingApply`.\n *\n * @param prop A valid CSS property.\n * @param value New value to write (`null` or an empty string to remove).\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *\n * Note that this will apply the provided style value to the host element if this function is called\n * within a host binding function.\n *\n * @codeGenApi\n */\nexport function ɵɵstyleProp(\n  prop: string,\n  value: string | number | SafeValue | undefined | null,\n  suffix?: string | null,\n): typeof ɵɵstyleProp {\n  checkStylingProperty(prop, value, suffix, false);\n  return ɵɵstyleProp;\n}\n\n/**\n * Update a class binding on an element with the provided value.\n *\n * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n * therefore, the class binding itself must already be allocated using\n * `styling` within the creation block.\n *\n * @param prop A valid CSS class (only one).\n * @param value A true/false value which will turn the class on or off.\n *\n * Note that this will apply the provided class value to the host element if this function\n * is called within a host binding function.\n *\n * @codeGenApi\n */\nexport function ɵɵclassProp(\n  className: string,\n  value: boolean | undefined | null,\n): typeof ɵɵclassProp {\n  checkStylingProperty(className, value, null, true);\n  return ɵɵclassProp;\n}\n\n/**\n * Update style bindings using an object literal on an element.\n *\n * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\n * When styles are applied to the element they will then be updated with respect to\n * any styles/classes set via `styleProp`. If any styles are set to falsy\n * then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n *\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * Note that this will apply the provided styleMap value to the host element if this function\n * is called within a host binding.\n *\n * @codeGenApi\n */\nexport function ɵɵstyleMap(styles: {[styleName: string]: any} | string | undefined | null): void {\n  checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);\n}\n\n/**\n * Parse text as style and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵstyleMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nexport function styleStringParser(keyValueArray: KeyValueArray<any>, text: string): void {\n  for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {\n    styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));\n  }\n}\n\n/**\n * Update class bindings using an object literal or class-string on an element.\n *\n * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\n * When classes are applied to the element they will then be updated with\n * respect to any styles/classes set via `classProp`. If any\n * classes are set to falsy then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n * Note that this will the provided classMap value to the host element if this function is called\n * within a host binding.\n *\n * @param classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n *\n * @codeGenApi\n */\nexport function ɵɵclassMap(\n  classes: {[className: string]: boolean | undefined | null} | string | undefined | null,\n): void {\n  checkStylingMap(classKeyValueArraySet, classStringParser, classes, true);\n}\n\n/**\n * Parse text as class and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵclassMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nexport function classStringParser(keyValueArray: KeyValueArray<any>, text: string): void {\n  for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n    keyValueArraySet(keyValueArray, getLastParsedKey(text), true);\n  }\n}\n\n/**\n * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.\n *\n * @param prop property name.\n * @param value binding value.\n * @param suffix suffix for the property (e.g. `em` or `px`)\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nexport function checkStylingProperty(\n  prop: string,\n  value: any | NO_CHANGE,\n  suffix: string | undefined | null,\n  isClassBased: boolean,\n): void {\n  const lView = getLView();\n  const tView = getTView();\n  // Styling instructions use 2 slots per binding.\n  // 1. one for the value / TStylingKey\n  // 2. one for the intermittent-value / TStylingRange\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);\n  }\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    const tNode = tView.data[getSelectedIndex()] as TNode;\n    updateStyling(\n      tView,\n      tNode,\n      lView,\n      lView[RENDERER],\n      prop,\n      (lView[bindingIndex + 1] = normalizeSuffix(value, suffix)),\n      isClassBased,\n      bindingIndex,\n    );\n  }\n}\n\n/**\n * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done for tree shaking purposes.\n * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`\n *        have different parsers.)\n * @param value bound value from application\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nexport function checkStylingMap(\n  keyValueArraySet: (keyValueArray: KeyValueArray<any>, key: string, value: any) => void,\n  stringParser: (styleKeyValueArray: KeyValueArray<any>, text: string) => void,\n  value: any | NO_CHANGE,\n  isClassBased: boolean,\n): void {\n  const tView = getTView();\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);\n  }\n  const lView = getLView();\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tView.data[getSelectedIndex()] as TNode;\n    if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {\n      if (ngDevMode) {\n        // verify that if we are shadowing then `TData` is appropriately marked so that we skip\n        // processing this binding in styling resolution.\n        const tStylingKey = tView.data[bindingIndex];\n        assertEqual(\n          Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey,\n          false,\n          \"Styling linked list shadow input should be marked as 'false'\",\n        );\n      }\n      // VE does not concatenate the static portion like we are doing here.\n      // Instead VE just ignores the static completely if dynamic binding is present.\n      // Because of locality we have already set the static portion because we don't know if there\n      // is a dynamic portion until later. If we would ignore the static portion it would look like\n      // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong\n      // thing as it would think that the static portion was removed. For this reason we\n      // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.\n      let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;\n      ngDevMode &&\n        isClassBased === false &&\n        staticPrefix !== null &&\n        assertEqual(staticPrefix.endsWith(';'), true, \"Expecting static portion to end with ';'\");\n      if (staticPrefix !== null) {\n        // We want to make sure that falsy values of `value` become empty strings.\n        value = concatStringsWithSpace(staticPrefix, value ? value : '');\n      }\n      // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.\n      // This takes over the `[style]` binding. (Same for `[class]`)\n      setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);\n    } else {\n      updateStylingMap(\n        tView,\n        tNode,\n        lView,\n        lView[RENDERER],\n        lView[bindingIndex + 1],\n        (lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value)),\n        isClassBased,\n        bindingIndex,\n      );\n    }\n  }\n}\n\n/**\n * Determines when the binding is in `hostBindings` section\n *\n * @param tView Current `TView`\n * @param bindingIndex index of binding which we would like if it is in `hostBindings`\n */\nfunction isInHostBindings(tView: TView, bindingIndex: number): boolean {\n  // All host bindings are placed after the expando section.\n  return bindingIndex >= tView.expandoStartIndex;\n}\n\n/**\n * Collects the necessary information to insert the binding into a linked list of style bindings\n * using `insertTStylingBinding`.\n *\n * @param tView `TView` where the binding linked list will be stored.\n * @param tStylingKey Property/key of the binding.\n * @param bindingIndex Index of binding associated with the `prop`\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction stylingFirstUpdatePass(\n  tView: TView,\n  tStylingKey: TStylingKey,\n  bindingIndex: number,\n  isClassBased: boolean,\n): void {\n  ngDevMode && assertFirstUpdatePass(tView);\n  const tData = tView.data;\n  if (tData[bindingIndex + 1] === null) {\n    // The above check is necessary because we don't clear first update pass until first successful\n    // (no exception) template execution. This prevents the styling instruction from double adding\n    // itself to the list.\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tData[getSelectedIndex()] as TNode;\n    ngDevMode && assertDefined(tNode, 'TNode expected');\n    const isHostBindings = isInHostBindings(tView, bindingIndex);\n    if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {\n      // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.\n      // If there is a directive which uses `@Input('style')` or `@Input('class')` than\n      // we need to neutralize this binding since that directive is shadowing it.\n      // We turn this into a noop by setting the key to `false`\n      tStylingKey = false;\n    }\n    tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);\n    insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);\n  }\n}\n\n/**\n * Adds static styling information to the binding if applicable.\n *\n * The linked list of styles not only stores the list and keys, but also stores static styling\n * information on some of the keys. This function determines if the key should contain the styling\n * information and computes it.\n *\n * See `TStylingStatic` for more details.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nexport function wrapInStaticStylingKey(\n  tData: TData,\n  tNode: TNode,\n  stylingKey: TStylingKey,\n  isClassBased: boolean,\n): TStylingKey {\n  const hostDirectiveDef = getCurrentDirectiveDef(tData);\n  let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n  if (hostDirectiveDef === null) {\n    // We are in template node.\n    // If template node already had styling instruction then it has already collected the static\n    // styling and there is no need to collect them again. We know that we are the first styling\n    // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).\n    const isFirstStylingInstructionInTemplate =\n      ((isClassBased ? tNode.classBindings : tNode.styleBindings) as any as number) === 0;\n    if (isFirstStylingInstructionInTemplate) {\n      // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point\n      // they are already merged and it would not be possible to figure which property belongs where\n      // in the priority.\n      stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);\n      stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);\n      // We know that if we have styling binding in template we can't have residual.\n      residual = null;\n    }\n  } else {\n    // We are in host binding node and there was no binding instruction in template node.\n    // This means that we need to compute the residual.\n    const directiveStylingLast = tNode.directiveStylingLast;\n    const isFirstStylingInstructionInHostBinding =\n      directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;\n    if (isFirstStylingInstructionInHostBinding) {\n      stylingKey = collectStylingFromDirectives(\n        hostDirectiveDef,\n        tData,\n        tNode,\n        stylingKey,\n        isClassBased,\n      );\n      if (residual === null) {\n        // - If `null` than either:\n        //    - Template styling instruction already ran and it has consumed the static\n        //      styling into its `TStylingKey` and so there is no need to update residual. Instead\n        //      we need to update the `TStylingKey` associated with the first template node\n        //      instruction. OR\n        //    - Some other styling instruction ran and determined that there are no residuals\n        let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);\n        if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {\n          // Only recompute if `templateStylingKey` had static values. (If no static value found\n          // then there is nothing to do since this operation can only produce less static keys, not\n          // more.)\n          templateStylingKey = collectStylingFromDirectives(\n            null,\n            tData,\n            tNode,\n            templateStylingKey[1] /* unwrap previous statics */,\n            isClassBased,\n          );\n          templateStylingKey = collectStylingFromTAttrs(\n            templateStylingKey,\n            tNode.attrs,\n            isClassBased,\n          );\n          setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);\n        }\n      } else {\n        // We only need to recompute residual if it is not `null`.\n        // - If existing residual (implies there was no template styling). This means that some of\n        //   the statics may have moved from the residual to the `stylingKey` and so we have to\n        //   recompute.\n        // - If `undefined` this is the first time we are running.\n        residual = collectResidual(tData, tNode, isClassBased);\n      }\n    }\n  }\n  if (residual !== undefined) {\n    isClassBased ? (tNode.residualClasses = residual) : (tNode.residualStyles = residual);\n  }\n  return stylingKey;\n}\n\n/**\n * Retrieve the `TStylingKey` for the template styling instruction.\n *\n * This is needed since `hostBinding` styling instructions are inserted after the template\n * instruction. While the template instruction needs to update the residual in `TNode` the\n * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because\n * the template instruction is downstream from the `hostBindings` instructions.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @return `TStylingKey` if found or `undefined` if not found.\n */\nfunction getTemplateHeadTStylingKey(\n  tData: TData,\n  tNode: TNode,\n  isClassBased: boolean,\n): TStylingKey | undefined {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  if (getTStylingRangeNext(bindings) === 0) {\n    // There does not seem to be a styling instruction in the `template`.\n    return undefined;\n  }\n  return tData[getTStylingRangePrev(bindings)] as TStylingKey;\n}\n\n/**\n * Update the `TStylingKey` of the first template instruction in `TNode`.\n *\n * Logically `hostBindings` styling instructions are of lower priority than that of the template.\n * However, they execute after the template styling instructions. This means that they get inserted\n * in front of the template styling instructions.\n *\n * If we have a template styling instruction and a new `hostBindings` styling instruction is\n * executed it means that it may need to steal static fields from the template instruction. This\n * method allows us to update the first template instruction `TStylingKey` with a new value.\n *\n * Assume:\n * ```angular-ts\n * <div my-dir style=\"color: red\" [style.color]=\"tmplExp\"></div>\n *\n * @Directive({\n *   host: {\n *     'style': 'width: 100px',\n *     '[style.color]': 'dirExp',\n *   }\n * })\n * class MyDir {}\n * ```\n *\n * when `[style.color]=\"tmplExp\"` executes it creates this data structure.\n * ```ts\n *  ['', 'color', 'color', 'red', 'width', '100px'],\n * ```\n *\n * The reason for this is that the template instruction does not know if there are styling\n * instructions and must assume that there are none and must collect all of the static styling.\n * (both\n * `color' and 'width`)\n *\n * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.\n * ```ts\n *  ['', 'color', 'width', '100px'],  // newly inserted\n *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong\n * ```\n *\n * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to\n * update it like so:\n * ```ts\n *  ['', 'color', 'width', '100px'],\n *  ['', 'color', 'color', 'red'],    // UPDATE\n * ```\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param tStylingKey New `TStylingKey` which is replacing the old one.\n */\nfunction setTemplateHeadTStylingKey(\n  tData: TData,\n  tNode: TNode,\n  isClassBased: boolean,\n  tStylingKey: TStylingKey,\n): void {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  ngDevMode &&\n    assertNotEqual(\n      getTStylingRangeNext(bindings),\n      0,\n      'Expecting to have at least one template styling binding.',\n    );\n  tData[getTStylingRangePrev(bindings)] = tStylingKey;\n}\n\n/**\n * Collect all static values after the current `TNode.directiveStylingLast` index.\n *\n * Collect the remaining styling information which has not yet been collected by an existing\n * styling instruction.\n *\n * @param tData `TData` where the `DirectiveDefs` are stored.\n * @param tNode `TNode` which contains the directive range.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectResidual(\n  tData: TData,\n  tNode: TNode,\n  isClassBased: boolean,\n): KeyValueArray<any> | null {\n  let residual: KeyValueArray<any> | null | undefined = undefined;\n  const directiveEnd = tNode.directiveEnd;\n  ngDevMode &&\n    assertNotEqual(\n      tNode.directiveStylingLast,\n      -1,\n      'By the time this function gets called at least one hostBindings-node styling instruction must have executed.',\n    );\n  // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are\n  // collecting things after the last `hostBindings` directive which had a styling instruction.)\n  for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {\n    const attrs = (tData[i] as DirectiveDef<any>).hostAttrs;\n    residual = collectStylingFromTAttrs(residual, attrs, isClassBased) as KeyValueArray<any> | null;\n  }\n  return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased) as KeyValueArray<any> | null;\n}\n\n/**\n * Collect the static styling information with lower priority than `hostDirectiveDef`.\n *\n * (This is opposite of residual styling.)\n *\n * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static\n *        styling. (Or `null` if template styling)\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey Existing `TStylingKey` to update or wrap.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromDirectives(\n  hostDirectiveDef: DirectiveDef<any> | null,\n  tData: TData,\n  tNode: TNode,\n  stylingKey: TStylingKey,\n  isClassBased: boolean,\n): TStylingKey {\n  // We need to loop because there can be directives which have `hostAttrs` but don't have\n  // `hostBindings` so this loop catches up to the current directive..\n  let currentDirective: DirectiveDef<any> | null = null;\n  const directiveEnd = tNode.directiveEnd;\n  let directiveStylingLast = tNode.directiveStylingLast;\n  if (directiveStylingLast === -1) {\n    directiveStylingLast = tNode.directiveStart;\n  } else {\n    directiveStylingLast++;\n  }\n  while (directiveStylingLast < directiveEnd) {\n    currentDirective = tData[directiveStylingLast] as DirectiveDef<any>;\n    ngDevMode && assertDefined(currentDirective, 'expected to be defined');\n    stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);\n    if (currentDirective === hostDirectiveDef) break;\n    directiveStylingLast++;\n  }\n  if (hostDirectiveDef !== null) {\n    // we only advance the styling cursor if we are collecting data from host bindings.\n    // Template executes before host bindings and so if we would update the index,\n    // host bindings would not get their statics.\n    tNode.directiveStylingLast = directiveStylingLast;\n  }\n  return stylingKey;\n}\n\n/**\n * Convert `TAttrs` into `TStylingStatic`.\n *\n * @param stylingKey existing `TStylingKey` to update or wrap.\n * @param attrs `TAttributes` to process.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromTAttrs(\n  stylingKey: TStylingKey | undefined,\n  attrs: TAttributes | null,\n  isClassBased: boolean,\n): TStylingKey {\n  const desiredMarker = isClassBased ? AttributeMarker.Classes : AttributeMarker.Styles;\n  let currentMarker = AttributeMarker.ImplicitAttributes;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const item = attrs[i] as number | string;\n      if (typeof item === 'number') {\n        currentMarker = item;\n      } else {\n        if (currentMarker === desiredMarker) {\n          if (!Array.isArray(stylingKey)) {\n            stylingKey = stylingKey === undefined ? [] : (['', stylingKey] as any);\n          }\n          keyValueArraySet(\n            stylingKey as KeyValueArray<any>,\n            item,\n            isClassBased ? true : attrs[++i],\n          );\n        }\n      }\n    }\n  }\n  return stylingKey === undefined ? null : stylingKey;\n}\n\n/**\n * Convert user input to `KeyValueArray`.\n *\n * This function takes user input which could be `string`, Object literal, or iterable and converts\n * it into a consistent representation. The output of this is `KeyValueArray` (which is an array\n * where\n * even indexes contain keys and odd indexes contain values for those keys).\n *\n * The advantage of converting to `KeyValueArray` is that we can perform diff in an input\n * independent\n * way.\n * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be\n * applied)\n *\n * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the\n * difference in linear fashion without the need to allocate any additional data.\n *\n * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine\n * which values need to be deleted, over the new `Map` to determine additions, and we would have to\n * keep additional `Map` to keep track of duplicates or items which have not yet been visited.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done\n *        for tree shaking purposes.\n * @param stringParser The parser is passed in so that it will be tree shakable. See\n *        `styleStringParser` and `classStringParser`\n * @param value The value to parse/convert to `KeyValueArray`\n */\nexport function toStylingKeyValueArray(\n  keyValueArraySet: (keyValueArray: KeyValueArray<any>, key: string, value: any) => void,\n  stringParser: (styleKeyValueArray: KeyValueArray<any>, text: string) => void,\n  value: string | string[] | {[key: string]: any} | SafeValue | null | undefined,\n): KeyValueArray<any> {\n  if (value == null /*|| value === undefined */ || value === '') return EMPTY_ARRAY as any;\n  const styleKeyValueArray: KeyValueArray<any> = [] as any;\n  const unwrappedValue = unwrapSafeValue(value) as string | string[] | {[key: string]: any};\n  if (Array.isArray(unwrappedValue)) {\n    for (let i = 0; i < unwrappedValue.length; i++) {\n      keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);\n    }\n  } else if (typeof unwrappedValue === 'object') {\n    for (const key in unwrappedValue) {\n      if (unwrappedValue.hasOwnProperty(key)) {\n        keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);\n      }\n    }\n  } else if (typeof unwrappedValue === 'string') {\n    stringParser(styleKeyValueArray, unwrappedValue);\n  } else {\n    ngDevMode &&\n      throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);\n  }\n  return styleKeyValueArray;\n}\n\n/**\n * Set a `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nexport function styleKeyValueArraySet(keyValueArray: KeyValueArray<any>, key: string, value: any) {\n  keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));\n}\n\n/**\n * Class-binding-specific function for setting the `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nexport function classKeyValueArraySet(keyValueArray: KeyValueArray<any>, key: unknown, value: any) {\n  // We use `classList.add` to eventually add the CSS classes to the DOM node. Any value passed into\n  // `add` is stringified and added to the `class` attribute, e.g. even null, undefined or numbers\n  // will be added. Stringify the key here so that our internal data structure matches the value in\n  // the DOM. The only exceptions are empty strings and strings that contain spaces for which\n  // the browser throws an error. We ignore such values, because the error is somewhat cryptic.\n  const stringKey = String(key);\n  if (stringKey !== '' && !stringKey.includes(' ')) {\n    keyValueArraySet(keyValueArray, stringKey, value);\n  }\n}\n\n/**\n * Update map based styling.\n *\n * Map based styling could be anything which contains more than one binding. For example `string`,\n * or object literal. Dealing with all of these types would complicate the logic so\n * instead this function expects that the complex input is first converted into normalized\n * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it\n * very cheap to compute deltas between the previous and current value.\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param oldKeyValueArray Previous value represented as `KeyValueArray`\n * @param newKeyValueArray Current value represented as `KeyValueArray`\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStylingMap(\n  tView: TView,\n  tNode: TNode,\n  lView: LView,\n  renderer: Renderer,\n  oldKeyValueArray: KeyValueArray<any>,\n  newKeyValueArray: KeyValueArray<any>,\n  isClassBased: boolean,\n  bindingIndex: number,\n) {\n  if ((oldKeyValueArray as KeyValueArray<any> | NO_CHANGE) === NO_CHANGE) {\n    // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.\n    oldKeyValueArray = EMPTY_ARRAY as any;\n  }\n  let oldIndex = 0;\n  let newIndex = 0;\n  let oldKey: string | null = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;\n  let newKey: string | null = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;\n  while (oldKey !== null || newKey !== null) {\n    ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');\n    ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');\n    const oldValue =\n      oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;\n    const newValue =\n      newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;\n    let setKey: string | null = null;\n    let setValue: any = undefined;\n    if (oldKey === newKey) {\n      // UPDATE: Keys are equal => new value is overwriting old value.\n      oldIndex += 2;\n      newIndex += 2;\n      if (oldValue !== newValue) {\n        setKey = newKey;\n        setValue = newValue;\n      }\n    } else if (newKey === null || (oldKey !== null && oldKey < newKey!)) {\n      // DELETE: oldKey key is missing or we did not find the oldKey in the newValue\n      // (because the keyValueArray is sorted and `newKey` is found later alphabetically).\n      // `\"background\" < \"color\"` so we need to delete `\"background\"` because it is not found in the\n      // new array.\n      oldIndex += 2;\n      setKey = oldKey;\n    } else {\n      // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.\n      // `\"color\" > \"background\"` so we need to add `color` because it is in new array but not in\n      // old array.\n      ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');\n      newIndex += 2;\n      setKey = newKey;\n      setValue = newValue;\n    }\n    if (setKey !== null) {\n      updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);\n    }\n    oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;\n    newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;\n  }\n}\n\n/**\n * Update a simple (property name) styling.\n *\n * This function takes `prop` and updates the DOM to that value. The function takes the binding\n * value as well as binding priority into consideration to determine which value should be written\n * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks\n * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param prop Either style property name or a class name.\n * @param value Either style value for `prop` or `true`/`false` if `prop` is class.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStyling(\n  tView: TView,\n  tNode: TNode,\n  lView: LView,\n  renderer: Renderer,\n  prop: string,\n  value: string | undefined | null | boolean,\n  isClassBased: boolean,\n  bindingIndex: number,\n) {\n  if (!(tNode.type & TNodeType.AnyRNode)) {\n    // It is possible to have styling on non-elements (such as ng-container).\n    // This is rare, but it does happen. In such a case, just ignore the binding.\n    return;\n  }\n  const tData = tView.data;\n  const tRange = tData[bindingIndex + 1] as TStylingRange;\n  const higherPriorityValue = getTStylingRangeNextDuplicate(tRange)\n    ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased)\n    : undefined;\n  if (!isStylingValuePresent(higherPriorityValue)) {\n    // We don't have a next duplicate, or we did not find a duplicate value.\n    if (!isStylingValuePresent(value)) {\n      // We should delete current value or restore to lower priority value.\n      if (getTStylingRangePrevDuplicate(tRange)) {\n        // We have a possible prev duplicate, let's retrieve it.\n        value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);\n      }\n    }\n    const rNode = getNativeByIndex(getSelectedIndex(), lView) as RElement;\n    applyStyling(renderer, isClassBased, rNode, prop, value);\n  }\n}\n\n/**\n * Search for styling value with higher priority which is overwriting current value, or a\n * value of lower priority to which we should fall back if the value is `undefined`.\n *\n * When value is being applied at a location, related values need to be consulted.\n * - If there is a higher priority binding, we should be using that one instead.\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp1`\n *   requires that we check `exp2` to see if it is set to value other than `undefined`.\n * - If there is a lower priority binding and we are changing to `undefined`\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp2` to\n *   `undefined` requires that we check `exp1` (and static values) and use that as new value.\n *\n * NOTE: The styling stores two values.\n * 1. The raw value which came from the application is stored at `index + 0` location. (This value\n *    is used for dirty checking).\n * 2. The normalized value is stored at `index + 1`.\n *\n * @param tData `TData` used for traversing the priority.\n * @param tNode `TNode` to use for resolving static styling. Also controls search direction.\n *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n *   - `null` search prev and go all the way to end. Return last value where\n *     `isStylingValuePresent(value)` is true.\n * @param lView `LView` used for retrieving the actual values.\n * @param prop Property which we are interested in.\n * @param index Starting index in the linked list of styling bindings where the search should start.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction findStylingValue(\n  tData: TData,\n  tNode: TNode | null,\n  lView: LView,\n  prop: string,\n  index: number,\n  isClassBased: boolean,\n): any {\n  // `TNode` to use for resolving static styling. Also controls search direction.\n  //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n  //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n  //   - `null` search prev and go all the way to end. Return last value where\n  //     `isStylingValuePresent(value)` is true.\n  const isPrevDirection = tNode === null;\n  let value: any = undefined;\n  while (index > 0) {\n    const rawKey = tData[index] as TStylingKey;\n    const containsStatics = Array.isArray(rawKey);\n    // Unwrap the key if we contain static values.\n    const key = containsStatics ? (rawKey as string[])[1] : rawKey;\n    const isStylingMap = key === null;\n    let valueAtLViewIndex = lView[index + 1];\n    if (valueAtLViewIndex === NO_CHANGE) {\n      // In firstUpdatePass the styling instructions create a linked list of styling.\n      // On subsequent passes it is possible for a styling instruction to try to read a binding\n      // which\n      // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that\n      // we have `undefined` (or empty array in case of styling-map instruction) instead. This\n      // allows the resolution to apply the value (which may later be overwritten when the\n      // binding actually executes.)\n      valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;\n    }\n    let currentValue = isStylingMap\n      ? keyValueArrayGet(valueAtLViewIndex, prop)\n      : key === prop\n        ? valueAtLViewIndex\n        : undefined;\n    if (containsStatics && !isStylingValuePresent(currentValue)) {\n      currentValue = keyValueArrayGet(rawKey as KeyValueArray<any>, prop);\n    }\n    if (isStylingValuePresent(currentValue)) {\n      value = currentValue;\n      if (isPrevDirection) {\n        return value;\n      }\n    }\n    const tRange = tData[index + 1] as TStylingRange;\n    index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);\n  }\n  if (tNode !== null) {\n    // in case where we are going in next direction AND we did not find anything, we need to\n    // consult residual styling\n    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n    if (residual != null /** OR residual !=== undefined */) {\n      value = keyValueArrayGet(residual!, prop);\n    }\n  }\n  return value;\n}\n\n/**\n * Determines if the binding value should be used (or if the value is 'undefined' and hence priority\n * resolution should be used.)\n *\n * @param value Binding style value.\n */\nfunction isStylingValuePresent(value: any): boolean {\n  // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't\n  // have an opinion as to what this binding should be and you should consult other bindings by\n  // priority to determine the valid value.\n  // This is extracted into a single function so that we have a single place to control this.\n  return value !== undefined;\n}\n\n/**\n * Normalizes and/or adds a suffix to the value.\n *\n * If value is `null`/`undefined` no suffix is added\n * @param value\n * @param suffix\n */\nfunction normalizeSuffix(\n  value: any,\n  suffix: string | undefined | null,\n): string | null | undefined | boolean {\n  if (value == null || value === '') {\n    // do nothing\n    // Do not add the suffix if the value is going to be empty.\n    // As it produce invalid CSS, which the browsers will automatically omit but Domino will not.\n    // Example: `\"left\": \"px;\"` instead of `\"left\": \"\"`.\n  } else if (typeof suffix === 'string') {\n    value = value + suffix;\n  } else if (typeof value === 'object') {\n    value = stringify(unwrapSafeValue(value));\n  }\n  return value;\n}\n\n/**\n * Tests if the `TNode` has input shadow.\n *\n * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or\n * `@Input('class')` as input.\n *\n * @param tNode `TNode` which we would like to see if it has shadow.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nexport function hasStylingInputShadow(tNode: TNode, isClassBased: boolean) {\n  return (tNode.flags & (isClassBased ? TNodeFlags.hasClassInput : TNodeFlags.hasStyleInput)) !== 0;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {keyValueArraySet} from '../../util/array_utils';\nimport {getLView} from '../state';\nimport {\n  interpolation1,\n  interpolation2,\n  interpolation3,\n  interpolation4,\n  interpolation5,\n  interpolation6,\n  interpolation7,\n  interpolation8,\n  interpolationV,\n} from './interpolation';\nimport {checkStylingMap, classStringParser} from './styling';\n\n/**\n *\n * Update an interpolated class on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate1(prefix: string, v0: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate2(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  suffix: string,\n): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate3(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  suffix: string,\n): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate4(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  suffix: string,\n): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate5(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  suffix: string,\n): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(\n    lView,\n    prefix,\n    v0,\n    i0,\n    v1,\n    i1,\n    v2,\n    i2,\n    v3,\n    i3,\n    v4,\n    suffix,\n  );\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate6(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  suffix: string,\n): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(\n    lView,\n    prefix,\n    v0,\n    i0,\n    v1,\n    i1,\n    v2,\n    i2,\n    v3,\n    i3,\n    v4,\n    i4,\n    v5,\n    suffix,\n  );\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate7(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  suffix: string,\n): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(\n    lView,\n    prefix,\n    v0,\n    i0,\n    v1,\n    i1,\n    v2,\n    i2,\n    v3,\n    i3,\n    v4,\n    i4,\n    v5,\n    i5,\n    v6,\n    suffix,\n  );\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate8(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  i6: string,\n  v7: any,\n  suffix: string,\n): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(\n    lView,\n    prefix,\n    v0,\n    i0,\n    v1,\n    i1,\n    v2,\n    i2,\n    v3,\n    i3,\n    v4,\n    i4,\n    v5,\n    i5,\n    v6,\n    i6,\n    v7,\n    suffix,\n  );\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n * Update an interpolated class on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolateV(values: any[]): void {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {TrackByFunction} from '../change_detection';\nimport {formatRuntimeError, RuntimeErrorCode} from '../errors';\n\nimport {stringifyForError} from './util/stringify_utils';\n\n/**\n * A type representing the live collection to be reconciled with any new (incoming) collection. This\n * is an adapter class that makes it possible to work with different internal data structures,\n * regardless of the actual values of the incoming collection.\n */\nexport abstract class LiveCollection<T, V> {\n  abstract get length(): number;\n  abstract at(index: number): V;\n  abstract attach(index: number, item: T): void;\n  abstract detach(index: number): T;\n  abstract create(index: number, value: V): T;\n  destroy(item: T): void {\n    // noop by default\n  }\n  updateValue(index: number, value: V): void {\n    // noop by default\n  }\n\n  // operations below could be implemented on top of the operations defined so far, but having\n  // them explicitly allow clear expression of intent and potentially more performant\n  // implementations\n  swap(index1: number, index2: number): void {\n    const startIdx = Math.min(index1, index2);\n    const endIdx = Math.max(index1, index2);\n    const endItem = this.detach(endIdx);\n    if (endIdx - startIdx > 1) {\n      const startItem = this.detach(startIdx);\n      this.attach(startIdx, endItem);\n      this.attach(endIdx, startItem);\n    } else {\n      this.attach(startIdx, endItem);\n    }\n  }\n  move(prevIndex: number, newIdx: number): void {\n    this.attach(newIdx, this.detach(prevIndex));\n  }\n}\n\nfunction valuesMatching<V>(\n  liveIdx: number,\n  liveValue: V,\n  newIdx: number,\n  newValue: V,\n  trackBy: TrackByFunction<V>,\n): number {\n  if (liveIdx === newIdx && Object.is(liveValue, newValue)) {\n    // matching and no value identity to update\n    return 1;\n  } else if (Object.is(trackBy(liveIdx, liveValue), trackBy(newIdx, newValue))) {\n    // matching but requires value identity update\n    return -1;\n  }\n\n  return 0;\n}\n\nfunction recordDuplicateKeys(keyToIdx: Map<unknown, Set<number>>, key: unknown, idx: number): void {\n  const idxSoFar = keyToIdx.get(key);\n\n  if (idxSoFar !== undefined) {\n    idxSoFar.add(idx);\n  } else {\n    keyToIdx.set(key, new Set([idx]));\n  }\n}\n\n/**\n * The live collection reconciliation algorithm that perform various in-place operations, so it\n * reflects the content of the new (incoming) collection.\n *\n * The reconciliation algorithm has 2 code paths:\n * - \"fast\" path that don't require any memory allocation;\n * - \"slow\" path that requires additional memory allocation for intermediate data structures used to\n * collect additional information about the live collection.\n * It might happen that the algorithm switches between the two modes in question in a single\n * reconciliation path - generally it tries to stay on the \"fast\" path as much as possible.\n *\n * The overall complexity of the algorithm is O(n + m) for speed and O(n) for memory (where n is the\n * length of the live collection and m is the length of the incoming collection). Given the problem\n * at hand the complexity / performance constraints makes it impossible to perform the absolute\n * minimum of operation to reconcile the 2 collections. The algorithm makes different tradeoffs to\n * stay within reasonable performance bounds and may apply sub-optimal number of operations in\n * certain situations.\n *\n * @param liveCollection the current, live collection;\n * @param newCollection the new, incoming collection;\n * @param trackByFn key generation function that determines equality between items in the life and\n *     incoming collection;\n */\nexport function reconcile<T, V>(\n  liveCollection: LiveCollection<T, V>,\n  newCollection: Iterable<V> | undefined | null,\n  trackByFn: TrackByFunction<V>,\n): void {\n  let detachedItems: UniqueValueMultiKeyMap<unknown, T> | undefined = undefined;\n  let liveKeysInTheFuture: Set<unknown> | undefined = undefined;\n\n  let liveStartIdx = 0;\n  let liveEndIdx = liveCollection.length - 1;\n\n  const duplicateKeys = ngDevMode ? new Map<unknown, Set<number>>() : undefined;\n\n  if (Array.isArray(newCollection)) {\n    let newEndIdx = newCollection.length - 1;\n\n    while (liveStartIdx <= liveEndIdx && liveStartIdx <= newEndIdx) {\n      // compare from the beginning\n      const liveStartValue = liveCollection.at(liveStartIdx);\n      const newStartValue = newCollection[liveStartIdx];\n\n      if (ngDevMode) {\n        recordDuplicateKeys(duplicateKeys!, trackByFn(liveStartIdx, newStartValue), liveStartIdx);\n      }\n\n      const isStartMatching = valuesMatching(\n        liveStartIdx,\n        liveStartValue,\n        liveStartIdx,\n        newStartValue,\n        trackByFn,\n      );\n      if (isStartMatching !== 0) {\n        if (isStartMatching < 0) {\n          liveCollection.updateValue(liveStartIdx, newStartValue);\n        }\n        liveStartIdx++;\n        continue;\n      }\n\n      // compare from the end\n      // TODO(perf): do _all_ the matching from the end\n      const liveEndValue = liveCollection.at(liveEndIdx);\n      const newEndValue = newCollection[newEndIdx];\n\n      if (ngDevMode) {\n        recordDuplicateKeys(duplicateKeys!, trackByFn(newEndIdx, newEndValue), newEndIdx);\n      }\n\n      const isEndMatching = valuesMatching(\n        liveEndIdx,\n        liveEndValue,\n        newEndIdx,\n        newEndValue,\n        trackByFn,\n      );\n      if (isEndMatching !== 0) {\n        if (isEndMatching < 0) {\n          liveCollection.updateValue(liveEndIdx, newEndValue);\n        }\n        liveEndIdx--;\n        newEndIdx--;\n        continue;\n      }\n\n      // Detect swap and moves:\n      const liveStartKey = trackByFn(liveStartIdx, liveStartValue);\n      const liveEndKey = trackByFn(liveEndIdx, liveEndValue);\n      const newStartKey = trackByFn(liveStartIdx, newStartValue);\n      if (Object.is(newStartKey, liveEndKey)) {\n        const newEndKey = trackByFn(newEndIdx, newEndValue);\n        // detect swap on both ends;\n        if (Object.is(newEndKey, liveStartKey)) {\n          liveCollection.swap(liveStartIdx, liveEndIdx);\n          liveCollection.updateValue(liveEndIdx, newEndValue);\n          newEndIdx--;\n          liveEndIdx--;\n        } else {\n          // the new item is the same as the live item with the end pointer - this is a move forward\n          // to an earlier index;\n          liveCollection.move(liveEndIdx, liveStartIdx);\n        }\n        liveCollection.updateValue(liveStartIdx, newStartValue);\n        liveStartIdx++;\n        continue;\n      }\n\n      // Fallback to the slow path: we need to learn more about the content of the live and new\n      // collections.\n      detachedItems ??= new UniqueValueMultiKeyMap();\n      liveKeysInTheFuture ??= initLiveItemsInTheFuture(\n        liveCollection,\n        liveStartIdx,\n        liveEndIdx,\n        trackByFn,\n      );\n\n      // Check if I'm inserting a previously detached item: if so, attach it here\n      if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newStartKey)) {\n        liveCollection.updateValue(liveStartIdx, newStartValue);\n        liveStartIdx++;\n        liveEndIdx++;\n      } else if (!liveKeysInTheFuture.has(newStartKey)) {\n        // Check if we seen a new item that doesn't exist in the old collection and must be INSERTED\n        const newItem = liveCollection.create(liveStartIdx, newCollection[liveStartIdx]);\n        liveCollection.attach(liveStartIdx, newItem);\n        liveStartIdx++;\n        liveEndIdx++;\n      } else {\n        // We know that the new item exists later on in old collection but we don't know its index\n        // and as the consequence can't move it (don't know where to find it). Detach the old item,\n        // hoping that it unlocks the fast path again.\n        detachedItems.set(liveStartKey, liveCollection.detach(liveStartIdx));\n        liveEndIdx--;\n      }\n    }\n\n    // Final cleanup steps:\n    // - more items in the new collection => insert\n    while (liveStartIdx <= newEndIdx) {\n      createOrAttach(\n        liveCollection,\n        detachedItems,\n        trackByFn,\n        liveStartIdx,\n        newCollection[liveStartIdx],\n      );\n      liveStartIdx++;\n    }\n  } else if (newCollection != null) {\n    // iterable - immediately fallback to the slow path\n    const newCollectionIterator = newCollection[Symbol.iterator]();\n    let newIterationResult = newCollectionIterator.next();\n    while (!newIterationResult.done && liveStartIdx <= liveEndIdx) {\n      const liveValue = liveCollection.at(liveStartIdx);\n      const newValue = newIterationResult.value;\n\n      if (ngDevMode) {\n        recordDuplicateKeys(duplicateKeys!, trackByFn(liveStartIdx, newValue), liveStartIdx);\n      }\n\n      const isStartMatching = valuesMatching(\n        liveStartIdx,\n        liveValue,\n        liveStartIdx,\n        newValue,\n        trackByFn,\n      );\n      if (isStartMatching !== 0) {\n        // found a match - move on, but update value\n        if (isStartMatching < 0) {\n          liveCollection.updateValue(liveStartIdx, newValue);\n        }\n        liveStartIdx++;\n        newIterationResult = newCollectionIterator.next();\n      } else {\n        detachedItems ??= new UniqueValueMultiKeyMap();\n        liveKeysInTheFuture ??= initLiveItemsInTheFuture(\n          liveCollection,\n          liveStartIdx,\n          liveEndIdx,\n          trackByFn,\n        );\n\n        // Check if I'm inserting a previously detached item: if so, attach it here\n        const newKey = trackByFn(liveStartIdx, newValue);\n        if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newKey)) {\n          liveCollection.updateValue(liveStartIdx, newValue);\n          liveStartIdx++;\n          liveEndIdx++;\n          newIterationResult = newCollectionIterator.next();\n        } else if (!liveKeysInTheFuture.has(newKey)) {\n          liveCollection.attach(liveStartIdx, liveCollection.create(liveStartIdx, newValue));\n          liveStartIdx++;\n          liveEndIdx++;\n          newIterationResult = newCollectionIterator.next();\n        } else {\n          // it is a move forward - detach the current item without advancing in collections\n          const liveKey = trackByFn(liveStartIdx, liveValue);\n          detachedItems.set(liveKey, liveCollection.detach(liveStartIdx));\n          liveEndIdx--;\n        }\n      }\n    }\n\n    // this is a new item as we run out of the items in the old collection - create or attach a\n    // previously detached one\n    while (!newIterationResult.done) {\n      createOrAttach(\n        liveCollection,\n        detachedItems,\n        trackByFn,\n        liveCollection.length,\n        newIterationResult.value,\n      );\n      newIterationResult = newCollectionIterator.next();\n    }\n  }\n\n  // Cleanups common to the array and iterable:\n  // - more items in the live collection => delete starting from the end;\n  while (liveStartIdx <= liveEndIdx) {\n    liveCollection.destroy(liveCollection.detach(liveEndIdx--));\n  }\n\n  // - destroy items that were detached but never attached again.\n  detachedItems?.forEach((item) => {\n    liveCollection.destroy(item);\n  });\n\n  // report duplicate keys (dev mode only)\n  if (ngDevMode) {\n    let duplicatedKeysMsg = [];\n    for (const [key, idxSet] of duplicateKeys!) {\n      if (idxSet.size > 1) {\n        const idx = [...idxSet].sort((a, b) => a - b);\n        for (let i = 1; i < idx.length; i++) {\n          duplicatedKeysMsg.push(\n            `key \"${stringifyForError(key)}\" at index \"${idx[i - 1]}\" and \"${idx[i]}\"`,\n          );\n        }\n      }\n    }\n\n    if (duplicatedKeysMsg.length > 0) {\n      const message = formatRuntimeError(\n        RuntimeErrorCode.LOOP_TRACK_DUPLICATE_KEYS,\n        'The provided track expression resulted in duplicated keys for a given collection. ' +\n          'Adjust the tracking expression such that it uniquely identifies all the items in the collection. ' +\n          'Duplicated keys were: \\n' +\n          duplicatedKeysMsg.join(', \\n') +\n          '.',\n      );\n\n      console.warn(message);\n    }\n  }\n}\n\nfunction attachPreviouslyDetached<T, V>(\n  prevCollection: LiveCollection<T, V>,\n  detachedItems: UniqueValueMultiKeyMap<unknown, T> | undefined,\n  index: number,\n  key: unknown,\n): boolean {\n  if (detachedItems !== undefined && detachedItems.has(key)) {\n    prevCollection.attach(index, detachedItems.get(key)!);\n    detachedItems.delete(key);\n    return true;\n  }\n  return false;\n}\n\nfunction createOrAttach<T, V>(\n  liveCollection: LiveCollection<T, V>,\n  detachedItems: UniqueValueMultiKeyMap<unknown, T> | undefined,\n  trackByFn: TrackByFunction<unknown>,\n  index: number,\n  value: V,\n) {\n  if (!attachPreviouslyDetached(liveCollection, detachedItems, index, trackByFn(index, value))) {\n    const newItem = liveCollection.create(index, value);\n    liveCollection.attach(index, newItem);\n  } else {\n    liveCollection.updateValue(index, value);\n  }\n}\n\nfunction initLiveItemsInTheFuture<T>(\n  liveCollection: LiveCollection<unknown, unknown>,\n  start: number,\n  end: number,\n  trackByFn: TrackByFunction<unknown>,\n): Set<unknown> {\n  const keys = new Set();\n  for (let i = start; i <= end; i++) {\n    keys.add(trackByFn(i, liveCollection.at(i)));\n  }\n  return keys;\n}\n\n/**\n * A specific, partial implementation of the Map interface with the following characteristics:\n * - allows multiple values for a given key;\n * - maintain FIFO order for multiple values corresponding to a given key;\n * - assumes that all values are unique.\n *\n * The implementation aims at having the minimal overhead for cases where keys are _not_ duplicated\n * (the most common case in the list reconciliation algorithm). To achieve this, the first value for\n * a given key is stored in a regular map. Then, when more values are set for a given key, we\n * maintain a form of linked list in a separate map. To maintain this linked list we assume that all\n * values (in the entire collection) are unique.\n */\nexport class UniqueValueMultiKeyMap<K, V> {\n  // A map from a key to the first value corresponding to this key.\n  private kvMap = new Map<K, V>();\n  // A map that acts as a linked list of values - each value maps to the next value in this \"linked\n  // list\" (this only works if values are unique). Allocated lazily to avoid memory consumption when\n  // there are no duplicated values.\n  private _vMap: Map<V, V> | undefined = undefined;\n\n  has(key: K): boolean {\n    return this.kvMap.has(key);\n  }\n\n  delete(key: K): boolean {\n    if (!this.has(key)) return false;\n\n    const value = this.kvMap.get(key)!;\n    if (this._vMap !== undefined && this._vMap.has(value)) {\n      this.kvMap.set(key, this._vMap.get(value)!);\n      this._vMap.delete(value);\n    } else {\n      this.kvMap.delete(key);\n    }\n\n    return true;\n  }\n\n  get(key: K): V | undefined {\n    return this.kvMap.get(key);\n  }\n\n  set(key: K, value: V): void {\n    if (this.kvMap.has(key)) {\n      let prevValue = this.kvMap.get(key)!;\n\n      // Note: we don't use `assertNotSame`, because the value needs to be stringified even if\n      // there is no error which can freeze the browser for large values (see #58509).\n      if (ngDevMode && prevValue === value) {\n        throw new Error(`Detected a duplicated value ${value} for the key ${key}`);\n      }\n\n      if (this._vMap === undefined) {\n        this._vMap = new Map();\n      }\n\n      const vMap = this._vMap;\n      while (vMap.has(prevValue)) {\n        prevValue = vMap.get(prevValue)!;\n      }\n      vMap.set(prevValue, value);\n    } else {\n      this.kvMap.set(key, value);\n    }\n  }\n\n  forEach(cb: (v: V, k: K) => void) {\n    for (let [key, value] of this.kvMap) {\n      cb(value, key);\n      if (this._vMap !== undefined) {\n        const vMap = this._vMap;\n        while (vMap.has(value)) {\n          value = vMap.get(value)!;\n          cb(value, key);\n        }\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {setActiveConsumer} from '@angular/core/primitives/signals';\n\nimport {TrackByFunction} from '../../change_detection';\nimport {formatRuntimeError, RuntimeErrorCode} from '../../errors';\nimport {DehydratedContainerView} from '../../hydration/interfaces';\nimport {findMatchingDehydratedView} from '../../hydration/views';\nimport {assertDefined, assertFunction} from '../../util/assert';\nimport {performanceMarkFeature} from '../../util/performance';\nimport {assertLContainer, assertLView, assertTNode} from '../assert';\nimport {bindingUpdated} from '../bindings';\nimport {CONTAINER_HEADER_OFFSET, LContainer} from '../interfaces/container';\nimport {ComponentTemplate} from '../interfaces/definition';\nimport {TNode} from '../interfaces/node';\nimport {\n  CONTEXT,\n  DECLARATION_COMPONENT_VIEW,\n  HEADER_OFFSET,\n  HYDRATION,\n  LView,\n  TVIEW,\n  TView,\n} from '../interfaces/view';\nimport {LiveCollection, reconcile} from '../list_reconciliation';\nimport {destroyLView} from '../node_manipulation';\nimport {getLView, getSelectedIndex, getTView, nextBindingIndex} from '../state';\nimport {NO_CHANGE} from '../tokens';\nimport {getConstant, getTNode} from '../util/view_utils';\nimport {createAndRenderEmbeddedLView, shouldAddViewToDom} from '../view_manipulation';\n\nimport {declareTemplate} from './template';\nimport {\n  addLViewToLContainer,\n  detachView,\n  getLViewFromLContainer,\n  removeLViewFromLContainer,\n} from '../view/container';\n\n/**\n * The conditional instruction represents the basic building block on the runtime side to support\n * built-in \"if\" and \"switch\". On the high level this instruction is responsible for adding and\n * removing views selected by a conditional expression.\n *\n * @param matchingTemplateIndex Index of a template TNode representing a conditional view to be\n *     inserted; -1 represents a special case when there is no view to insert.\n * @param contextValue Value that should be exposed as the context of the conditional.\n * @codeGenApi\n */\nexport function ɵɵconditional<T>(matchingTemplateIndex: number, contextValue?: T) {\n  performanceMarkFeature('NgControlFlow');\n\n  const hostLView = getLView();\n  const bindingIndex = nextBindingIndex();\n  const prevMatchingTemplateIndex: number =\n    hostLView[bindingIndex] !== NO_CHANGE ? hostLView[bindingIndex] : -1;\n  const prevContainer =\n    prevMatchingTemplateIndex !== -1\n      ? getLContainer(hostLView, HEADER_OFFSET + prevMatchingTemplateIndex)\n      : undefined;\n  const viewInContainerIdx = 0;\n\n  if (bindingUpdated(hostLView, bindingIndex, matchingTemplateIndex)) {\n    const prevConsumer = setActiveConsumer(null);\n    try {\n      // The index of the view to show changed - remove the previously displayed one\n      // (it is a noop if there are no active views in a container).\n      if (prevContainer !== undefined) {\n        removeLViewFromLContainer(prevContainer, viewInContainerIdx);\n      }\n\n      // Index -1 is a special case where none of the conditions evaluates to\n      // a truthy value and as the consequence we've got no view to show.\n      if (matchingTemplateIndex !== -1) {\n        const nextLContainerIndex = HEADER_OFFSET + matchingTemplateIndex;\n        const nextContainer = getLContainer(hostLView, nextLContainerIndex);\n        const templateTNode = getExistingTNode(hostLView[TVIEW], nextLContainerIndex);\n\n        const dehydratedView = findMatchingDehydratedView(\n          nextContainer,\n          templateTNode.tView!.ssrId,\n        );\n        const embeddedLView = createAndRenderEmbeddedLView(hostLView, templateTNode, contextValue, {\n          dehydratedView,\n        });\n\n        addLViewToLContainer(\n          nextContainer,\n          embeddedLView,\n          viewInContainerIdx,\n          shouldAddViewToDom(templateTNode, dehydratedView),\n        );\n      }\n    } finally {\n      setActiveConsumer(prevConsumer);\n    }\n  } else if (prevContainer !== undefined) {\n    // We might keep displaying the same template but the actual value of the expression could have\n    // changed - re-bind in context.\n    const lView = getLViewFromLContainer<T | undefined>(prevContainer, viewInContainerIdx);\n    if (lView !== undefined) {\n      lView[CONTEXT] = contextValue;\n    }\n  }\n}\n\nexport class RepeaterContext<T> {\n  constructor(\n    private lContainer: LContainer,\n    public $implicit: T,\n    public $index: number,\n  ) {}\n\n  get $count(): number {\n    return this.lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n}\n\n/**\n * A built-in trackBy function used for situations where users specified collection index as a\n * tracking expression. Having this function body in the runtime avoids unnecessary code generation.\n *\n * @param index\n * @returns\n */\nexport function ɵɵrepeaterTrackByIndex(index: number) {\n  return index;\n}\n\n/**\n * A built-in trackBy function used for situations where users specified collection item reference\n * as a tracking expression. Having this function body in the runtime avoids unnecessary code\n * generation.\n *\n * @param index\n * @returns\n */\nexport function ɵɵrepeaterTrackByIdentity<T>(_: number, value: T) {\n  return value;\n}\n\nclass RepeaterMetadata {\n  constructor(\n    public hasEmptyBlock: boolean,\n    public trackByFn: TrackByFunction<unknown>,\n    public liveCollection?: LiveCollectionLContainerImpl,\n  ) {}\n}\n\n/**\n * The repeaterCreate instruction runs in the creation part of the template pass and initializes\n * internal data structures required by the update pass of the built-in repeater logic. Repeater\n * metadata are allocated in the data part of LView with the following layout:\n * - LView[HEADER_OFFSET + index] - metadata\n * - LView[HEADER_OFFSET + index + 1] - reference to a template function rendering an item\n * - LView[HEADER_OFFSET + index + 2] - optional reference to a template function rendering an empty\n * block\n *\n * @param index Index at which to store the metadata of the repeater.\n * @param templateFn Reference to the template of the main repeater block.\n * @param decls The number of nodes, local refs, and pipes for the main block.\n * @param vars The number of bindings for the main block.\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param trackByFn Reference to the tracking function.\n * @param trackByUsesComponentInstance Whether the tracking function has any references to the\n *  component instance. If it doesn't, we can avoid rebinding it.\n * @param emptyTemplateFn Reference to the template function of the empty block.\n * @param emptyDecls The number of nodes, local refs, and pipes for the empty block.\n * @param emptyVars The number of bindings for the empty block.\n * @param emptyTagName The name of the empty block container element, if applicable\n * @param emptyAttrsIndex Index of the empty block template attributes in the `consts` array.\n *\n * @codeGenApi\n */\nexport function ɵɵrepeaterCreate(\n  index: number,\n  templateFn: ComponentTemplate<unknown>,\n  decls: number,\n  vars: number,\n  tagName: string | null,\n  attrsIndex: number | null,\n  trackByFn: TrackByFunction<unknown>,\n  trackByUsesComponentInstance?: boolean,\n  emptyTemplateFn?: ComponentTemplate<unknown>,\n  emptyDecls?: number,\n  emptyVars?: number,\n  emptyTagName?: string | null,\n  emptyAttrsIndex?: number | null,\n): void {\n  performanceMarkFeature('NgControlFlow');\n\n  ngDevMode &&\n    assertFunction(\n      trackByFn,\n      `A track expression must be a function, was ${typeof trackByFn} instead.`,\n    );\n\n  const lView = getLView();\n  const tView = getTView();\n  const hasEmptyBlock = emptyTemplateFn !== undefined;\n  const hostLView = getLView();\n  const boundTrackBy = trackByUsesComponentInstance\n    ? // We only want to bind when necessary, because it produces a\n      // new function. For pure functions it's not necessary.\n      trackByFn.bind(hostLView[DECLARATION_COMPONENT_VIEW][CONTEXT])\n    : trackByFn;\n  const metadata = new RepeaterMetadata(hasEmptyBlock, boundTrackBy);\n  hostLView[HEADER_OFFSET + index] = metadata;\n\n  declareTemplate(\n    lView,\n    tView,\n    index + 1,\n    templateFn,\n    decls,\n    vars,\n    tagName,\n    getConstant(tView.consts, attrsIndex),\n  );\n\n  if (hasEmptyBlock) {\n    ngDevMode &&\n      assertDefined(emptyDecls, 'Missing number of declarations for the empty repeater block.');\n    ngDevMode &&\n      assertDefined(emptyVars, 'Missing number of bindings for the empty repeater block.');\n\n    declareTemplate(\n      lView,\n      tView,\n      index + 2,\n      emptyTemplateFn,\n      emptyDecls!,\n      emptyVars!,\n      emptyTagName,\n      getConstant(tView.consts, emptyAttrsIndex),\n    );\n  }\n}\n\nfunction isViewExpensiveToRecreate(lView: LView): boolean {\n  // assumption: anything more than a text node with a binding is considered \"expensive\"\n  return lView.length - HEADER_OFFSET > 2;\n}\n\nclass OperationsCounter {\n  created = 0;\n  destroyed = 0;\n\n  reset() {\n    this.created = 0;\n    this.destroyed = 0;\n  }\n\n  recordCreate() {\n    this.created++;\n  }\n\n  recordDestroy() {\n    this.destroyed++;\n  }\n\n  /**\n   * A method indicating if the entire collection was re-created as part of the reconciliation pass.\n   * Used to warn developers about the usage of a tracking function that might result in excessive\n   * amount of view creation / destroy operations.\n   *\n   * @returns boolean value indicating if a live collection was re-created\n   */\n  wasReCreated(collectionLen: number): boolean {\n    return collectionLen > 0 && this.created === this.destroyed && this.created === collectionLen;\n  }\n}\n\nclass LiveCollectionLContainerImpl extends LiveCollection<\n  LView<RepeaterContext<unknown>>,\n  unknown\n> {\n  operationsCounter = ngDevMode ? new OperationsCounter() : undefined;\n\n  /**\n   Property indicating if indexes in the repeater context need to be updated following the live\n   collection changes. Index updates are necessary if and only if views are inserted / removed in\n   the middle of LContainer. Adds and removals at the end don't require index updates.\n */\n  private needsIndexUpdate = false;\n  constructor(\n    private lContainer: LContainer,\n    private hostLView: LView,\n    private templateTNode: TNode,\n  ) {\n    super();\n  }\n\n  override get length(): number {\n    return this.lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n  override at(index: number): unknown {\n    return this.getLView(index)[CONTEXT].$implicit;\n  }\n  override attach(index: number, lView: LView<RepeaterContext<unknown>>): void {\n    const dehydratedView = lView[HYDRATION] as DehydratedContainerView;\n    this.needsIndexUpdate ||= index !== this.length;\n    addLViewToLContainer(\n      this.lContainer,\n      lView,\n      index,\n      shouldAddViewToDom(this.templateTNode, dehydratedView),\n    );\n  }\n  override detach(index: number): LView<RepeaterContext<unknown>> {\n    this.needsIndexUpdate ||= index !== this.length - 1;\n    return detachExistingView<RepeaterContext<unknown>>(this.lContainer, index);\n  }\n  override create(index: number, value: unknown): LView<RepeaterContext<unknown>> {\n    const dehydratedView = findMatchingDehydratedView(\n      this.lContainer,\n      this.templateTNode.tView!.ssrId,\n    );\n    const embeddedLView = createAndRenderEmbeddedLView(\n      this.hostLView,\n      this.templateTNode,\n      new RepeaterContext(this.lContainer, value, index),\n      {dehydratedView},\n    );\n    this.operationsCounter?.recordCreate();\n\n    return embeddedLView;\n  }\n  override destroy(lView: LView<RepeaterContext<unknown>>): void {\n    destroyLView(lView[TVIEW], lView);\n    this.operationsCounter?.recordDestroy();\n  }\n  override updateValue(index: number, value: unknown): void {\n    this.getLView(index)[CONTEXT].$implicit = value;\n  }\n\n  reset(): void {\n    this.needsIndexUpdate = false;\n    this.operationsCounter?.reset();\n  }\n\n  updateIndexes(): void {\n    if (this.needsIndexUpdate) {\n      for (let i = 0; i < this.length; i++) {\n        this.getLView(i)[CONTEXT].$index = i;\n      }\n    }\n  }\n\n  private getLView(index: number): LView<RepeaterContext<unknown>> {\n    return getExistingLViewFromLContainer(this.lContainer, index);\n  }\n}\n\n/**\n * The repeater instruction does update-time diffing of a provided collection (against the\n * collection seen previously) and maps changes in the collection to views structure (by adding,\n * removing or moving views as needed).\n * @param collection - the collection instance to be checked for changes\n * @codeGenApi\n */\nexport function ɵɵrepeater(collection: Iterable<unknown> | undefined | null): void {\n  const prevConsumer = setActiveConsumer(null);\n  const metadataSlotIdx = getSelectedIndex();\n  try {\n    const hostLView = getLView();\n    const hostTView = hostLView[TVIEW];\n    const metadata = hostLView[metadataSlotIdx] as RepeaterMetadata;\n    const containerIndex = metadataSlotIdx + 1;\n    const lContainer = getLContainer(hostLView, containerIndex);\n\n    if (metadata.liveCollection === undefined) {\n      const itemTemplateTNode = getExistingTNode(hostTView, containerIndex);\n      metadata.liveCollection = new LiveCollectionLContainerImpl(\n        lContainer,\n        hostLView,\n        itemTemplateTNode,\n      );\n    } else {\n      metadata.liveCollection.reset();\n    }\n\n    const liveCollection = metadata.liveCollection;\n    reconcile(liveCollection, collection, metadata.trackByFn);\n\n    // Warn developers about situations where the entire collection was re-created as part of the\n    // reconciliation pass. Note that this warning might be \"overreacting\" and report cases where\n    // the collection re-creation is the intended behavior. Still, the assumption is that most of\n    // the time it is undesired.\n    if (\n      ngDevMode &&\n      metadata.trackByFn === ɵɵrepeaterTrackByIdentity &&\n      liveCollection.operationsCounter?.wasReCreated(liveCollection.length) &&\n      isViewExpensiveToRecreate(getExistingLViewFromLContainer(lContainer, 0))\n    ) {\n      const message = formatRuntimeError(\n        RuntimeErrorCode.LOOP_TRACK_RECREATE,\n        `The configured tracking expression (track by identity) caused re-creation of the entire collection of size ${liveCollection.length}. ` +\n          'This is an expensive operation requiring destruction and subsequent creation of DOM nodes, directives, components etc. ' +\n          'Please review the \"track expression\" and make sure that it uniquely identifies items in a collection.',\n      );\n      console.warn(message);\n    }\n\n    // moves in the container might caused context's index to get out of order, re-adjust if needed\n    liveCollection.updateIndexes();\n\n    // handle empty blocks\n    if (metadata.hasEmptyBlock) {\n      const bindingIndex = nextBindingIndex();\n      const isCollectionEmpty = liveCollection.length === 0;\n      if (bindingUpdated(hostLView, bindingIndex, isCollectionEmpty)) {\n        const emptyTemplateIndex = metadataSlotIdx + 2;\n        const lContainerForEmpty = getLContainer(hostLView, emptyTemplateIndex);\n        if (isCollectionEmpty) {\n          const emptyTemplateTNode = getExistingTNode(hostTView, emptyTemplateIndex);\n          const dehydratedView = findMatchingDehydratedView(\n            lContainerForEmpty,\n            emptyTemplateTNode.tView!.ssrId,\n          );\n          const embeddedLView = createAndRenderEmbeddedLView(\n            hostLView,\n            emptyTemplateTNode,\n            undefined,\n            {dehydratedView},\n          );\n          addLViewToLContainer(\n            lContainerForEmpty,\n            embeddedLView,\n            0,\n            shouldAddViewToDom(emptyTemplateTNode, dehydratedView),\n          );\n        } else {\n          removeLViewFromLContainer(lContainerForEmpty, 0);\n        }\n      }\n    }\n  } finally {\n    setActiveConsumer(prevConsumer);\n  }\n}\n\nfunction getLContainer(lView: LView, index: number): LContainer {\n  const lContainer = lView[index];\n  ngDevMode && assertLContainer(lContainer);\n\n  return lContainer;\n}\n\nfunction detachExistingView<T>(lContainer: LContainer, index: number): LView<T> {\n  const existingLView = detachView(lContainer, index);\n  ngDevMode && assertLView(existingLView);\n\n  return existingLView as LView<T>;\n}\n\nfunction getExistingLViewFromLContainer<T>(lContainer: LContainer, index: number): LView<T> {\n  const existingLView = getLViewFromLContainer<T>(lContainer, index);\n  ngDevMode && assertLView(existingLView);\n\n  return existingLView!;\n}\n\nfunction getExistingTNode(tView: TView, index: number): TNode {\n  const tNode = getTNode(tView, index);\n  ngDevMode && assertTNode(tNode);\n\n  return tNode;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  invalidSkipHydrationHost,\n  validateMatchingNode,\n  validateNodeExists,\n} from '../../hydration/error_handling';\nimport {locateNextRNode} from '../../hydration/node_lookup_utils';\nimport {\n  hasSkipHydrationAttrOnRElement,\n  hasSkipHydrationAttrOnTNode,\n} from '../../hydration/skip_hydration';\nimport {\n  getSerializedContainerViews,\n  isDisconnectedNode,\n  markRNodeAsClaimedByHydration,\n  markRNodeAsSkippedByHydration,\n  setSegmentHead,\n} from '../../hydration/utils';\nimport {isDetachedByI18n} from '../../i18n/utils';\nimport {assertDefined, assertEqual, assertIndexInRange} from '../../util/assert';\nimport {assertHasParent} from '../assert';\nimport {attachPatchData} from '../context_discovery';\nimport {\n  clearElementContents,\n  createElementNode,\n  setupStaticAttributes,\n} from '../dom_node_manipulation';\nimport {hasClassInput, hasStyleInput, TElementNode, TNode, TNodeType} from '../interfaces/node';\nimport {Renderer} from '../interfaces/renderer';\nimport {RElement} from '../interfaces/renderer_dom';\nimport {isComponentHost, isDirectiveHost} from '../interfaces/type_checks';\nimport {HEADER_OFFSET, HYDRATION, LView, RENDERER, TView} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {appendChild} from '../node_manipulation';\nimport {executeContentQueries} from '../queries/query_execution';\nimport {\n  decreaseElementDepthCount,\n  enterSkipHydrationBlock,\n  getBindingIndex,\n  getBindingsEnabled,\n  getCurrentTNode,\n  getElementDepthCount,\n  getLView,\n  getNamespace,\n  getTView,\n  increaseElementDepthCount,\n  isCurrentTNodeParent,\n  isInSkipHydrationBlock,\n  isSkipHydrationRootTNode,\n  lastNodeWasCreated,\n  leaveSkipHydrationBlock,\n  setCurrentTNode,\n  setCurrentTNodeAsNotParent,\n  wasLastNodeCreated,\n} from '../state';\nimport {elementEndFirstCreatePass, elementStartFirstCreatePass} from '../view/elements';\n\nimport {validateElementIsKnown} from './element_validation';\nimport {setDirectiveInputsWhichShadowsStyling} from './property';\nimport {\n  createDirectivesInstances,\n  findDirectiveDefMatches,\n  saveResolvedLocalsInData,\n} from './shared';\n\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n *\n * @codeGenApi\n */\nexport function ɵɵelementStart(\n  index: number,\n  name: string,\n  attrsIndex?: number | null,\n  localRefsIndex?: number,\n): typeof ɵɵelementStart {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = HEADER_OFFSET + index;\n\n  ngDevMode &&\n    assertEqual(\n      getBindingIndex(),\n      tView.bindingStartIndex,\n      'elements should be created before any bindings',\n    );\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n\n  const renderer = lView[RENDERER];\n  const tNode = tView.firstCreatePass\n    ? elementStartFirstCreatePass(\n        adjustedIndex,\n        tView,\n        lView,\n        name,\n        findDirectiveDefMatches,\n        getBindingsEnabled(),\n        attrsIndex,\n        localRefsIndex,\n      )\n    : (tView.data[adjustedIndex] as TElementNode);\n\n  const native = _locateOrCreateElementNode(tView, lView, tNode, renderer, name, index);\n  lView[adjustedIndex] = native;\n\n  const hasDirectives = isDirectiveHost(tNode);\n\n  if (ngDevMode && tView.firstCreatePass) {\n    validateElementIsKnown(native, lView, tNode.value, tView.schemas, hasDirectives);\n  }\n\n  setCurrentTNode(tNode, true);\n  setupStaticAttributes(renderer, native, tNode);\n\n  if (!isDetachedByI18n(tNode) && wasLastNodeCreated()) {\n    // In the i18n case, the translation may have removed this element, so only add it if it is not\n    // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n    appendChild(tView, lView, native, tNode);\n  }\n\n  // any immediate children of a component or template container must be pre-emptively\n  // monkey-patched with the component view data so that the element can be inspected\n  // later on using any element discovery utility methods (see `element_discovery.ts`)\n  if (getElementDepthCount() === 0 || hasDirectives) {\n    attachPatchData(native, lView);\n  }\n  increaseElementDepthCount();\n\n  if (hasDirectives) {\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n  if (localRefsIndex !== null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n  return ɵɵelementStart;\n}\n\n/**\n * Mark the end of the element.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nexport function ɵɵelementEnd(): typeof ɵɵelementEnd {\n  let currentTNode = getCurrentTNode()!;\n  ngDevMode && assertDefined(currentTNode, 'No parent node to close.');\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(getCurrentTNode());\n    currentTNode = currentTNode.parent!;\n    setCurrentTNode(currentTNode, false);\n  }\n\n  const tNode = currentTNode;\n  ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode);\n\n  if (isSkipHydrationRootTNode(tNode)) {\n    leaveSkipHydrationBlock();\n  }\n\n  decreaseElementDepthCount();\n\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    elementEndFirstCreatePass(tView, tNode);\n  }\n\n  if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);\n  }\n\n  if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);\n  }\n  return ɵɵelementEnd;\n}\n\n/**\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nexport function ɵɵelement(\n  index: number,\n  name: string,\n  attrsIndex?: number | null,\n  localRefsIndex?: number,\n): typeof ɵɵelement {\n  ɵɵelementStart(index, name, attrsIndex, localRefsIndex);\n  ɵɵelementEnd();\n  return ɵɵelement;\n}\n\nlet _locateOrCreateElementNode: typeof locateOrCreateElementNodeImpl = (\n  tView: TView,\n  lView: LView,\n  tNode: TNode,\n  renderer: Renderer,\n  name: string,\n  index: number,\n) => {\n  lastNodeWasCreated(true);\n  return createElementNode(renderer, name, getNamespace());\n};\n\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode of element nodes.\n */\nfunction locateOrCreateElementNodeImpl(\n  tView: TView,\n  lView: LView,\n  tNode: TNode,\n  renderer: Renderer,\n  name: string,\n  index: number,\n): RElement {\n  const hydrationInfo = lView[HYDRATION];\n  const isNodeCreationMode =\n    !hydrationInfo ||\n    isInSkipHydrationBlock() ||\n    isDetachedByI18n(tNode) ||\n    isDisconnectedNode(hydrationInfo, index);\n  lastNodeWasCreated(isNodeCreationMode);\n\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createElementNode(renderer, name, getNamespace());\n  }\n\n  // Hydration mode, looking up an existing element in DOM.\n  const native = locateNextRNode<RElement>(hydrationInfo, tView, lView, tNode)!;\n  ngDevMode && validateMatchingNode(native, Node.ELEMENT_NODE, name, lView, tNode);\n  ngDevMode && markRNodeAsClaimedByHydration(native);\n\n  // This element might also be an anchor of a view container.\n  if (getSerializedContainerViews(hydrationInfo, index)) {\n    // Important note: this element acts as an anchor, but it's **not** a part\n    // of the embedded view, so we start the segment **after** this element, taking\n    // a reference to the next sibling. For example, the following template:\n    // `<div #vcrTarget>` is represented in the DOM as `<div></div>...<!--container-->`,\n    // so while processing a `<div>` instruction, point to the next sibling as a\n    // start of a segment.\n    ngDevMode && validateNodeExists(native.nextSibling, lView, tNode);\n    setSegmentHead(hydrationInfo, index, native.nextSibling);\n  }\n\n  // Checks if the skip hydration attribute is present during hydration so we know to\n  // skip attempting to hydrate this block. We check both TNode and RElement for an\n  // attribute: the RElement case is needed for i18n cases, when we add it to host\n  // elements during the annotation phase (after all internal data structures are setup).\n  if (\n    hydrationInfo &&\n    (hasSkipHydrationAttrOnTNode(tNode) || hasSkipHydrationAttrOnRElement(native))\n  ) {\n    if (isComponentHost(tNode)) {\n      enterSkipHydrationBlock(tNode);\n\n      // Since this isn't hydratable, we need to empty the node\n      // so there's no duplicate content after render\n      clearElementContents(native);\n\n      ngDevMode && markRNodeAsSkippedByHydration(native);\n    } else if (ngDevMode) {\n      // If this is not a component host, throw an error.\n      // Hydration can be skipped on per-component basis only.\n      throw invalidSkipHydrationHost(native);\n    }\n  }\n  return native;\n}\n\nexport function enableLocateOrCreateElementNodeImpl() {\n  _locateOrCreateElementNode = locateOrCreateElementNodeImpl;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {validateMatchingNode, validateNodeExists} from '../../hydration/error_handling';\nimport {locateNextRNode, siblingAfter} from '../../hydration/node_lookup_utils';\nimport {\n  getNgContainerSize,\n  isDisconnectedNode,\n  markRNodeAsClaimedByHydration,\n  setSegmentHead,\n} from '../../hydration/utils';\nimport {isDetachedByI18n} from '../../i18n/utils';\nimport {assertEqual, assertIndexInRange, assertNumber} from '../../util/assert';\nimport {assertHasParent} from '../assert';\nimport {attachPatchData} from '../context_discovery';\nimport {createCommentNode} from '../dom_node_manipulation';\nimport {registerPostOrderHooks} from '../hooks';\nimport {TAttributes, TElementContainerNode, TNode, TNodeType} from '../interfaces/node';\nimport {RComment} from '../interfaces/renderer_dom';\nimport {isContentQueryHost, isDirectiveHost} from '../interfaces/type_checks';\nimport {HEADER_OFFSET, HYDRATION, LView, RENDERER, TView} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {appendChild} from '../node_manipulation';\nimport {executeContentQueries} from '../queries/query_execution';\nimport {\n  getBindingIndex,\n  getBindingsEnabled,\n  getCurrentTNode,\n  getLView,\n  getTView,\n  isCurrentTNodeParent,\n  isInSkipHydrationBlock,\n  lastNodeWasCreated,\n  setCurrentTNode,\n  setCurrentTNodeAsNotParent,\n  wasLastNodeCreated,\n} from '../state';\nimport {computeStaticStyling} from '../styling/static_styling';\nimport {mergeHostAttrs} from '../util/attrs_utils';\nimport {getConstant} from '../util/view_utils';\n\nimport {getOrCreateTNode} from '../tnode_manipulation';\nimport {resolveDirectives} from '../view/directives';\nimport {\n  createDirectivesInstances,\n  findDirectiveDefMatches,\n  saveResolvedLocalsInData,\n} from './shared';\n\nfunction elementContainerStartFirstCreatePass(\n  index: number,\n  tView: TView,\n  lView: LView,\n  attrsIndex?: number | null,\n  localRefsIndex?: number,\n): TElementContainerNode {\n  ngDevMode && ngDevMode.firstCreatePass++;\n\n  const tViewConsts = tView.consts;\n  const attrs = getConstant<TAttributes>(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, TNodeType.ElementContainer, 'ng-container', attrs);\n\n  // While ng-container doesn't necessarily support styling, we use the style context to identify\n  // and execute directives on the ng-container.\n  if (attrs !== null) {\n    computeStaticStyling(tNode, attrs, true);\n  }\n\n  const localRefs = getConstant<string[]>(tViewConsts, localRefsIndex);\n  if (getBindingsEnabled()) {\n    resolveDirectives(tView, lView, tNode, localRefs, findDirectiveDefMatches);\n  }\n\n  // Merge the template attrs last so that they have the highest priority.\n  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n\n  return tNode;\n}\n\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n *\n * @codeGenApi\n */\nexport function ɵɵelementContainerStart(\n  index: number,\n  attrsIndex?: number | null,\n  localRefsIndex?: number,\n): typeof ɵɵelementContainerStart {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  ngDevMode &&\n    assertEqual(\n      getBindingIndex(),\n      tView.bindingStartIndex,\n      'element containers should be created before any bindings',\n    );\n\n  const tNode = tView.firstCreatePass\n    ? elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex)\n    : (tView.data[adjustedIndex] as TElementContainerNode);\n  setCurrentTNode(tNode, true);\n\n  const comment = _locateOrCreateElementContainerNode(tView, lView, tNode, index);\n  lView[adjustedIndex] = comment;\n\n  if (wasLastNodeCreated()) {\n    appendChild(tView, lView, comment, tNode);\n  }\n  attachPatchData(comment, lView);\n\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n\n  return ɵɵelementContainerStart;\n}\n\n/**\n * Mark the end of the <ng-container>.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nexport function ɵɵelementContainerEnd(): typeof ɵɵelementContainerEnd {\n  let currentTNode = getCurrentTNode()!;\n  const tView = getTView();\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(currentTNode);\n    currentTNode = currentTNode.parent!;\n    setCurrentTNode(currentTNode, false);\n  }\n\n  ngDevMode && assertTNodeType(currentTNode, TNodeType.ElementContainer);\n\n  if (tView.firstCreatePass) {\n    registerPostOrderHooks(tView, currentTNode);\n    if (isContentQueryHost(currentTNode)) {\n      tView.queries!.elementEnd(currentTNode);\n    }\n  }\n  return ɵɵelementContainerEnd;\n}\n\n/**\n * Creates an empty logical container using {@link elementContainerStart}\n * and {@link elementContainerEnd}\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nexport function ɵɵelementContainer(\n  index: number,\n  attrsIndex?: number | null,\n  localRefsIndex?: number,\n): typeof ɵɵelementContainer {\n  ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);\n  ɵɵelementContainerEnd();\n  return ɵɵelementContainer;\n}\n\nlet _locateOrCreateElementContainerNode: typeof locateOrCreateElementContainerNode = (\n  tView: TView,\n  lView: LView,\n  tNode: TNode,\n  index: number,\n) => {\n  lastNodeWasCreated(true);\n  return createCommentNode(lView[RENDERER], ngDevMode ? 'ng-container' : '');\n};\n\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode of comment nodes that\n * represent <ng-container>'s anchor.\n */\nfunction locateOrCreateElementContainerNode(\n  tView: TView,\n  lView: LView,\n  tNode: TNode,\n  index: number,\n): RComment {\n  let comment: RComment;\n  const hydrationInfo = lView[HYDRATION];\n  const isNodeCreationMode =\n    !hydrationInfo ||\n    isInSkipHydrationBlock() ||\n    isDisconnectedNode(hydrationInfo, index) ||\n    isDetachedByI18n(tNode);\n\n  lastNodeWasCreated(isNodeCreationMode);\n\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createCommentNode(lView[RENDERER], ngDevMode ? 'ng-container' : '');\n  }\n\n  // Hydration mode, looking up existing elements in DOM.\n  const currentRNode = locateNextRNode(hydrationInfo, tView, lView, tNode)!;\n  ngDevMode && validateNodeExists(currentRNode, lView, tNode);\n\n  const ngContainerSize = getNgContainerSize(hydrationInfo, index) as number;\n  ngDevMode &&\n    assertNumber(\n      ngContainerSize,\n      'Unexpected state: hydrating an <ng-container>, ' + 'but no hydration info is available.',\n    );\n\n  setSegmentHead(hydrationInfo, index, currentRNode);\n  comment = siblingAfter<RComment>(ngContainerSize, currentRNode)!;\n\n  if (ngDevMode) {\n    validateMatchingNode(comment, Node.COMMENT_NODE, null, lView, tNode);\n    markRNodeAsClaimedByHydration(comment);\n  }\n\n  return comment;\n}\n\nexport function enableLocateOrCreateElementContainerNodeImpl() {\n  _locateOrCreateElementContainerNode = locateOrCreateElementContainerNode;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {OpaqueViewState} from '../interfaces/view';\nimport {getLView} from '../state';\n\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @codeGenApi\n */\nexport function ɵɵgetCurrentView(): OpaqueViewState {\n  return getLView() as any as OpaqueViewState;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {bindingUpdated} from '../bindings';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {RENDERER} from '../interfaces/view';\nimport {\n  getCurrentDirectiveDef,\n  getLView,\n  getSelectedTNode,\n  getTView,\n  nextBindingIndex,\n} from '../state';\nimport {NO_CHANGE} from '../tokens';\n\nimport {\n  elementPropertyInternal,\n  loadComponentRenderer,\n  storePropertyBindingMetadata,\n} from './shared';\n\n/**\n * Update a property on a host element. Only applies to native node properties, not inputs.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nexport function ɵɵhostProperty<T>(\n  propName: string,\n  value: T,\n  sanitizer?: SanitizerFn | null,\n): typeof ɵɵhostProperty {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵhostProperty;\n}\n\n/**\n * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation @triggers, they need to be\n * evaluated with the sub component's renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n *\n * @codeGenApi\n */\nexport function ɵɵsyntheticHostProperty<T>(\n  propName: string,\n  value: T | NO_CHANGE,\n  sanitizer?: SanitizerFn | null,\n): typeof ɵɵsyntheticHostProperty {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    const currentDef = getCurrentDirectiveDef(tView.data);\n    const renderer = loadComponentRenderer(currentDef, tNode, lView);\n    elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵsyntheticHostProperty;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n// THIS CODE IS GENERATED - DO NOT MODIFY.\nconst u = undefined;\n\nfunction plural(val: number): number {\nconst n = val, i = Math.floor(Math.abs(val)), v = val.toString().replace(/^[^.]*\\.?/, '').length;\n\nif (i === 1 && v === 0)\n    return 1;\nreturn 5;\n}\n\nexport default [\"en\",[[\"a\",\"p\"],[\"AM\",\"PM\"],u],[[\"AM\",\"PM\"],u,u],[[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"]],u,[[\"J\",\"F\",\"M\",\"A\",\"M\",\"J\",\"J\",\"A\",\"S\",\"O\",\"N\",\"D\"],[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]],u,[[\"B\",\"A\"],[\"BC\",\"AD\"],[\"Before Christ\",\"Anno Domini\"]],0,[6,0],[\"M/d/yy\",\"MMM d, y\",\"MMMM d, y\",\"EEEE, MMMM d, y\"],[\"h:mm a\",\"h:mm:ss a\",\"h:mm:ss a z\",\"h:mm:ss a zzzz\"],[\"{1}, {0}\",u,\"{1} 'at' {0}\",u],[\".\",\",\",\";\",\"%\",\"+\",\"-\",\"E\",\"×\",\"‰\",\"∞\",\"NaN\",\":\"],[\"#,##0.###\",\"#,##0%\",\"¤#,##0.00\",\"#E0\"],\"USD\",\"$\",\"US Dollar\",{},\"ltr\", plural];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {global} from '../util/global';\n\nimport localeEn from './locale_en';\n\n/**\n * This const is used to store the locale data registered with `registerLocaleData`\n */\nlet LOCALE_DATA: {[localeId: string]: any} = {};\n\n/**\n * Register locale data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n/format-data-locale) to know how to import additional locale\n * data.\n *\n * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1\n */\nexport function registerLocaleData(data: any, localeId?: string | any, extraData?: any): void {\n  if (typeof localeId !== 'string') {\n    extraData = localeId;\n    localeId = data[LocaleDataIndex.LocaleId];\n  }\n\n  localeId = localeId.toLowerCase().replace(/_/g, '-');\n\n  LOCALE_DATA[localeId] = data;\n\n  if (extraData) {\n    LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;\n  }\n}\n\n/**\n * Finds the locale data for a given locale.\n *\n * @param locale The locale code.\n * @returns The locale data.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n */\nexport function findLocaleData(locale: string): any {\n  const normalizedLocale = normalizeLocale(locale);\n\n  let match = getLocaleData(normalizedLocale);\n  if (match) {\n    return match;\n  }\n\n  // let's try to find a parent locale\n  const parentLocale = normalizedLocale.split('-')[0];\n  match = getLocaleData(parentLocale);\n  if (match) {\n    return match;\n  }\n\n  if (parentLocale === 'en') {\n    return localeEn;\n  }\n\n  throw new RuntimeError(\n    RuntimeErrorCode.MISSING_LOCALE_DATA,\n    ngDevMode && `Missing locale data for the locale \"${locale}\".`,\n  );\n}\n\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n */\nexport function getLocaleCurrencyCode(locale: string): string | null {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencyCode] || null;\n}\n\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The plural function for the locale.\n * @see {@link NgPlural}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n */\nexport function getLocalePluralCase(locale: string): (value: number) => number {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.PluralCase];\n}\n\n/**\n * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`\n * or from the global `ng.common.locale`.\n */\nexport function getLocaleData(normalizedLocale: string): any {\n  if (!(normalizedLocale in LOCALE_DATA)) {\n    LOCALE_DATA[normalizedLocale] =\n      global.ng &&\n      global.ng.common &&\n      global.ng.common.locales &&\n      global.ng.common.locales[normalizedLocale];\n  }\n  return LOCALE_DATA[normalizedLocale];\n}\n\n/**\n * Helper function to remove all the locale data from `LOCALE_DATA`.\n */\nexport function unregisterAllLocaleData() {\n  LOCALE_DATA = {};\n}\n\n/**\n * Index of each type of locale data from the locale data array\n */\nexport enum LocaleDataIndex {\n  LocaleId = 0,\n  DayPeriodsFormat,\n  DayPeriodsStandalone,\n  DaysFormat,\n  DaysStandalone,\n  MonthsFormat,\n  MonthsStandalone,\n  Eras,\n  FirstDayOfWeek,\n  WeekendRange,\n  DateFormat,\n  TimeFormat,\n  DateTimeFormat,\n  NumberSymbols,\n  NumberFormats,\n  CurrencyCode,\n  CurrencySymbol,\n  CurrencyName,\n  Currencies,\n  Directionality,\n  PluralCase,\n  ExtraData,\n}\n\n/**\n * Index of each type of locale data from the extra locale data array\n */\nexport const enum ExtraLocaleDataIndex {\n  ExtraDayPeriodFormats = 0,\n  ExtraDayPeriodStandalone,\n  ExtraDayPeriodsRules,\n}\n\n/**\n * Index of each value in currency data (used to describe CURRENCIES_EN in currencies.ts)\n */\nexport const enum CurrencyIndex {\n  Symbol = 0,\n  SymbolNarrow,\n  NbOfDigits,\n}\n\n/**\n * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.\n */\nfunction normalizeLocale(locale: string): string {\n  return locale.toLowerCase().replace(/_/g, '-');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {getLocalePluralCase} from './locale_data_api';\n\nconst pluralMapping = ['zero', 'one', 'two', 'few', 'many'];\n\n/**\n * Returns the plural case based on the locale\n */\nexport function getPluralCase(value: string, locale: string): string {\n  const plural = getLocalePluralCase(locale)(parseInt(value, 10));\n  const result = pluralMapping[plural];\n  return result !== undefined ? result : 'other';\n}\n\n/**\n * The locale id that the application is using by default (for translations and ICU expressions).\n */\nexport const DEFAULT_LOCALE_ID = 'en-US';\n\n/**\n * USD currency code that the application uses by default for CurrencyPipe when no\n * DEFAULT_CURRENCY_CODE is provided.\n */\nexport const USD_CURRENCY_CODE = 'USD';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {SanitizerFn} from './sanitization';\n\n/**\n * Stores a list of nodes which need to be removed.\n *\n * Numbers are indexes into the `LView`\n * - index > 0: `removeRNode(lView[0])`\n * - index < 0: `removeICU(~lView[0])`\n */\nexport interface I18nRemoveOpCodes extends Array<number> {\n  __brand__: 'I18nRemoveOpCodes';\n}\n\n/**\n * `I18nMutateOpCode` defines OpCodes for `I18nMutateOpCodes` array.\n *\n * OpCodes are efficient operations which can be applied to the DOM to update it. (For example to\n * update to a new ICU case requires that we clean up previous elements and create new ones.)\n *\n * OpCodes contain three parts:\n *  1) Parent node index offset. (p)\n *  2) Reference node index offset. (r)\n *  3) The instruction to execute. (i)\n *\n * pppp pppp pppp pppp rrrr rrrr rrrr riii\n * 3322 2222 2222 1111 1111 1110 0000 0000\n * 1098 7654 3210 9876 5432 1098 7654 3210\n *\n * ```ts\n * var parent = lView[opCode >>> SHIFT_PARENT];\n * var refNode = lView[((opCode & MASK_REF) >>> SHIFT_REF)];\n * var instruction = opCode & MASK_OPCODE;\n * ```\n *\n * See: `I18nCreateOpCodes` for example of usage.\n */\nexport const enum IcuCreateOpCode {\n  /**\n   * Stores shift amount for bits 17-3 that contain reference index.\n   */\n  SHIFT_REF = 1,\n  /**\n   * Stores shift amount for bits 31-17 that contain parent index.\n   */\n  SHIFT_PARENT = 17,\n  /**\n   * Mask for OpCode\n   */\n  MASK_INSTRUCTION = 0b1,\n\n  /**\n   * Mask for the Reference node (bits 16-3)\n   */\n  MASK_REF = 0b11111111111111110,\n  //           11111110000000000\n  //           65432109876543210\n\n  /**\n   * Instruction to append the current node to `PARENT`.\n   */\n  AppendChild = 0b0,\n\n  /**\n   * Instruction to set the attribute of a node.\n   */\n  Attr = 0b1,\n}\n\n/**\n * Array storing OpCode for dynamically creating `i18n` blocks.\n *\n * Example:\n * ```ts\n * <I18nCreateOpCode>[\n *   // For adding text nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   lView[1].appendChild(lView[0] = document.createTextNode('xyz'));\n *   'xyz', 0, 1 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,\n *\n *   // For adding element nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   lView[1].appendChild(lView[0] = document.createElement('div'));\n *   ELEMENT_MARKER, 'div', 0, 1 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,\n *\n *   // For adding comment nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   lView[1].appendChild(lView[0] = document.createComment(''));\n *   ICU_MARKER, '', 0, 1 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,\n *\n *   // For moving existing nodes to a different location\n *   // --------------------------------------------------\n *   // Equivalent to:\n *   //   const node = lView[1];\n *   //   lView[2].appendChild(node);\n *   1 << SHIFT_REF | Select, 2 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,\n *\n *   // For removing existing nodes\n *   // --------------------------------------------------\n *   //   const node = lView[1];\n *   //   removeChild(tView.data(1), node, lView);\n *   1 << SHIFT_REF | Remove,\n *\n *   // For writing attributes\n *   // --------------------------------------------------\n *   //   const node = lView[1];\n *   //   node.setAttribute('attr', 'value');\n *   1 << SHIFT_REF | Attr, 'attr', 'value'\n * ];\n * ```\n */\nexport interface IcuCreateOpCodes\n  extends Array<number | string | ELEMENT_MARKER | ICU_MARKER | null>,\n    I18nDebug {\n  __brand__: 'I18nCreateOpCodes';\n}\n\nexport const enum I18nUpdateOpCode {\n  /**\n   * Stores shift amount for bits 17-2 that contain reference index.\n   */\n  SHIFT_REF = 2,\n  /**\n   * Mask for OpCode\n   */\n  MASK_OPCODE = 0b11,\n\n  /**\n   * Instruction to update a text node.\n   */\n  Text = 0b00,\n  /**\n   * Instruction to update a attribute of a node.\n   */\n  Attr = 0b01,\n  /**\n   * Instruction to switch the current ICU case.\n   */\n  IcuSwitch = 0b10,\n  /**\n   * Instruction to update the current ICU case.\n   */\n  IcuUpdate = 0b11,\n}\n\n/**\n * Marks that the next string is an element name.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nexport const ELEMENT_MARKER: ELEMENT_MARKER = {\n  marker: 'element',\n};\nexport interface ELEMENT_MARKER {\n  marker: 'element';\n}\n\n/**\n * Marks that the next string is comment text need for ICU.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nexport const ICU_MARKER: ICU_MARKER = {\n  marker: 'ICU',\n};\n\nexport interface ICU_MARKER {\n  marker: 'ICU';\n}\n\nexport interface I18nDebug {\n  /**\n   * Human readable representation of the OpCode arrays.\n   *\n   * NOTE: This property only exists if `ngDevMode` is set to `true` and it is not present in\n   * production. Its presence is purely to help debug issue in development, and should not be relied\n   * on in production application.\n   */\n  debug?: string[];\n}\n\n/**\n * Array storing OpCode for dynamically creating `i18n` translation DOM elements.\n *\n * This array creates a sequence of `Text` and `Comment` (as ICU anchor) DOM elements. It consists\n * of a pair of `number` and `string` pairs which encode the operations for the creation of the\n * translated block.\n *\n * The number is shifted and encoded according to `I18nCreateOpCode`\n *\n * Pseudocode:\n * ```ts\n * const i18nCreateOpCodes = [\n *   10 << I18nCreateOpCode.SHIFT, \"Text Node add to DOM\",\n *   11 << I18nCreateOpCode.SHIFT | I18nCreateOpCode.COMMENT, \"Comment Node add to DOM\",\n *   12 << I18nCreateOpCode.SHIFT | I18nCreateOpCode.APPEND_LATER, \"Text Node added later\"\n * ];\n *\n * for(var i=0; i<i18nCreateOpCodes.length; i++) {\n *   const opcode = i18NCreateOpCodes[i++];\n *   const index = opcode >> I18nCreateOpCode.SHIFT;\n *   const text = i18NCreateOpCodes[i];\n *   let node: Text|Comment;\n *   if (opcode & I18nCreateOpCode.COMMENT === I18nCreateOpCode.COMMENT) {\n *     node = lView[~index] = document.createComment(text);\n *   } else {\n *     node = lView[index] = document.createText(text);\n *   }\n *   if (opcode & I18nCreateOpCode.APPEND_EAGERLY !== I18nCreateOpCode.APPEND_EAGERLY) {\n *     parentNode.appendChild(node);\n *   }\n * }\n * ```\n */\nexport interface I18nCreateOpCodes extends Array<number | string>, I18nDebug {\n  __brand__: 'I18nCreateOpCodes';\n}\n\n/**\n * See `I18nCreateOpCodes`\n */\nexport enum I18nCreateOpCode {\n  /**\n   * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and\n   * `COMMENT`.\n   */\n  SHIFT = 2,\n\n  /**\n   * Should the node be appended to parent immediately after creation.\n   */\n  APPEND_EAGERLY = 0b01,\n\n  /**\n   * If set the node should be comment (rather than a text) node.\n   */\n  COMMENT = 0b10,\n}\n\n/**\n * Stores DOM operations which need to be applied to update DOM render tree due to changes in\n * expressions.\n *\n * The basic idea is that `i18nExp` OpCodes capture expression changes and update a change\n * mask bit. (Bit 1 for expression 1, bit 2 for expression 2 etc..., bit 32 for expression 32 and\n * higher.) The OpCodes then compare its own change mask against the expression change mask to\n * determine if the OpCodes should execute.\n *\n * NOTE: 32nd bit is special as it says 32nd or higher. This way if we have more than 32 bindings\n * the code still works, but with lower efficiency. (it is unlikely that a translation would have\n * more than 32 bindings.)\n *\n * These OpCodes can be used by both the i18n block as well as ICU sub-block.\n *\n * ## Example\n *\n * Assume\n * ```ts\n *   if (rf & RenderFlags.Update) {\n *    i18nExp(ctx.exp1); // If changed set mask bit 1\n *    i18nExp(ctx.exp2); // If changed set mask bit 2\n *    i18nExp(ctx.exp3); // If changed set mask bit 3\n *    i18nExp(ctx.exp4); // If changed set mask bit 4\n *    i18nApply(0);            // Apply all changes by executing the OpCodes.\n *  }\n * ```\n * We can assume that each call to `i18nExp` sets an internal `changeMask` bit depending on the\n * index of `i18nExp`.\n *\n * ### OpCodes\n * ```ts\n * <I18nUpdateOpCodes>[\n *   // The following OpCodes represent: `<div i18n-title=\"pre{{exp1}}in{{exp2}}post\">`\n *   // If `changeMask & 0b11`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `8` values and start processing next OpCodes.\n *   0b11, 8,\n *   // Concatenate `newValue = 'pre'+lView[bindIndex-4]+'in'+lView[bindIndex-3]+'post';`.\n *   'pre', -4, 'in', -3, 'post',\n *   // Update attribute: `elementAttribute(1, 'title', sanitizerFn(newValue));`\n *   1 << SHIFT_REF | Attr, 'title', sanitizerFn,\n *\n *   // The following OpCodes represent: `<div i18n>Hello {{exp3}}!\">`\n *   // If `changeMask & 0b100`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `4` values and start processing next OpCodes.\n *   0b100, 4,\n *   // Concatenate `newValue = 'Hello ' + lView[bindIndex -2] + '!';`.\n *   'Hello ', -2, '!',\n *   // Update text: `lView[1].textContent = newValue;`\n *   1 << SHIFT_REF | Text,\n *\n *   // The following OpCodes represent: `<div i18n>{exp4, plural, ... }\">`\n *   // If `changeMask & 0b1000`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `2` values and start processing next OpCodes.\n *   0b1000, 2,\n *   // Concatenate `newValue = lView[bindIndex -1];`.\n *   -1,\n *   // Switch ICU: `icuSwitchCase(lView[1], 0, newValue);`\n *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuSwitch,\n *\n *   // Note `changeMask & -1` is always true, so the IcuUpdate will always execute.\n *   -1, 1,\n *   // Update ICU: `icuUpdateCase(lView[1], 0);`\n *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuUpdate,\n *\n * ];\n * ```\n *\n */\nexport interface I18nUpdateOpCodes extends Array<string | number | SanitizerFn | null>, I18nDebug {\n  __brand__: 'I18nUpdateOpCodes';\n}\n\n/**\n * Store information for the i18n translation block.\n */\nexport interface TI18n {\n  /**\n   * A set of OpCodes which will create the Text Nodes and ICU anchors for the translation blocks.\n   *\n   * NOTE: The ICU anchors are filled in with ICU Update OpCode.\n   */\n  create: I18nCreateOpCodes;\n\n  /**\n   * A set of OpCodes which will be executed on each change detection to determine if any changes to\n   * DOM are required.\n   */\n  update: I18nUpdateOpCodes;\n\n  /**\n   * An AST representing the translated message. This is used for hydration (and serialization),\n   * while the Update and Create OpCodes are used at runtime.\n   */\n  ast: Array<I18nNode>;\n\n  /**\n   * Index of a parent TNode, which represents a host node for this i18n block.\n   */\n  parentTNodeIndex: number;\n}\n\n/**\n * Defines the ICU type of `select` or `plural`\n */\nexport const enum IcuType {\n  select = 0,\n  plural = 1,\n}\n\nexport interface TIcu {\n  /**\n   * Defines the ICU type of `select` or `plural`\n   */\n  type: IcuType;\n\n  /**\n   * Index in `LView` where the anchor node is stored. `<!-- ICU 0:0 -->`\n   */\n  anchorIdx: number;\n\n  /**\n   * Currently selected ICU case pointer.\n   *\n   * `lView[currentCaseLViewIndex]` stores the currently selected case. This is needed to know how\n   * to clean up the current case when transitioning no the new case.\n   *\n   * If the value stored is:\n   * `null`: No current case selected.\n   *   `<0`: A flag which means that the ICU just switched and that `icuUpdate` must be executed\n   *         regardless of the `mask`. (After the execution the flag is cleared)\n   *   `>=0` A currently selected case index.\n   */\n  currentCaseLViewIndex: number;\n\n  /**\n   * A list of case values which the current ICU will try to match.\n   *\n   * The last value is `other`\n   */\n  cases: any[];\n\n  /**\n   * A set of OpCodes to apply in order to build up the DOM render tree for the ICU\n   */\n  create: IcuCreateOpCodes[];\n\n  /**\n   * A set of OpCodes to apply in order to destroy the DOM render tree for the ICU.\n   */\n  remove: I18nRemoveOpCodes[];\n\n  /**\n   * A set of OpCodes to apply in order to update the DOM render tree for the ICU bindings.\n   */\n  update: I18nUpdateOpCodes[];\n}\n\n/**\n * Parsed ICU expression\n */\nexport interface IcuExpression {\n  type: IcuType;\n  mainBinding: number;\n  cases: string[];\n  values: (string | IcuExpression)[][];\n}\n\n// A parsed I18n AST Node\nexport type I18nNode = I18nTextNode | I18nElementNode | I18nICUNode | I18nPlaceholderNode;\n\n/**\n * Represents a block of text in a translation, such as `Hello, {{ name }}!`.\n */\nexport interface I18nTextNode {\n  /** The AST node kind */\n  kind: I18nNodeKind.TEXT;\n\n  /** The LView index */\n  index: number;\n}\n\n/**\n * Represents a simple DOM element in a translation, such as `<div>...</div>`\n */\nexport interface I18nElementNode {\n  /** The AST node kind */\n  kind: I18nNodeKind.ELEMENT;\n\n  /** The LView index */\n  index: number;\n\n  /** The child nodes */\n  children: Array<I18nNode>;\n}\n\n/**\n * Represents an ICU in a translation.\n */\nexport interface I18nICUNode {\n  /** The AST node kind */\n  kind: I18nNodeKind.ICU;\n\n  /** The LView index */\n  index: number;\n\n  /** The branching cases */\n  cases: Array<Array<I18nNode>>;\n\n  /** The LView index that stores the active case */\n  currentCaseLViewIndex: number;\n}\n\n/**\n * Represents special content that is embedded into the translation. This can\n * either be a special built-in element, such as <ng-container> and <ng-content>,\n * or it can be a sub-template, for example, from a structural directive.\n */\nexport interface I18nPlaceholderNode {\n  /** The AST node kind */\n  kind: I18nNodeKind.PLACEHOLDER;\n\n  /** The LView index */\n  index: number;\n\n  /** The child nodes */\n  children: Array<I18nNode>;\n\n  /** The placeholder type */\n  type: I18nPlaceholderType;\n}\n\nexport const enum I18nPlaceholderType {\n  ELEMENT,\n  SUBTEMPLATE,\n}\n\nexport const enum I18nNodeKind {\n  TEXT,\n  ELEMENT,\n  PLACEHOLDER,\n  ICU,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DEFAULT_LOCALE_ID} from '../../i18n/localization';\nimport {assertDefined} from '../../util/assert';\n\n/**\n * The locale id that the application is currently using (for translations and ICU expressions).\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nlet LOCALE_ID = DEFAULT_LOCALE_ID;\n\n/**\n * Sets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n *\n * @param localeId\n */\nexport function setLocaleId(localeId: string) {\n  ngDevMode && assertDefined(localeId, `Expected localeId to be defined`);\n  if (typeof localeId === 'string') {\n    LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');\n  }\n}\n\n/**\n * Gets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nexport function getLocaleId(): string {\n  return LOCALE_ID;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {claimDehydratedIcuCase, isI18nHydrationSupportEnabled} from '../../hydration/i18n';\nimport {locateI18nRNodeByIndex} from '../../hydration/node_lookup_utils';\nimport {isDisconnectedNode, markRNodeAsClaimedByHydration} from '../../hydration/utils';\nimport {getPluralCase} from '../../i18n/localization';\nimport {\n  assertDefined,\n  assertDomNode,\n  assertEqual,\n  assertGreaterThan,\n  assertIndexInRange,\n  throwError,\n} from '../../util/assert';\nimport {assertIndexInExpandoRange, assertTIcu} from '../assert';\nimport {attachPatchData} from '../context_discovery';\nimport {elementPropertyInternal, setElementAttribute} from '../instructions/shared';\nimport {\n  ELEMENT_MARKER,\n  I18nCreateOpCode,\n  I18nCreateOpCodes,\n  I18nUpdateOpCode,\n  I18nUpdateOpCodes,\n  ICU_MARKER,\n  IcuCreateOpCode,\n  IcuCreateOpCodes,\n  IcuType,\n  TI18n,\n  TIcu,\n} from '../interfaces/i18n';\nimport {TNode} from '../interfaces/node';\nimport {RElement, RNode, RText} from '../interfaces/renderer_dom';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {HEADER_OFFSET, HYDRATION, LView, RENDERER, TView} from '../interfaces/view';\nimport {\n  createCommentNode,\n  createElementNode,\n  createTextNode,\n  nativeInsertBefore,\n  nativeRemoveNode,\n  updateTextNode,\n} from '../dom_node_manipulation';\nimport {\n  getBindingIndex,\n  isInSkipHydrationBlock,\n  lastNodeWasCreated,\n  wasLastNodeCreated,\n} from '../state';\nimport {renderStringify} from '../util/stringify_utils';\nimport {getNativeByIndex, unwrapRNode} from '../util/view_utils';\n\nimport {getLocaleId} from './i18n_locale_id';\nimport {\n  getCurrentICUCaseIndex,\n  getParentFromIcuCreateOpCode,\n  getRefFromIcuCreateOpCode,\n  getTIcu,\n} from './i18n_util';\n\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * This is used to efficiently update expressions in i18n only when the corresponding input has\n * changed.\n *\n * 1) Each bit represents which of the `ɵɵi18nExp` has changed.\n * 2) There are 32 bits allowed in JS.\n * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more\n * than 32 `ɵɵi18nExp` then all changes past 32nd `ɵɵi18nExp` will be mapped to same bit. This means\n * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare\n * so in practice it should not be an issue.)\n */\nlet changeMask = 0b0;\n\n/**\n * Keeps track of which bit needs to be updated in `changeMask`\n *\n * This value gets incremented on every call to `ɵɵi18nExp`\n */\nlet changeMaskCounter = 0;\n\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * `setMaskBit` gets invoked by each call to `ɵɵi18nExp`.\n *\n * @param hasChange did `ɵɵi18nExp` detect a change.\n */\nexport function setMaskBit(hasChange: boolean) {\n  if (hasChange) {\n    changeMask = changeMask | (1 << Math.min(changeMaskCounter, 31));\n  }\n  changeMaskCounter++;\n}\n\nexport function applyI18n(tView: TView, lView: LView, index: number) {\n  if (changeMaskCounter > 0) {\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    const tI18n = tView.data[index] as TI18n | I18nUpdateOpCodes;\n    // When `index` points to an `ɵɵi18nAttributes` then we have an array otherwise `TI18n`\n    const updateOpCodes: I18nUpdateOpCodes = Array.isArray(tI18n)\n      ? (tI18n as I18nUpdateOpCodes)\n      : (tI18n as TI18n).update;\n    const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;\n    applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);\n  }\n  // Reset changeMask & maskBit to default for the next update cycle\n  changeMask = 0b0;\n  changeMaskCounter = 0;\n}\n\nfunction createNodeWithoutHydration(\n  lView: LView,\n  textOrName: string,\n  nodeType: typeof Node.COMMENT_NODE | typeof Node.TEXT_NODE | typeof Node.ELEMENT_NODE,\n) {\n  const renderer = lView[RENDERER];\n\n  switch (nodeType) {\n    case Node.COMMENT_NODE:\n      return createCommentNode(renderer, textOrName);\n\n    case Node.TEXT_NODE:\n      return createTextNode(renderer, textOrName);\n\n    case Node.ELEMENT_NODE:\n      return createElementNode(renderer, textOrName, null);\n  }\n}\n\nlet _locateOrCreateNode: typeof locateOrCreateNodeImpl = (lView, index, textOrName, nodeType) => {\n  lastNodeWasCreated(true);\n  return createNodeWithoutHydration(lView, textOrName, nodeType);\n};\n\nfunction locateOrCreateNodeImpl(\n  lView: LView,\n  index: number,\n  textOrName: string,\n  nodeType: typeof Node.COMMENT_NODE | typeof Node.TEXT_NODE | typeof Node.ELEMENT_NODE,\n) {\n  const hydrationInfo = lView[HYDRATION];\n  const noOffsetIndex = index - HEADER_OFFSET;\n  const isNodeCreationMode =\n    !isI18nHydrationSupportEnabled() ||\n    !hydrationInfo ||\n    isInSkipHydrationBlock() ||\n    isDisconnectedNode(hydrationInfo, noOffsetIndex);\n\n  lastNodeWasCreated(isNodeCreationMode);\n  if (isNodeCreationMode) {\n    return createNodeWithoutHydration(lView, textOrName, nodeType);\n  }\n\n  const native = locateI18nRNodeByIndex(hydrationInfo!, noOffsetIndex) as RNode;\n\n  // TODO: Improve error handling\n  //\n  // Other hydration paths use validateMatchingNode() in order to provide\n  // detailed information in development mode about the expected DOM.\n  // However, not every node in an i18n block has a TNode. Instead, we\n  // need to be able to use the AST to generate a similar message.\n  ngDevMode && assertDefined(native, 'expected native element');\n  ngDevMode && assertEqual((native as Node).nodeType, nodeType, 'expected matching nodeType');\n  ngDevMode &&\n    nodeType === Node.ELEMENT_NODE &&\n    assertEqual(\n      (native as HTMLElement).tagName.toLowerCase(),\n      textOrName.toLowerCase(),\n      'expecting matching tagName',\n    );\n  ngDevMode && markRNodeAsClaimedByHydration(native);\n\n  return native;\n}\n\nexport function enableLocateOrCreateI18nNodeImpl() {\n  _locateOrCreateNode = locateOrCreateNodeImpl;\n}\n\n/**\n * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.\n *\n * Creates text (and comment) nodes which are internationalized.\n *\n * @param lView Current lView\n * @param createOpCodes Set of op-codes to apply\n * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is\n *     a root node.\n * @param insertInFrontOf DOM node that should be used as an anchor.\n */\nexport function applyCreateOpCodes(\n  lView: LView,\n  createOpCodes: I18nCreateOpCodes,\n  parentRNode: RElement | null,\n  insertInFrontOf: RElement | null,\n): void {\n  const renderer = lView[RENDERER];\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i++] as any;\n    const text = createOpCodes[i] as string;\n    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n    const appendNow =\n      (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n    const index = opCode >>> I18nCreateOpCode.SHIFT;\n    let rNode = lView[index];\n    let lastNodeWasCreated = false;\n    if (rNode === null) {\n      // We only create new DOM nodes if they don't already exist: If ICU switches case back to a\n      // case which was already instantiated, no need to create new DOM nodes.\n      rNode = lView[index] = _locateOrCreateNode(\n        lView,\n        index,\n        text,\n        isComment ? Node.COMMENT_NODE : Node.TEXT_NODE,\n      );\n      lastNodeWasCreated = wasLastNodeCreated();\n    }\n    if (appendNow && parentRNode !== null && lastNodeWasCreated) {\n      nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);\n    }\n  }\n}\n\n/**\n * Apply `I18nMutateOpCodes` OpCodes.\n *\n * @param tView Current `TView`\n * @param mutableOpCodes Mutable OpCodes to process\n * @param lView Current `LView`\n * @param anchorRNode place where the i18n node should be inserted.\n */\nexport function applyMutableOpCodes(\n  tView: TView,\n  mutableOpCodes: IcuCreateOpCodes,\n  lView: LView,\n  anchorRNode: RNode,\n): void {\n  ngDevMode && assertDomNode(anchorRNode);\n  const renderer = lView[RENDERER];\n  // `rootIdx` represents the node into which all inserts happen.\n  let rootIdx: number | null = null;\n  // `rootRNode` represents the real node into which we insert. This can be different from\n  // `lView[rootIdx]` if we have projection.\n  //  - null we don't have a parent (as can be the case in when we are inserting into a root of\n  //    LView which has no parent.)\n  //  - `RElement` The element representing the root after taking projection into account.\n  let rootRNode!: RElement | null;\n  for (let i = 0; i < mutableOpCodes.length; i++) {\n    const opCode = mutableOpCodes[i];\n    if (typeof opCode == 'string') {\n      const textNodeIndex = mutableOpCodes[++i] as number;\n      if (lView[textNodeIndex] === null) {\n        ngDevMode && ngDevMode.rendererCreateTextNode++;\n        ngDevMode && assertIndexInRange(lView, textNodeIndex);\n        lView[textNodeIndex] = _locateOrCreateNode(lView, textNodeIndex, opCode, Node.TEXT_NODE);\n      }\n    } else if (typeof opCode == 'number') {\n      switch (opCode & IcuCreateOpCode.MASK_INSTRUCTION) {\n        case IcuCreateOpCode.AppendChild:\n          const parentIdx = getParentFromIcuCreateOpCode(opCode);\n          if (rootIdx === null) {\n            // The first operation should save the `rootIdx` because the first operation\n            // must insert into the root. (Only subsequent operations can insert into a dynamic\n            // parent)\n            rootIdx = parentIdx;\n            rootRNode = renderer.parentNode(anchorRNode);\n          }\n          let insertInFrontOf: RNode | null;\n          let parentRNode: RElement | null;\n          if (parentIdx === rootIdx) {\n            insertInFrontOf = anchorRNode;\n            parentRNode = rootRNode;\n          } else {\n            insertInFrontOf = null;\n            parentRNode = unwrapRNode(lView[parentIdx]) as RElement;\n          }\n          // FIXME(misko): Refactor with `processI18nText`\n          if (parentRNode !== null) {\n            // This can happen if the `LView` we are adding to is not attached to a parent `LView`.\n            // In such a case there is no \"root\" we can attach to. This is fine, as we still need to\n            // create the elements. When the `LView` gets later added to a parent these \"root\" nodes\n            // get picked up and added.\n            ngDevMode && assertDomNode(parentRNode);\n            const refIdx = getRefFromIcuCreateOpCode(opCode);\n            ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref');\n            // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n\n            // which can't have components.\n            const child = lView[refIdx] as RElement;\n            ngDevMode && assertDomNode(child);\n            nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);\n            const tIcu = getTIcu(tView, refIdx);\n            if (tIcu !== null && typeof tIcu === 'object') {\n              // If we just added a comment node which has ICU then that ICU may have already been\n              // rendered and therefore we need to re-add it here.\n              ngDevMode && assertTIcu(tIcu);\n              const caseIndex = getCurrentICUCaseIndex(tIcu, lView);\n              if (caseIndex !== null) {\n                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);\n              }\n            }\n          }\n          break;\n        case IcuCreateOpCode.Attr:\n          const elementNodeIndex = opCode >>> IcuCreateOpCode.SHIFT_REF;\n          const attrName = mutableOpCodes[++i] as string;\n          const attrValue = mutableOpCodes[++i] as string;\n          // This code is used for ICU expressions only, since we don't support\n          // directives/components in ICUs, we don't need to worry about inputs here\n          setElementAttribute(\n            renderer,\n            getNativeByIndex(elementNodeIndex, lView) as RElement,\n            null,\n            null,\n            attrName,\n            attrValue,\n            null,\n          );\n          break;\n        default:\n          if (ngDevMode) {\n            throw new RuntimeError(\n              RuntimeErrorCode.INVALID_I18N_STRUCTURE,\n              `Unable to determine the type of mutate operation for \"${opCode}\"`,\n            );\n          }\n      }\n    } else {\n      switch (opCode) {\n        case ICU_MARKER:\n          const commentValue = mutableOpCodes[++i] as string;\n          const commentNodeIndex = mutableOpCodes[++i] as number;\n          if (lView[commentNodeIndex] === null) {\n            ngDevMode &&\n              assertEqual(\n                typeof commentValue,\n                'string',\n                `Expected \"${commentValue}\" to be a comment node value`,\n              );\n            ngDevMode && ngDevMode.rendererCreateComment++;\n            ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);\n            const commentRNode = (lView[commentNodeIndex] = _locateOrCreateNode(\n              lView,\n              commentNodeIndex,\n              commentValue,\n              Node.COMMENT_NODE,\n            ));\n            // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n            attachPatchData(commentRNode, lView);\n          }\n          break;\n        case ELEMENT_MARKER:\n          const tagName = mutableOpCodes[++i] as string;\n          const elementNodeIndex = mutableOpCodes[++i] as number;\n          if (lView[elementNodeIndex] === null) {\n            ngDevMode &&\n              assertEqual(\n                typeof tagName,\n                'string',\n                `Expected \"${tagName}\" to be an element node tag name`,\n              );\n\n            ngDevMode && ngDevMode.rendererCreateElement++;\n            ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);\n            const elementRNode = (lView[elementNodeIndex] = _locateOrCreateNode(\n              lView,\n              elementNodeIndex,\n              tagName,\n              Node.ELEMENT_NODE,\n            ));\n            // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n            attachPatchData(elementRNode, lView);\n          }\n          break;\n        default:\n          ngDevMode &&\n            throwError(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n      }\n    }\n  }\n}\n\n/**\n * Apply `I18nUpdateOpCodes` OpCodes\n *\n * @param tView Current `TView`\n * @param lView Current `LView`\n * @param updateOpCodes OpCodes to process\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from\n *     `bindingsStartIndex`)\n */\nexport function applyUpdateOpCodes(\n  tView: TView,\n  lView: LView,\n  updateOpCodes: I18nUpdateOpCodes,\n  bindingsStartIndex: number,\n  changeMask: number,\n) {\n  for (let i = 0; i < updateOpCodes.length; i++) {\n    // bit code to check if we should apply the next update\n    const checkBit = updateOpCodes[i] as number;\n    // Number of opCodes to skip until next set of update codes\n    const skipCodes = updateOpCodes[++i] as number;\n    if (checkBit & changeMask) {\n      // The value has been updated since last checked\n      let value = '';\n      for (let j = i + 1; j <= i + skipCodes; j++) {\n        const opCode = updateOpCodes[j];\n        if (typeof opCode == 'string') {\n          value += opCode;\n        } else if (typeof opCode == 'number') {\n          if (opCode < 0) {\n            // Negative opCode represent `i18nExp` values offset.\n            value += renderStringify(lView[bindingsStartIndex - opCode]);\n          } else {\n            const nodeIndex = opCode >>> I18nUpdateOpCode.SHIFT_REF;\n            switch (opCode & I18nUpdateOpCode.MASK_OPCODE) {\n              case I18nUpdateOpCode.Attr:\n                const propName = updateOpCodes[++j] as string;\n                const sanitizeFn = updateOpCodes[++j] as SanitizerFn | null;\n                const tNodeOrTagName = tView.data[nodeIndex] as TNode | string;\n                ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');\n                if (typeof tNodeOrTagName === 'string') {\n                  // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does\n                  // not have TNode), in which case we know that there are no directives, and hence\n                  // we use attribute setting.\n                  setElementAttribute(\n                    lView[RENDERER],\n                    lView[nodeIndex],\n                    null,\n                    tNodeOrTagName,\n                    propName,\n                    value,\n                    sanitizeFn,\n                  );\n                } else {\n                  elementPropertyInternal(\n                    tView,\n                    tNodeOrTagName,\n                    lView,\n                    propName,\n                    value,\n                    lView[RENDERER],\n                    sanitizeFn,\n                    false,\n                  );\n                }\n                break;\n              case I18nUpdateOpCode.Text:\n                const rText = lView[nodeIndex] as RText | null;\n                rText !== null && updateTextNode(lView[RENDERER], rText, value);\n                break;\n              case I18nUpdateOpCode.IcuSwitch:\n                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex)!, lView, value);\n                break;\n              case I18nUpdateOpCode.IcuUpdate:\n                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex)!, bindingsStartIndex, lView);\n                break;\n            }\n          }\n        }\n      }\n    } else {\n      const opCode = updateOpCodes[i + 1] as number;\n      if (opCode > 0 && (opCode & I18nUpdateOpCode.MASK_OPCODE) === I18nUpdateOpCode.IcuUpdate) {\n        // Special case for the `icuUpdateCase`. It could be that the mask did not match, but\n        // we still need to execute `icuUpdateCase` because the case has changed recently due to\n        // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in\n        // pairs.)\n        const nodeIndex = opCode >>> I18nUpdateOpCode.SHIFT_REF;\n        const tIcu = getTIcu(tView, nodeIndex)!;\n        const currentIndex = lView[tIcu.currentCaseLViewIndex];\n        if (currentIndex < 0) {\n          applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);\n        }\n      }\n    }\n    i += skipCodes;\n  }\n}\n\n/**\n * Apply OpCodes associated with updating an existing ICU.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param lView Current `LView`\n */\nfunction applyIcuUpdateCase(tView: TView, tIcu: TIcu, bindingsStartIndex: number, lView: LView) {\n  ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);\n  let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];\n  if (activeCaseIndex !== null) {\n    let mask = changeMask;\n    if (activeCaseIndex < 0) {\n      // Clear the flag.\n      // Negative number means that the ICU was freshly created and we need to force the update.\n      activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;\n      // -1 is same as all bits on, which simulates creation since it marks all bits dirty\n      mask = -1;\n    }\n    applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);\n  }\n}\n\n/**\n * Apply OpCodes associated with switching a case on ICU.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n * @param value Value of the case to update to.\n */\nfunction applyIcuSwitchCase(tView: TView, tIcu: TIcu, lView: LView, value: string) {\n  // Rebuild a new case for this ICU\n  const caseIndex = getCaseIndex(tIcu, value);\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n  if (activeCaseIndex !== caseIndex) {\n    applyIcuSwitchCaseRemove(tView, tIcu, lView);\n    lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;\n    if (caseIndex !== null) {\n      // Add the nodes for the new case\n      const anchorRNode = lView[tIcu.anchorIdx];\n      if (anchorRNode) {\n        ngDevMode && assertDomNode(anchorRNode);\n        applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);\n      }\n      claimDehydratedIcuCase(lView, tIcu.anchorIdx, caseIndex);\n    }\n  }\n}\n\n/**\n * Apply OpCodes associated with tearing ICU case.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n */\nfunction applyIcuSwitchCaseRemove(tView: TView, tIcu: TIcu, lView: LView) {\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n  if (activeCaseIndex !== null) {\n    const removeCodes = tIcu.remove[activeCaseIndex];\n    for (let i = 0; i < removeCodes.length; i++) {\n      const nodeOrIcuIndex = removeCodes[i] as number;\n      if (nodeOrIcuIndex > 0) {\n        // Positive numbers are `RNode`s.\n        const rNode = getNativeByIndex(nodeOrIcuIndex, lView);\n        rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);\n      } else {\n        // Negative numbers are ICUs\n        applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex)!, lView);\n      }\n    }\n  }\n}\n\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param icuExpression\n * @param bindingValue The value of the main binding used by this ICU expression\n */\nfunction getCaseIndex(icuExpression: TIcu, bindingValue: string): number | null {\n  let index = icuExpression.cases.indexOf(bindingValue);\n  if (index === -1) {\n    switch (icuExpression.type) {\n      case IcuType.plural: {\n        const resolvedCase = getPluralCase(bindingValue, getLocaleId());\n        index = icuExpression.cases.indexOf(resolvedCase);\n        if (index === -1 && resolvedCase !== 'other') {\n          index = icuExpression.cases.indexOf('other');\n        }\n        break;\n      }\n      case IcuType.select: {\n        index = icuExpression.cases.indexOf('other');\n        break;\n      }\n    }\n  }\n  return index === -1 ? null : index;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport '../../util/ng_dev_mode';\nimport '../../util/ng_i18n_closure_mode';\n\nimport {XSS_SECURITY_URL} from '../../error_details_base_url';\nimport {\n  getTemplateContent,\n  URI_ATTRS,\n  VALID_ATTRS,\n  VALID_ELEMENTS,\n} from '../../sanitization/html_sanitizer';\nimport {getInertBodyHelper} from '../../sanitization/inert_body';\nimport {_sanitizeUrl} from '../../sanitization/url_sanitizer';\nimport {\n  assertDefined,\n  assertEqual,\n  assertGreaterThanOrEqual,\n  assertOneOf,\n  assertString,\n} from '../../util/assert';\nimport {CharCode} from '../../util/char_code';\nimport {loadIcuContainerVisitor} from '../instructions/i18n_icu_container_visitor';\n\nimport {getDocument} from '../interfaces/document';\nimport {\n  ELEMENT_MARKER,\n  I18nCreateOpCode,\n  I18nCreateOpCodes,\n  I18nElementNode,\n  I18nNode,\n  I18nNodeKind,\n  I18nPlaceholderNode,\n  I18nPlaceholderType,\n  I18nRemoveOpCodes,\n  I18nUpdateOpCode,\n  I18nUpdateOpCodes,\n  ICU_MARKER,\n  IcuCreateOpCode,\n  IcuCreateOpCodes,\n  IcuExpression,\n  IcuType,\n  TI18n,\n  TIcu,\n} from '../interfaces/i18n';\nimport {TNode, TNodeType} from '../interfaces/node';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {HEADER_OFFSET, LView, TView} from '../interfaces/view';\nimport {getCurrentParentTNode, getCurrentTNode, setCurrentTNode} from '../state';\n\nimport {\n  i18nCreateOpCodesToString,\n  i18nRemoveOpCodesToString,\n  i18nUpdateOpCodesToString,\n  icuCreateOpCodesToString,\n} from './i18n_debug';\nimport {addTNodeAndUpdateInsertBeforeIndex} from './i18n_insert_before_index';\nimport {ensureIcuContainerVisitorLoaded} from './i18n_tree_shaking';\nimport {\n  createTNodePlaceholder,\n  icuCreateOpCode,\n  isRootTemplateMessage,\n  setTIcu,\n  setTNodeInsertBeforeIndex,\n} from './i18n_util';\nimport {createTNodeAtIndex} from '../tnode_manipulation';\nimport {allocExpando} from '../view/construction';\n\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\nconst NESTED_ICU = /�(\\d+)�/;\nconst ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\n\nconst MARKER = `�`;\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\n\n/**\n * Angular uses the special entity &ngsp; as a placeholder for non-removable space.\n * It's replaced by the 0xE500 PUA (Private Use Areas) unicode character and later on replaced by a\n * space.\n * We are re-implementing the same idea since translations might contain this special character.\n */\nconst NGSP_UNICODE_REGEXP = /\\uE500/g;\nfunction replaceNgsp(value: string): string {\n  return value.replace(NGSP_UNICODE_REGEXP, ' ');\n}\n\n/**\n * Patch a `debug` property getter on top of the existing object.\n *\n * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`\n *\n * @param obj Object to patch\n * @param debugGetter Getter returning a value to patch\n */\nfunction attachDebugGetter<T>(obj: T, debugGetter: (this: T) => any): void {\n  if (ngDevMode) {\n    Object.defineProperty(obj, 'debug', {get: debugGetter, enumerable: false});\n  } else {\n    throw new Error(\n      'This method should be guarded with `ngDevMode` so that it can be tree shaken in production!',\n    );\n  }\n}\n\n/**\n * Create dynamic nodes from i18n translation block.\n *\n * - Text nodes are created synchronously\n * - TNodes are linked into tree lazily\n *\n * @param tView Current `TView`\n * @parentTNodeIndex index to the parent TNode of this i18n block\n * @param lView Current `LView`\n * @param index Index of `ɵɵi18nStart` instruction.\n * @param message Message to translate.\n * @param subTemplateIndex Index into the sub template of message translation. (ie in case of\n *     `ngIf`) (-1 otherwise)\n */\nexport function i18nStartFirstCreatePass(\n  tView: TView,\n  parentTNodeIndex: number,\n  lView: LView,\n  index: number,\n  message: string,\n  subTemplateIndex: number,\n) {\n  const rootTNode = getCurrentParentTNode();\n  const createOpCodes: I18nCreateOpCodes = [] as any;\n  const updateOpCodes: I18nUpdateOpCodes = [] as any;\n  const existingTNodeStack: TNode[][] = [[]];\n  const astStack: Array<Array<I18nNode>> = [[]];\n  if (ngDevMode) {\n    attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n\n  message = getTranslationForTemplate(message, subTemplateIndex);\n  const msgParts = replaceNgsp(message).split(PH_REGEXP);\n  for (let i = 0; i < msgParts.length; i++) {\n    let value = msgParts[i];\n    if ((i & 1) === 0) {\n      // Even indexes are text (including bindings & ICU expressions)\n      const parts = i18nParseTextIntoPartsAndICU(value);\n      for (let j = 0; j < parts.length; j++) {\n        let part = parts[j];\n        if ((j & 1) === 0) {\n          // `j` is odd therefore `part` is string\n          const text = part as string;\n          ngDevMode && assertString(text, 'Parsed ICU part should be string');\n          if (text !== '') {\n            i18nStartFirstCreatePassProcessTextNode(\n              astStack[0],\n              tView,\n              rootTNode,\n              existingTNodeStack[0],\n              createOpCodes,\n              updateOpCodes,\n              lView,\n              text,\n            );\n          }\n        } else {\n          // `j` is Even therefor `part` is an `ICUExpression`\n          const icuExpression: IcuExpression = part as IcuExpression;\n          // Verify that ICU expression has the right shape. Translations might contain invalid\n          // constructions (while original messages were correct), so ICU parsing at runtime may\n          // not succeed (thus `icuExpression` remains a string).\n          // Note: we intentionally retain the error here by not using `ngDevMode`, because\n          // the value can change based on the locale and users aren't guaranteed to hit\n          // an invalid string while they're developing.\n          if (typeof icuExpression !== 'object') {\n            throw new Error(`Unable to parse ICU expression in \"${message}\" message.`);\n          }\n          const icuContainerTNode = createTNodeAndAddOpCode(\n            tView,\n            rootTNode,\n            existingTNodeStack[0],\n            lView,\n            createOpCodes,\n            ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : '',\n            true,\n          );\n          const icuNodeIndex = icuContainerTNode.index;\n          ngDevMode &&\n            assertGreaterThanOrEqual(\n              icuNodeIndex,\n              HEADER_OFFSET,\n              'Index must be in absolute LView offset',\n            );\n          icuStart(\n            astStack[0],\n            tView,\n            lView,\n            updateOpCodes,\n            parentTNodeIndex,\n            icuExpression,\n            icuNodeIndex,\n          );\n        }\n      }\n    } else {\n      // Odd indexes are placeholders (elements and sub-templates)\n      // At this point value is something like: '/#1:2' (originally coming from '�/#1:2�')\n      const isClosing = value.charCodeAt(0) === CharCode.SLASH;\n      const type = value.charCodeAt(isClosing ? 1 : 0);\n      ngDevMode && assertOneOf(type, CharCode.STAR, CharCode.HASH);\n      const index = HEADER_OFFSET + Number.parseInt(value.substring(isClosing ? 2 : 1));\n      if (isClosing) {\n        existingTNodeStack.shift();\n        astStack.shift();\n        setCurrentTNode(getCurrentParentTNode()!, false);\n      } else {\n        const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index);\n        existingTNodeStack.unshift([]);\n        setCurrentTNode(tNode, true);\n\n        const placeholderNode: I18nPlaceholderNode = {\n          kind: I18nNodeKind.PLACEHOLDER,\n          index,\n          children: [],\n          type:\n            type === CharCode.HASH ? I18nPlaceholderType.ELEMENT : I18nPlaceholderType.SUBTEMPLATE,\n        };\n        astStack[0].push(placeholderNode);\n        astStack.unshift(placeholderNode.children);\n      }\n    }\n  }\n\n  tView.data[index] = <TI18n>{\n    create: createOpCodes,\n    update: updateOpCodes,\n    ast: astStack[0],\n    parentTNodeIndex,\n  };\n}\n\n/**\n * Allocate space in i18n Range add create OpCode instruction to create a text or comment node.\n *\n * @param tView Current `TView` needed to allocate space in i18n range.\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be\n *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param lView Current `LView` needed to allocate space in i18n range.\n * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.\n * @param text Text to be added when the `Text` or `Comment` node will be created.\n * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.\n */\nfunction createTNodeAndAddOpCode(\n  tView: TView,\n  rootTNode: TNode | null,\n  existingTNodes: TNode[],\n  lView: LView,\n  createOpCodes: I18nCreateOpCodes,\n  text: string | null,\n  isICU: boolean,\n): TNode {\n  const i18nNodeIdx = allocExpando(tView, lView, 1, null);\n  let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;\n  let parentTNode = getCurrentParentTNode();\n\n  if (rootTNode === parentTNode) {\n    // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.\n    // (there is no parent), but in some circumstances (because we are inconsistent about how we set\n    // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.\n    parentTNode = null;\n  }\n  if (parentTNode === null) {\n    // If we don't have a parent that means that we can eagerly add nodes.\n    // If we have a parent than these nodes can't be added now (as the parent has not been created\n    // yet) and instead the `parentTNode` is responsible for adding it. See\n    // `TNode.insertBeforeIndex`\n    opCode |= I18nCreateOpCode.APPEND_EAGERLY;\n  }\n  if (isICU) {\n    opCode |= I18nCreateOpCode.COMMENT;\n    ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);\n  }\n  createOpCodes.push(opCode, text === null ? '' : text);\n  // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the\n  // bindings are.\n  const tNode = createTNodeAtIndex(\n    tView,\n    i18nNodeIdx,\n    isICU ? TNodeType.Icu : TNodeType.Text,\n    text === null ? (ngDevMode ? '{{?}}' : '') : text,\n    null,\n  );\n  addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);\n  const tNodeIdx = tNode.index;\n  setCurrentTNode(tNode, false /* Text nodes are self closing */);\n  if (parentTNode !== null && rootTNode !== parentTNode) {\n    // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)\n    // We have to make sure to add ourselves to the parent.\n    setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);\n  }\n  return tNode;\n}\n\n/**\n * Processes text node in i18n block.\n *\n * Text nodes can have:\n * - Create instruction in `createOpCodes` for creating the text node.\n * - Allocate spec for text node in i18n range of `LView`\n * - If contains binding:\n *    - bindings => allocate space in i18n range of `LView` to store the binding value.\n *    - populate `updateOpCodes` with update instructions.\n *\n * @param tView Current `TView`\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will\n *     be added as part of the `i18nStart` instruction or as part of the\n *     `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param createOpCodes Location where the creation OpCodes will be stored.\n * @param lView Current `LView`\n * @param text The translated text (which may contain binding)\n */\nfunction i18nStartFirstCreatePassProcessTextNode(\n  ast: I18nNode[],\n  tView: TView,\n  rootTNode: TNode | null,\n  existingTNodes: TNode[],\n  createOpCodes: I18nCreateOpCodes,\n  updateOpCodes: I18nUpdateOpCodes,\n  lView: LView,\n  text: string,\n): void {\n  const hasBinding = text.match(BINDING_REGEXP);\n  const tNode = createTNodeAndAddOpCode(\n    tView,\n    rootTNode,\n    existingTNodes,\n    lView,\n    createOpCodes,\n    hasBinding ? null : text,\n    false,\n  );\n  const index = tNode.index;\n  if (hasBinding) {\n    generateBindingUpdateOpCodes(updateOpCodes, text, index, null, 0, null);\n  }\n  ast.push({kind: I18nNodeKind.TEXT, index});\n}\n\n/**\n * See `i18nAttributes` above.\n */\nexport function i18nAttributesFirstPass(tView: TView, index: number, values: string[]) {\n  const previousElement = getCurrentTNode()!;\n  const previousElementIndex = previousElement.index;\n  const updateOpCodes: I18nUpdateOpCodes = [] as any;\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  if (tView.firstCreatePass && tView.data[index] === null) {\n    for (let i = 0; i < values.length; i += 2) {\n      const attrName = values[i];\n      const message = values[i + 1];\n\n      if (message !== '') {\n        // Check if attribute value contains an ICU and throw an error if that's the case.\n        // ICUs in element attributes are not supported.\n        // Note: we intentionally retain the error here by not using `ngDevMode`, because\n        // the `value` can change based on the locale and users aren't guaranteed to hit\n        // an invalid string while they're developing.\n        if (ICU_REGEXP.test(message)) {\n          throw new Error(\n            `ICU expressions are not supported in attributes. Message: \"${message}\".`,\n          );\n        }\n\n        // i18n attributes that hit this code path are guaranteed to have bindings, because\n        // the compiler treats static i18n attributes as regular attribute bindings.\n        // Since this may not be the first i18n attribute on this element we need to pass in how\n        // many previous bindings there have already been.\n        generateBindingUpdateOpCodes(\n          updateOpCodes,\n          message,\n          previousElementIndex,\n          attrName,\n          countBindings(updateOpCodes),\n          null,\n        );\n      }\n    }\n    tView.data[index] = updateOpCodes;\n  }\n}\n\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param updateOpCodes Place where the update opcodes will be stored.\n * @param str The string containing the bindings.\n * @param destinationNode Index of the destination node which will receive the binding.\n * @param attrName Name of the attribute, if the string belongs to an attribute.\n * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @param bindingStart The lView index of the next expression that can be bound via an opCode.\n * @returns The mask value for these bindings\n */\nfunction generateBindingUpdateOpCodes(\n  updateOpCodes: I18nUpdateOpCodes,\n  str: string,\n  destinationNode: number,\n  attrName: string | null,\n  bindingStart: number,\n  sanitizeFn: SanitizerFn | null,\n): number {\n  ngDevMode &&\n    assertGreaterThanOrEqual(\n      destinationNode,\n      HEADER_OFFSET,\n      'Index must be in absolute LView offset',\n    );\n  const maskIndex = updateOpCodes.length; // Location of mask\n  const sizeIndex = maskIndex + 1; // location of size for skipping\n  updateOpCodes.push(null, null); // Alloc space for mask and size\n  const startIndex = maskIndex + 2; // location of first allocation.\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  const textParts = str.split(BINDING_REGEXP);\n  let mask = 0;\n\n  for (let j = 0; j < textParts.length; j++) {\n    const textValue = textParts[j];\n\n    if (j & 1) {\n      // Odd indexes are bindings\n      const bindingIndex = bindingStart + parseInt(textValue, 10);\n      updateOpCodes.push(-1 - bindingIndex);\n      mask = mask | toMaskBit(bindingIndex);\n    } else if (textValue !== '') {\n      // Even indexes are text\n      updateOpCodes.push(textValue);\n    }\n  }\n\n  updateOpCodes.push(\n    (destinationNode << I18nUpdateOpCode.SHIFT_REF) |\n      (attrName ? I18nUpdateOpCode.Attr : I18nUpdateOpCode.Text),\n  );\n  if (attrName) {\n    updateOpCodes.push(attrName, sanitizeFn);\n  }\n  updateOpCodes[maskIndex] = mask;\n  updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;\n  return mask;\n}\n\n/**\n * Count the number of bindings in the given `opCodes`.\n *\n * It could be possible to speed this up, by passing the number of bindings found back from\n * `generateBindingUpdateOpCodes()` to `i18nAttributesFirstPass()` but this would then require more\n * complexity in the code and/or transient objects to be created.\n *\n * Since this function is only called once when the template is instantiated, is trivial in the\n * first instance (since `opCodes` will be an empty array), and it is not common for elements to\n * contain multiple i18n bound attributes, it seems like this is a reasonable compromise.\n */\nfunction countBindings(opCodes: I18nUpdateOpCodes): number {\n  let count = 0;\n  for (let i = 0; i < opCodes.length; i++) {\n    const opCode = opCodes[i];\n    // Bindings are negative numbers.\n    if (typeof opCode === 'number' && opCode < 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to\n * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner\n * case is that we will execute binding code more often than necessary. (penalty of performance)\n */\nfunction toMaskBit(bindingIndex: number): number {\n  return 1 << Math.min(bindingIndex, 31);\n}\n\n/**\n * Removes everything inside the sub-templates of a message.\n */\nfunction removeInnerTemplateTranslation(message: string): string {\n  let match;\n  let res = '';\n  let index = 0;\n  let inTemplate = false;\n  let tagMatched;\n\n  while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n    if (!inTemplate) {\n      res += message.substring(index, match.index + match[0].length);\n      tagMatched = match[1];\n      inTemplate = true;\n    } else {\n      if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n        index = match.index;\n        inTemplate = false;\n      }\n    }\n  }\n\n  ngDevMode &&\n    assertEqual(\n      inTemplate,\n      false,\n      `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`,\n    );\n\n  res += message.slice(index);\n  return res;\n}\n\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A\n * translated message can span multiple templates.\n *\n * Example:\n * ```html\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param message The message to crop\n * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n */\nexport function getTranslationForTemplate(message: string, subTemplateIndex: number) {\n  if (isRootTemplateMessage(subTemplateIndex)) {\n    // We want the root template message, ignore all sub-templates\n    return removeInnerTemplateTranslation(message);\n  } else {\n    // We want a specific sub-template\n    const start =\n      message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n    const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n    return removeInnerTemplateTranslation(message.substring(start, end));\n  }\n}\n\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param icuExpression\n * @param index Index where the anchor is stored and an optional `TIcuContainerNode`\n *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.\n *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)\n */\nfunction icuStart(\n  ast: I18nNode[],\n  tView: TView,\n  lView: LView,\n  updateOpCodes: I18nUpdateOpCodes,\n  parentIdx: number,\n  icuExpression: IcuExpression,\n  anchorIdx: number,\n) {\n  ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');\n  let bindingMask = 0;\n  const tIcu: TIcu = {\n    type: icuExpression.type,\n    currentCaseLViewIndex: allocExpando(tView, lView, 1, null),\n    anchorIdx,\n    cases: [],\n    create: [],\n    remove: [],\n    update: [],\n  };\n  addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);\n  setTIcu(tView, anchorIdx, tIcu);\n  const values = icuExpression.values;\n  const cases: I18nNode[][] = [];\n  for (let i = 0; i < values.length; i++) {\n    // Each value is an array of strings & other ICU expressions\n    const valueArr = values[i];\n    const nestedIcus: IcuExpression[] = [];\n    for (let j = 0; j < valueArr.length; j++) {\n      const value = valueArr[j];\n      if (typeof value !== 'string') {\n        // It is an nested ICU expression\n        const icuIndex = nestedIcus.push(value as IcuExpression) - 1;\n        // Replace nested ICU expression by a comment node\n        valueArr[j] = `<!--�${icuIndex}�-->`;\n      }\n    }\n    const caseAst: I18nNode[] = [];\n    cases.push(caseAst);\n    bindingMask =\n      parseIcuCase(\n        caseAst,\n        tView,\n        tIcu,\n        lView,\n        updateOpCodes,\n        parentIdx,\n        icuExpression.cases[i],\n        valueArr.join(''),\n        nestedIcus,\n      ) | bindingMask;\n  }\n  if (bindingMask) {\n    addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);\n  }\n  ast.push({\n    kind: I18nNodeKind.ICU,\n    index: anchorIdx,\n    cases,\n    currentCaseLViewIndex: tIcu.currentCaseLViewIndex,\n  });\n}\n\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param pattern Text containing an ICU expression that needs to be parsed.\n *\n */\nfunction parseICUBlock(pattern: string): IcuExpression {\n  const cases = [];\n  const values: (string | IcuExpression)[][] = [];\n  let icuType = IcuType.plural;\n  let mainBinding = 0;\n  pattern = pattern.replace(\n    ICU_BLOCK_REGEXP,\n    function (str: string, binding: string, type: string) {\n      if (type === 'select') {\n        icuType = IcuType.select;\n      } else {\n        icuType = IcuType.plural;\n      }\n      mainBinding = parseInt(binding.slice(1), 10);\n      return '';\n    },\n  );\n\n  const parts = i18nParseTextIntoPartsAndICU(pattern) as string[];\n  // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n  for (let pos = 0; pos < parts.length; ) {\n    let key = parts[pos++].trim();\n    if (icuType === IcuType.plural) {\n      // Key can be \"=x\", we just want \"x\"\n      key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n    }\n    if (key.length) {\n      cases.push(key);\n    }\n\n    const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]) as string[];\n    if (cases.length > values.length) {\n      values.push(blocks);\n    }\n  }\n\n  // TODO(ocombe): support ICU expressions in attributes, see #21615\n  return {type: icuType, mainBinding: mainBinding, cases, values};\n}\n\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression\n * into keys and cases. Original code from closure library, modified for Angular.\n *\n * @param pattern (sub)Pattern to be broken.\n * @returns An `Array<string|IcuExpression>` where:\n *   - odd positions: `string` => text between ICU expressions\n *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.\n */\nfunction i18nParseTextIntoPartsAndICU(pattern: string): (string | IcuExpression)[] {\n  if (!pattern) {\n    return [];\n  }\n\n  let prevPos = 0;\n  const braceStack = [];\n  const results: (string | IcuExpression)[] = [];\n  const braces = /[{}]/g;\n  // lastIndex doesn't get set to 0 so we have to.\n  braces.lastIndex = 0;\n\n  let match;\n  while ((match = braces.exec(pattern))) {\n    const pos = match.index;\n    if (match[0] == '}') {\n      braceStack.pop();\n\n      if (braceStack.length == 0) {\n        // End of the block.\n        const block = pattern.substring(prevPos, pos);\n        if (ICU_BLOCK_REGEXP.test(block)) {\n          results.push(parseICUBlock(block));\n        } else {\n          results.push(block);\n        }\n\n        prevPos = pos + 1;\n      }\n    } else {\n      if (braceStack.length == 0) {\n        const substring = pattern.substring(prevPos, pos);\n        results.push(substring);\n        prevPos = pos + 1;\n      }\n      braceStack.push('{');\n    }\n  }\n\n  const substring = pattern.substring(prevPos);\n  results.push(substring);\n  return results;\n}\n\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n */\nfunction parseIcuCase(\n  ast: I18nNode[],\n  tView: TView,\n  tIcu: TIcu,\n  lView: LView,\n  updateOpCodes: I18nUpdateOpCodes,\n  parentIdx: number,\n  caseName: string,\n  unsafeCaseHtml: string,\n  nestedIcus: IcuExpression[],\n): number {\n  const create: IcuCreateOpCodes = [] as any;\n  const remove: I18nRemoveOpCodes = [] as any;\n  const update: I18nUpdateOpCodes = [] as any;\n  if (ngDevMode) {\n    attachDebugGetter(create, icuCreateOpCodesToString);\n    attachDebugGetter(remove, i18nRemoveOpCodesToString);\n    attachDebugGetter(update, i18nUpdateOpCodesToString);\n  }\n  tIcu.cases.push(caseName);\n  tIcu.create.push(create);\n  tIcu.remove.push(remove);\n  tIcu.update.push(update);\n\n  const inertBodyHelper = getInertBodyHelper(getDocument());\n  const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);\n  ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');\n  const inertRootNode = (getTemplateContent(inertBodyElement!) as Element) || inertBodyElement;\n  if (inertRootNode) {\n    return walkIcuTree(\n      ast,\n      tView,\n      tIcu,\n      lView,\n      updateOpCodes,\n      create,\n      remove,\n      update,\n      inertRootNode,\n      parentIdx,\n      nestedIcus,\n      0,\n    );\n  } else {\n    return 0;\n  }\n}\n\nfunction walkIcuTree(\n  ast: I18nNode[],\n  tView: TView,\n  tIcu: TIcu,\n  lView: LView,\n  sharedUpdateOpCodes: I18nUpdateOpCodes,\n  create: IcuCreateOpCodes,\n  remove: I18nRemoveOpCodes,\n  update: I18nUpdateOpCodes,\n  parentNode: Element,\n  parentIdx: number,\n  nestedIcus: IcuExpression[],\n  depth: number,\n): number {\n  let bindingMask = 0;\n  let currentNode = parentNode.firstChild;\n  while (currentNode) {\n    const newIndex = allocExpando(tView, lView, 1, null);\n    switch (currentNode.nodeType) {\n      case Node.ELEMENT_NODE:\n        const element = currentNode as Element;\n        const tagName = element.tagName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName)) {\n          addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);\n          tView.data[newIndex] = tagName;\n          const elAttrs = element.attributes;\n          for (let i = 0; i < elAttrs.length; i++) {\n            const attr = elAttrs.item(i)!;\n            const lowerAttrName = attr.name.toLowerCase();\n            const hasBinding = !!attr.value.match(BINDING_REGEXP);\n            // we assume the input string is safe, unless it's using a binding\n            if (hasBinding) {\n              if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                if (URI_ATTRS[lowerAttrName]) {\n                  generateBindingUpdateOpCodes(\n                    update,\n                    attr.value,\n                    newIndex,\n                    attr.name,\n                    0,\n                    _sanitizeUrl,\n                  );\n                } else {\n                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);\n                }\n              } else {\n                ngDevMode &&\n                  console.warn(\n                    `WARNING: ignoring unsafe attribute value ` +\n                      `${lowerAttrName} on element ${tagName} ` +\n                      `(see ${XSS_SECURITY_URL})`,\n                  );\n              }\n            } else {\n              addCreateAttribute(create, newIndex, attr);\n            }\n          }\n          const elementNode: I18nElementNode = {\n            kind: I18nNodeKind.ELEMENT,\n            index: newIndex,\n            children: [],\n          };\n          ast.push(elementNode);\n          // Parse the children of this node (if any)\n          bindingMask =\n            walkIcuTree(\n              elementNode.children,\n              tView,\n              tIcu,\n              lView,\n              sharedUpdateOpCodes,\n              create,\n              remove,\n              update,\n              currentNode as Element,\n              newIndex,\n              nestedIcus,\n              depth + 1,\n            ) | bindingMask;\n          addRemoveNode(remove, newIndex, depth);\n        }\n        break;\n      case Node.TEXT_NODE:\n        const value = currentNode.textContent || '';\n        const hasBinding = value.match(BINDING_REGEXP);\n        addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);\n        addRemoveNode(remove, newIndex, depth);\n        if (hasBinding) {\n          bindingMask =\n            generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;\n        }\n        ast.push({\n          kind: I18nNodeKind.TEXT,\n          index: newIndex,\n        });\n        break;\n      case Node.COMMENT_NODE:\n        // Check if the comment node is a placeholder for a nested ICU\n        const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');\n        if (isNestedIcu) {\n          const nestedIcuIndex = parseInt(isNestedIcu[1], 10);\n          const icuExpression: IcuExpression = nestedIcus[nestedIcuIndex];\n          // Create the comment node that will anchor the ICU expression\n          addCreateNodeAndAppend(\n            create,\n            ICU_MARKER,\n            ngDevMode ? `nested ICU ${nestedIcuIndex}` : '',\n            parentIdx,\n            newIndex,\n          );\n          icuStart(ast, tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);\n          addRemoveNestedIcu(remove, newIndex, depth);\n        }\n        break;\n    }\n    currentNode = currentNode.nextSibling;\n  }\n  return bindingMask;\n}\n\nfunction addRemoveNode(remove: I18nRemoveOpCodes, index: number, depth: number) {\n  if (depth === 0) {\n    remove.push(index);\n  }\n}\n\nfunction addRemoveNestedIcu(remove: I18nRemoveOpCodes, index: number, depth: number) {\n  if (depth === 0) {\n    remove.push(~index); // remove ICU at `index`\n    remove.push(index); // remove ICU comment at `index`\n  }\n}\n\nfunction addUpdateIcuSwitch(\n  update: I18nUpdateOpCodes,\n  icuExpression: IcuExpression,\n  index: number,\n) {\n  update.push(\n    toMaskBit(icuExpression.mainBinding),\n    2,\n    -1 - icuExpression.mainBinding,\n    (index << I18nUpdateOpCode.SHIFT_REF) | I18nUpdateOpCode.IcuSwitch,\n  );\n}\n\nfunction addUpdateIcuUpdate(update: I18nUpdateOpCodes, bindingMask: number, index: number) {\n  update.push(bindingMask, 1, (index << I18nUpdateOpCode.SHIFT_REF) | I18nUpdateOpCode.IcuUpdate);\n}\n\nfunction addCreateNodeAndAppend(\n  create: IcuCreateOpCodes,\n  marker: null | ICU_MARKER | ELEMENT_MARKER,\n  text: string,\n  appendToParentIdx: number,\n  createAtIdx: number,\n) {\n  if (marker !== null) {\n    create.push(marker);\n  }\n  create.push(\n    text,\n    createAtIdx,\n    icuCreateOpCode(IcuCreateOpCode.AppendChild, appendToParentIdx, createAtIdx),\n  );\n}\n\nfunction addCreateAttribute(create: IcuCreateOpCodes, newIndex: number, attr: Attr) {\n  create.push(\n    (newIndex << IcuCreateOpCode.SHIFT_REF) | IcuCreateOpCode.Attr,\n    attr.name,\n    attr.value,\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n// i18nPostprocess consts\nconst ROOT_TEMPLATE_ID = 0;\nconst PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\nconst PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\nconst PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\nconst PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;\nconst PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\nconst PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\nconst PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n\n// Parsed placeholder structure used in postprocessing (within `i18nPostprocess` function)\n// Contains the following fields: [templateId, isCloseTemplateTag, placeholder]\ntype PostprocessPlaceholder = [number, boolean, string];\n\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nexport function i18nPostprocess(\n  message: string,\n  replacements: {[key: string]: string | string[]} = {},\n): string {\n  /**\n   * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\n   *\n   * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n   * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\n   * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\n   * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\n   * front of �#6�. The post processing step restores the right order by keeping track of the\n   * template id stack and looks for placeholders that belong to the currently active template.\n   */\n  let result: string = message;\n  if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n    const matches: {[key: string]: PostprocessPlaceholder[]} = {};\n    const templateIdsStack: number[] = [ROOT_TEMPLATE_ID];\n    result = result.replace(PP_PLACEHOLDERS_REGEXP, (m: any, phs: string, tmpl: string): string => {\n      const content = phs || tmpl;\n      const placeholders: PostprocessPlaceholder[] = matches[content] || [];\n      if (!placeholders.length) {\n        content.split('|').forEach((placeholder: string) => {\n          const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n          const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n          const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n          placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n        });\n        matches[content] = placeholders;\n      }\n\n      if (!placeholders.length) {\n        throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n      }\n\n      const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];\n      let idx = 0;\n      // find placeholder index that matches current template id\n      for (let i = 0; i < placeholders.length; i++) {\n        if (placeholders[i][0] === currentTemplateId) {\n          idx = i;\n          break;\n        }\n      }\n      // update template id stack based on the current tag extracted\n      const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];\n      if (isCloseTemplateTag) {\n        templateIdsStack.pop();\n      } else if (currentTemplateId !== templateId) {\n        templateIdsStack.push(templateId);\n      }\n      // remove processed tag from the list\n      placeholders.splice(idx, 1);\n      return placeholder;\n    });\n  }\n\n  // return current result if no replacements specified\n  if (!Object.keys(replacements).length) {\n    return result;\n  }\n\n  /**\n   * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n   */\n  result = result.replace(PP_ICU_VARS_REGEXP, (match, start, key, _type, _idx, end): string => {\n    return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n  });\n\n  /**\n   * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n   */\n  result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match, key): string => {\n    return replacements.hasOwnProperty(key) ? (replacements[key] as string) : match;\n  });\n\n  /**\n   * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\n   * multiple ICUs have the same placeholder name\n   */\n  result = result.replace(PP_ICUS_REGEXP, (match, key): string => {\n    if (replacements.hasOwnProperty(key)) {\n      const list = replacements[key] as string[];\n      if (!list.length) {\n        throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n      }\n      return list.shift()!;\n    }\n    return match;\n  });\n\n  return result;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport '../../util/ng_dev_mode';\nimport '../../util/ng_i18n_closure_mode';\n\nimport {prepareI18nBlockForHydration} from '../../hydration/i18n';\nimport {assertDefined} from '../../util/assert';\nimport {bindingUpdated} from '../bindings';\nimport {applyCreateOpCodes, applyI18n, setMaskBit} from '../i18n/i18n_apply';\nimport {i18nAttributesFirstPass, i18nStartFirstCreatePass} from '../i18n/i18n_parse';\nimport {i18nPostprocess} from '../i18n/i18n_postprocess';\nimport {TI18n} from '../interfaces/i18n';\nimport {TElementNode, TNodeType} from '../interfaces/node';\nimport {\n  DECLARATION_COMPONENT_VIEW,\n  FLAGS,\n  HEADER_OFFSET,\n  LViewFlags,\n  T_HOST,\n  TViewType,\n} from '../interfaces/view';\nimport {getClosestRElement} from '../node_manipulation';\nimport {\n  getCurrentParentTNode,\n  getLView,\n  getTView,\n  nextBindingIndex,\n  setInI18nBlock,\n} from '../state';\nimport {getConstant} from '../util/view_utils';\n\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nexport function ɵɵi18nStart(\n  index: number,\n  messageIndex: number,\n  subTemplateIndex: number = -1,\n): void {\n  const tView = getTView();\n  const lView = getLView();\n  const adjustedIndex = HEADER_OFFSET + index;\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const message = getConstant<string>(tView.consts, messageIndex)!;\n  const parentTNode = getCurrentParentTNode() as TElementNode | null;\n  if (tView.firstCreatePass) {\n    i18nStartFirstCreatePass(\n      tView,\n      parentTNode === null ? 0 : parentTNode.index,\n      lView,\n      adjustedIndex,\n      message,\n      subTemplateIndex,\n    );\n  }\n\n  // Set a flag that this LView has i18n blocks.\n  // The flag is later used to determine whether this component should\n  // be hydrated (currently hydration is not supported for i18n blocks).\n  if (tView.type === TViewType.Embedded) {\n    // Annotate host component's LView (not embedded view's LView),\n    // since hydration can be skipped on per-component basis only.\n    const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n    componentLView[FLAGS] |= LViewFlags.HasI18n;\n  } else {\n    lView[FLAGS] |= LViewFlags.HasI18n;\n  }\n\n  const tI18n = tView.data[adjustedIndex] as TI18n;\n  const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;\n  const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);\n  // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.\n  // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.\n  const insertInFrontOf =\n    parentTNode && parentTNode.type & TNodeType.ElementContainer ? lView[parentTNode.index] : null;\n  prepareI18nBlockForHydration(lView, adjustedIndex, parentTNode, subTemplateIndex);\n  applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);\n  setInI18nBlock(true);\n}\n\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n *\n * @codeGenApi\n */\nexport function ɵɵi18nEnd(): void {\n  setInI18nBlock(false);\n}\n\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nexport function ɵɵi18n(index: number, messageIndex: number, subTemplateIndex?: number): void {\n  ɵɵi18nStart(index, messageIndex, subTemplateIndex);\n  ɵɵi18nEnd();\n}\n\n/**\n * Marks a list of attributes as translatable.\n *\n * @param index A unique index in the static block\n * @param values\n *\n * @codeGenApi\n */\nexport function ɵɵi18nAttributes(index: number, attrsIndex: number): void {\n  const tView = getTView();\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const attrs = getConstant<string[]>(tView.consts, attrsIndex)!;\n  i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);\n}\n\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @param value The binding's value\n * @returns This function returns itself so that it may be chained\n * (e.g. `i18nExp(ctx.name)(ctx.title)`)\n *\n * @codeGenApi\n */\nexport function ɵɵi18nExp<T>(value: T): typeof ɵɵi18nExp {\n  const lView = getLView();\n  setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));\n  return ɵɵi18nExp;\n}\n\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n *\n * @codeGenApi\n */\nexport function ɵɵi18nApply(index: number) {\n  applyI18n(getTView(), getLView(), index + HEADER_OFFSET);\n}\n\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nexport function ɵɵi18nPostprocess(\n  message: string,\n  replacements: {[key: string]: string | string[]} = {},\n): string {\n  return i18nPostprocess(message, replacements);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {setActiveConsumer} from '@angular/core/primitives/signals';\n\nimport {NotificationSource} from '../../change_detection/scheduling/zoneless_scheduling';\nimport {assertIndexInRange} from '../../util/assert';\nimport {TNode, TNodeType} from '../interfaces/node';\nimport {GlobalTargetResolver, Renderer} from '../interfaces/renderer';\nimport {RElement, RNode} from '../interfaces/renderer_dom';\nimport {isComponentHost, isDirectiveHost} from '../interfaces/type_checks';\nimport {CLEANUP, CONTEXT, LView, RENDERER, TView} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {profiler} from '../profiler';\nimport {ProfilerEvent} from '../profiler_types';\nimport {getCurrentDirectiveDef, getCurrentTNode, getLView, getTView} from '../state';\nimport {\n  getComponentLViewByIndex,\n  getNativeByTNode,\n  getOrCreateLViewCleanup,\n  getOrCreateTViewCleanup,\n  unwrapRNode,\n} from '../util/view_utils';\n\nimport {markViewDirty} from './mark_view_dirty';\nimport {handleError, loadComponentRenderer} from './shared';\nimport {DirectiveDef} from '../interfaces/definition';\n\n/**\n * Contains a reference to a function that disables event replay feature\n * for server-side rendered applications. This function is overridden with\n * an actual implementation when the event replay feature is enabled via\n * `withEventReplay()` call.\n */\nlet stashEventListener = (el: RNode, eventName: string, listenerFn: (e?: any) => any) => {};\n\nexport function setStashFn(fn: typeof stashEventListener) {\n  stashEventListener = fn;\n}\n\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener - this argument is a reminder\n *     from the Renderer3 infrastructure and should be removed from the instruction arguments\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nexport function ɵɵlistener(\n  eventName: string,\n  listenerFn: (e?: any) => any,\n  useCapture?: boolean,\n  eventTargetResolver?: GlobalTargetResolver,\n): typeof ɵɵlistener {\n  const lView = getLView<{} | null>();\n  const tView = getTView();\n  const tNode = getCurrentTNode()!;\n  listenerInternal(\n    tView,\n    lView,\n    lView[RENDERER],\n    tNode,\n    eventName,\n    listenerFn,\n    eventTargetResolver,\n  );\n  return ɵɵlistener;\n}\n\n/**\n * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\n * in the component's renderer. Normally all host listeners are evaluated with the\n * parent component's renderer, but, in the case of animation @triggers, they need\n * to be evaluated with the sub component's renderer (because that's where the\n * animation triggers are defined).\n *\n * Do not use this instruction as a replacement for `listener`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nexport function ɵɵsyntheticHostListener(\n  eventName: string,\n  listenerFn: (e?: any) => any,\n): typeof ɵɵsyntheticHostListener {\n  const tNode = getCurrentTNode()!;\n  const lView = getLView<{} | null>();\n  const tView = getTView();\n  const currentDef = getCurrentDirectiveDef(tView.data);\n  const renderer = loadComponentRenderer(currentDef, tNode, lView);\n  listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn);\n  return ɵɵsyntheticHostListener;\n}\n\n/**\n * A utility function that checks if a given element has already an event handler registered for an\n * event with a specified name. The TView.cleanup data structure is used to find out which events\n * are registered for a given element.\n */\nfunction findExistingListener(\n  tView: TView,\n  lView: LView,\n  eventName: string,\n  tNodeIdx: number,\n): ((e?: any) => any) | null {\n  const tCleanup = tView.cleanup;\n  if (tCleanup != null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      const cleanupEventName = tCleanup[i];\n      if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {\n        // We have found a matching event name on the same node but it might not have been\n        // registered yet, so we must explicitly verify entries in the LView cleanup data\n        // structures.\n        const lCleanup = lView[CLEANUP]!;\n        const listenerIdxInLCleanup = tCleanup[i + 2];\n        return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n      }\n      // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n      // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n      // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n      // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n      // documentation of TView.cleanup for more details of this data structure layout.\n      if (typeof cleanupEventName === 'string') {\n        i += 2;\n      }\n    }\n  }\n  return null;\n}\n\nexport function listenerInternal(\n  tView: TView,\n  lView: LView<{} | null>,\n  renderer: Renderer,\n  tNode: TNode,\n  eventName: string,\n  listenerFn: (e?: any) => any,\n  eventTargetResolver?: GlobalTargetResolver,\n): void {\n  const isTNodeDirectiveHost = isDirectiveHost(tNode);\n  const firstCreatePass = tView.firstCreatePass;\n  const tCleanup = firstCreatePass ? getOrCreateTViewCleanup(tView) : null;\n  const context = lView[CONTEXT];\n\n  // When the ɵɵlistener instruction was generated and is executed we know that there is either a\n  // native listener or a directive output on this element. As such we we know that we will have to\n  // register a listener and store its cleanup function on LView.\n  const lCleanup = getOrCreateLViewCleanup(lView);\n\n  ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode | TNodeType.AnyContainer);\n\n  let processOutputs = true;\n\n  // Adding a native event listener is applicable when:\n  // - The corresponding TNode represents a DOM element.\n  // - The event target has a resolver (usually resulting in a global object,\n  //   such as `window` or `document`).\n  if (tNode.type & TNodeType.AnyRNode || eventTargetResolver) {\n    const native = getNativeByTNode(tNode, lView) as RElement;\n    const target = eventTargetResolver ? eventTargetResolver(native) : native;\n    const lCleanupIndex = lCleanup.length;\n    const idxOrTargetGetter = eventTargetResolver\n      ? (_lView: LView) => eventTargetResolver(unwrapRNode(_lView[tNode.index]))\n      : tNode.index;\n\n    // In order to match current behavior, native DOM event listeners must be added for all\n    // events (including outputs).\n\n    // There might be cases where multiple directives on the same element try to register an event\n    // handler function for the same event. In this situation we want to avoid registration of\n    // several native listeners as each registration would be intercepted by NgZone and\n    // trigger change detection. This would mean that a single user action would result in several\n    // change detections being invoked. To avoid this situation we want to have only one call to\n    // native handler registration (for the same element and same type of event).\n    //\n    // In order to have just one native event handler in presence of multiple handler functions,\n    // we just register a first handler function as a native event listener and then chain\n    // (coalesce) other handler functions on top of the first native handler function.\n    let existingListener = null;\n    // Please note that the coalescing described here doesn't happen for events specifying an\n    // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n    // view engine.\n    // Also, we don't have to search for existing listeners is there are no directives\n    // matching on a given node as we can't register multiple event handlers for the same event in\n    // a template (this would mean having duplicate attributes).\n    if (!eventTargetResolver && isTNodeDirectiveHost) {\n      existingListener = findExistingListener(tView, lView, eventName, tNode.index);\n    }\n    if (existingListener !== null) {\n      // Attach a new listener to coalesced listeners list, maintaining the order in which\n      // listeners are registered. For performance reasons, we keep a reference to the last\n      // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through\n      // the entire set each time we need to add a new listener.\n      const lastListenerFn = (<any>existingListener).__ngLastListenerFn__ || existingListener;\n      lastListenerFn.__ngNextListenerFn__ = listenerFn;\n      (<any>existingListener).__ngLastListenerFn__ = listenerFn;\n      processOutputs = false;\n    } else {\n      listenerFn = wrapListener(tNode, lView, context, listenerFn);\n      stashEventListener(target as RElement, eventName, listenerFn);\n      const cleanupFn = renderer.listen(target as RElement, eventName, listenerFn);\n      ngDevMode && ngDevMode.rendererAddEventListener++;\n\n      lCleanup.push(listenerFn, cleanupFn);\n      tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);\n    }\n  } else {\n    // Even if there is no native listener to add, we still need to wrap the listener so that OnPush\n    // ancestors are marked dirty when an event occurs.\n    listenerFn = wrapListener(tNode, lView, context, listenerFn);\n  }\n\n  if (processOutputs) {\n    const outputConfig = tNode.outputs?.[eventName];\n    const hostDirectiveOutputConfig = tNode.hostDirectiveOutputs?.[eventName];\n\n    if (hostDirectiveOutputConfig && hostDirectiveOutputConfig.length) {\n      for (let i = 0; i < hostDirectiveOutputConfig.length; i += 2) {\n        const index = hostDirectiveOutputConfig[i] as number;\n        const lookupName = hostDirectiveOutputConfig[i + 1] as string;\n        listenToOutput(\n          tNode,\n          tView,\n          lView,\n          index,\n          lookupName,\n          eventName,\n          listenerFn,\n          lCleanup,\n          tCleanup,\n        );\n      }\n    }\n\n    if (outputConfig && outputConfig.length) {\n      for (const index of outputConfig) {\n        listenToOutput(\n          tNode,\n          tView,\n          lView,\n          index,\n          eventName,\n          eventName,\n          listenerFn,\n          lCleanup,\n          tCleanup,\n        );\n      }\n    }\n  }\n}\n\nfunction listenToOutput(\n  tNode: TNode,\n  tView: TView,\n  lView: LView,\n  index: number,\n  lookupName: string,\n  eventName: string,\n  listenerFn: (e?: any) => any,\n  lCleanup: any[],\n  tCleanup: any[] | null,\n) {\n  ngDevMode && assertIndexInRange(lView, index);\n  const instance = lView[index];\n  const def = tView.data[index] as DirectiveDef<unknown>;\n  const propertyName = def.outputs[lookupName];\n  const output = instance[propertyName];\n\n  if (ngDevMode && !isOutputSubscribable(output)) {\n    throw new Error(`@Output ${propertyName} not initialized in '${instance.constructor.name}'.`);\n  }\n\n  const subscription = (output as SubscribableOutput<unknown>).subscribe(listenerFn);\n  const idx = lCleanup.length;\n  lCleanup.push(listenerFn, subscription);\n  tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n}\n\nfunction executeListenerWithErrorHandling(\n  lView: LView,\n  context: {} | null,\n  listenerFn: (e?: any) => any,\n  e: any,\n): boolean {\n  const prevConsumer = setActiveConsumer(null);\n  try {\n    profiler(ProfilerEvent.OutputStart, context, listenerFn);\n    // Only explicitly returning false from a listener should preventDefault\n    return listenerFn(e) !== false;\n  } catch (error) {\n    handleError(lView, error);\n    return false;\n  } finally {\n    profiler(ProfilerEvent.OutputEnd, context, listenerFn);\n    setActiveConsumer(prevConsumer);\n  }\n}\n\n/**\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n * if applicable.\n *\n * @param tNode The TNode associated with this listener\n * @param lView The LView that contains this listener\n * @param listenerFn The listener function to call\n * @param wrapWithPreventDefault Whether or not to prevent default behavior\n * (the procedural renderer does this already, so in those cases, we should skip)\n */\nfunction wrapListener(\n  tNode: TNode,\n  lView: LView<{} | null>,\n  context: {} | null,\n  listenerFn: (e?: any) => any,\n): EventListener {\n  // Note: we are performing most of the work in the listener function itself\n  // to optimize listener registration.\n  return function wrapListenerIn_markDirtyAndPreventDefault(e: any) {\n    // Ivy uses `Function` as a special token that allows us to unwrap the function\n    // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.\n    if (e === Function) {\n      return listenerFn;\n    }\n\n    // In order to be backwards compatible with View Engine, events on component host nodes\n    // must also mark the component view itself dirty (i.e. the view that it owns).\n    const startView = isComponentHost(tNode) ? getComponentLViewByIndex(tNode.index, lView) : lView;\n    markViewDirty(startView, NotificationSource.Listener);\n\n    let result = executeListenerWithErrorHandling(lView, context, listenerFn, e);\n    // A just-invoked listener function might have coalesced listeners so we need to check for\n    // their presence and invoke as needed.\n    let nextListenerFn = (<any>wrapListenerIn_markDirtyAndPreventDefault).__ngNextListenerFn__;\n    while (nextListenerFn) {\n      // We should prevent default if any of the listeners explicitly return false\n      result = executeListenerWithErrorHandling(lView, context, nextListenerFn, e) && result;\n      nextListenerFn = (<any>nextListenerFn).__ngNextListenerFn__;\n    }\n\n    return result;\n  };\n}\n\n/** Describes a subscribable output field value. */\ninterface SubscribableOutput<T> {\n  subscribe(listener: (v: T) => void): {unsubscribe: () => void};\n}\n\n/**\n * Whether the given value represents a subscribable output.\n *\n * For example, an `EventEmitter, a `Subject`, an `Observable` or an\n * `OutputEmitter`.\n */\nfunction isOutputSubscribable(value: unknown): value is SubscribableOutput<unknown> {\n  return (\n    value != null && typeof (value as Partial<SubscribableOutput<unknown>>).subscribe === 'function'\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {nextContextImpl} from '../state';\n\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @param level The relative level of the view from which to grab context compared to contextVewData\n * @returns context\n *\n * @codeGenApi\n */\nexport function ɵɵnextContext<T = any>(level: number = 1): T {\n  return nextContextImpl(level);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {findMatchingDehydratedView} from '../../hydration/views';\nimport {isDetachedByI18n} from '../../i18n/utils';\nimport {newArray} from '../../util/array_utils';\nimport {assertLContainer, assertTNode} from '../assert';\nimport {ComponentTemplate} from '../interfaces/definition';\nimport {TAttributes, TElementNode, TNode, TNodeType} from '../interfaces/node';\nimport {ProjectionSlots} from '../interfaces/projection';\nimport {\n  DECLARATION_COMPONENT_VIEW,\n  HEADER_OFFSET,\n  HYDRATION,\n  LView,\n  T_HOST,\n  TView,\n} from '../interfaces/view';\nimport {applyProjection} from '../node_manipulation';\nimport {\n  getProjectAsAttrValue,\n  isNodeMatchingSelectorList,\n  isSelectorInSelectorList,\n} from '../node_selector_matcher';\nimport {getLView, getTView, isInSkipHydrationBlock, setCurrentTNodeAsNotParent} from '../state';\nimport {getOrCreateTNode} from '../tnode_manipulation';\nimport {addLViewToLContainer} from '../view/container';\nimport {createAndRenderEmbeddedLView, shouldAddViewToDom} from '../view_manipulation';\n\nimport {declareTemplate} from './template';\n\n/**\n * Checks a given node against matching projection slots and returns the\n * determined slot index. Returns \"null\" if no slot matched the given node.\n *\n * This function takes into account the parsed ngProjectAs selector from the\n * node's attributes. If present, it will check whether the ngProjectAs selector\n * matches any of the projection slot selectors.\n */\nexport function matchingProjectionSlotIndex(\n  tNode: TNode,\n  projectionSlots: ProjectionSlots,\n): number | null {\n  let wildcardNgContentIndex = null;\n  const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n  for (let i = 0; i < projectionSlots.length; i++) {\n    const slotValue = projectionSlots[i];\n    // The last wildcard projection slot should match all nodes which aren't matching\n    // any selector. This is necessary to be backwards compatible with view engine.\n    if (slotValue === '*') {\n      wildcardNgContentIndex = i;\n      continue;\n    }\n    // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n    // to the list of selectors, otherwise we fall back to matching against the node.\n    if (\n      ngProjectAsAttrVal === null\n        ? isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */ true)\n        : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)\n    ) {\n      return i; // first matching selector \"captures\" a given node\n    }\n  }\n  return wildcardNgContentIndex;\n}\n\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param projectionSlots? A collection of projection slots. A projection slot can be based\n *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\n *        all nodes which do not match any selector. If not specified, a single wildcard\n *        selector projection slot will be defined.\n *\n * @codeGenApi\n */\nexport function ɵɵprojectionDef(projectionSlots?: ProjectionSlots): void {\n  const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST] as TElementNode;\n\n  if (!componentNode.projection) {\n    // If no explicit projection slots are defined, fall back to a single\n    // projection slot with the wildcard selector.\n    const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\n    const projectionHeads: (TNode | null)[] = (componentNode.projection = newArray(\n      numProjectionSlots,\n      null! as TNode,\n    ));\n    const tails: (TNode | null)[] = projectionHeads.slice();\n\n    let componentChild: TNode | null = componentNode.child;\n\n    while (componentChild !== null) {\n      // Do not project let declarations so they don't occupy a slot.\n      if (componentChild.type !== TNodeType.LetDeclaration) {\n        const slotIndex = projectionSlots\n          ? matchingProjectionSlotIndex(componentChild, projectionSlots)\n          : 0;\n\n        if (slotIndex !== null) {\n          if (tails[slotIndex]) {\n            tails[slotIndex]!.projectionNext = componentChild;\n          } else {\n            projectionHeads[slotIndex] = componentChild;\n          }\n          tails[slotIndex] = componentChild;\n        }\n      }\n\n      componentChild = componentChild.next;\n    }\n  }\n}\n\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param nodeIndex Index of the projection node.\n * @param selectorIndex Index of the slot selector.\n *  - 0 when the selector is `*` (or unspecified as this is the default value),\n *  - 1 based index of the selector from the {@link projectionDef}\n * @param attrs Static attributes set on the `ng-content` node.\n * @param fallbackTemplateFn Template function with fallback content.\n *   Will be rendered if the slot is empty at runtime.\n * @param fallbackDecls Number of declarations in the fallback template.\n * @param fallbackVars Number of variables in the fallback template.\n *\n * @codeGenApi\n */\nexport function ɵɵprojection(\n  nodeIndex: number,\n  selectorIndex: number = 0,\n  attrs?: TAttributes,\n  fallbackTemplateFn?: ComponentTemplate<unknown>,\n  fallbackDecls?: number,\n  fallbackVars?: number,\n): void {\n  const lView = getLView();\n  const tView = getTView();\n  const fallbackIndex = fallbackTemplateFn ? nodeIndex + 1 : null;\n\n  // Fallback content needs to be declared no matter whether the slot is empty since different\n  // instances of the component may or may not insert it. Also it needs to be declare *before*\n  // the projection node in order to work correctly with hydration.\n  if (fallbackIndex !== null) {\n    declareTemplate(\n      lView,\n      tView,\n      fallbackIndex,\n      fallbackTemplateFn!,\n      fallbackDecls!,\n      fallbackVars!,\n      null,\n      attrs,\n    );\n  }\n\n  const tProjectionNode = getOrCreateTNode(\n    tView,\n    HEADER_OFFSET + nodeIndex,\n    TNodeType.Projection,\n    null,\n    attrs || null,\n  );\n\n  // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n  if (tProjectionNode.projection === null) {\n    tProjectionNode.projection = selectorIndex;\n  }\n\n  // `<ng-content>` has no content. Even if there's fallback\n  // content, the fallback is shown next to it.\n  setCurrentTNodeAsNotParent();\n\n  const hydrationInfo = lView[HYDRATION];\n  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock();\n  const componentHostNode = lView[DECLARATION_COMPONENT_VIEW][T_HOST] as TElementNode;\n  const isEmpty = componentHostNode.projection![tProjectionNode.projection] === null;\n\n  if (isEmpty && fallbackIndex !== null) {\n    insertFallbackContent(lView, tView, fallbackIndex);\n  } else if (isNodeCreationMode && !isDetachedByI18n(tProjectionNode)) {\n    // re-distribution of projectable nodes is stored on a component's view level\n    applyProjection(tView, lView, tProjectionNode);\n  }\n}\n\n/** Inserts the fallback content of a projection slot. Assumes there's no projected content. */\nfunction insertFallbackContent(lView: LView, tView: TView, fallbackIndex: number) {\n  const adjustedIndex = HEADER_OFFSET + fallbackIndex;\n  const fallbackTNode = tView.data[adjustedIndex] as TNode;\n  const fallbackLContainer = lView[adjustedIndex];\n  ngDevMode && assertTNode(fallbackTNode);\n  ngDevMode && assertLContainer(fallbackLContainer);\n\n  const dehydratedView = findMatchingDehydratedView(fallbackLContainer, fallbackTNode.tView!.ssrId);\n  const fallbackLView = createAndRenderEmbeddedLView(lView, fallbackTNode, undefined, {\n    dehydratedView,\n  });\n  addLViewToLContainer(\n    fallbackLContainer,\n    fallbackLView,\n    0,\n    shouldAddViewToDom(fallbackTNode, dehydratedView),\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {RENDERER} from '../interfaces/view';\nimport {getBindingIndex, getLView, getSelectedTNode, getTView} from '../state';\nimport {NO_CHANGE} from '../tokens';\n\nimport {\n  interpolation1,\n  interpolation2,\n  interpolation3,\n  interpolation4,\n  interpolation5,\n  interpolation6,\n  interpolation7,\n  interpolation8,\n  interpolationV,\n} from './interpolation';\nimport {elementPropertyInternal, storePropertyBindingMetadata} from './shared';\n\n/**\n *\n * Update an interpolated property on an element with a lone bound value\n *\n * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div title=\"{{v0}}\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate('title', v0);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate(\n  propName: string,\n  v0: any,\n  sanitizer?: SanitizerFn,\n): typeof ɵɵpropertyInterpolate {\n  ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);\n  return ɵɵpropertyInterpolate;\n}\n\n/**\n *\n * Update an interpolated property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate1(\n  propName: string,\n  prefix: string,\n  v0: any,\n  suffix: string,\n  sanitizer?: SanitizerFn,\n): typeof ɵɵpropertyInterpolate1 {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n      tView,\n      tNode,\n      lView,\n      propName,\n      interpolatedValue,\n      lView[RENDERER],\n      sanitizer,\n      false,\n    );\n    ngDevMode &&\n      storePropertyBindingMetadata(\n        tView.data,\n        tNode,\n        propName,\n        getBindingIndex() - 1,\n        prefix,\n        suffix,\n      );\n  }\n  return ɵɵpropertyInterpolate1;\n}\n\n/**\n *\n * Update an interpolated property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate2(\n  propName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  suffix: string,\n  sanitizer?: SanitizerFn,\n): typeof ɵɵpropertyInterpolate2 {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n      tView,\n      tNode,\n      lView,\n      propName,\n      interpolatedValue,\n      lView[RENDERER],\n      sanitizer,\n      false,\n    );\n    ngDevMode &&\n      storePropertyBindingMetadata(\n        tView.data,\n        tNode,\n        propName,\n        getBindingIndex() - 2,\n        prefix,\n        i0,\n        suffix,\n      );\n  }\n  return ɵɵpropertyInterpolate2;\n}\n\n/**\n *\n * Update an interpolated property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate3(\n  propName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  suffix: string,\n  sanitizer?: SanitizerFn,\n): typeof ɵɵpropertyInterpolate3 {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n      tView,\n      tNode,\n      lView,\n      propName,\n      interpolatedValue,\n      lView[RENDERER],\n      sanitizer,\n      false,\n    );\n    ngDevMode &&\n      storePropertyBindingMetadata(\n        tView.data,\n        tNode,\n        propName,\n        getBindingIndex() - 3,\n        prefix,\n        i0,\n        i1,\n        suffix,\n      );\n  }\n  return ɵɵpropertyInterpolate3;\n}\n\n/**\n *\n * Update an interpolated property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate4(\n  propName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  suffix: string,\n  sanitizer?: SanitizerFn,\n): typeof ɵɵpropertyInterpolate4 {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n      tView,\n      tNode,\n      lView,\n      propName,\n      interpolatedValue,\n      lView[RENDERER],\n      sanitizer,\n      false,\n    );\n    ngDevMode &&\n      storePropertyBindingMetadata(\n        tView.data,\n        tNode,\n        propName,\n        getBindingIndex() - 4,\n        prefix,\n        i0,\n        i1,\n        i2,\n        suffix,\n      );\n  }\n  return ɵɵpropertyInterpolate4;\n}\n\n/**\n *\n * Update an interpolated property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate5(\n  propName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  suffix: string,\n  sanitizer?: SanitizerFn,\n): typeof ɵɵpropertyInterpolate5 {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(\n    lView,\n    prefix,\n    v0,\n    i0,\n    v1,\n    i1,\n    v2,\n    i2,\n    v3,\n    i3,\n    v4,\n    suffix,\n  );\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n      tView,\n      tNode,\n      lView,\n      propName,\n      interpolatedValue,\n      lView[RENDERER],\n      sanitizer,\n      false,\n    );\n    ngDevMode &&\n      storePropertyBindingMetadata(\n        tView.data,\n        tNode,\n        propName,\n        getBindingIndex() - 5,\n        prefix,\n        i0,\n        i1,\n        i2,\n        i3,\n        suffix,\n      );\n  }\n  return ɵɵpropertyInterpolate5;\n}\n\n/**\n *\n * Update an interpolated property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate6(\n  propName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  suffix: string,\n  sanitizer?: SanitizerFn,\n): typeof ɵɵpropertyInterpolate6 {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(\n    lView,\n    prefix,\n    v0,\n    i0,\n    v1,\n    i1,\n    v2,\n    i2,\n    v3,\n    i3,\n    v4,\n    i4,\n    v5,\n    suffix,\n  );\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n      tView,\n      tNode,\n      lView,\n      propName,\n      interpolatedValue,\n      lView[RENDERER],\n      sanitizer,\n      false,\n    );\n    ngDevMode &&\n      storePropertyBindingMetadata(\n        tView.data,\n        tNode,\n        propName,\n        getBindingIndex() - 6,\n        prefix,\n        i0,\n        i1,\n        i2,\n        i3,\n        i4,\n        suffix,\n      );\n  }\n  return ɵɵpropertyInterpolate6;\n}\n\n/**\n *\n * Update an interpolated property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate7(\n  propName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  suffix: string,\n  sanitizer?: SanitizerFn,\n): typeof ɵɵpropertyInterpolate7 {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(\n    lView,\n    prefix,\n    v0,\n    i0,\n    v1,\n    i1,\n    v2,\n    i2,\n    v3,\n    i3,\n    v4,\n    i4,\n    v5,\n    i5,\n    v6,\n    suffix,\n  );\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n      tView,\n      tNode,\n      lView,\n      propName,\n      interpolatedValue,\n      lView[RENDERER],\n      sanitizer,\n      false,\n    );\n    ngDevMode &&\n      storePropertyBindingMetadata(\n        tView.data,\n        tNode,\n        propName,\n        getBindingIndex() - 7,\n        prefix,\n        i0,\n        i1,\n        i2,\n        i3,\n        i4,\n        i5,\n        suffix,\n      );\n  }\n  return ɵɵpropertyInterpolate7;\n}\n\n/**\n *\n * Update an interpolated property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate8(\n  propName: string,\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  i6: string,\n  v7: any,\n  suffix: string,\n  sanitizer?: SanitizerFn,\n): typeof ɵɵpropertyInterpolate8 {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(\n    lView,\n    prefix,\n    v0,\n    i0,\n    v1,\n    i1,\n    v2,\n    i2,\n    v3,\n    i3,\n    v4,\n    i4,\n    v5,\n    i5,\n    v6,\n    i6,\n    v7,\n    suffix,\n  );\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n      tView,\n      tNode,\n      lView,\n      propName,\n      interpolatedValue,\n      lView[RENDERER],\n      sanitizer,\n      false,\n    );\n    ngDevMode &&\n      storePropertyBindingMetadata(\n        tView.data,\n        tNode,\n        propName,\n        getBindingIndex() - 8,\n        prefix,\n        i0,\n        i1,\n        i2,\n        i3,\n        i4,\n        i5,\n        i6,\n        suffix,\n      );\n  }\n  return ɵɵpropertyInterpolate8;\n}\n\n/**\n * Update an interpolated property on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update.\n * @param values The collection of values and the strings in between those values, beginning with a\n * string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolateV(\n  propName: string,\n  values: any[],\n  sanitizer?: SanitizerFn,\n): typeof ɵɵpropertyInterpolateV {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n      tView,\n      tNode,\n      lView,\n      propName,\n      interpolatedValue,\n      lView[RENDERER],\n      sanitizer,\n      false,\n    );\n    if (ngDevMode) {\n      const interpolationInBetween = [values[0]]; // prefix\n      for (let i = 2; i < values.length; i += 2) {\n        interpolationInBetween.push(values[i]);\n      }\n      storePropertyBindingMetadata(\n        tView.data,\n        tNode,\n        propName,\n        getBindingIndex() - interpolationInBetween.length + 1,\n        ...interpolationInBetween,\n      );\n    }\n  }\n  return ɵɵpropertyInterpolateV;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ProviderToken} from '../../di';\nimport {unwrapElementRef} from '../../linker/element_ref';\nimport {QueryList} from '../../linker/query_list';\nimport {QueryFlags} from '../interfaces/query';\nimport {\n  createContentQuery,\n  createViewQuery,\n  getQueryResults,\n  getTQuery,\n  loadQueryInternal,\n} from '../queries/query';\nimport {getCurrentQueryIndex, getLView, getTView, setCurrentQueryIndex} from '../state';\nimport {isCreationMode} from '../util/view_utils';\n\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * @param directiveIndex Current directive index\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n * @returns QueryList<T>\n *\n * @codeGenApi\n */\nexport function ɵɵcontentQuery<T>(\n  directiveIndex: number,\n  predicate: ProviderToken<unknown> | string | string[],\n  flags: QueryFlags,\n  read?: any,\n): void {\n  createContentQuery<T>(directiveIndex, predicate, flags, read);\n}\n\n/**\n * Creates a new view query by initializing internal data structures.\n *\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nexport function ɵɵviewQuery<T>(\n  predicate: ProviderToken<unknown> | string | string[],\n  flags: QueryFlags,\n  read?: any,\n): void {\n  createViewQuery(predicate, flags, read);\n}\n\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n *\n * @returns `true` if a query got dirty during change detection or if this is a static query\n * resolving in creation mode, `false` otherwise.\n *\n * @codeGenApi\n */\nexport function ɵɵqueryRefresh(queryList: QueryList<any>): boolean {\n  const lView = getLView();\n  const tView = getTView();\n  const queryIndex = getCurrentQueryIndex();\n\n  setCurrentQueryIndex(queryIndex + 1);\n\n  const tQuery = getTQuery(tView, queryIndex);\n  if (\n    queryList.dirty &&\n    isCreationMode(lView) ===\n      ((tQuery.metadata.flags & QueryFlags.isStatic) === QueryFlags.isStatic)\n  ) {\n    if (tQuery.matches === null) {\n      queryList.reset([]);\n    } else {\n      const result = getQueryResults(lView, queryIndex);\n      queryList.reset(result, unwrapElementRef);\n      queryList.notifyOnChanges();\n    }\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Loads a QueryList corresponding to the current view or content query.\n *\n * @codeGenApi\n */\nexport function ɵɵloadQuery<T>(): QueryList<T> {\n  return loadQueryInternal<T>(getLView(), getCurrentQueryIndex());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ProviderToken} from '../../di/provider_token';\nimport {QueryFlags} from '../interfaces/query';\nimport {createContentQuery, createViewQuery} from '../queries/query';\nimport {bindQueryToSignal} from '../queries/query_reactive';\nimport {Signal} from '../reactivity/api';\nimport {getCurrentQueryIndex, setCurrentQueryIndex} from '../state';\n\n/**\n * Creates a new content query and binds it to a signal created by an authoring function.\n *\n * @param directiveIndex Current directive index\n * @param target The target signal to which the query should be bound\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nexport function ɵɵcontentQuerySignal<T>(\n  directiveIndex: number,\n  target: Signal<T>,\n  predicate: ProviderToken<unknown> | string[],\n  flags: QueryFlags,\n  read?: any,\n): void {\n  bindQueryToSignal(target, createContentQuery(directiveIndex, predicate, flags, read));\n}\n\n/**\n * Creates a new view query by initializing internal data structures and binding a new query to the\n * target signal.\n *\n * @param target The target signal to assign the query results to.\n * @param predicate The type or label that should match a given query\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nexport function ɵɵviewQuerySignal(\n  target: Signal<unknown>,\n  predicate: ProviderToken<unknown> | string[],\n  flags: QueryFlags,\n  read?: ProviderToken<unknown>,\n): void {\n  bindQueryToSignal(target, createViewQuery(predicate, flags, read));\n}\n\n/**\n * Advances the current query index by a specified offset.\n *\n * Adjusting the current query index is necessary in cases where a given directive has a mix of\n * zone-based and signal-based queries. The signal-based queries don't require tracking of the\n * current index (those are refreshed on demand and not during change detection) so this instruction\n * is only necessary for backward-compatibility.\n *\n * @param index offset to apply to the current query index (defaults to 1)\n *\n * @codeGenApi\n */\nexport function ɵɵqueryAdvance(indexOffset: number = 1): void {\n  setCurrentQueryIndex(getCurrentQueryIndex() + indexOffset);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {HEADER_OFFSET, LView, TView} from '../interfaces/view';\nimport {getContextLView} from '../state';\nimport {load} from '../util/view_utils';\n\n/** Store a value in the `data` at a given `index`. */\nexport function store<T>(tView: TView, lView: LView, index: number, value: T): void {\n  // We don't store any static data for local variables, so the first time\n  // we see the template, we should store as null to avoid a sparse array\n  if (index >= tView.data.length) {\n    tView.data[index] = null;\n    tView.blueprint[index] = null;\n  }\n  lView[index] = value;\n}\n\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @param index The index of the local ref in contextViewData.\n *\n * @codeGenApi\n */\nexport function ɵɵreference<T>(index: number) {\n  const contextLView = getContextLView();\n  return load<T>(contextLView, HEADER_OFFSET + index);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {validateMatchingNode} from '../../hydration/error_handling';\nimport {locateNextRNode} from '../../hydration/node_lookup_utils';\nimport {isDisconnectedNode, markRNodeAsClaimedByHydration} from '../../hydration/utils';\nimport {isDetachedByI18n} from '../../i18n/utils';\nimport {assertEqual, assertIndexInRange} from '../../util/assert';\nimport {TElementNode, TNode, TNodeType} from '../interfaces/node';\nimport {RText} from '../interfaces/renderer_dom';\nimport {HEADER_OFFSET, HYDRATION, LView, RENDERER, TView} from '../interfaces/view';\nimport {appendChild} from '../node_manipulation';\nimport {createTextNode} from '../dom_node_manipulation';\nimport {\n  getBindingIndex,\n  getLView,\n  getTView,\n  isInSkipHydrationBlock,\n  lastNodeWasCreated,\n  setCurrentTNode,\n  wasLastNodeCreated,\n} from '../state';\nimport {getOrCreateTNode} from '../tnode_manipulation';\n\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Static string value to write.\n *\n * @codeGenApi\n */\nexport function ɵɵtext(index: number, value: string = ''): void {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n\n  ngDevMode &&\n    assertEqual(\n      getBindingIndex(),\n      tView.bindingStartIndex,\n      'text nodes should be created before any bindings',\n    );\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n\n  const tNode = tView.firstCreatePass\n    ? getOrCreateTNode(tView, adjustedIndex, TNodeType.Text, value, null)\n    : (tView.data[adjustedIndex] as TElementNode);\n\n  const textNative = _locateOrCreateTextNode(tView, lView, tNode, value, index);\n  lView[adjustedIndex] = textNative;\n\n  if (wasLastNodeCreated()) {\n    appendChild(tView, lView, textNative, tNode);\n  }\n\n  // Text nodes are self closing.\n  setCurrentTNode(tNode, false);\n}\n\nlet _locateOrCreateTextNode: typeof locateOrCreateTextNodeImpl = (\n  tView: TView,\n  lView: LView,\n  tNode: TNode,\n  value: string,\n  index: number,\n) => {\n  lastNodeWasCreated(true);\n  return createTextNode(lView[RENDERER], value);\n};\n\n/**\n * Enables hydration code path (to lookup existing elements in DOM)\n * in addition to the regular creation mode of text nodes.\n */\nfunction locateOrCreateTextNodeImpl(\n  tView: TView,\n  lView: LView,\n  tNode: TNode,\n  value: string,\n  index: number,\n): RText {\n  const hydrationInfo = lView[HYDRATION];\n  const isNodeCreationMode =\n    !hydrationInfo ||\n    isInSkipHydrationBlock() ||\n    isDetachedByI18n(tNode) ||\n    isDisconnectedNode(hydrationInfo, index);\n  lastNodeWasCreated(isNodeCreationMode);\n\n  // Regular creation mode.\n  if (isNodeCreationMode) {\n    return createTextNode(lView[RENDERER], value);\n  }\n\n  // Hydration mode, looking up an existing element in DOM.\n  const textNative = locateNextRNode(hydrationInfo, tView, lView, tNode) as RText;\n\n  ngDevMode && validateMatchingNode(textNative, Node.TEXT_NODE, null, lView, tNode);\n  ngDevMode && markRNodeAsClaimedByHydration(textNative);\n\n  return textNative;\n}\n\nexport function enableLocateOrCreateTextNodeImpl() {\n  _locateOrCreateTextNode = locateOrCreateTextNodeImpl;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {assertDefined, assertIndexInRange, assertNotSame, assertString} from '../../util/assert';\nimport {RText} from '../interfaces/renderer_dom';\nimport {LView, RENDERER} from '../interfaces/view';\nimport {updateTextNode} from '../dom_node_manipulation';\nimport {getLView, getSelectedIndex} from '../state';\nimport {NO_CHANGE} from '../tokens';\nimport {getNativeByIndex} from '../util/view_utils';\n\nimport {\n  interpolation1,\n  interpolation2,\n  interpolation3,\n  interpolation4,\n  interpolation5,\n  interpolation6,\n  interpolation7,\n  interpolation8,\n  interpolationV,\n} from './interpolation';\n\n/**\n *\n * Update text content with a lone bound value\n *\n * Used when a text node has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div>{{v0}}</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate(v0);\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate(v0: any): typeof ɵɵtextInterpolate {\n  ɵɵtextInterpolate1('', v0, '');\n  return ɵɵtextInterpolate;\n}\n\n/**\n *\n * Update text content with single bound value surrounded by other text.\n *\n * Used when a text node has 1 interpolated value in it:\n *\n * ```html\n * <div>prefix{{v0}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate1('prefix', v0, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate1(\n  prefix: string,\n  v0: any,\n  suffix: string,\n): typeof ɵɵtextInterpolate1 {\n  const lView = getLView();\n  const interpolated = interpolation1(lView, prefix, v0, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate1;\n}\n\n/**\n *\n * Update text content with 2 bound values surrounded by other text.\n *\n * Used when a text node has 2 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate2(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  suffix: string,\n): typeof ɵɵtextInterpolate2 {\n  const lView = getLView();\n  const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate2;\n}\n\n/**\n *\n * Update text content with 3 bound values surrounded by other text.\n *\n * Used when a text node has 3 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate3(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  suffix: string,\n): typeof ɵɵtextInterpolate3 {\n  const lView = getLView();\n  const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate3;\n}\n\n/**\n *\n * Update text content with 4 bound values surrounded by other text.\n *\n * Used when a text node has 4 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see ɵɵtextInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate4(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  suffix: string,\n): typeof ɵɵtextInterpolate4 {\n  const lView = getLView();\n  const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate4;\n}\n\n/**\n *\n * Update text content with 5 bound values surrounded by other text.\n *\n * Used when a text node has 5 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate5(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  suffix: string,\n): typeof ɵɵtextInterpolate5 {\n  const lView = getLView();\n  const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate5;\n}\n\n/**\n *\n * Update text content with 6 bound values surrounded by other text.\n *\n * Used when a text node has 6 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change. @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate6(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  suffix: string,\n): typeof ɵɵtextInterpolate6 {\n  const lView = getLView();\n  const interpolated = interpolation6(\n    lView,\n    prefix,\n    v0,\n    i0,\n    v1,\n    i1,\n    v2,\n    i2,\n    v3,\n    i3,\n    v4,\n    i4,\n    v5,\n    suffix,\n  );\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate6;\n}\n\n/**\n *\n * Update text content with 7 bound values surrounded by other text.\n *\n * Used when a text node has 7 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate7(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  suffix: string,\n): typeof ɵɵtextInterpolate7 {\n  const lView = getLView();\n  const interpolated = interpolation7(\n    lView,\n    prefix,\n    v0,\n    i0,\n    v1,\n    i1,\n    v2,\n    i2,\n    v3,\n    i3,\n    v4,\n    i4,\n    v5,\n    i5,\n    v6,\n    suffix,\n  );\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate7;\n}\n\n/**\n *\n * Update text content with 8 bound values surrounded by other text.\n *\n * Used when a text node has 8 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate8(\n  prefix: string,\n  v0: any,\n  i0: string,\n  v1: any,\n  i1: string,\n  v2: any,\n  i2: string,\n  v3: any,\n  i3: string,\n  v4: any,\n  i4: string,\n  v5: any,\n  i5: string,\n  v6: any,\n  i6: string,\n  v7: any,\n  suffix: string,\n): typeof ɵɵtextInterpolate8 {\n  const lView = getLView();\n  const interpolated = interpolation8(\n    lView,\n    prefix,\n    v0,\n    i0,\n    v1,\n    i1,\n    v2,\n    i2,\n    v3,\n    i3,\n    v4,\n    i4,\n    v5,\n    i5,\n    v6,\n    i6,\n    v7,\n    suffix,\n  );\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate8;\n}\n\n/**\n * Update text content with 9 or more bound values other surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n *\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵtextInterpolateV(values: any[]): typeof ɵɵtextInterpolateV {\n  const lView = getLView();\n  const interpolated = interpolationV(lView, values);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolateV;\n}\n\n/**\n * Updates a text binding at a given index in a given LView.\n */\nfunction textBindingInternal(lView: LView, index: number, value: string): void {\n  ngDevMode && assertString(value, 'Value should be a string');\n  ngDevMode && assertNotSame(value, NO_CHANGE as any, 'value should not be NO_CHANGE');\n  ngDevMode && assertIndexInRange(lView, index);\n  const element = getNativeByIndex(index, lView) as any as RText;\n  ngDevMode && assertDefined(element, 'native element should exist');\n  updateTextNode(lView[RENDERER], element, value);\n}\n","/*!\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {bindingUpdated} from '../bindings';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {RENDERER} from '../interfaces/view';\nimport {isWritableSignal, WritableSignal} from '../reactivity/signal';\nimport {getCurrentTNode, getLView, getSelectedTNode, getTView, nextBindingIndex} from '../state';\n\nimport {listenerInternal} from './listener';\nimport {elementPropertyInternal, storePropertyBindingMetadata} from './shared';\n\n/**\n * Update a two-way bound property on a selected element.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * @param propName Name of property.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `twoWayProperty('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nexport function ɵɵtwoWayProperty<T>(\n  propName: string,\n  value: T | WritableSignal<T>,\n  sanitizer?: SanitizerFn | null,\n): typeof ɵɵtwoWayProperty {\n  // TODO(crisbeto): perf impact of re-evaluating this on each change detection?\n  if (isWritableSignal(value)) {\n    value = value();\n  }\n\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n      tView,\n      tNode,\n      lView,\n      propName,\n      value,\n      lView[RENDERER],\n      sanitizer,\n      false,\n    );\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n\n  return ɵɵtwoWayProperty;\n}\n\n/**\n * Function used inside two-way listeners to conditionally set the value of the bound expression.\n *\n * @param target Field on which to set the value.\n * @param value Value to be set to the field.\n *\n * @codeGenApi\n */\nexport function ɵɵtwoWayBindingSet<T>(target: unknown, value: T): boolean {\n  const canWrite = isWritableSignal(target);\n  canWrite && target.set(value);\n  return canWrite;\n}\n\n/**\n * Adds an event listener that updates a two-way binding to the current node.\n *\n * @param eventName Name of the event.\n * @param listenerFn The function to be called when event emits.\n *\n * @codeGenApi\n */\nexport function ɵɵtwoWayListener(\n  eventName: string,\n  listenerFn: (e?: any) => any,\n): typeof ɵɵtwoWayListener {\n  const lView = getLView<{} | null>();\n  const tView = getTView();\n  const tNode = getCurrentTNode()!;\n  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn);\n  return ɵɵtwoWayListener;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {resolveForwardRef} from '../di/forward_ref';\nimport {ClassProvider, Provider} from '../di/interface/provider';\nimport {isClassProvider, isTypeProvider, SingleProvider} from '../di/provider_collection';\nimport {providerToFactory} from '../di/r3_injector';\nimport {assertDefined} from '../util/assert';\n\nimport {emitProviderConfiguredEvent, runInInjectorProfilerContext} from './debug/injector_profiler';\nimport {\n  diPublicInInjector,\n  getNodeInjectable,\n  getOrCreateNodeInjectorForNode,\n  NodeInjector,\n} from './di';\nimport {ɵɵdirectiveInject} from './instructions/all';\nimport {DirectiveDef} from './interfaces/definition';\nimport {NodeInjectorFactory} from './interfaces/injector';\nimport {\n  TContainerNode,\n  TDirectiveHostNode,\n  TElementContainerNode,\n  TElementNode,\n  TNodeProviderIndexes,\n} from './interfaces/node';\nimport {isComponentDef} from './interfaces/type_checks';\nimport {DestroyHookData, LView, TData, TVIEW, TView} from './interfaces/view';\nimport {getCurrentTNode, getLView, getTView} from './state';\n\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @param def the directive definition\n * @param providers: Array of `providers`.\n * @param viewProviders: Array of `viewProviders`.\n */\nexport function providersResolver<T>(\n  def: DirectiveDef<T>,\n  providers: Provider[],\n  viewProviders: Provider[],\n): void {\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const isComponent = isComponentDef(def);\n\n    // The list of view providers is processed first, and the flags are updated\n    resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\n\n    // Then, the list of providers is processed, and the flags are updated\n    resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n  }\n}\n\n/**\n * Resolves a provider and publishes it to the DI system.\n */\nfunction resolveProvider(\n  provider: Provider,\n  tInjectables: TData,\n  lInjectablesBlueprint: NodeInjectorFactory[],\n  isComponent: boolean,\n  isViewProvider: boolean,\n): void {\n  provider = resolveForwardRef(provider);\n  if (Array.isArray(provider)) {\n    // Recursively call `resolveProvider`\n    // Recursion is OK in this case because this code will not be in hot-path once we implement\n    // cloning of the initial state.\n    for (let i = 0; i < provider.length; i++) {\n      resolveProvider(\n        provider[i],\n        tInjectables,\n        lInjectablesBlueprint,\n        isComponent,\n        isViewProvider,\n      );\n    }\n  } else {\n    const tView = getTView();\n    const lView = getLView();\n    const tNode = getCurrentTNode()!;\n    let token: any = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n\n    const providerFactory = providerToFactory(provider);\n    if (ngDevMode) {\n      const injector = new NodeInjector(\n        tNode as TElementNode | TContainerNode | TElementContainerNode,\n        lView,\n      );\n      runInInjectorProfilerContext(injector, token, () => {\n        emitProviderConfiguredEvent(provider as SingleProvider, isViewProvider);\n      });\n    }\n\n    const beginIndex = tNode.providerIndexes & TNodeProviderIndexes.ProvidersStartIndexMask;\n    const endIndex = tNode.directiveStart;\n    const cptViewProvidersCount =\n      tNode.providerIndexes >> TNodeProviderIndexes.CptViewProvidersCountShift;\n\n    if (isTypeProvider(provider) || !provider.multi) {\n      // Single provider case: the factory is created and pushed immediately\n      const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);\n      const existingFactoryIndex = indexOf(\n        token,\n        tInjectables,\n        isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount,\n        endIndex,\n      );\n      if (existingFactoryIndex === -1) {\n        diPublicInInjector(\n          getOrCreateNodeInjectorForNode(\n            tNode as TElementNode | TContainerNode | TElementContainerNode,\n            lView,\n          ),\n          tView,\n          token,\n        );\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += TNodeProviderIndexes.CptViewProvidersCountShifter;\n        }\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        lInjectablesBlueprint[existingFactoryIndex] = factory;\n        lView[existingFactoryIndex] = factory;\n      }\n    } else {\n      // Multi provider case:\n      // We create a multi factory which is going to aggregate all the values.\n      // Since the output of such a factory depends on content or view injection,\n      // we create two of them, which are linked together.\n      //\n      // The first one (for view providers) is always in the first block of the injectables array,\n      // and the second one (for providers) is always in the second block.\n      // This is important because view providers have higher priority. When a multi token\n      // is being looked up, the view providers should be found first.\n      // Note that it is not possible to have a multi factory in the third block (directive block).\n      //\n      // The algorithm to process multi providers is as follows:\n      // 1) If the multi provider comes from the `viewProviders` of the component:\n      //   a) If the special view providers factory doesn't exist, it is created and pushed.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      // 2) If the multi provider comes from the `providers` of the component or of another\n      // directive:\n      //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n      //      It is also linked to the multi factory for view providers, if it exists.\n      //   b) Else, the multi provider is added to the existing multi factory.\n\n      const existingProvidersFactoryIndex = indexOf(\n        token,\n        tInjectables,\n        beginIndex + cptViewProvidersCount,\n        endIndex,\n      );\n      const existingViewProvidersFactoryIndex = indexOf(\n        token,\n        tInjectables,\n        beginIndex,\n        beginIndex + cptViewProvidersCount,\n      );\n      const doesProvidersFactoryExist =\n        existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];\n      const doesViewProvidersFactoryExist =\n        existingViewProvidersFactoryIndex >= 0 &&\n        lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n\n      if (\n        (isViewProvider && !doesViewProvidersFactoryExist) ||\n        (!isViewProvider && !doesProvidersFactoryExist)\n      ) {\n        // Cases 1.a and 2.a\n        diPublicInInjector(\n          getOrCreateNodeInjectorForNode(\n            tNode as TElementNode | TContainerNode | TElementContainerNode,\n            lView,\n          ),\n          tView,\n          token,\n        );\n        const factory = multiFactory(\n          isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver,\n          lInjectablesBlueprint.length,\n          isViewProvider,\n          isComponent,\n          providerFactory,\n        );\n        if (!isViewProvider && doesViewProvidersFactoryExist) {\n          lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n        }\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += TNodeProviderIndexes.CptViewProvidersCountShifter;\n        }\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        // Cases 1.b and 2.b\n        const indexInFactory = multiFactoryAdd(\n          lInjectablesBlueprint![\n            isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex\n          ],\n          providerFactory,\n          !isViewProvider && isComponent,\n        );\n        registerDestroyHooksIfSupported(\n          tView,\n          provider,\n          existingProvidersFactoryIndex > -1\n            ? existingProvidersFactoryIndex\n            : existingViewProvidersFactoryIndex,\n          indexInFactory,\n        );\n      }\n      if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n        lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders!++;\n      }\n    }\n  }\n}\n\n/**\n * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.\n * @param tView `TView` in which to register the hook.\n * @param provider Provider whose hook should be registered.\n * @param contextIndex Index under which to find the context for the hook when it's being invoked.\n * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi\n * provider factory.\n */\nfunction registerDestroyHooksIfSupported(\n  tView: TView,\n  provider: Exclude<Provider, any[]>,\n  contextIndex: number,\n  indexInFactory?: number,\n) {\n  const providerIsTypeProvider = isTypeProvider(provider);\n  const providerIsClassProvider = isClassProvider(provider);\n\n  if (providerIsTypeProvider || providerIsClassProvider) {\n    // Resolve forward references as `useClass` can hold a forward reference.\n    const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;\n    const prototype = classToken.prototype;\n    const ngOnDestroy = prototype.ngOnDestroy;\n\n    if (ngOnDestroy) {\n      const hooks = tView.destroyHooks || (tView.destroyHooks = []);\n\n      if (!providerIsTypeProvider && (provider as ClassProvider).multi) {\n        ngDevMode &&\n          assertDefined(\n            indexInFactory,\n            'indexInFactory when registering multi factory destroy hook',\n          );\n        const existingCallbacksIndex = hooks.indexOf(contextIndex);\n\n        if (existingCallbacksIndex === -1) {\n          hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);\n        } else {\n          (hooks[existingCallbacksIndex + 1] as DestroyHookData).push(indexInFactory!, ngOnDestroy);\n        }\n      } else {\n        hooks.push(contextIndex, ngOnDestroy);\n      }\n    }\n  }\n}\n\n/**\n * Add a factory in a multi factory.\n * @returns Index at which the factory was inserted.\n */\nfunction multiFactoryAdd(\n  multiFactory: NodeInjectorFactory,\n  factory: () => any,\n  isComponentProvider: boolean,\n): number {\n  if (isComponentProvider) {\n    multiFactory.componentProviders!++;\n  }\n  return multiFactory.multi!.push(factory) - 1;\n}\n\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n */\nfunction indexOf(item: any, arr: any[], begin: number, end: number) {\n  for (let i = begin; i < end; i++) {\n    if (arr[i] === item) return i;\n  }\n  return -1;\n}\n\n/**\n * Use this with `multi` `providers`.\n */\nfunction multiProvidersFactoryResolver(\n  this: NodeInjectorFactory,\n  _: undefined,\n  tData: TData,\n  lData: LView,\n  tNode: TDirectiveHostNode,\n): any[] {\n  return multiResolve(this.multi!, []);\n}\n\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n */\nfunction multiViewProvidersFactoryResolver(\n  this: NodeInjectorFactory,\n  _: undefined,\n  tData: TData,\n  lView: LView,\n  tNode: TDirectiveHostNode,\n): any[] {\n  const factories = this.multi!;\n  let result: any[];\n  if (this.providerFactory) {\n    const componentCount = this.providerFactory.componentProviders!;\n    const multiProviders = getNodeInjectable(\n      lView,\n      lView[TVIEW],\n      this.providerFactory!.index!,\n      tNode,\n    );\n    // Copy the section of the array which contains `multi` `providers` from the component\n    result = multiProviders.slice(0, componentCount);\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n    // Copy the section of the array which contains `multi` `providers` from other directives\n    for (let i = componentCount; i < multiProviders.length; i++) {\n      result.push(multiProviders[i]);\n    }\n  } else {\n    result = [];\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n  }\n  return result;\n}\n\n/**\n * Maps an array of factories into an array of values.\n */\nfunction multiResolve(factories: Array<() => any>, result: any[]): any[] {\n  for (let i = 0; i < factories.length; i++) {\n    const factory = factories[i]! as () => null;\n    result.push(factory());\n  }\n  return result;\n}\n\n/**\n * Creates a multi factory.\n */\nfunction multiFactory(\n  factoryFn: (\n    this: NodeInjectorFactory,\n    _: undefined,\n    tData: TData,\n    lData: LView,\n    tNode: TDirectiveHostNode,\n  ) => any,\n  index: number,\n  isViewProvider: boolean,\n  isComponent: boolean,\n  f: () => any,\n): NodeInjectorFactory {\n  const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);\n  factory.multi = [];\n  factory.index = index;\n  factory.componentProviders = 0;\n  multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n  return factory;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {ProcessProvidersFunction, Provider} from '../../di/interface/provider';\nimport {providersResolver} from '../di_setup';\nimport {DirectiveDef} from '../interfaces/definition';\n\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * ```ts\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ɵcmp = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    decls: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        ɵɵtext(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        ɵɵtextInterpolate(ctx.greeter.greet());\n *      }\n *    },\n *    features: [ɵɵProvidersFeature([GreeterDE])]\n *  });\n * }\n * ```\n *\n * @param definition\n *\n * @codeGenApi\n */\nexport function ɵɵProvidersFeature<T>(providers: Provider[], viewProviders: Provider[] = []) {\n  return (definition: DirectiveDef<T>) => {\n    definition.providersResolver = (\n      def: DirectiveDef<T>,\n      processProvidersFn?: ProcessProvidersFunction,\n    ) => {\n      return providersResolver(\n        def, //\n        processProvidersFn ? processProvidersFn(providers) : providers, //\n        viewProviders,\n      );\n    };\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {assertIndexInRange} from '../util/assert';\nimport {\n  bindingUpdated,\n  bindingUpdated2,\n  bindingUpdated3,\n  bindingUpdated4,\n  getBinding,\n  updateBinding,\n} from './bindings';\nimport {LView} from './interfaces/view';\nimport {getBindingRoot, getLView} from './state';\nimport {NO_CHANGE} from './tokens';\n\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns a value\n * @param thisArg Optional calling context of pureFn\n * @returns value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction0<T>(slotOffset: number, pureFn: () => T, thisArg?: any): T {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  return lView[bindingIndex] === NO_CHANGE\n    ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn())\n    : getBinding(lView, bindingIndex);\n}\n\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction1(\n  slotOffset: number,\n  pureFn: (v: any) => any,\n  exp: any,\n  thisArg?: any,\n): any {\n  return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction2(\n  slotOffset: number,\n  pureFn: (v1: any, v2: any) => any,\n  exp1: any,\n  exp2: any,\n  thisArg?: any,\n): any {\n  return pureFunction2Internal(\n    getLView(),\n    getBindingRoot(),\n    slotOffset,\n    pureFn,\n    exp1,\n    exp2,\n    thisArg,\n  );\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction3(\n  slotOffset: number,\n  pureFn: (v1: any, v2: any, v3: any) => any,\n  exp1: any,\n  exp2: any,\n  exp3: any,\n  thisArg?: any,\n): any {\n  return pureFunction3Internal(\n    getLView(),\n    getBindingRoot(),\n    slotOffset,\n    pureFn,\n    exp1,\n    exp2,\n    exp3,\n    thisArg,\n  );\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction4(\n  slotOffset: number,\n  pureFn: (v1: any, v2: any, v3: any, v4: any) => any,\n  exp1: any,\n  exp2: any,\n  exp3: any,\n  exp4: any,\n  thisArg?: any,\n): any {\n  return pureFunction4Internal(\n    getLView(),\n    getBindingRoot(),\n    slotOffset,\n    pureFn,\n    exp1,\n    exp2,\n    exp3,\n    exp4,\n    thisArg,\n  );\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction5(\n  slotOffset: number,\n  pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any) => any,\n  exp1: any,\n  exp2: any,\n  exp3: any,\n  exp4: any,\n  exp5: any,\n  thisArg?: any,\n): any {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated(lView, bindingIndex + 4, exp5) || different\n    ? updateBinding(\n        lView,\n        bindingIndex + 5,\n        thisArg\n          ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5)\n          : pureFn(exp1, exp2, exp3, exp4, exp5),\n      )\n    : getBinding(lView, bindingIndex + 5);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction6(\n  slotOffset: number,\n  pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any) => any,\n  exp1: any,\n  exp2: any,\n  exp3: any,\n  exp4: any,\n  exp5: any,\n  exp6: any,\n  thisArg?: any,\n): any {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different\n    ? updateBinding(\n        lView,\n        bindingIndex + 6,\n        thisArg\n          ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6)\n          : pureFn(exp1, exp2, exp3, exp4, exp5, exp6),\n      )\n    : getBinding(lView, bindingIndex + 6);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction7(\n  slotOffset: number,\n  pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any) => any,\n  exp1: any,\n  exp2: any,\n  exp3: any,\n  exp4: any,\n  exp5: any,\n  exp6: any,\n  exp7: any,\n  thisArg?: any,\n): any {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different\n    ? updateBinding(\n        lView,\n        bindingIndex + 7,\n        thisArg\n          ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7)\n          : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7),\n      )\n    : getBinding(lView, bindingIndex + 7);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction8(\n  slotOffset: number,\n  pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any) => any,\n  exp1: any,\n  exp2: any,\n  exp3: any,\n  exp4: any,\n  exp5: any,\n  exp6: any,\n  exp7: any,\n  exp8: any,\n  thisArg?: any,\n): any {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different\n    ? updateBinding(\n        lView,\n        bindingIndex + 8,\n        thisArg\n          ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)\n          : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8),\n      )\n    : getBinding(lView, bindingIndex + 8);\n}\n\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunctionV(\n  slotOffset: number,\n  pureFn: (...v: any[]) => any,\n  exps: any[],\n  thisArg?: any,\n): any {\n  return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);\n}\n\n/**\n * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized\n * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first\n * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE\n * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert\n * it to `undefined`.\n */\nfunction getPureFunctionReturnValue(lView: LView, returnValueIndex: number) {\n  ngDevMode && assertIndexInRange(lView, returnValueIndex);\n  const lastReturnValue = lView[returnValueIndex];\n  return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;\n}\n\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction1Internal(\n  lView: LView,\n  bindingRoot: number,\n  slotOffset: number,\n  pureFn: (v: any) => any,\n  exp: any,\n  thisArg?: any,\n): any {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated(lView, bindingIndex, exp)\n    ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp))\n    : getPureFunctionReturnValue(lView, bindingIndex + 1);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction2Internal(\n  lView: LView,\n  bindingRoot: number,\n  slotOffset: number,\n  pureFn: (v1: any, v2: any) => any,\n  exp1: any,\n  exp2: any,\n  thisArg?: any,\n): any {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated2(lView, bindingIndex, exp1, exp2)\n    ? updateBinding(\n        lView,\n        bindingIndex + 2,\n        thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2),\n      )\n    : getPureFunctionReturnValue(lView, bindingIndex + 2);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction3Internal(\n  lView: LView,\n  bindingRoot: number,\n  slotOffset: number,\n  pureFn: (v1: any, v2: any, v3: any) => any,\n  exp1: any,\n  exp2: any,\n  exp3: any,\n  thisArg?: any,\n): any {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3)\n    ? updateBinding(\n        lView,\n        bindingIndex + 3,\n        thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3),\n      )\n    : getPureFunctionReturnValue(lView, bindingIndex + 3);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n */\nexport function pureFunction4Internal(\n  lView: LView,\n  bindingRoot: number,\n  slotOffset: number,\n  pureFn: (v1: any, v2: any, v3: any, v4: any) => any,\n  exp1: any,\n  exp2: any,\n  exp3: any,\n  exp4: any,\n  thisArg?: any,\n): any {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4)\n    ? updateBinding(\n        lView,\n        bindingIndex + 4,\n        thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4),\n      )\n    : getPureFunctionReturnValue(lView, bindingIndex + 4);\n}\n\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunctionVInternal(\n  lView: LView,\n  bindingRoot: number,\n  slotOffset: number,\n  pureFn: (...v: any[]) => any,\n  exps: any[],\n  thisArg?: any,\n): any {\n  let bindingIndex = bindingRoot + slotOffset;\n  let different = false;\n  for (let i = 0; i < exps.length; i++) {\n    bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n  }\n  return different\n    ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps))\n    : getPureFunctionReturnValue(lView, bindingIndex);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {PipeTransform} from '../change_detection/pipe_transform';\nimport {setInjectImplementation} from '../di/inject_switch';\nimport {formatRuntimeError, RuntimeError, RuntimeErrorCode} from '../errors';\nimport {Type} from '../interface/type';\n\nimport {InjectorProfilerContext, setInjectorProfilerContext} from './debug/injector_profiler';\nimport {getFactoryDef} from './definition_factory';\nimport {NodeInjector, setIncludeViewProviders} from './di';\nimport {store, ɵɵdirectiveInject} from './instructions/all';\nimport {isHostComponentStandalone} from './instructions/element_validation';\nimport {PipeDef, PipeDefList} from './interfaces/definition';\nimport {TTextNode} from './interfaces/node';\nimport {CONTEXT, DECLARATION_COMPONENT_VIEW, HEADER_OFFSET, LView, TVIEW} from './interfaces/view';\nimport {\n  pureFunction1Internal,\n  pureFunction2Internal,\n  pureFunction3Internal,\n  pureFunction4Internal,\n  pureFunctionVInternal,\n} from './pure_function';\nimport {getBindingRoot, getCurrentTNode, getLView, getTView} from './state';\nimport {load} from './util/view_utils';\n\n/**\n * Create a pipe.\n *\n * @param index Pipe index where the pipe will be stored.\n * @param pipeName The name of the pipe\n * @returns T the instance of the pipe.\n *\n * @codeGenApi\n */\nexport function ɵɵpipe(index: number, pipeName: string): any {\n  const tView = getTView();\n  let pipeDef: PipeDef<any>;\n  const adjustedIndex = index + HEADER_OFFSET;\n\n  if (tView.firstCreatePass) {\n    // The `getPipeDef` throws if a pipe with a given name is not found\n    // (so we use non-null assertion below).\n    pipeDef = getPipeDef(pipeName, tView.pipeRegistry)!;\n    tView.data[adjustedIndex] = pipeDef;\n    if (pipeDef.onDestroy) {\n      (tView.destroyHooks ??= []).push(adjustedIndex, pipeDef.onDestroy);\n    }\n  } else {\n    pipeDef = tView.data[adjustedIndex] as PipeDef<any>;\n  }\n\n  const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));\n\n  let previousInjectorProfilerContext: InjectorProfilerContext;\n  if (ngDevMode) {\n    previousInjectorProfilerContext = setInjectorProfilerContext({\n      injector: new NodeInjector(getCurrentTNode() as TTextNode, getLView()),\n      token: pipeDef.type,\n    });\n  }\n  const previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);\n  try {\n    // DI for pipes is supposed to behave like directives when placed on a component\n    // host node, which means that we have to disable access to `viewProviders`.\n    const previousIncludeViewProviders = setIncludeViewProviders(false);\n    const pipeInstance = pipeFactory();\n    setIncludeViewProviders(previousIncludeViewProviders);\n    store(tView, getLView(), adjustedIndex, pipeInstance);\n    return pipeInstance;\n  } finally {\n    // we have to restore the injector implementation in finally, just in case the creation of the\n    // pipe throws an error.\n    setInjectImplementation(previousInjectImplementation);\n    ngDevMode && setInjectorProfilerContext(previousInjectorProfilerContext!);\n  }\n}\n\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param name Name of pipe to resolve\n * @param registry Full list of available pipes\n * @returns Matching PipeDef\n */\nfunction getPipeDef(name: string, registry: PipeDefList | null): PipeDef<any> | undefined {\n  if (registry) {\n    if (ngDevMode) {\n      const pipes = registry.filter((pipe) => pipe.name === name);\n      // TODO: Throw an error in the next major\n      if (pipes.length > 1) {\n        console.warn(\n          formatRuntimeError(\n            RuntimeErrorCode.MULTIPLE_MATCHING_PIPES,\n            getMultipleMatchingPipesMessage(name),\n          ),\n        );\n      }\n    }\n    for (let i = registry.length - 1; i >= 0; i--) {\n      const pipeDef = registry[i];\n      if (name === pipeDef.name) {\n        return pipeDef;\n      }\n    }\n  }\n  if (ngDevMode) {\n    throw new RuntimeError(RuntimeErrorCode.PIPE_NOT_FOUND, getPipeNotFoundErrorMessage(name));\n  }\n  return;\n}\n\n/**\n * Generates a helpful error message for the user when multiple pipes match the name.\n *\n * @param name Name of the pipe\n * @returns The error message\n */\nfunction getMultipleMatchingPipesMessage(name: string) {\n  const lView = getLView();\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW] as LView<Type<unknown>>;\n  const context = declarationLView[CONTEXT];\n  const hostIsStandalone = isHostComponentStandalone(lView);\n  const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\n  const verifyMessage = `check ${\n    hostIsStandalone ? \"'@Component.imports' of this component\" : 'the imports of this module'\n  }`;\n  const errorMessage = `Multiple pipes match the name \\`${name}\\`${componentInfoMessage}. ${verifyMessage}`;\n  return errorMessage;\n}\n\n/**\n * Generates a helpful error message for the user when a pipe is not found.\n *\n * @param name Name of the missing pipe\n * @returns The error message\n */\nfunction getPipeNotFoundErrorMessage(name: string) {\n  const lView = getLView();\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW] as LView<Type<unknown>>;\n  const context = declarationLView[CONTEXT];\n  const hostIsStandalone = isHostComponentStandalone(lView);\n  const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\n  const verifyMessage = `Verify that it is ${\n    hostIsStandalone\n      ? \"included in the '@Component.imports' of this component\"\n      : 'declared or imported in this module'\n  }`;\n  const errorMessage = `The pipe '${name}' could not be found${componentInfoMessage}. ${verifyMessage}`;\n  return errorMessage;\n}\n\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param offset the binding offset\n * @param v1 1st argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBind1(index: number, offset: number, v1: any): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex)\n    ? pureFunction1Internal(\n        lView,\n        getBindingRoot(),\n        offset,\n        pipeInstance.transform,\n        v1,\n        pipeInstance,\n      )\n    : pipeInstance.transform(v1);\n}\n\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBind2(index: number, slotOffset: number, v1: any, v2: any): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex)\n    ? pureFunction2Internal(\n        lView,\n        getBindingRoot(),\n        slotOffset,\n        pipeInstance.transform,\n        v1,\n        v2,\n        pipeInstance,\n      )\n    : pipeInstance.transform(v1, v2);\n}\n\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 4rd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBind3(index: number, slotOffset: number, v1: any, v2: any, v3: any): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex)\n    ? pureFunction3Internal(\n        lView,\n        getBindingRoot(),\n        slotOffset,\n        pipeInstance.transform,\n        v1,\n        v2,\n        v3,\n        pipeInstance,\n      )\n    : pipeInstance.transform(v1, v2, v3);\n}\n\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 3rd argument to {@link PipeTransform#transform}.\n * @param v4 4th argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBind4(\n  index: number,\n  slotOffset: number,\n  v1: any,\n  v2: any,\n  v3: any,\n  v4: any,\n): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex)\n    ? pureFunction4Internal(\n        lView,\n        getBindingRoot(),\n        slotOffset,\n        pipeInstance.transform,\n        v1,\n        v2,\n        v3,\n        v4,\n        pipeInstance,\n      )\n    : pipeInstance.transform(v1, v2, v3, v4);\n}\n\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBindV(index: number, slotOffset: number, values: [any, ...any[]]): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex)\n    ? pureFunctionVInternal(\n        lView,\n        getBindingRoot(),\n        slotOffset,\n        pipeInstance.transform,\n        values,\n        pipeInstance,\n      )\n    : pipeInstance.transform.apply(pipeInstance, values);\n}\n\nfunction isPure(lView: LView, index: number): boolean {\n  return (<PipeDef<any>>lView[TVIEW].data[index]).pure;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {createTemplateRef, TemplateRef} from '../linker/template_ref';\nimport {TNode} from './interfaces/node';\nimport {LView} from './interfaces/view';\n\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n *\n * @codeGenApi\n */\nexport function ɵɵtemplateRefExtractor(tNode: TNode, lView: LView): TemplateRef<any> | null {\n  return createTemplateRef(tNode, lView);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\nexport class Version {\n  public readonly major: string;\n  public readonly minor: string;\n  public readonly patch: string;\n\n  constructor(public full: string) {\n    const parts = full.split('.');\n    this.major = parts[0];\n    this.minor = parts[1];\n    this.patch = parts.slice(2).join('.');\n  }\n}\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('19.2.3');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable} from '../di/injectable';\nimport {InjectionToken} from '../di/injection_token';\nimport {StaticProvider} from '../di/interface/provider';\nimport {Type} from '../interface/type';\nimport {ViewEncapsulation} from '../metadata/view';\nimport {ComponentFactory as ComponentFactoryR3} from '../render3/component_ref';\nimport {getComponentDef, getNgModuleDef} from '../render3/def_getters';\nimport {NgModuleFactory as NgModuleFactoryR3} from '../render3/ng_module_ref';\nimport {maybeUnwrapFn} from '../render3/util/misc_utils';\n\nimport {ComponentFactory} from './component_factory';\nimport {NgModuleFactory} from './ng_module_factory';\n\n/**\n * Combination of NgModuleFactory and ComponentFactories.\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n */\nexport class ModuleWithComponentFactories<T> {\n  constructor(\n    public ngModuleFactory: NgModuleFactory<T>,\n    public componentFactories: ComponentFactory<any>[],\n  ) {}\n}\n\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n */\n@Injectable({providedIn: 'root'})\nexport class Compiler {\n  /**\n   * Compiles the given NgModule and all of its components. All templates of the components\n   * have to be inlined.\n   */\n  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> {\n    return new NgModuleFactoryR3(moduleType);\n  }\n\n  /**\n   * Compiles the given NgModule and all of its components\n   */\n  compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n    return Promise.resolve(this.compileModuleSync(moduleType));\n  }\n\n  /**\n   * Same as {@link Compiler#compileModuleSync compileModuleSync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    const ngModuleFactory = this.compileModuleSync(moduleType);\n    const moduleDef = getNgModuleDef(moduleType)!;\n    const componentFactories = maybeUnwrapFn(moduleDef.declarations).reduce(\n      (factories: ComponentFactory<any>[], declaration: Type<any>) => {\n        const componentDef = getComponentDef(declaration);\n        componentDef && factories.push(new ComponentFactoryR3(componentDef));\n        return factories;\n      },\n      [] as ComponentFactory<any>[],\n    );\n    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n  }\n\n  /**\n   * Same as {@link Compiler#compileModuleAsync compileModuleAsync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsAsync<T>(\n    moduleType: Type<T>,\n  ): Promise<ModuleWithComponentFactories<T>> {\n    return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));\n  }\n\n  /**\n   * Clears all caches.\n   */\n  clearCache(): void {}\n\n  /**\n   * Clears the cache for the given component/ngModule.\n   */\n  clearCacheFor(type: Type<any>) {}\n\n  /**\n   * Returns the id for a given NgModule, if one is defined and known to the compiler.\n   */\n  getModuleId(moduleType: Type<any>): string | undefined {\n    return undefined;\n  }\n}\n\n/**\n * Options for creating a compiler.\n *\n * @publicApi\n */\nexport type CompilerOptions = {\n  defaultEncapsulation?: ViewEncapsulation;\n  providers?: StaticProvider[];\n  preserveWhitespaces?: boolean;\n};\n\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @publicApi\n */\nexport const COMPILER_OPTIONS = new InjectionToken<CompilerOptions[]>(\n  ngDevMode ? 'compilerOptions' : '',\n);\n\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n */\nexport abstract class CompilerFactory {\n  abstract createCompiler(options?: CompilerOptions[]): Compiler;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {getCompilerFacade, JitCompilerUsage} from '../compiler/compiler_facade';\nimport {Injector} from '../di/injector';\nimport {Type} from '../interface/type';\nimport {COMPILER_OPTIONS, CompilerOptions} from '../linker/compiler';\nimport {NgModuleFactory} from '../linker/ng_module_factory';\nimport {\n  isComponentResourceResolutionQueueEmpty,\n  resolveComponentResources,\n} from '../metadata/resource_loading';\nimport {assertNgModuleType} from '../render3/assert';\nimport {setJitOptions} from '../render3/jit/jit_options';\nimport {NgModuleFactory as R3NgModuleFactory} from '../render3/ng_module_ref';\n\nexport function compileNgModuleFactory<M>(\n  injector: Injector,\n  options: CompilerOptions,\n  moduleType: Type<M>,\n): Promise<NgModuleFactory<M>> {\n  ngDevMode && assertNgModuleType(moduleType);\n\n  const moduleFactory = new R3NgModuleFactory(moduleType);\n\n  // All of the logic below is irrelevant for AOT-compiled code.\n  if (typeof ngJitMode !== 'undefined' && !ngJitMode) {\n    return Promise.resolve(moduleFactory);\n  }\n\n  const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);\n\n  // Configure the compiler to use the provided options. This call may fail when multiple modules\n  // are bootstrapped with incompatible options, as a component can only be compiled according to\n  // a single set of options.\n  setJitOptions({\n    defaultEncapsulation: _lastDefined(compilerOptions.map((opts) => opts.defaultEncapsulation)),\n    preserveWhitespaces: _lastDefined(compilerOptions.map((opts) => opts.preserveWhitespaces)),\n  });\n\n  if (isComponentResourceResolutionQueueEmpty()) {\n    return Promise.resolve(moduleFactory);\n  }\n\n  const compilerProviders = compilerOptions.flatMap((option) => option.providers ?? []);\n\n  // In case there are no compiler providers, we just return the module factory as\n  // there won't be any resource loader. This can happen with Ivy, because AOT compiled\n  // modules can be still passed through \"bootstrapModule\". In that case we shouldn't\n  // unnecessarily require the JIT compiler.\n  if (compilerProviders.length === 0) {\n    return Promise.resolve(moduleFactory);\n  }\n\n  const compiler = getCompilerFacade({\n    usage: JitCompilerUsage.Decorator,\n    kind: 'NgModule',\n    type: moduleType,\n  });\n  const compilerInjector = Injector.create({providers: compilerProviders});\n  const resourceLoader = compilerInjector.get(compiler.ResourceLoader);\n  // The resource loader can also return a string while the \"resolveComponentResources\"\n  // always expects a promise. Therefore we need to wrap the returned value in a promise.\n  return resolveComponentResources((url) => Promise.resolve(resourceLoader.get(url))).then(\n    () => moduleFactory,\n  );\n}\n\nfunction _lastDefined<T>(args: T[]): T | undefined {\n  for (let i = args.length - 1; i >= 0; i--) {\n    if (args[i] !== undefined) {\n      return args[i];\n    }\n  }\n  return undefined;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Subscription} from 'rxjs';\n\nimport {ApplicationRef} from '../../application/application_ref';\nimport {\n  ENVIRONMENT_INITIALIZER,\n  EnvironmentProviders,\n  inject,\n  Injectable,\n  InjectionToken,\n  makeEnvironmentProviders,\n  StaticProvider,\n} from '../../di';\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {PendingTasksInternal} from '../../pending_tasks';\nimport {performanceMarkFeature} from '../../util/performance';\nimport {NgZone} from '../../zone';\nimport {InternalNgZoneOptions} from '../../zone/ng_zone';\n\nimport {\n  ChangeDetectionScheduler,\n  ZONELESS_SCHEDULER_DISABLED,\n  ZONELESS_ENABLED,\n  SCHEDULE_IN_ROOT_ZONE,\n} from './zoneless_scheduling';\nimport {SCHEDULE_IN_ROOT_ZONE_DEFAULT} from './flags';\n\n@Injectable({providedIn: 'root'})\nexport class NgZoneChangeDetectionScheduler {\n  private readonly zone = inject(NgZone);\n  private readonly changeDetectionScheduler = inject(ChangeDetectionScheduler);\n  private readonly applicationRef = inject(ApplicationRef);\n\n  private _onMicrotaskEmptySubscription?: Subscription;\n\n  initialize(): void {\n    if (this._onMicrotaskEmptySubscription) {\n      return;\n    }\n\n    this._onMicrotaskEmptySubscription = this.zone.onMicrotaskEmpty.subscribe({\n      next: () => {\n        // `onMicroTaskEmpty` can happen _during_ the zoneless scheduler change detection because\n        // zone.run(() => {}) will result in `checkStable` at the end of the `zone.run` closure\n        // and emit `onMicrotaskEmpty` synchronously if run coalsecing is false.\n        if (this.changeDetectionScheduler.runningTick) {\n          return;\n        }\n        this.zone.run(() => {\n          this.applicationRef.tick();\n        });\n      },\n    });\n  }\n\n  ngOnDestroy() {\n    this._onMicrotaskEmptySubscription?.unsubscribe();\n  }\n}\n\n/**\n * Internal token used to verify that `provideZoneChangeDetection` is not used\n * with the bootstrapModule API.\n */\nexport const PROVIDED_NG_ZONE = new InjectionToken<boolean>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'provideZoneChangeDetection token' : '',\n  {factory: () => false},\n);\n\nexport function internalProvideZoneChangeDetection({\n  ngZoneFactory,\n  ignoreChangesOutsideZone,\n  scheduleInRootZone,\n}: {\n  ngZoneFactory?: () => NgZone;\n  ignoreChangesOutsideZone?: boolean;\n  scheduleInRootZone?: boolean;\n}): StaticProvider[] {\n  ngZoneFactory ??= () =>\n    new NgZone({...getNgZoneOptions(), scheduleInRootZone} as InternalNgZoneOptions);\n  return [\n    {provide: NgZone, useFactory: ngZoneFactory},\n    {\n      provide: ENVIRONMENT_INITIALIZER,\n      multi: true,\n      useFactory: () => {\n        const ngZoneChangeDetectionScheduler = inject(NgZoneChangeDetectionScheduler, {\n          optional: true,\n        });\n        if (\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          ngZoneChangeDetectionScheduler === null\n        ) {\n          throw new RuntimeError(\n            RuntimeErrorCode.MISSING_REQUIRED_INJECTABLE_IN_BOOTSTRAP,\n            `A required Injectable was not found in the dependency injection tree. ` +\n              'If you are bootstrapping an NgModule, make sure that the `BrowserModule` is imported.',\n          );\n        }\n        return () => ngZoneChangeDetectionScheduler!.initialize();\n      },\n    },\n    {\n      provide: ENVIRONMENT_INITIALIZER,\n      multi: true,\n      useFactory: () => {\n        const service = inject(ZoneStablePendingTask);\n        return () => {\n          service.initialize();\n        };\n      },\n    },\n    // Always disable scheduler whenever explicitly disabled, even if another place called\n    // `provideZoneChangeDetection` without the 'ignore' option.\n    ignoreChangesOutsideZone === true ? {provide: ZONELESS_SCHEDULER_DISABLED, useValue: true} : [],\n    {\n      provide: SCHEDULE_IN_ROOT_ZONE,\n      useValue: scheduleInRootZone ?? SCHEDULE_IN_ROOT_ZONE_DEFAULT,\n    },\n  ];\n}\n\n/**\n * Provides `NgZone`-based change detection for the application bootstrapped using\n * `bootstrapApplication`.\n *\n * `NgZone` is already provided in applications by default. This provider allows you to configure\n * options like `eventCoalescing` in the `NgZone`.\n * This provider is not available for `platformBrowser().bootstrapModule`, which uses\n * `BootstrapOptions` instead.\n *\n * @usageNotes\n * ```ts\n * bootstrapApplication(MyApp, {providers: [\n *   provideZoneChangeDetection({eventCoalescing: true}),\n * ]});\n * ```\n *\n * @publicApi\n * @see {@link /api/platform-browser/bootstrapApplication bootstrapApplication}\n * @see {@link NgZoneOptions}\n */\nexport function provideZoneChangeDetection(options?: NgZoneOptions): EnvironmentProviders {\n  const ignoreChangesOutsideZone = options?.ignoreChangesOutsideZone;\n  const scheduleInRootZone = (options as any)?.scheduleInRootZone;\n  const zoneProviders = internalProvideZoneChangeDetection({\n    ngZoneFactory: () => {\n      const ngZoneOptions = getNgZoneOptions(options);\n      ngZoneOptions.scheduleInRootZone = scheduleInRootZone;\n      if (ngZoneOptions.shouldCoalesceEventChangeDetection) {\n        performanceMarkFeature('NgZone_CoalesceEvent');\n      }\n      return new NgZone(ngZoneOptions);\n    },\n    ignoreChangesOutsideZone,\n    scheduleInRootZone,\n  });\n  return makeEnvironmentProviders([\n    {provide: PROVIDED_NG_ZONE, useValue: true},\n    {provide: ZONELESS_ENABLED, useValue: false},\n    zoneProviders,\n  ]);\n}\n\n/**\n * Used to configure event and run coalescing with `provideZoneChangeDetection`.\n *\n * @publicApi\n *\n * @see {@link provideZoneChangeDetection}\n */\nexport interface NgZoneOptions {\n  /**\n   * Optionally specify coalescing event change detections or not.\n   * Consider the following case.\n   *\n   * ```html\n   * <div (click)=\"doSomething()\">\n   *   <button (click)=\"doSomethingElse()\"></button>\n   * </div>\n   * ```\n   *\n   * When button is clicked, because of the event bubbling, both\n   * event handlers will be called and 2 change detections will be\n   * triggered. We can coalesce such kind of events to trigger\n   * change detection only once.\n   *\n   * By default, this option is set to false, meaning events will\n   * not be coalesced, and change detection will be triggered multiple times.\n   * If this option is set to true, change detection will be triggered\n   * once in the scenario described above.\n   */\n  eventCoalescing?: boolean;\n\n  /**\n   * Optionally specify if `NgZone#run()` method invocations should be coalesced\n   * into a single change detection.\n   *\n   * Consider the following case.\n   * ```ts\n   * for (let i = 0; i < 10; i ++) {\n   *   ngZone.run(() => {\n   *     // do something\n   *   });\n   * }\n   * ```\n   *\n   * This case triggers the change detection multiple times.\n   * With ngZoneRunCoalescing options, all change detections in an event loop trigger only once.\n   * In addition, the change detection executes in requestAnimation.\n   *\n   */\n  runCoalescing?: boolean;\n\n  /**\n   * When false, change detection is scheduled when Angular receives\n   * a clear indication that templates need to be refreshed. This includes:\n   *\n   * - calling `ChangeDetectorRef.markForCheck`\n   * - calling `ComponentRef.setInput`\n   * - updating a signal that is read in a template\n   * - attaching a view that is marked dirty\n   * - removing a view\n   * - registering a render hook (templates are only refreshed if render hooks do one of the above)\n   *\n   * @deprecated This option was introduced out of caution as a way for developers to opt out of the\n   *    new behavior in v18 which schedule change detection for the above events when they occur\n   *    outside the Zone. After monitoring the results post-release, we have determined that this\n   *    feature is working as desired and do not believe it should ever be disabled by setting\n   *    this option to `true`.\n   */\n  ignoreChangesOutsideZone?: boolean;\n}\n\n// Transforms a set of `BootstrapOptions` (supported by the NgModule-based bootstrap APIs) ->\n// `NgZoneOptions` that are recognized by the NgZone constructor. Passing no options will result in\n// a set of default options returned.\nexport function getNgZoneOptions(options?: NgZoneOptions): InternalNgZoneOptions {\n  return {\n    enableLongStackTrace: typeof ngDevMode === 'undefined' ? false : !!ngDevMode,\n    shouldCoalesceEventChangeDetection: options?.eventCoalescing ?? false,\n    shouldCoalesceRunChangeDetection: options?.runCoalescing ?? false,\n  };\n}\n\n@Injectable({providedIn: 'root'})\nexport class ZoneStablePendingTask {\n  private readonly subscription = new Subscription();\n  private initialized = false;\n  private readonly zone = inject(NgZone);\n  private readonly pendingTasks = inject(PendingTasksInternal);\n\n  initialize() {\n    if (this.initialized) {\n      return;\n    }\n    this.initialized = true;\n\n    let task: number | null = null;\n    if (!this.zone.isStable && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {\n      task = this.pendingTasks.add();\n    }\n\n    this.zone.runOutsideAngular(() => {\n      this.subscription.add(\n        this.zone.onStable.subscribe(() => {\n          NgZone.assertNotInAngularZone();\n\n          // Check whether there are no pending macro/micro tasks in the next tick\n          // to allow for NgZone to update the state.\n          queueMicrotask(() => {\n            if (\n              task !== null &&\n              !this.zone.hasPendingMacrotasks &&\n              !this.zone.hasPendingMicrotasks\n            ) {\n              this.pendingTasks.remove(task);\n              task = null;\n            }\n          });\n        }),\n      );\n    });\n\n    this.subscription.add(\n      this.zone.onUnstable.subscribe(() => {\n        NgZone.assertInAngularZone();\n        task ??= this.pendingTasks.add();\n      }),\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Subscription} from 'rxjs';\n\nimport {ApplicationRef, ApplicationRefDirtyFlags} from '../../application/application_ref';\nimport {Injectable} from '../../di/injectable';\nimport {inject} from '../../di/injector_compatibility';\nimport {EnvironmentProviders} from '../../di/interface/provider';\nimport {makeEnvironmentProviders} from '../../di/provider_collection';\nimport {RuntimeError, RuntimeErrorCode, formatRuntimeError} from '../../errors';\nimport {PendingTasksInternal} from '../../pending_tasks';\nimport {\n  scheduleCallbackWithMicrotask,\n  scheduleCallbackWithRafRace,\n} from '../../util/callback_scheduler';\nimport {performanceMarkFeature} from '../../util/performance';\nimport {NgZone, NgZonePrivate, NoopNgZone, angularZoneInstanceIdProperty} from '../../zone/ng_zone';\n\nimport {\n  ChangeDetectionScheduler,\n  NotificationSource,\n  PROVIDED_ZONELESS,\n  SCHEDULE_IN_ROOT_ZONE,\n  ZONELESS_ENABLED,\n  ZONELESS_SCHEDULER_DISABLED,\n} from './zoneless_scheduling';\nimport {TracingService} from '../../application/tracing';\n\nconst CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT = 100;\nlet consecutiveMicrotaskNotifications = 0;\nlet stackFromLastFewNotifications: string[] = [];\n\nfunction trackMicrotaskNotificationForDebugging() {\n  consecutiveMicrotaskNotifications++;\n  if (CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT - consecutiveMicrotaskNotifications < 5) {\n    const stack = new Error().stack;\n    if (stack) {\n      stackFromLastFewNotifications.push(stack);\n    }\n  }\n\n  if (consecutiveMicrotaskNotifications === CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT) {\n    throw new RuntimeError(\n      RuntimeErrorCode.INFINITE_CHANGE_DETECTION,\n      'Angular could not stabilize because there were endless change notifications within the browser event loop. ' +\n        'The stack from the last several notifications: \\n' +\n        stackFromLastFewNotifications.join('\\n'),\n    );\n  }\n}\n\n@Injectable({providedIn: 'root'})\nexport class ChangeDetectionSchedulerImpl implements ChangeDetectionScheduler {\n  private readonly appRef = inject(ApplicationRef);\n  private readonly taskService = inject(PendingTasksInternal);\n  private readonly ngZone = inject(NgZone);\n  private readonly zonelessEnabled = inject(ZONELESS_ENABLED);\n  private readonly tracing = inject(TracingService, {optional: true});\n  private readonly disableScheduling =\n    inject(ZONELESS_SCHEDULER_DISABLED, {optional: true}) ?? false;\n  private readonly zoneIsDefined = typeof Zone !== 'undefined' && !!Zone.root.run;\n  private readonly schedulerTickApplyArgs = [{data: {'__scheduler_tick__': true}}];\n  private readonly subscriptions = new Subscription();\n  private readonly angularZoneId = this.zoneIsDefined\n    ? (this.ngZone as NgZonePrivate)._inner?.get(angularZoneInstanceIdProperty)\n    : null;\n  private readonly scheduleInRootZone =\n    !this.zonelessEnabled &&\n    this.zoneIsDefined &&\n    (inject(SCHEDULE_IN_ROOT_ZONE, {optional: true}) ?? false);\n\n  private cancelScheduledCallback: null | (() => void) = null;\n  private useMicrotaskScheduler = false;\n  runningTick = false;\n  pendingRenderTaskId: number | null = null;\n\n  constructor() {\n    this.subscriptions.add(\n      this.appRef.afterTick.subscribe(() => {\n        // If the scheduler isn't running a tick but the application ticked, that means\n        // someone called ApplicationRef.tick manually. In this case, we should cancel\n        // any change detections that had been scheduled so we don't run an extra one.\n        if (!this.runningTick) {\n          this.cleanup();\n        }\n      }),\n    );\n    this.subscriptions.add(\n      this.ngZone.onUnstable.subscribe(() => {\n        // If the zone becomes unstable when we're not running tick (this happens from the zone.run),\n        // we should cancel any scheduled change detection here because at this point we\n        // know that the zone will stabilize at some point and run change detection itself.\n        if (!this.runningTick) {\n          this.cleanup();\n        }\n      }),\n    );\n\n    // TODO(atscott): These conditions will need to change when zoneless is the default\n    // Instead, they should flip to checking if ZoneJS scheduling is provided\n    this.disableScheduling ||=\n      !this.zonelessEnabled &&\n      // NoopNgZone without enabling zoneless means no scheduling whatsoever\n      (this.ngZone instanceof NoopNgZone ||\n        // The same goes for the lack of Zone without enabling zoneless scheduling\n        !this.zoneIsDefined);\n  }\n\n  notify(source: NotificationSource): void {\n    if (!this.zonelessEnabled && source === NotificationSource.Listener) {\n      // When the notification comes from a listener, we skip the notification unless the\n      // application has enabled zoneless. Ideally, listeners wouldn't notify the scheduler at all\n      // automatically. We do not know that a developer made a change in the listener callback that\n      // requires an `ApplicationRef.tick` (synchronize templates / run render hooks). We do this\n      // only for an easier migration from OnPush components to zoneless. Because listeners are\n      // usually executed inside the Angular zone and listeners automatically call `markViewDirty`,\n      // developers never needed to manually use `ChangeDetectorRef.markForCheck` or some other API\n      // to make listener callbacks work correctly with `OnPush` components.\n      return;\n    }\n\n    let force = false;\n\n    switch (source) {\n      case NotificationSource.MarkAncestorsForTraversal: {\n        this.appRef.dirtyFlags |= ApplicationRefDirtyFlags.ViewTreeTraversal;\n        break;\n      }\n      case NotificationSource.DebugApplyChanges:\n      case NotificationSource.DeferBlockStateUpdate:\n      case NotificationSource.MarkForCheck:\n      case NotificationSource.Listener:\n      case NotificationSource.SetInput: {\n        this.appRef.dirtyFlags |= ApplicationRefDirtyFlags.ViewTreeCheck;\n        break;\n      }\n      case NotificationSource.CustomElement: {\n        // We use `ViewTreeTraversal` to ensure we refresh the element even if this is triggered\n        // during CD. In practice this is a no-op since the elements code also calls via a\n        // `markForRefresh()` API which sends `NotificationSource.MarkAncestorsForTraversal` anyway.\n        this.appRef.dirtyFlags |= ApplicationRefDirtyFlags.ViewTreeTraversal;\n        force = true;\n        break;\n      }\n      case NotificationSource.RootEffect: {\n        this.appRef.dirtyFlags |= ApplicationRefDirtyFlags.RootEffects;\n        // Root effects still force a CD, even if the scheduler is disabled. This ensures that\n        // effects always run, even when triggered from outside the zone when the scheduler is\n        // otherwise disabled.\n        force = true;\n        break;\n      }\n      case NotificationSource.ViewEffect: {\n        // This is technically a no-op, since view effects will also send a\n        // `MarkAncestorsForTraversal` notification. Still, we set this for logical consistency.\n        this.appRef.dirtyFlags |= ApplicationRefDirtyFlags.ViewTreeTraversal;\n        // View effects still force a CD, even if the scheduler is disabled. This ensures that\n        // effects always run, even when triggered from outside the zone when the scheduler is\n        // otherwise disabled.\n        force = true;\n        break;\n      }\n      case NotificationSource.PendingTaskRemoved: {\n        // Removing a pending task via the public API forces a scheduled tick, ensuring that\n        // stability is async and delayed until there was at least an opportunity to run\n        // application synchronization. This prevents some footguns when working with the\n        // public API for pending tasks where developers attempt to update application state\n        // immediately after removing the last task.\n        force = true;\n        break;\n      }\n      case NotificationSource.ViewDetachedFromDOM:\n      case NotificationSource.ViewAttached:\n      case NotificationSource.RenderHook:\n      case NotificationSource.AsyncAnimationsLoaded:\n      default: {\n        // These notifications only schedule a tick but do not change whether we should refresh\n        // views. Instead, we only need to run render hooks unless another notification from the\n        // other set is also received before `tick` happens.\n        this.appRef.dirtyFlags |= ApplicationRefDirtyFlags.AfterRender;\n      }\n    }\n\n    // If not already defined, attempt to capture a tracing snapshot of this\n    // notification so that the resulting CD run can be attributed to the\n    // context which produced the notification.\n    this.appRef.tracingSnapshot = this.tracing?.snapshot(this.appRef.tracingSnapshot) ?? null;\n\n    if (!this.shouldScheduleTick(force)) {\n      return;\n    }\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (this.useMicrotaskScheduler) {\n        trackMicrotaskNotificationForDebugging();\n      } else {\n        consecutiveMicrotaskNotifications = 0;\n        stackFromLastFewNotifications.length = 0;\n      }\n    }\n\n    const scheduleCallback = this.useMicrotaskScheduler\n      ? scheduleCallbackWithMicrotask\n      : scheduleCallbackWithRafRace;\n    this.pendingRenderTaskId = this.taskService.add();\n    if (this.scheduleInRootZone) {\n      this.cancelScheduledCallback = Zone.root.run(() => scheduleCallback(() => this.tick()));\n    } else {\n      this.cancelScheduledCallback = this.ngZone.runOutsideAngular(() =>\n        scheduleCallback(() => this.tick()),\n      );\n    }\n  }\n\n  private shouldScheduleTick(force: boolean): boolean {\n    if ((this.disableScheduling && !force) || this.appRef.destroyed) {\n      return false;\n    }\n    // already scheduled or running\n    if (this.pendingRenderTaskId !== null || this.runningTick || this.appRef._runningTick) {\n      return false;\n    }\n    // If we're inside the zone don't bother with scheduler. Zone will stabilize\n    // eventually and run change detection.\n    if (\n      !this.zonelessEnabled &&\n      this.zoneIsDefined &&\n      Zone.current.get(angularZoneInstanceIdProperty + this.angularZoneId)\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Calls ApplicationRef._tick inside the `NgZone`.\n   *\n   * Calling `tick` directly runs change detection and cancels any change detection that had been\n   * scheduled previously.\n   *\n   * @param shouldRefreshViews Passed directly to `ApplicationRef._tick` and skips straight to\n   *     render hooks when `false`.\n   */\n  private tick(): void {\n    // When ngZone.run below exits, onMicrotaskEmpty may emit if the zone is\n    // stable. We want to prevent double ticking so we track whether the tick is\n    // already running and skip it if so.\n    if (this.runningTick || this.appRef.destroyed) {\n      return;\n    }\n\n    // If we reach the tick and there is no work to be done in ApplicationRef.tick,\n    // skip it altogether and clean up. There may be no work if, for example, the only\n    // event that notified the scheduler was the removal of a pending task.\n    if (this.appRef.dirtyFlags === ApplicationRefDirtyFlags.None) {\n      this.cleanup();\n      return;\n    }\n\n    // The scheduler used to pass \"whether to check views\" as a boolean flag instead of setting\n    // fine-grained dirtiness flags, and global checking was always used on the first pass. This\n    // created an interesting edge case: if a notification made a view dirty and then ticked via the\n    // scheduler (and not the zone) a global check was still performed.\n    //\n    // Ideally, this would not be the case, and only zone-based ticks would do global passes.\n    // However this is a breaking change and requires fixes in g3. Until this cleanup can be done,\n    // we add the `ViewTreeGlobal` flag to request a global check if any views are dirty in a\n    // scheduled tick (unless zoneless is enabled, in which case global checks aren't really a\n    // thing).\n    //\n    // TODO(alxhub): clean up and remove this workaround as a breaking change.\n    if (!this.zonelessEnabled && this.appRef.dirtyFlags & ApplicationRefDirtyFlags.ViewTreeAny) {\n      this.appRef.dirtyFlags |= ApplicationRefDirtyFlags.ViewTreeGlobal;\n    }\n\n    const task = this.taskService.add();\n    try {\n      this.ngZone.run(\n        () => {\n          this.runningTick = true;\n          this.appRef._tick();\n        },\n        undefined,\n        this.schedulerTickApplyArgs,\n      );\n    } catch (e: unknown) {\n      this.taskService.remove(task);\n      throw e;\n    } finally {\n      this.cleanup();\n    }\n    // If we're notified of a change within 1 microtask of running change\n    // detection, run another round in the same event loop. This allows code\n    // which uses Promise.resolve (see NgModel) to avoid\n    // ExpressionChanged...Error to still be reflected in a single browser\n    // paint, even if that spans multiple rounds of change detection.\n    this.useMicrotaskScheduler = true;\n    scheduleCallbackWithMicrotask(() => {\n      this.useMicrotaskScheduler = false;\n      this.taskService.remove(task);\n    });\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n    this.cleanup();\n  }\n\n  private cleanup() {\n    this.runningTick = false;\n    this.cancelScheduledCallback?.();\n    this.cancelScheduledCallback = null;\n    // If this is the last task, the service will synchronously emit a stable\n    // notification. If there is a subscriber that then acts in a way that\n    // tries to notify the scheduler again, we need to be able to respond to\n    // schedule a new change detection. Therefore, we should clear the task ID\n    // before removing it from the pending tasks (or the tasks service should\n    // not synchronously emit stable, similar to how Zone stableness only\n    // happens if it's still stable after a microtask).\n    if (this.pendingRenderTaskId !== null) {\n      const taskId = this.pendingRenderTaskId;\n      this.pendingRenderTaskId = null;\n      this.taskService.remove(taskId);\n    }\n  }\n}\n\n/**\n * Provides change detection without ZoneJS for the application bootstrapped using\n * `bootstrapApplication`.\n *\n * This function allows you to configure the application to not use the state/state changes of\n * ZoneJS to schedule change detection in the application. This will work when ZoneJS is not present\n * on the page at all or if it exists because something else is using it (either another Angular\n * application which uses ZoneJS for scheduling or some other library that relies on ZoneJS).\n *\n * This can also be added to the `TestBed` providers to configure the test environment to more\n * closely match production behavior. This will help give higher confidence that components are\n * compatible with zoneless change detection.\n *\n * ZoneJS uses browser events to trigger change detection. When using this provider, Angular will\n * instead use Angular APIs to schedule change detection. These APIs include:\n *\n * - `ChangeDetectorRef.markForCheck`\n * - `ComponentRef.setInput`\n * - updating a signal that is read in a template\n * - when bound host or template listeners are triggered\n * - attaching a view that was marked dirty by one of the above\n * - removing a view\n * - registering a render hook (templates are only refreshed if render hooks do one of the above)\n *\n * @usageNotes\n * ```ts\n * bootstrapApplication(MyApp, {providers: [\n *   provideExperimentalZonelessChangeDetection(),\n * ]});\n * ```\n *\n * This API is experimental. Neither the shape, nor the underlying behavior is stable and can change\n * in patch versions. There are known feature gaps and API ergonomic considerations. We will iterate\n * on the exact API based on the feedback and our understanding of the problem and solution space.\n *\n * @publicApi\n * @experimental\n * @see {@link /api/platform-browser/bootstrapApplication bootstrapApplication}\n */\nexport function provideExperimentalZonelessChangeDetection(): EnvironmentProviders {\n  performanceMarkFeature('NgZoneless');\n\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && typeof Zone !== 'undefined' && Zone) {\n    const message = formatRuntimeError(\n      RuntimeErrorCode.UNEXPECTED_ZONEJS_PRESENT_IN_ZONELESS_MODE,\n      `The application is using zoneless change detection, but is still loading Zone.js. ` +\n        `Consider removing Zone.js to get the full benefits of zoneless. ` +\n        `In applications using the Angular CLI, Zone.js is typically included in the \"polyfills\" section of the angular.json file.`,\n    );\n    console.warn(message);\n  }\n\n  return makeEnvironmentProviders([\n    {provide: ChangeDetectionScheduler, useExisting: ChangeDetectionSchedulerImpl},\n    {provide: NgZone, useClass: NoopNgZone},\n    {provide: ZONELESS_ENABLED, useValue: true},\n    {provide: SCHEDULE_IN_ROOT_ZONE, useValue: false},\n    typeof ngDevMode === 'undefined' || ngDevMode\n      ? [{provide: PROVIDED_ZONELESS, useValue: true}]\n      : [],\n  ]);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '../di/injection_token';\nimport {inject} from '../di/injector_compatibility';\nimport {InjectFlags} from '../di/interface/injector';\n\nimport {DEFAULT_LOCALE_ID, USD_CURRENCY_CODE} from './localization';\n\ndeclare const $localize: {locale?: string};\n\n/**\n * Work out the locale from the potential global properties.\n *\n * * Closure Compiler: use `goog.LOCALE`.\n * * Ivy enabled: use `$localize.locale`\n */\nexport function getGlobalLocale(): string {\n  if (\n    typeof ngI18nClosureMode !== 'undefined' &&\n    ngI18nClosureMode &&\n    typeof goog !== 'undefined' &&\n    goog.LOCALE !== 'en'\n  ) {\n    // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.\n    // * In order to preserve backwards compatibility, we use Angular default value over\n    //   Closure Compiler's one.\n    return goog.LOCALE;\n  } else {\n    // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE\n    // COMPILE-TIME INLINER.\n    //\n    // * During compile time inlining of translations the expression will be replaced\n    //   with a string literal that is the current locale. Other forms of this expression are not\n    //   guaranteed to be replaced.\n    //\n    // * During runtime translation evaluation, the developer is required to set `$localize.locale`\n    //   if required, or just to provide their own `LOCALE_ID` provider.\n    return (typeof $localize !== 'undefined' && $localize.locale) || DEFAULT_LOCALE_ID;\n  }\n}\n\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n/locale-id) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * import { LOCALE_ID } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const LOCALE_ID: InjectionToken<string> = new InjectionToken(ngDevMode ? 'LocaleId' : '', {\n  providedIn: 'root',\n  factory: () =>\n    inject(LOCALE_ID, InjectFlags.Optional | InjectFlags.SkipSelf) || getGlobalLocale(),\n});\n\n/**\n * Provide this token to set the default currency code your application uses for\n * CurrencyPipe when there is no currency code passed into it. This is only used by\n * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.\n *\n * See the [i18n guide](guide/i18n/locale-id) for more information.\n *\n * <div class=\"docs-alert docs-alert-helpful\">\n *\n * The default currency code is currently always `USD`.\n *\n * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in\n * your application `NgModule`:\n *\n * ```ts\n * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}\n * ```\n *\n * </div>\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const DEFAULT_CURRENCY_CODE = new InjectionToken<string>(\n  ngDevMode ? 'DefaultCurrencyCode' : '',\n  {\n    providedIn: 'root',\n    factory: () => USD_CURRENCY_CODE,\n  },\n);\n\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n/merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * import { TRANSLATIONS } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const TRANSLATIONS = new InjectionToken<string>(ngDevMode ? 'Translations' : '');\n\n/**\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n/merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const TRANSLATIONS_FORMAT = new InjectionToken<string>(\n  ngDevMode ? 'TranslationsFormat' : '',\n);\n\n/**\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\n * that the compiler should use in case of missing translations:\n * - Error: throw if you have missing translations.\n * - Warning (default): show a warning in the console and/or shell.\n * - Ignore: do nothing.\n *\n * See the [i18n guide](guide/i18n/merge#report-missing-translations) for more information.\n *\n * @usageNotes\n * ### Example\n * ```ts\n * import { MissingTranslationStrategy } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   missingTranslation: MissingTranslationStrategy.Error\n * });\n * ```\n *\n * @publicApi\n */\nexport enum MissingTranslationStrategy {\n  Error = 0,\n  Warning = 1,\n  Ignore = 2,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '../di';\n\n/**\n * Internal token that allows to register extra callbacks that should be invoked during the\n * `PlatformRef.destroy` operation. This token is needed to avoid a direct reference to the\n * `PlatformRef` class (i.e. register the callback via `PlatformRef.onDestroy`), thus making the\n * entire class tree-shakeable.\n */\nexport const PLATFORM_DESTROY_LISTENERS = new InjectionToken<Set<VoidFunction>>(\n  ngDevMode ? 'PlatformDestroyListeners' : '',\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {Subscription} from 'rxjs';\n\nimport {PROVIDED_NG_ZONE} from '../change_detection/scheduling/ng_zone_scheduling';\nimport {R3Injector} from '../di/r3_injector';\nimport {ErrorHandler} from '../error_handler';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {DEFAULT_LOCALE_ID} from '../i18n/localization';\nimport {LOCALE_ID} from '../i18n/tokens';\nimport {ImagePerformanceWarning} from '../image_performance_warning';\nimport {Type} from '../interface/type';\nimport {PLATFORM_DESTROY_LISTENERS} from './platform_destroy_listeners';\nimport {setLocaleId} from '../render3/i18n/i18n_locale_id';\nimport {NgZone} from '../zone/ng_zone';\n\nimport {ApplicationInitStatus} from '../application/application_init';\nimport {ApplicationRef, remove} from '../application/application_ref';\nimport {PROVIDED_ZONELESS} from '../change_detection/scheduling/zoneless_scheduling';\nimport {InjectionToken, Injector} from '../di';\nimport {InternalNgModuleRef, NgModuleRef} from '../linker/ng_module_factory';\nimport {stringify} from '../util/stringify';\nimport {isPromise} from '../util/lang';\n\n/**\n * InjectionToken to control root component bootstrap behavior.\n *\n * This token is primarily used in Angular's server-side rendering (SSR) scenarios,\n * particularly by the `@angular/ssr` package, to manage whether the root component\n * should be bootstrapped during the application initialization process.\n *\n * ## Purpose:\n * During SSR route extraction, setting this token to `false` prevents Angular from\n * bootstrapping the root component. This avoids unnecessary component rendering,\n * enabling route extraction without requiring additional APIs or triggering\n * component logic.\n *\n * ## Behavior:\n * - **`false`**: Prevents the root component from being bootstrapped.\n * - **`true`** (default): Proceeds with the normal root component bootstrap process.\n *\n * This mechanism ensures SSR can efficiently separate route extraction logic\n * from component rendering.\n */\nexport const ENABLE_ROOT_COMPONENT_BOOTSTRAP = new InjectionToken<boolean>(\n  ngDevMode ? 'ENABLE_ROOT_COMPONENT_BOOTSTRAP' : '',\n);\n\nexport interface BootstrapConfig {\n  platformInjector: Injector;\n}\n\nexport interface ModuleBootstrapConfig<M> extends BootstrapConfig {\n  moduleRef: InternalNgModuleRef<M>;\n  allPlatformModules: NgModuleRef<unknown>[];\n}\n\nexport interface ApplicationBootstrapConfig extends BootstrapConfig {\n  r3Injector: R3Injector;\n  rootComponent: Type<unknown> | undefined;\n}\n\nfunction isApplicationBootstrapConfig(\n  config: ApplicationBootstrapConfig | ModuleBootstrapConfig<unknown>,\n): config is ApplicationBootstrapConfig {\n  return !(config as ModuleBootstrapConfig<unknown>).moduleRef;\n}\n\nexport function bootstrap<M>(\n  moduleBootstrapConfig: ModuleBootstrapConfig<M>,\n): Promise<NgModuleRef<M>>;\nexport function bootstrap(\n  applicationBootstrapConfig: ApplicationBootstrapConfig,\n): Promise<ApplicationRef>;\nexport function bootstrap<M>(\n  config: ModuleBootstrapConfig<M> | ApplicationBootstrapConfig,\n): Promise<ApplicationRef> | Promise<NgModuleRef<M>> {\n  const envInjector = isApplicationBootstrapConfig(config)\n    ? config.r3Injector\n    : config.moduleRef.injector;\n  const ngZone = envInjector.get(NgZone);\n  return ngZone.run(() => {\n    if (isApplicationBootstrapConfig(config)) {\n      config.r3Injector.resolveInjectorInitializers();\n    } else {\n      config.moduleRef.resolveInjectorInitializers();\n    }\n    const exceptionHandler = envInjector.get(ErrorHandler, null);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (exceptionHandler === null) {\n        const errorMessage = isApplicationBootstrapConfig(config)\n          ? 'No `ErrorHandler` found in the Dependency Injection tree.'\n          : 'No ErrorHandler. Is platform module (BrowserModule) included';\n        throw new RuntimeError(\n          RuntimeErrorCode.MISSING_REQUIRED_INJECTABLE_IN_BOOTSTRAP,\n          errorMessage,\n        );\n      }\n      if (envInjector.get(PROVIDED_ZONELESS) && envInjector.get(PROVIDED_NG_ZONE)) {\n        throw new RuntimeError(\n          RuntimeErrorCode.PROVIDED_BOTH_ZONE_AND_ZONELESS,\n          'Invalid change detection configuration: ' +\n            'provideZoneChangeDetection and provideExperimentalZonelessChangeDetection cannot be used together.',\n        );\n      }\n    }\n\n    let onErrorSubscription: Subscription;\n    ngZone.runOutsideAngular(() => {\n      onErrorSubscription = ngZone.onError.subscribe({\n        next: (error: any) => {\n          exceptionHandler!.handleError(error);\n        },\n      });\n    });\n\n    // If the whole platform is destroyed, invoke the `destroy` method\n    // for all bootstrapped applications as well.\n    if (isApplicationBootstrapConfig(config)) {\n      const destroyListener = () => envInjector.destroy();\n      const onPlatformDestroyListeners = config.platformInjector.get(PLATFORM_DESTROY_LISTENERS);\n      onPlatformDestroyListeners.add(destroyListener);\n\n      envInjector.onDestroy(() => {\n        onErrorSubscription.unsubscribe();\n        onPlatformDestroyListeners.delete(destroyListener);\n      });\n    } else {\n      const destroyListener = () => config.moduleRef.destroy();\n      const onPlatformDestroyListeners = config.platformInjector.get(PLATFORM_DESTROY_LISTENERS);\n      onPlatformDestroyListeners.add(destroyListener);\n\n      config.moduleRef.onDestroy(() => {\n        remove(config.allPlatformModules, config.moduleRef);\n        onErrorSubscription.unsubscribe();\n        onPlatformDestroyListeners.delete(destroyListener);\n      });\n    }\n\n    return _callAndReportToErrorHandler(exceptionHandler!, ngZone, () => {\n      const initStatus = envInjector.get(ApplicationInitStatus);\n      initStatus.runInitializers();\n\n      return initStatus.donePromise.then(() => {\n        // If the `LOCALE_ID` provider is defined at bootstrap then we set the value for ivy\n        const localeId = envInjector.get(LOCALE_ID, DEFAULT_LOCALE_ID);\n        setLocaleId(localeId || DEFAULT_LOCALE_ID);\n\n        const enableRootComponentBoostrap = envInjector.get(ENABLE_ROOT_COMPONENT_BOOTSTRAP, true);\n        if (!enableRootComponentBoostrap) {\n          if (isApplicationBootstrapConfig(config)) {\n            return envInjector.get(ApplicationRef);\n          }\n\n          config.allPlatformModules.push(config.moduleRef);\n          return config.moduleRef;\n        }\n\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          const imagePerformanceService = envInjector.get(ImagePerformanceWarning);\n          imagePerformanceService.start();\n        }\n\n        if (isApplicationBootstrapConfig(config)) {\n          const appRef = envInjector.get(ApplicationRef);\n          if (config.rootComponent !== undefined) {\n            appRef.bootstrap(config.rootComponent);\n          }\n          return appRef;\n        } else {\n          moduleDoBootstrap(config.moduleRef, config.allPlatformModules);\n          return config.moduleRef;\n        }\n      });\n    });\n  });\n}\n\nfunction moduleDoBootstrap(\n  moduleRef: InternalNgModuleRef<any>,\n  allPlatformModules: NgModuleRef<unknown>[],\n): void {\n  const appRef = moduleRef.injector.get(ApplicationRef);\n  if (moduleRef._bootstrapComponents.length > 0) {\n    moduleRef._bootstrapComponents.forEach((f) => appRef.bootstrap(f));\n  } else if (moduleRef.instance.ngDoBootstrap) {\n    moduleRef.instance.ngDoBootstrap(appRef);\n  } else {\n    throw new RuntimeError(\n      RuntimeErrorCode.BOOTSTRAP_COMPONENTS_NOT_FOUND,\n      ngDevMode &&\n        `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, ` +\n          `but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n          `Please define one of these.`,\n    );\n  }\n  allPlatformModules.push(moduleRef);\n}\n\nfunction _callAndReportToErrorHandler(\n  errorHandler: ErrorHandler,\n  ngZone: NgZone,\n  callback: () => any,\n): any {\n  try {\n    const result = callback();\n    if (isPromise(result)) {\n      return result.catch((e: any) => {\n        ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n        // rethrow as the exception handler might not do it\n        throw e;\n      });\n    }\n\n    return result;\n  } catch (e) {\n    ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n    // rethrow as the exception handler might not do it\n    throw e;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  publishDefaultGlobalUtils,\n  publishSignalConfiguration,\n} from '../application/application_ref';\nimport {PLATFORM_INITIALIZER} from '../application/application_tokens';\nimport {\n  EnvironmentProviders,\n  InjectionToken,\n  Injector,\n  makeEnvironmentProviders,\n  runInInjectionContext,\n  StaticProvider,\n} from '../di';\nimport {INJECTOR_SCOPE} from '../di/scope';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\n\nimport {PlatformRef} from './platform_ref';\nimport {PLATFORM_DESTROY_LISTENERS} from './platform_destroy_listeners';\n\nlet _platformInjector: Injector | null = null;\n\n/**\n * Internal token to indicate whether having multiple bootstrapped platform should be allowed (only\n * one bootstrapped platform is allowed by default). This token helps to support SSR scenarios.\n */\nexport const ALLOW_MULTIPLE_PLATFORMS = new InjectionToken<boolean>(\n  ngDevMode ? 'AllowMultipleToken' : '',\n);\n\n/**\n * Creates a platform.\n * Platforms must be created on launch using this function.\n *\n * @publicApi\n */\nexport function createPlatform(injector: Injector): PlatformRef {\n  if (_platformInjector && !_platformInjector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n    throw new RuntimeError(\n      RuntimeErrorCode.MULTIPLE_PLATFORMS,\n      ngDevMode && 'There can be only one platform. Destroy the previous one to create a new one.',\n    );\n  }\n  publishDefaultGlobalUtils();\n  publishSignalConfiguration();\n  _platformInjector = injector;\n  const platform = injector.get(PlatformRef);\n  runPlatformInitializers(injector);\n  return platform;\n}\n\n/**\n * Creates a factory for a platform. Can be used to provide or override `Providers` specific to\n * your application's runtime needs, such as `PLATFORM_INITIALIZER` and `PLATFORM_ID`.\n * @param parentPlatformFactory Another platform factory to modify. Allows you to compose factories\n * to build up configurations that might be required by different libraries or parts of the\n * application.\n * @param name Identifies the new platform factory.\n * @param providers A set of dependency providers for platforms created with the new factory.\n *\n * @publicApi\n */\nexport function createPlatformFactory(\n  parentPlatformFactory: ((extraProviders?: StaticProvider[]) => PlatformRef) | null,\n  name: string,\n  providers: StaticProvider[] = [],\n): (extraProviders?: StaticProvider[]) => PlatformRef {\n  const desc = `Platform: ${name}`;\n  const marker = new InjectionToken(desc);\n  return (extraProviders: StaticProvider[] = []) => {\n    let platform = getPlatform();\n    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n      const platformProviders: StaticProvider[] = [\n        ...providers,\n        ...extraProviders,\n        {provide: marker, useValue: true},\n      ];\n      if (parentPlatformFactory) {\n        parentPlatformFactory(platformProviders);\n      } else {\n        createPlatform(createPlatformInjector(platformProviders, desc));\n      }\n    }\n    return assertPlatform(marker);\n  };\n}\n\n/**\n * Helper function to create an instance of a platform injector (that maintains the 'platform'\n * scope).\n */\nfunction createPlatformInjector(providers: StaticProvider[] = [], name?: string): Injector {\n  return Injector.create({\n    name,\n    providers: [\n      {provide: INJECTOR_SCOPE, useValue: 'platform'},\n      {provide: PLATFORM_DESTROY_LISTENERS, useValue: new Set([() => (_platformInjector = null)])},\n      ...providers,\n    ],\n  });\n}\n\n/**\n * Checks that there is currently a platform that contains the given token as a provider.\n *\n * @publicApi\n */\nexport function assertPlatform(requiredToken: any): PlatformRef {\n  const platform = getPlatform();\n\n  if (!platform) {\n    throw new RuntimeError(RuntimeErrorCode.PLATFORM_NOT_FOUND, ngDevMode && 'No platform exists!');\n  }\n\n  if (\n    (typeof ngDevMode === 'undefined' || ngDevMode) &&\n    !platform.injector.get(requiredToken, null)\n  ) {\n    throw new RuntimeError(\n      RuntimeErrorCode.MULTIPLE_PLATFORMS,\n      'A platform with a different configuration has been created. Please destroy it first.',\n    );\n  }\n\n  return platform;\n}\n\n/**\n * Returns the current platform.\n *\n * @publicApi\n */\nexport function getPlatform(): PlatformRef | null {\n  return _platformInjector?.get(PlatformRef) ?? null;\n}\n\n/**\n * Destroys the current Angular platform and all Angular applications on the page.\n * Destroys all modules and listeners registered with the platform.\n *\n * @publicApi\n */\nexport function destroyPlatform(): void {\n  getPlatform()?.destroy();\n}\n\n/**\n * The goal of this function is to bootstrap a platform injector,\n * but avoid referencing `PlatformRef` class.\n * This function is needed for bootstrapping a Standalone Component.\n */\nexport function createOrReusePlatformInjector(providers: StaticProvider[] = []): Injector {\n  // If a platform injector already exists, it means that the platform\n  // is already bootstrapped and no additional actions are required.\n  if (_platformInjector) return _platformInjector;\n\n  publishDefaultGlobalUtils();\n  // Otherwise, setup a new platform injector and run platform initializers.\n  const injector = createPlatformInjector(providers);\n  _platformInjector = injector;\n  publishSignalConfiguration();\n  runPlatformInitializers(injector);\n  return injector;\n}\n\n/**\n * @description\n * This function is used to provide initialization functions that will be executed upon\n * initialization of the platform injector.\n *\n * Note that the provided initializer is run in the injection context.\n *\n * Previously, this was achieved using the `PLATFORM_INITIALIZER` token which is now deprecated.\n *\n * @see {@link PLATFORM_INITIALIZER}\n *\n * @publicApi\n */\nexport function providePlatformInitializer(initializerFn: () => void): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    {\n      provide: PLATFORM_INITIALIZER,\n      useValue: initializerFn,\n      multi: true,\n    },\n  ]);\n}\n\nfunction runPlatformInitializers(injector: Injector): void {\n  const inits = injector.get(PLATFORM_INITIALIZER, null);\n  runInInjectionContext(injector, () => {\n    inits?.forEach((init) => init());\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {global} from './global';\n\n/**\n * Returns whether Angular is in development mode.\n *\n * By default, this is true, unless `enableProdMode` is invoked prior to calling this method or the\n * application is built using the Angular CLI with the `optimization` option.\n * @see {@link /cli/build ng build}\n *\n * @publicApi\n */\nexport function isDevMode(): boolean {\n  return typeof ngDevMode === 'undefined' || !!ngDevMode;\n}\n\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * Using this method is discouraged as the Angular CLI will set production mode when using the\n * `optimization` option.\n * @see {@link /cli/build ng build}\n *\n * @publicApi\n */\nexport function enableProdMode(): void {\n  // The below check is there so when ngDevMode is set via terser\n  // `global['ngDevMode'] = false;` is also dropped.\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    global['ngDevMode'] = false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectFlags} from '../di';\nimport {InternalInjectFlags} from '../di/interface/injector';\nimport {TNode, TNodeType} from '../render3/interfaces/node';\nimport {isComponentHost} from '../render3/interfaces/type_checks';\nimport {DECLARATION_COMPONENT_VIEW, LView} from '../render3/interfaces/view';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {getComponentLViewByIndex} from '../render3/util/view_utils';\nimport {ViewRef} from '../render3/view_ref';\n\n/**\n * Base class that provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be re-rendered.\n *\n * @see [Using change detection hooks](guide/components/lifecycle#using-change-detection-hooks)\n * @see [Defining custom change detection](guide/components/lifecycle#defining-custom-change-detection)\n *\n * @usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval.\n *\n * {@example core/ts/change_detect/change-detection.ts region='mark-for-check'}\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * {@example core/ts/change_detect/change-detection.ts region='detach'}\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * {@example core/ts/change_detect/change-detection.ts region='reattach'}\n *\n * @publicApi\n */\nexport abstract class ChangeDetectorRef {\n  /**\n   * When a view uses the {@link ChangeDetectionStrategy#OnPush} (checkOnce)\n   * change detection strategy, explicitly marks the view as changed so that\n   * it can be checked again.\n   *\n   * Components are normally marked as dirty (in need of rerendering) when inputs\n   * have changed or events have fired in the view. Call this method to ensure that\n   * a component is checked even if these triggers have not occurred.\n   *\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\n   *\n   */\n  abstract markForCheck(): void;\n\n  /**\n   * Detaches this view from the change-detection tree.\n   * A detached view is  not checked until it is reattached.\n   * Use in combination with `detectChanges()` to implement local change detection checks.\n   *\n   * Detached views are not checked during change detection runs until they are\n   * re-attached, even if they are marked as dirty.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   */\n  abstract detach(): void;\n\n  /**\n   * Checks this view and its children. Use in combination with {@link ChangeDetectorRef#detach}\n   * to implement local change detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   */\n  abstract detectChanges(): void;\n\n  /**\n   * Checks the change detector and its children, and throws if any changes are detected.\n   *\n   * Use in development mode to verify that running change detection doesn't introduce\n   * other changes. Calling it in production mode is a noop.\n   *\n   * @deprecated This is a test-only API that does not have a place in production interface.\n   * `checkNoChanges` is already part of an `ApplicationRef` tick when the app is running in dev\n   * mode. For more granular `checkNoChanges` validation, use `ComponentFixture`.\n   */\n  abstract checkNoChanges(): void;\n\n  /**\n   * Re-attaches the previously detached view to the change detection tree.\n   * Views are attached to the tree by default.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   *\n   */\n  abstract reattach(): void;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: (flags: InjectFlags) => ChangeDetectorRef = injectChangeDetectorRef;\n}\n\n/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\nexport function injectChangeDetectorRef(flags: InjectFlags): ChangeDetectorRef {\n  return createViewRef(\n    getCurrentTNode()!,\n    getLView(),\n    (flags & InternalInjectFlags.ForPipe) === InternalInjectFlags.ForPipe,\n  );\n}\n\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param tNode The node that is requesting a ChangeDetectorRef\n * @param lView The view to which the node belongs\n * @param isPipe Whether the view is being injected into a pipe.\n * @returns The ChangeDetectorRef to use\n */\nfunction createViewRef(tNode: TNode, lView: LView, isPipe: boolean): ChangeDetectorRef {\n  if (isComponentHost(tNode) && !isPipe) {\n    // The LView represents the location where the component is declared.\n    // Instead we want the LView for the component View and so we need to look it up.\n    const componentView = getComponentLViewByIndex(tNode.index, lView); // look down\n    return new ViewRef(componentView, componentView);\n  } else if (\n    tNode.type &\n    (TNodeType.AnyRNode | TNodeType.AnyContainer | TNodeType.Icu | TNodeType.LetDeclaration)\n  ) {\n    // The LView represents the location where the injection is requested from.\n    // We need to locate the containing LView (in case where the `lView` is an embedded view)\n    const hostComponentView = lView[DECLARATION_COMPONENT_VIEW]; // look up\n    return new ViewRef(hostComponentView, lView);\n  }\n  return null!;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {Writable} from '../../interface/type';\nimport {isListLikeIterable, iterateListLike} from '../../util/iterable';\nimport {stringify} from '../../util/stringify';\n\nimport type {\n  IterableChangeRecord,\n  IterableChanges,\n  IterableDiffer,\n  IterableDifferFactory,\n  NgIterable,\n  TrackByFunction,\n} from './iterable_differs';\n\nexport class DefaultIterableDifferFactory implements IterableDifferFactory {\n  constructor() {}\n  supports(obj: Object | null | undefined): boolean {\n    return isListLikeIterable(obj);\n  }\n\n  create<V>(trackByFn?: TrackByFunction<V>): DefaultIterableDiffer<V> {\n    return new DefaultIterableDiffer<V>(trackByFn);\n  }\n}\n\nconst trackByIdentity = (index: number, item: any) => item;\n\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @publicApi\n */\nexport class DefaultIterableDiffer<V> implements IterableDiffer<V>, IterableChanges<V> {\n  public readonly length: number = 0;\n  // TODO: confirm the usage of `collection` as it's unused, readonly and on a non public API.\n  public readonly collection!: V[] | Iterable<V> | null;\n  // Keeps track of the used records at any point in time (during & across `_check()` calls)\n  private _linkedRecords: _DuplicateMap<V> | null = null;\n  // Keeps track of the removed records at any point in time during `_check()` calls.\n  private _unlinkedRecords: _DuplicateMap<V> | null = null;\n  private _previousItHead: IterableChangeRecord_<V> | null = null;\n  private _itHead: IterableChangeRecord_<V> | null = null;\n  private _itTail: IterableChangeRecord_<V> | null = null;\n  private _additionsHead: IterableChangeRecord_<V> | null = null;\n  private _additionsTail: IterableChangeRecord_<V> | null = null;\n  private _movesHead: IterableChangeRecord_<V> | null = null;\n  private _movesTail: IterableChangeRecord_<V> | null = null;\n  private _removalsHead: IterableChangeRecord_<V> | null = null;\n  private _removalsTail: IterableChangeRecord_<V> | null = null;\n  // Keeps track of records where custom track by is the same, but item identity has changed\n  private _identityChangesHead: IterableChangeRecord_<V> | null = null;\n  private _identityChangesTail: IterableChangeRecord_<V> | null = null;\n  private _trackByFn: TrackByFunction<V>;\n\n  constructor(trackByFn?: TrackByFunction<V>) {\n    this._trackByFn = trackByFn || trackByIdentity;\n  }\n\n  forEachItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V> | null;\n    for (record = this._itHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n\n  forEachOperation(\n    fn: (\n      item: IterableChangeRecord<V>,\n      previousIndex: number | null,\n      currentIndex: number | null,\n    ) => void,\n  ) {\n    let nextIt = this._itHead;\n    let nextRemove = this._removalsHead;\n    let addRemoveOffset = 0;\n    let moveOffsets: number[] | null = null;\n    while (nextIt || nextRemove) {\n      // Figure out which is the next record to process\n      // Order: remove, add, move\n      const record: IterableChangeRecord<V> =\n        !nextRemove ||\n        (nextIt &&\n          nextIt.currentIndex! < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets))\n          ? nextIt!\n          : nextRemove;\n      const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n      const currentIndex = record.currentIndex;\n\n      // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n      if (record === nextRemove) {\n        addRemoveOffset--;\n        nextRemove = nextRemove._nextRemoved;\n      } else {\n        nextIt = nextIt!._next;\n        if (record.previousIndex == null) {\n          addRemoveOffset++;\n        } else {\n          // INVARIANT:  currentIndex < previousIndex\n          if (!moveOffsets) moveOffsets = [];\n          const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n          const localCurrentIndex = currentIndex! - addRemoveOffset;\n          if (localMovePreviousIndex != localCurrentIndex) {\n            for (let i = 0; i < localMovePreviousIndex; i++) {\n              const offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n              const index = offset + i;\n              if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                moveOffsets[i] = offset + 1;\n              }\n            }\n            const previousIndex = record.previousIndex;\n            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n          }\n        }\n      }\n\n      if (adjPreviousIndex !== currentIndex) {\n        fn(record, adjPreviousIndex, currentIndex);\n      }\n    }\n  }\n\n  forEachPreviousItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V> | null;\n    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n\n  forEachAddedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V> | null;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n\n  forEachMovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V> | null;\n    for (record = this._movesHead; record !== null; record = record._nextMoved) {\n      fn(record);\n    }\n  }\n\n  forEachRemovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V> | null;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n\n  forEachIdentityChange(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V> | null;\n    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n      fn(record);\n    }\n  }\n\n  diff(collection: NgIterable<V> | null | undefined): DefaultIterableDiffer<V> | null {\n    if (collection == null) collection = [];\n    if (!isListLikeIterable(collection)) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_DIFFER_INPUT,\n        ngDevMode &&\n          `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`,\n      );\n    }\n\n    if (this.check(collection)) {\n      return this;\n    } else {\n      return null;\n    }\n  }\n\n  onDestroy() {}\n\n  check(collection: NgIterable<V>): boolean {\n    this._reset();\n\n    let record: IterableChangeRecord_<V> | null = this._itHead;\n    let mayBeDirty: boolean = false;\n    let index: number;\n    let item: V;\n    let itemTrackBy: any;\n    if (Array.isArray(collection)) {\n      (this as Writable<this>).length = collection.length;\n\n      for (let index = 0; index < this.length; index++) {\n        item = collection[index];\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !Object.is(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n        }\n\n        record = record._next;\n      }\n    } else {\n      index = 0;\n      iterateListLike(collection, (item: V) => {\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !Object.is(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n        index++;\n      });\n      (this as Writable<this>).length = index;\n    }\n\n    this._truncate(record);\n    (this as Writable<this>).collection = collection;\n    return this.isDirty;\n  }\n\n  /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n   * changes.\n   */\n  get isDirty(): boolean {\n    return (\n      this._additionsHead !== null ||\n      this._movesHead !== null ||\n      this._removalsHead !== null ||\n      this._identityChangesHead !== null\n    );\n  }\n\n  /**\n   * Reset the state of the change objects to show no changes. This means set previousKey to\n   * currentKey, and clear all of the queues (additions, moves, removals).\n   * Set the previousIndexes of moved and added items to their currentIndexes\n   * Reset the list of additions, moves and removals\n   *\n   * @internal\n   */\n  _reset() {\n    if (this.isDirty) {\n      let record: IterableChangeRecord_<V> | null;\n\n      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._additionsHead = this._additionsTail = null;\n\n      for (record = this._movesHead; record !== null; record = record._nextMoved) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._movesHead = this._movesTail = null;\n      this._removalsHead = this._removalsTail = null;\n      this._identityChangesHead = this._identityChangesTail = null;\n\n      // TODO(vicb): when assert gets supported\n      // assert(!this.isDirty);\n    }\n  }\n\n  /**\n   * This is the core function which handles differences between collections.\n   *\n   * - `record` is the record which we saw at this position last time. If null then it is a new\n   *   item.\n   * - `item` is the current item in the collection\n   * - `index` is the position of the item in the collection\n   *\n   * @internal\n   */\n  _mismatch(\n    record: IterableChangeRecord_<V> | null,\n    item: V,\n    itemTrackBy: any,\n    index: number,\n  ): IterableChangeRecord_<V> {\n    // The previous record after which we will append the current one.\n    let previousRecord: IterableChangeRecord_<V> | null;\n\n    if (record === null) {\n      previousRecord = this._itTail;\n    } else {\n      previousRecord = record._prev;\n      // Remove the record from the collection since we know it does not match the item.\n      this._remove(record);\n    }\n\n    // See if we have evicted the item, which used to be at some anterior position of _itHead list.\n    record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (record !== null) {\n      // It is an item which we have evicted earlier: reinsert it back into the list.\n      // But first we need to check if identity changed, so we can update in view if necessary.\n      if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n\n      this._reinsertAfter(record, previousRecord, index);\n    } else {\n      // Attempt to see if the item is at some posterior position of _itHead list.\n      record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n      if (record !== null) {\n        // We have the item in _itHead at/after `index` position. We need to move it forward in the\n        // collection.\n        // But first we need to check if identity changed, so we can update in view if necessary.\n        if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n\n        this._moveAfter(record, previousRecord, index);\n      } else {\n        // It is a new item: add it.\n        record = this._addAfter(\n          new IterableChangeRecord_<V>(item, itemTrackBy),\n          previousRecord,\n          index,\n        );\n      }\n    }\n    return record;\n  }\n\n  /**\n   * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n   *\n   * Use case: `[a, a]` => `[b, a, a]`\n   *\n   * If we did not have this check then the insertion of `b` would:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) leave `a` at index `1` as is. <-- this is wrong!\n   *   3) reinsert `a` at index 2. <-- this is wrong!\n   *\n   * The correct behavior is:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) reinsert `a` at index 1.\n   *   3) move `a` at from `1` to `2`.\n   *\n   *\n   * Double check that we have not evicted a duplicate item. We need to check if the item type may\n   * have already been removed:\n   * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n   * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n   * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n   * at the end.\n   *\n   * @internal\n   */\n  _verifyReinsertion(\n    record: IterableChangeRecord_<V>,\n    item: V,\n    itemTrackBy: any,\n    index: number,\n  ): IterableChangeRecord_<V> {\n    let reinsertRecord: IterableChangeRecord_<V> | null =\n      this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (reinsertRecord !== null) {\n      record = this._reinsertAfter(reinsertRecord, record._prev!, index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._addToMoves(record, index);\n    }\n    return record;\n  }\n\n  /**\n   * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n   *\n   * - `record` The first excess {@link IterableChangeRecord_}.\n   *\n   * @internal\n   */\n  _truncate(record: IterableChangeRecord_<V> | null) {\n    // Anything after that needs to be removed;\n    while (record !== null) {\n      const nextRecord: IterableChangeRecord_<V> | null = record._next;\n      this._addToRemovals(this._unlink(record));\n      record = nextRecord;\n    }\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.clear();\n    }\n\n    if (this._additionsTail !== null) {\n      this._additionsTail._nextAdded = null;\n    }\n    if (this._movesTail !== null) {\n      this._movesTail._nextMoved = null;\n    }\n    if (this._itTail !== null) {\n      this._itTail._next = null;\n    }\n    if (this._removalsTail !== null) {\n      this._removalsTail._nextRemoved = null;\n    }\n    if (this._identityChangesTail !== null) {\n      this._identityChangesTail._nextIdentityChange = null;\n    }\n  }\n\n  /** @internal */\n  _reinsertAfter(\n    record: IterableChangeRecord_<V>,\n    prevRecord: IterableChangeRecord_<V> | null,\n    index: number,\n  ): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.remove(record);\n    }\n    const prev = record._prevRemoved;\n    const next = record._nextRemoved;\n\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n\n  /** @internal */\n  _moveAfter(\n    record: IterableChangeRecord_<V>,\n    prevRecord: IterableChangeRecord_<V> | null,\n    index: number,\n  ): IterableChangeRecord_<V> {\n    this._unlink(record);\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n\n  /** @internal */\n  _addAfter(\n    record: IterableChangeRecord_<V>,\n    prevRecord: IterableChangeRecord_<V> | null,\n    index: number,\n  ): IterableChangeRecord_<V> {\n    this._insertAfter(record, prevRecord, index);\n\n    if (this._additionsTail === null) {\n      // TODO(vicb):\n      // assert(this._additionsHead === null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_additionsTail._nextAdded === null);\n      // assert(record._nextAdded === null);\n      this._additionsTail = this._additionsTail._nextAdded = record;\n    }\n    return record;\n  }\n\n  /** @internal */\n  _insertAfter(\n    record: IterableChangeRecord_<V>,\n    prevRecord: IterableChangeRecord_<V> | null,\n    index: number,\n  ): IterableChangeRecord_<V> {\n    // TODO(vicb):\n    // assert(record != prevRecord);\n    // assert(record._next === null);\n    // assert(record._prev === null);\n\n    const next: IterableChangeRecord_<V> | null =\n      prevRecord === null ? this._itHead : prevRecord._next;\n    // TODO(vicb):\n    // assert(next != record);\n    // assert(prevRecord != record);\n    record._next = next;\n    record._prev = prevRecord;\n    if (next === null) {\n      this._itTail = record;\n    } else {\n      next._prev = record;\n    }\n    if (prevRecord === null) {\n      this._itHead = record;\n    } else {\n      prevRecord._next = record;\n    }\n\n    if (this._linkedRecords === null) {\n      this._linkedRecords = new _DuplicateMap<V>();\n    }\n    this._linkedRecords.put(record);\n\n    record.currentIndex = index;\n    return record;\n  }\n\n  /** @internal */\n  _remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    return this._addToRemovals(this._unlink(record));\n  }\n\n  /** @internal */\n  _unlink(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._linkedRecords !== null) {\n      this._linkedRecords.remove(record);\n    }\n\n    const prev = record._prev;\n    const next = record._next;\n\n    // TODO(vicb):\n    // assert((record._prev = null) === null);\n    // assert((record._next = null) === null);\n\n    if (prev === null) {\n      this._itHead = next;\n    } else {\n      prev._next = next;\n    }\n    if (next === null) {\n      this._itTail = prev;\n    } else {\n      next._prev = prev;\n    }\n\n    return record;\n  }\n\n  /** @internal */\n  _addToMoves(record: IterableChangeRecord_<V>, toIndex: number): IterableChangeRecord_<V> {\n    // TODO(vicb):\n    // assert(record._nextMoved === null);\n\n    if (record.previousIndex === toIndex) {\n      return record;\n    }\n\n    if (this._movesTail === null) {\n      // TODO(vicb):\n      // assert(_movesHead === null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_movesTail._nextMoved === null);\n      this._movesTail = this._movesTail._nextMoved = record;\n    }\n\n    return record;\n  }\n\n  private _addToRemovals(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords === null) {\n      this._unlinkedRecords = new _DuplicateMap<V>();\n    }\n    this._unlinkedRecords.put(record);\n    record.currentIndex = null;\n    record._nextRemoved = null;\n\n    if (this._removalsTail === null) {\n      // TODO(vicb):\n      // assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n      record._prevRemoved = null;\n    } else {\n      // TODO(vicb):\n      // assert(_removalsTail._nextRemoved === null);\n      // assert(record._nextRemoved === null);\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemoved = record;\n    }\n    return record;\n  }\n\n  /** @internal */\n  _addIdentityChange(record: IterableChangeRecord_<V>, item: V) {\n    record.item = item;\n    if (this._identityChangesTail === null) {\n      this._identityChangesTail = this._identityChangesHead = record;\n    } else {\n      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n    }\n    return record;\n  }\n}\n\nexport class IterableChangeRecord_<V> implements IterableChangeRecord<V> {\n  currentIndex: number | null = null;\n  previousIndex: number | null = null;\n\n  /** @internal */\n  _nextPrevious: IterableChangeRecord_<V> | null = null;\n  /** @internal */\n  _prev: IterableChangeRecord_<V> | null = null;\n  /** @internal */\n  _next: IterableChangeRecord_<V> | null = null;\n  /** @internal */\n  _prevDup: IterableChangeRecord_<V> | null = null;\n  /** @internal */\n  _nextDup: IterableChangeRecord_<V> | null = null;\n  /** @internal */\n  _prevRemoved: IterableChangeRecord_<V> | null = null;\n  /** @internal */\n  _nextRemoved: IterableChangeRecord_<V> | null = null;\n  /** @internal */\n  _nextAdded: IterableChangeRecord_<V> | null = null;\n  /** @internal */\n  _nextMoved: IterableChangeRecord_<V> | null = null;\n  /** @internal */\n  _nextIdentityChange: IterableChangeRecord_<V> | null = null;\n\n  constructor(\n    public item: V,\n    public trackById: any,\n  ) {}\n}\n\n// A linked list of IterableChangeRecords with the same IterableChangeRecord_.item\nclass _DuplicateItemRecordList<V> {\n  /** @internal */\n  _head: IterableChangeRecord_<V> | null = null;\n  /** @internal */\n  _tail: IterableChangeRecord_<V> | null = null;\n\n  /**\n   * Append the record to the list of duplicates.\n   *\n   * Note: by design all records in the list of duplicates hold the same value in record.item.\n   */\n  add(record: IterableChangeRecord_<V>): void {\n    if (this._head === null) {\n      this._head = this._tail = record;\n      record._nextDup = null;\n      record._prevDup = null;\n    } else {\n      // TODO(vicb):\n      // assert(record.item ==  _head.item ||\n      //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n      this._tail!._nextDup = record;\n      record._prevDup = this._tail;\n      record._nextDup = null;\n      this._tail = record;\n    }\n  }\n\n  // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n  // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n  get(trackById: any, atOrAfterIndex: number | null): IterableChangeRecord_<V> | null {\n    let record: IterableChangeRecord_<V> | null;\n    for (record = this._head; record !== null; record = record._nextDup) {\n      if (\n        (atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex!) &&\n        Object.is(record.trackById, trackById)\n      ) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * Returns whether the list of duplicates is empty.\n   */\n  remove(record: IterableChangeRecord_<V>): boolean {\n    // TODO(vicb):\n    // assert(() {\n    //  // verify that the record being removed is in the list.\n    //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n    //    if (identical(cursor, record)) return true;\n    //  }\n    //  return false;\n    //});\n\n    const prev: IterableChangeRecord_<V> | null = record._prevDup;\n    const next: IterableChangeRecord_<V> | null = record._nextDup;\n    if (prev === null) {\n      this._head = next;\n    } else {\n      prev._nextDup = next;\n    }\n    if (next === null) {\n      this._tail = prev;\n    } else {\n      next._prevDup = prev;\n    }\n    return this._head === null;\n  }\n}\n\nclass _DuplicateMap<V> {\n  map = new Map<any, _DuplicateItemRecordList<V>>();\n\n  put(record: IterableChangeRecord_<V>) {\n    const key = record.trackById;\n\n    let duplicates = this.map.get(key);\n    if (!duplicates) {\n      duplicates = new _DuplicateItemRecordList<V>();\n      this.map.set(key, duplicates);\n    }\n    duplicates.add(record);\n  }\n\n  /**\n   * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n   * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n   *\n   * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n   * have any more `a`s needs to return the second `a`.\n   */\n  get(trackById: any, atOrAfterIndex: number | null): IterableChangeRecord_<V> | null {\n    const key = trackById;\n    const recordList = this.map.get(key);\n    return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n  }\n\n  /**\n   * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * The list of duplicates also is removed from the map if it gets empty.\n   */\n  remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    const key = record.trackById;\n    const recordList: _DuplicateItemRecordList<V> = this.map.get(key)!;\n    // Remove the list of duplicates when it gets empty\n    if (recordList.remove(record)) {\n      this.map.delete(key);\n    }\n    return record;\n  }\n\n  get isEmpty(): boolean {\n    return this.map.size === 0;\n  }\n\n  clear() {\n    this.map.clear();\n  }\n}\n\nfunction getPreviousIndex(\n  item: any,\n  addRemoveOffset: number,\n  moveOffsets: number[] | null,\n): number {\n  const previousIndex = item.previousIndex;\n  if (previousIndex === null) return previousIndex;\n  let moveOffset = 0;\n  if (moveOffsets && previousIndex < moveOffsets.length) {\n    moveOffset = moveOffsets[previousIndex];\n  }\n  return previousIndex + addRemoveOffset + moveOffset;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {isJsObject} from '../../util/iterable';\nimport {stringify} from '../../util/stringify';\n\nimport type {\n  KeyValueChangeRecord,\n  KeyValueChanges,\n  KeyValueDiffer,\n  KeyValueDifferFactory,\n} from './keyvalue_differs';\n\nexport class DefaultKeyValueDifferFactory<K, V> implements KeyValueDifferFactory {\n  constructor() {}\n  supports(obj: any): boolean {\n    return obj instanceof Map || isJsObject(obj);\n  }\n\n  create<K, V>(): KeyValueDiffer<K, V> {\n    return new DefaultKeyValueDiffer<K, V>();\n  }\n}\n\nexport class DefaultKeyValueDiffer<K, V> implements KeyValueDiffer<K, V>, KeyValueChanges<K, V> {\n  private _records = new Map<K, KeyValueChangeRecord_<K, V>>();\n  private _mapHead: KeyValueChangeRecord_<K, V> | null = null;\n  // _appendAfter is used in the check loop\n  private _appendAfter: KeyValueChangeRecord_<K, V> | null = null;\n  private _previousMapHead: KeyValueChangeRecord_<K, V> | null = null;\n  private _changesHead: KeyValueChangeRecord_<K, V> | null = null;\n  private _changesTail: KeyValueChangeRecord_<K, V> | null = null;\n  private _additionsHead: KeyValueChangeRecord_<K, V> | null = null;\n  private _additionsTail: KeyValueChangeRecord_<K, V> | null = null;\n  private _removalsHead: KeyValueChangeRecord_<K, V> | null = null;\n  private _removalsTail: KeyValueChangeRecord_<K, V> | null = null;\n\n  get isDirty(): boolean {\n    return (\n      this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null\n    );\n  }\n\n  forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V> | null;\n    for (record = this._mapHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n\n  forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V> | null;\n    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n\n  forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V> | null;\n    for (record = this._changesHead; record !== null; record = record._nextChanged) {\n      fn(record);\n    }\n  }\n\n  forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V> | null;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n\n  forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V> | null;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n\n  diff(map?: Map<any, any> | {[k: string]: any} | null): any {\n    if (!map) {\n      map = new Map();\n    } else if (!(map instanceof Map || isJsObject(map))) {\n      throw new RuntimeError(\n        RuntimeErrorCode.INVALID_DIFFER_INPUT,\n        ngDevMode && `Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`,\n      );\n    }\n\n    return this.check(map) ? this : null;\n  }\n\n  onDestroy() {}\n\n  /**\n   * Check the current state of the map vs the previous.\n   * The algorithm is optimised for when the keys do no change.\n   */\n  check(map: Map<any, any> | {[k: string]: any}): boolean {\n    this._reset();\n\n    let insertBefore = this._mapHead;\n    this._appendAfter = null;\n\n    this._forEach(map, (value: any, key: any) => {\n      if (insertBefore && insertBefore.key === key) {\n        this._maybeAddToChanges(insertBefore, value);\n        this._appendAfter = insertBefore;\n        insertBefore = insertBefore._next;\n      } else {\n        const record = this._getOrCreateRecordForKey(key, value);\n        insertBefore = this._insertBeforeOrAppend(insertBefore, record);\n      }\n    });\n\n    // Items remaining at the end of the list have been deleted\n    if (insertBefore) {\n      if (insertBefore._prev) {\n        insertBefore._prev._next = null;\n      }\n\n      this._removalsHead = insertBefore;\n\n      for (\n        let record: KeyValueChangeRecord_<K, V> | null = insertBefore;\n        record !== null;\n        record = record._nextRemoved\n      ) {\n        if (record === this._mapHead) {\n          this._mapHead = null;\n        }\n        this._records.delete(record.key);\n        record._nextRemoved = record._next;\n        record.previousValue = record.currentValue;\n        record.currentValue = null;\n        record._prev = null;\n        record._next = null;\n      }\n    }\n\n    // Make sure tails have no next records from previous runs\n    if (this._changesTail) this._changesTail._nextChanged = null;\n    if (this._additionsTail) this._additionsTail._nextAdded = null;\n\n    return this.isDirty;\n  }\n\n  /**\n   * Inserts a record before `before` or append at the end of the list when `before` is null.\n   *\n   * Notes:\n   * - This method appends at `this._appendAfter`,\n   * - This method updates `this._appendAfter`,\n   * - The return value is the new value for the insertion pointer.\n   */\n  private _insertBeforeOrAppend(\n    before: KeyValueChangeRecord_<K, V> | null,\n    record: KeyValueChangeRecord_<K, V>,\n  ): KeyValueChangeRecord_<K, V> | null {\n    if (before) {\n      const prev = before._prev;\n      record._next = before;\n      record._prev = prev;\n      before._prev = record;\n      if (prev) {\n        prev._next = record;\n      }\n      if (before === this._mapHead) {\n        this._mapHead = record;\n      }\n\n      this._appendAfter = before;\n      return before;\n    }\n\n    if (this._appendAfter) {\n      this._appendAfter._next = record;\n      record._prev = this._appendAfter;\n    } else {\n      this._mapHead = record;\n    }\n\n    this._appendAfter = record;\n    return null;\n  }\n\n  private _getOrCreateRecordForKey(key: K, value: V): KeyValueChangeRecord_<K, V> {\n    if (this._records.has(key)) {\n      const record = this._records.get(key)!;\n      this._maybeAddToChanges(record, value);\n      const prev = record._prev;\n      const next = record._next;\n      if (prev) {\n        prev._next = next;\n      }\n      if (next) {\n        next._prev = prev;\n      }\n      record._next = null;\n      record._prev = null;\n\n      return record;\n    }\n\n    const record = new KeyValueChangeRecord_<K, V>(key);\n    this._records.set(key, record);\n    record.currentValue = value;\n    this._addToAdditions(record);\n    return record;\n  }\n\n  /** @internal */\n  _reset() {\n    if (this.isDirty) {\n      let record: KeyValueChangeRecord_<K, V> | null;\n      // let `_previousMapHead` contain the state of the map before the changes\n      this._previousMapHead = this._mapHead;\n      for (record = this._previousMapHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      // Update `record.previousValue` with the value of the item before the changes\n      // We need to update all changed items (that's those which have been added and changed)\n      for (record = this._changesHead; record !== null; record = record._nextChanged) {\n        record.previousValue = record.currentValue;\n      }\n      for (record = this._additionsHead; record != null; record = record._nextAdded) {\n        record.previousValue = record.currentValue;\n      }\n\n      this._changesHead = this._changesTail = null;\n      this._additionsHead = this._additionsTail = null;\n      this._removalsHead = null;\n    }\n  }\n\n  // Add the record or a given key to the list of changes only when the value has actually changed\n  private _maybeAddToChanges(record: KeyValueChangeRecord_<K, V>, newValue: any): void {\n    if (!Object.is(newValue, record.currentValue)) {\n      record.previousValue = record.currentValue;\n      record.currentValue = newValue;\n      this._addToChanges(record);\n    }\n  }\n\n  private _addToAdditions(record: KeyValueChangeRecord_<K, V>) {\n    if (this._additionsHead === null) {\n      this._additionsHead = this._additionsTail = record;\n    } else {\n      this._additionsTail!._nextAdded = record;\n      this._additionsTail = record;\n    }\n  }\n\n  private _addToChanges(record: KeyValueChangeRecord_<K, V>) {\n    if (this._changesHead === null) {\n      this._changesHead = this._changesTail = record;\n    } else {\n      this._changesTail!._nextChanged = record;\n      this._changesTail = record;\n    }\n  }\n\n  /** @internal */\n  private _forEach<K, V>(obj: Map<K, V> | {[k: string]: V}, fn: (v: V, k: any) => void) {\n    if (obj instanceof Map) {\n      obj.forEach(fn);\n    } else {\n      Object.keys(obj).forEach((k) => fn(obj[k], k));\n    }\n  }\n}\n\nclass KeyValueChangeRecord_<K, V> implements KeyValueChangeRecord<K, V> {\n  previousValue: V | null = null;\n  currentValue: V | null = null;\n\n  /** @internal */\n  _nextPrevious: KeyValueChangeRecord_<K, V> | null = null;\n  /** @internal */\n  _next: KeyValueChangeRecord_<K, V> | null = null;\n  /** @internal */\n  _prev: KeyValueChangeRecord_<K, V> | null = null;\n  /** @internal */\n  _nextAdded: KeyValueChangeRecord_<K, V> | null = null;\n  /** @internal */\n  _nextRemoved: KeyValueChangeRecord_<K, V> | null = null;\n  /** @internal */\n  _nextChanged: KeyValueChangeRecord_<K, V> | null = null;\n\n  constructor(public key: K) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵɵdefineInjectable} from '../../di/interface/defs';\nimport {StaticProvider} from '../../di/interface/provider';\nimport {Optional, SkipSelf} from '../../di/metadata';\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {DefaultIterableDifferFactory} from '../differs/default_iterable_differ';\n\n/**\n * A type describing supported iterable types.\n *\n * @publicApi\n */\nexport type NgIterable<T> = Array<T> | Iterable<T>;\n\n/**\n * A strategy for tracking changes over time to an iterable. Used by {@link /api/common/NgForOf NgForOf} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n *\n * @publicApi\n */\nexport interface IterableDiffer<V> {\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: NgIterable<V> | undefined | null): IterableChanges<V> | null;\n}\n\n/**\n * An object describing the changes in the `Iterable` collection since last time\n * `IterableDiffer#diff()` was invoked.\n *\n * @publicApi\n */\nexport interface IterableChanges<V> {\n  /**\n   * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n   * to each item.\n   */\n  forEachItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /**\n   * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n   * new `Iterable`.\n   *\n   * NOTE: These are not necessarily the actual operations which were applied to the original\n   * `Iterable`, rather these are a set of computed operations which may not be the same as the\n   * ones applied.\n   *\n   * @param record A change which needs to be applied\n   * @param previousIndex The `IterableChangeRecord#previousIndex` of the `record` refers to the\n   *        original `Iterable` location, where as `previousIndex` refers to the transient location\n   *        of the item, after applying the operations up to this point.\n   * @param currentIndex The `IterableChangeRecord#currentIndex` of the `record` refers to the\n   *        original `Iterable` location, where as `currentIndex` refers to the transient location\n   *        of the item, after applying the operations up to this point.\n   */\n  forEachOperation(\n    fn: (\n      record: IterableChangeRecord<V>,\n      previousIndex: number | null,\n      currentIndex: number | null,\n    ) => void,\n  ): void;\n\n  /**\n   * Iterate over changes in the order of original `Iterable` showing where the original items\n   * have moved.\n   */\n  forEachPreviousItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all added items. */\n  forEachAddedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all moved items. */\n  forEachMovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all removed items. */\n  forEachRemovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /**\n   * Iterate over all items which had their identity (as computed by the `TrackByFunction`)\n   * changed.\n   */\n  forEachIdentityChange(fn: (record: IterableChangeRecord<V>) => void): void;\n}\n\n/**\n * Record representing the item change information.\n *\n * @publicApi\n */\nexport interface IterableChangeRecord<V> {\n  /** Current index of the item in `Iterable` or null if removed. */\n  readonly currentIndex: number | null;\n\n  /** Previous index of the item in `Iterable` or null if added. */\n  readonly previousIndex: number | null;\n\n  /** The item. */\n  readonly item: V;\n\n  /** Track by identity as computed by the `TrackByFunction`. */\n  readonly trackById: any;\n}\n\n/**\n * A function optionally passed into the `NgForOf` directive to customize how `NgForOf` uniquely\n * identifies items in an iterable.\n *\n * `NgForOf` needs to uniquely identify items in the iterable to correctly perform DOM updates\n * when items in the iterable are reordered, new items are added, or existing items are removed.\n *\n *\n * In all of these scenarios it is usually desirable to only update the DOM elements associated\n * with the items affected by the change. This behavior is important to:\n *\n * - preserve any DOM-specific UI state (like cursor position, focus, text selection) when the\n *   iterable is modified\n * - enable animation of item addition, removal, and iterable reordering\n * - preserve the value of the `<select>` element when nested `<option>` elements are dynamically\n *   populated using `NgForOf` and the bound iterable is updated\n *\n * A common use for custom `trackBy` functions is when the model that `NgForOf` iterates over\n * contains a property with a unique identifier. For example, given a model:\n *\n * ```ts\n * class User {\n *   id: number;\n *   name: string;\n *   ...\n * }\n * ```\n * a custom `trackBy` function could look like the following:\n * ```ts\n * function userTrackBy(index, user) {\n *   return user.id;\n * }\n * ```\n *\n * A custom `trackBy` function must have several properties:\n *\n * - be [idempotent](https://en.wikipedia.org/wiki/Idempotence) (be without side effects, and always\n * return the same value for a given input)\n * - return unique value for all unique inputs\n * - be fast\n *\n * @see [`NgForOf#ngForTrackBy`](api/common/NgForOf#ngForTrackBy)\n * @publicApi\n */\nexport interface TrackByFunction<T> {\n  // Note: the type parameter `U` enables more accurate template type checking in case a trackBy\n  // function is declared using a base type of the iterated type. The `U` type gives TypeScript\n  // additional freedom to infer a narrower type for the `item` parameter type, instead of imposing\n  // the trackBy's declared item type as the inferred type for `T`.\n  // See https://github.com/angular/angular/issues/40125\n\n  /**\n   * @param index The index of the item within the iterable.\n   * @param item The item in the iterable.\n   */\n  <U extends T>(index: number, item: T & U): any;\n}\n\n/**\n * Provides a factory for {@link IterableDiffer}.\n *\n * @publicApi\n */\nexport interface IterableDifferFactory {\n  supports(objects: any): boolean;\n  create<V>(trackByFn?: TrackByFunction<V>): IterableDiffer<V>;\n}\n\nexport function defaultIterableDiffersFactory() {\n  return new IterableDiffers([new DefaultIterableDifferFactory()]);\n}\n\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * @publicApi\n */\nexport class IterableDiffers {\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ ɵɵdefineInjectable({\n    token: IterableDiffers,\n    providedIn: 'root',\n    factory: defaultIterableDiffersFactory,\n  });\n\n  constructor(private factories: IterableDifferFactory[]) {}\n\n  static create(factories: IterableDifferFactory[], parent?: IterableDiffers): IterableDiffers {\n    if (parent != null) {\n      const copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n\n    return new IterableDiffers(factories);\n  }\n\n  /**\n   * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n   * inherited {@link IterableDiffers} instance with the provided factories and return a new\n   * {@link IterableDiffers} instance.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example shows how to extend an existing list of factories,\n   * which will only be applied to the injector for this component and its children.\n   * This step is all that's required to make a new {@link IterableDiffer} available.\n   *\n   * ```ts\n   * @Component({\n   *   viewProviders: [\n   *     IterableDiffers.extend([new ImmutableListDiffer()])\n   *   ]\n   * })\n   * ```\n   */\n  static extend(factories: IterableDifferFactory[]): StaticProvider {\n    return {\n      provide: IterableDiffers,\n      useFactory: (parent: IterableDiffers | null) => {\n        // if parent is null, it means that we are in the root injector and we have just overridden\n        // the default injection mechanism for IterableDiffers, in such a case just assume\n        // `defaultIterableDiffersFactory`.\n        return IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[IterableDiffers, new SkipSelf(), new Optional()]],\n    };\n  }\n\n  find(iterable: any): IterableDifferFactory {\n    const factory = this.factories.find((f) => f.supports(iterable));\n    if (factory != null) {\n      return factory;\n    } else {\n      throw new RuntimeError(\n        RuntimeErrorCode.NO_SUPPORTING_DIFFER_FACTORY,\n        ngDevMode &&\n          `Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(\n            iterable,\n          )}'`,\n      );\n    }\n  }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n  return type['name'] || typeof type;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Optional, SkipSelf, StaticProvider, ɵɵdefineInjectable} from '../../di';\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\n\nimport {DefaultKeyValueDifferFactory} from './default_keyvalue_differ';\n\n/**\n * A differ that tracks changes made to an object over time.\n *\n * @publicApi\n */\nexport interface KeyValueDiffer<K, V> {\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: Map<K, V>): KeyValueChanges<K, V> | null;\n\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: {[key: string]: V}): KeyValueChanges<string, V> | null;\n  // TODO(TS2.1): diff<KP extends string>(this: KeyValueDiffer<KP, V>, object: Record<KP, V>):\n  // KeyValueDiffer<KP, V>;\n}\n\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n *\n * @publicApi\n */\nexport interface KeyValueChanges<K, V> {\n  /**\n   * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n   * to each item.\n   */\n  forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over changes in the order of original Map showing where the original items\n   * have moved.\n   */\n  forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all keys for which values have changed.\n   */\n  forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all added items.\n   */\n  forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all removed items.\n   */\n  forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n}\n\n/**\n * Record representing the item change information.\n *\n * @publicApi\n */\nexport interface KeyValueChangeRecord<K, V> {\n  /**\n   * Current key in the Map.\n   */\n  readonly key: K;\n\n  /**\n   * Current value for the key or `null` if removed.\n   */\n  readonly currentValue: V | null;\n\n  /**\n   * Previous value for the key or `null` if added.\n   */\n  readonly previousValue: V | null;\n}\n\n/**\n * Provides a factory for {@link KeyValueDiffer}.\n *\n * @publicApi\n */\nexport interface KeyValueDifferFactory {\n  /**\n   * Test to see if the differ knows how to diff this kind of object.\n   */\n  supports(objects: any): boolean;\n\n  /**\n   * Create a `KeyValueDiffer`.\n   */\n  create<K, V>(): KeyValueDiffer<K, V>;\n}\n\nexport function defaultKeyValueDiffersFactory() {\n  return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);\n}\n\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * @publicApi\n */\nexport class KeyValueDiffers {\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ /* @__PURE__ */ ɵɵdefineInjectable({\n    token: KeyValueDiffers,\n    providedIn: 'root',\n    factory: defaultKeyValueDiffersFactory,\n  });\n\n  private readonly factories: KeyValueDifferFactory[];\n\n  constructor(factories: KeyValueDifferFactory[]) {\n    this.factories = factories;\n  }\n\n  static create<S>(factories: KeyValueDifferFactory[], parent?: KeyValueDiffers): KeyValueDiffers {\n    if (parent) {\n      const copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n    return new KeyValueDiffers(factories);\n  }\n\n  /**\n   * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n   * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n   * {@link KeyValueDiffers} instance.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example shows how to extend an existing list of factories,\n   * which will only be applied to the injector for this component and its children.\n   * This step is all that's required to make a new {@link KeyValueDiffer} available.\n   *\n   * ```ts\n   * @Component({\n   *   viewProviders: [\n   *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n   *   ]\n   * })\n   * ```\n   */\n  static extend<S>(factories: KeyValueDifferFactory[]): StaticProvider {\n    return {\n      provide: KeyValueDiffers,\n      useFactory: (parent: KeyValueDiffers) => {\n        // if parent is null, it means that we are in the root injector and we have just overridden\n        // the default injection mechanism for KeyValueDiffers, in such a case just assume\n        // `defaultKeyValueDiffersFactory`.\n        return KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]],\n    };\n  }\n\n  find(kv: any): KeyValueDifferFactory {\n    const factory = this.factories.find((f) => f.supports(kv));\n    if (factory) {\n      return factory;\n    }\n    throw new RuntimeError(\n      RuntimeErrorCode.NO_SUPPORTING_DIFFER_FACTORY,\n      ngDevMode && `Cannot find a differ supporting object '${kv}'`,\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {internalProvideZoneChangeDetection} from '../change_detection/scheduling/ng_zone_scheduling';\nimport {EnvironmentProviders, Provider, StaticProvider} from '../di/interface/provider';\nimport {EnvironmentInjector} from '../di/r3_injector';\nimport {Type} from '../interface/type';\nimport {createOrReusePlatformInjector} from '../platform/platform';\nimport {assertStandaloneComponentType} from '../render3/errors';\nimport {EnvironmentNgModuleRefAdapter} from '../render3/ng_module_ref';\n\nimport {ApplicationRef} from './application_ref';\nimport {ChangeDetectionScheduler} from '../change_detection/scheduling/zoneless_scheduling';\nimport {ChangeDetectionSchedulerImpl} from '../change_detection/scheduling/zoneless_scheduling_impl';\nimport {bootstrap} from '../platform/bootstrap';\nimport {profiler} from '../render3/profiler';\nimport {ProfilerEvent} from '../render3/profiler_types';\n\n/**\n * Internal create application API that implements the core application creation logic and optional\n * bootstrap logic.\n *\n * Platforms (such as `platform-browser`) may require different set of application and platform\n * providers for an application to function correctly. As a result, platforms may use this function\n * internally and supply the necessary providers during the bootstrap, while exposing\n * platform-specific APIs as a part of their public API.\n *\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n */\n\nexport function internalCreateApplication(config: {\n  rootComponent?: Type<unknown>;\n  appProviders?: Array<Provider | EnvironmentProviders>;\n  platformProviders?: Provider[];\n}): Promise<ApplicationRef> {\n  profiler(ProfilerEvent.BootstrapApplicationStart);\n  try {\n    const {rootComponent, appProviders, platformProviders} = config;\n\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && rootComponent !== undefined) {\n      assertStandaloneComponentType(rootComponent);\n    }\n\n    const platformInjector = createOrReusePlatformInjector(platformProviders as StaticProvider[]);\n\n    // Create root application injector based on a set of providers configured at the platform\n    // bootstrap level as well as providers passed to the bootstrap call by a user.\n    const allAppProviders = [\n      internalProvideZoneChangeDetection({}),\n      {provide: ChangeDetectionScheduler, useExisting: ChangeDetectionSchedulerImpl},\n      ...(appProviders || []),\n    ];\n    const adapter = new EnvironmentNgModuleRefAdapter({\n      providers: allAppProviders,\n      parent: platformInjector as EnvironmentInjector,\n      debugName: typeof ngDevMode === 'undefined' || ngDevMode ? 'Environment Injector' : '',\n      // We skip environment initializers because we need to run them inside the NgZone, which\n      // happens after we get the NgZone instance from the Injector.\n      runEnvironmentInitializers: false,\n    });\n\n    return bootstrap({\n      r3Injector: adapter.injector,\n      platformInjector,\n      rootComponent,\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  } finally {\n    profiler(ProfilerEvent.BootstrapApplicationEnd);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Transforms a value (typically a string) to a boolean.\n * Intended to be used as a transform function of an input.\n *\n *  @usageNotes\n *  ```ts\n *  @Input({ transform: booleanAttribute }) status!: boolean;\n *  ```\n * @param value Value to be transformed.\n *\n * @publicApi\n */\nexport function booleanAttribute(value: unknown): boolean {\n  return typeof value === 'boolean' ? value : value != null && value !== 'false';\n}\n\n/**\n * Transforms a value (typically a string) to a number.\n * Intended to be used as a transform function of an input.\n * @param value Value to be transformed.\n * @param fallbackValue Value to use if the provided value can't be parsed as a number.\n *\n *  @usageNotes\n *  ```ts\n *  @Input({ transform: numberAttribute }) id!: number;\n *  ```\n *\n * @publicApi\n */\nexport function numberAttribute(value: unknown, fallbackValue = NaN): number {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  const isNumberValue = !isNaN(parseFloat(value as any)) && !isNaN(Number(value));\n  return isNumberValue ? Number(value) : fallbackValue;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {untracked as untrackedPrimitive} from '@angular/core/primitives/signals';\n\n/**\n * Execute an arbitrary function in a non-reactive (non-tracking) context. The executed function\n * can, optionally, return a value.\n */\nexport function untracked<T>(nonReactiveReadsFn: () => T): T {\n  return untrackedPrimitive(nonReactiveReadsFn);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {createComputed, SIGNAL} from '@angular/core/primitives/signals';\n\nimport {Signal, ValueEqualityFn} from './api';\n\n/**\n * Options passed to the `computed` creation function.\n */\nexport interface CreateComputedOptions<T> {\n  /**\n   * A comparison function which defines equality for computed values.\n   */\n  equal?: ValueEqualityFn<T>;\n\n  /**\n   * A debug name for the computed signal. Used in Angular DevTools to identify the signal.\n   */\n  debugName?: string;\n}\n\n/**\n * Create a computed `Signal` which derives a reactive value from an expression.\n */\nexport function computed<T>(computation: () => T, options?: CreateComputedOptions<T>): Signal<T> {\n  const getter = createComputed(computation, options?.equal);\n\n  if (ngDevMode) {\n    getter.toString = () => `[Computed: ${getter()}]`;\n    getter[SIGNAL].debugName = options?.debugName;\n  }\n\n  return getter;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  REACTIVE_NODE,\n  ReactiveNode,\n  SIGNAL,\n  consumerAfterComputation,\n  consumerBeforeComputation,\n  consumerDestroy,\n  consumerPollProducersForChange,\n  isInNotificationPhase,\n} from '@angular/core/primitives/signals';\nimport {FLAGS, LViewFlags, LView, EFFECTS} from '../interfaces/view';\nimport {markAncestorsForTraversal} from '../util/view_utils';\nimport {InjectionToken} from '../../di/injection_token';\nimport {inject} from '../../di/injector_compatibility';\nimport {performanceMarkFeature} from '../../util/performance';\nimport {Injector} from '../../di/injector';\nimport {assertNotInReactiveContext} from './asserts';\nimport {assertInInjectionContext} from '../../di/contextual';\nimport {DestroyRef, NodeInjectorDestroyRef} from '../../linker/destroy_ref';\nimport {ViewContext} from '../view_context';\nimport {noop} from '../../util/noop';\nimport {\n  ChangeDetectionScheduler,\n  NotificationSource,\n} from '../../change_detection/scheduling/zoneless_scheduling';\nimport {setIsRefreshingViews} from '../state';\nimport {EffectScheduler, SchedulableEffect} from './root_effect_scheduler';\nimport {USE_MICROTASK_EFFECT_BY_DEFAULT} from './patch';\nimport {microtaskEffect} from './microtask_effect';\n\nlet useMicrotaskEffectsByDefault = USE_MICROTASK_EFFECT_BY_DEFAULT;\nimport {emitEffectCreatedEvent, setInjectorProfilerContext} from '../debug/injector_profiler';\n\n/**\n * Toggle the flag on whether to use microtask effects (for testing).\n */\nexport function setUseMicrotaskEffectsByDefault(value: boolean): boolean {\n  const prev = useMicrotaskEffectsByDefault;\n  useMicrotaskEffectsByDefault = value;\n  return prev;\n}\n\n/**\n * A global reactive effect, which can be manually destroyed.\n *\n * @developerPreview\n */\nexport interface EffectRef {\n  /**\n   * Shut down the effect, removing it from any upcoming scheduled executions.\n   */\n  destroy(): void;\n}\n\nexport class EffectRefImpl implements EffectRef {\n  [SIGNAL]: EffectNode;\n\n  constructor(node: EffectNode) {\n    this[SIGNAL] = node;\n  }\n\n  destroy(): void {\n    this[SIGNAL].destroy();\n  }\n}\n\n/**\n * Options passed to the `effect` function.\n *\n * @developerPreview\n */\nexport interface CreateEffectOptions {\n  /**\n   * The `Injector` in which to create the effect.\n   *\n   * If this is not provided, the current [injection context](guide/di/dependency-injection-context)\n   * will be used instead (via `inject`).\n   */\n  injector?: Injector;\n\n  /**\n   * Whether the `effect` should require manual cleanup.\n   *\n   * If this is `false` (the default) the effect will automatically register itself to be cleaned up\n   * with the current `DestroyRef`.\n   */\n  manualCleanup?: boolean;\n\n  /**\n   * Always create a root effect (which is scheduled as a microtask) regardless of whether `effect`\n   * is called within a component.\n   */\n  forceRoot?: true;\n\n  /**\n   * @deprecated no longer required, signal writes are allowed by default.\n   */\n  allowSignalWrites?: boolean;\n\n  /**\n   * A debug name for the effect. Used in Angular DevTools to identify the effect.\n   */\n  debugName?: string;\n}\n\n/**\n * An effect can, optionally, register a cleanup function. If registered, the cleanup is executed\n * before the next effect run. The cleanup function makes it possible to \"cancel\" any work that the\n * previous effect run might have started.\n *\n * @developerPreview\n */\nexport type EffectCleanupFn = () => void;\n\n/**\n * A callback passed to the effect function that makes it possible to register cleanup logic.\n *\n * @developerPreview\n */\nexport type EffectCleanupRegisterFn = (cleanupFn: EffectCleanupFn) => void;\n\n/**\n * Registers an \"effect\" that will be scheduled & executed whenever the signals that it reads\n * changes.\n *\n * Angular has two different kinds of effect: component effects and root effects. Component effects\n * are created when `effect()` is called from a component, directive, or within a service of a\n * component/directive. Root effects are created when `effect()` is called from outside the\n * component tree, such as in a root service, or when the `forceRoot` option is provided.\n *\n * The two effect types differ in their timing. Component effects run as a component lifecycle\n * event during Angular's synchronization (change detection) process, and can safely read input\n * signals or create/destroy views that depend on component state. Root effects run as microtasks\n * and have no connection to the component tree or change detection.\n *\n * `effect()` must be run in injection context, unless the `injector` option is manually specified.\n *\n * @developerPreview\n */\nexport function effect(\n  effectFn: (onCleanup: EffectCleanupRegisterFn) => void,\n  options?: CreateEffectOptions,\n): EffectRef {\n  if (useMicrotaskEffectsByDefault) {\n    if (ngDevMode && options?.forceRoot) {\n      throw new Error(`Cannot use 'forceRoot' option with microtask effects on`);\n    }\n\n    return microtaskEffect(effectFn, options);\n  }\n\n  ngDevMode &&\n    assertNotInReactiveContext(\n      effect,\n      'Call `effect` outside of a reactive context. For example, schedule the ' +\n        'effect inside the component constructor.',\n    );\n\n  !options?.injector && assertInInjectionContext(effect);\n\n  if (ngDevMode && options?.allowSignalWrites !== undefined) {\n    console.warn(\n      `The 'allowSignalWrites' flag is deprecated and no longer impacts effect() (writes are always allowed)`,\n    );\n  }\n\n  const injector = options?.injector ?? inject(Injector);\n  let destroyRef = options?.manualCleanup !== true ? injector.get(DestroyRef) : null;\n\n  let node: EffectNode;\n\n  const viewContext = injector.get(ViewContext, null, {optional: true});\n  const notifier = injector.get(ChangeDetectionScheduler);\n  if (viewContext !== null && !options?.forceRoot) {\n    // This effect was created in the context of a view, and will be associated with the view.\n    node = createViewEffect(viewContext.view, notifier, effectFn);\n    if (destroyRef instanceof NodeInjectorDestroyRef && destroyRef._lView === viewContext.view) {\n      // The effect is being created in the same view as the `DestroyRef` references, so it will be\n      // automatically destroyed without the need for an explicit `DestroyRef` registration.\n      destroyRef = null;\n    }\n  } else {\n    // This effect was created outside the context of a view, and will be scheduled independently.\n    node = createRootEffect(effectFn, injector.get(EffectScheduler), notifier);\n  }\n  node.injector = injector;\n\n  if (destroyRef !== null) {\n    // If we need to register for cleanup, do that here.\n    node.onDestroyFn = destroyRef.onDestroy(() => node.destroy());\n  }\n\n  const effectRef = new EffectRefImpl(node);\n\n  if (ngDevMode) {\n    node.debugName = options?.debugName ?? '';\n    const prevInjectorProfilerContext = setInjectorProfilerContext({injector, token: null});\n    try {\n      emitEffectCreatedEvent(effectRef);\n    } finally {\n      setInjectorProfilerContext(prevInjectorProfilerContext);\n    }\n  }\n\n  return effectRef;\n}\n\nexport interface EffectNode extends ReactiveNode, SchedulableEffect {\n  hasRun: boolean;\n  cleanupFns: EffectCleanupFn[] | undefined;\n  injector: Injector;\n  notifier: ChangeDetectionScheduler;\n\n  onDestroyFn: () => void;\n  fn: (cleanupFn: EffectCleanupRegisterFn) => void;\n  run(): void;\n  destroy(): void;\n  maybeCleanup(): void;\n}\n\nexport interface ViewEffectNode extends EffectNode {\n  view: LView;\n}\n\nexport interface RootEffectNode extends EffectNode {\n  scheduler: EffectScheduler;\n}\n\n/**\n * Not public API, which guarantees `EffectScheduler` only ever comes from the application root\n * injector.\n */\nexport const APP_EFFECT_SCHEDULER = /* @__PURE__ */ new InjectionToken('', {\n  providedIn: 'root',\n  factory: () => inject(EffectScheduler),\n});\n\nexport const BASE_EFFECT_NODE: Omit<EffectNode, 'fn' | 'destroy' | 'injector' | 'notifier'> =\n  /* @__PURE__ */ (() => ({\n    ...REACTIVE_NODE,\n    consumerIsAlwaysLive: true,\n    consumerAllowSignalWrites: true,\n    dirty: true,\n    hasRun: false,\n    cleanupFns: undefined,\n    zone: null,\n    kind: 'effect',\n    onDestroyFn: noop,\n    run(this: EffectNode): void {\n      this.dirty = false;\n\n      if (ngDevMode && isInNotificationPhase()) {\n        throw new Error(`Schedulers cannot synchronously execute watches while scheduling.`);\n      }\n\n      if (this.hasRun && !consumerPollProducersForChange(this)) {\n        return;\n      }\n      this.hasRun = true;\n\n      const registerCleanupFn: EffectCleanupRegisterFn = (cleanupFn) =>\n        (this.cleanupFns ??= []).push(cleanupFn);\n\n      const prevNode = consumerBeforeComputation(this);\n\n      // We clear `setIsRefreshingViews` so that `markForCheck()` within the body of an effect will\n      // cause CD to reach the component in question.\n      const prevRefreshingViews = setIsRefreshingViews(false);\n      try {\n        this.maybeCleanup();\n        this.fn(registerCleanupFn);\n      } finally {\n        setIsRefreshingViews(prevRefreshingViews);\n        consumerAfterComputation(this, prevNode);\n      }\n    },\n\n    maybeCleanup(this: EffectNode): void {\n      if (!this.cleanupFns?.length) {\n        return;\n      }\n      try {\n        // Attempt to run the cleanup functions. Regardless of failure or success, we consider\n        // cleanup \"completed\" and clear the list for the next run of the effect. Note that an error\n        // from the cleanup function will still crash the current run of the effect.\n        while (this.cleanupFns.length) {\n          this.cleanupFns.pop()!();\n        }\n      } finally {\n        this.cleanupFns = [];\n      }\n    },\n  }))();\n\nexport const ROOT_EFFECT_NODE: Omit<RootEffectNode, 'fn' | 'scheduler' | 'notifier' | 'injector'> =\n  /* @__PURE__ */ (() => ({\n    ...BASE_EFFECT_NODE,\n    consumerMarkedDirty(this: RootEffectNode) {\n      this.scheduler.schedule(this);\n      this.notifier.notify(NotificationSource.RootEffect);\n    },\n    destroy(this: RootEffectNode) {\n      consumerDestroy(this);\n      this.onDestroyFn();\n      this.maybeCleanup();\n      this.scheduler.remove(this);\n    },\n  }))();\n\nexport const VIEW_EFFECT_NODE: Omit<ViewEffectNode, 'fn' | 'view' | 'injector' | 'notifier'> =\n  /* @__PURE__ */ (() => ({\n    ...BASE_EFFECT_NODE,\n    consumerMarkedDirty(this: ViewEffectNode): void {\n      this.view[FLAGS] |= LViewFlags.HasChildViewsToRefresh;\n      markAncestorsForTraversal(this.view);\n      this.notifier.notify(NotificationSource.ViewEffect);\n    },\n    destroy(this: ViewEffectNode): void {\n      consumerDestroy(this);\n      this.onDestroyFn();\n      this.maybeCleanup();\n      this.view[EFFECTS]?.delete(this);\n    },\n  }))();\n\nexport function createViewEffect(\n  view: LView,\n  notifier: ChangeDetectionScheduler,\n  fn: (onCleanup: EffectCleanupRegisterFn) => void,\n): ViewEffectNode {\n  const node = Object.create(VIEW_EFFECT_NODE) as ViewEffectNode;\n  node.view = view;\n  node.zone = typeof Zone !== 'undefined' ? Zone.current : null;\n  node.notifier = notifier;\n  node.fn = fn;\n\n  view[EFFECTS] ??= new Set();\n  view[EFFECTS].add(node);\n\n  node.consumerMarkedDirty(node);\n  return node;\n}\n\nexport function createRootEffect(\n  fn: (onCleanup: EffectCleanupRegisterFn) => void,\n  scheduler: EffectScheduler,\n  notifier: ChangeDetectionScheduler,\n): RootEffectNode {\n  const node = Object.create(ROOT_EFFECT_NODE) as RootEffectNode;\n  node.fn = fn;\n  node.scheduler = scheduler;\n  node.notifier = notifier;\n  node.zone = typeof Zone !== 'undefined' ? Zone.current : null;\n  node.scheduler.schedule(node);\n  node.notifier.notify(NotificationSource.RootEffect);\n  return node;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector} from '../di/injector';\nimport {EnvironmentInjector, getNullInjector} from '../di/r3_injector';\nimport {Type} from '../interface/type';\nimport {ComponentRef} from '../linker/component_factory';\n\nimport {ComponentFactory} from './component_ref';\nimport {getComponentDef} from './def_getters';\nimport {assertComponentDef} from './errors';\n\n/**\n * Creates a `ComponentRef` instance based on provided component type and a set of options.\n *\n * @usageNotes\n *\n * The example below demonstrates how the `createComponent` function can be used\n * to create an instance of a ComponentRef dynamically and attach it to an ApplicationRef,\n * so that it gets included into change detection cycles.\n *\n * Note: the example uses standalone components, but the function can also be used for\n * non-standalone components (declared in an NgModule) as well.\n *\n * ```angular-ts\n * @Component({\n *   standalone: true,\n *   template: `Hello {{ name }}!`\n * })\n * class HelloComponent {\n *   name = 'Angular';\n * }\n *\n * @Component({\n *   standalone: true,\n *   template: `<div id=\"hello-component-host\"></div>`\n * })\n * class RootComponent {}\n *\n * // Bootstrap an application.\n * const applicationRef = await bootstrapApplication(RootComponent);\n *\n * // Locate a DOM node that would be used as a host.\n * const hostElement = document.getElementById('hello-component-host');\n *\n * // Get an `EnvironmentInjector` instance from the `ApplicationRef`.\n * const environmentInjector = applicationRef.injector;\n *\n * // We can now create a `ComponentRef` instance.\n * const componentRef = createComponent(HelloComponent, {hostElement, environmentInjector});\n *\n * // Last step is to register the newly created ref using the `ApplicationRef` instance\n * // to include the component view into change detection cycles.\n * applicationRef.attachView(componentRef.hostView);\n * componentRef.changeDetectorRef.detectChanges();\n * ```\n *\n * @param component Component class reference.\n * @param options Set of options to use:\n *  * `environmentInjector`: An `EnvironmentInjector` instance to be used for the component.\n *  * `hostElement` (optional): A DOM node that should act as a host node for the component. If not\n * provided, Angular creates one based on the tag name used in the component selector (and falls\n * back to using `div` if selector doesn't have tag name info).\n *  * `elementInjector` (optional): An `ElementInjector` instance, see additional info about it\n * [here](guide/di/hierarchical-dependency-injection#elementinjector).\n *  * `projectableNodes` (optional): A list of DOM nodes that should be projected through\n * [`<ng-content>`](api/core/ng-content) of the new component instance, e.g.,\n * `[[element1, element2]]`: projects `element1` and `element2` into the same `<ng-content>`.\n * `[[element1, element2], [element3]]`: projects `element1` and `element2` into one `<ng-content>`,\n * and `element3` into a separate `<ng-content>`.\n * @returns ComponentRef instance that represents a given Component.\n *\n * @publicApi\n */\nexport function createComponent<C>(\n  component: Type<C>,\n  options: {\n    environmentInjector: EnvironmentInjector;\n    hostElement?: Element;\n    elementInjector?: Injector;\n    projectableNodes?: Node[][];\n  },\n): ComponentRef<C> {\n  ngDevMode && assertComponentDef(component);\n  const componentDef = getComponentDef(component)!;\n  const elementInjector = options.elementInjector || getNullInjector();\n  const factory = new ComponentFactory<C>(componentDef);\n  return factory.create(\n    elementInjector,\n    options.projectableNodes,\n    options.hostElement,\n    options.environmentInjector,\n  );\n}\n\n/**\n * An interface that describes the subset of component metadata\n * that can be retrieved using the `reflectComponentType` function.\n *\n * @publicApi\n */\nexport interface ComponentMirror<C> {\n  /**\n   * The component's HTML selector.\n   */\n  get selector(): string;\n  /**\n   * The type of component the factory will create.\n   */\n  get type(): Type<C>;\n  /**\n   * The inputs of the component.\n   */\n  get inputs(): ReadonlyArray<{\n    readonly propName: string;\n    readonly templateName: string;\n    readonly transform?: (value: any) => any;\n    readonly isSignal: boolean;\n  }>;\n  /**\n   * The outputs of the component.\n   */\n  get outputs(): ReadonlyArray<{readonly propName: string; readonly templateName: string}>;\n  /**\n   * Selector for all <ng-content> elements in the component.\n   */\n  get ngContentSelectors(): ReadonlyArray<string>;\n  /**\n   * Whether this component is marked as standalone.\n   * Note: an extra flag, not present in `ComponentFactory`.\n   */\n  get isStandalone(): boolean;\n  /**\n   * // TODO(signals): Remove internal and add public documentation\n   * @internal\n   */\n  get isSignal(): boolean;\n}\n\n/**\n * Creates an object that allows to retrieve component metadata.\n *\n * @usageNotes\n *\n * The example below demonstrates how to use the function and how the fields\n * of the returned object map to the component metadata.\n *\n * ```angular-ts\n * @Component({\n *   standalone: true,\n *   selector: 'foo-component',\n *   template: `\n *     <ng-content></ng-content>\n *     <ng-content select=\"content-selector-a\"></ng-content>\n *   `,\n * })\n * class FooComponent {\n *   @Input('inputName') inputPropName: string;\n *   @Output('outputName') outputPropName = new EventEmitter<void>();\n * }\n *\n * const mirror = reflectComponentType(FooComponent);\n * expect(mirror.type).toBe(FooComponent);\n * expect(mirror.selector).toBe('foo-component');\n * expect(mirror.isStandalone).toBe(true);\n * expect(mirror.inputs).toEqual([{propName: 'inputName', templateName: 'inputPropName'}]);\n * expect(mirror.outputs).toEqual([{propName: 'outputName', templateName: 'outputPropName'}]);\n * expect(mirror.ngContentSelectors).toEqual([\n *   '*',                 // first `<ng-content>` in a template, the selector defaults to `*`\n *   'content-selector-a' // second `<ng-content>` in a template\n * ]);\n * ```\n *\n * @param component Component class reference.\n * @returns An object that allows to retrieve component metadata.\n *\n * @publicApi\n */\nexport function reflectComponentType<C>(component: Type<C>): ComponentMirror<C> | null {\n  const componentDef = getComponentDef(component);\n  if (!componentDef) return null;\n\n  const factory = new ComponentFactory<C>(componentDef);\n  return {\n    get selector(): string {\n      return factory.selector;\n    },\n    get type(): Type<C> {\n      return factory.componentType;\n    },\n    get inputs(): ReadonlyArray<{\n      propName: string;\n      templateName: string;\n      transform?: (value: any) => any;\n      isSignal: boolean;\n    }> {\n      return factory.inputs;\n    },\n    get outputs(): ReadonlyArray<{propName: string; templateName: string}> {\n      return factory.outputs;\n    },\n    get ngContentSelectors(): ReadonlyArray<string> {\n      return factory.ngContentSelectors;\n    },\n    get isStandalone(): boolean {\n      return componentDef.standalone;\n    },\n    get isSignal(): boolean {\n      return componentDef.signals;\n    },\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nlet _DOM: DomAdapter = null!;\n\nexport function getDOM(): DomAdapter {\n  return _DOM;\n}\n\nexport function setRootDomAdapter(adapter: DomAdapter) {\n  _DOM ??= adapter;\n}\n\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class DomAdapter {\n  // Needs Domino-friendly test utility\n  abstract dispatchEvent(el: any, evt: any): any;\n  abstract readonly supportsDOMEvents: boolean;\n\n  // Used by Meta\n  abstract remove(el: any): void;\n  abstract createElement(tagName: any, doc?: any): HTMLElement;\n  abstract createHtmlDocument(): Document;\n  abstract getDefaultDocument(): Document;\n\n  // Used by By.css\n  abstract isElementNode(node: any): boolean;\n\n  // Used by Testability\n  abstract isShadowRoot(node: any): boolean;\n\n  // Used by KeyEventsPlugin\n  abstract onAndCancel(el: any, evt: any, listener: any, options?: any): Function;\n\n  // Used by PlatformLocation and ServerEventManagerPlugin\n  abstract getGlobalEventTarget(doc: Document, target: string): any;\n\n  // Used by PlatformLocation\n  abstract getBaseHref(doc: Document): string | null;\n  abstract resetBaseElement(): void;\n\n  // TODO: remove dependency in DefaultValueAccessor\n  abstract getUserAgent(): string;\n\n  // Used in the legacy @angular/http package which has some usage in g3.\n  abstract getCookie(name: string): string | null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * A DI Token representing the main rendering context.\n * In a browser and SSR this is the DOM Document.\n * When using SSR, that document is created by [Domino](https://github.com/angular/domino).\n *\n * @publicApi\n */\nexport const DOCUMENT = new InjectionToken<Document>(ngDevMode ? 'DocumentToken' : '');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, Injectable, InjectionToken} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\nimport {DOCUMENT} from '../dom_tokens';\n\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n *\n * `PlatformLocation` encapsulates all calls to DOM APIs, which allows the Router to be\n * platform-agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that Angular supports. For example, `@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `@angular/platform-server` provides\n * one suitable for use with server-side rendering.\n *\n * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}\n * when they need to interact with the DOM APIs like pushState, popState, etc.\n *\n * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly\n * by the {@link /api/router/Router Router} in order to navigate between routes. Since all interactions between\n * {@link /api/router/Router Router} /\n * {@link Location} / {@link LocationStrategy} and DOM APIs flow through the `PlatformLocation`\n * class, they are all platform-agnostic.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'platform', useFactory: () => inject(BrowserPlatformLocation)})\nexport abstract class PlatformLocation {\n  abstract getBaseHrefFromDOM(): string;\n  abstract getState(): unknown;\n  /**\n   * Returns a function that, when executed, removes the `popstate` event handler.\n   */\n  abstract onPopState(fn: LocationChangeListener): VoidFunction;\n  /**\n   * Returns a function that, when executed, removes the `hashchange` event handler.\n   */\n  abstract onHashChange(fn: LocationChangeListener): VoidFunction;\n\n  abstract get href(): string;\n  abstract get protocol(): string;\n  abstract get hostname(): string;\n  abstract get port(): string;\n  abstract get pathname(): string;\n  abstract get search(): string;\n  abstract get hash(): string;\n\n  abstract replaceState(state: any, title: string, url: string): void;\n\n  abstract pushState(state: any, title: string, url: string): void;\n\n  abstract forward(): void;\n\n  abstract back(): void;\n\n  historyGo?(relativePosition: number): void {\n    throw new Error(ngDevMode ? 'Not implemented' : '');\n  }\n}\n\n/**\n * @description\n * Indicates when a location is initialized.\n *\n * @publicApi\n */\nexport const LOCATION_INITIALIZED = new InjectionToken<Promise<any>>(\n  ngDevMode ? 'Location Initialized' : '',\n);\n\n/**\n * @description\n * A serializable version of the event from `onPopState` or `onHashChange`\n *\n * @publicApi\n */\nexport interface LocationChangeEvent {\n  type: string;\n  state: any;\n}\n\n/**\n * @publicApi\n */\nexport interface LocationChangeListener {\n  (event: LocationChangeEvent): any;\n}\n\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n *\n * @publicApi\n */\n@Injectable({\n  providedIn: 'platform',\n  useFactory: () => new BrowserPlatformLocation(),\n})\nexport class BrowserPlatformLocation extends PlatformLocation {\n  private _location: Location;\n  private _history: History;\n  private _doc = inject(DOCUMENT);\n\n  constructor() {\n    super();\n    this._location = window.location;\n    this._history = window.history;\n  }\n\n  override getBaseHrefFromDOM(): string {\n    return getDOM().getBaseHref(this._doc)!;\n  }\n\n  override onPopState(fn: LocationChangeListener): VoidFunction {\n    const window = getDOM().getGlobalEventTarget(this._doc, 'window');\n    window.addEventListener('popstate', fn, false);\n    return () => window.removeEventListener('popstate', fn);\n  }\n\n  override onHashChange(fn: LocationChangeListener): VoidFunction {\n    const window = getDOM().getGlobalEventTarget(this._doc, 'window');\n    window.addEventListener('hashchange', fn, false);\n    return () => window.removeEventListener('hashchange', fn);\n  }\n\n  override get href(): string {\n    return this._location.href;\n  }\n  override get protocol(): string {\n    return this._location.protocol;\n  }\n  override get hostname(): string {\n    return this._location.hostname;\n  }\n  override get port(): string {\n    return this._location.port;\n  }\n  override get pathname(): string {\n    return this._location.pathname;\n  }\n  override get search(): string {\n    return this._location.search;\n  }\n  override get hash(): string {\n    return this._location.hash;\n  }\n  override set pathname(newPath: string) {\n    this._location.pathname = newPath;\n  }\n\n  override pushState(state: any, title: string, url: string): void {\n    this._history.pushState(state, title, url);\n  }\n\n  override replaceState(state: any, title: string, url: string): void {\n    this._history.replaceState(state, title, url);\n  }\n\n  override forward(): void {\n    this._history.forward();\n  }\n\n  override back(): void {\n    this._history.back();\n  }\n\n  override historyGo(relativePosition: number = 0): void {\n    this._history.go(relativePosition);\n  }\n\n  override getState(): unknown {\n    return this._history.state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Joins two parts of a URL with a slash if needed.\n *\n * @param start  URL string\n * @param end    URL string\n *\n *\n * @returns The joined URL string.\n */\nexport function joinWithSlash(start: string, end: string) {\n  // If `start` is an empty string, return `end` as the result.\n  if (!start) return end;\n  // If `end` is an empty string, return `start` as the result.\n  if (!end) return start;\n  // If `start` ends with a slash, remove the leading slash from `end`.\n  if (start.endsWith('/')) {\n    return end.startsWith('/') ? start + end.slice(1) : start + end;\n  }\n  // If `start` doesn't end with a slash, add one if `end` doesn't start with a slash.\n  return end.startsWith('/') ? start + end : `${start}/${end}`;\n}\n\n/**\n * Removes a trailing slash from a URL string if needed.\n * Looks for the first occurrence of either `#`, `?`, or the end of the\n * line as `/` characters and removes the trailing slash if one exists.\n *\n * @param url URL string.\n *\n * @returns The URL string, modified if needed.\n */\nexport function stripTrailingSlash(url: string): string {\n  // Find the index of the first occurrence of `#`, `?`, or the end of the string.\n  // This marks the start of the query string, fragment, or the end of the URL path.\n  const pathEndIdx = url.search(/#|\\?|$/);\n  // Check if the character before `pathEndIdx` is a trailing slash.\n  // If it is, remove the trailing slash and return the modified URL.\n  // Otherwise, return the URL as is.\n  return url[pathEndIdx - 1] === '/' ? url.slice(0, pathEndIdx - 1) + url.slice(pathEndIdx) : url;\n}\n\n/**\n * Normalizes URL parameters by prepending with `?` if needed.\n *\n * @param  params String of URL parameters.\n *\n * @returns The normalized URL parameters string.\n */\nexport function normalizeQueryParams(params: string): string {\n  return params && params[0] !== '?' ? `?${params}` : params;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Inject, inject, Injectable, InjectionToken, OnDestroy, Optional} from '@angular/core';\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\nimport {joinWithSlash, normalizeQueryParams} from './util';\n\n/**\n * Enables the `Location` service to read route state from the browser's URL.\n * Angular provides two strategies:\n * `HashLocationStrategy` and `PathLocationStrategy`.\n *\n * Applications should use the `Router` or `Location` services to\n * interact with application route state.\n *\n * For instance, `HashLocationStrategy` produces URLs like\n * <code class=\"no-auto-link\">http://example.com/#/foo</code>,\n * and `PathLocationStrategy` produces\n * <code class=\"no-auto-link\">http://example.com/foo</code> as an equivalent URL.\n *\n * See these two classes for more.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: () => inject(PathLocationStrategy)})\nexport abstract class LocationStrategy {\n  abstract path(includeHash?: boolean): string;\n  abstract prepareExternalUrl(internal: string): string;\n  abstract getState(): unknown;\n  abstract pushState(state: any, title: string, url: string, queryParams: string): void;\n  abstract replaceState(state: any, title: string, url: string, queryParams: string): void;\n  abstract forward(): void;\n  abstract back(): void;\n  historyGo?(relativePosition: number): void {\n    throw new Error(ngDevMode ? 'Not implemented' : '');\n  }\n  abstract onPopState(fn: LocationChangeListener): void;\n  abstract getBaseHref(): string;\n}\n\n/**\n * A predefined DI token for the base href\n * to be used with the `PathLocationStrategy`.\n * The base href is the URL prefix that should be preserved when generating\n * and recognizing URLs.\n *\n * @usageNotes\n *\n * The following example shows how to use this token to configure the root app injector\n * with a base href value, so that the DI framework can supply the dependency anywhere in the app.\n *\n * ```ts\n * import {NgModule} from '@angular/core';\n * import {APP_BASE_HREF} from '@angular/common';\n *\n * @NgModule({\n *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n * })\n * class AppModule {}\n * ```\n *\n * @publicApi\n */\nexport const APP_BASE_HREF = new InjectionToken<string>(ngDevMode ? 'appBaseHref' : '');\n\n/**\n * @description\n * A {@link LocationStrategy} used to configure the {@link Location} service to\n * represent its state in the\n * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\n * browser's URL.\n *\n * If you're using `PathLocationStrategy`, you may provide a {@link APP_BASE_HREF}\n * or add a `<base href>` element to the document to override the default.\n *\n * For instance, if you provide an `APP_BASE_HREF` of `'/my/app/'` and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`. To ensure all relative URIs resolve correctly,\n * the `<base href>` and/or `APP_BASE_HREF` should end with a `/`.\n *\n * Similarly, if you add `<base href='/my/app/'/>` to the document and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n *\n * Note that when using `PathLocationStrategy`, neither the query nor\n * the fragment in the `<base href>` will be preserved, as outlined\n * by the [RFC](https://tools.ietf.org/html/rfc3986#section-5.2.2).\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class PathLocationStrategy extends LocationStrategy implements OnDestroy {\n  private _baseHref: string;\n  private _removeListenerFns: (() => void)[] = [];\n\n  constructor(\n    private _platformLocation: PlatformLocation,\n    @Optional() @Inject(APP_BASE_HREF) href?: string,\n  ) {\n    super();\n\n    this._baseHref =\n      href ??\n      this._platformLocation.getBaseHrefFromDOM() ??\n      inject(DOCUMENT).location?.origin ??\n      '';\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    while (this._removeListenerFns.length) {\n      this._removeListenerFns.pop()!();\n    }\n  }\n\n  override onPopState(fn: LocationChangeListener): void {\n    this._removeListenerFns.push(\n      this._platformLocation.onPopState(fn),\n      this._platformLocation.onHashChange(fn),\n    );\n  }\n\n  override getBaseHref(): string {\n    return this._baseHref;\n  }\n\n  override prepareExternalUrl(internal: string): string {\n    return joinWithSlash(this._baseHref, internal);\n  }\n\n  override path(includeHash: boolean = false): string {\n    const pathname =\n      this._platformLocation.pathname + normalizeQueryParams(this._platformLocation.search);\n    const hash = this._platformLocation.hash;\n    return hash && includeHash ? `${pathname}${hash}` : pathname;\n  }\n\n  override pushState(state: any, title: string, url: string, queryParams: string) {\n    const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));\n    this._platformLocation.pushState(state, title, externalUrl);\n  }\n\n  override replaceState(state: any, title: string, url: string, queryParams: string) {\n    const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));\n    this._platformLocation.replaceState(state, title, externalUrl);\n  }\n\n  override forward(): void {\n    this._platformLocation.forward();\n  }\n\n  override back(): void {\n    this._platformLocation.back();\n  }\n\n  override getState(): unknown {\n    return this._platformLocation.getState();\n  }\n\n  override historyGo(relativePosition: number = 0): void {\n    this._platformLocation.historyGo?.(relativePosition);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, OnDestroy, ɵɵinject} from '@angular/core';\nimport {Subject, SubscriptionLike} from 'rxjs';\n\nimport {LocationStrategy} from './location_strategy';\nimport {joinWithSlash, normalizeQueryParams, stripTrailingSlash} from './util';\n\n/** @publicApi */\nexport interface PopStateEvent {\n  pop?: boolean;\n  state?: any;\n  type?: string;\n  url?: string;\n}\n\n/**\n * @description\n *\n * A service that applications can use to interact with a browser's URL.\n *\n * Depending on the `LocationStrategy` used, `Location` persists\n * to the URL's path or the URL's hash segment.\n *\n * @usageNotes\n *\n * It's better to use the `Router.navigate()` service to trigger route changes. Use\n * `Location` only if you need to interact with or create normalized URLs outside of\n * routing.\n *\n * `Location` is responsible for normalizing the URL against the application's base href.\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n * trailing slash:\n * - `/my/app/user/123` is normalized\n * - `my/app/user/123` **is not** normalized\n * - `/my/app/user/123/` **is not** normalized\n *\n * ### Example\n *\n * {@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n * @publicApi\n */\n@Injectable({\n  providedIn: 'root',\n  // See #23917\n  useFactory: createLocation,\n})\nexport class Location implements OnDestroy {\n  /** @internal */\n  _subject = new Subject<PopStateEvent>();\n  /** @internal */\n  _basePath: string;\n  /** @internal */\n  _locationStrategy: LocationStrategy;\n  /** @internal */\n  _urlChangeListeners: ((url: string, state: unknown) => void)[] = [];\n  /** @internal */\n  _urlChangeSubscription: SubscriptionLike | null = null;\n\n  constructor(locationStrategy: LocationStrategy) {\n    this._locationStrategy = locationStrategy;\n    const baseHref = this._locationStrategy.getBaseHref();\n    // Note: This class's interaction with base HREF does not fully follow the rules\n    // outlined in the spec https://www.freesoft.org/CIE/RFC/1808/18.htm.\n    // Instead of trying to fix individual bugs with more and more code, we should\n    // investigate using the URL constructor and providing the base as a second\n    // argument.\n    // https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#parameters\n    this._basePath = _stripOrigin(stripTrailingSlash(_stripIndexHtml(baseHref)));\n    this._locationStrategy.onPopState((ev) => {\n      this._subject.next({\n        'url': this.path(true),\n        'pop': true,\n        'state': ev.state,\n        'type': ev.type,\n      });\n    });\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    this._urlChangeSubscription?.unsubscribe();\n    this._urlChangeListeners = [];\n  }\n\n  /**\n   * Normalizes the URL path for this location.\n   *\n   * @param includeHash True to include an anchor fragment in the path.\n   *\n   * @returns The normalized URL path.\n   */\n  // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is\n  // removed.\n  path(includeHash: boolean = false): string {\n    return this.normalize(this._locationStrategy.path(includeHash));\n  }\n\n  /**\n   * Reports the current state of the location history.\n   * @returns The current value of the `history.state` object.\n   */\n  getState(): unknown {\n    return this._locationStrategy.getState();\n  }\n\n  /**\n   * Normalizes the given path and compares to the current normalized path.\n   *\n   * @param path The given URL path.\n   * @param query Query parameters.\n   *\n   * @returns True if the given URL path is equal to the current normalized path, false\n   * otherwise.\n   */\n  isCurrentPathEqualTo(path: string, query: string = ''): boolean {\n    return this.path() == this.normalize(path + normalizeQueryParams(query));\n  }\n\n  /**\n   * Normalizes a URL path by stripping any trailing slashes.\n   *\n   * @param url String representing a URL.\n   *\n   * @returns The normalized URL string.\n   */\n  normalize(url: string): string {\n    return Location.stripTrailingSlash(_stripBasePath(this._basePath, _stripIndexHtml(url)));\n  }\n\n  /**\n   * Normalizes an external URL path.\n   * If the given URL doesn't begin with a leading slash (`'/'`), adds one\n   * before normalizing. Adds a hash if `HashLocationStrategy` is\n   * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n   *\n   * @param url String representing a URL.\n   *\n   * @returns  A normalized platform-specific URL.\n   */\n  prepareExternalUrl(url: string): string {\n    if (url && url[0] !== '/') {\n      url = '/' + url;\n    }\n    return this._locationStrategy.prepareExternalUrl(url);\n  }\n\n  // TODO: rename this method to pushState\n  /**\n   * Changes the browser's URL to a normalized version of a given URL, and pushes a\n   * new item onto the platform's history.\n   *\n   * @param path  URL path to normalize.\n   * @param query Query parameters.\n   * @param state Location history state.\n   *\n   */\n  go(path: string, query: string = '', state: any = null): void {\n    this._locationStrategy.pushState(state, '', path, query);\n    this._notifyUrlChangeListeners(\n      this.prepareExternalUrl(path + normalizeQueryParams(query)),\n      state,\n    );\n  }\n\n  /**\n   * Changes the browser's URL to a normalized version of the given URL, and replaces\n   * the top item on the platform's history stack.\n   *\n   * @param path  URL path to normalize.\n   * @param query Query parameters.\n   * @param state Location history state.\n   */\n  replaceState(path: string, query: string = '', state: any = null): void {\n    this._locationStrategy.replaceState(state, '', path, query);\n    this._notifyUrlChangeListeners(\n      this.prepareExternalUrl(path + normalizeQueryParams(query)),\n      state,\n    );\n  }\n\n  /**\n   * Navigates forward in the platform's history.\n   */\n  forward(): void {\n    this._locationStrategy.forward();\n  }\n\n  /**\n   * Navigates back in the platform's history.\n   */\n  back(): void {\n    this._locationStrategy.back();\n  }\n\n  /**\n   * Navigate to a specific page from session history, identified by its relative position to the\n   * current page.\n   *\n   * @param relativePosition  Position of the target page in the history relative to the current\n   *     page.\n   * A negative value moves backwards, a positive value moves forwards, e.g. `location.historyGo(2)`\n   * moves forward two pages and `location.historyGo(-2)` moves back two pages. When we try to go\n   * beyond what's stored in the history session, we stay in the current page. Same behaviour occurs\n   * when `relativePosition` equals 0.\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/History_API#Moving_to_a_specific_point_in_history\n   */\n  historyGo(relativePosition: number = 0): void {\n    this._locationStrategy.historyGo?.(relativePosition);\n  }\n\n  /**\n   * Registers a URL change listener. Use to catch updates performed by the Angular\n   * framework that are not detectible through \"popstate\" or \"hashchange\" events.\n   *\n   * @param fn The change handler function, which take a URL and a location history state.\n   * @returns A function that, when executed, unregisters a URL change listener.\n   */\n  onUrlChange(fn: (url: string, state: unknown) => void): VoidFunction {\n    this._urlChangeListeners.push(fn);\n\n    this._urlChangeSubscription ??= this.subscribe((v) => {\n      this._notifyUrlChangeListeners(v.url, v.state);\n    });\n\n    return () => {\n      const fnIndex = this._urlChangeListeners.indexOf(fn);\n      this._urlChangeListeners.splice(fnIndex, 1);\n\n      if (this._urlChangeListeners.length === 0) {\n        this._urlChangeSubscription?.unsubscribe();\n        this._urlChangeSubscription = null;\n      }\n    };\n  }\n\n  /** @internal */\n  _notifyUrlChangeListeners(url: string = '', state: unknown) {\n    this._urlChangeListeners.forEach((fn) => fn(url, state));\n  }\n\n  /**\n   * Subscribes to the platform's `popState` events.\n   *\n   * Note: `Location.go()` does not trigger the `popState` event in the browser. Use\n   * `Location.onUrlChange()` to subscribe to URL changes instead.\n   *\n   * @param value Event that is triggered when the state history changes.\n   * @param exception The exception to throw.\n   *\n   * @see [onpopstate](https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate)\n   *\n   * @returns Subscribed events.\n   */\n  subscribe(\n    onNext: (value: PopStateEvent) => void,\n    onThrow?: ((exception: any) => void) | null,\n    onReturn?: (() => void) | null,\n  ): SubscriptionLike {\n    return this._subject.subscribe({\n      next: onNext,\n      error: onThrow ?? undefined,\n      complete: onReturn ?? undefined,\n    });\n  }\n\n  /**\n   * Normalizes URL parameters by prepending with `?` if needed.\n   *\n   * @param  params String of URL parameters.\n   *\n   * @returns The normalized URL parameters string.\n   */\n  public static normalizeQueryParams: (params: string) => string = normalizeQueryParams;\n\n  /**\n   * Joins two parts of a URL with a slash if needed.\n   *\n   * @param start  URL string\n   * @param end    URL string\n   *\n   *\n   * @returns The joined URL string.\n   */\n  public static joinWithSlash: (start: string, end: string) => string = joinWithSlash;\n\n  /**\n   * Removes a trailing slash from a URL string if needed.\n   * Looks for the first occurrence of either `#`, `?`, or the end of the\n   * line as `/` characters and removes the trailing slash if one exists.\n   *\n   * @param url URL string.\n   *\n   * @returns The URL string, modified if needed.\n   */\n  public static stripTrailingSlash: (url: string) => string = stripTrailingSlash;\n}\n\nexport function createLocation() {\n  return new Location(ɵɵinject(LocationStrategy as any));\n}\n\nfunction _stripBasePath(basePath: string, url: string): string {\n  if (!basePath || !url.startsWith(basePath)) {\n    return url;\n  }\n  const strippedUrl = url.substring(basePath.length);\n  if (strippedUrl === '' || ['/', ';', '?', '#'].includes(strippedUrl[0])) {\n    return strippedUrl;\n  }\n  return url;\n}\n\nfunction _stripIndexHtml(url: string): string {\n  return url.replace(/\\/index.html$/, '');\n}\n\nfunction _stripOrigin(baseHref: string): string {\n  // DO NOT REFACTOR! Previously, this check looked like this:\n  // `/^(https?:)?\\/\\//.test(baseHref)`, but that resulted in\n  // syntactically incorrect code after Closure Compiler minification.\n  // This was likely caused by a bug in Closure Compiler, but\n  // for now, the check is rewritten to use `new RegExp` instead.\n  const isAbsoluteUrl = new RegExp('^(https?:)?//').test(baseHref);\n  if (isAbsoluteUrl) {\n    const [, pathname] = baseHref.split(/\\/\\/[^\\/]+/);\n    return pathname;\n  }\n  return baseHref;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ɵCurrencyIndex,\n  ɵExtraLocaleDataIndex,\n  ɵfindLocaleData,\n  ɵgetLocaleCurrencyCode,\n  ɵgetLocalePluralCase,\n  ɵLocaleDataIndex,\n} from '@angular/core';\n\nimport {CURRENCIES_EN, CurrenciesSymbols} from './currencies';\n\n/**\n * Format styles that can be used to represent numbers.\n * @see {@link getLocaleNumberFormat}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated `getLocaleNumberFormat` is deprecated\n */\nexport enum NumberFormatStyle {\n  Decimal,\n  Percent,\n  Currency,\n  Scientific,\n}\n\n/**\n * Plurality cases used for translating plurals to different languages.\n *\n * @see {@link NgPlural}\n * @see {@link NgPluralCase}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated `getLocalePluralCase` is deprecated\n */\nexport enum Plural {\n  Zero = 0,\n  One = 1,\n  Two = 2,\n  Few = 3,\n  Many = 4,\n  Other = 5,\n}\n\n/**\n * Context-dependant translation forms for strings.\n * Typically the standalone version is for the nominative form of the word,\n * and the format version is used for the genitive case.\n * @see [CLDR website](http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles)\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated locale data getters are deprecated\n */\nexport enum FormStyle {\n  Format,\n  Standalone,\n}\n\n/**\n * String widths available for translations.\n * The specific character widths are locale-specific.\n * Examples are given for the word \"Sunday\" in English.\n *\n * @publicApi\n *\n * @deprecated locale data getters are deprecated\n */\nexport enum TranslationWidth {\n  /** 1 character for `en-US`. For example: 'S' */\n  Narrow,\n  /** 3 characters for `en-US`. For example: 'Sun' */\n  Abbreviated,\n  /** Full length for `en-US`. For example: \"Sunday\" */\n  Wide,\n  /** 2 characters for `en-US`, For example: \"Su\" */\n  Short,\n}\n\n/**\n * String widths available for date-time formats.\n * The specific character widths are locale-specific.\n * Examples are given for `en-US`.\n *\n * @see {@link getLocaleDateFormat}\n * @see {@link getLocaleTimeFormat}\n * @see {@link getLocaleDateTimeFormat}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n * @publicApi\n *\n * @deprecated Date locale data getters are deprecated\n */\nexport enum FormatWidth {\n  /**\n   * For `en-US`, `'M/d/yy, h:mm a'`\n   * (Example: `6/15/15, 9:03 AM`)\n   */\n  Short,\n  /**\n   * For `en-US`, `'MMM d, y, h:mm:ss a'`\n   * (Example: `Jun 15, 2015, 9:03:01 AM`)\n   */\n  Medium,\n  /**\n   * For `en-US`, `'MMMM d, y, h:mm:ss a z'`\n   * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)\n   */\n  Long,\n  /**\n   * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`\n   * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)\n   */\n  Full,\n}\n\n// This needs to be an object literal, rather than an enum, because TypeScript 5.4+\n// doesn't allow numeric keys and we have `Infinity` and `NaN`.\n/**\n * Symbols that can be used to replace placeholders in number patterns.\n * Examples are based on `en-US` values.\n *\n * @see {@link getLocaleNumberSymbol}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated `getLocaleNumberSymbol` is deprecated\n *\n * @object-literal-as-enum\n */\nexport const NumberSymbol = {\n  /**\n   * Decimal separator.\n   * For `en-US`, the dot character.\n   * Example: 2,345`.`67\n   */\n  Decimal: 0,\n  /**\n   * Grouping separator, typically for thousands.\n   * For `en-US`, the comma character.\n   * Example: 2`,`345.67\n   */\n  Group: 1,\n  /**\n   * List-item separator.\n   * Example: \"one, two, and three\"\n   */\n  List: 2,\n  /**\n   * Sign for percentage (out of 100).\n   * Example: 23.4%\n   */\n  PercentSign: 3,\n  /**\n   * Sign for positive numbers.\n   * Example: +23\n   */\n  PlusSign: 4,\n  /**\n   * Sign for negative numbers.\n   * Example: -23\n   */\n  MinusSign: 5,\n  /**\n   * Computer notation for exponential value (n times a power of 10).\n   * Example: 1.2E3\n   */\n  Exponential: 6,\n  /**\n   * Human-readable format of exponential.\n   * Example: 1.2x103\n   */\n  SuperscriptingExponent: 7,\n  /**\n   * Sign for permille (out of 1000).\n   * Example: 23.4‰\n   */\n  PerMille: 8,\n  /**\n   * Infinity, can be used with plus and minus.\n   * Example: ∞, +∞, -∞\n   */\n  Infinity: 9,\n  /**\n   * Not a number.\n   * Example: NaN\n   */\n  NaN: 10,\n  /**\n   * Symbol used between time units.\n   * Example: 10:52\n   */\n  TimeSeparator: 11,\n  /**\n   * Decimal separator for currency values (fallback to `Decimal`).\n   * Example: $2,345.67\n   */\n  CurrencyDecimal: 12,\n  /**\n   * Group separator for currency values (fallback to `Group`).\n   * Example: $2,345.67\n   */\n  CurrencyGroup: 13,\n} as const;\n\nexport type NumberSymbol = (typeof NumberSymbol)[keyof typeof NumberSymbol];\n\n/**\n * The value for each day of the week, based on the `en-US` locale\n *\n * @publicApi\n *\n * @deprecated Week locale getters are deprecated\n */\nexport enum WeekDay {\n  Sunday = 0,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday,\n}\n\n/**\n * Retrieves the locale ID from the currently loaded locale.\n * The loaded locale could be, for example, a global one rather than a regional one.\n * @param locale A locale code, such as `fr-FR`.\n * @returns The locale code. For example, `fr`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * This function serves no purpose when relying on the `Intl` API.\n */\nexport function getLocaleId(locale: string): string {\n  return ɵfindLocaleData(locale)[ɵLocaleDataIndex.LocaleId];\n}\n\n/**\n * Retrieves day period strings for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized period strings. For example, `[AM, PM]` for `en-US`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nexport function getLocaleDayPeriods(\n  locale: string,\n  formStyle: FormStyle,\n  width: TranslationWidth,\n): Readonly<[string, string]> {\n  const data = ɵfindLocaleData(locale);\n  const amPmData = <[string, string][][]>[\n    data[ɵLocaleDataIndex.DayPeriodsFormat],\n    data[ɵLocaleDataIndex.DayPeriodsStandalone],\n  ];\n  const amPm = getLastDefinedValue(amPmData, formStyle);\n  return getLastDefinedValue(amPm, width);\n}\n\n/**\n * Retrieves days of the week for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nexport function getLocaleDayNames(\n  locale: string,\n  formStyle: FormStyle,\n  width: TranslationWidth,\n): ReadonlyArray<string> {\n  const data = ɵfindLocaleData(locale);\n  const daysData = <string[][][]>[\n    data[ɵLocaleDataIndex.DaysFormat],\n    data[ɵLocaleDataIndex.DaysStandalone],\n  ];\n  const days = getLastDefinedValue(daysData, formStyle);\n  return getLastDefinedValue(days, width);\n}\n\n/**\n * Retrieves months of the year for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,  `[January, February, ...]` for `en-US`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nexport function getLocaleMonthNames(\n  locale: string,\n  formStyle: FormStyle,\n  width: TranslationWidth,\n): ReadonlyArray<string> {\n  const data = ɵfindLocaleData(locale);\n  const monthsData = <string[][][]>[\n    data[ɵLocaleDataIndex.MonthsFormat],\n    data[ɵLocaleDataIndex.MonthsStandalone],\n  ];\n  const months = getLastDefinedValue(monthsData, formStyle);\n  return getLastDefinedValue(months, width);\n}\n\n/**\n * Retrieves Gregorian-calendar eras for the given locale.\n * @param locale A locale code for the locale format rules to use.\n * @param width The required character width.\n\n * @returns An array of localized era strings.\n * For example, `[AD, BC]` for `en-US`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nexport function getLocaleEraNames(\n  locale: string,\n  width: TranslationWidth,\n): Readonly<[string, string]> {\n  const data = ɵfindLocaleData(locale);\n  const erasData = <[string, string][]>data[ɵLocaleDataIndex.Eras];\n  return getLastDefinedValue(erasData, width);\n}\n\n/**\n * Retrieves the first day of the week for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns A day index number, using the 0-based week-day index for `en-US`\n * (Sunday = 0, Monday = 1, ...).\n * For example, for `fr-FR`, returns 1 to indicate that the first day is Monday.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Intl's [`getWeekInfo`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getWeekInfo) has partial support (Chromium M99 & Safari 17).\n * You may want to rely on the following alternatives:\n * - Libraries like [`Luxon`](https://moment.github.io/luxon/#/) rely on `Intl` but fallback on the ISO 8601 definition (monday) if `getWeekInfo` is not supported.\n * - Other librairies like [`date-fns`](https://date-fns.org/), [`day.js`](https://day.js.org/en/) or [`weekstart`](https://www.npmjs.com/package/weekstart) library provide their own locale based data for the first day of the week.\n */\nexport function getLocaleFirstDayOfWeek(locale: string): WeekDay {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.FirstDayOfWeek];\n}\n\n/**\n * Range of week days that are considered the week-end for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The range of day values, `[startDay, endDay]`.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Intl's [`getWeekInfo`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getWeekInfo) has partial support (Chromium M99 & Safari 17).\n * Libraries like [`Luxon`](https://moment.github.io/luxon/#/) rely on `Intl` but fallback on the ISO 8601 definition (Saturday+Sunday) if `getWeekInfo` is not supported .\n */\nexport function getLocaleWeekEndRange(locale: string): [WeekDay, WeekDay] {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.WeekendRange];\n}\n\n/**\n * Retrieves a localized date-value formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see {@link FormatWidth}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nexport function getLocaleDateFormat(locale: string, width: FormatWidth): string {\n  const data = ɵfindLocaleData(locale);\n  return getLastDefinedValue(data[ɵLocaleDataIndex.DateFormat], width);\n}\n\n/**\n * Retrieves a localized time-value formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see {@link FormatWidth}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n\n * @publicApi\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nexport function getLocaleTimeFormat(locale: string, width: FormatWidth): string {\n  const data = ɵfindLocaleData(locale);\n  return getLastDefinedValue(data[ɵLocaleDataIndex.TimeFormat], width);\n}\n\n/**\n * Retrieves a localized date-time formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see {@link FormatWidth}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.DateTimeFormat` for date formating instead.\n */\nexport function getLocaleDateTimeFormat(locale: string, width: FormatWidth): string {\n  const data = ɵfindLocaleData(locale);\n  const dateTimeFormatData = <string[]>data[ɵLocaleDataIndex.DateTimeFormat];\n  return getLastDefinedValue(dateTimeFormatData, width);\n}\n\n/**\n * Retrieves a localized number symbol that can be used to replace placeholders in number formats.\n * @param locale The locale code.\n * @param symbol The symbol to localize. Must be one of `NumberSymbol`.\n * @returns The character for the localized symbol.\n * @see {@link NumberSymbol}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.NumberFormat` to format numbers instead.\n */\nexport function getLocaleNumberSymbol(locale: string, symbol: NumberSymbol): string {\n  const data = ɵfindLocaleData(locale);\n  const res = data[ɵLocaleDataIndex.NumberSymbols][symbol];\n  if (typeof res === 'undefined') {\n    if (symbol === NumberSymbol.CurrencyDecimal) {\n      return data[ɵLocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];\n    } else if (symbol === NumberSymbol.CurrencyGroup) {\n      return data[ɵLocaleDataIndex.NumberSymbols][NumberSymbol.Group];\n    }\n  }\n  return res;\n}\n\n/**\n * Retrieves a number format for a given locale.\n *\n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\n * when used to format the number 12345.678 could result in \"12'345,678\". That would happen if the\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\n *\n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders\n * that stand for the decimal separator, and so on, and are NOT real characters.\n * You must NOT \"translate\" the placeholders. For example, don't change `.` to `,` even though in\n * your language the decimal point is written with a comma. The symbols should be replaced by the\n * local equivalents, using the appropriate `NumberSymbol` for your language.\n *\n * Here are the special characters used in number patterns:\n *\n * | Symbol | Meaning |\n * |--------|---------|\n * | . | Replaced automatically by the character used for the decimal point. |\n * | , | Replaced by the \"grouping\" (thousands) separator. |\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\n * | # | Replaced by a digit (or nothing if there aren't enough). |\n * | ¤ | Replaced by a currency symbol, such as $ or USD. |\n * | % | Marks a percent format. The % symbol may change position, but must be retained. |\n * | E | Marks a scientific format. The E symbol may change position, but must be retained. |\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n *\n * @param locale A locale code for the locale format rules to use.\n * @param type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)\n * @returns The localized format string.\n * @see {@link NumberFormatStyle}\n * @see [CLDR website](http://cldr.unicode.org/translation/number-patterns)\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Let `Intl.NumberFormat` determine the number format instead\n */\nexport function getLocaleNumberFormat(locale: string, type: NumberFormatStyle): string {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.NumberFormats][type];\n}\n\n/**\n * Retrieves the symbol used to represent the currency for the main country\n * corresponding to a given locale. For example, '$' for `en-US`.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The localized symbol character,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Use the `Intl` API to format a currency with from currency code\n */\nexport function getLocaleCurrencySymbol(locale: string): string | null {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.CurrencySymbol] || null;\n}\n\n/**\n * Retrieves the name of the currency for the main country corresponding\n * to a given locale. For example, 'US Dollar' for `en-US`.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency name,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Use the `Intl` API to format a currency with from currency code\n */\nexport function getLocaleCurrencyName(locale: string): string | null {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.CurrencyName] || null;\n}\n\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n * @publicApi\n *\n * @deprecated We recommend you create a map of locale to ISO 4217 currency codes.\n * Time relative currency data is provided by the CLDR project. See https://www.unicode.org/cldr/charts/44/supplemental/detailed_territory_currency_information.html\n */\nexport function getLocaleCurrencyCode(locale: string): string | null {\n  return ɵgetLocaleCurrencyCode(locale);\n}\n\n/**\n * Retrieves the currency values for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency values.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n */\nfunction getLocaleCurrencies(locale: string): {[code: string]: CurrenciesSymbols} {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.Currencies];\n}\n\n/**\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Use `Intl.PluralRules` instead\n */\nexport const getLocalePluralCase: (locale: string) => (value: number) => Plural =\n  ɵgetLocalePluralCase;\n\nfunction checkFullData(data: any) {\n  if (!data[ɵLocaleDataIndex.ExtraData]) {\n    throw new Error(\n      `Missing extra locale data for the locale \"${\n        data[ɵLocaleDataIndex.LocaleId]\n      }\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more.`,\n    );\n  }\n}\n\n/**\n * Retrieves locale-specific rules used to determine which day period to use\n * when more than one period is defined for a locale.\n *\n * There is a rule for each defined day period. The\n * first rule is applied to the first day period and so on.\n * Fall back to AM/PM when no rules are available.\n *\n * A rule can specify a period as time range, or as a single time value.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n/format-data-locale).\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The rules for the locale, a single time value or array of *from-time, to-time*,\n * or null if no periods are available.\n *\n * @see {@link getLocaleExtraDayPeriods}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * Let `Intl.DateTimeFormat` determine the day period instead.\n */\nexport function getLocaleExtraDayPeriodRules(locale: string): (Time | [Time, Time])[] {\n  const data = ɵfindLocaleData(locale);\n  checkFullData(data);\n  const rules = data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodsRules] || [];\n  return rules.map((rule: string | [string, string]) => {\n    if (typeof rule === 'string') {\n      return extractTime(rule);\n    }\n    return [extractTime(rule[0]), extractTime(rule[1])];\n  });\n}\n\n/**\n * Retrieves locale-specific day periods, which indicate roughly how a day is broken up\n * in different languages.\n * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n/format-data-locale).\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns The translated day-period strings.\n * @see {@link getLocaleExtraDayPeriodRules}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * To extract a day period use `Intl.DateTimeFormat` with the `dayPeriod` option instead.\n */\nexport function getLocaleExtraDayPeriods(\n  locale: string,\n  formStyle: FormStyle,\n  width: TranslationWidth,\n): string[] {\n  const data = ɵfindLocaleData(locale);\n  checkFullData(data);\n  const dayPeriodsData = <string[][][]>[\n    data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodFormats],\n    data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodStandalone],\n  ];\n  const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\n  return getLastDefinedValue(dayPeriods, width) || [];\n}\n\n/**\n * Retrieves the writing direction of a specified locale\n * @param locale A locale code for the locale format rules to use.\n * @publicApi\n * @returns 'rtl' or 'ltr'\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * For dates and numbers, let `Intl.DateTimeFormat()` and `Intl.NumberFormat()` determine the writing direction.\n * The `Intl` alternative [`getTextInfo`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTextInfo).\n * has only partial support (Chromium M99 & Safari 17).\n * 3rd party alternatives like [`rtl-detect`](https://www.npmjs.com/package/rtl-detect) can work around this issue.\n */\nexport function getLocaleDirection(locale: string): 'ltr' | 'rtl' {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.Directionality];\n}\n\n/**\n * Retrieves the first value that is defined in an array, going backwards from an index position.\n *\n * To avoid repeating the same data (as when the \"format\" and \"standalone\" forms are the same)\n * add the first value to the locale data arrays, and add other values only if they are different.\n *\n * @param data The data array to retrieve from.\n * @param index A 0-based index into the array to start from.\n * @returns The value immediately before the given index position.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n */\nfunction getLastDefinedValue<T>(data: T[], index: number): T {\n  for (let i = index; i > -1; i--) {\n    if (typeof data[i] !== 'undefined') {\n      return data[i];\n    }\n  }\n  throw new Error('Locale data API: locale data undefined');\n}\n\n/**\n * Represents a time value with hours and minutes.\n *\n * @publicApi\n *\n * @deprecated Locale date getters are deprecated\n */\nexport type Time = {\n  hours: number;\n  minutes: number;\n};\n\n/**\n * Extracts the hours and minutes from a string like \"15:45\"\n */\nfunction extractTime(time: string): Time {\n  const [h, m] = time.split(':');\n  return {hours: +h, minutes: +m};\n}\n\n/**\n * Retrieves the currency symbol for a given currency code.\n *\n * For example, for the default `en-US` locale, the code `USD` can\n * be represented by the narrow symbol `$` or the wide symbol `US$`.\n *\n * @param code The currency code.\n * @param format The format, `wide` or `narrow`.\n * @param locale A locale code for the locale format rules to use.\n *\n * @returns The symbol, or the currency code if no symbol is available.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * You can use `Intl.NumberFormat().formatToParts()` to extract the currency symbol.\n * For example: `Intl.NumberFormat('en', {style:'currency', currency: 'USD'}).formatToParts().find(part => part.type === 'currency').value`\n * returns `$` for USD currency code in the `en` locale.\n * Note: `US$` is a currency symbol for the `en-ca` locale but not the `en-us` locale.\n */\nexport function getCurrencySymbol(code: string, format: 'wide' | 'narrow', locale = 'en'): string {\n  const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];\n  const symbolNarrow = currency[ɵCurrencyIndex.SymbolNarrow];\n\n  if (format === 'narrow' && typeof symbolNarrow === 'string') {\n    return symbolNarrow;\n  }\n\n  return currency[ɵCurrencyIndex.Symbol] || code;\n}\n\n// Most currencies have cents, that's why the default is 2\nconst DEFAULT_NB_OF_CURRENCY_DIGITS = 2;\n\n/**\n * Reports the number of decimal digits for a given currency.\n * The value depends upon the presence of cents in that particular currency.\n *\n * @param code The currency code.\n * @returns The number of decimal digits, typically 0 or 2.\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n *\n * @deprecated Angular recommends relying on the `Intl` API for i18n.\n * This function should not be used anymore. Let `Intl.NumberFormat` determine the number of digits to display for the currency\n */\nexport function getNumberOfCurrencyDigits(code: string): number {\n  let digits;\n  const currency = CURRENCIES_EN[code];\n  if (currency) {\n    digits = currency[ɵCurrencyIndex.NbOfDigits];\n  }\n  return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  FormatWidth,\n  FormStyle,\n  getLocaleDateFormat,\n  getLocaleDateTimeFormat,\n  getLocaleDayNames,\n  getLocaleDayPeriods,\n  getLocaleEraNames,\n  getLocaleExtraDayPeriodRules,\n  getLocaleExtraDayPeriods,\n  getLocaleId,\n  getLocaleMonthNames,\n  getLocaleNumberSymbol,\n  getLocaleTimeFormat,\n  NumberSymbol,\n  Time,\n  TranslationWidth,\n} from './locale_data_api';\n\nexport const ISO8601_DATE_REGEX =\n  /^(\\d{4,})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n//    1        2       3         4          5          6          7          8  9     10      11\nconst NAMED_FORMATS: {[localeId: string]: {[format: string]: string}} = {};\nconst DATE_FORMATS_SPLIT =\n  /((?:[^BEGHLMOSWYZabcdhmswyz']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|Y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|c{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\\s\\S]*)/;\n\nconst enum ZoneWidth {\n  Short,\n  ShortGMT,\n  Long,\n  Extended,\n}\n\nconst enum DateType {\n  FullYear,\n  Month,\n  Date,\n  Hours,\n  Minutes,\n  Seconds,\n  FractionalSeconds,\n  Day,\n}\n\nconst enum TranslationType {\n  DayPeriods,\n  Days,\n  Months,\n  Eras,\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date according to locale rules.\n *\n * @param value The date to format, as a Date, or a number (milliseconds since UTC epoch)\n * or an [ISO date-time string](https://www.w3.org/TR/NOTE-datetime).\n * @param format The date-time components to include. See `DatePipe` for details.\n * @param locale A locale code for the locale format rules to use.\n * @param timezone The time zone. A time zone offset from GMT (such as `'+0430'`).\n * If not specified, uses host system settings.\n *\n * @returns The formatted date string.\n *\n * @see {@link DatePipe}\n * @see [Internationalization (i18n) Guide](guide/i18n)\n *\n * @publicApi\n */\nexport function formatDate(\n  value: string | number | Date,\n  format: string,\n  locale: string,\n  timezone?: string,\n): string {\n  let date = toDate(value);\n  const namedFormat = getNamedFormat(locale, format);\n  format = namedFormat || format;\n\n  let parts: string[] = [];\n  let match;\n  while (format) {\n    match = DATE_FORMATS_SPLIT.exec(format);\n    if (match) {\n      parts = parts.concat(match.slice(1));\n      const part = parts.pop();\n      if (!part) {\n        break;\n      }\n      format = part;\n    } else {\n      parts.push(format);\n      break;\n    }\n  }\n\n  let dateTimezoneOffset = date.getTimezoneOffset();\n  if (timezone) {\n    dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n    date = convertTimezoneToLocal(date, timezone, true);\n  }\n\n  let text = '';\n  parts.forEach((value) => {\n    const dateFormatter = getDateFormatter(value);\n    text += dateFormatter\n      ? dateFormatter(date, locale, dateTimezoneOffset)\n      : value === \"''\"\n        ? \"'\"\n        : value.replace(/(^'|'$)/g, '').replace(/''/g, \"'\");\n  });\n\n  return text;\n}\n\n/**\n * Create a new Date object with the given date value, and the time set to midnight.\n *\n * We cannot use `new Date(year, month, date)` because it maps years between 0 and 99 to 1900-1999.\n * See: https://github.com/angular/angular/issues/40377\n *\n * Note that this function returns a Date object whose time is midnight in the current locale's\n * timezone. In the future we might want to change this to be midnight in UTC, but this would be a\n * considerable breaking change.\n */\nfunction createDate(year: number, month: number, date: number): Date {\n  // The `newDate` is set to midnight (UTC) on January 1st 1970.\n  // - In PST this will be December 31st 1969 at 4pm.\n  // - In GMT this will be January 1st 1970 at 1am.\n  // Note that they even have different years, dates and months!\n  const newDate = new Date(0);\n\n  // `setFullYear()` allows years like 0001 to be set correctly. This function does not\n  // change the internal time of the date.\n  // Consider calling `setFullYear(2019, 8, 20)` (September 20, 2019).\n  // - In PST this will now be September 20, 2019 at 4pm\n  // - In GMT this will now be September 20, 2019 at 1am\n\n  newDate.setFullYear(year, month, date);\n  // We want the final date to be at local midnight, so we reset the time.\n  // - In PST this will now be September 20, 2019 at 12am\n  // - In GMT this will now be September 20, 2019 at 12am\n  newDate.setHours(0, 0, 0);\n\n  return newDate;\n}\n\nfunction getNamedFormat(locale: string, format: string): string {\n  const localeId = getLocaleId(locale);\n  NAMED_FORMATS[localeId] ??= {};\n\n  if (NAMED_FORMATS[localeId][format]) {\n    return NAMED_FORMATS[localeId][format];\n  }\n\n  let formatValue = '';\n  switch (format) {\n    case 'shortDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Short);\n      break;\n    case 'mediumDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);\n      break;\n    case 'longDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Long);\n      break;\n    case 'fullDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Full);\n      break;\n    case 'shortTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);\n      break;\n    case 'mediumTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);\n      break;\n    case 'longTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);\n      break;\n    case 'fullTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);\n      break;\n    case 'short':\n      const shortTime = getNamedFormat(locale, 'shortTime');\n      const shortDate = getNamedFormat(locale, 'shortDate');\n      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [\n        shortTime,\n        shortDate,\n      ]);\n      break;\n    case 'medium':\n      const mediumTime = getNamedFormat(locale, 'mediumTime');\n      const mediumDate = getNamedFormat(locale, 'mediumDate');\n      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [\n        mediumTime,\n        mediumDate,\n      ]);\n      break;\n    case 'long':\n      const longTime = getNamedFormat(locale, 'longTime');\n      const longDate = getNamedFormat(locale, 'longDate');\n      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [\n        longTime,\n        longDate,\n      ]);\n      break;\n    case 'full':\n      const fullTime = getNamedFormat(locale, 'fullTime');\n      const fullDate = getNamedFormat(locale, 'fullDate');\n      formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [\n        fullTime,\n        fullDate,\n      ]);\n      break;\n  }\n  if (formatValue) {\n    NAMED_FORMATS[localeId][format] = formatValue;\n  }\n  return formatValue;\n}\n\nfunction formatDateTime(str: string, opt_values: string[]) {\n  if (opt_values) {\n    str = str.replace(/\\{([^}]+)}/g, function (match, key) {\n      return opt_values != null && key in opt_values ? opt_values[key] : match;\n    });\n  }\n  return str;\n}\n\nfunction padNumber(\n  num: number,\n  digits: number,\n  minusSign = '-',\n  trim?: boolean,\n  negWrap?: boolean,\n): string {\n  let neg = '';\n  if (num < 0 || (negWrap && num <= 0)) {\n    if (negWrap) {\n      num = -num + 1;\n    } else {\n      num = -num;\n      neg = minusSign;\n    }\n  }\n  let strNum = String(num);\n  while (strNum.length < digits) {\n    strNum = '0' + strNum;\n  }\n  if (trim) {\n    strNum = strNum.slice(strNum.length - digits);\n  }\n  return neg + strNum;\n}\n\nfunction formatFractionalSeconds(milliseconds: number, digits: number): string {\n  const strMs = padNumber(milliseconds, 3);\n  return strMs.substring(0, digits);\n}\n\n/**\n * Returns a date formatter that transforms a date into its locale digit representation\n */\nfunction dateGetter(\n  name: DateType,\n  size: number,\n  offset: number = 0,\n  trim = false,\n  negWrap = false,\n): DateFormatter {\n  return function (date: Date, locale: string): string {\n    let part = getDatePart(name, date);\n    if (offset > 0 || part > -offset) {\n      part += offset;\n    }\n\n    if (name === DateType.Hours) {\n      if (part === 0 && offset === -12) {\n        part = 12;\n      }\n    } else if (name === DateType.FractionalSeconds) {\n      return formatFractionalSeconds(part, size);\n    }\n\n    const localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n    return padNumber(part, size, localeMinus, trim, negWrap);\n  };\n}\n\nfunction getDatePart(part: DateType, date: Date): number {\n  switch (part) {\n    case DateType.FullYear:\n      return date.getFullYear();\n    case DateType.Month:\n      return date.getMonth();\n    case DateType.Date:\n      return date.getDate();\n    case DateType.Hours:\n      return date.getHours();\n    case DateType.Minutes:\n      return date.getMinutes();\n    case DateType.Seconds:\n      return date.getSeconds();\n    case DateType.FractionalSeconds:\n      return date.getMilliseconds();\n    case DateType.Day:\n      return date.getDay();\n    default:\n      throw new Error(`Unknown DateType value \"${part}\".`);\n  }\n}\n\n/**\n * Returns a date formatter that transforms a date into its locale string representation\n */\nfunction dateStrGetter(\n  name: TranslationType,\n  width: TranslationWidth,\n  form: FormStyle = FormStyle.Format,\n  extended = false,\n): DateFormatter {\n  return function (date: Date, locale: string): string {\n    return getDateTranslation(date, locale, name, width, form, extended);\n  };\n}\n\n/**\n * Returns the locale translation of a date for a given form, type and width\n */\nfunction getDateTranslation(\n  date: Date,\n  locale: string,\n  name: TranslationType,\n  width: TranslationWidth,\n  form: FormStyle,\n  extended: boolean,\n) {\n  switch (name) {\n    case TranslationType.Months:\n      return getLocaleMonthNames(locale, form, width)[date.getMonth()];\n    case TranslationType.Days:\n      return getLocaleDayNames(locale, form, width)[date.getDay()];\n    case TranslationType.DayPeriods:\n      const currentHours = date.getHours();\n      const currentMinutes = date.getMinutes();\n      if (extended) {\n        const rules = getLocaleExtraDayPeriodRules(locale);\n        const dayPeriods = getLocaleExtraDayPeriods(locale, form, width);\n        const index = rules.findIndex((rule) => {\n          if (Array.isArray(rule)) {\n            // morning, afternoon, evening, night\n            const [from, to] = rule;\n            const afterFrom = currentHours >= from.hours && currentMinutes >= from.minutes;\n            const beforeTo =\n              currentHours < to.hours || (currentHours === to.hours && currentMinutes < to.minutes);\n            // We must account for normal rules that span a period during the day (e.g. 6am-9am)\n            // where `from` is less (earlier) than `to`. But also rules that span midnight (e.g.\n            // 10pm - 5am) where `from` is greater (later!) than `to`.\n            //\n            // In the first case the current time must be BOTH after `from` AND before `to`\n            // (e.g. 8am is after 6am AND before 10am).\n            //\n            // In the second case the current time must be EITHER after `from` OR before `to`\n            // (e.g. 4am is before 5am but not after 10pm; and 11pm is not before 5am but it is\n            // after 10pm).\n            if (from.hours < to.hours) {\n              if (afterFrom && beforeTo) {\n                return true;\n              }\n            } else if (afterFrom || beforeTo) {\n              return true;\n            }\n          } else {\n            // noon or midnight\n            if (rule.hours === currentHours && rule.minutes === currentMinutes) {\n              return true;\n            }\n          }\n          return false;\n        });\n        if (index !== -1) {\n          return dayPeriods[index];\n        }\n      }\n      // if no rules for the day periods, we use am/pm by default\n      return getLocaleDayPeriods(locale, form, <TranslationWidth>width)[currentHours < 12 ? 0 : 1];\n    case TranslationType.Eras:\n      return getLocaleEraNames(locale, <TranslationWidth>width)[date.getFullYear() <= 0 ? 0 : 1];\n    default:\n      // This default case is not needed by TypeScript compiler, as the switch is exhaustive.\n      // However Closure Compiler does not understand that and reports an error in typed mode.\n      // The `throw new Error` below works around the problem, and the unexpected: never variable\n      // makes sure tsc still checks this code is unreachable.\n      const unexpected: never = name;\n      throw new Error(`unexpected translation type ${unexpected}`);\n  }\n}\n\n/**\n * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or\n * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,\n * extended = +04:30)\n */\nfunction timeZoneGetter(width: ZoneWidth): DateFormatter {\n  return function (date: Date, locale: string, offset: number) {\n    const zone = -1 * offset;\n    const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n    const hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);\n    switch (width) {\n      case ZoneWidth.Short:\n        return (\n          (zone >= 0 ? '+' : '') +\n          padNumber(hours, 2, minusSign) +\n          padNumber(Math.abs(zone % 60), 2, minusSign)\n        );\n      case ZoneWidth.ShortGMT:\n        return 'GMT' + (zone >= 0 ? '+' : '') + padNumber(hours, 1, minusSign);\n      case ZoneWidth.Long:\n        return (\n          'GMT' +\n          (zone >= 0 ? '+' : '') +\n          padNumber(hours, 2, minusSign) +\n          ':' +\n          padNumber(Math.abs(zone % 60), 2, minusSign)\n        );\n      case ZoneWidth.Extended:\n        if (offset === 0) {\n          return 'Z';\n        } else {\n          return (\n            (zone >= 0 ? '+' : '') +\n            padNumber(hours, 2, minusSign) +\n            ':' +\n            padNumber(Math.abs(zone % 60), 2, minusSign)\n          );\n        }\n      default:\n        throw new Error(`Unknown zone width \"${width}\"`);\n    }\n  };\n}\n\nconst JANUARY = 0;\nconst THURSDAY = 4;\nfunction getFirstThursdayOfYear(year: number) {\n  const firstDayOfYear = createDate(year, JANUARY, 1).getDay();\n  return createDate(\n    year,\n    0,\n    1 + (firstDayOfYear <= THURSDAY ? THURSDAY : THURSDAY + 7) - firstDayOfYear,\n  );\n}\n\n/**\n *  ISO Week starts on day 1 (Monday) and ends with day 0 (Sunday)\n */\nexport function getThursdayThisIsoWeek(datetime: Date) {\n  // getDay returns 0-6 range with sunday as 0.\n  const currentDay = datetime.getDay();\n\n  // On a Sunday, read the previous Thursday since ISO weeks start on Monday.\n  const deltaToThursday = currentDay === 0 ? -3 : THURSDAY - currentDay;\n\n  return createDate(\n    datetime.getFullYear(),\n    datetime.getMonth(),\n    datetime.getDate() + deltaToThursday,\n  );\n}\n\nfunction weekGetter(size: number, monthBased = false): DateFormatter {\n  return function (date: Date, locale: string) {\n    let result;\n    if (monthBased) {\n      const nbDaysBefore1stDayOfMonth =\n        new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;\n      const today = date.getDate();\n      result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);\n    } else {\n      const thisThurs = getThursdayThisIsoWeek(date);\n      // Some days of a year are part of next year according to ISO 8601.\n      // Compute the firstThurs from the year of this week's Thursday\n      const firstThurs = getFirstThursdayOfYear(thisThurs.getFullYear());\n      const diff = thisThurs.getTime() - firstThurs.getTime();\n      result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week\n    }\n\n    return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  };\n}\n\n/**\n * Returns a date formatter that provides the week-numbering year for the input date.\n */\nfunction weekNumberingYearGetter(size: number, trim = false): DateFormatter {\n  return function (date: Date, locale: string) {\n    const thisThurs = getThursdayThisIsoWeek(date);\n    const weekNumberingYear = thisThurs.getFullYear();\n    return padNumber(\n      weekNumberingYear,\n      size,\n      getLocaleNumberSymbol(locale, NumberSymbol.MinusSign),\n      trim,\n    );\n  };\n}\n\ntype DateFormatter = (date: Date, locale: string, offset: number) => string;\n\nconst DATE_FORMATS: {[format: string]: DateFormatter} = {};\n\n// Based on CLDR formats:\n// See complete list: http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n// See also explanations: http://cldr.unicode.org/translation/date-time\n// TODO(ocombe): support all missing cldr formats: U, Q, D, F, e, j, J, C, A, v, V, X, x\nfunction getDateFormatter(format: string): DateFormatter | null {\n  if (DATE_FORMATS[format]) {\n    return DATE_FORMATS[format];\n  }\n  let formatter;\n  switch (format) {\n    // Era name (AD/BC)\n    case 'G':\n    case 'GG':\n    case 'GGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);\n      break;\n    case 'GGGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);\n      break;\n    case 'GGGGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);\n      break;\n\n    // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)\n    case 'y':\n      formatter = dateGetter(DateType.FullYear, 1, 0, false, true);\n      break;\n    // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n    case 'yy':\n      formatter = dateGetter(DateType.FullYear, 2, 0, true, true);\n      break;\n    // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)\n    case 'yyy':\n      formatter = dateGetter(DateType.FullYear, 3, 0, false, true);\n      break;\n    // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)\n    case 'yyyy':\n      formatter = dateGetter(DateType.FullYear, 4, 0, false, true);\n      break;\n\n    // 1 digit representation of the week-numbering year, e.g. (AD 1 => 1, AD 199 => 199)\n    case 'Y':\n      formatter = weekNumberingYearGetter(1);\n      break;\n    // 2 digit representation of the week-numbering year, padded (00-99). (e.g. AD 2001 => 01, AD\n    // 2010 => 10)\n    case 'YY':\n      formatter = weekNumberingYearGetter(2, true);\n      break;\n    // 3 digit representation of the week-numbering year, padded (000-999). (e.g. AD 1 => 001, AD\n    // 2010 => 2010)\n    case 'YYY':\n      formatter = weekNumberingYearGetter(3);\n      break;\n    // 4 digit representation of the week-numbering year (e.g. AD 1 => 0001, AD 2010 => 2010)\n    case 'YYYY':\n      formatter = weekNumberingYearGetter(4);\n      break;\n\n    // Month of the year (1-12), numeric\n    case 'M':\n    case 'L':\n      formatter = dateGetter(DateType.Month, 1, 1);\n      break;\n    case 'MM':\n    case 'LL':\n      formatter = dateGetter(DateType.Month, 2, 1);\n      break;\n\n    // Month of the year (January, ...), string, format\n    case 'MMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);\n      break;\n    case 'MMMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);\n      break;\n    case 'MMMMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);\n      break;\n\n    // Month of the year (January, ...), string, standalone\n    case 'LLL':\n      formatter = dateStrGetter(\n        TranslationType.Months,\n        TranslationWidth.Abbreviated,\n        FormStyle.Standalone,\n      );\n      break;\n    case 'LLLL':\n      formatter = dateStrGetter(\n        TranslationType.Months,\n        TranslationWidth.Wide,\n        FormStyle.Standalone,\n      );\n      break;\n    case 'LLLLL':\n      formatter = dateStrGetter(\n        TranslationType.Months,\n        TranslationWidth.Narrow,\n        FormStyle.Standalone,\n      );\n      break;\n\n    // Week of the year (1, ... 52)\n    case 'w':\n      formatter = weekGetter(1);\n      break;\n    case 'ww':\n      formatter = weekGetter(2);\n      break;\n\n    // Week of the month (1, ...)\n    case 'W':\n      formatter = weekGetter(1, true);\n      break;\n\n    // Day of the month (1-31)\n    case 'd':\n      formatter = dateGetter(DateType.Date, 1);\n      break;\n    case 'dd':\n      formatter = dateGetter(DateType.Date, 2);\n      break;\n\n    // Day of the Week StandAlone (1, 1, Mon, Monday, M, Mo)\n    case 'c':\n    case 'cc':\n      formatter = dateGetter(DateType.Day, 1);\n      break;\n    case 'ccc':\n      formatter = dateStrGetter(\n        TranslationType.Days,\n        TranslationWidth.Abbreviated,\n        FormStyle.Standalone,\n      );\n      break;\n    case 'cccc':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide, FormStyle.Standalone);\n      break;\n    case 'ccccc':\n      formatter = dateStrGetter(\n        TranslationType.Days,\n        TranslationWidth.Narrow,\n        FormStyle.Standalone,\n      );\n      break;\n    case 'cccccc':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short, FormStyle.Standalone);\n      break;\n\n    // Day of the Week\n    case 'E':\n    case 'EE':\n    case 'EEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);\n      break;\n    case 'EEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);\n      break;\n    case 'EEEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);\n      break;\n    case 'EEEEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);\n      break;\n\n    // Generic period of the day (am-pm)\n    case 'a':\n    case 'aa':\n    case 'aaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);\n      break;\n    case 'aaaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);\n      break;\n    case 'aaaaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);\n      break;\n\n    // Extended period of the day (midnight, at night, ...), standalone\n    case 'b':\n    case 'bb':\n    case 'bbb':\n      formatter = dateStrGetter(\n        TranslationType.DayPeriods,\n        TranslationWidth.Abbreviated,\n        FormStyle.Standalone,\n        true,\n      );\n      break;\n    case 'bbbb':\n      formatter = dateStrGetter(\n        TranslationType.DayPeriods,\n        TranslationWidth.Wide,\n        FormStyle.Standalone,\n        true,\n      );\n      break;\n    case 'bbbbb':\n      formatter = dateStrGetter(\n        TranslationType.DayPeriods,\n        TranslationWidth.Narrow,\n        FormStyle.Standalone,\n        true,\n      );\n      break;\n\n    // Extended period of the day (midnight, night, ...), standalone\n    case 'B':\n    case 'BB':\n    case 'BBB':\n      formatter = dateStrGetter(\n        TranslationType.DayPeriods,\n        TranslationWidth.Abbreviated,\n        FormStyle.Format,\n        true,\n      );\n      break;\n    case 'BBBB':\n      formatter = dateStrGetter(\n        TranslationType.DayPeriods,\n        TranslationWidth.Wide,\n        FormStyle.Format,\n        true,\n      );\n      break;\n    case 'BBBBB':\n      formatter = dateStrGetter(\n        TranslationType.DayPeriods,\n        TranslationWidth.Narrow,\n        FormStyle.Format,\n        true,\n      );\n      break;\n\n    // Hour in AM/PM, (1-12)\n    case 'h':\n      formatter = dateGetter(DateType.Hours, 1, -12);\n      break;\n    case 'hh':\n      formatter = dateGetter(DateType.Hours, 2, -12);\n      break;\n\n    // Hour of the day (0-23)\n    case 'H':\n      formatter = dateGetter(DateType.Hours, 1);\n      break;\n    // Hour in day, padded (00-23)\n    case 'HH':\n      formatter = dateGetter(DateType.Hours, 2);\n      break;\n\n    // Minute of the hour (0-59)\n    case 'm':\n      formatter = dateGetter(DateType.Minutes, 1);\n      break;\n    case 'mm':\n      formatter = dateGetter(DateType.Minutes, 2);\n      break;\n\n    // Second of the minute (0-59)\n    case 's':\n      formatter = dateGetter(DateType.Seconds, 1);\n      break;\n    case 'ss':\n      formatter = dateGetter(DateType.Seconds, 2);\n      break;\n\n    // Fractional second\n    case 'S':\n      formatter = dateGetter(DateType.FractionalSeconds, 1);\n      break;\n    case 'SS':\n      formatter = dateGetter(DateType.FractionalSeconds, 2);\n      break;\n    case 'SSS':\n      formatter = dateGetter(DateType.FractionalSeconds, 3);\n      break;\n\n    // Timezone ISO8601 short format (-0430)\n    case 'Z':\n    case 'ZZ':\n    case 'ZZZ':\n      formatter = timeZoneGetter(ZoneWidth.Short);\n      break;\n    // Timezone ISO8601 extended format (-04:30)\n    case 'ZZZZZ':\n      formatter = timeZoneGetter(ZoneWidth.Extended);\n      break;\n\n    // Timezone GMT short format (GMT+4)\n    case 'O':\n    case 'OO':\n    case 'OOO':\n    // Should be location, but fallback to format O instead because we don't have the data yet\n    case 'z':\n    case 'zz':\n    case 'zzz':\n      formatter = timeZoneGetter(ZoneWidth.ShortGMT);\n      break;\n    // Timezone GMT long format (GMT+0430)\n    case 'OOOO':\n    case 'ZZZZ':\n    // Should be location, but fallback to format O instead because we don't have the data yet\n    case 'zzzz':\n      formatter = timeZoneGetter(ZoneWidth.Long);\n      break;\n    default:\n      return null;\n  }\n  DATE_FORMATS[format] = formatter;\n  return formatter;\n}\n\nfunction timezoneToOffset(timezone: string, fallback: number): number {\n  // Support: IE 11 only, Edge 13-15+\n  // IE/Edge do not \"understand\" colon (`:`) in timezone\n  timezone = timezone.replace(/:/g, '');\n  const requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;\n  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;\n}\n\nfunction addDateMinutes(date: Date, minutes: number) {\n  date = new Date(date.getTime());\n  date.setMinutes(date.getMinutes() + minutes);\n  return date;\n}\n\nfunction convertTimezoneToLocal(date: Date, timezone: string, reverse: boolean): Date {\n  const reverseValue = reverse ? -1 : 1;\n  const dateTimezoneOffset = date.getTimezoneOffset();\n  const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n  return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));\n}\n\n/**\n * Converts a value to date.\n *\n * Supported input formats:\n * - `Date`\n * - number: timestamp\n * - string: numeric (e.g. \"1234\"), ISO and date strings in a format supported by\n *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\n *   Note: ISO strings without time return a date without timeoffset.\n *\n * Throws if unable to convert to a date.\n */\nexport function toDate(value: string | number | Date): Date {\n  if (isDate(value)) {\n    return value;\n  }\n\n  if (typeof value === 'number' && !isNaN(value)) {\n    return new Date(value);\n  }\n\n  if (typeof value === 'string') {\n    value = value.trim();\n\n    if (/^(\\d{4}(-\\d{1,2}(-\\d{1,2})?)?)$/.test(value)) {\n      /* For ISO Strings without time the day, month and year must be extracted from the ISO String\n      before Date creation to avoid time offset and errors in the new Date.\n      If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n      date, some browsers (e.g. IE 9) will throw an invalid Date error.\n      If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\n      is applied.\n      Note: ISO months are 0 for January, 1 for February, ... */\n      const [y, m = 1, d = 1] = value.split('-').map((val: string) => +val);\n      return createDate(y, m - 1, d);\n    }\n\n    const parsedNb = parseFloat(value);\n\n    // any string that only contains numbers, like \"1234\" but not like \"1234hello\"\n    if (!isNaN((value as any) - parsedNb)) {\n      return new Date(parsedNb);\n    }\n\n    let match: RegExpMatchArray | null;\n    if ((match = value.match(ISO8601_DATE_REGEX))) {\n      return isoStringToDate(match);\n    }\n  }\n\n  const date = new Date(value as any);\n  if (!isDate(date)) {\n    throw new Error(`Unable to convert \"${value}\" into a date`);\n  }\n  return date;\n}\n\n/**\n * Converts a date in ISO8601 to a Date.\n * Used instead of `Date.parse` because of browser discrepancies.\n */\nexport function isoStringToDate(match: RegExpMatchArray): Date {\n  const date = new Date(0);\n  let tzHour = 0;\n  let tzMin = 0;\n\n  // match[8] means that the string contains \"Z\" (UTC) or a timezone like \"+01:00\" or \"+0100\"\n  const dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n  const timeSetter = match[8] ? date.setUTCHours : date.setHours;\n\n  // if there is a timezone defined like \"+01:00\" or \"+0100\"\n  if (match[9]) {\n    tzHour = Number(match[9] + match[10]);\n    tzMin = Number(match[9] + match[11]);\n  }\n  dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));\n  const h = Number(match[4] || 0) - tzHour;\n  const m = Number(match[5] || 0) - tzMin;\n  const s = Number(match[6] || 0);\n  // The ECMAScript specification (https://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.11)\n  // defines that `DateTime` milliseconds should always be rounded down, so that `999.9ms`\n  // becomes `999ms`.\n  const ms = Math.floor(parseFloat('0.' + (match[7] || 0)) * 1000);\n  timeSetter.call(date, h, m, s, ms);\n  return date;\n}\n\nexport function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(value.valueOf());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport function parseCookieValue(cookieStr: string, name: string): string | null {\n  name = encodeURIComponent(name);\n  for (const cookie of cookieStr.split(';')) {\n    const eqIndex = cookie.indexOf('=');\n    const [cookieName, cookieValue]: string[] =\n      eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\n    if (cookieName.trim() === name) {\n      return decodeURIComponent(cookieValue);\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Input,\n  Renderer2,\n  ɵstringify as stringify,\n} from '@angular/core';\n\ntype NgClassSupportedTypes = string[] | Set<string> | {[klass: string]: any} | null | undefined;\n\nconst WS_REGEXP = /\\s+/;\n\nconst EMPTY_ARRAY: string[] = [];\n\n/**\n * Represents internal object used to track state of each CSS class. There are 3 different (boolean)\n * flags that, combined together, indicate state of a given CSS class:\n * - enabled: indicates if a class should be present in the DOM (true) or not (false);\n * - changed: tracks if a class was toggled (added or removed) during the custom dirty-checking\n * process; changed classes must be synchronized with the DOM;\n * - touched: tracks if a class is present in the current object bound to the class / ngClass input;\n * classes that are not present any more can be removed from the internal data structures;\n */\ninterface CssClassState {\n  // PERF: could use a bit mask to represent state as all fields are boolean flags\n  enabled: boolean;\n  changed: boolean;\n  touched: boolean;\n}\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```html\n * <some-element [ngClass]=\"stringExp|arrayExp|objExp|Set\">...</some-element>\n *\n * <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n *\n * For more simple use cases you can use the [class bindings](/guide/templates/binding#css-class-and-style-property-bindings) directly.\n * It doesn't require importing a directive.\n *\n * ```html\n * <some-element [class]=\"'first second'\">...</some-element>\n *\n * <some-element [class.expanded]=\"isExpanded\">...</some-element>\n *\n * <some-element [class]=\"['first', 'second']\">...</some-element>\n *\n * <some-element [class]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n * ```\n * @description\n *\n * Adds and removes CSS classes on an HTML element.\n *\n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n *\n *\n * @see [Class bindings](/guide/templates/binding#css-class-and-style-property-bindings)\n *\n * @publicApi\n */\n@Directive({\n  selector: '[ngClass]',\n})\nexport class NgClass implements DoCheck {\n  private initialClasses = EMPTY_ARRAY;\n  private rawClass: NgClassSupportedTypes;\n\n  private stateMap = new Map<string, CssClassState>();\n\n  constructor(\n    private _ngEl: ElementRef,\n    private _renderer: Renderer2,\n  ) {}\n\n  @Input('class')\n  set klass(value: string) {\n    this.initialClasses = value != null ? value.trim().split(WS_REGEXP) : EMPTY_ARRAY;\n  }\n\n  @Input('ngClass')\n  set ngClass(value: string | string[] | Set<string> | {[klass: string]: any} | null | undefined) {\n    this.rawClass = typeof value === 'string' ? value.trim().split(WS_REGEXP) : value;\n  }\n\n  /*\n  The NgClass directive uses the custom change detection algorithm for its inputs. The custom\n  algorithm is necessary since inputs are represented as complex object or arrays that need to be\n  deeply-compared.\n\n  This algorithm is perf-sensitive since NgClass is used very frequently and its poor performance\n  might negatively impact runtime performance of the entire change detection cycle. The design of\n  this algorithm is making sure that:\n  - there is no unnecessary DOM manipulation (CSS classes are added / removed from the DOM only when\n  needed), even if references to bound objects change;\n  - there is no memory allocation if nothing changes (even relatively modest memory allocation\n  during the change detection cycle can result in GC pauses for some of the CD cycles).\n\n  The algorithm works by iterating over the set of bound classes, staring with [class] binding and\n  then going over [ngClass] binding. For each CSS class name:\n  - check if it was seen before (this information is tracked in the state map) and if its value\n  changed;\n  - mark it as \"touched\" - names that are not marked are not present in the latest set of binding\n  and we can remove such class name from the internal data structures;\n\n  After iteration over all the CSS class names we've got data structure with all the information\n  necessary to synchronize changes to the DOM - it is enough to iterate over the state map, flush\n  changes to the DOM and reset internal data structures so those are ready for the next change\n  detection cycle.\n   */\n  ngDoCheck(): void {\n    // classes from the [class] binding\n    for (const klass of this.initialClasses) {\n      this._updateState(klass, true);\n    }\n\n    // classes from the [ngClass] binding\n    const rawClass = this.rawClass;\n    if (Array.isArray(rawClass) || rawClass instanceof Set) {\n      for (const klass of rawClass) {\n        this._updateState(klass, true);\n      }\n    } else if (rawClass != null) {\n      for (const klass of Object.keys(rawClass)) {\n        this._updateState(klass, Boolean(rawClass[klass]));\n      }\n    }\n\n    this._applyStateDiff();\n  }\n\n  private _updateState(klass: string, nextEnabled: boolean) {\n    const state = this.stateMap.get(klass);\n    if (state !== undefined) {\n      if (state.enabled !== nextEnabled) {\n        state.changed = true;\n        state.enabled = nextEnabled;\n      }\n      state.touched = true;\n    } else {\n      this.stateMap.set(klass, {enabled: nextEnabled, changed: true, touched: true});\n    }\n  }\n\n  private _applyStateDiff() {\n    for (const stateEntry of this.stateMap) {\n      const klass = stateEntry[0];\n      const state = stateEntry[1];\n\n      if (state.changed) {\n        this._toggleClass(klass, state.enabled);\n        state.changed = false;\n      } else if (!state.touched) {\n        // A class that was previously active got removed from the new collection of classes -\n        // remove from the DOM as well.\n        if (state.enabled) {\n          this._toggleClass(klass, false);\n        }\n        this.stateMap.delete(klass);\n      }\n\n      state.touched = false;\n    }\n  }\n\n  private _toggleClass(klass: string, enabled: boolean): void {\n    if (ngDevMode) {\n      if (typeof klass !== 'string') {\n        throw new Error(\n          `NgClass can only toggle CSS classes expressed as strings, got ${stringify(klass)}`,\n        );\n      }\n    }\n    klass = klass.trim();\n    if (klass.length > 0) {\n      klass.split(WS_REGEXP).forEach((klass) => {\n        if (enabled) {\n          this._renderer.addClass(this._ngEl.nativeElement, klass);\n        } else {\n          this._renderer.removeClass(this._ngEl.nativeElement, klass);\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  TemplateRef,\n  ViewContainerRef,\n  ɵstringify as stringify,\n  ɵRuntimeError as RuntimeError,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\n/**\n * A structural directive that conditionally includes a template based on the value of\n * an expression coerced to Boolean.\n * When the expression evaluates to true, Angular renders the template\n * provided in a `then` clause, and when  false or null,\n * Angular renders the template provided in an optional `else` clause. The default\n * template for the `else` clause is blank.\n *\n * A [shorthand form](guide/directives/structural-directives#asterisk) of the directive,\n * `*ngIf=\"condition\"`, is generally used, provided\n * as an attribute of the anchor element for the inserted template.\n * Angular expands this into a more explicit version, in which the anchor element\n * is contained in an `<ng-template>` element.\n *\n * Simple form with shorthand syntax:\n *\n * ```html\n * <div *ngIf=\"condition\">Content to render when condition is true.</div>\n * ```\n *\n * Simple form with expanded syntax:\n *\n * ```html\n * <ng-template [ngIf]=\"condition\"><div>Content to render when condition is\n * true.</div></ng-template>\n * ```\n *\n * Form with an \"else\" block:\n *\n * ```html\n * <div *ngIf=\"condition; else elseBlock\">Content to render when condition is true.</div>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Shorthand form with \"then\" and \"else\" blocks:\n *\n * ```html\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>Content to render when condition is true.</ng-template>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Form with storing the value locally:\n *\n * ```html\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>Content to render when value is null.</ng-template>\n * ```\n *\n * @usageNotes\n *\n * The `*ngIf` directive is most commonly used to conditionally show an inline template,\n * as seen in the following  example.\n * The default `else` template is blank.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfSimple'}\n *\n * ### Showing an alternative template using `else`\n *\n * To display a template when `expression` evaluates to false, use an `else` template\n * binding as shown in the following example.\n * The `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.\n * The template can be defined anywhere in the component view, but is typically placed right after\n * `ngIf` for readability.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfElse'}\n *\n * ### Using an external `then` template\n *\n * In the previous example, the then-clause template is specified inline, as the content of the\n * tag that contains the `ngIf` directive. You can also specify a template that is defined\n * externally, by referencing a labeled `<ng-template>` element. When you do this, you can\n * change which template to use at runtime, as shown in the following example.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n *\n * ### Storing a conditional result in a variable\n *\n * You might want to show a set of properties from the same object. If you are waiting\n * for asynchronous data, the object can be undefined.\n * In this case, you can use `ngIf` and store the result of the condition in a local\n * variable as shown in the following example.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfAs'}\n *\n * This code uses only one `AsyncPipe`, so only one subscription is created.\n * The conditional statement stores the result of `userStream|async` in the local variable `user`.\n * You can then bind the local `user` repeatedly.\n *\n * The conditional displays the data only if `userStream` returns a value,\n * so you don't need to use the\n * safe-navigation-operator (`?.`)\n * to guard against null values when accessing properties.\n * You can display an alternative template while waiting for the data.\n *\n * ### Shorthand syntax\n *\n * The shorthand syntax `*ngIf` expands into two separate template specifications\n * for the \"then\" and \"else\" clauses. For example, consider the following shorthand statement,\n * that is meant to show a loading page while waiting for data to be loaded.\n *\n * ```html\n * <div class=\"hero-list\" *ngIf=\"heroes else loading\">\n *  ...\n * </div>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * You can see that the \"else\" clause references the `<ng-template>`\n * with the `#loading` label, and the template for the \"then\" clause\n * is provided as the content of the anchor element.\n *\n * However, when Angular expands the shorthand syntax, it creates\n * another `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.\n * The anchor element containing the template for the \"then\" clause becomes\n * the content of this unlabeled `<ng-template>` tag.\n *\n * ```html\n * <ng-template [ngIf]=\"heroes\" [ngIfElse]=\"loading\">\n *  <div class=\"hero-list\">\n *   ...\n *  </div>\n * </ng-template>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * The presence of the implicit template object has implications for the nesting of\n * structural directives. For more on this subject, see\n * [Structural Directives](guide/directives/structural-directives#one-per-element).\n *\n * @ngModule CommonModule\n * @publicApi\n */\n@Directive({\n  selector: '[ngIf]',\n})\nexport class NgIf<T = unknown> {\n  private _context: NgIfContext<T> = new NgIfContext<T>();\n  private _thenTemplateRef: TemplateRef<NgIfContext<T>> | null = null;\n  private _elseTemplateRef: TemplateRef<NgIfContext<T>> | null = null;\n  private _thenViewRef: EmbeddedViewRef<NgIfContext<T>> | null = null;\n  private _elseViewRef: EmbeddedViewRef<NgIfContext<T>> | null = null;\n\n  constructor(\n    private _viewContainer: ViewContainerRef,\n    templateRef: TemplateRef<NgIfContext<T>>,\n  ) {\n    this._thenTemplateRef = templateRef;\n  }\n\n  /**\n   * The Boolean expression to evaluate as the condition for showing a template.\n   */\n  @Input()\n  set ngIf(condition: T) {\n    this._context.$implicit = this._context.ngIf = condition;\n    this._updateView();\n  }\n\n  /**\n   * A template to show if the condition expression evaluates to true.\n   */\n  @Input()\n  set ngIfThen(templateRef: TemplateRef<NgIfContext<T>> | null) {\n    assertTemplate(templateRef, (typeof ngDevMode === 'undefined' || ngDevMode) && 'ngIfThen');\n    this._thenTemplateRef = templateRef;\n    this._thenViewRef = null; // clear previous view if any.\n    this._updateView();\n  }\n\n  /**\n   * A template to show if the condition expression evaluates to false.\n   */\n  @Input()\n  set ngIfElse(templateRef: TemplateRef<NgIfContext<T>> | null) {\n    assertTemplate(templateRef, (typeof ngDevMode === 'undefined' || ngDevMode) && 'ngIfElse');\n    this._elseTemplateRef = templateRef;\n    this._elseViewRef = null; // clear previous view if any.\n    this._updateView();\n  }\n\n  private _updateView() {\n    if (this._context.$implicit) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        this._elseViewRef = null;\n        if (this._thenTemplateRef) {\n          this._thenViewRef = this._viewContainer.createEmbeddedView(\n            this._thenTemplateRef,\n            this._context,\n          );\n        }\n      }\n    } else {\n      if (!this._elseViewRef) {\n        this._viewContainer.clear();\n        this._thenViewRef = null;\n        if (this._elseTemplateRef) {\n          this._elseViewRef = this._viewContainer.createEmbeddedView(\n            this._elseTemplateRef,\n            this._context,\n          );\n        }\n      }\n    }\n  }\n\n  /** @internal */\n  public static ngIfUseIfTypeGuard: void;\n\n  /**\n   * Assert the correct type of the expression bound to the `ngIf` input within the template.\n   *\n   * The presence of this static field is a signal to the Ivy template type check compiler that\n   * when the `NgIf` structural directive renders its template, the type of the expression bound\n   * to `ngIf` should be narrowed in some way. For `NgIf`, the binding expression itself is used to\n   * narrow its type, which allows the strictNullChecks feature of TypeScript to work with `NgIf`.\n   */\n  static ngTemplateGuard_ngIf: 'binding';\n\n  /**\n   * Asserts the correct type of the context for the template that `NgIf` will render.\n   *\n   * The presence of this method is a signal to the Ivy template type-check compiler that the\n   * `NgIf` structural directive renders its template with a specific context type.\n   */\n  static ngTemplateContextGuard<T>(\n    dir: NgIf<T>,\n    ctx: any,\n  ): ctx is NgIfContext<Exclude<T, false | 0 | '' | null | undefined>> {\n    return true;\n  }\n}\n\n/**\n * @publicApi\n */\nexport class NgIfContext<T = unknown> {\n  public $implicit: T = null!;\n  public ngIf: T = null!;\n}\n\nfunction assertTemplate(\n  templateRef: TemplateRef<any> | null,\n  property: string | false | null,\n): void {\n  if (templateRef && !templateRef.createEmbeddedView) {\n    throw new RuntimeError(\n      RuntimeErrorCode.NG_IF_NOT_A_TEMPLATE_REF,\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        `${property} must be a TemplateRef, but received '${stringify(templateRef)}'.`,\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Input,\n  KeyValueChanges,\n  KeyValueDiffer,\n  KeyValueDiffers,\n  Renderer2,\n  RendererStyleFlags2,\n} from '@angular/core';\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n *\n * Set the width of the containing element to a pixel value returned by an expression.\n *\n * ```html\n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n * ```\n *\n * Set a collection of style values using an expression that returns key-value pairs.\n *\n * ```html\n * <some-element [ngStyle]=\"objExp\">...</some-element>\n * ```\n *\n * For more simple use cases you can use the [style bindings](/guide/templates/binding#css-class-and-style-property-bindings) directly.\n * It doesn't require importing a directive.\n *\n * Set the font of the containing element to the result of an expression.\n *\n * ```html\n * <some-element [style]=\"{'font-style': styleExp}\">...</some-element>\n * ```\n *\n * @description\n *\n * An attribute directive that updates styles for the containing HTML element.\n * Sets one or more style properties, specified as colon-separated key-value pairs.\n * The key is a style name, with an optional `.<unit>` suffix\n * (such as 'top.px', 'font-style.em').\n * The value is an expression to be evaluated.\n * The resulting non-null value, expressed in the given unit,\n * is assigned to the given style property.\n * If the result of evaluation is null, the corresponding style is removed.\n *\n * @see [Style bindings](/guide/templates/binding#css-class-and-style-property-bindings)\n *\n * @publicApi\n */\n@Directive({\n  selector: '[ngStyle]',\n})\nexport class NgStyle implements DoCheck {\n  private _ngStyle: {[key: string]: string} | null | undefined = null;\n  private _differ: KeyValueDiffer<string, string | number> | null = null;\n\n  constructor(\n    private _ngEl: ElementRef,\n    private _differs: KeyValueDiffers,\n    private _renderer: Renderer2,\n  ) {}\n\n  @Input('ngStyle')\n  set ngStyle(values: {[klass: string]: any} | null | undefined) {\n    this._ngStyle = values;\n    if (!this._differ && values) {\n      this._differ = this._differs.find(values).create();\n    }\n  }\n\n  ngDoCheck() {\n    if (this._differ) {\n      const changes = this._differ.diff(this._ngStyle!);\n      if (changes) {\n        this._applyChanges(changes);\n      }\n    }\n  }\n\n  private _setStyle(nameAndUnit: string, value: string | number | null | undefined): void {\n    const [name, unit] = nameAndUnit.split('.');\n    const flags = name.indexOf('-') === -1 ? undefined : (RendererStyleFlags2.DashCase as number);\n\n    if (value != null) {\n      this._renderer.setStyle(\n        this._ngEl.nativeElement,\n        name,\n        unit ? `${value}${unit}` : value,\n        flags,\n      );\n    } else {\n      this._renderer.removeStyle(this._ngEl.nativeElement, name, flags);\n    }\n  }\n\n  private _applyChanges(changes: KeyValueChanges<string, string | number>): void {\n    changes.forEachRemovedItem((record) => this._setStyle(record.key, null));\n    changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  EmbeddedViewRef,\n  Injector,\n  Input,\n  OnChanges,\n  SimpleChange,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Inserts an embedded view from a prepared `TemplateRef`.\n *\n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n *\n * @usageNotes\n * ```html\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n *\n * Using the key `$implicit` in the context object will set its value as default.\n *\n * ### Example\n *\n * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n *\n * @publicApi\n */\n@Directive({\n  selector: '[ngTemplateOutlet]',\n})\nexport class NgTemplateOutlet<C = unknown> implements OnChanges {\n  private _viewRef: EmbeddedViewRef<C> | null = null;\n\n  /**\n   * A context object to attach to the {@link EmbeddedViewRef}. This should be an\n   * object, the object's keys will be available for binding by the local template `let`\n   * declarations.\n   * Using the key `$implicit` in the context object will set its value as default.\n   */\n  @Input() public ngTemplateOutletContext: C | null = null;\n\n  /**\n   * A string defining the template reference and optionally the context object for the template.\n   */\n  @Input() public ngTemplateOutlet: TemplateRef<C> | null = null;\n\n  /** Injector to be used within the embedded view. */\n  @Input() public ngTemplateOutletInjector: Injector | null = null;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._shouldRecreateView(changes)) {\n      const viewContainerRef = this._viewContainerRef;\n\n      if (this._viewRef) {\n        viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));\n      }\n\n      // If there is no outlet, clear the destroyed view ref.\n      if (!this.ngTemplateOutlet) {\n        this._viewRef = null;\n        return;\n      }\n\n      // Create a context forward `Proxy` that will always bind to the user-specified context,\n      // without having to destroy and re-create views whenever the context changes.\n      const viewContext = this._createContextForwardProxy();\n      this._viewRef = viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, viewContext, {\n        injector: this.ngTemplateOutletInjector ?? undefined,\n      });\n    }\n  }\n\n  /**\n   * We need to re-create existing embedded view if either is true:\n   * - the outlet changed.\n   * - the injector changed.\n   */\n  private _shouldRecreateView(changes: SimpleChanges): boolean {\n    return !!changes['ngTemplateOutlet'] || !!changes['ngTemplateOutletInjector'];\n  }\n\n  /**\n   * For a given outlet instance, we create a proxy object that delegates\n   * to the user-specified context. This allows changing, or swapping out\n   * the context object completely without having to destroy/re-create the view.\n   */\n  private _createContextForwardProxy(): C {\n    return <C>new Proxy(\n      {},\n      {\n        set: (_target, prop, newValue) => {\n          if (!this.ngTemplateOutletContext) {\n            return false;\n          }\n          return Reflect.set(this.ngTemplateOutletContext, prop, newValue);\n        },\n        get: (_target, prop, receiver) => {\n          if (!this.ngTemplateOutletContext) {\n            return undefined;\n          }\n          return Reflect.get(this.ngTemplateOutletContext, prop, receiver);\n        },\n      },\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Type, ɵRuntimeError as RuntimeError, ɵstringify as stringify} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport function invalidPipeArgumentError(type: Type<any>, value: Object) {\n  return new RuntimeError(\n    RuntimeErrorCode.INVALID_PIPE_ARGUMENT,\n    ngDevMode && `InvalidPipeArgument: '${value}' for pipe '${stringify(type)}'`,\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectorRef,\n  EventEmitter,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n  untracked,\n  ɵisPromise,\n  ɵisSubscribable,\n} from '@angular/core';\nimport {Observable, Subscribable, Unsubscribable} from 'rxjs';\n\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\ninterface SubscriptionStrategy {\n  createSubscription(\n    async: Subscribable<any> | Promise<any>,\n    updateLatestValue: any,\n  ): Unsubscribable | Promise<any>;\n  dispose(subscription: Unsubscribable | Promise<any>): void;\n}\n\nclass SubscribableStrategy implements SubscriptionStrategy {\n  createSubscription(async: Subscribable<any>, updateLatestValue: any): Unsubscribable {\n    // Subscription can be side-effectful, and we don't want any signal reads which happen in the\n    // side effect of the subscription to be tracked by a component's template when that\n    // subscription is triggered via the async pipe. So we wrap the subscription in `untracked` to\n    // decouple from the current reactive context.\n    //\n    // `untracked` also prevents signal _writes_ which happen in the subscription side effect from\n    // being treated as signal writes during the template evaluation (which throws errors).\n    return untracked(() =>\n      async.subscribe({\n        next: updateLatestValue,\n        error: (e: any) => {\n          throw e;\n        },\n      }),\n    );\n  }\n\n  dispose(subscription: Unsubscribable): void {\n    // See the comment in `createSubscription` above on the use of `untracked`.\n    untracked(() => subscription.unsubscribe());\n  }\n}\n\nclass PromiseStrategy implements SubscriptionStrategy {\n  createSubscription(async: Promise<any>, updateLatestValue: (v: any) => any): Promise<any> {\n    return async.then(updateLatestValue, (e) => {\n      throw e;\n    });\n  }\n\n  dispose(subscription: Promise<any>): void {}\n}\n\nconst _promiseStrategy = new PromiseStrategy();\nconst _subscribableStrategy = new SubscribableStrategy();\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Unwraps a value from an asynchronous primitive.\n *\n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks. When the reference of the expression changes, the `async` pipe\n * automatically unsubscribes from the old `Observable` or `Promise` and subscribes to the new one.\n *\n * @usageNotes\n *\n * ### Examples\n *\n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n *\n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n *\n * @publicApi\n */\n@Pipe({\n  name: 'async',\n  pure: false,\n})\nexport class AsyncPipe implements OnDestroy, PipeTransform {\n  private _ref: ChangeDetectorRef | null;\n  private _latestValue: any = null;\n  private markForCheckOnValueUpdate = true;\n\n  private _subscription: Unsubscribable | Promise<any> | null = null;\n  private _obj: Subscribable<any> | Promise<any> | EventEmitter<any> | null = null;\n  private _strategy: SubscriptionStrategy | null = null;\n\n  constructor(ref: ChangeDetectorRef) {\n    // Assign `ref` into `this._ref` manually instead of declaring `_ref` in the constructor\n    // parameter list, as the type of `this._ref` includes `null` unlike the type of `ref`.\n    this._ref = ref;\n  }\n\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._dispose();\n    }\n    // Clear the `ChangeDetectorRef` and its association with the view data, to mitigate\n    // potential memory leaks in Observables that could otherwise cause the view data to\n    // be retained.\n    // https://github.com/angular/angular/issues/17624\n    this._ref = null;\n  }\n\n  // NOTE(@benlesh): Because Observable has deprecated a few call patterns for `subscribe`,\n  // TypeScript has a hard time matching Observable to Subscribable, for more information\n  // see https://github.com/microsoft/TypeScript/issues/43643\n\n  transform<T>(obj: Observable<T> | Subscribable<T> | Promise<T>): T | null;\n  transform<T>(obj: null | undefined): null;\n  transform<T>(obj: Observable<T> | Subscribable<T> | Promise<T> | null | undefined): T | null;\n  transform<T>(obj: Observable<T> | Subscribable<T> | Promise<T> | null | undefined): T | null {\n    if (!this._obj) {\n      if (obj) {\n        try {\n          // Only call `markForCheck` if the value is updated asynchronously.\n          // Synchronous updates _during_ subscription should not wastefully mark for check -\n          // this value is already going to be returned from the transform function.\n          this.markForCheckOnValueUpdate = false;\n          this._subscribe(obj);\n        } finally {\n          this.markForCheckOnValueUpdate = true;\n        }\n      }\n      return this._latestValue;\n    }\n\n    if (obj !== this._obj) {\n      this._dispose();\n      return this.transform(obj);\n    }\n\n    return this._latestValue;\n  }\n\n  private _subscribe(obj: Subscribable<any> | Promise<any> | EventEmitter<any>): void {\n    this._obj = obj;\n    this._strategy = this._selectStrategy(obj);\n    this._subscription = this._strategy.createSubscription(obj, (value: Object) =>\n      this._updateLatestValue(obj, value),\n    );\n  }\n\n  private _selectStrategy(\n    obj: Subscribable<any> | Promise<any> | EventEmitter<any>,\n  ): SubscriptionStrategy {\n    if (ɵisPromise(obj)) {\n      return _promiseStrategy;\n    }\n\n    if (ɵisSubscribable(obj)) {\n      return _subscribableStrategy;\n    }\n\n    throw invalidPipeArgumentError(AsyncPipe, obj);\n  }\n\n  private _dispose(): void {\n    // Note: `dispose` is only called if a subscription has been initialized before, indicating\n    // that `this._strategy` is also available.\n    this._strategy!.dispose(this._subscription!);\n    this._latestValue = null;\n    this._subscription = null;\n    this._obj = null;\n  }\n\n  private _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      if (this.markForCheckOnValueUpdate) {\n        this._ref?.markForCheck();\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * An interface that describes the date pipe configuration, which can be provided using the\n * `DATE_PIPE_DEFAULT_OPTIONS` token.\n *\n * @see {@link DATE_PIPE_DEFAULT_OPTIONS}\n *\n * @publicApi\n */\nexport interface DatePipeConfig {\n  dateFormat?: string;\n  timezone?: string;\n}\n\n/**\n * The default date format of Angular date pipe, which corresponds to the following format:\n * `'MMM d,y'` (e.g. `Jun 15, 2015`)\n */\nexport const DEFAULT_DATE_FORMAT = 'mediumDate';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Inject, InjectionToken, LOCALE_ID, Optional, Pipe, PipeTransform} from '@angular/core';\n\nimport {formatDate} from '../i18n/format_date';\n\nimport {DatePipeConfig, DEFAULT_DATE_FORMAT} from './date_pipe_config';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\n/**\n * Optionally-provided default timezone to use for all instances of `DatePipe` (such as `'+0430'`).\n * If the value isn't provided, the `DatePipe` will use the end-user's local system timezone.\n *\n * @deprecated use DATE_PIPE_DEFAULT_OPTIONS token to configure DatePipe\n */\nexport const DATE_PIPE_DEFAULT_TIMEZONE = new InjectionToken<string>(\n  ngDevMode ? 'DATE_PIPE_DEFAULT_TIMEZONE' : '',\n);\n\n/**\n * DI token that allows to provide default configuration for the `DatePipe` instances in an\n * application. The value is an object which can include the following fields:\n * - `dateFormat`: configures the default date format. If not provided, the `DatePipe`\n * will use the 'mediumDate' as a value.\n * - `timezone`: configures the default timezone. If not provided, the `DatePipe` will\n * use the end-user's local system timezone.\n *\n * @see {@link DatePipeConfig}\n *\n * @usageNotes\n *\n * Various date pipe default values can be overwritten by providing this token with\n * the value that has this interface.\n *\n * For example:\n *\n * Override the default date format by providing a value using the token:\n * ```ts\n * providers: [\n *   {provide: DATE_PIPE_DEFAULT_OPTIONS, useValue: {dateFormat: 'shortDate'}}\n * ]\n * ```\n *\n * Override the default timezone by providing a value using the token:\n * ```ts\n * providers: [\n *   {provide: DATE_PIPE_DEFAULT_OPTIONS, useValue: {timezone: '-1200'}}\n * ]\n * ```\n */\nexport const DATE_PIPE_DEFAULT_OPTIONS = new InjectionToken<DatePipeConfig>(\n  ngDevMode ? 'DATE_PIPE_DEFAULT_OPTIONS' : '',\n);\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date value according to locale rules.\n *\n * `DatePipe` is executed only when it detects a pure change to the input value.\n * A pure change is either a change to a primitive input value\n * (such as `String`, `Number`, `Boolean`, or `Symbol`),\n * or a changed object reference (such as `Date`, `Array`, `Function`, or `Object`).\n *\n * Note that mutating a `Date` object does not cause the pipe to be rendered again.\n * To ensure that the pipe is executed, you must create a new `Date` object.\n *\n * Only the `en-US` locale data comes with Angular. To localize dates\n * in another language, you must import the corresponding locale data.\n * See the [I18n guide](guide/i18n/format-data-locale) for more information.\n *\n * The time zone of the formatted value can be specified either by passing it in as the second\n * parameter of the pipe, or by setting the default through the `DATE_PIPE_DEFAULT_OPTIONS`\n * injection token. The value that is passed in as the second parameter takes precedence over\n * the one defined using the injection token.\n *\n * @see {@link formatDate}\n *\n *\n * @usageNotes\n *\n * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to\n * reformat the date on every change-detection cycle, treat the date as an immutable object\n * and change the reference when the pipe needs to run again.\n *\n * ### Pre-defined format options\n *\n * | Option        | Equivalent to                       | Examples (given in `en-US` locale)              |\n * |---------------|-------------------------------------|-------------------------------------------------|\n * | `'short'`     | `'M/d/yy, h:mm a'`                  | `6/15/15, 9:03 AM`                              |\n * | `'medium'`    | `'MMM d, y, h:mm:ss a'`             | `Jun 15, 2015, 9:03:01 AM`                      |\n * | `'long'`      | `'MMMM d, y, h:mm:ss a z'`          | `June 15, 2015 at 9:03:01 AM GMT+1`             |\n * | `'full'`      | `'EEEE, MMMM d, y, h:mm:ss a zzzz'` | `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00` |\n * | `'shortDate'` | `'M/d/yy'`                          | `6/15/15`                                       |\n * | `'mediumDate'`| `'MMM d, y'`                        | `Jun 15, 2015`                                  |\n * | `'longDate'`  | `'MMMM d, y'`                       | `June 15, 2015`                                 |\n * | `'fullDate'`  | `'EEEE, MMMM d, y'`                 | `Monday, June 15, 2015`                         |\n * | `'shortTime'` | `'h:mm a'`                          | `9:03 AM`                                       |\n * | `'mediumTime'`| `'h:mm:ss a'`                       | `9:03:01 AM`                                    |\n * | `'longTime'`  | `'h:mm:ss a z'`                     | `9:03:01 AM GMT+1`                              |\n * | `'fullTime'`  | `'h:mm:ss a zzzz'`                  | `9:03:01 AM GMT+01:00`                          |\n *\n * ### Custom format options\n *\n * You can construct a format string using symbols to specify the components\n * of a date-time value, as described in the following table.\n * Format details depend on the locale.\n * Fields marked with (*) are only available in the extra data set for the given locale.\n *\n *  | Field type              | Format      | Description                                                   | Example Value                                              |\n *  |-------------------------|-------------|---------------------------------------------------------------|------------------------------------------------------------|\n *  | Era                     | G, GG & GGG | Abbreviated                                                   | AD                                                         |\n *  |                         | GGGG        | Wide                                                          | Anno Domini                                                |\n *  |                         | GGGGG       | Narrow                                                        | A                                                          |\n *  | Year                    | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |\n *  |                         | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |\n *  |                         | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |\n *  |                         | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |\n *  | ISO Week-numbering year | Y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |\n *  |                         | YY          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |\n *  |                         | YYY         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |\n *  |                         | YYYY        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |\n *  | Month                   | M           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                         | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                         | MMM         | Abbreviated                                                   | Sep                                                        |\n *  |                         | MMMM        | Wide                                                          | September                                                  |\n *  |                         | MMMMM       | Narrow                                                        | S                                                          |\n *  | Month standalone        | L           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                         | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                         | LLL         | Abbreviated                                                   | Sep                                                        |\n *  |                         | LLLL        | Wide                                                          | September                                                  |\n *  |                         | LLLLL       | Narrow                                                        | S                                                          |\n *  | ISO Week of year        | w           | Numeric: minimum digits                                       | 1... 53                                                    |\n *  |                         | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |\n *  | Week of month           | W           | Numeric: 1 digit                                              | 1... 5                                                     |\n *  | Day of month            | d           | Numeric: minimum digits                                       | 1                                                          |\n *  |                         | dd          | Numeric: 2 digits + zero padded                               | 01                                                         |\n *  | Week day                | E, EE & EEE | Abbreviated                                                   | Tue                                                        |\n *  |                         | EEEE        | Wide                                                          | Tuesday                                                    |\n *  |                         | EEEEE       | Narrow                                                        | T                                                          |\n *  |                         | EEEEEE      | Short                                                         | Tu                                                         |\n *  | Week day standalone     | c, cc       | Numeric: 1 digit                                              | 2                                                          |\n *  |                         | ccc         | Abbreviated                                                   | Tue                                                        |\n *  |                         | cccc        | Wide                                                          | Tuesday                                                    |\n *  |                         | ccccc       | Narrow                                                        | T                                                          |\n *  |                         | cccccc      | Short                                                         | Tu                                                         |\n *  | Period                  | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |\n *  |                         | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |\n *  |                         | aaaaa       | Narrow                                                        | a/p                                                        |\n *  | Period*                 | B, BB & BBB | Abbreviated                                                   | mid.                                                       |\n *  |                         | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                         | BBBBB       | Narrow                                                        | md                                                         |\n *  | Period standalone*      | b, bb & bbb | Abbreviated                                                   | mid.                                                       |\n *  |                         | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                         | bbbbb       | Narrow                                                        | md                                                         |\n *  | Hour 1-12               | h           | Numeric: minimum digits                                       | 1, 12                                                      |\n *  |                         | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |\n *  | Hour 0-23               | H           | Numeric: minimum digits                                       | 0, 23                                                      |\n *  |                         | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |\n *  | Minute                  | m           | Numeric: minimum digits                                       | 8, 59                                                      |\n *  |                         | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |\n *  | Second                  | s           | Numeric: minimum digits                                       | 0... 59                                                    |\n *  |                         | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |\n *  | Fractional seconds      | S           | Numeric: 1 digit                                              | 0... 9                                                     |\n *  |                         | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |\n *  |                         | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |\n *  | Zone                    | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |\n *  |                         | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |\n *  |                         | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |\n *  |                         | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |\n *  |                         | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |\n *  |                         | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |\n *  |                         | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |\n *\n *\n * ### Format examples\n *\n * These examples transform a date into various formats,\n * assuming that `dateObj` is a JavaScript `Date` object for\n * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,\n * given in the local time for the `en-US` locale.\n *\n * ```\n * {{ dateObj | date }}               // output is 'Jun 15, 2015'\n * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n * {{ dateObj | date:'mm:ss' }}       // output is '43:11'\n * {{ dateObj | date:\"MMM dd, yyyy 'at' hh:mm a\" }}  // output is 'Jun 15, 2015 at 09:43 PM'\n * ```\n *\n * ### Usage example\n *\n * The following component uses a date pipe to display the current date in different formats.\n *\n * ```angular-ts\n * @Component({\n *  selector: 'date-pipe',\n *  template: `<div>\n *    <p>Today is {{today | date}}</p>\n *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>\n *    <p>The time is {{today | date:'h:mm a z'}}</p>\n *  </div>`\n * })\n * // Get the current date and time as a date-time value.\n * export class DatePipeComponent {\n *   today: number = Date.now();\n * }\n * ```\n *\n * @publicApi\n */\n@Pipe({\n  name: 'date',\n})\nexport class DatePipe implements PipeTransform {\n  constructor(\n    @Inject(LOCALE_ID) private locale: string,\n    @Inject(DATE_PIPE_DEFAULT_TIMEZONE) @Optional() private defaultTimezone?: string | null,\n    @Inject(DATE_PIPE_DEFAULT_OPTIONS) @Optional() private defaultOptions?: DatePipeConfig | null,\n  ) {}\n\n  /**\n   * @param value The date expression: a `Date` object,  a number\n   * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).\n   * @param format The date/time components to include, using predefined options or a\n   * custom format string.  When not provided, the `DatePipe` looks for the value using the\n   * `DATE_PIPE_DEFAULT_OPTIONS` injection token (and reads the `dateFormat` property).\n   * If the token is not configured, the `mediumDate` is used as a value.\n   * @param timezone A timezone offset (such as `'+0430'`). When not provided, the `DatePipe`\n   * looks for the value using the `DATE_PIPE_DEFAULT_OPTIONS` injection token (and reads\n   * the `timezone` property). If the token is not configured, the end-user's local system\n   * timezone is used as a value.\n   * @param locale A locale code for the locale format rules to use.\n   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n   * See [Setting your app locale](guide/i18n/locale-id).\n   *\n   * @see {@link DATE_PIPE_DEFAULT_OPTIONS}\n   *\n   * @returns A date string in the desired format.\n   */\n  transform(\n    value: Date | string | number,\n    format?: string,\n    timezone?: string,\n    locale?: string,\n  ): string | null;\n  transform(value: null | undefined, format?: string, timezone?: string, locale?: string): null;\n  transform(\n    value: Date | string | number | null | undefined,\n    format?: string,\n    timezone?: string,\n    locale?: string,\n  ): string | null;\n  transform(\n    value: Date | string | number | null | undefined,\n    format?: string,\n    timezone?: string,\n    locale?: string,\n  ): string | null {\n    if (value == null || value === '' || value !== value) return null;\n\n    try {\n      const _format = format ?? this.defaultOptions?.dateFormat ?? DEFAULT_DATE_FORMAT;\n      const _timezone =\n        timezone ?? this.defaultOptions?.timezone ?? this.defaultTimezone ?? undefined;\n      return formatDate(value, _format, locale || this.locale, _timezone);\n    } catch (error) {\n      throw invalidPipeArgumentError(DatePipe, (error as Error).message);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {COMMON_DIRECTIVES} from './directives/index';\nimport {COMMON_PIPES} from './pipes/index';\n\n// Note: This does not contain the location providers,\n// as they need some platform specific implementations to work.\n/**\n * Exports all the basic Angular directives and pipes,\n * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * @publicApi\n */\n@NgModule({\n  imports: [COMMON_DIRECTIVES, COMMON_PIPES],\n  exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n})\nexport class CommonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport const PLATFORM_BROWSER_ID = 'browser';\nexport const PLATFORM_SERVER_ID = 'server';\n\n/**\n * Returns whether a platform id represents a browser platform.\n * @publicApi\n */\nexport function isPlatformBrowser(platformId: Object): boolean {\n  return platformId === PLATFORM_BROWSER_ID;\n}\n\n/**\n * Returns whether a platform id represents a server platform.\n * @publicApi\n */\nexport function isPlatformServer(platformId: Object): boolean {\n  return platformId === PLATFORM_SERVER_ID;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n */\nexport abstract class XhrFactory {\n  abstract build(): XMLHttpRequest;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nexport abstract class HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nexport abstract class HttpBackend implements HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\ninterface Update {\n  name: string;\n  value?: string | string[];\n  op: 'a' | 's' | 'd';\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nexport class HttpHeaders {\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  // TODO(issue/24571): remove '!'.\n  private headers!: Map<string, string[]>;\n\n  /**\n   * Internal map of lowercased header names to the normalized\n   * form of the name (the form seen first).\n   */\n  private normalizedNames: Map<string, string> = new Map();\n\n  /**\n   * Complete the lazy initialization of this object (needed before reading).\n   */\n  private lazyInit!: HttpHeaders | Function | null;\n\n  /**\n   * Queued updates to be materialized the next initialization.\n   */\n  private lazyUpdate: Update[] | null = null;\n\n  /**  Constructs a new HTTP header object with the given values.*/\n\n  constructor(\n    headers?: string | {[name: string]: string | number | (string | number)[]} | Headers,\n  ) {\n    if (!headers) {\n      this.headers = new Map<string, string[]>();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        headers.split('\\n').forEach((line) => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const value = line.slice(index + 1).trim();\n            this.addHeaderEntry(name, value);\n          }\n        });\n      };\n    } else if (typeof Headers !== 'undefined' && headers instanceof Headers) {\n      this.headers = new Map<string, string[]>();\n      headers.forEach((value: string, name: string) => {\n        this.addHeaderEntry(name, value);\n      });\n    } else {\n      this.lazyInit = () => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          assertValidHeaders(headers);\n        }\n        this.headers = new Map<string, string[]>();\n        Object.entries(headers).forEach(([name, values]) => {\n          this.setHeaderEntries(name, values);\n        });\n      };\n    }\n  }\n\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n  has(name: string): boolean {\n    this.init();\n\n    return this.headers.has(name.toLowerCase());\n  }\n\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n  get(name: string): string | null {\n    this.init();\n\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n  keys(): string[] {\n    this.init();\n\n    return Array.from(this.normalizedNames.values());\n  }\n\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n  getAll(name: string): string[] | null {\n    this.init();\n\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the values.\n   * @param value The value to append.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n\n  append(name: string, value: string | string[]): HttpHeaders {\n    return this.clone({name, value, op: 'a'});\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or override for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n  set(name: string, value: string | string[]): HttpHeaders {\n    return this.clone({name, value, op: 's'});\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n  delete(name: string, value?: string | string[]): HttpHeaders {\n    return this.clone({name, value, op: 'd'});\n  }\n\n  private maybeSetNormalizedName(name: string, lcName: string): void {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  private init(): void {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach((update) => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  private copyFrom(other: HttpHeaders) {\n    other.init();\n    Array.from(other.headers.keys()).forEach((key) => {\n      this.headers.set(key, other.headers.get(key)!);\n      this.normalizedNames.set(key, other.normalizedNames.get(key)!);\n    });\n  }\n\n  private clone(update: Update): HttpHeaders {\n    const clone = new HttpHeaders();\n    clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  private applyUpdate(update: Update): void {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value!;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value as string | undefined;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter((value) => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n\n  private addHeaderEntry(name: string, value: string) {\n    const key = name.toLowerCase();\n    this.maybeSetNormalizedName(name, key);\n    if (this.headers.has(key)) {\n      this.headers.get(key)!.push(value);\n    } else {\n      this.headers.set(key, [value]);\n    }\n  }\n\n  private setHeaderEntries(name: string, values: any) {\n    const headerValues = (Array.isArray(values) ? values : [values]).map((value) =>\n      value.toString(),\n    );\n    const key = name.toLowerCase();\n    this.headers.set(key, headerValues);\n    this.maybeSetNormalizedName(name, key);\n  }\n\n  /**\n   * @internal\n   */\n  forEach(fn: (name: string, values: string[]) => void) {\n    this.init();\n    Array.from(this.normalizedNames.keys()).forEach((key) =>\n      fn(this.normalizedNames.get(key)!, this.headers.get(key)!),\n    );\n  }\n}\n\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(\n  headers: Record<string, unknown> | Headers,\n): asserts headers is Record<string, string | string[] | number | number[]> {\n  for (const [key, value] of Object.entries(headers)) {\n    if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n      throw new Error(\n        `Unexpected value of the \\`${key}\\` header provided. ` +\n          `Expecting either a string, a number or an array, but got: \\`${value}\\`.`,\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from './errors';\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * @publicApi\n **/\nexport interface HttpParameterCodec {\n  encodeKey(key: string): string;\n  encodeValue(value: string): string;\n\n  decodeKey(key: string): string;\n  decodeValue(value: string): string;\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nexport class HttpUrlEncodingCodec implements HttpParameterCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key: string): string {\n    return standardEncoding(key);\n  }\n\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n  encodeValue(value: string): string {\n    return standardEncoding(value);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n  decodeValue(value: string) {\n    return decodeURIComponent(value);\n  }\n}\n\nfunction paramParser(rawParams: string, codec: HttpParameterCodec): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    const params: string[] = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n        eqIdx == -1\n          ? [codec.decodeKey(param), '']\n          : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS: {[x: string]: string} = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/',\n};\n\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v).replace(\n    STANDARD_ENCODING_REGEX,\n    (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s,\n  );\n}\n\nfunction valueToString(value: string | number | boolean): string {\n  return `${value}`;\n}\n\ninterface Update {\n  param: string;\n  value?: string | number | boolean;\n  op: 'a' | 'd' | 's';\n}\n\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * @publicApi\n */\nexport interface HttpParamsOptions {\n  /**\n   * String representation of the HTTP parameters in URL-query-string format.\n   * Mutually exclusive with `fromObject`.\n   */\n  fromString?: string;\n\n  /** Object map of the HTTP parameters. Mutually exclusive with `fromString`. */\n  fromObject?: {\n    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n  };\n\n  /** Encoding codec used to parse and serialize the parameters. */\n  encoder?: HttpParameterCodec;\n}\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nexport class HttpParams {\n  private map: Map<string, string[]> | null;\n  private encoder: HttpParameterCodec;\n  private updates: Update[] | null = null;\n  private cloneFrom: HttpParams | null = null;\n\n  constructor(options: HttpParamsOptions = {} as HttpParamsOptions) {\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (options.fromString) {\n      if (options.fromObject) {\n        throw new RuntimeError(\n          RuntimeErrorCode.CANNOT_SPECIFY_BOTH_FROM_STRING_AND_FROM_OBJECT,\n          ngDevMode && 'Cannot specify both fromString and fromObject.',\n        );\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map<string, string[]>();\n      Object.keys(options.fromObject).forEach((key) => {\n        const value = (options.fromObject as any)[key];\n        // convert the values to strings\n        const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n        this.map!.set(key, values);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n  has(param: string): boolean {\n    this.init();\n    return this.map!.has(param);\n  }\n\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n  get(param: string): string | null {\n    this.init();\n    const res = this.map!.get(param);\n    return !!res ? res[0] : null;\n  }\n\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n  getAll(param: string): string[] | null {\n    this.init();\n    return this.map!.get(param) || null;\n  }\n\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n  keys(): string[] {\n    this.init();\n    return Array.from(this.map!.keys());\n  }\n\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n  append(param: string, value: string | number | boolean): HttpParams {\n    return this.clone({param, value, op: 'a'});\n  }\n\n  /**\n   * Constructs a new body with appended values for the given parameter name.\n   * @param params parameters and values\n   * @return A new body with the new value.\n   */\n  appendAll(params: {\n    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n  }): HttpParams {\n    const updates: Update[] = [];\n    Object.keys(params).forEach((param) => {\n      const value = params[param];\n      if (Array.isArray(value)) {\n        value.forEach((_value) => {\n          updates.push({param, value: _value, op: 'a'});\n        });\n      } else {\n        updates.push({param, value: value as string | number | boolean, op: 'a'});\n      }\n    });\n    return this.clone(updates);\n  }\n\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n  set(param: string, value: string | number | boolean): HttpParams {\n    return this.clone({param, value, op: 's'});\n  }\n\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n  delete(param: string, value?: string | number | boolean): HttpParams {\n    return this.clone({param, value, op: 'd'});\n  }\n\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n  toString(): string {\n    this.init();\n    return (\n      this.keys()\n        .map((key) => {\n          const eKey = this.encoder.encodeKey(key);\n          // `a: ['1']` produces `'a=1'`\n          // `b: []` produces `''`\n          // `c: ['1', '2']` produces `'c=1&c=2'`\n          return this.map!.get(key)!\n            .map((value) => eKey + '=' + this.encoder.encodeValue(value))\n            .join('&');\n        })\n        // filter out empty values because `b: []` produces `''`\n        // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n        .filter((param) => param !== '')\n        .join('&')\n    );\n  }\n\n  private clone(update: Update | Update[]): HttpParams {\n    const clone = new HttpParams({encoder: this.encoder} as HttpParamsOptions);\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat(update);\n    return clone;\n  }\n\n  private init() {\n    if (this.map === null) {\n      this.map = new Map<string, string[]>();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach((key) => this.map!.set(key, this.cloneFrom!.map!.get(key)!));\n      this.updates!.forEach((update) => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map!.get(update.param) : undefined) || [];\n            base.push(valueToString(update.value!));\n            this.map!.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map!.get(update.param) || [];\n              const idx = base.indexOf(valueToString(update.value));\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map!.set(update.param, base);\n              } else {\n                this.map!.delete(update.param);\n              }\n            } else {\n              this.map!.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nexport class HttpContextToken<T> {\n  constructor(public readonly defaultValue: () => T) {}\n}\n\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```ts\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nexport class HttpContext {\n  private readonly map = new Map<HttpContextToken<unknown>, unknown>();\n\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  set<T>(token: HttpContextToken<T>, value: T): HttpContext {\n    this.map.set(token, value);\n    return this;\n  }\n\n  /**\n   * Retrieve the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns The stored value or default if one is defined.\n   */\n  get<T>(token: HttpContextToken<T>): T {\n    if (!this.map.has(token)) {\n      this.map.set(token, token.defaultValue());\n    }\n    return this.map.get(token) as T;\n  }\n\n  /**\n   * Delete the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  delete(token: HttpContextToken<unknown>): HttpContext {\n    this.map.delete(token);\n    return this;\n  }\n\n  /**\n   * Checks for existence of a given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns True if the token exists, false otherwise.\n   */\n  has(token: HttpContextToken<unknown>): boolean {\n    return this.map.has(token);\n  }\n\n  /**\n   * @returns a list of tokens currently stored in the context.\n   */\n  keys(): IterableIterator<HttpContextToken<unknown>> {\n    return this.map.keys();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams} from './params';\n\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n */\ninterface HttpRequestInit {\n  headers?: HttpHeaders;\n  context?: HttpContext;\n  reportProgress?: boolean;\n  params?: HttpParams;\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n  withCredentials?: boolean;\n  transferCache?: {includeHeaders?: string[]} | boolean;\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method: string): boolean {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value: any): value is ArrayBuffer {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value: any): value is Blob {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value: any): value is FormData {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value: any): value is URLSearchParams {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n\n/**\n * `Content-Type` is an HTTP header used to indicate the media type\n * (also known as MIME type) of the resource being sent to the client\n * or received from the server.\n */\nexport const CONTENT_TYPE_HEADER = 'Content-Type';\n\n/**\n * The `Accept` header is an HTTP request header that indicates the media types\n * (or content types) the client is willing to receive from the server.\n */\nexport const ACCEPT_HEADER = 'Accept';\n\n/**\n * `X-Request-URL` is a custom HTTP header used in older browser versions,\n * including Firefox (< 32), Chrome (< 37), Safari (< 8), and Internet Explorer,\n * to include the full URL of the request in cross-origin requests.\n */\nexport const X_REQUEST_URL_HEADER = 'X-Request-URL';\n\n/**\n * `text/plain` is a content type used to indicate that the content being\n * sent is plain text with no special formatting or structured data\n * like HTML, XML, or JSON.\n */\nexport const TEXT_CONTENT_TYPE = 'text/plain';\n\n/**\n * `application/json` is a content type used to indicate that the content\n * being sent is in the JSON format.\n */\nexport const JSON_CONTENT_TYPE = 'application/json';\n\n/**\n * `application/json, text/plain, *\\/*` is a content negotiation string often seen in the\n * Accept header of HTTP requests. It indicates the types of content the client is willing\n * to accept from the server, with a preference for `application/json` and `text/plain`,\n * but also accepting any other type (*\\/*).\n */\nexport const ACCEPT_HEADER_VALUE = `${JSON_CONTENT_TYPE}, ${TEXT_CONTENT_TYPE}, */*`;\n\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nexport class HttpRequest<T> {\n  /**\n   * The request body, or `null` if one isn't set.\n   *\n   * Bodies are not enforced to be immutable, as they can include a reference to any\n   * user-defined data type. However, interceptors should take care to preserve\n   * idempotence by treating them as such.\n   */\n  readonly body: T | null = null;\n\n  /**\n   * Outgoing headers for this request.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly headers!: HttpHeaders;\n\n  /**\n   * Shared and mutable context that can be used by interceptors\n   */\n  readonly context!: HttpContext;\n\n  /**\n   * Whether this request should be made in a way that exposes progress events.\n   *\n   * Progress events are expensive (change detection runs on each event) and so\n   * they should only be requested if the consumer intends to monitor them.\n   *\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\n   */\n  readonly reportProgress: boolean = false;\n\n  /**\n   * Whether this request should be sent with outgoing credentials (cookies).\n   */\n  readonly withCredentials: boolean = false;\n\n  /**\n   * The expected response type of the server.\n   *\n   * This is used to parse the response appropriately before returning it to\n   * the requestee.\n   */\n  readonly responseType: 'arraybuffer' | 'blob' | 'json' | 'text' = 'json';\n\n  /**\n   * The outgoing HTTP request method.\n   */\n  readonly method: string;\n\n  /**\n   * Outgoing URL parameters.\n   *\n   * To pass a string representation of HTTP parameters in the URL-query-string format,\n   * the `HttpParamsOptions`' `fromString` may be used. For example:\n   *\n   * ```ts\n   * new HttpParams({fromString: 'angular=awesome'})\n   * ```\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly params!: HttpParams;\n\n  /**\n   * The outgoing URL with all URL parameters set.\n   */\n  readonly urlWithParams: string;\n\n  /**\n   * The HttpTransferCache option for the request\n   */\n  readonly transferCache?: {includeHeaders?: string[]} | boolean;\n\n  constructor(\n    method: 'GET' | 'HEAD',\n    url: string,\n    init?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      /**\n       * This property accepts either a boolean to enable/disable transferring cache for eligible\n       * requests performed using `HttpClient`, or an object, which allows to configure cache\n       * parameters, such as which headers should be included (no headers are included by default).\n       *\n       * Setting this property will override the options passed to `provideClientHydration()` for this\n       * particular request\n       */\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  );\n  constructor(\n    method: 'DELETE' | 'JSONP' | 'OPTIONS',\n    url: string,\n    init?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n    },\n  );\n  constructor(\n    method: 'POST',\n    url: string,\n    body: T | null,\n    init?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      /**\n       * This property accepts either a boolean to enable/disable transferring cache for eligible\n       * requests performed using `HttpClient`, or an object, which allows to configure cache\n       * parameters, such as which headers should be included (no headers are included by default).\n       *\n       * Setting this property will override the options passed to `provideClientHydration()` for this\n       * particular request\n       */\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  );\n  constructor(\n    method: 'PUT' | 'PATCH',\n    url: string,\n    body: T | null,\n    init?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n    },\n  );\n  constructor(\n    method: string,\n    url: string,\n    body: T | null,\n    init?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      /**\n       * This property accepts either a boolean to enable/disable transferring cache for eligible\n       * requests performed using `HttpClient`, or an object, which allows to configure cache\n       * parameters, such as which headers should be included (no headers are included by default).\n       *\n       * Setting this property will override the options passed to `provideClientHydration()` for this\n       * particular request\n       */\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  );\n  constructor(\n    method: string,\n    readonly url: string,\n    third?:\n      | T\n      | {\n          headers?: HttpHeaders;\n          context?: HttpContext;\n          reportProgress?: boolean;\n          params?: HttpParams;\n          responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n          withCredentials?: boolean;\n          transferCache?: {includeHeaders?: string[]} | boolean;\n        }\n      | null,\n    fourth?: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ) {\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options: HttpRequestInit | undefined;\n\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? (third as T) : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third as HttpRequestInit;\n    }\n\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.context) {\n        this.context = options.context;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n\n      // We do want to assign transferCache even if it's falsy (false is valid value)\n      this.transferCache = options.transferCache;\n    }\n\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    this.headers ??= new HttpHeaders();\n\n    // If no context have been passed in, construct a new HttpContext instance.\n    this.context ??= new HttpContext();\n\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const sep: string = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n  serializeBody(): ArrayBuffer | Blob | FormData | URLSearchParams | string | null {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (\n      typeof this.body === 'string' ||\n      isArrayBuffer(this.body) ||\n      isBlob(this.body) ||\n      isFormData(this.body) ||\n      isUrlSearchParams(this.body)\n    ) {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (\n      typeof this.body === 'object' ||\n      typeof this.body === 'boolean' ||\n      Array.isArray(this.body)\n    ) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return (this.body as any).toString();\n  }\n\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n  detectContentTypeHeader(): string | null {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return TEXT_CONTENT_TYPE;\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, boolean and numbers will be encoded as JSON.\n    if (\n      typeof this.body === 'object' ||\n      typeof this.body === 'number' ||\n      typeof this.body === 'boolean'\n    ) {\n      return JSON_CONTENT_TYPE;\n    }\n    // No type could be inferred.\n    return null;\n  }\n\n  clone(): HttpRequest<T>;\n  clone(update: {\n    headers?: HttpHeaders;\n    context?: HttpContext;\n    reportProgress?: boolean;\n    params?: HttpParams;\n    responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n    withCredentials?: boolean;\n    transferCache?: {includeHeaders?: string[]} | boolean;\n    body?: T | null;\n    method?: string;\n    url?: string;\n    setHeaders?: {[name: string]: string | string[]};\n    setParams?: {[param: string]: string};\n  }): HttpRequest<T>;\n  clone<V>(update: {\n    headers?: HttpHeaders;\n    context?: HttpContext;\n    reportProgress?: boolean;\n    params?: HttpParams;\n    responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n    withCredentials?: boolean;\n    transferCache?: {includeHeaders?: string[]} | boolean;\n    body?: V | null;\n    method?: string;\n    url?: string;\n    setHeaders?: {[name: string]: string | string[]};\n    setParams?: {[param: string]: string};\n  }): HttpRequest<V>;\n  clone(\n    update: {\n      headers?: HttpHeaders;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      params?: HttpParams;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n      body?: any | null;\n      method?: string;\n      url?: string;\n      setHeaders?: {[name: string]: string | string[]};\n      setParams?: {[param: string]: string};\n    } = {},\n  ): HttpRequest<any> {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType;\n\n    // Carefully handle the transferCache to differentiate between\n    // `false` and `undefined` in the update args.\n    const transferCache = update.transferCache ?? this.transferCache;\n\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const body = update.body !== undefined ? update.body : this.body;\n\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const withCredentials = update.withCredentials ?? this.withCredentials;\n    const reportProgress = update.reportProgress ?? this.reportProgress;\n\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params;\n\n    // Pass on context if needed\n    const context = update.context ?? this.context;\n\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers = Object.keys(update.setHeaders).reduce(\n        (headers, name) => headers.set(name, update.setHeaders![name]),\n        headers,\n      );\n    }\n\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams).reduce(\n        (params, param) => params.set(param, update.setParams![param]),\n        params,\n      );\n    }\n\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      context,\n      reportProgress,\n      responseType,\n      withCredentials,\n      transferCache,\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {HttpHeaders} from './headers';\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nexport enum HttpEventType {\n  /**\n   * The request was sent out over the wire.\n   */\n  Sent,\n\n  /**\n   * An upload progress event was received.\n   *\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\n   */\n  UploadProgress,\n\n  /**\n   * The response status code and headers were received.\n   */\n  ResponseHeader,\n\n  /**\n   * A download progress event was received.\n   */\n  DownloadProgress,\n\n  /**\n   * The full response including the body was received.\n   */\n  Response,\n\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  User,\n}\n\n/**\n * Base interface for progress events.\n *\n * @publicApi\n */\nexport interface HttpProgressEvent {\n  /**\n   * Progress event type is either upload or download.\n   */\n  type: HttpEventType.DownloadProgress | HttpEventType.UploadProgress;\n\n  /**\n   * Number of bytes uploaded or downloaded.\n   */\n  loaded: number;\n\n  /**\n   * Total number of bytes to upload or download. Depending on the request or\n   * response, this may not be computable and thus may not be present.\n   */\n  total?: number;\n}\n\n/**\n * A download progress event.\n *\n * @publicApi\n */\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.DownloadProgress;\n\n  /**\n   * The partial response body as downloaded so far.\n   *\n   * Only present if the responseType was `text`.\n   */\n  partialText?: string;\n}\n\n/**\n * An upload progress event.\n *\n * Note: The `FetchBackend` doesn't support progress report on uploads.\n *\n * @publicApi\n */\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.UploadProgress;\n}\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * @publicApi\n */\nexport interface HttpSentEvent {\n  type: HttpEventType.Sent;\n}\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * @publicApi\n */\nexport interface HttpUserEvent<T> {\n  type: HttpEventType.User;\n}\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n */\nexport interface HttpJsonParseError {\n  error: Error;\n  text: string;\n}\n\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n *\n * @publicApi\n */\nexport type HttpEvent<T> =\n  | HttpSentEvent\n  | HttpHeaderResponse\n  | HttpResponse<T>\n  | HttpProgressEvent\n  | HttpUserEvent<T>;\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nexport abstract class HttpResponseBase {\n  /**\n   * All response headers.\n   */\n  readonly headers: HttpHeaders;\n\n  /**\n   * Response status code.\n   */\n  readonly status: number;\n\n  /**\n   * Textual description of response status code, defaults to OK.\n   *\n   * Do not depend on this.\n   */\n  readonly statusText: string;\n\n  /**\n   * URL of the resource retrieved, or null if not available.\n   */\n  readonly url: string | null;\n\n  /**\n   * Whether the status code falls in the 2xx range.\n   */\n  readonly ok: boolean;\n\n  /**\n   * Type of the response, narrowed to either the full response or the header.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly type!: HttpEventType.Response | HttpEventType.ResponseHeader;\n\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(\n    init: {\n      headers?: HttpHeaders;\n      status?: number;\n      statusText?: string;\n      url?: string;\n    },\n    defaultStatus: number = 200,\n    defaultStatusText: string = 'OK',\n  ) {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nexport class HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(\n    init: {\n      headers?: HttpHeaders;\n      status?: number;\n      statusText?: string;\n      url?: string;\n    } = {},\n  ) {\n    super(init);\n  }\n\n  override readonly type: HttpEventType.ResponseHeader = HttpEventType.ResponseHeader;\n\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  clone(\n    update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string} = {},\n  ): HttpHeaderResponse {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nexport class HttpResponse<T> extends HttpResponseBase {\n  /**\n   * The response body, or `null` if one was not returned.\n   */\n  readonly body: T | null;\n\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(\n    init: {\n      body?: T | null;\n      headers?: HttpHeaders;\n      status?: number;\n      statusText?: string;\n      url?: string;\n    } = {},\n  ) {\n    super(init);\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  override readonly type: HttpEventType.Response = HttpEventType.Response;\n\n  clone(): HttpResponse<T>;\n  clone(update: {\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }): HttpResponse<T>;\n  clone<V>(update: {\n    body?: V | null;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }): HttpResponse<V>;\n  clone(\n    update: {\n      body?: any | null;\n      headers?: HttpHeaders;\n      status?: number;\n      statusText?: string;\n      url?: string;\n    } = {},\n  ): HttpResponse<any> {\n    return new HttpResponse<any>({\n      body: update.body !== undefined ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nexport class HttpErrorResponse extends HttpResponseBase implements Error {\n  readonly name = 'HttpErrorResponse';\n  readonly message: string;\n  readonly error: any | null;\n\n  /**\n   * Errors are never okay, even when the status code is in the 2xx success range.\n   */\n  override readonly ok = false;\n\n  constructor(init: {\n    error?: any;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${\n        init.statusText\n      }`;\n    }\n    this.error = init.error || null;\n  }\n}\n\n/**\n * We use these constant to prevent pulling the whole HttpStatusCode enum\n * Those are the only ones referenced directly by the framework\n */\nexport const HTTP_STATUS_CODE_OK = 200;\nexport const HTTP_STATUS_CODE_NO_CONTENT = 204;\n\n/**\n * Http status codes.\n * As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n * @publicApi\n */\nexport enum HttpStatusCode {\n  Continue = 100,\n  SwitchingProtocols = 101,\n  Processing = 102,\n  EarlyHints = 103,\n\n  Ok = HTTP_STATUS_CODE_OK,\n  Created = 201,\n  Accepted = 202,\n  NonAuthoritativeInformation = 203,\n  NoContent = HTTP_STATUS_CODE_NO_CONTENT,\n  ResetContent = 205,\n  PartialContent = 206,\n  MultiStatus = 207,\n  AlreadyReported = 208,\n  ImUsed = 226,\n\n  MultipleChoices = 300,\n  MovedPermanently = 301,\n  Found = 302,\n  SeeOther = 303,\n  NotModified = 304,\n  UseProxy = 305,\n  Unused = 306,\n  TemporaryRedirect = 307,\n  PermanentRedirect = 308,\n\n  BadRequest = 400,\n  Unauthorized = 401,\n  PaymentRequired = 402,\n  Forbidden = 403,\n  NotFound = 404,\n  MethodNotAllowed = 405,\n  NotAcceptable = 406,\n  ProxyAuthenticationRequired = 407,\n  RequestTimeout = 408,\n  Conflict = 409,\n  Gone = 410,\n  LengthRequired = 411,\n  PreconditionFailed = 412,\n  PayloadTooLarge = 413,\n  UriTooLong = 414,\n  UnsupportedMediaType = 415,\n  RangeNotSatisfiable = 416,\n  ExpectationFailed = 417,\n  ImATeapot = 418,\n  MisdirectedRequest = 421,\n  UnprocessableEntity = 422,\n  Locked = 423,\n  FailedDependency = 424,\n  TooEarly = 425,\n  UpgradeRequired = 426,\n  PreconditionRequired = 428,\n  TooManyRequests = 429,\n  RequestHeaderFieldsTooLarge = 431,\n  UnavailableForLegalReasons = 451,\n\n  InternalServerError = 500,\n  NotImplemented = 501,\n  BadGateway = 502,\n  ServiceUnavailable = 503,\n  GatewayTimeout = 504,\n  HttpVersionNotSupported = 505,\n  VariantAlsoNegotiates = 506,\n  InsufficientStorage = 507,\n  LoopDetected = 508,\n  NotExtended = 510,\n  NetworkAuthenticationRequired = 511,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, ɵRuntimeError as RuntimeError} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {concatMap, filter, map} from 'rxjs/operators';\n\nimport {HttpHandler} from './backend';\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams, HttpParamsOptions} from './params';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\nimport {RuntimeErrorCode} from './errors';\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody<T>(\n  options: {\n    headers?: HttpHeaders | Record<string, string | string[]>;\n    context?: HttpContext;\n    observe?: 'body' | 'events' | 'response';\n    params?:\n      | HttpParams\n      | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n    reportProgress?: boolean;\n    responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n    withCredentials?: boolean;\n    transferCache?: {includeHeaders?: string[]} | boolean;\n  },\n  body: T | null,\n): any {\n  return {\n    body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials,\n    transferCache: options.transferCache,\n  };\n}\n\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * @usageNotes\n *\n * ### HTTP Request Example\n *\n * ```ts\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```ts\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```ts\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```ts\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpClient {\n  constructor(private handler: HttpHandler) {}\n\n  /**\n   * Sends an `HttpRequest` and returns a stream of `HttpEvent`s.\n   *\n   * @return An `Observable` of the response, with the response body as a stream of `HttpEvent`s.\n   */\n  request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the response in\n   * an `ArrayBuffer`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a request that interprets the body as a blob and returns\n   * the response as a blob.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Blob`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an array of `HttpEvent`s for\n   * the request.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      observe: 'events';\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a request that interprets the body as a `Blob` and returns\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Blob`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the  request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Object`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      observe: 'events';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<any>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `R`.\n   */\n  request<R>(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      observe: 'events';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request which interprets the body as an `ArrayBuffer`\n   * and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a request which interprets the body as a `Blob` and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text stream and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the HTTP response, with the response body of type string.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  request(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      observe: 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns\n   * the full `HttpResponse` with the response body in the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the full `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(\n    method: string,\n    url: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      reportProgress?: boolean;\n      observe: 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<R>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * `HttpResponse` as a JavaScript object.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   */\n  request(\n    method: string,\n    url: string,\n    options?: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      reportProgress?: boolean;\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object\n   * with the response body of the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(\n    method: string,\n    url: string,\n    options?: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      responseType?: 'json';\n      reportProgress?: boolean;\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<R>;\n\n  /**\n   * Constructs a request where response type and requested observable are not known statically.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the requested response, with body of type `any`.\n   */\n  request(\n    method: string,\n    url: string,\n    options?: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      observe?: 'body' | 'events' | 'response';\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<any>;\n\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n  request(\n    first: string | HttpRequest<any>,\n    url?: string,\n    options: {\n      body?: any;\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    } = {},\n  ): Observable<any> {\n    let req: HttpRequest<any>;\n    // First, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n\n      // Figure out the headers.\n      let headers: HttpHeaders | undefined = undefined;\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      }\n\n      // Sort out parameters.\n      let params: HttpParams | undefined = undefined;\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({fromObject: options.params} as HttpParamsOptions);\n        }\n      }\n\n      // Construct the request.\n      req = new HttpRequest(first, url!, options.body !== undefined ? options.body : null, {\n        headers,\n        context: options.context,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials,\n        transferCache: options.transferCache,\n      });\n    }\n\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$: Observable<HttpEvent<any>> = of(req).pipe(\n      concatMap((req: HttpRequest<any>) => this.handler.handle(req)),\n    );\n\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    const res$: Observable<HttpResponse<any>> = <Observable<HttpResponse<any>>>(\n      events$.pipe(filter((event: HttpEvent<any>) => event instanceof HttpResponse))\n    );\n\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(\n              map((res: HttpResponse<any>) => {\n                // Validate that the body is an ArrayBuffer.\n                if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                  throw new RuntimeError(\n                    RuntimeErrorCode.RESPONSE_IS_NOT_AN_ARRAY_BUFFER,\n                    ngDevMode && 'Response is not an ArrayBuffer.',\n                  );\n                }\n                return res.body;\n              }),\n            );\n          case 'blob':\n            return res$.pipe(\n              map((res: HttpResponse<any>) => {\n                // Validate that the body is a Blob.\n                if (res.body !== null && !(res.body instanceof Blob)) {\n                  throw new RuntimeError(\n                    RuntimeErrorCode.RESPONSE_IS_NOT_A_BLOB,\n                    ngDevMode && 'Response is not a Blob.',\n                  );\n                }\n                return res.body;\n              }),\n            );\n          case 'text':\n            return res$.pipe(\n              map((res: HttpResponse<any>) => {\n                // Validate that the body is a string.\n                if (res.body !== null && typeof res.body !== 'string') {\n                  throw new RuntimeError(\n                    RuntimeErrorCode.RESPONSE_IS_NOT_A_STRING,\n                    ngDevMode && 'Response is not a string.',\n                  );\n                }\n                return res.body;\n              }),\n            );\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map((res: HttpResponse<any>) => res.body));\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new RuntimeError(\n          RuntimeErrorCode.UNHANDLED_OBSERVE_TYPE,\n          ngDevMode && `Unreachable: unhandled observe type ${options.observe}}`,\n        );\n    }\n  }\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response body as an `ArrayBuffer`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response body as a `Blob`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string and returns\n   * a string.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with response body as an `ArrayBuffer`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the response body as a\n   * `Blob`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body of type string.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with response body of\n   * type `Object`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `DELETE`request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a response\n   * body in the requested type.\n   */\n  delete<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | (string | number | boolean)[]>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text stream and\n   *  returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body of type string.\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `DELETE` request the interprets the body as a JavaScript object and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   *\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of the requested type.\n   */\n  delete<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  delete(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a DELETE request that interprets the body as JSON and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with response body in the requested type.\n   */\n  delete<T>(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      body?: any | null;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `DELETE` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   */\n  delete(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      body?: any | null;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('DELETE', url, options as any);\n  }\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns the\n   * response in an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob`\n   * and returns the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string\n   * and returns the response as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body as an `ArrayBuffer`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string and returns\n   * the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with a response body in the requested type.\n   */\n  get<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text stream and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  get<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response body as a JavaScript object.\n   */\n  get(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and returns\n   * the response body in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body in the requested type.\n   */\n  get<T>(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `GET` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  get(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('GET', url, options as any);\n  }\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer` and\n   * returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response, with the response body as a `Blob`.\n   */\n\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string and returns the response\n   * as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an  `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body of type\n   * string.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON\n   * and returns the full HTTP event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the full event stream.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   */\n  head<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a blob.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the requested type.\n   */\n  head<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  head(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the given type.\n   */\n  head<T>(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `HEAD` request to execute on the server. The `HEAD` method returns\n   * meta information about the resource without transferring the\n   * resource itself. See the individual overloads for\n   * details on the return type.\n   */\n  head(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('HEAD', url, options as any);\n  }\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * @return An `Observable` of the response object, with response body as an object.\n   */\n  jsonp(url: string, callbackParam: string): Observable<Object>;\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * You must install a suitable interceptor, such as one provided by `HttpClientJsonpModule`.\n   * If no such interceptor is reached,\n   * then the `JSONP` request can be rejected by the configured backend.\n   *\n   * @return An `Observable` of the response object, with response body in the requested type.\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\n   * `JSONP` to be dispatched via the interceptor pipeline.\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n   * API endpoints that don't support newer,\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n   * application making the request.\n   * The endpoint API must support JSONP callback for JSONP requests to work.\n   * The resource API returns the JSON response wrapped in a callback function.\n   * You can pass the callback function name as one of the query parameters.\n   * Note that JSONP requests can only be used with `GET` requests.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T> {\n    return this.request<any>('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json',\n    });\n  }\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an\n   * `ArrayBuffer` and returns the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request with the response\n   * body of type `Object`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n   * response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  options(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n   * response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body of the given type.\n   */\n  options<T>(\n    url: string,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes the configured\n   * `OPTIONS` request to execute on the server. This method allows the client\n   * to determine the supported HTTP methods and other capabilities of an endpoint,\n   * without implying a resource action. See the individual overloads for\n   * details on the return type.\n   */\n  options(\n    url: string,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('OPTIONS', url, options as any);\n  }\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and returns\n   * the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the response\n   * as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and\n   *  returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the\n   * response body as `Blob`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a\n   * response body of type string.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  patch<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text stream and returns the\n   * full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs a `PATCH` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PATCH` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  patch(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('PATCH', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and returns\n   * an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the\n   * response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob`\n   * and returns the response in an observable of the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body as `Blob`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type string.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a POST request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a POST request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  post<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a POST request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text stream and returns\n   * the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * `Object`.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON and returns the\n   * full `HttpResponse`.\n   *\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns the response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns an observable of the response.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `POST` request to execute on the server. The server responds with the location of\n   * the replaced resource. See the individual overloads for\n   * details on the return type.\n   */\n  post(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n      transferCache?: {includeHeaders?: string[]} | boolean;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('POST', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and returns the\n   * response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<Blob>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<string>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body\n   * of type string.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the\n   * full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'events';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an\n   * `ArrayBuffer` and returns an observable of the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'arraybuffer';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'blob';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text stream and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * string.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the full\n   * HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body\n   * of type 'Object`.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type and\n   * returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      observe: 'response';\n      context?: HttpContext;\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON\n   * and returns an observable of JavaScript object.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response as a JavaScript object.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<Object>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type\n   * and returns an observable of the requested type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the requested type.\n   */\n  put<T>(\n    url: string,\n    body: any | null,\n    options?: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n   * with a new set of values.\n   * See the individual overloads for details on the return type.\n   */\n  put(\n    url: string,\n    body: any | null,\n    options: {\n      headers?: HttpHeaders | Record<string, string | string[]>;\n      context?: HttpContext;\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>>;\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n    } = {},\n  ): Observable<any> {\n    return this.request<any>('PUT', url, addBody(options, body));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, Injectable, InjectionToken, NgZone} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend} from './backend';\nimport {HttpHeaders} from './headers';\nimport {\n  ACCEPT_HEADER,\n  ACCEPT_HEADER_VALUE,\n  CONTENT_TYPE_HEADER,\n  HttpRequest,\n  X_REQUEST_URL_HEADER,\n} from './request';\nimport {\n  HTTP_STATUS_CODE_OK,\n  HttpDownloadProgressEvent,\n  HttpErrorResponse,\n  HttpEvent,\n  HttpEventType,\n  HttpHeaderResponse,\n  HttpResponse,\n} from './response';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Determine an appropriate URL for the response, by checking either\n * response url or the X-Request-URL header.\n */\nfunction getResponseUrl(response: Response): string | null {\n  if (response.url) {\n    return response.url;\n  }\n  // stored as lowercase in the map\n  const xRequestUrl = X_REQUEST_URL_HEADER.toLocaleLowerCase();\n  return response.headers.get(xRequestUrl);\n}\n\n/**\n * An internal injection token to reference `FetchBackend` implementation\n * in a tree-shakable way.\n */\nexport const FETCH_BACKEND = new InjectionToken<FetchBackend>(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'FETCH_BACKEND' : '',\n);\n\n/**\n * Uses `fetch` to send requests to a backend server.\n *\n * This `FetchBackend` requires the support of the\n * [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) which is available on all\n * supported browsers and on Node.js v18 or later.\n *\n * @see {@link HttpHandler}\n *\n * @publicApi\n */\n@Injectable()\nexport class FetchBackend implements HttpBackend {\n  // We use an arrow function to always reference the current global implementation of `fetch`.\n  // This is helpful for cases when the global `fetch` implementation is modified by external code,\n  // see https://github.com/angular/angular/issues/57527.\n  private readonly fetchImpl =\n    inject(FetchFactory, {optional: true})?.fetch ?? ((...args) => globalThis.fetch(...args));\n  private readonly ngZone = inject(NgZone);\n\n  handle(request: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return new Observable((observer) => {\n      const aborter = new AbortController();\n      this.doRequest(request, aborter.signal, observer).then(noop, (error) =>\n        observer.error(new HttpErrorResponse({error})),\n      );\n      return () => aborter.abort();\n    });\n  }\n\n  private async doRequest(\n    request: HttpRequest<any>,\n    signal: AbortSignal,\n    observer: Observer<HttpEvent<any>>,\n  ): Promise<void> {\n    const init = this.createRequestInit(request);\n    let response;\n\n    try {\n      // Run fetch outside of Angular zone.\n      // This is due to Node.js fetch implementation (Undici) which uses a number of setTimeouts to check if\n      // the response should eventually timeout which causes extra CD cycles every 500ms\n      const fetchPromise = this.ngZone.runOutsideAngular(() =>\n        this.fetchImpl(request.urlWithParams, {signal, ...init}),\n      );\n\n      // Make sure Zone.js doesn't trigger false-positive unhandled promise\n      // error in case the Promise is rejected synchronously. See function\n      // description for additional information.\n      silenceSuperfluousUnhandledPromiseRejection(fetchPromise);\n\n      // Send the `Sent` event before awaiting the response.\n      observer.next({type: HttpEventType.Sent});\n\n      response = await fetchPromise;\n    } catch (error: any) {\n      observer.error(\n        new HttpErrorResponse({\n          error,\n          status: error.status ?? 0,\n          statusText: error.statusText,\n          url: request.urlWithParams,\n          headers: error.headers,\n        }),\n      );\n      return;\n    }\n\n    const headers = new HttpHeaders(response.headers);\n    const statusText = response.statusText;\n    const url = getResponseUrl(response) ?? request.urlWithParams;\n\n    let status = response.status;\n    let body: string | ArrayBuffer | Blob | object | null = null;\n\n    if (request.reportProgress) {\n      observer.next(new HttpHeaderResponse({headers, status, statusText, url}));\n    }\n\n    if (response.body) {\n      // Read Progress\n      const contentLength = response.headers.get('content-length');\n      const chunks: Uint8Array[] = [];\n      const reader = response.body.getReader();\n      let receivedLength = 0;\n\n      let decoder: TextDecoder;\n      let partialText: string | undefined;\n\n      // We have to check whether the Zone is defined in the global scope because this may be called\n      // when the zone is nooped.\n      const reqZone = typeof Zone !== 'undefined' && Zone.current;\n\n      // Perform response processing outside of Angular zone to\n      // ensure no excessive change detection runs are executed\n      // Here calling the async ReadableStreamDefaultReader.read() is responsible for triggering CD\n      await this.ngZone.runOutsideAngular(async () => {\n        while (true) {\n          const {done, value} = await reader.read();\n\n          if (done) {\n            break;\n          }\n\n          chunks.push(value);\n          receivedLength += value.length;\n\n          if (request.reportProgress) {\n            partialText =\n              request.responseType === 'text'\n                ? (partialText ?? '') +\n                  (decoder ??= new TextDecoder()).decode(value, {stream: true})\n                : undefined;\n\n            const reportProgress = () =>\n              observer.next({\n                type: HttpEventType.DownloadProgress,\n                total: contentLength ? +contentLength : undefined,\n                loaded: receivedLength,\n                partialText,\n              } as HttpDownloadProgressEvent);\n            reqZone ? reqZone.run(reportProgress) : reportProgress();\n          }\n        }\n      });\n\n      // Combine all chunks.\n      const chunksAll = this.concatChunks(chunks, receivedLength);\n      try {\n        const contentType = response.headers.get(CONTENT_TYPE_HEADER) ?? '';\n        body = this.parseBody(request, chunksAll, contentType);\n      } catch (error) {\n        // Body loading or parsing failed\n        observer.error(\n          new HttpErrorResponse({\n            error,\n            headers: new HttpHeaders(response.headers),\n            status: response.status,\n            statusText: response.statusText,\n            url: getResponseUrl(response) ?? request.urlWithParams,\n          }),\n        );\n        return;\n      }\n    }\n\n    // Same behavior as the XhrBackend\n    if (status === 0) {\n      status = body ? HTTP_STATUS_CODE_OK : 0;\n    }\n\n    // ok determines whether the response will be transmitted on the event or\n    // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n    // but a successful status code can still result in an error if the user\n    // asked for JSON data and the body cannot be parsed as such.\n    const ok = status >= 200 && status < 300;\n\n    if (ok) {\n      observer.next(\n        new HttpResponse({\n          body,\n          headers,\n          status,\n          statusText,\n          url,\n        }),\n      );\n\n      // The full body has been received and delivered, no further events\n      // are possible. This request is complete.\n      observer.complete();\n    } else {\n      observer.error(\n        new HttpErrorResponse({\n          error: body,\n          headers,\n          status,\n          statusText,\n          url,\n        }),\n      );\n    }\n  }\n\n  private parseBody(\n    request: HttpRequest<any>,\n    binContent: Uint8Array,\n    contentType: string,\n  ): string | ArrayBuffer | Blob | object | null {\n    switch (request.responseType) {\n      case 'json':\n        // stripping the XSSI when present\n        const text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX, '');\n        return text === '' ? null : (JSON.parse(text) as object);\n      case 'text':\n        return new TextDecoder().decode(binContent);\n      case 'blob':\n        return new Blob([binContent], {type: contentType});\n      case 'arraybuffer':\n        return binContent.buffer;\n    }\n  }\n\n  private createRequestInit(req: HttpRequest<any>): RequestInit {\n    // We could share some of this logic with the XhrBackend\n\n    const headers: Record<string, string> = {};\n    const credentials: RequestCredentials | undefined = req.withCredentials ? 'include' : undefined;\n\n    // Setting all the requested headers.\n    req.headers.forEach((name, values) => (headers[name] = values.join(',')));\n\n    // Add an Accept header if one isn't present already.\n    if (!req.headers.has(ACCEPT_HEADER)) {\n      headers[ACCEPT_HEADER] = ACCEPT_HEADER_VALUE;\n    }\n\n    // Auto-detect the Content-Type header if one isn't present already.\n    if (!req.headers.has(CONTENT_TYPE_HEADER)) {\n      const detectedType = req.detectContentTypeHeader();\n      // Sometimes Content-Type detection fails.\n      if (detectedType !== null) {\n        headers[CONTENT_TYPE_HEADER] = detectedType;\n      }\n    }\n\n    return {\n      body: req.serializeBody(),\n      method: req.method,\n      headers,\n      credentials,\n    };\n  }\n\n  private concatChunks(chunks: Uint8Array[], totalLength: number): Uint8Array {\n    const chunksAll = new Uint8Array(totalLength);\n    let position = 0;\n    for (const chunk of chunks) {\n      chunksAll.set(chunk, position);\n      position += chunk.length;\n    }\n\n    return chunksAll;\n  }\n}\n\n/**\n * Abstract class to provide a mocked implementation of `fetch()`\n */\nexport abstract class FetchFactory {\n  abstract fetch: typeof fetch;\n}\n\nfunction noop(): void {}\n\n/**\n * Zone.js treats a rejected promise that has not yet been awaited\n * as an unhandled error. This function adds a noop `.then` to make\n * sure that Zone.js doesn't throw an error if the Promise is rejected\n * synchronously.\n */\nfunction silenceSuperfluousUnhandledPromiseRejection(promise: Promise<unknown>) {\n  promise.then(noop, noop);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {isPlatformServer} from '@angular/common';\nimport {\n  EnvironmentInjector,\n  inject,\n  Injectable,\n  InjectionToken,\n  PLATFORM_ID,\n  runInInjectionContext,\n  ɵConsole as Console,\n  ɵformatRuntimeError as formatRuntimeError,\n  ɵPendingTasksInternal as PendingTasks,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {finalize} from 'rxjs/operators';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {RuntimeErrorCode} from './errors';\nimport {FetchBackend} from './fetch';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http/interceptors)\n * @see {@link HttpInterceptorFn}\n *\n * @usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector.\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the\n * interceptors provided in the root module.\n */\nexport interface HttpInterceptor {\n  /**\n   * Identifies and handles a given HTTP request.\n   * @param req The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n\n/**\n * Represents the next interceptor in an interceptor chain, or the real backend if there are no\n * further interceptors.\n *\n * Most interceptors will delegate to this function, and either modify the outgoing request or the\n * response when it arrives. Within the scope of the current request, however, this function may be\n * called any number of times, for any number of downstream requests. Such downstream requests need\n * not be to the same URL or even the same origin as the current request. It is also valid to not\n * call the downstream handler at all, and process the current request entirely within the\n * interceptor.\n *\n * This function should only be called within the scope of the request that's currently being\n * intercepted. Once that request is complete, this downstream handler function should not be\n * called.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http/interceptors)\n */\nexport type HttpHandlerFn = (req: HttpRequest<unknown>) => Observable<HttpEvent<unknown>>;\n\n/**\n * An interceptor for HTTP requests made via `HttpClient`.\n *\n * `HttpInterceptorFn`s are middleware functions which `HttpClient` calls when a request is made.\n * These functions have the opportunity to modify the outgoing request or any response that comes\n * back, as well as block, redirect, or otherwise change the request or response semantics.\n *\n * An `HttpHandlerFn` representing the next interceptor (or the backend which will make a real HTTP\n * request) is provided. Most interceptors will delegate to this function, but that is not required\n * (see `HttpHandlerFn` for more details).\n *\n * `HttpInterceptorFn`s are executed in an [injection context](guide/di/dependency-injection-context).\n * They have access to `inject()` via the `EnvironmentInjector` from which they were configured.\n *\n * @see [HTTP Guide](guide/http/interceptors)\n * @see {@link withInterceptors}\n *\n * @usageNotes\n * Here is a noop interceptor that passes the request through without modifying it:\n * ```ts\n * export const noopInterceptor: HttpInterceptorFn = (req: HttpRequest<unknown>, next:\n * HttpHandlerFn) => {\n *   return next(modifiedReq);\n * };\n * ```\n *\n * If you want to alter a request, clone it first and modify the clone before passing it to the\n * `next()` handler function.\n *\n * Here is a basic interceptor that adds a bearer token to the headers\n * ```ts\n * export const authenticationInterceptor: HttpInterceptorFn = (req: HttpRequest<unknown>, next:\n * HttpHandlerFn) => {\n *    const userToken = 'MY_TOKEN'; const modifiedReq = req.clone({\n *      headers: req.headers.set('Authorization', `Bearer ${userToken}`),\n *    });\n *\n *    return next(modifiedReq);\n * };\n * ```\n */\nexport type HttpInterceptorFn = (\n  req: HttpRequest<unknown>,\n  next: HttpHandlerFn,\n) => Observable<HttpEvent<unknown>>;\n\n/**\n * Function which invokes an HTTP interceptor chain.\n *\n * Each interceptor in the interceptor chain is turned into a `ChainedInterceptorFn` which closes\n * over the rest of the chain (represented by another `ChainedInterceptorFn`). The last such\n * function in the chain will instead delegate to the `finalHandlerFn`, which is passed down when\n * the chain is invoked.\n *\n * This pattern allows for a chain of many interceptors to be composed and wrapped in a single\n * `HttpInterceptorFn`, which is a useful abstraction for including different kinds of interceptors\n * (e.g. legacy class-based interceptors) in the same chain.\n */\ntype ChainedInterceptorFn<RequestT> = (\n  req: HttpRequest<RequestT>,\n  finalHandlerFn: HttpHandlerFn,\n) => Observable<HttpEvent<RequestT>>;\n\nfunction interceptorChainEndFn(\n  req: HttpRequest<any>,\n  finalHandlerFn: HttpHandlerFn,\n): Observable<HttpEvent<any>> {\n  return finalHandlerFn(req);\n}\n\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(\n  chainTailFn: ChainedInterceptorFn<any>,\n  interceptor: HttpInterceptor,\n): ChainedInterceptorFn<any> {\n  return (initialRequest, finalHandlerFn) =>\n    interceptor.intercept(initialRequest, {\n      handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\n    });\n}\n\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(\n  chainTailFn: ChainedInterceptorFn<unknown>,\n  interceptorFn: HttpInterceptorFn,\n  injector: EnvironmentInjector,\n): ChainedInterceptorFn<unknown> {\n  return (initialRequest, finalHandlerFn) =>\n    runInInjectionContext(injector, () =>\n      interceptorFn(initialRequest, (downstreamRequest) =>\n        chainTailFn(downstreamRequest, finalHandlerFn),\n      ),\n    );\n}\n\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nexport const HTTP_INTERCEPTORS = new InjectionToken<readonly HttpInterceptor[]>(\n  ngDevMode ? 'HTTP_INTERCEPTORS' : '',\n);\n\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nexport const HTTP_INTERCEPTOR_FNS = new InjectionToken<readonly HttpInterceptorFn[]>(\n  ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '',\n);\n\n/**\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\n */\nexport const HTTP_ROOT_INTERCEPTOR_FNS = new InjectionToken<readonly HttpInterceptorFn[]>(\n  ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '',\n);\n\n// TODO(atscott): We need a larger discussion about stability and what should contribute to stability.\n// Should the whole interceptor chain contribute to stability or just the backend request #55075?\n// Should HttpClient contribute to stability automatically at all?\nexport const REQUESTS_CONTRIBUTE_TO_STABILITY = new InjectionToken<boolean>(\n  ngDevMode ? 'REQUESTS_CONTRIBUTE_TO_STABILITY' : '',\n  {providedIn: 'root', factory: () => true},\n);\n\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nexport function legacyInterceptorFnFactory(): HttpInterceptorFn {\n  let chain: ChainedInterceptorFn<any> | null = null;\n\n  return (req, handler) => {\n    if (chain === null) {\n      const interceptors = inject(HTTP_INTERCEPTORS, {optional: true}) ?? [];\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      chain = interceptors.reduceRight(\n        adaptLegacyInterceptorToChain,\n        interceptorChainEndFn as ChainedInterceptorFn<any>,\n      );\n    }\n\n    const pendingTasks = inject(PendingTasks);\n    const contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);\n    if (contributeToStability) {\n      const taskId = pendingTasks.add();\n      return chain(req, handler).pipe(finalize(() => pendingTasks.remove(taskId)));\n    } else {\n      return chain(req, handler);\n    }\n  };\n}\n\nlet fetchBackendWarningDisplayed = false;\n\n/** Internal function to reset the flag in tests */\nexport function resetFetchBackendWarningFlag() {\n  fetchBackendWarningDisplayed = false;\n}\n\n@Injectable()\nexport class HttpInterceptorHandler extends HttpHandler {\n  private chain: ChainedInterceptorFn<unknown> | null = null;\n  private readonly pendingTasks = inject(PendingTasks);\n  private readonly contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);\n\n  constructor(\n    private backend: HttpBackend,\n    private injector: EnvironmentInjector,\n  ) {\n    super();\n\n    // We strongly recommend using fetch backend for HTTP calls when SSR is used\n    // for an application. The logic below checks if that's the case and produces\n    // a warning otherwise.\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !fetchBackendWarningDisplayed) {\n      const isServer = isPlatformServer(injector.get(PLATFORM_ID));\n\n      // This flag is necessary because provideHttpClientTesting() overrides the backend\n      // even if `withFetch()` is used within the test. When the testing HTTP backend is provided,\n      // no HTTP calls are actually performed during the test, so producing a warning would be\n      // misleading.\n      const isTestingBackend = (this.backend as any).isTestingBackend;\n\n      if (isServer && !(this.backend instanceof FetchBackend) && !isTestingBackend) {\n        fetchBackendWarningDisplayed = true;\n        injector\n          .get(Console)\n          .warn(\n            formatRuntimeError(\n              RuntimeErrorCode.NOT_USING_FETCH_BACKEND_IN_SSR,\n              'Angular detected that `HttpClient` is not configured ' +\n                \"to use `fetch` APIs. It's strongly recommended to \" +\n                'enable `fetch` for applications that use Server-Side Rendering ' +\n                'for better performance and compatibility. ' +\n                'To enable `fetch`, add the `withFetch()` to the `provideHttpClient()` ' +\n                'call at the root of the application.',\n            ),\n          );\n      }\n    }\n  }\n\n  override handle(initialRequest: HttpRequest<any>): Observable<HttpEvent<any>> {\n    if (this.chain === null) {\n      const dedupedInterceptorFns = Array.from(\n        new Set([\n          ...this.injector.get(HTTP_INTERCEPTOR_FNS),\n          ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, []),\n        ]),\n      );\n\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      this.chain = dedupedInterceptorFns.reduceRight(\n        (nextSequencedFn, interceptorFn) =>\n          chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector),\n        interceptorChainEndFn as ChainedInterceptorFn<unknown>,\n      );\n    }\n\n    if (this.contributeToStability) {\n      const taskId = this.pendingTasks.add();\n      return this.chain(initialRequest, (downstreamRequest) =>\n        this.backend.handle(downstreamRequest),\n      ).pipe(finalize(() => this.pendingTasks.remove(taskId)));\n    } else {\n      return this.chain(initialRequest, (downstreamRequest) =>\n        this.backend.handle(downstreamRequest),\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {XhrFactory} from '@angular/common';\nimport {Injectable, ɵRuntimeError as RuntimeError} from '@angular/core';\nimport {from, Observable, Observer, of} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\n\nimport {HttpBackend} from './backend';\nimport {RuntimeErrorCode} from './errors';\nimport {HttpHeaders} from './headers';\nimport {\n  ACCEPT_HEADER,\n  ACCEPT_HEADER_VALUE,\n  CONTENT_TYPE_HEADER,\n  HttpRequest,\n  X_REQUEST_URL_HEADER,\n} from './request';\nimport {\n  HTTP_STATUS_CODE_NO_CONTENT,\n  HTTP_STATUS_CODE_OK,\n  HttpDownloadProgressEvent,\n  HttpErrorResponse,\n  HttpEvent,\n  HttpEventType,\n  HttpHeaderResponse,\n  HttpJsonParseError,\n  HttpResponse,\n  HttpUploadProgressEvent,\n} from './response';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\nconst X_REQUEST_URL_REGEXP = RegExp(`^${X_REQUEST_URL_HEADER}:`, 'm');\n\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr: any): string | null {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (X_REQUEST_URL_REGEXP.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader(X_REQUEST_URL_HEADER);\n  }\n  return null;\n}\n\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpXhrBackend implements HttpBackend {\n  constructor(private xhrFactory: XhrFactory) {}\n\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\n    if (req.method === 'JSONP') {\n      throw new RuntimeError(\n        RuntimeErrorCode.MISSING_JSONP_MODULE,\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \\`withJsonpSupport()\\` call (if \\`provideHttpClient()\\` is used) or import the \\`HttpClientJsonpModule\\` in the root NgModule.`,\n      );\n    }\n\n    // Check whether this factory has a special function to load an XHR implementation\n    // for various non-browser environments. We currently limit it to only `ServerXhr`\n    // class, which needs to load an XHR implementation.\n    const xhrFactory: XhrFactory & {ɵloadImpl?: () => Promise<void>} = this.xhrFactory;\n    const source: Observable<void | null> = xhrFactory.ɵloadImpl\n      ? from(xhrFactory.ɵloadImpl())\n      : of(null);\n\n    return source.pipe(\n      switchMap(() => {\n        // Everything happens on Observable subscription.\n        return new Observable((observer: Observer<HttpEvent<any>>) => {\n          // Start by setting up the XHR object with request method, URL, and withCredentials\n          // flag.\n          const xhr = xhrFactory.build();\n          xhr.open(req.method, req.urlWithParams);\n          if (req.withCredentials) {\n            xhr.withCredentials = true;\n          }\n\n          // Add all the requested headers.\n          req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n\n          // Add an Accept header if one isn't present already.\n          if (!req.headers.has(ACCEPT_HEADER)) {\n            xhr.setRequestHeader(ACCEPT_HEADER, ACCEPT_HEADER_VALUE);\n          }\n\n          // Auto-detect the Content-Type header if one isn't present already.\n          if (!req.headers.has(CONTENT_TYPE_HEADER)) {\n            const detectedType = req.detectContentTypeHeader();\n            // Sometimes Content-Type detection fails.\n            if (detectedType !== null) {\n              xhr.setRequestHeader(CONTENT_TYPE_HEADER, detectedType);\n            }\n          }\n\n          // Set the responseType if one was requested.\n          if (req.responseType) {\n            const responseType = req.responseType.toLowerCase();\n\n            // JSON responses need to be processed as text. This is because if the server\n            // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n            // xhr.response will be null, and xhr.responseText cannot be accessed to\n            // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n            // is parsed by first requesting text and then applying JSON.parse.\n            xhr.responseType = (responseType !== 'json' ? responseType : 'text') as any;\n          }\n\n          // Serialize the request body if one is present. If not, this will be set to null.\n          const reqBody = req.serializeBody();\n\n          // If progress events are enabled, response headers will be delivered\n          // in two events - the HttpHeaderResponse event and the full HttpResponse\n          // event. However, since response headers don't change in between these\n          // two events, it doesn't make sense to parse them twice. So headerResponse\n          // caches the data extracted from the response whenever it's first parsed,\n          // to ensure parsing isn't duplicated.\n          let headerResponse: HttpHeaderResponse | null = null;\n\n          // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n          // state, and memoizes it into headerResponse.\n          const partialFromXhr = (): HttpHeaderResponse => {\n            if (headerResponse !== null) {\n              return headerResponse;\n            }\n\n            const statusText = xhr.statusText || 'OK';\n\n            // Parse headers from XMLHttpRequest - this step is lazy.\n            const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n\n            // Read the response URL from the XMLHttpResponse instance and fall back on the\n            // request URL.\n            const url = getResponseUrl(xhr) || req.url;\n\n            // Construct the HttpHeaderResponse and memoize it.\n            headerResponse = new HttpHeaderResponse({headers, status: xhr.status, statusText, url});\n            return headerResponse;\n          };\n\n          // Next, a few closures are defined for the various events which XMLHttpRequest can\n          // emit. This allows them to be unregistered as event listeners later.\n\n          // First up is the load event, which represents a response being fully available.\n          const onLoad = () => {\n            // Read response state from the memoized partial data.\n            let {headers, status, statusText, url} = partialFromXhr();\n\n            // The body will be read out if present.\n            let body: any | null = null;\n\n            if (status !== HTTP_STATUS_CODE_NO_CONTENT) {\n              // Use XMLHttpRequest.response if set, responseText otherwise.\n              body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n            }\n\n            // Normalize another potential bug (this one comes from CORS).\n            if (status === 0) {\n              status = !!body ? HTTP_STATUS_CODE_OK : 0;\n            }\n\n            // ok determines whether the response will be transmitted on the event or\n            // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n            // but a successful status code can still result in an error if the user\n            // asked for JSON data and the body cannot be parsed as such.\n            let ok = status >= 200 && status < 300;\n\n            // Check whether the body needs to be parsed as JSON (in many cases the browser\n            // will have done that already).\n            if (req.responseType === 'json' && typeof body === 'string') {\n              // Save the original body, before attempting XSSI prefix stripping.\n              const originalBody = body;\n              body = body.replace(XSSI_PREFIX, '');\n              try {\n                // Attempt the parse. If it fails, a parse error should be delivered to the\n                // user.\n                body = body !== '' ? JSON.parse(body) : null;\n              } catch (error) {\n                // Since the JSON.parse failed, it's reasonable to assume this might not have\n                // been a JSON response. Restore the original body (including any XSSI prefix)\n                // to deliver a better error response.\n                body = originalBody;\n\n                // If this was an error request to begin with, leave it as a string, it\n                // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\n                if (ok) {\n                  // Even though the response status was 2xx, this is still an error.\n                  ok = false;\n                  // The parse error contains the text of the body that failed to parse.\n                  body = {error, text: body} as HttpJsonParseError;\n                }\n              }\n            }\n\n            if (ok) {\n              // A successful response is delivered on the event stream.\n              observer.next(\n                new HttpResponse({\n                  body,\n                  headers,\n                  status,\n                  statusText,\n                  url: url || undefined,\n                }),\n              );\n              // The full body has been received and delivered, no further events\n              // are possible. This request is complete.\n              observer.complete();\n            } else {\n              // An unsuccessful request is delivered on the error channel.\n              observer.error(\n                new HttpErrorResponse({\n                  // The error in this case is the response body (error from the server).\n                  error: body,\n                  headers,\n                  status,\n                  statusText,\n                  url: url || undefined,\n                }),\n              );\n            }\n          };\n\n          // The onError callback is called when something goes wrong at the network level.\n          // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n          // transmitted on the error channel.\n          const onError = (error: ProgressEvent) => {\n            const {url} = partialFromXhr();\n            const res = new HttpErrorResponse({\n              error,\n              status: xhr.status || 0,\n              statusText: xhr.statusText || 'Unknown Error',\n              url: url || undefined,\n            });\n            observer.error(res);\n          };\n\n          // The sentHeaders flag tracks whether the HttpResponseHeaders event\n          // has been sent on the stream. This is necessary to track if progress\n          // is enabled since the event will be sent on only the first download\n          // progress event.\n          let sentHeaders = false;\n\n          // The download progress event handler, which is only registered if\n          // progress events are enabled.\n          const onDownProgress = (event: ProgressEvent) => {\n            // Send the HttpResponseHeaders event if it hasn't been sent already.\n            if (!sentHeaders) {\n              observer.next(partialFromXhr());\n              sentHeaders = true;\n            }\n\n            // Start building the download progress event to deliver on the response\n            // event stream.\n            let progressEvent: HttpDownloadProgressEvent = {\n              type: HttpEventType.DownloadProgress,\n              loaded: event.loaded,\n            };\n\n            // Set the total number of bytes in the event if it's available.\n            if (event.lengthComputable) {\n              progressEvent.total = event.total;\n            }\n\n            // If the request was for text content and a partial response is\n            // available on XMLHttpRequest, include it in the progress event\n            // to allow for streaming reads.\n            if (req.responseType === 'text' && !!xhr.responseText) {\n              progressEvent.partialText = xhr.responseText;\n            }\n\n            // Finally, fire the event.\n            observer.next(progressEvent);\n          };\n\n          // The upload progress event handler, which is only registered if\n          // progress events are enabled.\n          const onUpProgress = (event: ProgressEvent) => {\n            // Upload progress events are simpler. Begin building the progress\n            // event.\n            let progress: HttpUploadProgressEvent = {\n              type: HttpEventType.UploadProgress,\n              loaded: event.loaded,\n            };\n\n            // If the total number of bytes being uploaded is available, include\n            // it.\n            if (event.lengthComputable) {\n              progress.total = event.total;\n            }\n\n            // Send the event.\n            observer.next(progress);\n          };\n\n          // By default, register for load and error events.\n          xhr.addEventListener('load', onLoad);\n          xhr.addEventListener('error', onError);\n          xhr.addEventListener('timeout', onError);\n          xhr.addEventListener('abort', onError);\n\n          // Progress events are only enabled if requested.\n          if (req.reportProgress) {\n            // Download progress is always enabled if requested.\n            xhr.addEventListener('progress', onDownProgress);\n\n            // Upload progress depends on whether there is a body to upload.\n            if (reqBody !== null && xhr.upload) {\n              xhr.upload.addEventListener('progress', onUpProgress);\n            }\n          }\n\n          // Fire the request, and notify the event stream that it was fired.\n          xhr.send(reqBody!);\n          observer.next({type: HttpEventType.Sent});\n          // This is the return from the Observable function, which is the\n          // request cancellation handler.\n          return () => {\n            // On a cancellation, remove all registered event listeners.\n            xhr.removeEventListener('error', onError);\n            xhr.removeEventListener('abort', onError);\n            xhr.removeEventListener('load', onLoad);\n            xhr.removeEventListener('timeout', onError);\n\n            if (req.reportProgress) {\n              xhr.removeEventListener('progress', onDownProgress);\n              if (reqBody !== null && xhr.upload) {\n                xhr.upload.removeEventListener('progress', onUpProgress);\n              }\n            }\n\n            // Finally, abort the in-flight request.\n            if (xhr.readyState !== xhr.DONE) {\n              xhr.abort();\n            }\n          };\n        });\n      }),\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT, ɵparseCookieValue as parseCookieValue} from '@angular/common';\nimport {\n  EnvironmentInjector,\n  Inject,\n  inject,\n  Injectable,\n  InjectionToken,\n  PLATFORM_ID,\n  runInInjectionContext,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpHandlerFn, HttpInterceptor} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\nexport const XSRF_ENABLED = new InjectionToken<boolean>(ngDevMode ? 'XSRF_ENABLED' : '');\n\nexport const XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nexport const XSRF_COOKIE_NAME = new InjectionToken<string>(ngDevMode ? 'XSRF_COOKIE_NAME' : '', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_COOKIE_NAME,\n});\n\nexport const XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nexport const XSRF_HEADER_NAME = new InjectionToken<string>(ngDevMode ? 'XSRF_HEADER_NAME' : '', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_HEADER_NAME,\n});\n\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nexport abstract class HttpXsrfTokenExtractor {\n  /**\n   * Get the XSRF token to use with an outgoing request.\n   *\n   * Will be called for every request, so the token may change between requests.\n   */\n  abstract getToken(): string | null;\n}\n\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n@Injectable()\nexport class HttpXsrfCookieExtractor implements HttpXsrfTokenExtractor {\n  private lastCookieString: string = '';\n  private lastToken: string | null = null;\n\n  /**\n   * @internal for testing\n   */\n  parseCount: number = 0;\n\n  constructor(\n    @Inject(DOCUMENT) private doc: any,\n    @Inject(PLATFORM_ID) private platform: string,\n    @Inject(XSRF_COOKIE_NAME) private cookieName: string,\n  ) {}\n\n  getToken(): string | null {\n    if (this.platform === 'server') {\n      return null;\n    }\n    const cookieString = this.doc.cookie || '';\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = parseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n    return this.lastToken;\n  }\n}\n\nexport function xsrfInterceptorFn(\n  req: HttpRequest<unknown>,\n  next: HttpHandlerFn,\n): Observable<HttpEvent<unknown>> {\n  const lcUrl = req.url.toLowerCase();\n  // Skip both non-mutating requests and absolute URLs.\n  // Non-mutating requests don't require a token, and absolute URLs require special handling\n  // anyway as the cookie set\n  // on our origin is not the same as the token expected by another origin.\n  if (\n    !inject(XSRF_ENABLED) ||\n    req.method === 'GET' ||\n    req.method === 'HEAD' ||\n    lcUrl.startsWith('http://') ||\n    lcUrl.startsWith('https://')\n  ) {\n    return next(req);\n  }\n\n  const token = inject(HttpXsrfTokenExtractor).getToken();\n  const headerName = inject(XSRF_HEADER_NAME);\n\n  // Be careful not to overwrite an existing header of the same name.\n  if (token != null && !req.headers.has(headerName)) {\n    req = req.clone({headers: req.headers.set(headerName, token)});\n  }\n  return next(req);\n}\n\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n@Injectable()\nexport class HttpXsrfInterceptor implements HttpInterceptor {\n  constructor(private injector: EnvironmentInjector) {}\n\n  intercept(initialRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return runInInjectionContext(this.injector, () =>\n      xsrfInterceptorFn(initialRequest, (downstreamRequest) => next.handle(downstreamRequest)),\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  EnvironmentProviders,\n  inject,\n  InjectionToken,\n  makeEnvironmentProviders,\n  Provider,\n} from '@angular/core';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpClient} from './client';\nimport {FETCH_BACKEND, FetchBackend} from './fetch';\nimport {\n  HTTP_INTERCEPTOR_FNS,\n  HttpInterceptorFn,\n  HttpInterceptorHandler,\n  legacyInterceptorFnFactory,\n} from './interceptor';\nimport {\n  jsonpCallbackContext,\n  JsonpCallbackContext,\n  JsonpClientBackend,\n  jsonpInterceptorFn,\n} from './jsonp';\nimport {HttpXhrBackend} from './xhr';\nimport {\n  HttpXsrfCookieExtractor,\n  HttpXsrfTokenExtractor,\n  XSRF_COOKIE_NAME,\n  XSRF_ENABLED,\n  XSRF_HEADER_NAME,\n  xsrfInterceptorFn,\n} from './xsrf';\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nexport enum HttpFeatureKind {\n  Interceptors,\n  LegacyInterceptors,\n  CustomXsrfConfiguration,\n  NoXsrfProtection,\n  JsonpSupport,\n  RequestsMadeViaParent,\n  Fetch,\n}\n\n/**\n * A feature for use when configuring `provideHttpClient`.\n *\n * @publicApi\n */\nexport interface HttpFeature<KindT extends HttpFeatureKind> {\n  ɵkind: KindT;\n  ɵproviders: Provider[];\n}\n\nfunction makeHttpFeature<KindT extends HttpFeatureKind>(\n  kind: KindT,\n  providers: Provider[],\n): HttpFeature<KindT> {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers,\n  };\n}\n\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * <div class=\"docs-alert docs-alert-helpful\">\n *\n * It's strongly recommended to enable\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for applications that use\n * Server-Side Rendering for better performance and compatibility. To enable `fetch`, add\n * `withFetch()` feature to the `provideHttpClient()` call at the root of the application:\n *\n * ```ts\n * provideHttpClient(withFetch());\n * ```\n *\n * </div>\n *\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n * @see {@link withFetch}\n */\nexport function provideHttpClient(\n  ...features: HttpFeature<HttpFeatureKind>[]\n): EnvironmentProviders {\n  if (ngDevMode) {\n    const featureKinds = new Set(features.map((f) => f.ɵkind));\n    if (\n      featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n      featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)\n    ) {\n      throw new Error(\n        ngDevMode\n          ? `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.`\n          : '',\n      );\n    }\n  }\n\n  const providers: Provider[] = [\n    HttpClient,\n    HttpXhrBackend,\n    HttpInterceptorHandler,\n    {provide: HttpHandler, useExisting: HttpInterceptorHandler},\n    {\n      provide: HttpBackend,\n      useFactory: () => {\n        return inject(FETCH_BACKEND, {optional: true}) ?? inject(HttpXhrBackend);\n      },\n    },\n    {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: xsrfInterceptorFn,\n      multi: true,\n    },\n    {provide: XSRF_ENABLED, useValue: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n  ];\n\n  for (const feature of features) {\n    providers.push(...feature.ɵproviders);\n  }\n\n  return makeEnvironmentProviders(providers);\n}\n\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\nexport function withInterceptors(\n  interceptorFns: HttpInterceptorFn[],\n): HttpFeature<HttpFeatureKind.Interceptors> {\n  return makeHttpFeature(\n    HttpFeatureKind.Interceptors,\n    interceptorFns.map((interceptorFn) => {\n      return {\n        provide: HTTP_INTERCEPTOR_FNS,\n        useValue: interceptorFn,\n        multi: true,\n      };\n    }),\n  );\n}\n\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken<HttpInterceptorFn>(\n  ngDevMode ? 'LEGACY_INTERCEPTOR_FN' : '',\n);\n\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\nexport function withInterceptorsFromDi(): HttpFeature<HttpFeatureKind.LegacyInterceptors> {\n  // Note: the legacy interceptor function is provided here via an intermediate token\n  // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n  // included multiple times, all of the multi-provider entries will have the same instance of the\n  // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n  // interceptors will not run multiple times.\n  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n    {\n      provide: LEGACY_INTERCEPTOR_FN,\n      useFactory: legacyInterceptorFnFactory,\n    },\n    {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useExisting: LEGACY_INTERCEPTOR_FN,\n      multi: true,\n    },\n  ]);\n}\n\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\nexport function withXsrfConfiguration({\n  cookieName,\n  headerName,\n}: {\n  cookieName?: string;\n  headerName?: string;\n}): HttpFeature<HttpFeatureKind.CustomXsrfConfiguration> {\n  const providers: Provider[] = [];\n  if (cookieName !== undefined) {\n    providers.push({provide: XSRF_COOKIE_NAME, useValue: cookieName});\n  }\n  if (headerName !== undefined) {\n    providers.push({provide: XSRF_HEADER_NAME, useValue: headerName});\n  }\n\n  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\nexport function withNoXsrfProtection(): HttpFeature<HttpFeatureKind.NoXsrfProtection> {\n  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n    {\n      provide: XSRF_ENABLED,\n      useValue: false,\n    },\n  ]);\n}\n\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\nexport function withJsonpSupport(): HttpFeature<HttpFeatureKind.JsonpSupport> {\n  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n    JsonpClientBackend,\n    {provide: JsonpCallbackContext, useFactory: jsonpCallbackContext},\n    {provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true},\n  ]);\n}\n\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see {@link provideHttpClient}\n * @publicApi\n */\nexport function withRequestsMadeViaParent(): HttpFeature<HttpFeatureKind.RequestsMadeViaParent> {\n  return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n    {\n      provide: HttpBackend,\n      useFactory: () => {\n        const handlerFromParent = inject(HttpHandler, {skipSelf: true, optional: true});\n        if (ngDevMode && handlerFromParent === null) {\n          throw new Error(\n            'withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient',\n          );\n        }\n        return handlerFromParent;\n      },\n    },\n  ]);\n}\n\n/**\n * Configures the current `HttpClient` instance to make requests using the fetch API.\n *\n * Note: The Fetch API doesn't support progress report on uploads.\n *\n * @publicApi\n */\nexport function withFetch(): HttpFeature<HttpFeatureKind.Fetch> {\n  return makeHttpFeature(HttpFeatureKind.Fetch, [\n    FetchBackend,\n    {provide: FETCH_BACKEND, useExisting: FetchBackend},\n    {provide: HttpBackend, useExisting: FetchBackend},\n  ]);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵDomAdapter as DomAdapter} from '@angular/common';\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class GenericBrowserDomAdapter extends DomAdapter {\n  override readonly supportsDOMEvents: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ɵparseCookieValue as parseCookieValue,\n  ɵsetRootDomAdapter as setRootDomAdapter,\n} from '@angular/common';\n\nimport {GenericBrowserDomAdapter} from './generic_browser_adapter';\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport class BrowserDomAdapter extends GenericBrowserDomAdapter {\n  static makeCurrent() {\n    setRootDomAdapter(new BrowserDomAdapter());\n  }\n\n  override onAndCancel(el: Node, evt: any, listener: any, options: any): Function {\n    el.addEventListener(evt, listener, options);\n    return () => {\n      el.removeEventListener(evt, listener, options);\n    };\n  }\n  override dispatchEvent(el: Node, evt: any) {\n    el.dispatchEvent(evt);\n  }\n  override remove(node: Node): void {\n    (node as Element | Text | Comment).remove();\n  }\n  override createElement(tagName: string, doc?: Document): HTMLElement {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  override createHtmlDocument(): Document {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  override getDefaultDocument(): Document {\n    return document;\n  }\n\n  override isElementNode(node: Node): boolean {\n    return node.nodeType === Node.ELEMENT_NODE;\n  }\n\n  override isShadowRoot(node: any): boolean {\n    return node instanceof DocumentFragment;\n  }\n\n  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n  override getGlobalEventTarget(doc: Document, target: string): EventTarget | null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  override getBaseHref(doc: Document): string | null {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  override resetBaseElement(): void {\n    baseElement = null;\n  }\n  override getUserAgent(): string {\n    return window.navigator.userAgent;\n  }\n  override getCookie(name: string): string | null {\n    return parseCookieValue(document.cookie, name);\n  }\n}\n\nlet baseElement: HTMLElement | null = null;\nfunction getBaseElementHref(): string | null {\n  baseElement = baseElement || document.querySelector('base');\n  return baseElement ? baseElement.getAttribute('href') : null;\n}\n\nfunction relativePath(url: string): string {\n  // The base URL doesn't really matter, we just need it so relative paths have something\n  // to resolve against. In the browser `HTMLBaseElement.href` is always absolute.\n  return new URL(url, document.baseURI).pathname;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {XhrFactory} from '@angular/common';\nimport {Injectable} from '@angular/core';\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n */\n@Injectable()\nexport class BrowserXhr implements XhrFactory {\n  build(): XMLHttpRequest {\n    return new XMLHttpRequest();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  NgZone,\n  ɵRuntimeError as RuntimeError,\n  type ListenerOptions,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../../errors';\n\n/**\n * The injection token for plugins of the `EventManager` service.\n *\n * @publicApi\n */\nexport const EVENT_MANAGER_PLUGINS = new InjectionToken<EventManagerPlugin[]>(\n  ngDevMode ? 'EventManagerPlugins' : '',\n);\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\n@Injectable()\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n  private _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(\n    @Inject(EVENT_MANAGER_PLUGINS) plugins: EventManagerPlugin[],\n    private _zone: NgZone,\n  ) {\n    plugins.forEach((plugin) => {\n      plugin.manager = this;\n    });\n    this._plugins = plugins.slice().reverse();\n  }\n\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @param options Options that configure how the event listener is bound.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function,\n    options?: ListenerOptions,\n  ): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler, options);\n  }\n\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone(): NgZone {\n    return this._zone;\n  }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    let plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n    plugin = plugins.find((plugin) => plugin.supports(eventName));\n    if (!plugin) {\n      throw new RuntimeError(\n        RuntimeErrorCode.NO_PLUGIN_FOR_EVENT,\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          `No event manager plugin found for event ${eventName}`,\n      );\n    }\n\n    this._eventNameToPlugin.set(eventName, plugin);\n    return plugin;\n  }\n}\n\n/**\n * The plugin definition for the `EventManager` class\n *\n * It can be used as a base class to create custom manager plugins, i.e. you can create your own\n * class that extends the `EventManagerPlugin` one.\n *\n * @publicApi\n */\nexport abstract class EventManagerPlugin {\n  // TODO: remove (has some usage in G3)\n  constructor(private _doc: any) {}\n\n  // Using non-null assertion because it's set by EventManager's constructor\n  manager!: EventManager;\n\n  /**\n   * Should return `true` for every event name that should be supported by this plugin\n   */\n  abstract supports(eventName: string): boolean;\n\n  /**\n   * Implement the behaviour for the supported events\n   */\n  abstract addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function,\n    options?: ListenerOptions,\n  ): Function;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT, isPlatformServer} from '@angular/common';\nimport {\n  APP_ID,\n  CSP_NONCE,\n  Inject,\n  Injectable,\n  OnDestroy,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\n\n/** The style elements attribute name used to set value of `APP_ID` token. */\nconst APP_ID_ATTRIBUTE_NAME = 'ng-app-id';\n\n/**\n * A record of usage for a specific style including all elements added to the DOM\n * that contain a given style.\n */\ninterface UsageRecord<T> {\n  elements: T[];\n  usage: number;\n}\n\n/**\n * Removes all provided elements from the document.\n * @param elements An array of HTML Elements.\n */\nfunction removeElements(elements: Iterable<HTMLElement>): void {\n  for (const element of elements) {\n    element.remove();\n  }\n}\n\n/**\n * Creates a `style` element with the provided inline style content.\n * @param style A string of the inline style content.\n * @param doc A DOM Document to use to create the element.\n * @returns An HTMLStyleElement instance.\n */\nfunction createStyleElement(style: string, doc: Document): HTMLStyleElement {\n  const styleElement = doc.createElement('style');\n  styleElement.textContent = style;\n\n  return styleElement;\n}\n\n/**\n * Searches a DOM document's head element for style elements with a matching application\n * identifier attribute (`ng-app-id`) to the provide identifier and adds usage records for each.\n * @param doc An HTML DOM document instance.\n * @param appId A string containing an Angular application identifer.\n * @param inline A Map object for tracking inline (defined via `styles` in component decorator) style usage.\n * @param external A Map object for tracking external (defined via `styleUrls` in component decorator) style usage.\n */\nfunction addServerStyles(\n  doc: Document,\n  appId: string,\n  inline: Map<string, UsageRecord<HTMLStyleElement>>,\n  external: Map<string, UsageRecord<HTMLLinkElement>>,\n): void {\n  const elements = doc.head?.querySelectorAll<HTMLStyleElement | HTMLLinkElement>(\n    `style[${APP_ID_ATTRIBUTE_NAME}=\"${appId}\"],link[${APP_ID_ATTRIBUTE_NAME}=\"${appId}\"]`,\n  );\n\n  if (elements) {\n    for (const styleElement of elements) {\n      styleElement.removeAttribute(APP_ID_ATTRIBUTE_NAME);\n      if (styleElement instanceof HTMLLinkElement) {\n        // Only use filename from href\n        // The href is build time generated with a unique value to prevent duplicates.\n        external.set(styleElement.href.slice(styleElement.href.lastIndexOf('/') + 1), {\n          usage: 0,\n          elements: [styleElement],\n        });\n      } else if (styleElement.textContent) {\n        inline.set(styleElement.textContent, {usage: 0, elements: [styleElement]});\n      }\n    }\n  }\n}\n\n/**\n * Creates a `link` element for the provided external style URL.\n * @param url A string of the URL for the stylesheet.\n * @param doc A DOM Document to use to create the element.\n * @returns An HTMLLinkElement instance.\n */\nexport function createLinkElement(url: string, doc: Document): HTMLLinkElement {\n  const linkElement = doc.createElement('link');\n  linkElement.setAttribute('rel', 'stylesheet');\n  linkElement.setAttribute('href', url);\n\n  return linkElement;\n}\n\n@Injectable()\nexport class SharedStylesHost implements OnDestroy {\n  /**\n   * Provides usage information for active inline style content and associated HTML <style> elements.\n   * Embedded styles typically originate from the `styles` metadata of a rendered component.\n   */\n  private readonly inline = new Map<string /** content */, UsageRecord<HTMLStyleElement>>();\n\n  /**\n   * Provides usage information for active external style URLs and the associated HTML <link> elements.\n   * External styles typically originate from the `ɵɵExternalStylesFeature` of a rendered component.\n   */\n  private readonly external = new Map<string /** URL */, UsageRecord<HTMLLinkElement>>();\n\n  /**\n   * Set of host DOM nodes that will have styles attached.\n   */\n  private readonly hosts = new Set<Node>();\n\n  /**\n   * Whether the application code is currently executing on a server.\n   */\n  private readonly isServer: boolean;\n\n  constructor(\n    @Inject(DOCUMENT) private readonly doc: Document,\n    @Inject(APP_ID) private readonly appId: string,\n    @Inject(CSP_NONCE) @Optional() private readonly nonce?: string | null,\n    @Inject(PLATFORM_ID) platformId: object = {},\n  ) {\n    this.isServer = isPlatformServer(platformId);\n    addServerStyles(doc, appId, this.inline, this.external);\n    this.hosts.add(doc.head);\n  }\n\n  /**\n   * Adds embedded styles to the DOM via HTML `style` elements.\n   * @param styles An array of style content strings.\n   */\n  addStyles(styles: string[], urls?: string[]): void {\n    for (const value of styles) {\n      this.addUsage(value, this.inline, createStyleElement);\n    }\n\n    urls?.forEach((value) => this.addUsage(value, this.external, createLinkElement));\n  }\n\n  /**\n   * Removes embedded styles from the DOM that were added as HTML `style` elements.\n   * @param styles An array of style content strings.\n   */\n  removeStyles(styles: string[], urls?: string[]): void {\n    for (const value of styles) {\n      this.removeUsage(value, this.inline);\n    }\n\n    urls?.forEach((value) => this.removeUsage(value, this.external));\n  }\n\n  protected addUsage<T extends HTMLElement>(\n    value: string,\n    usages: Map<string, UsageRecord<T>>,\n    creator: (value: string, doc: Document) => T,\n  ): void {\n    // Attempt to get any current usage of the value\n    const record = usages.get(value);\n\n    // If existing, just increment the usage count\n    if (record) {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && record.usage === 0) {\n        // A usage count of zero indicates a preexisting server generated style.\n        // This attribute is solely used for debugging purposes of SSR style reuse.\n        record.elements.forEach((element) => element.setAttribute('ng-style-reused', ''));\n      }\n      record.usage++;\n    } else {\n      // Otherwise, create an entry to track the elements and add element for each host\n      usages.set(value, {\n        usage: 1,\n        elements: [...this.hosts].map((host) => this.addElement(host, creator(value, this.doc))),\n      });\n    }\n  }\n\n  protected removeUsage<T extends HTMLElement>(\n    value: string,\n    usages: Map<string, UsageRecord<T>>,\n  ): void {\n    // Attempt to get any current usage of the value\n    const record = usages.get(value);\n\n    // If there is a record, reduce the usage count and if no longer used,\n    // remove from DOM and delete usage record.\n    if (record) {\n      record.usage--;\n      if (record.usage <= 0) {\n        removeElements(record.elements);\n        usages.delete(value);\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    for (const [, {elements}] of [...this.inline, ...this.external]) {\n      removeElements(elements);\n    }\n    this.hosts.clear();\n  }\n\n  /**\n   * Adds a host node to the set of style hosts and adds all existing style usage to\n   * the newly added host node.\n   *\n   * This is currently only used for Shadow DOM encapsulation mode.\n   */\n  addHost(hostNode: Node): void {\n    this.hosts.add(hostNode);\n\n    // Add existing styles to new host\n    for (const [style, {elements}] of this.inline) {\n      elements.push(this.addElement(hostNode, createStyleElement(style, this.doc)));\n    }\n    for (const [url, {elements}] of this.external) {\n      elements.push(this.addElement(hostNode, createLinkElement(url, this.doc)));\n    }\n  }\n\n  removeHost(hostNode: Node): void {\n    this.hosts.delete(hostNode);\n  }\n\n  private addElement<T extends HTMLElement>(host: Node, element: T): T {\n    // Add a nonce if present\n    if (this.nonce) {\n      element.setAttribute('nonce', this.nonce);\n    }\n\n    // Add application identifier when on the server to support client-side reuse\n    if (this.isServer) {\n      element.setAttribute(APP_ID_ATTRIBUTE_NAME, this.appId);\n    }\n\n    // Insert the element into the DOM with the host node as parent\n    return host.appendChild(element);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport { DOCUMENT, isPlatformServer, ɵgetDOM as getDOM } from '@angular/common';\nimport { APP_ID, CSP_NONCE, Inject, Injectable, InjectionToken, NgZone, PLATFORM_ID, RendererStyleFlags2, ViewEncapsulation, ɵRuntimeError as RuntimeError, ɵTracingService as TracingService, Optional, } from '@angular/core';\nimport { EventManager } from './events/event_manager';\nimport { createLinkElement, SharedStylesHost } from './shared_styles_host';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./events/event_manager\";\nimport * as i2 from \"./shared_styles_host\";\nexport const NAMESPACE_URIS = {\n    'svg': 'http://www.w3.org/2000/svg',\n    'xhtml': 'http://www.w3.org/1999/xhtml',\n    'xlink': 'http://www.w3.org/1999/xlink',\n    'xml': 'http://www.w3.org/XML/1998/namespace',\n    'xmlns': 'http://www.w3.org/2000/xmlns/',\n    'math': 'http://www.w3.org/1998/Math/MathML',\n};\nconst COMPONENT_REGEX = /%COMP%/g;\nconst SOURCEMAP_URL_REGEXP = /\\/\\*#\\s*sourceMappingURL=(.+?)\\s*\\*\\//;\nconst PROTOCOL_REGEXP = /^https?:/;\nexport const COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n/**\n * The default value for the `REMOVE_STYLES_ON_COMPONENT_DESTROY` DI token.\n */\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = true;\n/**\n * A DI token that indicates whether styles\n * of destroyed components should be removed from DOM.\n *\n * By default, the value is set to `true`.\n * @publicApi\n */\nexport const REMOVE_STYLES_ON_COMPONENT_DESTROY = new InjectionToken(ngDevMode ? 'RemoveStylesOnCompDestroy' : '', {\n    providedIn: 'root',\n    factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT,\n});\nexport function shimContentAttribute(componentShortId) {\n    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nexport function shimHostAttribute(componentShortId) {\n    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nexport function shimStylesContent(compId, styles) {\n    return styles.map((s) => s.replace(COMPONENT_REGEX, compId));\n}\n/**\n * Prepends a baseHref to the `sourceMappingURL` within the provided CSS content.\n * If the `sourceMappingURL` contains an inline (encoded) map, the function skips processing.\n *\n * @note For inline stylesheets, the `sourceMappingURL` is relative to the page's origin\n * and not the provided baseHref. This function is needed as when accessing the page with a URL\n * containing two or more segments.\n * For example, if the baseHref is set to `/`, and you visit a URL like `http://localhost/foo/bar`,\n * the map would be requested from `http://localhost/foo/bar/comp.css.map` instead of what you'd expect,\n * which is `http://localhost/comp.css.map`. This behavior is corrected by modifying the `sourceMappingURL`\n * to ensure external source maps are loaded relative to the baseHref.\n *\n\n * @param baseHref - The base URL to prepend to the `sourceMappingURL`.\n * @param styles - An array of CSS content strings, each potentially containing a `sourceMappingURL`.\n * @returns The updated array of CSS content strings with modified `sourceMappingURL` values,\n * or the original content if no modification is needed.\n */\nexport function addBaseHrefToCssSourceMap(baseHref, styles) {\n    if (!baseHref) {\n        return styles;\n    }\n    const absoluteBaseHrefUrl = new URL(baseHref, 'http://localhost');\n    return styles.map((cssContent) => {\n        if (!cssContent.includes('sourceMappingURL=')) {\n            return cssContent;\n        }\n        return cssContent.replace(SOURCEMAP_URL_REGEXP, (_, sourceMapUrl) => {\n            if (sourceMapUrl[0] === '/' ||\n                sourceMapUrl.startsWith('data:') ||\n                PROTOCOL_REGEXP.test(sourceMapUrl)) {\n                return `/*# sourceMappingURL=${sourceMapUrl} */`;\n            }\n            const { pathname: resolvedSourceMapUrl } = new URL(sourceMapUrl, absoluteBaseHrefUrl);\n            return `/*# sourceMappingURL=${resolvedSourceMapUrl} */`;\n        });\n    });\n}\nexport class DomRendererFactory2 {\n    eventManager;\n    sharedStylesHost;\n    appId;\n    removeStylesOnCompDestroy;\n    doc;\n    platformId;\n    ngZone;\n    nonce;\n    tracingService;\n    rendererByCompId = new Map();\n    defaultRenderer;\n    platformIsServer;\n    constructor(eventManager, sharedStylesHost, appId, removeStylesOnCompDestroy, doc, platformId, ngZone, nonce = null, tracingService = null) {\n        this.eventManager = eventManager;\n        this.sharedStylesHost = sharedStylesHost;\n        this.appId = appId;\n        this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;\n        this.doc = doc;\n        this.platformId = platformId;\n        this.ngZone = ngZone;\n        this.nonce = nonce;\n        this.tracingService = tracingService;\n        this.platformIsServer = isPlatformServer(platformId);\n        this.defaultRenderer = new DefaultDomRenderer2(eventManager, doc, ngZone, this.platformIsServer, this.tracingService);\n    }\n    createRenderer(element, type) {\n        if (!element || !type) {\n            return this.defaultRenderer;\n        }\n        if (this.platformIsServer && type.encapsulation === ViewEncapsulation.ShadowDom) {\n            // Domino does not support shadow DOM.\n            type = { ...type, encapsulation: ViewEncapsulation.Emulated };\n        }\n        const renderer = this.getOrCreateRenderer(element, type);\n        // Renderers have different logic due to different encapsulation behaviours.\n        // Ex: for emulated, an attribute is added to the element.\n        if (renderer instanceof EmulatedEncapsulationDomRenderer2) {\n            renderer.applyToHost(element);\n        }\n        else if (renderer instanceof NoneEncapsulationDomRenderer) {\n            renderer.applyStyles();\n        }\n        return renderer;\n    }\n    getOrCreateRenderer(element, type) {\n        const rendererByCompId = this.rendererByCompId;\n        let renderer = rendererByCompId.get(type.id);\n        if (!renderer) {\n            const doc = this.doc;\n            const ngZone = this.ngZone;\n            const eventManager = this.eventManager;\n            const sharedStylesHost = this.sharedStylesHost;\n            const removeStylesOnCompDestroy = this.removeStylesOnCompDestroy;\n            const platformIsServer = this.platformIsServer;\n            const tracingService = this.tracingService;\n            switch (type.encapsulation) {\n                case ViewEncapsulation.Emulated:\n                    renderer = new EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, type, this.appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService);\n                    break;\n                case ViewEncapsulation.ShadowDom:\n                    return new ShadowDomRenderer(eventManager, sharedStylesHost, element, type, doc, ngZone, this.nonce, platformIsServer, tracingService);\n                default:\n                    renderer = new NoneEncapsulationDomRenderer(eventManager, sharedStylesHost, type, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService);\n                    break;\n            }\n            rendererByCompId.set(type.id, renderer);\n        }\n        return renderer;\n    }\n    ngOnDestroy() {\n        this.rendererByCompId.clear();\n    }\n    /**\n     * Used during HMR to clear any cached data about a component.\n     * @param componentId ID of the component that is being replaced.\n     */\n    componentReplaced(componentId) {\n        this.rendererByCompId.delete(componentId);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: DomRendererFactory2, deps: [{ token: i1.EventManager }, { token: i2.SharedStylesHost }, { token: APP_ID }, { token: REMOVE_STYLES_ON_COMPONENT_DESTROY }, { token: DOCUMENT }, { token: PLATFORM_ID }, { token: i0.NgZone }, { token: CSP_NONCE }, { token: TracingService, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: DomRendererFactory2 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.3\", ngImport: i0, type: DomRendererFactory2, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i1.EventManager }, { type: i2.SharedStylesHost }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [APP_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [REMOVE_STYLES_ON_COMPONENT_DESTROY]\n                }] }, { type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CSP_NONCE]\n                }] }, { type: i0.ɵTracingService, decorators: [{\n                    type: Inject,\n                    args: [TracingService]\n                }, {\n                    type: Optional\n                }] }] });\nclass DefaultDomRenderer2 {\n    eventManager;\n    doc;\n    ngZone;\n    platformIsServer;\n    tracingService;\n    data = Object.create(null);\n    /**\n     * By default this renderer throws when encountering synthetic properties\n     * This can be disabled for example by the AsyncAnimationRendererFactory\n     */\n    throwOnSyntheticProps = true;\n    constructor(eventManager, doc, ngZone, platformIsServer, tracingService) {\n        this.eventManager = eventManager;\n        this.doc = doc;\n        this.ngZone = ngZone;\n        this.platformIsServer = platformIsServer;\n        this.tracingService = tracingService;\n    }\n    destroy() { }\n    destroyNode = null;\n    createElement(name, namespace) {\n        if (namespace) {\n            // TODO: `|| namespace` was added in\n            // https://github.com/angular/angular/commit/2b9cc8503d48173492c29f5a271b61126104fbdb to\n            // support how Ivy passed around the namespace URI rather than short name at the time. It did\n            // not, however extend the support to other parts of the system (setAttribute, setAttribute,\n            // and the ServerRenderer). We should decide what exactly the semantics for dealing with\n            // namespaces should be and make it consistent.\n            // Related issues:\n            // https://github.com/angular/angular/issues/44028\n            // https://github.com/angular/angular/issues/44883\n            return this.doc.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n        }\n        return this.doc.createElement(name);\n    }\n    createComment(value) {\n        return this.doc.createComment(value);\n    }\n    createText(value) {\n        return this.doc.createTextNode(value);\n    }\n    appendChild(parent, newChild) {\n        const targetParent = isTemplateNode(parent) ? parent.content : parent;\n        targetParent.appendChild(newChild);\n    }\n    insertBefore(parent, newChild, refChild) {\n        if (parent) {\n            const targetParent = isTemplateNode(parent) ? parent.content : parent;\n            targetParent.insertBefore(newChild, refChild);\n        }\n    }\n    removeChild(_parent, oldChild) {\n        oldChild.remove();\n    }\n    selectRootElement(selectorOrNode, preserveContent) {\n        let el = typeof selectorOrNode === 'string' ? this.doc.querySelector(selectorOrNode) : selectorOrNode;\n        if (!el) {\n            throw new RuntimeError(-5104 /* RuntimeErrorCode.ROOT_NODE_NOT_FOUND */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `The selector \"${selectorOrNode}\" did not match any elements`);\n        }\n        if (!preserveContent) {\n            el.textContent = '';\n        }\n        return el;\n    }\n    parentNode(node) {\n        return node.parentNode;\n    }\n    nextSibling(node) {\n        return node.nextSibling;\n    }\n    setAttribute(el, name, value, namespace) {\n        if (namespace) {\n            name = namespace + ':' + name;\n            const namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.setAttributeNS(namespaceUri, name, value);\n            }\n            else {\n                el.setAttribute(name, value);\n            }\n        }\n        else {\n            el.setAttribute(name, value);\n        }\n    }\n    removeAttribute(el, name, namespace) {\n        if (namespace) {\n            const namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.removeAttributeNS(namespaceUri, name);\n            }\n            else {\n                el.removeAttribute(`${namespace}:${name}`);\n            }\n        }\n        else {\n            el.removeAttribute(name);\n        }\n    }\n    addClass(el, name) {\n        el.classList.add(name);\n    }\n    removeClass(el, name) {\n        el.classList.remove(name);\n    }\n    setStyle(el, style, value, flags) {\n        if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n            el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n        }\n        else {\n            el.style[style] = value;\n        }\n    }\n    removeStyle(el, style, flags) {\n        if (flags & RendererStyleFlags2.DashCase) {\n            // removeProperty has no effect when used on camelCased properties.\n            el.style.removeProperty(style);\n        }\n        else {\n            el.style[style] = '';\n        }\n    }\n    setProperty(el, name, value) {\n        if (el == null) {\n            return;\n        }\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            this.throwOnSyntheticProps &&\n            checkNoSyntheticProp(name, 'property');\n        el[name] = value;\n    }\n    setValue(node, value) {\n        node.nodeValue = value;\n    }\n    listen(target, event, callback, options) {\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            this.throwOnSyntheticProps &&\n            checkNoSyntheticProp(event, 'listener');\n        if (typeof target === 'string') {\n            target = getDOM().getGlobalEventTarget(this.doc, target);\n            if (!target) {\n                throw new RuntimeError(5102 /* RuntimeErrorCode.UNSUPPORTED_EVENT_TARGET */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                    `Unsupported event target ${target} for event ${event}`);\n            }\n        }\n        let wrappedCallback = this.decoratePreventDefault(callback);\n        if (this.tracingService?.wrapEventListener) {\n            wrappedCallback = this.tracingService.wrapEventListener(target, event, wrappedCallback);\n        }\n        return this.eventManager.addEventListener(target, event, wrappedCallback, options);\n    }\n    decoratePreventDefault(eventHandler) {\n        // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n        // decoratePreventDefault or is a listener added outside the Angular context so it can handle\n        // the two differently. In the first case, the special '__ngUnwrap__' token is passed to the\n        // unwrap the listener (see below).\n        return (event) => {\n            // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n            // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The\n            // debug_node can inspect the listener toString contents for the existence of this special\n            // token. Because the token is a string literal, it is ensured to not be modified by compiled\n            // code.\n            if (event === '__ngUnwrap__') {\n                return eventHandler;\n            }\n            // Run the event handler inside the ngZone because event handlers are not patched\n            // by Zone on the server. This is required only for tests.\n            const allowDefaultBehavior = this.platformIsServer\n                ? this.ngZone.runGuarded(() => eventHandler(event))\n                : eventHandler(event);\n            if (allowDefaultBehavior === false) {\n                event.preventDefault();\n            }\n            return undefined;\n        };\n    }\n}\nconst AT_CHARCODE = (() => '@'.charCodeAt(0))();\nfunction checkNoSyntheticProp(name, nameKind) {\n    if (name.charCodeAt(0) === AT_CHARCODE) {\n        throw new RuntimeError(5105 /* RuntimeErrorCode.UNEXPECTED_SYNTHETIC_PROPERTY */, `Unexpected synthetic ${nameKind} ${name} found. Please make sure that:\n  - Make sure \\`provideAnimationsAsync()\\`, \\`provideAnimations()\\` or \\`provideNoopAnimations()\\` call was added to a list of providers used to bootstrap an application.\n  - There is a corresponding animation configuration named \\`${name}\\` defined in the \\`animations\\` field of the \\`@Component\\` decorator (see https://angular.dev/api/core/Component#animations).`);\n    }\n}\nfunction isTemplateNode(node) {\n    return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n    sharedStylesHost;\n    hostEl;\n    shadowRoot;\n    constructor(eventManager, sharedStylesHost, hostEl, component, doc, ngZone, nonce, platformIsServer, tracingService) {\n        super(eventManager, doc, ngZone, platformIsServer, tracingService);\n        this.sharedStylesHost = sharedStylesHost;\n        this.hostEl = hostEl;\n        this.shadowRoot = hostEl.attachShadow({ mode: 'open' });\n        this.sharedStylesHost.addHost(this.shadowRoot);\n        let styles = component.styles;\n        if (ngDevMode) {\n            // We only do this in development, as for production users should not add CSS sourcemaps to components.\n            const baseHref = getDOM().getBaseHref(doc) ?? '';\n            styles = addBaseHrefToCssSourceMap(baseHref, styles);\n        }\n        styles = shimStylesContent(component.id, styles);\n        for (const style of styles) {\n            const styleEl = document.createElement('style');\n            if (nonce) {\n                styleEl.setAttribute('nonce', nonce);\n            }\n            styleEl.textContent = style;\n            this.shadowRoot.appendChild(styleEl);\n        }\n        // Apply any external component styles to the shadow root for the component's element.\n        // The ShadowDOM renderer uses an alternative execution path for component styles that\n        // does not use the SharedStylesHost that other encapsulation modes leverage. Much like\n        // the manual addition of embedded styles directly above, any external stylesheets\n        // must be manually added here to ensure ShadowDOM components are correctly styled.\n        // TODO: Consider reworking the DOM Renderers to consolidate style handling.\n        const styleUrls = component.getExternalStyles?.();\n        if (styleUrls) {\n            for (const styleUrl of styleUrls) {\n                const linkEl = createLinkElement(styleUrl, doc);\n                if (nonce) {\n                    linkEl.setAttribute('nonce', nonce);\n                }\n                this.shadowRoot.appendChild(linkEl);\n            }\n        }\n    }\n    nodeOrShadowRoot(node) {\n        return node === this.hostEl ? this.shadowRoot : node;\n    }\n    appendChild(parent, newChild) {\n        return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n    }\n    insertBefore(parent, newChild, refChild) {\n        return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n    }\n    removeChild(_parent, oldChild) {\n        return super.removeChild(null, oldChild);\n    }\n    parentNode(node) {\n        return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n    }\n    destroy() {\n        this.sharedStylesHost.removeHost(this.shadowRoot);\n    }\n}\nclass NoneEncapsulationDomRenderer extends DefaultDomRenderer2 {\n    sharedStylesHost;\n    removeStylesOnCompDestroy;\n    styles;\n    styleUrls;\n    constructor(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService, compId) {\n        super(eventManager, doc, ngZone, platformIsServer, tracingService);\n        this.sharedStylesHost = sharedStylesHost;\n        this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;\n        let styles = component.styles;\n        if (ngDevMode) {\n            // We only do this in development, as for production users should not add CSS sourcemaps to components.\n            const baseHref = getDOM().getBaseHref(doc) ?? '';\n            styles = addBaseHrefToCssSourceMap(baseHref, styles);\n        }\n        this.styles = compId ? shimStylesContent(compId, styles) : styles;\n        this.styleUrls = component.getExternalStyles?.(compId);\n    }\n    applyStyles() {\n        this.sharedStylesHost.addStyles(this.styles, this.styleUrls);\n    }\n    destroy() {\n        if (!this.removeStylesOnCompDestroy) {\n            return;\n        }\n        this.sharedStylesHost.removeStyles(this.styles, this.styleUrls);\n    }\n}\nclass EmulatedEncapsulationDomRenderer2 extends NoneEncapsulationDomRenderer {\n    contentAttr;\n    hostAttr;\n    constructor(eventManager, sharedStylesHost, component, appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService) {\n        const compId = appId + '-' + component.id;\n        super(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, tracingService, compId);\n        this.contentAttr = shimContentAttribute(compId);\n        this.hostAttr = shimHostAttribute(compId);\n    }\n    applyToHost(element) {\n        this.applyStyles();\n        this.setAttribute(element, this.hostAttr, '');\n    }\n    createElement(parent, name) {\n        const el = super.createElement(parent, name);\n        super.setAttribute(el, this.contentAttr, '');\n        return el;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, type ListenerOptions} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  override supports(eventName: string): boolean {\n    return true;\n  }\n\n  override addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function,\n    options?: ListenerOptions,\n  ): Function {\n    element.addEventListener(eventName, handler as EventListener, options);\n    return () => this.removeEventListener(element, eventName, handler as EventListener, options);\n  }\n\n  removeEventListener(\n    target: any,\n    eventName: string,\n    callback: Function,\n    options?: ListenerOptions,\n  ): void {\n    return target.removeEventListener(eventName, callback as EventListener, options);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, type ListenerOptions, NgZone} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n\n// The following values are here for cross-browser compatibility and to match the W3C standard\n// cf https://www.w3.org/TR/DOM-Level-3-Events-key/\nconst _keyMap: {[k: string]: string} = {\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS',\n};\n\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey,\n};\n\n/**\n * A browser plug-in that provides support for handling of key events in Angular.\n */\n@Injectable()\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  /**\n   * Reports whether a named key event is supported.\n   * @param eventName The event name to query.\n   * @return True if the named key event is supported.\n   */\n  override supports(eventName: string): boolean {\n    return KeyEventsPlugin.parseEventName(eventName) != null;\n  }\n\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n   */\n  override addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function,\n    options?: ListenerOptions,\n  ): Function {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName)!;\n\n    const outsideHandler = KeyEventsPlugin.eventCallback(\n      parsedEvent['fullKey'],\n      handler,\n      this.manager.getZone(),\n    );\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler, options);\n    });\n  }\n\n  /**\n   * Parses the user provided full keyboard event definition and normalizes it for\n   * later internal use. It ensures the string is all lowercase, converts special\n   * characters to a standard spelling, and orders all the values consistently.\n   *\n   * @param eventName The name of the key event to listen for.\n   * @returns an object with the full, normalized string, and the dom event name\n   * or null in the case when the event doesn't match a keyboard event.\n   */\n  static parseEventName(eventName: string): {fullKey: string; domEventName: string} | null {\n    const parts: string[] = eventName.toLowerCase().split('.');\n\n    const domEventName = parts.shift();\n    if (parts.length === 0 || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop()!);\n\n    let fullKey = '';\n    let codeIX = parts.indexOf('code');\n    if (codeIX > -1) {\n      parts.splice(codeIX, 1);\n      fullKey = 'code.';\n    }\n    MODIFIER_KEYS.forEach((modifierName) => {\n      const index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.\n    //       The code must remain in the `result['domEventName']` form.\n    // return {domEventName, fullKey};\n    const result: {fullKey: string; domEventName: string} = {} as any;\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n\n  /**\n   * Determines whether the actual keys pressed match the configured key code string.\n   * The `fullKeyCode` event is normalized in the `parseEventName` method when the\n   * event is attached to the DOM during the `addEventListener` call. This is unseen\n   * by the end user and is normalized for internal consistency and parsing.\n   *\n   * @param event The keyboard event.\n   * @param fullKeyCode The normalized user defined expected key event string\n   * @returns boolean.\n   */\n  static matchEventFullKeyCode(event: KeyboardEvent, fullKeyCode: string): boolean {\n    let keycode = _keyMap[event.key] || event.key;\n    let key = '';\n    if (fullKeyCode.indexOf('code.') > -1) {\n      keycode = event.code;\n      key = 'code.';\n    }\n    // the keycode could be unidentified so we have to check here\n    if (keycode == null || !keycode) return false;\n    keycode = keycode.toLowerCase();\n    if (keycode === ' ') {\n      keycode = 'space'; // for readability\n    } else if (keycode === '.') {\n      keycode = 'dot'; // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach((modifierName) => {\n      if (modifierName !== keycode) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          key += modifierName + '.';\n        }\n      }\n    });\n    key += keycode;\n    return key === fullKeyCode;\n  }\n\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n  static eventCallback(fullKey: string, handler: Function, zone: NgZone): Function {\n    return (event: KeyboardEvent) => {\n      if (KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    return keyName === 'esc' ? 'escape' : keyName;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  CommonModule,\n  DOCUMENT,\n  XhrFactory,\n  ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID,\n} from '@angular/common';\nimport {\n  ApplicationConfig as ApplicationConfigFromCore,\n  ApplicationModule,\n  ApplicationRef,\n  createPlatformFactory,\n  ErrorHandler,\n  InjectionToken,\n  NgModule,\n  NgZone,\n  PLATFORM_ID,\n  PLATFORM_INITIALIZER,\n  platformCore,\n  PlatformRef,\n  Provider,\n  RendererFactory2,\n  StaticProvider,\n  Testability,\n  TestabilityRegistry,\n  Type,\n  ɵINJECTOR_SCOPE as INJECTOR_SCOPE,\n  ɵinternalCreateApplication as internalCreateApplication,\n  ɵRuntimeError as RuntimeError,\n  ɵsetDocument,\n  ɵTESTABILITY as TESTABILITY,\n  ɵTESTABILITY_GETTER as TESTABILITY_GETTER,\n  inject,\n} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {BrowserGetTestability} from './browser/testability';\nimport {BrowserXhr} from './browser/xhr';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {SharedStylesHost} from './dom/shared_styles_host';\nimport {RuntimeErrorCode} from './errors';\n\n/**\n * Set of config options available during the application bootstrap operation.\n *\n * @publicApi\n *\n * @deprecated\n * `ApplicationConfig` has moved, please import `ApplicationConfig` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\ntype ApplicationConfig = ApplicationConfigFromCore;\nexport {ApplicationConfig};\n\n/**\n * Bootstraps an instance of an Angular application and renders a standalone component as the\n * application's root component. More information about standalone components can be found in [this\n * guide](guide/components/importing).\n *\n * @usageNotes\n * The root component passed into this function *must* be a standalone one (should have the\n * `standalone: true` flag in the `@Component` decorator config).\n *\n * ```angular-ts\n * @Component({\n *   standalone: true,\n *   template: 'Hello world!'\n * })\n * class RootComponent {}\n *\n * const appRef: ApplicationRef = await bootstrapApplication(RootComponent);\n * ```\n *\n * You can add the list of providers that should be available in the application injector by\n * specifying the `providers` field in an object passed as the second argument:\n *\n * ```ts\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     {provide: BACKEND_URL, useValue: 'https://yourdomain.com/api'}\n *   ]\n * });\n * ```\n *\n * The `importProvidersFrom` helper method can be used to collect all providers from any\n * existing NgModule (and transitively from all NgModules that it imports):\n *\n * ```ts\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(SomeNgModule)\n *   ]\n * });\n * ```\n *\n * Note: the `bootstrapApplication` method doesn't include [Testability](api/core/Testability) by\n * default. You can add [Testability](api/core/Testability) by getting the list of necessary\n * providers using `provideProtractorTestingSupport()` function and adding them into the `providers`\n * array, for example:\n *\n * ```ts\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, {providers: [provideProtractorTestingSupport()]});\n * ```\n *\n * @param rootComponent A reference to a standalone component that should be rendered.\n * @param options Extra configuration for the bootstrap operation, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nexport function bootstrapApplication(\n  rootComponent: Type<unknown>,\n  options?: ApplicationConfig,\n): Promise<ApplicationRef> {\n  return internalCreateApplication({rootComponent, ...createProvidersConfig(options)});\n}\n\n/**\n * Create an instance of an Angular application without bootstrapping any components. This is useful\n * for the situation where one wants to decouple application environment creation (a platform and\n * associated injectors) from rendering components on a screen. Components can be subsequently\n * bootstrapped on the returned `ApplicationRef`.\n *\n * @param options Extra configuration for the application environment, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nexport function createApplication(options?: ApplicationConfig) {\n  return internalCreateApplication(createProvidersConfig(options));\n}\n\nfunction createProvidersConfig(options?: ApplicationConfig) {\n  return {\n    appProviders: [...BROWSER_MODULE_PROVIDERS, ...(options?.providers ?? [])],\n    platformProviders: INTERNAL_BROWSER_PLATFORM_PROVIDERS,\n  };\n}\n\n/**\n * Returns a set of providers required to setup [Testability](api/core/Testability) for an\n * application bootstrapped using the `bootstrapApplication` function. The set of providers is\n * needed to support testing an application with Protractor (which relies on the Testability APIs\n * to be present).\n *\n * @returns An array of providers required to setup Testability for an application and make it\n *     available for testing using Protractor.\n *\n * @publicApi\n */\nexport function provideProtractorTestingSupport(): Provider[] {\n  // Return a copy to prevent changes to the original array in case any in-place\n  // alterations are performed to the `provideProtractorTestingSupport` call results in app\n  // code.\n  return [...TESTABILITY_PROVIDERS];\n}\n\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n}\n\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n\nexport function _document(): any {\n  // Tell ivy about the global document\n  ɵsetDocument(document);\n  return document;\n}\n\nexport const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n];\n\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\nexport const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef =\n  createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n\n/**\n * Internal marker to signal whether providers from the `BrowserModule` are already present in DI.\n * This is needed to avoid loading `BrowserModule` providers twice. We can't rely on the\n * `BrowserModule` presence itself, since the standalone-based bootstrap just imports\n * `BrowserModule` providers without referencing the module itself.\n */\nconst BROWSER_MODULE_PROVIDERS_MARKER = new InjectionToken(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'BrowserModule Providers Marker' : '',\n);\n\nconst TESTABILITY_PROVIDERS = [\n  {\n    provide: TESTABILITY_GETTER,\n    useClass: BrowserGetTestability,\n    deps: [],\n  },\n  {\n    provide: TESTABILITY,\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER],\n  },\n  {\n    provide: Testability, // Also provide as `Testability` for backwards-compatibility.\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER],\n  },\n];\n\nconst BROWSER_MODULE_PROVIDERS: Provider[] = [\n  {provide: INJECTOR_SCOPE, useValue: 'root'},\n  {provide: ErrorHandler, useFactory: errorHandler, deps: []},\n  {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: DomEventsPlugin,\n    multi: true,\n    deps: [DOCUMENT],\n  },\n  {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT]},\n  DomRendererFactory2,\n  SharedStylesHost,\n  EventManager,\n  {provide: RendererFactory2, useExisting: DomRendererFactory2},\n  {provide: XhrFactory, useClass: BrowserXhr, deps: []},\n  typeof ngDevMode === 'undefined' || ngDevMode\n    ? {provide: BROWSER_MODULE_PROVIDERS_MARKER, useValue: true}\n    : [],\n];\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],\n  exports: [CommonModule, ApplicationModule],\n})\nexport class BrowserModule {\n  constructor() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const providersAlreadyPresent = inject(BROWSER_MODULE_PROVIDERS_MARKER, {\n        optional: true,\n        skipSelf: true,\n      });\n\n      if (providersAlreadyPresent) {\n        throw new RuntimeError(\n          RuntimeErrorCode.BROWSER_MODULE_ALREADY_LOADED,\n          `Providers from the \\`BrowserModule\\` have already been loaded. If you need access ` +\n            `to common directives such as NgIf and NgFor, import the \\`CommonModule\\` instead.`,\n        );\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class Title {\n  constructor(@Inject(DOCUMENT) private _doc: any) {}\n  /**\n   * Get the title of the current HTML document.\n   */\n  getTitle(): string {\n    return this._doc.title;\n  }\n\n  /**\n   * Set the title of the current HTML document.\n   * @param newTitle\n   */\n  setTitle(newTitle: string) {\n    this._doc.title = newTitle || '';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  forwardRef,\n  Inject,\n  Injectable,\n  Sanitizer,\n  SecurityContext,\n  ɵ_sanitizeHtml as _sanitizeHtml,\n  ɵ_sanitizeUrl as _sanitizeUrl,\n  ɵallowSanitizationBypassAndThrow as allowSanitizationBypassOrThrow,\n  ɵbypassSanitizationTrustHtml as bypassSanitizationTrustHtml,\n  ɵbypassSanitizationTrustResourceUrl as bypassSanitizationTrustResourceUrl,\n  ɵbypassSanitizationTrustScript as bypassSanitizationTrustScript,\n  ɵbypassSanitizationTrustStyle as bypassSanitizationTrustStyle,\n  ɵbypassSanitizationTrustUrl as bypassSanitizationTrustUrl,\n  ɵBypassType as BypassType,\n  ɵRuntimeError as RuntimeError,\n  ɵunwrapSafeValue as unwrapSafeValue,\n  ɵXSS_SECURITY_URL as XSS_SECURITY_URL,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport {SecurityContext};\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useExisting: forwardRef(() => DomSanitizerImpl)})\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Gets a safe value from either a known safe value or a value with unknown safety.\n   *\n   * If the given value is already a `SafeValue`, this method returns the unwrapped value.\n   * If the security context is HTML and the given value is a plain string, this method\n   * sanitizes the string, removing any potentially unsafe content.\n   * For any other security context, this method throws an error if provided\n   * with a plain string.\n   */\n  abstract sanitize(context: SecurityContext, value: SafeValue | string | null): string | null;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\n@Injectable({providedIn: 'root'})\nexport class DomSanitizerImpl extends DomSanitizer {\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n  }\n\n  override sanitize(ctx: SecurityContext, value: SafeValue | string | null): string | null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value as string;\n      case SecurityContext.HTML:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Html)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeHtml(this._doc, String(value)).toString();\n      case SecurityContext.STYLE:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Style)) {\n          return unwrapSafeValue(value);\n        }\n        return value as string;\n      case SecurityContext.SCRIPT:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Script)) {\n          return unwrapSafeValue(value);\n        }\n        throw new RuntimeError(\n          RuntimeErrorCode.SANITIZATION_UNSAFE_SCRIPT,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            'unsafe value used in a script context',\n        );\n      case SecurityContext.URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Url)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.ResourceUrl)) {\n          return unwrapSafeValue(value);\n        }\n        throw new RuntimeError(\n          RuntimeErrorCode.SANITIZATION_UNSAFE_RESOURCE_URL,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`,\n        );\n      default:\n        throw new RuntimeError(\n          RuntimeErrorCode.SANITIZATION_UNEXPECTED_CTX,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            `Unexpected SecurityContext ${ctx} (see ${XSS_SECURITY_URL})`,\n        );\n    }\n  }\n\n  override bypassSecurityTrustHtml(value: string): SafeHtml {\n    return bypassSanitizationTrustHtml(value);\n  }\n  override bypassSecurityTrustStyle(value: string): SafeStyle {\n    return bypassSanitizationTrustStyle(value);\n  }\n  override bypassSecurityTrustScript(value: string): SafeScript {\n    return bypassSanitizationTrustScript(value);\n  }\n  override bypassSecurityTrustUrl(value: string): SafeUrl {\n    return bypassSanitizationTrustUrl(value);\n  }\n  override bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return bypassSanitizationTrustResourceUrl(value);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, ElementRef, InjectionToken, Renderer2} from '@angular/core';\n\n/**\n * @description\n * Defines an interface that acts as a bridge between the Angular forms API and a\n * native element in the DOM.\n *\n * Implement this interface to create a custom form control directive\n * that integrates with Angular forms.\n *\n * @see {@link DefaultValueAccessor}\n *\n * @publicApi\n */\nexport interface ControlValueAccessor {\n  /**\n   * @description\n   * Writes a new value to the element.\n   *\n   * This method is called by the forms API to write to the view when programmatic\n   * changes from model to view are requested.\n   *\n   * @usageNotes\n   * ### Write a value to the element\n   *\n   * The following example writes a value to the native DOM element.\n   *\n   * ```ts\n   * writeValue(value: any): void {\n   *   this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n   * }\n   * ```\n   *\n   * @param obj The new value for the element\n   */\n  writeValue(obj: any): void;\n\n  /**\n   * @description\n   * Registers a callback function that is called when the control's value\n   * changes in the UI.\n   *\n   * This method is called by the forms API on initialization to update the form\n   * model when values propagate from the view to the model.\n   *\n   * When implementing the `registerOnChange` method in your own value accessor,\n   * save the given function so your class calls it at the appropriate time.\n   *\n   * @usageNotes\n   * ### Store the change function\n   *\n   * The following example stores the provided function as an internal method.\n   *\n   * ```ts\n   * registerOnChange(fn: (_: any) => void): void {\n   *   this._onChange = fn;\n   * }\n   * ```\n   *\n   * When the value changes in the UI, call the registered\n   * function to allow the forms API to update itself:\n   *\n   * ```ts\n   * host: {\n   *    '(change)': '_onChange($event.target.value)'\n   * }\n   * ```\n   *\n   * @param fn The callback function to register\n   */\n  registerOnChange(fn: any): void;\n\n  /**\n   * @description\n   * Registers a callback function that is called by the forms API on initialization\n   * to update the form model on blur.\n   *\n   * When implementing `registerOnTouched` in your own value accessor, save the given\n   * function so your class calls it when the control should be considered\n   * blurred or \"touched\".\n   *\n   * @usageNotes\n   * ### Store the callback function\n   *\n   * The following example stores the provided function as an internal method.\n   *\n   * ```ts\n   * registerOnTouched(fn: any): void {\n   *   this._onTouched = fn;\n   * }\n   * ```\n   *\n   * On blur (or equivalent), your class should call the registered function to allow\n   * the forms API to update itself:\n   *\n   * ```ts\n   * host: {\n   *    '(blur)': '_onTouched()'\n   * }\n   * ```\n   *\n   * @param fn The callback function to register\n   */\n  registerOnTouched(fn: any): void;\n\n  /**\n   * @description\n   * Function that is called by the forms API when the control status changes to\n   * or from 'DISABLED'. Depending on the status, it enables or disables the\n   * appropriate DOM element.\n   *\n   * @usageNotes\n   * The following is an example of writing the disabled property to a native DOM element:\n   *\n   * ```ts\n   * setDisabledState(isDisabled: boolean): void {\n   *   this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n   * }\n   * ```\n   *\n   * @param isDisabled The disabled status to set on the element\n   */\n  setDisabledState?(isDisabled: boolean): void;\n}\n\n/**\n * Base class for all ControlValueAccessor classes defined in Forms package.\n * Contains common logic and utility functions.\n *\n * Note: this is an *internal-only* class and should not be extended or used directly in\n * applications code.\n */\n@Directive()\nexport class BaseControlValueAccessor {\n  /**\n   * The registered callback function called when a change or input event occurs on the input\n   * element.\n   * @nodoc\n   */\n  onChange = (_: any) => {};\n\n  /**\n   * The registered callback function called when a blur event occurs on the input element.\n   * @nodoc\n   */\n  onTouched = () => {};\n\n  constructor(\n    private _renderer: Renderer2,\n    private _elementRef: ElementRef,\n  ) {}\n\n  /**\n   * Helper method that sets a property on a target element using the current Renderer\n   * implementation.\n   * @nodoc\n   */\n  protected setProperty(key: string, value: any): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, key, value);\n  }\n\n  /**\n   * Registers a function called when the control is touched.\n   * @nodoc\n   */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Registers a function called when the control value changes.\n   * @nodoc\n   */\n  registerOnChange(fn: (_: any) => {}): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Sets the \"disabled\" property on the range input element.\n   * @nodoc\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.setProperty('disabled', isDisabled);\n  }\n}\n\n/**\n * Base class for all built-in ControlValueAccessor classes (except DefaultValueAccessor, which is\n * used in case no other CVAs can be found). We use this class to distinguish between default CVA,\n * built-in CVAs and custom CVAs, so that Forms logic can recognize built-in CVAs and treat custom\n * ones with higher priority (when both built-in and custom CVAs are present).\n *\n * Note: this is an *internal-only* class and should not be extended or used directly in\n * applications code.\n */\n@Directive()\nexport class BuiltInControlValueAccessor extends BaseControlValueAccessor {}\n\n/**\n * Used to provide a `ControlValueAccessor` for form controls.\n *\n * See `DefaultValueAccessor` for how to implement one.\n *\n * @publicApi\n */\nexport const NG_VALUE_ACCESSOR = new InjectionToken<ReadonlyArray<ControlValueAccessor>>(\n  ngDevMode ? 'NgValueAccessor' : '',\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Optional,\n  Provider,\n  Renderer2,\n} from '@angular/core';\n\nimport {\n  BaseControlValueAccessor,\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n} from './control_value_accessor';\n\nexport const DEFAULT_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DefaultValueAccessor),\n  multi: true,\n};\n\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid(): boolean {\n  const userAgent = getDOM() ? getDOM().getUserAgent() : '';\n  return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n\n/**\n * @description\n * Provide this token to control if form directives buffer IME input until\n * the \"compositionend\" event occurs.\n * @publicApi\n */\nexport const COMPOSITION_BUFFER_MODE = new InjectionToken<boolean>(\n  ngDevMode ? 'CompositionEventMode' : '',\n);\n\n/**\n * The default `ControlValueAccessor` for writing a value and listening to changes on input\n * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n *\n * @usageNotes\n *\n * ### Using the default value accessor\n *\n * The following example shows how to use an input element that activates the default value accessor\n * (in this case, a text field).\n *\n * ```ts\n * const firstNameControl = new FormControl();\n * ```\n *\n * ```html\n * <input type=\"text\" [formControl]=\"firstNameControl\">\n * ```\n *\n * This value accessor is used by default for `<input type=\"text\">` and `<textarea>` elements, but\n * you could also use it for custom components that have similar behavior and do not require special\n * processing. In order to attach the default value accessor to a custom element, add the\n * `ngDefaultControl` attribute as shown below.\n *\n * ```html\n * <custom-input-component ngDefaultControl [(ngModel)]=\"value\"></custom-input-component>\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n    'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n  // TODO: vsavkin replace the above selector with the one below it once\n  // https://github.com/angular/angular/issues/3011 is implemented\n  // selector: '[ngModel],[formControl],[formControlName]',\n  host: {\n    '(input)': '$any(this)._handleInput($event.target.value)',\n    '(blur)': 'onTouched()',\n    '(compositionstart)': '$any(this)._compositionStart()',\n    '(compositionend)': '$any(this)._compositionEnd($event.target.value)',\n  },\n  providers: [DEFAULT_VALUE_ACCESSOR],\n  standalone: false,\n})\nexport class DefaultValueAccessor extends BaseControlValueAccessor implements ControlValueAccessor {\n  /** Whether the user is creating a composition string (IME events). */\n  private _composing = false;\n\n  constructor(\n    renderer: Renderer2,\n    elementRef: ElementRef,\n    @Optional() @Inject(COMPOSITION_BUFFER_MODE) private _compositionMode: boolean,\n  ) {\n    super(renderer, elementRef);\n    if (this._compositionMode == null) {\n      this._compositionMode = !_isAndroid();\n    }\n  }\n\n  /**\n   * Sets the \"value\" property on the input element.\n   * @nodoc\n   */\n  writeValue(value: any): void {\n    const normalizedValue = value == null ? '' : value;\n    this.setProperty('value', normalizedValue);\n  }\n\n  /** @internal */\n  _handleInput(value: any): void {\n    if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n      this.onChange(value);\n    }\n  }\n\n  /** @internal */\n  _compositionStart(): void {\n    this._composing = true;\n  }\n\n  /** @internal */\n  _compositionEnd(value: any): void {\n    this._composing = false;\n    this._compositionMode && this.onChange(value);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  InjectionToken,\n  ɵisPromise as isPromise,\n  ɵisSubscribable as isSubscribable,\n  ɵRuntimeError as RuntimeError,\n} from '@angular/core';\nimport {forkJoin, from, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport type {\n  AsyncValidator,\n  AsyncValidatorFn,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n} from './directives/validators';\nimport {RuntimeErrorCode} from './errors';\nimport type {AbstractControl} from './model/abstract_model';\n\nfunction isEmptyInputValue(value: unknown): boolean {\n  return value == null || lengthOrSize(value) === 0;\n}\n\n/**\n * Extract the length property in case it's an array or a string.\n * Extract the size property in case it's a set.\n * Return null else.\n * @param value Either an array, set or undefined.\n */\nfunction lengthOrSize(value: unknown): number | null {\n  // non-strict comparison is intentional, to check for both `null` and `undefined` values\n  if (value == null) {\n    return null;\n  } else if (Array.isArray(value) || typeof value === 'string') {\n    return value.length;\n  } else if (value instanceof Set) {\n    return value.size;\n  }\n\n  return null;\n}\n\n/**\n * @description\n * An `InjectionToken` for registering additional synchronous validators used with\n * `AbstractControl`s.\n *\n * @see {@link NG_ASYNC_VALIDATORS}\n *\n * @usageNotes\n *\n * ### Providing a custom validator\n *\n * The following example registers a custom validator directive. Adding the validator to the\n * existing collection of validators requires the `multi: true` option.\n *\n * ```ts\n * @Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return { 'custom': true };\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport const NG_VALIDATORS = new InjectionToken<ReadonlyArray<Validator | Function>>(\n  ngDevMode ? 'NgValidators' : '',\n);\n\n/**\n * @description\n * An `InjectionToken` for registering additional asynchronous validators used with\n * `AbstractControl`s.\n *\n * @see {@link NG_VALIDATORS}\n *\n * @usageNotes\n *\n * ### Provide a custom async validator directive\n *\n * The following example implements the `AsyncValidator` interface to create an\n * async validator directive with a custom error key.\n *\n * ```ts\n * @Directive({\n *   selector: '[customAsyncValidator]',\n *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:\n * true}]\n * })\n * class CustomAsyncValidatorDirective implements AsyncValidator {\n *   validate(control: AbstractControl): Promise<ValidationErrors|null> {\n *     return Promise.resolve({'custom': true});\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport const NG_ASYNC_VALIDATORS = new InjectionToken<ReadonlyArray<Validator | Function>>(\n  ngDevMode ? 'NgAsyncValidators' : '',\n);\n\n/**\n * A regular expression that matches valid e-mail addresses.\n *\n * At a high level, this regexp matches e-mail addresses of the format `local-part@tld`, where:\n * - `local-part` consists of one or more of the allowed characters (alphanumeric and some\n *   punctuation symbols).\n * - `local-part` cannot begin or end with a period (`.`).\n * - `local-part` cannot be longer than 64 characters.\n * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or\n *   `foo.com`.\n * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and\n *   periods (`.`)).\n * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).\n * - A `label` cannot be longer than 63 characters.\n * - The whole address cannot be longer than 254 characters.\n *\n * ## Implementation background\n *\n * This regexp was ported over from AngularJS (see there for git history):\n * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27\n * It is based on the\n * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n * lengths of different parts of the address). The main differences from the WHATWG version are:\n *   - Disallow `local-part` to begin or end with a period (`.`).\n *   - Disallow `local-part` length to exceed 64 characters.\n *   - Disallow total address length to exceed 254 characters.\n *\n * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.\n */\nconst EMAIL_REGEXP =\n  /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\n/**\n * @description\n * Provides a set of built-in validators that can be used by form controls.\n *\n * A validator is a function that processes a `FormControl` or collection of\n * controls and returns an error map or null. A null map means that validation has passed.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @publicApi\n */\nexport class Validators {\n  /**\n   * @description\n   * Validator that requires the control's value to be greater than or equal to the provided number.\n   *\n   * @usageNotes\n   *\n   * ### Validate against a minimum of 3\n   *\n   * ```ts\n   * const control = new FormControl(2, Validators.min(3));\n   *\n   * console.log(control.errors); // {min: {min: 3, actual: 2}}\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `min` property if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static min(min: number): ValidatorFn {\n    return minValidator(min);\n  }\n\n  /**\n   * @description\n   * Validator that requires the control's value to be less than or equal to the provided number.\n   *\n   * @usageNotes\n   *\n   * ### Validate against a maximum of 15\n   *\n   * ```ts\n   * const control = new FormControl(16, Validators.max(15));\n   *\n   * console.log(control.errors); // {max: {max: 15, actual: 16}}\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `max` property if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static max(max: number): ValidatorFn {\n    return maxValidator(max);\n  }\n\n  /**\n   * @description\n   * Validator that requires the control have a non-empty value.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field is non-empty\n   *\n   * ```ts\n   * const control = new FormControl('', Validators.required);\n   *\n   * console.log(control.errors); // {required: true}\n   * ```\n   *\n   * @returns An error map with the `required` property\n   * if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static required(control: AbstractControl): ValidationErrors | null {\n    return requiredValidator(control);\n  }\n\n  /**\n   * @description\n   * Validator that requires the control's value be true. This validator is commonly\n   * used for required checkboxes.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field value is true\n   *\n   * ```ts\n   * const control = new FormControl('some value', Validators.requiredTrue);\n   *\n   * console.log(control.errors); // {required: true}\n   * ```\n   *\n   * @returns An error map that contains the `required` property\n   * set to `true` if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static requiredTrue(control: AbstractControl): ValidationErrors | null {\n    return requiredTrueValidator(control);\n  }\n\n  /**\n   * @description\n   * Validator that requires the control's value pass an email validation test.\n   *\n   * Tests the value using a [regular\n   * expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n   * pattern suitable for common use cases. The pattern is based on the definition of a valid email\n   * address in the [WHATWG HTML\n   * specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n   * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n   * lengths of different parts of the address).\n   *\n   * The differences from the WHATWG version include:\n   * - Disallow `local-part` (the part before the `@` symbol) to begin or end with a period (`.`).\n   * - Disallow `local-part` to be longer than 64 characters.\n   * - Disallow the whole address to be longer than 254 characters.\n   *\n   * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to\n   * validate the value against a different pattern.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field matches a valid email pattern\n   *\n   * ```ts\n   * const control = new FormControl('bad@', Validators.email);\n   *\n   * console.log(control.errors); // {email: true}\n   * ```\n   *\n   * @returns An error map with the `email` property\n   * if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static email(control: AbstractControl): ValidationErrors | null {\n    return emailValidator(control);\n  }\n\n  /**\n   * @description\n   * Validator that requires the number of items in the control's value to be greater than or equal\n   * to the provided minimum length. This validator is also provided by default if you use\n   * the HTML5 `minlength` attribute. Note that the `minLength` validator is intended to be used\n   * only for types that have a numeric `length` or `size` property, such as strings, arrays or\n   * sets. The `minLength` validator logic is also not invoked for values when their `length` or\n   * `size` property is 0 (for example in case of an empty string or an empty array), to support\n   * optional controls. You can use the standard `required` validator if empty values should not be\n   * considered valid.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field has a minimum of 3 characters\n   *\n   * ```ts\n   * const control = new FormControl('ng', Validators.minLength(3));\n   *\n   * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n   * ```\n   *\n   * ```html\n   * <input minlength=\"5\">\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `minlength` property if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static minLength(minLength: number): ValidatorFn {\n    return minLengthValidator(minLength);\n  }\n\n  /**\n   * @description\n   * Validator that requires the number of items in the control's value to be less than or equal\n   * to the provided maximum length. This validator is also provided by default if you use\n   * the HTML5 `maxlength` attribute. Note that the `maxLength` validator is intended to be used\n   * only for types that have a numeric `length` or `size` property, such as strings, arrays or\n   * sets.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field has maximum of 5 characters\n   *\n   * ```ts\n   * const control = new FormControl('Angular', Validators.maxLength(5));\n   *\n   * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n   * ```\n   *\n   * ```html\n   * <input maxlength=\"5\">\n   * ```\n   *\n   * @returns A validator function that returns an error map with the\n   * `maxlength` property if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static maxLength(maxLength: number): ValidatorFn {\n    return maxLengthValidator(maxLength);\n  }\n\n  /**\n   * @description\n   * Validator that requires the control's value to match a regex pattern. This validator is also\n   * provided by default if you use the HTML5 `pattern` attribute.\n   *\n   * @usageNotes\n   *\n   * ### Validate that the field only contains letters or spaces\n   *\n   * ```ts\n   * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\n   *\n   * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\n   * ```\n   *\n   * ```html\n   * <input pattern=\"[a-zA-Z ]*\">\n   * ```\n   *\n   * ### Pattern matching with the global or sticky flag\n   *\n   * `RegExp` objects created with the `g` or `y` flags that are passed into `Validators.pattern`\n   * can produce different results on the same input when validations are run consecutively. This is\n   * due to how the behavior of `RegExp.prototype.test` is\n   * specified in [ECMA-262](https://tc39.es/ecma262/#sec-regexpbuiltinexec)\n   * (`RegExp` preserves the index of the last match when the global or sticky flag is used).\n   * Due to this behavior, it is recommended that when using\n   * `Validators.pattern` you **do not** pass in a `RegExp` object with either the global or sticky\n   * flag enabled.\n   *\n   * ```ts\n   * // Not recommended (since the `g` flag is used)\n   * const controlOne = new FormControl('1', Validators.pattern(/foo/g));\n   *\n   * // Good\n   * const controlTwo = new FormControl('1', Validators.pattern(/foo/));\n   * ```\n   *\n   * @param pattern A regular expression to be used as is to test the values, or a string.\n   * If a string is passed, the `^` character is prepended and the `$` character is\n   * appended to the provided string (if not already present), and the resulting regular\n   * expression is used to test the values.\n   *\n   * @returns A validator function that returns an error map with the\n   * `pattern` property if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static pattern(pattern: string | RegExp): ValidatorFn {\n    return patternValidator(pattern);\n  }\n\n  /**\n   * @description\n   * Validator that performs no operation.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static nullValidator(control: AbstractControl): ValidationErrors | null {\n    return nullValidator(control);\n  }\n\n  /**\n   * @description\n   * Compose multiple validators into a single function that returns the union\n   * of the individual error maps for the provided control.\n   *\n   * @returns A validator function that returns an error map with the\n   * merged error maps of the validators if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static compose(validators: null): null;\n  static compose(validators: (ValidatorFn | null | undefined)[]): ValidatorFn | null;\n  static compose(validators: (ValidatorFn | null | undefined)[] | null): ValidatorFn | null {\n    return compose(validators);\n  }\n\n  /**\n   * @description\n   * Compose multiple async validators into a single function that returns the union\n   * of the individual error objects for the provided control.\n   *\n   * @returns A validator function that returns an error map with the\n   * merged error objects of the async validators if the validation check fails, otherwise `null`.\n   *\n   * @see {@link /api/forms/AbstractControl#updateValueAndValidity updateValueAndValidity}\n   *\n   */\n  static composeAsync(validators: (AsyncValidatorFn | null)[]): AsyncValidatorFn | null {\n    return composeAsync(validators);\n  }\n}\n\n/**\n * Validator that requires the control's value to be greater than or equal to the provided number.\n * See `Validators.min` for additional information.\n */\nexport function minValidator(min: number): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    if (control.value == null || min == null) {\n      return null; // don't validate empty values to allow optional controls\n    }\n    const value = parseFloat(control.value);\n    // Controls with NaN values after parsing should be treated as not having a\n    // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n    return !isNaN(value) && value < min ? {'min': {'min': min, 'actual': control.value}} : null;\n  };\n}\n\n/**\n * Validator that requires the control's value to be less than or equal to the provided number.\n * See `Validators.max` for additional information.\n */\nexport function maxValidator(max: number): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    if (control.value == null || max == null) {\n      return null; // don't validate empty values to allow optional controls\n    }\n    const value = parseFloat(control.value);\n    // Controls with NaN values after parsing should be treated as not having a\n    // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n    return !isNaN(value) && value > max ? {'max': {'max': max, 'actual': control.value}} : null;\n  };\n}\n\n/**\n * Validator that requires the control have a non-empty value.\n * See `Validators.required` for additional information.\n */\nexport function requiredValidator(control: AbstractControl): ValidationErrors | null {\n  return isEmptyInputValue(control.value) ? {'required': true} : null;\n}\n\n/**\n * Validator that requires the control's value be true. This validator is commonly\n * used for required checkboxes.\n * See `Validators.requiredTrue` for additional information.\n */\nexport function requiredTrueValidator(control: AbstractControl): ValidationErrors | null {\n  return control.value === true ? null : {'required': true};\n}\n\n/**\n * Validator that requires the control's value pass an email validation test.\n * See `Validators.email` for additional information.\n */\nexport function emailValidator(control: AbstractControl): ValidationErrors | null {\n  if (isEmptyInputValue(control.value)) {\n    return null; // don't validate empty values to allow optional controls\n  }\n  return EMAIL_REGEXP.test(control.value) ? null : {'email': true};\n}\n\n/**\n * Validator that requires the number of items in the control's value to be greater than or equal\n * to the provided minimum length. See `Validators.minLength` for additional information.\n *\n * The minLengthValidator respects every length property in an object, regardless of whether it's an array.\n * For example, the object {id: 1, length: 0, width: 0} should be validated.\n */\nexport function minLengthValidator(minLength: number): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    const length = control.value?.length ?? lengthOrSize(control.value);\n    if (length === null || length === 0) {\n      // don't validate empty values to allow optional controls\n      // don't validate values without `length` or `size` property\n      return null;\n    }\n\n    return length < minLength\n      ? {'minlength': {'requiredLength': minLength, 'actualLength': length}}\n      : null;\n  };\n}\n\n/**\n * Validator that requires the number of items in the control's value to be less than or equal\n * to the provided maximum length. See `Validators.maxLength` for additional information.\n *\n * The maxLengthValidator respects every length property in an object, regardless of whether it's an array.\n * For example, the object {id: 1, length: 0, width: 0} should be validated.\n */\nexport function maxLengthValidator(maxLength: number): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    const length = control.value?.length ?? lengthOrSize(control.value);\n    if (length !== null && length > maxLength) {\n      return {'maxlength': {'requiredLength': maxLength, 'actualLength': length}};\n    }\n    return null;\n  };\n}\n\n/**\n * Validator that requires the control's value to match a regex pattern.\n * See `Validators.pattern` for additional information.\n */\nexport function patternValidator(pattern: string | RegExp): ValidatorFn {\n  if (!pattern) return nullValidator;\n  let regex: RegExp;\n  let regexStr: string;\n  if (typeof pattern === 'string') {\n    regexStr = '';\n\n    if (pattern.charAt(0) !== '^') regexStr += '^';\n\n    regexStr += pattern;\n\n    if (pattern.charAt(pattern.length - 1) !== '$') regexStr += '$';\n\n    regex = new RegExp(regexStr);\n  } else {\n    regexStr = pattern.toString();\n    regex = pattern;\n  }\n  return (control: AbstractControl): ValidationErrors | null => {\n    if (isEmptyInputValue(control.value)) {\n      return null; // don't validate empty values to allow optional controls\n    }\n    const value: string = control.value;\n    return regex.test(value)\n      ? null\n      : {'pattern': {'requiredPattern': regexStr, 'actualValue': value}};\n  };\n}\n\n/**\n * Function that has `ValidatorFn` shape, but performs no operation.\n */\nexport function nullValidator(control: AbstractControl): ValidationErrors | null {\n  return null;\n}\n\nfunction isPresent(o: any): boolean {\n  return o != null;\n}\n\nexport function toObservable(value: any): Observable<any> {\n  const obs = isPromise(value) ? from(value) : value;\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && !isSubscribable(obs)) {\n    let errorMessage = `Expected async validator to return Promise or Observable.`;\n    // A synchronous validator will return object or null.\n    if (typeof value === 'object') {\n      errorMessage +=\n        ' Are you using a synchronous validator where an async validator is expected?';\n    }\n    throw new RuntimeError(RuntimeErrorCode.WRONG_VALIDATOR_RETURN_TYPE, errorMessage);\n  }\n  return obs;\n}\n\nfunction mergeErrors(arrayOfErrors: (ValidationErrors | null)[]): ValidationErrors | null {\n  let res: {[key: string]: any} = {};\n  arrayOfErrors.forEach((errors: ValidationErrors | null) => {\n    res = errors != null ? {...res!, ...errors} : res!;\n  });\n\n  return Object.keys(res).length === 0 ? null : res;\n}\n\ntype GenericValidatorFn = (control: AbstractControl) => any;\n\nfunction executeValidators<V extends GenericValidatorFn>(\n  control: AbstractControl,\n  validators: V[],\n): ReturnType<V>[] {\n  return validators.map((validator) => validator(control));\n}\n\nfunction isValidatorFn<V>(validator: V | Validator | AsyncValidator): validator is V {\n  return !(validator as Validator).validate;\n}\n\n/**\n * Given the list of validators that may contain both functions as well as classes, return the list\n * of validator functions (convert validator classes into validator functions). This is needed to\n * have consistent structure in validators list before composing them.\n *\n * @param validators The set of validators that may contain validators both in plain function form\n *     as well as represented as a validator class.\n */\nexport function normalizeValidators<V>(validators: (V | Validator | AsyncValidator)[]): V[] {\n  return validators.map((validator) => {\n    return isValidatorFn<V>(validator)\n      ? validator\n      : (((c: AbstractControl) => validator.validate(c)) as unknown as V);\n  });\n}\n\n/**\n * Merges synchronous validators into a single validator function.\n * See `Validators.compose` for additional information.\n */\nfunction compose(validators: (ValidatorFn | null | undefined)[] | null): ValidatorFn | null {\n  if (!validators) return null;\n  const presentValidators: ValidatorFn[] = validators.filter(isPresent) as any;\n  if (presentValidators.length == 0) return null;\n\n  return function (control: AbstractControl) {\n    return mergeErrors(executeValidators<ValidatorFn>(control, presentValidators));\n  };\n}\n\n/**\n * Accepts a list of validators of different possible shapes (`Validator` and `ValidatorFn`),\n * normalizes the list (converts everything to `ValidatorFn`) and merges them into a single\n * validator function.\n */\nexport function composeValidators(validators: Array<Validator | ValidatorFn>): ValidatorFn | null {\n  return validators != null ? compose(normalizeValidators<ValidatorFn>(validators)) : null;\n}\n\n/**\n * Merges asynchronous validators into a single validator function.\n * See `Validators.composeAsync` for additional information.\n */\nfunction composeAsync(validators: (AsyncValidatorFn | null)[]): AsyncValidatorFn | null {\n  if (!validators) return null;\n  const presentValidators: AsyncValidatorFn[] = validators.filter(isPresent) as any;\n  if (presentValidators.length == 0) return null;\n\n  return function (control: AbstractControl) {\n    const observables = executeValidators<AsyncValidatorFn>(control, presentValidators).map(\n      toObservable,\n    );\n    return forkJoin(observables).pipe(map(mergeErrors));\n  };\n}\n\n/**\n * Accepts a list of async validators of different possible shapes (`AsyncValidator` and\n * `AsyncValidatorFn`), normalizes the list (converts everything to `AsyncValidatorFn`) and merges\n * them into a single validator function.\n */\nexport function composeAsyncValidators(\n  validators: Array<AsyncValidator | AsyncValidatorFn>,\n): AsyncValidatorFn | null {\n  return validators != null\n    ? composeAsync(normalizeValidators<AsyncValidatorFn>(validators))\n    : null;\n}\n\n/**\n * Merges raw control validators with a given directive validator and returns the combined list of\n * validators as an array.\n */\nexport function mergeValidators<V>(controlValidators: V | V[] | null, dirValidator: V): V[] {\n  if (controlValidators === null) return [dirValidator];\n  return Array.isArray(controlValidators)\n    ? [...controlValidators, dirValidator]\n    : [controlValidators, dirValidator];\n}\n\n/**\n * Retrieves the list of raw synchronous validators attached to a given control.\n */\nexport function getControlValidators(control: AbstractControl): ValidatorFn | ValidatorFn[] | null {\n  return (control as any)._rawValidators as ValidatorFn | ValidatorFn[] | null;\n}\n\n/**\n * Retrieves the list of raw asynchronous validators attached to a given control.\n */\nexport function getControlAsyncValidators(\n  control: AbstractControl,\n): AsyncValidatorFn | AsyncValidatorFn[] | null {\n  return (control as any)._rawAsyncValidators as AsyncValidatorFn | AsyncValidatorFn[] | null;\n}\n\n/**\n * Accepts a singleton validator, an array, or null, and returns an array type with the provided\n * validators.\n *\n * @param validators A validator, validators, or null.\n * @returns A validators array.\n */\nexport function makeValidatorsArray<T extends ValidatorFn | AsyncValidatorFn>(\n  validators: T | T[] | null,\n): T[] {\n  if (!validators) return [];\n  return Array.isArray(validators) ? validators : [validators];\n}\n\n/**\n * Determines whether a validator or validators array has a given validator.\n *\n * @param validators The validator or validators to compare against.\n * @param validator The validator to check.\n * @returns Whether the validator is present.\n */\nexport function hasValidator<T extends ValidatorFn | AsyncValidatorFn>(\n  validators: T | T[] | null,\n  validator: T,\n): boolean {\n  return Array.isArray(validators) ? validators.includes(validator) : validators === validator;\n}\n\n/**\n * Combines two arrays of validators into one. If duplicates are provided, only one will be added.\n *\n * @param validators The new validators.\n * @param currentValidators The base array of current validators.\n * @returns An array of validators.\n */\nexport function addValidators<T extends ValidatorFn | AsyncValidatorFn>(\n  validators: T | T[],\n  currentValidators: T | T[] | null,\n): T[] {\n  const current = makeValidatorsArray(currentValidators);\n  const validatorsToAdd = makeValidatorsArray(validators);\n  validatorsToAdd.forEach((v: T) => {\n    // Note: if there are duplicate entries in the new validators array,\n    // only the first one would be added to the current list of validators.\n    // Duplicate ones would be ignored since `hasValidator` would detect\n    // the presence of a validator function and we update the current list in place.\n    if (!hasValidator(current, v)) {\n      current.push(v);\n    }\n  });\n  return current;\n}\n\nexport function removeValidators<T extends ValidatorFn | AsyncValidatorFn>(\n  validators: T | T[],\n  currentValidators: T | T[] | null,\n): T[] {\n  return makeValidatorsArray(currentValidators).filter((v) => !hasValidator(validators, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {AbstractControl} from '../model/abstract_model';\nimport {composeAsyncValidators, composeValidators} from '../validators';\n\nimport {\n  AsyncValidator,\n  AsyncValidatorFn,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n} from './validators';\n\n/**\n * @description\n * Base class for control directives.\n *\n * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n *\n * @publicApi\n */\nexport abstract class AbstractControlDirective {\n  /**\n   * @description\n   * A reference to the underlying control.\n   *\n   * @returns the control that backs this directive. Most properties fall through to that instance.\n   */\n  abstract get control(): AbstractControl | null;\n\n  /**\n   * @description\n   * Reports the value of the control if it is present, otherwise null.\n   */\n  get value(): any {\n    return this.control ? this.control.value : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control is valid. A control is considered valid if no\n   * validation errors exist with the current value.\n   * If the control is not present, null is returned.\n   */\n  get valid(): boolean | null {\n    return this.control ? this.control.valid : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control is invalid, meaning that an error exists in the input value.\n   * If the control is not present, null is returned.\n   */\n  get invalid(): boolean | null {\n    return this.control ? this.control.invalid : null;\n  }\n\n  /**\n   * @description\n   * Reports whether a control is pending, meaning that async validation is occurring and\n   * errors are not yet available for the input value. If the control is not present, null is\n   * returned.\n   */\n  get pending(): boolean | null {\n    return this.control ? this.control.pending : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control is disabled, meaning that the control is disabled\n   * in the UI and is exempt from validation checks and excluded from aggregate\n   * values of ancestor controls. If the control is not present, null is returned.\n   */\n  get disabled(): boolean | null {\n    return this.control ? this.control.disabled : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control is enabled, meaning that the control is included in ancestor\n   * calculations of validity or value. If the control is not present, null is returned.\n   */\n  get enabled(): boolean | null {\n    return this.control ? this.control.enabled : null;\n  }\n\n  /**\n   * @description\n   * Reports the control's validation errors. If the control is not present, null is returned.\n   */\n  get errors(): ValidationErrors | null {\n    return this.control ? this.control.errors : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control is pristine, meaning that the user has not yet changed\n   * the value in the UI. If the control is not present, null is returned.\n   */\n  get pristine(): boolean | null {\n    return this.control ? this.control.pristine : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control is dirty, meaning that the user has changed\n   * the value in the UI. If the control is not present, null is returned.\n   */\n  get dirty(): boolean | null {\n    return this.control ? this.control.dirty : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control is touched, meaning that the user has triggered\n   * a `blur` event on it. If the control is not present, null is returned.\n   */\n  get touched(): boolean | null {\n    return this.control ? this.control.touched : null;\n  }\n\n  /**\n   * @description\n   * Reports the validation status of the control. Possible values include:\n   * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.\n   * If the control is not present, null is returned.\n   */\n  get status(): string | null {\n    return this.control ? this.control.status : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control is untouched, meaning that the user has not yet triggered\n   * a `blur` event on it. If the control is not present, null is returned.\n   */\n  get untouched(): boolean | null {\n    return this.control ? this.control.untouched : null;\n  }\n\n  /**\n   * @description\n   * Returns a multicasting observable that emits a validation status whenever it is\n   * calculated for the control. If the control is not present, null is returned.\n   */\n  get statusChanges(): Observable<any> | null {\n    return this.control ? this.control.statusChanges : null;\n  }\n\n  /**\n   * @description\n   * Returns a multicasting observable of value changes for the control that emits every time the\n   * value of the control changes in the UI or programmatically.\n   * If the control is not present, null is returned.\n   */\n  get valueChanges(): Observable<any> | null {\n    return this.control ? this.control.valueChanges : null;\n  }\n\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n  get path(): string[] | null {\n    return null;\n  }\n\n  /**\n   * Contains the result of merging synchronous validators into a single validator function\n   * (combined using `Validators.compose`).\n   */\n  private _composedValidatorFn: ValidatorFn | null | undefined;\n\n  /**\n   * Contains the result of merging asynchronous validators into a single validator function\n   * (combined using `Validators.composeAsync`).\n   */\n  private _composedAsyncValidatorFn: AsyncValidatorFn | null | undefined;\n\n  /**\n   * Set of synchronous validators as they were provided while calling `setValidators` function.\n   * @internal\n   */\n  _rawValidators: Array<Validator | ValidatorFn> = [];\n\n  /**\n   * Set of asynchronous validators as they were provided while calling `setAsyncValidators`\n   * function.\n   * @internal\n   */\n  _rawAsyncValidators: Array<AsyncValidator | AsyncValidatorFn> = [];\n\n  /**\n   * Sets synchronous validators for this directive.\n   * @internal\n   */\n  _setValidators(validators: Array<Validator | ValidatorFn> | undefined): void {\n    this._rawValidators = validators || [];\n    this._composedValidatorFn = composeValidators(this._rawValidators);\n  }\n\n  /**\n   * Sets asynchronous validators for this directive.\n   * @internal\n   */\n  _setAsyncValidators(validators: Array<AsyncValidator | AsyncValidatorFn> | undefined): void {\n    this._rawAsyncValidators = validators || [];\n    this._composedAsyncValidatorFn = composeAsyncValidators(this._rawAsyncValidators);\n  }\n\n  /**\n   * @description\n   * Synchronous validator function composed of all the synchronous validators registered with this\n   * directive.\n   */\n  get validator(): ValidatorFn | null {\n    return this._composedValidatorFn || null;\n  }\n\n  /**\n   * @description\n   * Asynchronous validator function composed of all the asynchronous validators registered with\n   * this directive.\n   */\n  get asyncValidator(): AsyncValidatorFn | null {\n    return this._composedAsyncValidatorFn || null;\n  }\n\n  /*\n   * The set of callbacks to be invoked when directive instance is being destroyed.\n   */\n  private _onDestroyCallbacks: (() => void)[] = [];\n\n  /**\n   * Internal function to register callbacks that should be invoked\n   * when directive instance is being destroyed.\n   * @internal\n   */\n  _registerOnDestroy(fn: () => void): void {\n    this._onDestroyCallbacks.push(fn);\n  }\n\n  /**\n   * Internal function to invoke all registered \"on destroy\" callbacks.\n   * Note: calling this function also clears the list of callbacks.\n   * @internal\n   */\n  _invokeOnDestroyCallbacks(): void {\n    this._onDestroyCallbacks.forEach((fn) => fn());\n    this._onDestroyCallbacks = [];\n  }\n\n  /**\n   * @description\n   * Resets the control with the provided value if the control is present.\n   */\n  reset(value: any = undefined): void {\n    if (this.control) this.control.reset(value);\n  }\n\n  /**\n   * @description\n   * Reports whether the control with the given path has the error specified.\n   *\n   * @param errorCode The code of the error to check\n   * @param path A list of control names that designates how to move from the current control\n   * to the control that should be queried for errors.\n   *\n   * @usageNotes\n   * For example, for the following `FormGroup`:\n   *\n   * ```ts\n   * form = new FormGroup({\n   *   address: new FormGroup({ street: new FormControl() })\n   * });\n   * ```\n   *\n   * The path to the 'street' control from the root form would be 'address' -> 'street'.\n   *\n   * It can be provided to this method in one of two formats:\n   *\n   * 1. An array of string control names, e.g. `['address', 'street']`\n   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n   *\n   * If no path is given, this method checks for the error on the current control.\n   *\n   * @returns whether the given error is present in the control at the given path.\n   *\n   * If the control is not present, false is returned.\n   */\n  hasError(errorCode: string, path?: Array<string | number> | string): boolean {\n    return this.control ? this.control.hasError(errorCode, path) : false;\n  }\n\n  /**\n   * @description\n   * Reports error data for the control with the given path.\n   *\n   * @param errorCode The code of the error to check\n   * @param path A list of control names that designates how to move from the current control\n   * to the control that should be queried for errors.\n   *\n   * @usageNotes\n   * For example, for the following `FormGroup`:\n   *\n   * ```ts\n   * form = new FormGroup({\n   *   address: new FormGroup({ street: new FormControl() })\n   * });\n   * ```\n   *\n   * The path to the 'street' control from the root form would be 'address' -> 'street'.\n   *\n   * It can be provided to this method in one of two formats:\n   *\n   * 1. An array of string control names, e.g. `['address', 'street']`\n   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n   *\n   * @returns error data for that particular error. If the control or error is not present,\n   * null is returned.\n   */\n  getError(errorCode: string, path?: Array<string | number> | string): any {\n    return this.control ? this.control.getError(errorCode, path) : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport type {Form} from './form_interface';\n\n/**\n * @description\n * A base class for directives that contain multiple registered instances of `NgControl`.\n * Only used by the forms module.\n *\n * @publicApi\n */\nexport abstract class ControlContainer extends AbstractControlDirective {\n  /**\n   * @description\n   * The name for the control\n   */\n  // TODO(issue/24571): remove '!'.\n  name!: string | number | null;\n\n  /**\n   * @description\n   * The top-level form directive for the control.\n   */\n  get formDirective(): Form | null {\n    return null;\n  }\n\n  /**\n   * @description\n   * The path to this group.\n   */\n  override get path(): string[] | null {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor} from './control_value_accessor';\n\n/**\n * @description\n * A base class that all `FormControl`-based directives extend. It binds a `FormControl`\n * object to a DOM element.\n *\n * @publicApi\n */\nexport abstract class NgControl extends AbstractControlDirective {\n  /**\n   * @description\n   * The parent form for the control.\n   *\n   * @internal\n   */\n  _parent: ControlContainer | null = null;\n\n  /**\n   * @description\n   * The name for the control\n   */\n  name: string | number | null = null;\n\n  /**\n   * @description\n   * The value accessor for the control\n   */\n  valueAccessor: ControlValueAccessor | null = null;\n\n  /**\n   * @description\n   * The callback method to update the model from the view when requested\n   *\n   * @param newValue The new value for the view\n   */\n  abstract viewToModelUpdate(newValue: any): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, Optional, Self, ɵWritable as Writable} from '@angular/core';\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {ControlContainer} from './control_container';\nimport {NgControl} from './ng_control';\nimport {type NgForm} from './ng_form';\nimport {type FormGroupDirective} from './reactive_directives/form_group_directive';\n\n// DO NOT REFACTOR!\n// Each status is represented by a separate function to make sure that\n// advanced Closure Compiler optimizations related to property renaming\n// can work correctly.\nexport class AbstractControlStatus {\n  private _cd: AbstractControlDirective | null;\n\n  constructor(cd: AbstractControlDirective | null) {\n    this._cd = cd;\n  }\n\n  protected get isTouched() {\n    // track the touched signal\n    this._cd?.control?._touched?.();\n    return !!this._cd?.control?.touched;\n  }\n\n  protected get isUntouched() {\n    return !!this._cd?.control?.untouched;\n  }\n\n  protected get isPristine() {\n    // track the pristine signal\n    this._cd?.control?._pristine?.();\n    return !!this._cd?.control?.pristine;\n  }\n\n  protected get isDirty() {\n    // pristine signal already tracked above\n    return !!this._cd?.control?.dirty;\n  }\n\n  protected get isValid() {\n    // track the status signal\n    this._cd?.control?._status?.();\n    return !!this._cd?.control?.valid;\n  }\n\n  protected get isInvalid() {\n    // status signal already tracked above\n    return !!this._cd?.control?.invalid;\n  }\n\n  protected get isPending() {\n    // status signal already tracked above\n    return !!this._cd?.control?.pending;\n  }\n\n  protected get isSubmitted() {\n    // track the submitted signal\n    (this._cd as Writable<NgForm | FormGroupDirective> | null)?._submitted?.();\n    // We check for the `submitted` field from `NgForm` and `FormGroupDirective` classes, but\n    // we avoid instanceof checks to prevent non-tree-shakable references to those types.\n    return !!(this._cd as Writable<NgForm | FormGroupDirective> | null)?.submitted;\n  }\n}\n\nexport const ngControlStatusHost = {\n  '[class.ng-untouched]': 'isUntouched',\n  '[class.ng-touched]': 'isTouched',\n  '[class.ng-pristine]': 'isPristine',\n  '[class.ng-dirty]': 'isDirty',\n  '[class.ng-valid]': 'isValid',\n  '[class.ng-invalid]': 'isInvalid',\n  '[class.ng-pending]': 'isPending',\n};\n\nexport const ngGroupStatusHost = {\n  ...ngControlStatusHost,\n  '[class.ng-submitted]': 'isSubmitted',\n};\n\n/**\n * @description\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status.\n *\n * @usageNotes\n *\n * ### CSS classes applied\n *\n * The following classes are applied as the properties become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[formControlName],[ngModel],[formControl]',\n  host: ngControlStatusHost,\n  standalone: false,\n})\nexport class NgControlStatus extends AbstractControlStatus {\n  constructor(@Self() cd: NgControl) {\n    super(cd);\n  }\n}\n\n/**\n * @description\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc). On groups, this includes the additional\n * class ng-submitted.\n *\n * @see {@link NgControlStatus}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n    '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n  host: ngGroupStatusHost,\n  standalone: false,\n})\nexport class NgControlStatusGroup extends AbstractControlStatus {\n  constructor(@Optional() @Self() cd: ControlContainer) {\n    super(cd);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  EventEmitter,\n  signal,\n  ɵRuntimeError as RuntimeError,\n  ɵWritable as Writable,\n  untracked,\n  computed,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {\n  asyncValidatorsDroppedWithOptsWarning,\n  missingControlError,\n  missingControlValueError,\n  noControlsError,\n} from '../directives/reactive_errors';\nimport type {AsyncValidatorFn, ValidationErrors, ValidatorFn} from '../directives/validators';\nimport {RuntimeErrorCode} from '../errors';\nimport {\n  addValidators,\n  composeAsyncValidators,\n  composeValidators,\n  hasValidator,\n  removeValidators,\n  toObservable,\n} from '../validators';\nimport type {FormArray} from './form_array';\nimport type {FormGroup} from './form_group';\n\n/**\n * Reports that a control is valid, meaning that no errors exist in the input value.\n *\n * @see {@link status}\n */\nexport const VALID = 'VALID';\n\n/**\n * Reports that a control is invalid, meaning that an error exists in the input value.\n *\n * @see {@link status}\n */\nexport const INVALID = 'INVALID';\n\n/**\n * Reports that a control is pending, meaning that async validation is occurring and\n * errors are not yet available for the input value.\n *\n * @see {@link markAsPending}\n * @see {@link status}\n */\nexport const PENDING = 'PENDING';\n\n/**\n * Reports that a control is disabled, meaning that the control is exempt from ancestor\n * calculations of validity or value.\n *\n * @see {@link markAsDisabled}\n * @see {@link status}\n */\nexport const DISABLED = 'DISABLED';\n\n/**\n * A form can have several different statuses. Each\n * possible status is returned as a string literal.\n *\n * * **VALID**: Reports that a control is valid, meaning that no errors exist in the input\n * value.\n * * **INVALID**: Reports that a control is invalid, meaning that an error exists in the input\n * value.\n * * **PENDING**: Reports that a control is pending, meaning that async validation is\n * occurring and errors are not yet available for the input value.\n * * **DISABLED**: Reports that a control is\n * disabled, meaning that the control is exempt from ancestor calculations of validity or value.\n *\n * @publicApi\n */\nexport type FormControlStatus = 'VALID' | 'INVALID' | 'PENDING' | 'DISABLED';\n\n/**\n * Base class for every event sent by `AbstractControl.events()`\n *\n * @publicApi\n */\nexport abstract class ControlEvent<T = any> {\n  /**\n   * Form control from which this event is originated.\n   *\n   * Note: the type of the control can't be infered from T as the event can be emitted by any of child controls\n   */\n  public abstract readonly source: AbstractControl<unknown>;\n}\n\n/**\n * Event fired when the value of a control changes.\n *\n * @publicApi\n */\nexport class ValueChangeEvent<T> extends ControlEvent<T> {\n  constructor(\n    public readonly value: T,\n    public readonly source: AbstractControl,\n  ) {\n    super();\n  }\n}\n\n/**\n * Event fired when the control's pristine state changes (pristine <=> dirty).\n *\n * @publicApi */\nexport class PristineChangeEvent extends ControlEvent {\n  constructor(\n    public readonly pristine: boolean,\n    public readonly source: AbstractControl,\n  ) {\n    super();\n  }\n}\n\n/**\n * Event fired when the control's touched status changes (touched <=> untouched).\n *\n * @publicApi\n */\nexport class TouchedChangeEvent extends ControlEvent {\n  constructor(\n    public readonly touched: boolean,\n    public readonly source: AbstractControl,\n  ) {\n    super();\n  }\n}\n\n/**\n * Event fired when the control's status changes.\n *\n * @publicApi\n */\nexport class StatusChangeEvent extends ControlEvent {\n  constructor(\n    public readonly status: FormControlStatus,\n    public readonly source: AbstractControl,\n  ) {\n    super();\n  }\n}\n\n/**\n * Event fired when a form is submitted\n *\n * @publicApi\n */\nexport class FormSubmittedEvent extends ControlEvent {\n  constructor(public readonly source: AbstractControl) {\n    super();\n  }\n}\n/**\n * Event fired when a form is reset.\n *\n * @publicApi\n */\nexport class FormResetEvent extends ControlEvent {\n  constructor(public readonly source: AbstractControl) {\n    super();\n  }\n}\n\n/**\n * Gets validators from either an options object or given validators.\n */\nexport function pickValidators(\n  validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n): ValidatorFn | ValidatorFn[] | null {\n  return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators : validatorOrOpts) || null;\n}\n\n/**\n * Creates validator function by combining provided validators.\n */\nfunction coerceToValidator(validator: ValidatorFn | ValidatorFn[] | null): ValidatorFn | null {\n  return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n\n/**\n * Gets async validators from either an options object or given validators.\n */\nexport function pickAsyncValidators(\n  asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\n  validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n): AsyncValidatorFn | AsyncValidatorFn[] | null {\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (isOptionsObj(validatorOrOpts) && asyncValidator) {\n      console.warn(asyncValidatorsDroppedWithOptsWarning);\n    }\n  }\n  return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators : asyncValidator) || null;\n}\n\n/**\n * Creates async validator function by combining provided async validators.\n */\nfunction coerceToAsyncValidator(\n  asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\n): AsyncValidatorFn | null {\n  return Array.isArray(asyncValidator)\n    ? composeAsyncValidators(asyncValidator)\n    : asyncValidator || null;\n}\n\nexport type FormHooks = 'change' | 'blur' | 'submit';\n\n/**\n * Interface for options provided to an `AbstractControl`.\n *\n * @publicApi\n */\nexport interface AbstractControlOptions {\n  /**\n   * @description\n   * The list of validators applied to a control.\n   */\n  validators?: ValidatorFn | ValidatorFn[] | null;\n  /**\n   * @description\n   * The list of async validators applied to control.\n   */\n  asyncValidators?: AsyncValidatorFn | AsyncValidatorFn[] | null;\n  /**\n   * @description\n   * The event name for control to update upon.\n   */\n  updateOn?: 'change' | 'blur' | 'submit';\n}\n\nexport function isOptionsObj(\n  validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n): validatorOrOpts is AbstractControlOptions {\n  return (\n    validatorOrOpts != null &&\n    !Array.isArray(validatorOrOpts) &&\n    typeof validatorOrOpts === 'object'\n  );\n}\n\nexport function assertControlPresent(parent: any, isGroup: boolean, key: string | number): void {\n  const controls = parent.controls as {[key: string | number]: unknown};\n  const collection = isGroup ? Object.keys(controls) : controls;\n  if (!collection.length) {\n    throw new RuntimeError(\n      RuntimeErrorCode.NO_CONTROLS,\n      typeof ngDevMode === 'undefined' || ngDevMode ? noControlsError(isGroup) : '',\n    );\n  }\n  if (!controls[key]) {\n    throw new RuntimeError(\n      RuntimeErrorCode.MISSING_CONTROL,\n      typeof ngDevMode === 'undefined' || ngDevMode ? missingControlError(isGroup, key) : '',\n    );\n  }\n}\n\nexport function assertAllValuesPresent(control: any, isGroup: boolean, value: any): void {\n  control._forEachChild((_: unknown, key: string | number) => {\n    if (value[key] === undefined) {\n      throw new RuntimeError(\n        RuntimeErrorCode.MISSING_CONTROL_VALUE,\n        typeof ngDevMode === 'undefined' || ngDevMode ? missingControlValueError(isGroup, key) : '',\n      );\n    }\n  });\n}\n\n// IsAny checks if T is `any`, by checking a condition that couldn't possibly be true otherwise.\nexport type ɵIsAny<T, Y, N> = 0 extends 1 & T ? Y : N;\n\n/**\n * `TypedOrUntyped` allows one of two different types to be selected, depending on whether the Forms\n * class it's applied to is typed or not.\n *\n * This is for internal Angular usage to support typed forms; do not directly use it.\n */\nexport type ɵTypedOrUntyped<T, Typed, Untyped> = ɵIsAny<T, Untyped, Typed>;\n\n/**\n * Value gives the value type corresponding to a control type.\n *\n * Note that the resulting type will follow the same rules as `.value` on your control, group, or\n * array, including `undefined` for each group element which might be disabled.\n *\n * If you are trying to extract a value type for a data model, you probably want {@link RawValue},\n * which will not have `undefined` in group keys.\n *\n * @usageNotes\n *\n * ### `FormControl` value type\n *\n * You can extract the value type of a single control:\n *\n * ```ts\n * type NameControl = FormControl<string>;\n * type NameValue = Value<NameControl>;\n * ```\n *\n * The resulting type is `string`.\n *\n * ### `FormGroup` value type\n *\n * Imagine you have an interface defining the controls in your group. You can extract the shape of\n * the values as follows:\n *\n * ```ts\n * interface PartyFormControls {\n *   address: FormControl<string>;\n * }\n *\n * // Value operates on controls; the object must be wrapped in a FormGroup.\n * type PartyFormValues = Value<FormGroup<PartyFormControls>>;\n * ```\n *\n * The resulting type is `{address: string|undefined}`.\n *\n * ### `FormArray` value type\n *\n * You can extract values from FormArrays as well:\n *\n * ```ts\n * type GuestNamesControls = FormArray<FormControl<string>>;\n *\n * type NamesValues = Value<GuestNamesControls>;\n * ```\n *\n * The resulting type is `string[]`.\n *\n * **Internal: not for public use.**\n */\nexport type ɵValue<T extends AbstractControl | undefined> =\n  T extends AbstractControl<any, any> ? T['value'] : never;\n\n/**\n * RawValue gives the raw value type corresponding to a control type.\n *\n * Note that the resulting type will follow the same rules as `.getRawValue()` on your control,\n * group, or array. This means that all controls inside a group will be required, not optional,\n * regardless of their disabled state.\n *\n * You may also wish to use {@link ɵValue}, which will have `undefined` in group keys (which can be\n * disabled).\n *\n * @usageNotes\n *\n * ### `FormGroup` raw value type\n *\n * Imagine you have an interface defining the controls in your group. You can extract the shape of\n * the raw values as follows:\n *\n * ```ts\n * interface PartyFormControls {\n *   address: FormControl<string>;\n * }\n *\n * // RawValue operates on controls; the object must be wrapped in a FormGroup.\n * type PartyFormValues = RawValue<FormGroup<PartyFormControls>>;\n * ```\n *\n * The resulting type is `{address: string}`. (Note the absence of `undefined`.)\n *\n *  **Internal: not for public use.**\n */\nexport type ɵRawValue<T extends AbstractControl | undefined> =\n  T extends AbstractControl<any, any>\n    ? T['setValue'] extends (v: infer R) => void\n      ? R\n      : never\n    : never;\n\n/**\n * Tokenize splits a string literal S by a delimiter D.\n */\nexport type ɵTokenize<S extends string, D extends string> = string extends S\n  ? string[] /* S must be a literal */\n  : S extends `${infer T}${D}${infer U}`\n    ? [T, ...ɵTokenize<U, D>]\n    : [S] /* Base case */;\n\n/**\n * CoerceStrArrToNumArr accepts an array of strings, and converts any numeric string to a number.\n */\nexport type ɵCoerceStrArrToNumArr<S> =\n  // Extract the head of the array.\n  S extends [infer Head, ...infer Tail]\n    ? // Using a template literal type, coerce the head to `number` if possible.\n      // Then, recurse on the tail.\n      Head extends `${number}`\n      ? [number, ...ɵCoerceStrArrToNumArr<Tail>]\n      : [Head, ...ɵCoerceStrArrToNumArr<Tail>]\n    : [];\n\n/**\n * Navigate takes a type T and an array K, and returns the type of T[K[0]][K[1]][K[2]]...\n */\nexport type ɵNavigate<\n  T,\n  K extends Array<string | number>,\n> = T extends object /* T must be indexable (object or array) */\n  ? K extends [infer Head, ...infer Tail] /* Split K into head and tail */\n    ? Head extends keyof T /* head(K) must index T */\n      ? Tail extends (string | number)[] /* tail(K) must be an array */\n        ? [] extends Tail\n          ? T[Head] /* base case: K can be split, but Tail is empty */\n          : ɵNavigate<T[Head], Tail> /* explore T[head(K)] by tail(K) */\n        : any /* tail(K) was not an array, give up */\n      : never /* head(K) does not index T, give up */\n    : any /* K cannot be split, give up */\n  : any /* T is not indexable, give up */;\n\n/**\n * ɵWriteable removes readonly from all keys.\n */\nexport type ɵWriteable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * GetProperty takes a type T and some property names or indices K.\n * If K is a dot-separated string, it is tokenized into an array before proceeding.\n * Then, the type of the nested property at K is computed: T[K[0]][K[1]][K[2]]...\n * This works with both objects, which are indexed by property name, and arrays, which are indexed\n * numerically.\n *\n * For internal use only.\n */\nexport type ɵGetProperty<T, K> =\n  // K is a string\n  K extends string\n    ? ɵGetProperty<T, ɵCoerceStrArrToNumArr<ɵTokenize<K, '.'>>>\n    : // Is it an array\n      ɵWriteable<K> extends Array<string | number>\n      ? ɵNavigate<T, ɵWriteable<K>>\n      : // Fall through permissively if we can't calculate the type of K.\n        any;\n\n/**\n * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * The first type parameter TValue represents the value type of the control (`control.value`).\n * The optional type parameter TRawValue  represents the raw value type (`control.getRawValue()`).\n *\n * @see [Forms Guide](guide/forms)\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see [Dynamic Forms Guide](guide/forms/dynamic-forms)\n *\n * @publicApi\n */\nexport abstract class AbstractControl<TValue = any, TRawValue extends TValue = TValue> {\n  /** @internal */\n  _pendingDirty = false;\n\n  /**\n   * Indicates that a control has its own pending asynchronous validation in progress.\n   * It also stores if the control should emit events when the validation status changes.\n   *\n   * @internal\n   */\n  _hasOwnPendingAsyncValidator: null | {emitEvent: boolean} = null;\n\n  /** @internal */\n  _pendingTouched = false;\n\n  /** @internal */\n  _onCollectionChange = () => {};\n\n  /** @internal */\n  _updateOn?: FormHooks;\n\n  private _parent: FormGroup | FormArray | null = null;\n  private _asyncValidationSubscription: any;\n\n  /**\n   * Contains the result of merging synchronous validators into a single validator function\n   * (combined using `Validators.compose`).\n   *\n   * @internal\n   */\n  private _composedValidatorFn!: ValidatorFn | null;\n\n  /**\n   * Contains the result of merging asynchronous validators into a single validator function\n   * (combined using `Validators.composeAsync`).\n   *\n   * @internal\n   */\n  private _composedAsyncValidatorFn!: AsyncValidatorFn | null;\n\n  /**\n   * Synchronous validators as they were provided:\n   *  - in `AbstractControl` constructor\n   *  - as an argument while calling `setValidators` function\n   *  - while calling the setter on the `validator` field (e.g. `control.validator = validatorFn`)\n   *\n   * @internal\n   */\n  private _rawValidators!: ValidatorFn | ValidatorFn[] | null;\n\n  /**\n   * Asynchronous validators as they were provided:\n   *  - in `AbstractControl` constructor\n   *  - as an argument while calling `setAsyncValidators` function\n   *  - while calling the setter on the `asyncValidator` field (e.g. `control.asyncValidator =\n   * asyncValidatorFn`)\n   *\n   * @internal\n   */\n  private _rawAsyncValidators!: AsyncValidatorFn | AsyncValidatorFn[] | null;\n\n  /**\n   * The current value of the control.\n   *\n   * * For a `FormControl`, the current value.\n   * * For an enabled `FormGroup`, the values of enabled controls as an object\n   * with a key-value pair for each member of the group.\n   * * For a disabled `FormGroup`, the values of all controls as an object\n   * with a key-value pair for each member of the group.\n   * * For a `FormArray`, the values of enabled controls as an array.\n   *\n   */\n  public readonly value!: TValue;\n\n  /**\n   * Initialize the AbstractControl instance.\n   *\n   * @param validators The function or array of functions that is used to determine the validity of\n   *     this control synchronously.\n   * @param asyncValidators The function or array of functions that is used to determine validity of\n   *     this control asynchronously.\n   */\n  constructor(\n    validators: ValidatorFn | ValidatorFn[] | null,\n    asyncValidators: AsyncValidatorFn | AsyncValidatorFn[] | null,\n  ) {\n    this._assignValidators(validators);\n    this._assignAsyncValidators(asyncValidators);\n  }\n\n  /**\n   * Returns the function that is used to determine the validity of this control synchronously.\n   * If multiple validators have been added, this will be a single composed function.\n   * See `Validators.compose()` for additional information.\n   */\n  get validator(): ValidatorFn | null {\n    return this._composedValidatorFn;\n  }\n  set validator(validatorFn: ValidatorFn | null) {\n    this._rawValidators = this._composedValidatorFn = validatorFn;\n  }\n\n  /**\n   * Returns the function that is used to determine the validity of this control asynchronously.\n   * If multiple validators have been added, this will be a single composed function.\n   * See `Validators.compose()` for additional information.\n   */\n  get asyncValidator(): AsyncValidatorFn | null {\n    return this._composedAsyncValidatorFn;\n  }\n  set asyncValidator(asyncValidatorFn: AsyncValidatorFn | null) {\n    this._rawAsyncValidators = this._composedAsyncValidatorFn = asyncValidatorFn;\n  }\n\n  /**\n   * The parent control.\n   */\n  get parent(): FormGroup | FormArray | null {\n    return this._parent;\n  }\n\n  /**\n   * The validation status of the control.\n   *\n   * @see {@link FormControlStatus}\n   *\n   * These status values are mutually exclusive, so a control cannot be\n   * both valid AND invalid or invalid AND disabled.\n   */\n  get status(): FormControlStatus {\n    return untracked(this.statusReactive)!;\n  }\n  private set status(v: FormControlStatus) {\n    untracked(() => this.statusReactive.set(v));\n  }\n  /** @internal */\n  readonly _status = computed(() => this.statusReactive());\n  private readonly statusReactive = signal<FormControlStatus | undefined>(undefined);\n\n  /**\n   * A control is `valid` when its `status` is `VALID`.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @returns True if the control has passed all of its validation tests,\n   * false otherwise.\n   */\n  get valid(): boolean {\n    return this.status === VALID;\n  }\n\n  /**\n   * A control is `invalid` when its `status` is `INVALID`.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @returns True if this control has failed one or more of its validation checks,\n   * false otherwise.\n   */\n  get invalid(): boolean {\n    return this.status === INVALID;\n  }\n\n  /**\n   * A control is `pending` when its `status` is `PENDING`.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @returns True if this control is in the process of conducting a validation check,\n   * false otherwise.\n   */\n  get pending(): boolean {\n    return this.status == PENDING;\n  }\n\n  /**\n   * A control is `disabled` when its `status` is `DISABLED`.\n   *\n   * Disabled controls are exempt from validation checks and\n   * are not included in the aggregate value of their ancestor\n   * controls.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @returns True if the control is disabled, false otherwise.\n   */\n  get disabled(): boolean {\n    return this.status === DISABLED;\n  }\n\n  /**\n   * A control is `enabled` as long as its `status` is not `DISABLED`.\n   *\n   * @returns True if the control has any status other than 'DISABLED',\n   * false if the status is 'DISABLED'.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   */\n  get enabled(): boolean {\n    return this.status !== DISABLED;\n  }\n\n  /**\n   * An object containing any errors generated by failing validation,\n   * or null if there are no errors.\n   */\n  public readonly errors!: ValidationErrors | null;\n\n  /**\n   * A control is `pristine` if the user has not yet changed\n   * the value in the UI.\n   *\n   * @returns True if the user has not yet changed the value in the UI; compare `dirty`.\n   * Programmatic changes to a control's value do not mark it dirty.\n   */\n  get pristine(): boolean {\n    return untracked(this.pristineReactive);\n  }\n  private set pristine(v: boolean) {\n    untracked(() => this.pristineReactive.set(v));\n  }\n  /** @internal */\n  readonly _pristine = computed(() => this.pristineReactive());\n  private readonly pristineReactive = signal(true);\n\n  /**\n   * A control is `dirty` if the user has changed the value\n   * in the UI.\n   *\n   * @returns True if the user has changed the value of this control in the UI; compare `pristine`.\n   * Programmatic changes to a control's value do not mark it dirty.\n   */\n  get dirty(): boolean {\n    return !this.pristine;\n  }\n\n  /**\n   * True if the control is marked as `touched`.\n   *\n   * A control is marked `touched` once the user has triggered\n   * a `blur` event on it.\n   */\n  get touched(): boolean {\n    return untracked(this.touchedReactive);\n  }\n  private set touched(v: boolean) {\n    untracked(() => this.touchedReactive.set(v));\n  }\n  /** @internal */\n  readonly _touched = computed(() => this.touchedReactive());\n  private readonly touchedReactive = signal(false);\n\n  /**\n   * True if the control has not been marked as touched\n   *\n   * A control is `untouched` if the user has not yet triggered\n   * a `blur` event on it.\n   */\n  get untouched(): boolean {\n    return !this.touched;\n  }\n\n  /**\n   * Exposed as observable, see below.\n   *\n   * @internal\n   */\n  readonly _events = new Subject<ControlEvent<TValue>>();\n\n  /**\n   * A multicasting observable that emits an event every time the state of the control changes.\n   * It emits for value, status, pristine or touched changes.\n   *\n   * **Note**: On value change, the emit happens right after a value of this control is updated. The\n   * value of a parent control (for example if this FormControl is a part of a FormGroup) is updated\n   * later, so accessing a value of a parent control (using the `value` property) from the callback\n   * of this event might result in getting a value that has not been updated yet. Subscribe to the\n   * `events` of the parent control instead.\n   * For other event types, the events are emitted after the parent control has been updated.\n   *\n   */\n  public readonly events = this._events.asObservable();\n\n  /**\n   * A multicasting observable that emits an event every time the value of the control changes, in\n   * the UI or programmatically. It also emits an event each time you call enable() or disable()\n   * without passing along {emitEvent: false} as a function argument.\n   *\n   * **Note**: the emit happens right after a value of this control is updated. The value of a\n   * parent control (for example if this FormControl is a part of a FormGroup) is updated later, so\n   * accessing a value of a parent control (using the `value` property) from the callback of this\n   * event might result in getting a value that has not been updated yet. Subscribe to the\n   * `valueChanges` event of the parent control instead.\n   */\n  public readonly valueChanges!: Observable<TValue>;\n\n  /**\n   * A multicasting observable that emits an event every time the validation `status` of the control\n   * recalculates.\n   *\n   * @see {@link FormControlStatus}\n   * @see {@link AbstractControl.status}\n   */\n  public readonly statusChanges!: Observable<FormControlStatus>;\n\n  /**\n   * Reports the update strategy of the `AbstractControl` (meaning\n   * the event on which the control updates itself).\n   * Possible values: `'change'` | `'blur'` | `'submit'`\n   * Default value: `'change'`\n   */\n  get updateOn(): FormHooks {\n    return this._updateOn ? this._updateOn : this.parent ? this.parent.updateOn : 'change';\n  }\n\n  /**\n   * Sets the synchronous validators that are active on this control.  Calling\n   * this overwrites any existing synchronous validators.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   * If you want to add a new validator without affecting existing ones, consider\n   * using `addValidators()` method instead.\n   */\n  setValidators(validators: ValidatorFn | ValidatorFn[] | null): void {\n    this._assignValidators(validators);\n  }\n\n  /**\n   * Sets the asynchronous validators that are active on this control. Calling this\n   * overwrites any existing asynchronous validators.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   * If you want to add a new validator without affecting existing ones, consider\n   * using `addAsyncValidators()` method instead.\n   */\n  setAsyncValidators(validators: AsyncValidatorFn | AsyncValidatorFn[] | null): void {\n    this._assignAsyncValidators(validators);\n  }\n\n  /**\n   * Add a synchronous validator or validators to this control, without affecting other validators.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   * Adding a validator that already exists will have no effect. If duplicate validator functions\n   * are present in the `validators` array, only the first instance would be added to a form\n   * control.\n   *\n   * @param validators The new validator function or functions to add to this control.\n   */\n  addValidators(validators: ValidatorFn | ValidatorFn[]): void {\n    this.setValidators(addValidators(validators, this._rawValidators));\n  }\n\n  /**\n   * Add an asynchronous validator or validators to this control, without affecting other\n   * validators.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   * Adding a validator that already exists will have no effect.\n   *\n   * @param validators The new asynchronous validator function or functions to add to this control.\n   */\n  addAsyncValidators(validators: AsyncValidatorFn | AsyncValidatorFn[]): void {\n    this.setAsyncValidators(addValidators(validators, this._rawAsyncValidators));\n  }\n\n  /**\n   * Remove a synchronous validator from this control, without affecting other validators.\n   * Validators are compared by function reference; you must pass a reference to the exact same\n   * validator function as the one that was originally set. If a provided validator is not found,\n   * it is ignored.\n   *\n   * @usageNotes\n   *\n   * ### Reference to a ValidatorFn\n   *\n   * ```\n   * // Reference to the RequiredValidator\n   * const ctrl = new FormControl<string | null>('', Validators.required);\n   * ctrl.removeValidators(Validators.required);\n   *\n   * // Reference to anonymous function inside MinValidator\n   * const minValidator = Validators.min(3);\n   * const ctrl = new FormControl<string | null>('', minValidator);\n   * expect(ctrl.hasValidator(minValidator)).toEqual(true)\n   * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)\n   *\n   * ctrl.removeValidators(minValidator);\n   * ```\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   * @param validators The validator or validators to remove.\n   */\n  removeValidators(validators: ValidatorFn | ValidatorFn[]): void {\n    this.setValidators(removeValidators(validators, this._rawValidators));\n  }\n\n  /**\n   * Remove an asynchronous validator from this control, without affecting other validators.\n   * Validators are compared by function reference; you must pass a reference to the exact same\n   * validator function as the one that was originally set. If a provided validator is not found, it\n   * is ignored.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   * @param validators The asynchronous validator or validators to remove.\n   */\n  removeAsyncValidators(validators: AsyncValidatorFn | AsyncValidatorFn[]): void {\n    this.setAsyncValidators(removeValidators(validators, this._rawAsyncValidators));\n  }\n\n  /**\n   * Check whether a synchronous validator function is present on this control. The provided\n   * validator must be a reference to the exact same function that was provided.\n   *\n   * @usageNotes\n   *\n   * ### Reference to a ValidatorFn\n   *\n   * ```\n   * // Reference to the RequiredValidator\n   * const ctrl = new FormControl<number | null>(0, Validators.required);\n   * expect(ctrl.hasValidator(Validators.required)).toEqual(true)\n   *\n   * // Reference to anonymous function inside MinValidator\n   * const minValidator = Validators.min(3);\n   * const ctrl = new FormControl<number | null>(0, minValidator);\n   * expect(ctrl.hasValidator(minValidator)).toEqual(true)\n   * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)\n   * ```\n   *\n   * @param validator The validator to check for presence. Compared by function reference.\n   * @returns Whether the provided validator was found on this control.\n   */\n  hasValidator(validator: ValidatorFn): boolean {\n    return hasValidator(this._rawValidators, validator);\n  }\n\n  /**\n   * Check whether an asynchronous validator function is present on this control. The provided\n   * validator must be a reference to the exact same function that was provided.\n   *\n   * @param validator The asynchronous validator to check for presence. Compared by function\n   *     reference.\n   * @returns Whether the provided asynchronous validator was found on this control.\n   */\n  hasAsyncValidator(validator: AsyncValidatorFn): boolean {\n    return hasValidator(this._rawAsyncValidators, validator);\n  }\n\n  /**\n   * Empties out the synchronous validator list.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   */\n  clearValidators(): void {\n    this.validator = null;\n  }\n\n  /**\n   * Empties out the async validator list.\n   *\n   * When you add or remove a validator at run time, you must call\n   * `updateValueAndValidity()` for the new validation to take effect.\n   *\n   */\n  clearAsyncValidators(): void {\n    this.asyncValidator = null;\n  }\n\n  /**\n   * Marks the control as `touched`. A control is touched by focus and\n   * blur events that do not change the value.\n   *\n   * @see {@link markAsUntouched()}\n   * @see {@link markAsDirty()}\n   * @see {@link markAsPristine()}\n   *\n   * @param opts Configuration options that determine how the control propagates changes\n   * and emits events after marking is applied.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   * * `emitEvent`: When true or not supplied (the default), the `events`\n   * observable emits a `TouchedChangeEvent` with the `touched` property being `true`.\n   * When false, no events are emitted.\n   */\n  markAsTouched(opts?: {onlySelf?: boolean; emitEvent?: boolean}): void;\n  /**\n   * @internal Used to propagate the source control downwards\n   */\n  markAsTouched(opts?: {\n    onlySelf?: boolean;\n    emitEvent?: boolean;\n    sourceControl?: AbstractControl;\n  }): void;\n  markAsTouched(\n    opts: {onlySelf?: boolean; emitEvent?: boolean; sourceControl?: AbstractControl} = {},\n  ): void {\n    const changed = this.touched === false;\n    this.touched = true;\n\n    const sourceControl = opts.sourceControl ?? this;\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsTouched({...opts, sourceControl});\n    }\n\n    if (changed && opts.emitEvent !== false) {\n      this._events.next(new TouchedChangeEvent(true, sourceControl));\n    }\n  }\n\n  /**\n   * Marks the control and all its descendant controls as `touched`.\n   * @see {@link markAsTouched()}\n   *\n   * @param opts Configuration options that determine how the control propagates changes\n   * and emits events after marking is applied.\n   * * `emitEvent`: When true or not supplied (the default), the `events`\n   * observable emits a `TouchedChangeEvent` with the `touched` property being `true`.\n   * When false, no events are emitted.\n   */\n  markAllAsTouched(opts: {emitEvent?: boolean} = {}): void {\n    this.markAsTouched({onlySelf: true, emitEvent: opts.emitEvent, sourceControl: this});\n\n    this._forEachChild((control: AbstractControl) => control.markAllAsTouched(opts));\n  }\n\n  /**\n   * Marks the control as `untouched`.\n   *\n   * If the control has any children, also marks all children as `untouched`\n   * and recalculates the `touched` status of all parent controls.\n   *\n   * @see {@link markAsTouched()}\n   * @see {@link markAsDirty()}\n   * @see {@link markAsPristine()}\n   *\n   * @param opts Configuration options that determine how the control propagates changes\n   * and emits events after the marking is applied.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   * * `emitEvent`: When true or not supplied (the default), the `events`\n   * observable emits a `TouchedChangeEvent` with the `touched` property being `false`.\n   * When false, no events are emitted.\n   */\n  markAsUntouched(opts?: {onlySelf?: boolean; emitEvent?: boolean}): void;\n  /**\n   *\n   * @internal Used to propagate the source control downwards\n   */\n  markAsUntouched(opts: {\n    onlySelf?: boolean;\n    emitEvent?: boolean;\n    sourceControl?: AbstractControl;\n  }): void;\n  markAsUntouched(\n    opts: {onlySelf?: boolean; emitEvent?: boolean; sourceControl?: AbstractControl} = {},\n  ): void {\n    const changed = this.touched === true;\n    this.touched = false;\n    this._pendingTouched = false;\n\n    const sourceControl = opts.sourceControl ?? this;\n    this._forEachChild((control: AbstractControl) => {\n      control.markAsUntouched({onlySelf: true, emitEvent: opts.emitEvent, sourceControl});\n    });\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updateTouched(opts, sourceControl);\n    }\n\n    if (changed && opts.emitEvent !== false) {\n      this._events.next(new TouchedChangeEvent(false, sourceControl));\n    }\n  }\n\n  /**\n   * Marks the control as `dirty`. A control becomes dirty when\n   * the control's value is changed through the UI; compare `markAsTouched`.\n   *\n   * @see {@link markAsTouched()}\n   * @see {@link markAsUntouched()}\n   * @see {@link markAsPristine()}\n   *\n   * @param opts Configuration options that determine how the control propagates changes\n   * and emits events after marking is applied.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   * * `emitEvent`: When true or not supplied (the default), the `events`\n   * observable emits a `PristineChangeEvent` with the `pristine` property being `false`.\n   * When false, no events are emitted.\n   */\n  markAsDirty(opts?: {onlySelf?: boolean; emitEvent?: boolean}): void;\n  /**\n   * @internal Used to propagate the source control downwards\n   */\n  markAsDirty(opts: {\n    onlySelf?: boolean;\n    emitEvent?: boolean;\n    sourceControl?: AbstractControl;\n  }): void;\n  markAsDirty(\n    opts: {onlySelf?: boolean; emitEvent?: boolean; sourceControl?: AbstractControl} = {},\n  ): void {\n    const changed = this.pristine === true;\n    this.pristine = false;\n\n    const sourceControl = opts.sourceControl ?? this;\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsDirty({...opts, sourceControl});\n    }\n\n    if (changed && opts.emitEvent !== false) {\n      this._events.next(new PristineChangeEvent(false, sourceControl));\n    }\n  }\n\n  /**\n   * Marks the control as `pristine`.\n   *\n   * If the control has any children, marks all children as `pristine`,\n   * and recalculates the `pristine` status of all parent\n   * controls.\n   *\n   * @see {@link markAsTouched()}\n   * @see {@link markAsUntouched()}\n   * @see {@link markAsDirty()}\n   *\n   * @param opts Configuration options that determine how the control emits events after\n   * marking is applied.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   * * `emitEvent`: When true or not supplied (the default), the `events`\n   * observable emits a `PristineChangeEvent` with the `pristine` property being `true`.\n   * When false, no events are emitted.\n   */\n  markAsPristine(opts?: {onlySelf?: boolean; emitEvent?: boolean}): void;\n  /**\n   * @internal Used to propagate the source control downwards\n   */\n  markAsPristine(opts: {\n    onlySelf?: boolean;\n    emitEvent?: boolean;\n    sourceControl?: AbstractControl;\n  }): void;\n  markAsPristine(\n    opts: {onlySelf?: boolean; emitEvent?: boolean; sourceControl?: AbstractControl} = {},\n  ): void {\n    const changed = this.pristine === false;\n    this.pristine = true;\n    this._pendingDirty = false;\n\n    const sourceControl = opts.sourceControl ?? this;\n    this._forEachChild((control: AbstractControl) => {\n      /** We don't propagate the source control downwards */\n      control.markAsPristine({onlySelf: true, emitEvent: opts.emitEvent});\n    });\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updatePristine(opts, sourceControl);\n    }\n\n    if (changed && opts.emitEvent !== false) {\n      this._events.next(new PristineChangeEvent(true, sourceControl));\n    }\n  }\n\n  /**\n   * Marks the control as `pending`.\n   *\n   * A control is pending while the control performs async validation.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @param opts Configuration options that determine how the control propagates changes and\n   * emits events after marking is applied.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   * * `emitEvent`: When true or not supplied (the default), the `statusChanges`\n   * observable emits an event with the latest status the control is marked pending\n   * and the `events` observable emits a `StatusChangeEvent` with the `status` property being\n   * `PENDING` When false, no events are emitted.\n   *\n   */\n  markAsPending(opts?: {onlySelf?: boolean; emitEvent?: boolean}): void;\n  /**\n   * @internal Used to propagate the source control downwards\n   */\n  markAsPending(opts: {\n    onlySelf?: boolean;\n    emitEvent?: boolean;\n    sourceControl?: AbstractControl;\n  }): void;\n  markAsPending(\n    opts: {onlySelf?: boolean; emitEvent?: boolean; sourceControl?: AbstractControl} = {},\n  ): void {\n    this.status = PENDING;\n\n    const sourceControl = opts.sourceControl ?? this;\n    if (opts.emitEvent !== false) {\n      this._events.next(new StatusChangeEvent(this.status, sourceControl));\n      (this.statusChanges as EventEmitter<FormControlStatus>).emit(this.status);\n    }\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsPending({...opts, sourceControl});\n    }\n  }\n\n  /**\n   * Disables the control. This means the control is exempt from validation checks and\n   * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n   *\n   * If the control has children, all children are also disabled.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @param opts Configuration options that determine how the control propagates\n   * changes and emits events after the control is disabled.\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   * * `emitEvent`: When true or not supplied (the default), the `statusChanges`,\n   * `valueChanges` and `events`\n   * observables emit events with the latest status and value when the control is disabled.\n   * When false, no events are emitted.\n   */\n  disable(opts?: {onlySelf?: boolean; emitEvent?: boolean}): void;\n  /**\n   * @internal Used to propagate the source control downwards\n   */\n  disable(opts: {onlySelf?: boolean; emitEvent?: boolean; sourceControl?: AbstractControl}): void;\n  disable(\n    opts: {onlySelf?: boolean; emitEvent?: boolean; sourceControl?: AbstractControl} = {},\n  ): void {\n    // If parent has been marked artificially dirty we don't want to re-calculate the\n    // parent's dirtiness based on the children.\n    const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n\n    this.status = DISABLED;\n    (this as Writable<this>).errors = null;\n    this._forEachChild((control: AbstractControl) => {\n      /** We don't propagate the source control downwards */\n      control.disable({...opts, onlySelf: true});\n    });\n    this._updateValue();\n\n    const sourceControl = opts.sourceControl ?? this;\n    if (opts.emitEvent !== false) {\n      this._events.next(new ValueChangeEvent(this.value, sourceControl));\n      this._events.next(new StatusChangeEvent(this.status, sourceControl));\n      (this.valueChanges as EventEmitter<TValue>).emit(this.value);\n      (this.statusChanges as EventEmitter<FormControlStatus>).emit(this.status);\n    }\n\n    this._updateAncestors({...opts, skipPristineCheck}, this);\n    this._onDisabledChange.forEach((changeFn) => changeFn(true));\n  }\n\n  /**\n   * Enables the control. This means the control is included in validation checks and\n   * the aggregate value of its parent. Its status recalculates based on its value and\n   * its validators.\n   *\n   * By default, if the control has children, all children are enabled.\n   *\n   * @see {@link AbstractControl.status}\n   *\n   * @param opts Configure options that control how the control propagates changes and\n   * emits events when marked as untouched\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\n   * marks all direct ancestors. Default is false.\n   * * `emitEvent`: When true or not supplied (the default), the `statusChanges`,\n   * `valueChanges` and `events`\n   * observables emit events with the latest status and value when the control is enabled.\n   * When false, no events are emitted.\n   */\n  enable(opts: {onlySelf?: boolean; emitEvent?: boolean} = {}): void {\n    // If parent has been marked artificially dirty we don't want to re-calculate the\n    // parent's dirtiness based on the children.\n    const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n\n    this.status = VALID;\n    this._forEachChild((control: AbstractControl) => {\n      control.enable({...opts, onlySelf: true});\n    });\n    this.updateValueAndValidity({onlySelf: true, emitEvent: opts.emitEvent});\n\n    this._updateAncestors({...opts, skipPristineCheck}, this);\n    this._onDisabledChange.forEach((changeFn) => changeFn(false));\n  }\n\n  private _updateAncestors(\n    opts: {onlySelf?: boolean; emitEvent?: boolean; skipPristineCheck?: boolean},\n    sourceControl: AbstractControl,\n  ): void {\n    if (this._parent && !opts.onlySelf) {\n      this._parent.updateValueAndValidity(opts);\n      if (!opts.skipPristineCheck) {\n        this._parent._updatePristine({}, sourceControl);\n      }\n      this._parent._updateTouched({}, sourceControl);\n    }\n  }\n\n  /**\n   * Sets the parent of the control\n   *\n   * @param parent The new parent.\n   */\n  setParent(parent: FormGroup | FormArray | null): void {\n    this._parent = parent;\n  }\n\n  /**\n   * Sets the value of the control. Abstract method (implemented in sub-classes).\n   */\n  abstract setValue(value: TRawValue, options?: Object): void;\n\n  /**\n   * Patches the value of the control. Abstract method (implemented in sub-classes).\n   */\n  abstract patchValue(value: TValue, options?: Object): void;\n\n  /**\n   * Resets the control. Abstract method (implemented in sub-classes).\n   */\n  abstract reset(value?: TValue, options?: Object): void;\n\n  /**\n   * The raw value of this control. For most control implementations, the raw value will include\n   * disabled children.\n   */\n  getRawValue(): any {\n    return this.value;\n  }\n\n  /**\n   * Recalculates the value and validation status of the control.\n   *\n   * By default, it also updates the value and validity of its ancestors.\n   *\n   * @param opts Configuration options determine how the control propagates changes and emits events\n   * after updates and validity checks are applied.\n   * * `onlySelf`: When true, only update this control. When false or not supplied,\n   * update all direct ancestors. Default is false.\n   * * `emitEvent`: When true or not supplied (the default), the `statusChanges`,\n   * `valueChanges` and `events`\n   * observables emit events with the latest status and value when the control is updated.\n   * When false, no events are emitted.\n   */\n  updateValueAndValidity(opts?: {onlySelf?: boolean; emitEvent?: boolean}): void;\n  /**\n   * @internal Used to propagate the source control downwards\n   */\n  updateValueAndValidity(opts: {\n    onlySelf?: boolean;\n    emitEvent?: boolean;\n    sourceControl?: AbstractControl;\n  }): void;\n  updateValueAndValidity(\n    opts: {onlySelf?: boolean; emitEvent?: boolean; sourceControl?: AbstractControl} = {},\n  ): void {\n    this._setInitialStatus();\n    this._updateValue();\n\n    if (this.enabled) {\n      const shouldHaveEmitted = this._cancelExistingSubscription();\n\n      (this as Writable<this>).errors = this._runValidator();\n      this.status = this._calculateStatus();\n\n      if (this.status === VALID || this.status === PENDING) {\n        // If the canceled subscription should have emitted\n        // we make sure the async validator emits the status change on completion\n        this._runAsyncValidator(shouldHaveEmitted, opts.emitEvent);\n      }\n    }\n\n    const sourceControl = opts.sourceControl ?? this;\n    if (opts.emitEvent !== false) {\n      this._events.next(new ValueChangeEvent<TValue>(this.value, sourceControl));\n      this._events.next(new StatusChangeEvent(this.status, sourceControl));\n      (this.valueChanges as EventEmitter<TValue>).emit(this.value);\n      (this.statusChanges as EventEmitter<FormControlStatus>).emit(this.status);\n    }\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.updateValueAndValidity({...opts, sourceControl});\n    }\n  }\n\n  /** @internal */\n  _updateTreeValidity(opts: {emitEvent?: boolean} = {emitEvent: true}): void {\n    this._forEachChild((ctrl: AbstractControl) => ctrl._updateTreeValidity(opts));\n    this.updateValueAndValidity({onlySelf: true, emitEvent: opts.emitEvent});\n  }\n\n  private _setInitialStatus() {\n    this.status = this._allControlsDisabled() ? DISABLED : VALID;\n  }\n\n  private _runValidator(): ValidationErrors | null {\n    return this.validator ? this.validator(this) : null;\n  }\n\n  private _runAsyncValidator(shouldHaveEmitted: boolean, emitEvent?: boolean): void {\n    if (this.asyncValidator) {\n      this.status = PENDING;\n      this._hasOwnPendingAsyncValidator = {emitEvent: emitEvent !== false};\n      const obs = toObservable(this.asyncValidator(this));\n      this._asyncValidationSubscription = obs.subscribe((errors: ValidationErrors | null) => {\n        this._hasOwnPendingAsyncValidator = null;\n        // This will trigger the recalculation of the validation status, which depends on\n        // the state of the asynchronous validation (whether it is in progress or not). So, it is\n        // necessary that we have updated the `_hasOwnPendingAsyncValidator` boolean flag first.\n        this.setErrors(errors, {emitEvent, shouldHaveEmitted});\n      });\n    }\n  }\n\n  private _cancelExistingSubscription(): boolean {\n    if (this._asyncValidationSubscription) {\n      this._asyncValidationSubscription.unsubscribe();\n\n      // we're cancelling the validator subscribtion, we keep if it should have emitted\n      // because we want to emit eventually if it was required at least once.\n      const shouldHaveEmitted = this._hasOwnPendingAsyncValidator?.emitEvent ?? false;\n      this._hasOwnPendingAsyncValidator = null;\n      return shouldHaveEmitted;\n    }\n    return false;\n  }\n\n  /**\n   * Sets errors on a form control when running validations manually, rather than automatically.\n   *\n   * Calling `setErrors` also updates the validity of the parent control.\n   *\n   * @param opts Configuration options that determine how the control propagates\n   * changes and emits events after the control errors are set.\n   * * `emitEvent`: When true or not supplied (the default), the `statusChanges`\n   * observable emits an event after the errors are set.\n   *\n   * @usageNotes\n   *\n   * ### Manually set the errors for a control\n   *\n   * ```ts\n   * const login = new FormControl('someLogin');\n   * login.setErrors({\n   *   notUnique: true\n   * });\n   *\n   * expect(login.valid).toEqual(false);\n   * expect(login.errors).toEqual({ notUnique: true });\n   *\n   * login.setValue('someOtherLogin');\n   *\n   * expect(login.valid).toEqual(true);\n   * ```\n   */\n  setErrors(errors: ValidationErrors | null, opts?: {emitEvent?: boolean}): void;\n\n  /** @internal */\n  setErrors(\n    errors: ValidationErrors | null,\n    opts?: {emitEvent?: boolean; shouldHaveEmitted?: boolean},\n  ): void;\n  setErrors(\n    errors: ValidationErrors | null,\n    opts: {emitEvent?: boolean; shouldHaveEmitted?: boolean} = {},\n  ): void {\n    (this as Writable<this>).errors = errors;\n    this._updateControlsErrors(opts.emitEvent !== false, this, opts.shouldHaveEmitted);\n  }\n\n  /**\n   * Retrieves a child control given the control's name or path.\n   *\n   * This signature for get supports strings and `const` arrays (`.get(['foo', 'bar'] as const)`).\n   */\n  get<P extends string | readonly (string | number)[]>(\n    path: P,\n  ): AbstractControl<ɵGetProperty<TRawValue, P>> | null;\n\n  /**\n   * Retrieves a child control given the control's name or path.\n   *\n   * This signature for `get` supports non-const (mutable) arrays. Inferred type\n   * information will not be as robust, so prefer to pass a `readonly` array if possible.\n   */\n  get<P extends string | Array<string | number>>(\n    path: P,\n  ): AbstractControl<ɵGetProperty<TRawValue, P>> | null;\n\n  /**\n   * Retrieves a child control given the control's name or path.\n   *\n   * @param path A dot-delimited string or array of string/number values that define the path to the\n   * control. If a string is provided, passing it as a string literal will result in improved type\n   * information. Likewise, if an array is provided, passing it `as const` will cause improved type\n   * information to be available.\n   *\n   * @usageNotes\n   * ### Retrieve a nested control\n   *\n   * For example, to get a `name` control nested within a `person` sub-group:\n   *\n   * * `this.form.get('person.name');`\n   *\n   * -OR-\n   *\n   * * `this.form.get(['person', 'name'] as const);` // `as const` gives improved typings\n   *\n   * ### Retrieve a control in a FormArray\n   *\n   * When accessing an element inside a FormArray, you can use an element index.\n   * For example, to get a `price` control from the first element in an `items` array you can use:\n   *\n   * * `this.form.get('items.0.price');`\n   *\n   * -OR-\n   *\n   * * `this.form.get(['items', 0, 'price']);`\n   */\n  get<P extends string | (string | number)[]>(\n    path: P,\n  ): AbstractControl<ɵGetProperty<TRawValue, P>> | null {\n    let currPath: Array<string | number> | string = path;\n    if (currPath == null) return null;\n    if (!Array.isArray(currPath)) currPath = currPath.split('.');\n    if (currPath.length === 0) return null;\n    return currPath.reduce(\n      (control: AbstractControl | null, name) => control && control._find(name),\n      this,\n    );\n  }\n\n  /**\n   * @description\n   * Reports error data for the control with the given path.\n   *\n   * @param errorCode The code of the error to check\n   * @param path A list of control names that designates how to move from the current control\n   * to the control that should be queried for errors.\n   *\n   * @usageNotes\n   * For example, for the following `FormGroup`:\n   *\n   * ```ts\n   * form = new FormGroup({\n   *   address: new FormGroup({ street: new FormControl() })\n   * });\n   * ```\n   *\n   * The path to the 'street' control from the root form would be 'address' -> 'street'.\n   *\n   * It can be provided to this method in one of two formats:\n   *\n   * 1. An array of string control names, e.g. `['address', 'street']`\n   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n   *\n   * @returns error data for that particular error. If the control or error is not present,\n   * null is returned.\n   */\n  getError(errorCode: string, path?: Array<string | number> | string): any {\n    const control = path ? this.get(path) : this;\n    return control && control.errors ? control.errors[errorCode] : null;\n  }\n\n  /**\n   * @description\n   * Reports whether the control with the given path has the error specified.\n   *\n   * @param errorCode The code of the error to check\n   * @param path A list of control names that designates how to move from the current control\n   * to the control that should be queried for errors.\n   *\n   * @usageNotes\n   * For example, for the following `FormGroup`:\n   *\n   * ```ts\n   * form = new FormGroup({\n   *   address: new FormGroup({ street: new FormControl() })\n   * });\n   * ```\n   *\n   * The path to the 'street' control from the root form would be 'address' -> 'street'.\n   *\n   * It can be provided to this method in one of two formats:\n   *\n   * 1. An array of string control names, e.g. `['address', 'street']`\n   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n   *\n   * If no path is given, this method checks for the error on the current control.\n   *\n   * @returns whether the given error is present in the control at the given path.\n   *\n   * If the control is not present, false is returned.\n   */\n  hasError(errorCode: string, path?: Array<string | number> | string): boolean {\n    return !!this.getError(errorCode, path);\n  }\n\n  /**\n   * Retrieves the top-level ancestor of this control.\n   */\n  get root(): AbstractControl {\n    let x: AbstractControl = this;\n\n    while (x._parent) {\n      x = x._parent;\n    }\n\n    return x;\n  }\n\n  /** @internal */\n  _updateControlsErrors(\n    emitEvent: boolean,\n    changedControl: AbstractControl,\n    shouldHaveEmitted?: boolean,\n  ): void {\n    this.status = this._calculateStatus();\n\n    if (emitEvent) {\n      (this.statusChanges as EventEmitter<FormControlStatus>).emit(this.status);\n    }\n\n    // The Events Observable expose a slight different bevahior than the statusChanges obs\n    // An async validator will still emit a StatusChangeEvent is a previously cancelled\n    // async validator has emitEvent set to true\n    if (emitEvent || shouldHaveEmitted) {\n      this._events.next(new StatusChangeEvent(this.status, changedControl));\n    }\n\n    if (this._parent) {\n      this._parent._updateControlsErrors(emitEvent, changedControl, shouldHaveEmitted);\n    }\n  }\n\n  /** @internal */\n  _initObservables() {\n    // TODO: this should be piped from events() but is breaking in G3\n    (this as Writable<this>).valueChanges = new EventEmitter();\n    (this as Writable<this>).statusChanges = new EventEmitter();\n  }\n\n  private _calculateStatus(): FormControlStatus {\n    if (this._allControlsDisabled()) return DISABLED;\n    if (this.errors) return INVALID;\n    if (this._hasOwnPendingAsyncValidator || this._anyControlsHaveStatus(PENDING)) return PENDING;\n    if (this._anyControlsHaveStatus(INVALID)) return INVALID;\n    return VALID;\n  }\n\n  /** @internal */\n  abstract _updateValue(): void;\n\n  /** @internal */\n  abstract _forEachChild(cb: (c: AbstractControl) => void): void;\n\n  /** @internal */\n  abstract _anyControls(condition: (c: AbstractControl) => boolean): boolean;\n\n  /** @internal */\n  abstract _allControlsDisabled(): boolean;\n\n  /** @internal */\n  abstract _syncPendingControls(): boolean;\n\n  /** @internal */\n  _anyControlsHaveStatus(status: FormControlStatus): boolean {\n    return this._anyControls((control: AbstractControl) => control.status === status);\n  }\n\n  /** @internal */\n  _anyControlsDirty(): boolean {\n    return this._anyControls((control: AbstractControl) => control.dirty);\n  }\n\n  /** @internal */\n  _anyControlsTouched(): boolean {\n    return this._anyControls((control: AbstractControl) => control.touched);\n  }\n\n  /** @internal */\n  _updatePristine(opts: {onlySelf?: boolean}, changedControl: AbstractControl): void {\n    const newPristine = !this._anyControlsDirty();\n    const changed = this.pristine !== newPristine;\n    this.pristine = newPristine;\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updatePristine(opts, changedControl);\n    }\n\n    if (changed) {\n      this._events.next(new PristineChangeEvent(this.pristine, changedControl));\n    }\n  }\n\n  /** @internal */\n  _updateTouched(opts: {onlySelf?: boolean} = {}, changedControl: AbstractControl): void {\n    this.touched = this._anyControlsTouched();\n    this._events.next(new TouchedChangeEvent(this.touched, changedControl));\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updateTouched(opts, changedControl);\n    }\n  }\n\n  /** @internal */\n  _onDisabledChange: Array<(isDisabled: boolean) => void> = [];\n\n  /** @internal */\n  _registerOnCollectionChange(fn: () => void): void {\n    this._onCollectionChange = fn;\n  }\n\n  /** @internal */\n  _setUpdateStrategy(opts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null): void {\n    if (isOptionsObj(opts) && opts.updateOn != null) {\n      this._updateOn = opts.updateOn!;\n    }\n  }\n  /**\n   * Check to see if parent has been marked artificially dirty.\n   *\n   * @internal\n   */\n  private _parentMarkedDirty(onlySelf?: boolean): boolean {\n    const parentDirty = this._parent && this._parent.dirty;\n    return !onlySelf && !!parentDirty && !this._parent!._anyControlsDirty();\n  }\n\n  /** @internal */\n  _find(name: string | number): AbstractControl | null {\n    return null;\n  }\n\n  /**\n   * Internal implementation of the `setValidators` method. Needs to be separated out into a\n   * different method, because it is called in the constructor and it can break cases where\n   * a control is extended.\n   */\n  private _assignValidators(validators: ValidatorFn | ValidatorFn[] | null): void {\n    this._rawValidators = Array.isArray(validators) ? validators.slice() : validators;\n    this._composedValidatorFn = coerceToValidator(this._rawValidators);\n  }\n\n  /**\n   * Internal implementation of the `setAsyncValidators` method. Needs to be separated out into a\n   * different method, because it is called in the constructor and it can break cases where\n   * a control is extended.\n   */\n  private _assignAsyncValidators(validators: AsyncValidatorFn | AsyncValidatorFn[] | null): void {\n    this._rawAsyncValidators = Array.isArray(validators) ? validators.slice() : validators;\n    this._composedAsyncValidatorFn = coerceToAsyncValidator(this._rawAsyncValidators);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵWritable as Writable} from '@angular/core';\n\nimport {AsyncValidatorFn, ValidatorFn} from '../directives/validators';\n\nimport {\n  AbstractControl,\n  AbstractControlOptions,\n  assertAllValuesPresent,\n  assertControlPresent,\n  pickAsyncValidators,\n  pickValidators,\n  ɵRawValue,\n  ɵTypedOrUntyped,\n  ɵValue,\n} from './abstract_model';\n\n/**\n * FormGroupValue extracts the type of `.value` from a FormGroup's inner object type. The untyped\n * case falls back to {[key: string]: any}.\n *\n * Angular uses this type internally to support Typed Forms; do not use it directly.\n *\n * For internal use only.\n */\nexport type ɵFormGroupValue<T extends {[K in keyof T]?: AbstractControl<any>}> = ɵTypedOrUntyped<\n  T,\n  Partial<{[K in keyof T]: ɵValue<T[K]>}>,\n  {[key: string]: any}\n>;\n\n/**\n * FormGroupRawValue extracts the type of `.getRawValue()` from a FormGroup's inner object type. The\n * untyped case falls back to {[key: string]: any}.\n *\n * Angular uses this type internally to support Typed Forms; do not use it directly.\n *\n * For internal use only.\n */\nexport type ɵFormGroupRawValue<T extends {[K in keyof T]?: AbstractControl<any>}> = ɵTypedOrUntyped<\n  T,\n  {[K in keyof T]: ɵRawValue<T[K]>},\n  {[key: string]: any}\n>;\n\n/**\n * OptionalKeys returns the union of all optional keys in the object.\n *\n * Angular uses this type internally to support Typed Forms; do not use it directly.\n */\nexport type ɵOptionalKeys<T> = {\n  [K in keyof T]-?: undefined extends T[K] ? K : never;\n}[keyof T];\n\n/**\n * Tracks the value and validity state of a group of `FormControl` instances.\n *\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\n * with each control name as the key.  It calculates its status by reducing the status values\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the four fundamental building blocks used to define forms in Angular,\n * along with `FormControl`, `FormArray`, and `FormRecord`.\n *\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\n * argument. The key for each child registers the name for the control.\n *\n * `FormGroup` is intended for use cases where the keys are known ahead of time.\n * If you need to dynamically add and remove controls, use {@link FormRecord} instead.\n *\n * `FormGroup` accepts an optional type parameter `TControl`, which is an object type with inner\n * control types as values.\n *\n * @usageNotes\n *\n * ### Create a form group with 2 controls\n *\n * ```ts\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * ### The type argument, and optional controls\n *\n * `FormGroup` accepts one generic argument, which is an object containing its inner controls.\n * This type will usually be inferred automatically, but you can always specify it explicitly if you\n * wish.\n *\n * If you have controls that are optional (i.e. they can be removed, you can use the `?` in the\n * type):\n *\n * ```ts\n * const form = new FormGroup<{\n *   first: FormControl<string|null>,\n *   middle?: FormControl<string|null>, // Middle name is optional.\n *   last: FormControl<string|null>,\n * }>({\n *   first: new FormControl('Nancy'),\n *   last: new FormControl('Drew'),\n * });\n * ```\n *\n * ### Create a form group with a group-level validator\n *\n * You include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ```ts\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like `FormControl` instances, you choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```ts\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\n * ```\n *\n * ### Set the updateOn property for all controls in a form group\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *   one: new FormControl()\n * }, { updateOn: 'blur' });\n * ```\n *\n * ### Using a FormGroup with optional controls\n *\n * It is possible to have optional controls in a FormGroup. An optional control can be removed later\n * using `removeControl`, and can be omitted when calling `reset`. Optional controls must be\n * declared optional in the group's type.\n *\n * ```ts\n * const c = new FormGroup<{one?: FormControl<string>}>({\n *   one: new FormControl('')\n * });\n * ```\n *\n * Notice that `c.value.one` has type `string|null|undefined`. This is because calling `c.reset({})`\n * without providing the optional key `one` will cause it to become `null`.\n *\n * @publicApi\n */\nexport class FormGroup<\n  TControl extends {[K in keyof TControl]: AbstractControl<any>} = any,\n> extends AbstractControl<\n  ɵTypedOrUntyped<TControl, ɵFormGroupValue<TControl>, any>,\n  ɵTypedOrUntyped<TControl, ɵFormGroupRawValue<TControl>, any>\n> {\n  /**\n   * Creates a new `FormGroup` instance.\n   *\n   * @param controls A collection of child controls. The key for each child is the name\n   * under which it is registered.\n   *\n   * @param validatorOrOpts A synchronous validator function, or an array of\n   * such functions, or an `AbstractControlOptions` object that contains validation functions\n   * and a validation trigger.\n   *\n   * @param asyncValidator A single async validator or array of async validator functions\n   *\n   */\n  constructor(\n    controls: TControl,\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\n  ) {\n    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n    (typeof ngDevMode === 'undefined' || ngDevMode) && validateFormGroupControls(controls);\n    this.controls = controls;\n    this._initObservables();\n    this._setUpdateStrategy(validatorOrOpts);\n    this._setUpControls();\n    this.updateValueAndValidity({\n      onlySelf: true,\n      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n      // `VALID` or `INVALID`. The status should be broadcasted via the `statusChanges` observable,\n      // so we set `emitEvent` to `true` to allow that during the control creation process.\n      emitEvent: !!this.asyncValidator,\n    });\n  }\n\n  public controls: ɵTypedOrUntyped<TControl, TControl, {[key: string]: AbstractControl<any>}>;\n\n  /**\n   * Registers a control with the group's list of controls. In a strongly-typed group, the control\n   * must be in the group's type (possibly as an optional key).\n   *\n   * This method does not update the value or validity of the control.\n   * Use {@link FormGroup#addControl addControl} instead.\n   *\n   * @param name The control name to register in the collection\n   * @param control Provides the control for the given name\n   */\n  registerControl<K extends string & keyof TControl>(name: K, control: TControl[K]): TControl[K];\n  registerControl(\n    this: FormGroup<{[key: string]: AbstractControl<any>}>,\n    name: string,\n    control: AbstractControl<any>,\n  ): AbstractControl<any>;\n\n  registerControl<K extends string & keyof TControl>(name: K, control: TControl[K]): TControl[K] {\n    if (this.controls[name]) return (this.controls as any)[name];\n    this.controls[name] = control;\n    control.setParent(this as FormGroup);\n    control._registerOnCollectionChange(this._onCollectionChange);\n    return control;\n  }\n\n  /**\n   * Add a control to this group. In a strongly-typed group, the control must be in the group's type\n   * (possibly as an optional key).\n   *\n   * If a control with a given name already exists, it would *not* be replaced with a new one.\n   * If you want to replace an existing control, use the {@link FormGroup#setControl setControl}\n   * method instead. This method also updates the value and validity of the control.\n   *\n   * @param name The control name to add to the collection\n   * @param control Provides the control for the given name\n   * @param options Specifies whether this FormGroup instance should emit events after a new\n   *     control is added.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when the control is\n   * added. When false, no events are emitted.\n   */\n  addControl(\n    this: FormGroup<{[key: string]: AbstractControl<any>}>,\n    name: string,\n    control: AbstractControl,\n    options?: {emitEvent?: boolean},\n  ): void;\n  addControl<K extends string & keyof TControl>(\n    name: K,\n    control: Required<TControl>[K],\n    options?: {\n      emitEvent?: boolean;\n    },\n  ): void;\n\n  addControl<K extends string & keyof TControl>(\n    name: K,\n    control: Required<TControl>[K],\n    options: {\n      emitEvent?: boolean;\n    } = {},\n  ): void {\n    this.registerControl(name, control);\n    this.updateValueAndValidity({emitEvent: options.emitEvent});\n    this._onCollectionChange();\n  }\n\n  removeControl(\n    this: FormGroup<{[key: string]: AbstractControl<any>}>,\n    name: string,\n    options?: {\n      emitEvent?: boolean;\n    },\n  ): void;\n  removeControl<S extends string>(\n    name: ɵOptionalKeys<TControl> & S,\n    options?: {\n      emitEvent?: boolean;\n    },\n  ): void;\n\n  /**\n   * Remove a control from this group. In a strongly-typed group, required controls cannot be\n   * removed.\n   *\n   * This method also updates the value and validity of the control.\n   *\n   * @param name The control name to remove from the collection\n   * @param options Specifies whether this FormGroup instance should emit events after a\n   *     control is removed.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when the control is\n   * removed. When false, no events are emitted.\n   */\n  removeControl(name: string, options: {emitEvent?: boolean} = {}): void {\n    if ((this.controls as any)[name])\n      (this.controls as any)[name]._registerOnCollectionChange(() => {});\n    delete (this.controls as any)[name];\n    this.updateValueAndValidity({emitEvent: options.emitEvent});\n    this._onCollectionChange();\n  }\n\n  /**\n   * Replace an existing control. In a strongly-typed group, the control must be in the group's type\n   * (possibly as an optional key).\n   *\n   * If a control with a given name does not exist in this `FormGroup`, it will be added.\n   *\n   * @param name The control name to replace in the collection\n   * @param control Provides the control for the given name\n   * @param options Specifies whether this FormGroup instance should emit events after an\n   *     existing control is replaced.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when the control is\n   * replaced with a new one. When false, no events are emitted.\n   */\n  setControl<K extends string & keyof TControl>(\n    name: K,\n    control: TControl[K],\n    options?: {\n      emitEvent?: boolean;\n    },\n  ): void;\n  setControl(\n    this: FormGroup<{[key: string]: AbstractControl<any>}>,\n    name: string,\n    control: AbstractControl,\n    options?: {emitEvent?: boolean},\n  ): void;\n\n  setControl<K extends string & keyof TControl>(\n    name: K,\n    control: TControl[K],\n    options: {\n      emitEvent?: boolean;\n    } = {},\n  ): void {\n    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});\n    delete this.controls[name];\n    if (control) this.registerControl(name, control);\n    this.updateValueAndValidity({emitEvent: options.emitEvent});\n    this._onCollectionChange();\n  }\n\n  /**\n   * Check whether there is an enabled control with the given name in the group.\n   *\n   * Reports false for disabled controls. If you'd like to check for existence in the group\n   * only, use {@link AbstractControl#get get} instead.\n   *\n   * @param controlName The control name to check for existence in the collection\n   *\n   * @returns false for disabled controls, true otherwise.\n   */\n  contains<K extends string>(controlName: K): boolean;\n  contains(this: FormGroup<{[key: string]: AbstractControl<any>}>, controlName: string): boolean;\n\n  contains<K extends string & keyof TControl>(controlName: K): boolean {\n    return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n  }\n\n  /**\n   * Sets the value of the `FormGroup`. It accepts an object that matches\n   * the structure of the group, with control names as keys.\n   *\n   * @usageNotes\n   * ### Set the complete value for the form group\n   *\n   * ```ts\n   * const form = new FormGroup({\n   *   first: new FormControl(),\n   *   last: new FormControl()\n   * });\n   *\n   * console.log(form.value);   // {first: null, last: null}\n   *\n   * form.setValue({first: 'Nancy', last: 'Drew'});\n   * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n   * ```\n   *\n   * @throws When strict checks fail, such as setting the value of a control\n   * that doesn't exist or if you exclude a value of a control that does exist.\n   *\n   * @param value The new value for the control that matches the structure of the group.\n   * @param options Configuration options that determine how the control propagates changes\n   * and emits events after the value changes.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n   * false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control value is updated.\n   * When false, no events are emitted.\n   */\n  override setValue(\n    value: ɵFormGroupRawValue<TControl>,\n    options: {\n      onlySelf?: boolean;\n      emitEvent?: boolean;\n    } = {},\n  ): void {\n    assertAllValuesPresent(this, true, value);\n    (Object.keys(value) as Array<keyof TControl>).forEach((name) => {\n      assertControlPresent(this, true, name as any);\n      (this.controls as any)[name].setValue((value as any)[name], {\n        onlySelf: true,\n        emitEvent: options.emitEvent,\n      });\n    });\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * Patches the value of the `FormGroup`. It accepts an object with control\n   * names as keys, and does its best to match the values to the correct controls\n   * in the group.\n   *\n   * It accepts both super-sets and sub-sets of the group without throwing an error.\n   *\n   * @usageNotes\n   * ### Patch the value for a form group\n   *\n   * ```ts\n   * const form = new FormGroup({\n   *    first: new FormControl(),\n   *    last: new FormControl()\n   * });\n   * console.log(form.value);   // {first: null, last: null}\n   *\n   * form.patchValue({first: 'Nancy'});\n   * console.log(form.value);   // {first: 'Nancy', last: null}\n   * ```\n   *\n   * @param value The object that matches the structure of the group.\n   * @param options Configuration options that determine how the control propagates changes and\n   * emits events after the value is patched.\n   * * `onlySelf`: When true, each change only affects this control and not its parent. Default is\n   * true.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when the control value\n   * is updated. When false, no events are emitted. The configuration options are passed to\n   * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.\n   */\n  override patchValue(\n    value: ɵFormGroupValue<TControl>,\n    options: {\n      onlySelf?: boolean;\n      emitEvent?: boolean;\n    } = {},\n  ): void {\n    // Even though the `value` argument type doesn't allow `null` and `undefined` values, the\n    // `patchValue` can be called recursively and inner data structures might have these values, so\n    // we just ignore such cases when a field containing FormGroup instance receives `null` or\n    // `undefined` as a value.\n    if (value == null /* both `null` and `undefined` */) return;\n    (Object.keys(value) as Array<keyof TControl>).forEach((name) => {\n      // The compiler cannot see through the uninstantiated conditional type of `this.controls`, so\n      // `as any` is required.\n      const control = (this.controls as any)[name];\n      if (control) {\n        control.patchValue(\n          /* Guaranteed to be present, due to the outer forEach. */ value[\n            name as keyof ɵFormGroupValue<TControl>\n          ]!,\n          {onlySelf: true, emitEvent: options.emitEvent},\n        );\n      }\n    });\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * Resets the `FormGroup`, marks all descendants `pristine` and `untouched` and sets\n   * the value of all descendants to their default values, or null if no defaults were provided.\n   *\n   * You reset to a specific form state by passing in a map of states\n   * that matches the structure of your form, with control names as keys. The state\n   * is a standalone value or a form state object with both a value and a disabled\n   * status.\n   *\n   * @param value Resets the control with an initial value,\n   * or an object that defines the initial value and disabled state.\n   *\n   * @param options Configuration options that determine how the control propagates changes\n   * and emits events when the group is reset.\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n   * false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control is reset.\n   * When false, no events are emitted.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   *\n   * @usageNotes\n   *\n   * ### Reset the form group values\n   *\n   * ```ts\n   * const form = new FormGroup({\n   *   first: new FormControl('first name'),\n   *   last: new FormControl('last name')\n   * });\n   *\n   * console.log(form.value);  // {first: 'first name', last: 'last name'}\n   *\n   * form.reset({ first: 'name', last: 'last name' });\n   *\n   * console.log(form.value);  // {first: 'name', last: 'last name'}\n   * ```\n   *\n   * ### Reset the form group values and disabled status\n   *\n   * ```ts\n   * const form = new FormGroup({\n   *   first: new FormControl('first name'),\n   *   last: new FormControl('last name')\n   * });\n   *\n   * form.reset({\n   *   first: {value: 'name', disabled: true},\n   *   last: 'last'\n   * });\n   *\n   * console.log(form.value);  // {last: 'last'}\n   * console.log(form.get('first').status);  // 'DISABLED'\n   * ```\n   */\n  override reset(\n    value: ɵTypedOrUntyped<\n      TControl,\n      ɵFormGroupValue<TControl>,\n      any\n    > = {} as unknown as ɵFormGroupValue<TControl>,\n    options: {onlySelf?: boolean; emitEvent?: boolean} = {},\n  ): void {\n    this._forEachChild((control: AbstractControl, name) => {\n      control.reset(value ? (value as any)[name] : null, {\n        onlySelf: true,\n        emitEvent: options.emitEvent,\n      });\n    });\n    this._updatePristine(options, this);\n    this._updateTouched(options, this);\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * The aggregate value of the `FormGroup`, including any disabled controls.\n   *\n   * Retrieves all values regardless of disabled status.\n   */\n  override getRawValue(): ɵTypedOrUntyped<TControl, ɵFormGroupRawValue<TControl>, any> {\n    return this._reduceChildren({}, (acc, control, name) => {\n      (acc as any)[name] = (control as any).getRawValue();\n      return acc;\n    }) as any;\n  }\n\n  /** @internal */\n  override _syncPendingControls(): boolean {\n    let subtreeUpdated = this._reduceChildren(false, (updated: boolean, child) => {\n      return child._syncPendingControls() ? true : updated;\n    });\n    if (subtreeUpdated) this.updateValueAndValidity({onlySelf: true});\n    return subtreeUpdated;\n  }\n\n  /** @internal */\n  override _forEachChild(cb: (v: any, k: any) => void): void {\n    Object.keys(this.controls).forEach((key) => {\n      // The list of controls can change (for ex. controls might be removed) while the loop\n      // is running (as a result of invoking Forms API in `valueChanges` subscription), so we\n      // have to null check before invoking the callback.\n      const control = (this.controls as any)[key];\n      control && cb(control, key);\n    });\n  }\n\n  /** @internal */\n  _setUpControls(): void {\n    this._forEachChild((control) => {\n      control.setParent(this);\n      control._registerOnCollectionChange(this._onCollectionChange);\n    });\n  }\n\n  /** @internal */\n  override _updateValue(): void {\n    (this as Writable<this>).value = this._reduceValue() as any;\n  }\n\n  /** @internal */\n  override _anyControls(condition: (c: AbstractControl) => boolean): boolean {\n    for (const [controlName, control] of Object.entries(this.controls)) {\n      if (this.contains(controlName as any) && condition(control as any)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal */\n  _reduceValue(): Partial<TControl> {\n    let acc: Partial<TControl> = {};\n    return this._reduceChildren(acc, (acc, control, name) => {\n      if (control.enabled || this.disabled) {\n        acc[name] = control.value;\n      }\n      return acc;\n    });\n  }\n\n  /** @internal */\n  _reduceChildren<T, K extends keyof TControl>(\n    initValue: T,\n    fn: (acc: T, control: TControl[K], name: K) => T,\n  ): T {\n    let res = initValue;\n    this._forEachChild((control: TControl[K], name: K) => {\n      res = fn(res, control, name);\n    });\n    return res;\n  }\n\n  /** @internal */\n  override _allControlsDisabled(): boolean {\n    for (const controlName of Object.keys(this.controls) as Array<keyof TControl>) {\n      if ((this.controls as any)[controlName].enabled) {\n        return false;\n      }\n    }\n    return Object.keys(this.controls).length > 0 || this.disabled;\n  }\n\n  /** @internal */\n  override _find(name: string | number): AbstractControl | null {\n    return this.controls.hasOwnProperty(name as string)\n      ? (this.controls as any)[name as keyof TControl]\n      : null;\n  }\n}\n\n/**\n * Will validate that none of the controls has a key with a dot\n * Throws other wise\n */\nfunction validateFormGroupControls<TControl>(controls: {\n  [K in keyof TControl]: AbstractControl<any, any>;\n}) {\n  const invalidKeys = Object.keys(controls).filter((key) => key.includes('.'));\n  if (invalidKeys.length > 0) {\n    // TODO: make this an error once there are no more uses in G3\n    console.warn(\n      `FormGroup keys cannot include \\`.\\`, please replace the keys for: ${invalidKeys.join(',')}.`,\n    );\n  }\n}\n\ninterface UntypedFormGroupCtor {\n  new (\n    controls: {[key: string]: AbstractControl},\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\n  ): UntypedFormGroup;\n\n  /**\n   * The presence of an explicit `prototype` property provides backwards-compatibility for apps that\n   * manually inspect the prototype chain.\n   */\n  prototype: FormGroup<any>;\n}\n\n/**\n * UntypedFormGroup is a non-strongly-typed version of `FormGroup`.\n */\nexport type UntypedFormGroup = FormGroup<any>;\n\nexport const UntypedFormGroup: UntypedFormGroupCtor = FormGroup;\n\n/**\n * @description\n * Asserts that the given control is an instance of `FormGroup`\n *\n * @publicApi\n */\nexport const isFormGroup = (control: unknown): control is FormGroup => control instanceof FormGroup;\n\n/**\n * Tracks the value and validity state of a collection of `FormControl` instances, each of which has\n * the same value type.\n *\n * `FormRecord` is very similar to {@link FormGroup}, except it can be used with a dynamic keys,\n * with controls added and removed as needed.\n *\n * `FormRecord` accepts one generic argument, which describes the type of the controls it contains.\n *\n * @usageNotes\n *\n * ```ts\n * let numbers = new FormRecord({bill: new FormControl('415-123-456')});\n * numbers.addControl('bob', new FormControl('415-234-567'));\n * numbers.removeControl('bill');\n * ```\n *\n * @publicApi\n */\nexport class FormRecord<TControl extends AbstractControl = AbstractControl> extends FormGroup<{\n  [key: string]: TControl;\n}> {}\n\nexport interface FormRecord<TControl> {\n  /**\n   * Registers a control with the records's list of controls.\n   *\n   * See `FormGroup#registerControl` for additional information.\n   */\n  registerControl(name: string, control: TControl): TControl;\n\n  /**\n   * Add a control to this group.\n   *\n   * See `FormGroup#addControl` for additional information.\n   */\n  addControl(name: string, control: TControl, options?: {emitEvent?: boolean}): void;\n\n  /**\n   * Remove a control from this group.\n   *\n   * See `FormGroup#removeControl` for additional information.\n   */\n  removeControl(name: string, options?: {emitEvent?: boolean}): void;\n\n  /**\n   * Replace an existing control.\n   *\n   * See `FormGroup#setControl` for additional information.\n   */\n  setControl(name: string, control: TControl, options?: {emitEvent?: boolean}): void;\n\n  /**\n   * Check whether there is an enabled control with the given name in the group.\n   *\n   * See `FormGroup#contains` for additional information.\n   */\n  contains(controlName: string): boolean;\n\n  /**\n   * Sets the value of the `FormRecord`. It accepts an object that matches\n   * the structure of the group, with control names as keys.\n   *\n   * See `FormGroup#setValue` for additional information.\n   */\n  setValue(\n    value: {[key: string]: ɵRawValue<TControl>},\n    options?: {\n      onlySelf?: boolean;\n      emitEvent?: boolean;\n    },\n  ): void;\n\n  /**\n   * Patches the value of the `FormRecord`. It accepts an object with control\n   * names as keys, and does its best to match the values to the correct controls\n   * in the group.\n   *\n   * See `FormGroup#patchValue` for additional information.\n   */\n  patchValue(\n    value: {[key: string]: ɵValue<TControl>},\n    options?: {\n      onlySelf?: boolean;\n      emitEvent?: boolean;\n    },\n  ): void;\n\n  /**\n   * Resets the `FormRecord`, marks all descendants `pristine` and `untouched` and sets\n   * the value of all descendants to null.\n   *\n   * See `FormGroup#reset` for additional information.\n   */\n  reset(\n    value?: {[key: string]: ɵValue<TControl>},\n    options?: {\n      onlySelf?: boolean;\n      emitEvent?: boolean;\n    },\n  ): void;\n\n  /**\n   * The aggregate value of the `FormRecord`, including any disabled controls.\n   *\n   * See `FormGroup#getRawValue` for additional information.\n   */\n  getRawValue(): {[key: string]: ɵRawValue<TControl>};\n}\n\n/**\n * @description\n * Asserts that the given control is an instance of `FormRecord`\n *\n * @publicApi\n */\nexport const isFormRecord = (control: unknown): control is FormRecord =>\n  control instanceof FormRecord;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\nimport type {AbstractControl} from '../model/abstract_model';\nimport type {FormArray} from '../model/form_array';\nimport type {FormControl} from '../model/form_control';\nimport type {FormGroup} from '../model/form_group';\nimport {getControlAsyncValidators, getControlValidators, mergeValidators} from '../validators';\n\nimport type {AbstractControlDirective} from './abstract_control_directive';\nimport type {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport type {ControlContainer} from './control_container';\nimport {BuiltInControlValueAccessor, ControlValueAccessor} from './control_value_accessor';\nimport {DefaultValueAccessor} from './default_value_accessor';\nimport type {NgControl} from './ng_control';\nimport type {FormArrayName} from './reactive_directives/form_group_name';\nimport {ngModelWarning} from './reactive_errors';\nimport {AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\n/**\n * Token to provide to allow SetDisabledState to always be called when a CVA is added, regardless of\n * whether the control is disabled or enabled.\n *\n * @see {@link FormsModule#withconfig}\n */\nexport const CALL_SET_DISABLED_STATE = new InjectionToken(\n  typeof ngDevMode === 'undefined' || ngDevMode ? 'CallSetDisabledState' : '',\n  {\n    providedIn: 'root',\n    factory: () => setDisabledStateDefault,\n  },\n);\n\n/**\n * The type for CALL_SET_DISABLED_STATE. If `always`, then ControlValueAccessor will always call\n * `setDisabledState` when attached, which is the most correct behavior. Otherwise, it will only be\n * called when disabled, which is the legacy behavior for compatibility.\n *\n * @publicApi\n * @see {@link FormsModule#withconfig}\n */\nexport type SetDisabledStateOption = 'whenDisabledForLegacyCode' | 'always';\n\n/**\n * Whether to use the fixed setDisabledState behavior by default.\n */\nexport const setDisabledStateDefault: SetDisabledStateOption = 'always';\n\nexport function controlPath(name: string | null, parent: ControlContainer): string[] {\n  return [...parent.path!, name!];\n}\n\n/**\n * Links a Form control and a Form directive by setting up callbacks (such as `onChange`) on both\n * instances. This function is typically invoked when form directive is being initialized.\n *\n * @param control Form control instance that should be linked.\n * @param dir Directive that should be linked with a given control.\n */\nexport function setUpControl(\n  control: FormControl,\n  dir: NgControl,\n  callSetDisabledState: SetDisabledStateOption = setDisabledStateDefault,\n): void {\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (!control) _throwError(dir, 'Cannot find control with');\n    if (!dir.valueAccessor) _throwMissingValueAccessorError(dir);\n  }\n\n  setUpValidators(control, dir);\n\n  dir.valueAccessor!.writeValue(control.value);\n\n  // The legacy behavior only calls the CVA's `setDisabledState` if the control is disabled.\n  // If the `callSetDisabledState` option is set to `always`, then this bug is fixed and\n  // the method is always called.\n  if (control.disabled || callSetDisabledState === 'always') {\n    dir.valueAccessor!.setDisabledState?.(control.disabled);\n  }\n\n  setUpViewChangePipeline(control, dir);\n  setUpModelChangePipeline(control, dir);\n\n  setUpBlurPipeline(control, dir);\n\n  setUpDisabledChangeHandler(control, dir);\n}\n\n/**\n * Reverts configuration performed by the `setUpControl` control function.\n * Effectively disconnects form control with a given form directive.\n * This function is typically invoked when corresponding form directive is being destroyed.\n *\n * @param control Form control which should be cleaned up.\n * @param dir Directive that should be disconnected from a given control.\n * @param validateControlPresenceOnChange Flag that indicates whether onChange handler should\n *     contain asserts to verify that it's not called once directive is destroyed. We need this flag\n *     to avoid potentially breaking changes caused by better control cleanup introduced in #39235.\n */\nexport function cleanUpControl(\n  control: FormControl | null,\n  dir: NgControl,\n  validateControlPresenceOnChange: boolean = true,\n): void {\n  const noop = () => {\n    if (validateControlPresenceOnChange && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      _noControlError(dir);\n    }\n  };\n\n  // The `valueAccessor` field is typically defined on FromControl and FormControlName directive\n  // instances and there is a logic in `selectValueAccessor` function that throws if it's not the\n  // case. We still check the presence of `valueAccessor` before invoking its methods to make sure\n  // that cleanup works correctly if app code or tests are setup to ignore the error thrown from\n  // `selectValueAccessor`. See https://github.com/angular/angular/issues/40521.\n  if (dir.valueAccessor) {\n    dir.valueAccessor.registerOnChange(noop);\n    dir.valueAccessor.registerOnTouched(noop);\n  }\n\n  cleanUpValidators(control, dir);\n\n  if (control) {\n    dir._invokeOnDestroyCallbacks();\n    control._registerOnCollectionChange(() => {});\n  }\n}\n\nfunction registerOnValidatorChange<V>(validators: (V | Validator)[], onChange: () => void): void {\n  validators.forEach((validator: V | Validator) => {\n    if ((<Validator>validator).registerOnValidatorChange)\n      (<Validator>validator).registerOnValidatorChange!(onChange);\n  });\n}\n\n/**\n * Sets up disabled change handler function on a given form control if ControlValueAccessor\n * associated with a given directive instance supports the `setDisabledState` call.\n *\n * @param control Form control where disabled change handler should be setup.\n * @param dir Corresponding directive instance associated with this control.\n */\nexport function setUpDisabledChangeHandler(control: FormControl, dir: NgControl): void {\n  if (dir.valueAccessor!.setDisabledState) {\n    const onDisabledChange = (isDisabled: boolean) => {\n      dir.valueAccessor!.setDisabledState!(isDisabled);\n    };\n    control.registerOnDisabledChange(onDisabledChange);\n\n    // Register a callback function to cleanup disabled change handler\n    // from a control instance when a directive is destroyed.\n    dir._registerOnDestroy(() => {\n      control._unregisterOnDisabledChange(onDisabledChange);\n    });\n  }\n}\n\n/**\n * Sets up sync and async directive validators on provided form control.\n * This function merges validators from the directive into the validators of the control.\n *\n * @param control Form control where directive validators should be setup.\n * @param dir Directive instance that contains validators to be setup.\n */\nexport function setUpValidators(control: AbstractControl, dir: AbstractControlDirective): void {\n  const validators = getControlValidators(control);\n  if (dir.validator !== null) {\n    control.setValidators(mergeValidators<ValidatorFn>(validators, dir.validator));\n  } else if (typeof validators === 'function') {\n    // If sync validators are represented by a single validator function, we force the\n    // `Validators.compose` call to happen by executing the `setValidators` function with\n    // an array that contains that function. We need this to avoid possible discrepancies in\n    // validators behavior, so sync validators are always processed by the `Validators.compose`.\n    // Note: we should consider moving this logic inside the `setValidators` function itself, so we\n    // have consistent behavior on AbstractControl API level. The same applies to the async\n    // validators logic below.\n    control.setValidators([validators]);\n  }\n\n  const asyncValidators = getControlAsyncValidators(control);\n  if (dir.asyncValidator !== null) {\n    control.setAsyncValidators(\n      mergeValidators<AsyncValidatorFn>(asyncValidators, dir.asyncValidator),\n    );\n  } else if (typeof asyncValidators === 'function') {\n    control.setAsyncValidators([asyncValidators]);\n  }\n\n  // Re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n  const onValidatorChange = () => control.updateValueAndValidity();\n  registerOnValidatorChange<ValidatorFn>(dir._rawValidators, onValidatorChange);\n  registerOnValidatorChange<AsyncValidatorFn>(dir._rawAsyncValidators, onValidatorChange);\n}\n\n/**\n * Cleans up sync and async directive validators on provided form control.\n * This function reverts the setup performed by the `setUpValidators` function, i.e.\n * removes directive-specific validators from a given control instance.\n *\n * @param control Form control from where directive validators should be removed.\n * @param dir Directive instance that contains validators to be removed.\n * @returns true if a control was updated as a result of this action.\n */\nexport function cleanUpValidators(\n  control: AbstractControl | null,\n  dir: AbstractControlDirective,\n): boolean {\n  let isControlUpdated = false;\n  if (control !== null) {\n    if (dir.validator !== null) {\n      const validators = getControlValidators(control);\n      if (Array.isArray(validators) && validators.length > 0) {\n        // Filter out directive validator function.\n        const updatedValidators = validators.filter((validator) => validator !== dir.validator);\n        if (updatedValidators.length !== validators.length) {\n          isControlUpdated = true;\n          control.setValidators(updatedValidators);\n        }\n      }\n    }\n\n    if (dir.asyncValidator !== null) {\n      const asyncValidators = getControlAsyncValidators(control);\n      if (Array.isArray(asyncValidators) && asyncValidators.length > 0) {\n        // Filter out directive async validator function.\n        const updatedAsyncValidators = asyncValidators.filter(\n          (asyncValidator) => asyncValidator !== dir.asyncValidator,\n        );\n        if (updatedAsyncValidators.length !== asyncValidators.length) {\n          isControlUpdated = true;\n          control.setAsyncValidators(updatedAsyncValidators);\n        }\n      }\n    }\n  }\n\n  // Clear onValidatorChange callbacks by providing a noop function.\n  const noop = () => {};\n  registerOnValidatorChange<ValidatorFn>(dir._rawValidators, noop);\n  registerOnValidatorChange<AsyncValidatorFn>(dir._rawAsyncValidators, noop);\n\n  return isControlUpdated;\n}\n\nfunction setUpViewChangePipeline(control: FormControl, dir: NgControl): void {\n  dir.valueAccessor!.registerOnChange((newValue: any) => {\n    control._pendingValue = newValue;\n    control._pendingChange = true;\n    control._pendingDirty = true;\n\n    if (control.updateOn === 'change') updateControl(control, dir);\n  });\n}\n\nfunction setUpBlurPipeline(control: FormControl, dir: NgControl): void {\n  dir.valueAccessor!.registerOnTouched(() => {\n    control._pendingTouched = true;\n\n    if (control.updateOn === 'blur' && control._pendingChange) updateControl(control, dir);\n    if (control.updateOn !== 'submit') control.markAsTouched();\n  });\n}\n\nfunction updateControl(control: FormControl, dir: NgControl): void {\n  if (control._pendingDirty) control.markAsDirty();\n  control.setValue(control._pendingValue, {emitModelToViewChange: false});\n  dir.viewToModelUpdate(control._pendingValue);\n  control._pendingChange = false;\n}\n\nfunction setUpModelChangePipeline(control: FormControl, dir: NgControl): void {\n  const onChange = (newValue?: any, emitModelEvent?: boolean) => {\n    // control -> view\n    dir.valueAccessor!.writeValue(newValue);\n\n    // control -> ngModel\n    if (emitModelEvent) dir.viewToModelUpdate(newValue);\n  };\n  control.registerOnChange(onChange);\n\n  // Register a callback function to cleanup onChange handler\n  // from a control instance when a directive is destroyed.\n  dir._registerOnDestroy(() => {\n    control._unregisterOnChange(onChange);\n  });\n}\n\n/**\n * Links a FormGroup or FormArray instance and corresponding Form directive by setting up validators\n * present in the view.\n *\n * @param control FormGroup or FormArray instance that should be linked.\n * @param dir Directive that provides view validators.\n */\nexport function setUpFormContainer(\n  control: FormGroup | FormArray,\n  dir: AbstractFormGroupDirective | FormArrayName,\n) {\n  if (control == null && (typeof ngDevMode === 'undefined' || ngDevMode))\n    _throwError(dir, 'Cannot find control with');\n  setUpValidators(control, dir);\n}\n\n/**\n * Reverts the setup performed by the `setUpFormContainer` function.\n *\n * @param control FormGroup or FormArray instance that should be cleaned up.\n * @param dir Directive that provided view validators.\n * @returns true if a control was updated as a result of this action.\n */\nexport function cleanUpFormContainer(\n  control: FormGroup | FormArray,\n  dir: AbstractFormGroupDirective | FormArrayName,\n): boolean {\n  return cleanUpValidators(control, dir);\n}\n\nfunction _noControlError(dir: NgControl) {\n  return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\n\nfunction _throwError(dir: AbstractControlDirective, message: string): void {\n  const messageEnd = _describeControlLocation(dir);\n  throw new Error(`${message} ${messageEnd}`);\n}\n\nfunction _describeControlLocation(dir: AbstractControlDirective): string {\n  const path = dir.path;\n  if (path && path.length > 1) return `path: '${path.join(' -> ')}'`;\n  if (path?.[0]) return `name: '${path}'`;\n  return 'unspecified name attribute';\n}\n\nfunction _throwMissingValueAccessorError(dir: AbstractControlDirective) {\n  const loc = _describeControlLocation(dir);\n  throw new RuntimeError(\n    RuntimeErrorCode.NG_MISSING_VALUE_ACCESSOR,\n    `No value accessor for form control ${loc}.`,\n  );\n}\n\nfunction _throwInvalidValueAccessorError(dir: AbstractControlDirective) {\n  const loc = _describeControlLocation(dir);\n  throw new RuntimeError(\n    RuntimeErrorCode.NG_VALUE_ACCESSOR_NOT_PROVIDED,\n    `Value accessor was not provided as an array for form control with ${loc}. ` +\n      `Check that the \\`NG_VALUE_ACCESSOR\\` token is configured as a \\`multi: true\\` provider.`,\n  );\n}\n\nexport function isPropertyUpdated(changes: {[key: string]: any}, viewModel: any): boolean {\n  if (!changes.hasOwnProperty('model')) return false;\n  const change = changes['model'];\n\n  if (change.isFirstChange()) return true;\n  return !Object.is(viewModel, change.currentValue);\n}\n\nexport function isBuiltInAccessor(valueAccessor: ControlValueAccessor): boolean {\n  // Check if a given value accessor is an instance of a class that directly extends\n  // `BuiltInControlValueAccessor` one.\n  return Object.getPrototypeOf(valueAccessor.constructor) === BuiltInControlValueAccessor;\n}\n\nexport function syncPendingControls(\n  form: FormGroup,\n  directives: Set<NgControl> | NgControl[],\n): void {\n  form._syncPendingControls();\n  directives.forEach((dir: NgControl) => {\n    const control = dir.control as FormControl;\n    if (control.updateOn === 'submit' && control._pendingChange) {\n      dir.viewToModelUpdate(control._pendingValue);\n      control._pendingChange = false;\n    }\n  });\n}\n\n// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\nexport function selectValueAccessor(\n  dir: NgControl,\n  valueAccessors: ControlValueAccessor[],\n): ControlValueAccessor | null {\n  if (!valueAccessors) return null;\n\n  if (!Array.isArray(valueAccessors) && (typeof ngDevMode === 'undefined' || ngDevMode))\n    _throwInvalidValueAccessorError(dir);\n\n  let defaultAccessor: ControlValueAccessor | undefined = undefined;\n  let builtinAccessor: ControlValueAccessor | undefined = undefined;\n  let customAccessor: ControlValueAccessor | undefined = undefined;\n\n  valueAccessors.forEach((v: ControlValueAccessor) => {\n    if (v.constructor === DefaultValueAccessor) {\n      defaultAccessor = v;\n    } else if (isBuiltInAccessor(v)) {\n      if (builtinAccessor && (typeof ngDevMode === 'undefined' || ngDevMode))\n        _throwError(dir, 'More than one built-in value accessor matches form control with');\n      builtinAccessor = v;\n    } else {\n      if (customAccessor && (typeof ngDevMode === 'undefined' || ngDevMode))\n        _throwError(dir, 'More than one custom value accessor matches form control with');\n      customAccessor = v;\n    }\n  });\n\n  if (customAccessor) return customAccessor;\n  if (builtinAccessor) return builtinAccessor;\n  if (defaultAccessor) return defaultAccessor;\n\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    _throwError(dir, 'No valid value accessor for form control with');\n  }\n  return null;\n}\n\nexport function removeListItem<T>(list: T[], el: T): void {\n  const index = list.indexOf(el);\n  if (index > -1) list.splice(index, 1);\n}\n\n// TODO(kara): remove after deprecation period\nexport function _ngModelWarning(\n  name: string,\n  type: {_ngModelWarningSentOnce: boolean},\n  instance: {_ngModelWarningSent: boolean},\n  warningConfig: string | null,\n) {\n  if (warningConfig === 'never') return;\n\n  if (\n    ((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce) ||\n    (warningConfig === 'always' && !instance._ngModelWarningSent)\n  ) {\n    console.warn(ngModelWarning(name));\n    type._ngModelWarningSentOnce = true;\n    instance._ngModelWarningSent = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  AfterViewInit,\n  computed,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Provider,\n  Self,\n  signal,\n  untracked,\n  ɵWritable as Writable,\n} from '@angular/core';\n\nimport {AbstractControl, FormHooks} from '../model/abstract_model';\nimport {FormControl} from '../model/form_control';\nimport {FormGroup} from '../model/form_group';\nimport {\n  composeAsyncValidators,\n  composeValidators,\n  NG_ASYNC_VALIDATORS,\n  NG_VALIDATORS,\n} from '../validators';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {NgControl} from './ng_control';\nimport type {NgModel} from './ng_model';\nimport type {NgModelGroup} from './ng_model_group';\nimport {\n  CALL_SET_DISABLED_STATE,\n  SetDisabledStateOption,\n  setUpControl,\n  setUpFormContainer,\n  syncPendingControls,\n} from './shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nconst formDirectiveProvider: Provider = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgForm),\n};\n\nconst resolvedPromise = (() => Promise.resolve())();\n\n/**\n * @description\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You optionally export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * gives you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, use `NgModel` with a `name`\n * attribute. You may use `NgModelGroup` to create sub-groups within the form.\n *\n * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event emits the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * To import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * @usageNotes\n *\n * ### Listening for form submission\n *\n * The following example shows how to capture the form values from the \"ngSubmit\" event.\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Setting the update options\n *\n * The following example shows you how to change the \"updateOn\" option from its default using\n * ngFormOptions.\n *\n * ```html\n * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n * </form>\n * ```\n *\n * ### Native DOM validation UI\n *\n * In order to prevent the native DOM form validation UI from interfering with Angular's form\n * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever\n * `FormModule` or `ReactiveFormModule` are imported into the application.\n * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the\n * `ngNativeValidate` attribute to the `<form>` element:\n *\n * ```html\n * <form ngNativeValidate>\n *   ...\n * </form>\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: 'form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  outputs: ['ngSubmit'],\n  exportAs: 'ngForm',\n  standalone: false,\n})\nexport class NgForm extends ControlContainer implements Form, AfterViewInit {\n  /**\n   * @description\n   * Returns whether the form submission has been triggered.\n   */\n  get submitted(): boolean {\n    return untracked(this.submittedReactive);\n  }\n  /** @internal */\n  readonly _submitted = computed(() => this.submittedReactive());\n  private readonly submittedReactive = signal(false);\n\n  private _directives = new Set<NgModel>();\n\n  /**\n   * @description\n   * The `FormGroup` instance created for this form.\n   */\n  form: FormGroup;\n\n  /**\n   * @description\n   * Event emitter for the \"ngSubmit\" event\n   */\n  ngSubmit = new EventEmitter();\n\n  /**\n   * @description\n   * Tracks options for the `NgForm` instance.\n   *\n   * **updateOn**: Sets the default `updateOn` value for all child `NgModels` below it\n   * unless explicitly set by a child `NgModel` using `ngModelOptions`). Defaults to 'change'.\n   * Possible values: `'change'` | `'blur'` | `'submit'`.\n   *\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('ngFormOptions') options!: {updateOn?: FormHooks};\n\n  constructor(\n    @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator | ValidatorFn)[],\n    @Optional()\n    @Self()\n    @Inject(NG_ASYNC_VALIDATORS)\n    asyncValidators: (AsyncValidator | AsyncValidatorFn)[],\n    @Optional()\n    @Inject(CALL_SET_DISABLED_STATE)\n    private callSetDisabledState?: SetDisabledStateOption,\n  ) {\n    super();\n    this.form = new FormGroup(\n      {},\n      composeValidators(validators),\n      composeAsyncValidators(asyncValidators),\n    );\n  }\n\n  /** @nodoc */\n  ngAfterViewInit() {\n    this._setUpdateStrategy();\n  }\n\n  /**\n   * @description\n   * The directive instance.\n   */\n  override get formDirective(): Form {\n    return this;\n  }\n\n  /**\n   * @description\n   * The internal `FormGroup` instance.\n   */\n  override get control(): FormGroup {\n    return this.form;\n  }\n\n  /**\n   * @description\n   * Returns an array representing the path to this group. Because this directive\n   * always lives at the top level of a form, it is always an empty array.\n   */\n  override get path(): string[] {\n    return [];\n  }\n\n  /**\n   * @description\n   * Returns a map of the controls in this group.\n   */\n  get controls(): {[key: string]: AbstractControl} {\n    return this.form.controls;\n  }\n\n  /**\n   * @description\n   * Method that sets up the control directive in this group, re-calculates its value\n   * and validity, and adds the instance to the internal list of directives.\n   *\n   * @param dir The `NgModel` directive instance.\n   */\n  addControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      (dir as Writable<NgModel>).control = <FormControl>(\n        container.registerControl(dir.name, dir.control)\n      );\n      setUpControl(dir.control, dir, this.callSetDisabledState);\n      dir.control.updateValueAndValidity({emitEvent: false});\n      this._directives.add(dir);\n    });\n  }\n\n  /**\n   * @description\n   * Retrieves the `FormControl` instance from the provided `NgModel` directive.\n   *\n   * @param dir The `NgModel` directive instance.\n   */\n  getControl(dir: NgModel): FormControl {\n    return <FormControl>this.form.get(dir.path);\n  }\n\n  /**\n   * @description\n   * Removes the `NgModel` instance from the internal list of directives\n   *\n   * @param dir The `NgModel` directive instance.\n   */\n  removeControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n      this._directives.delete(dir);\n    });\n  }\n\n  /**\n   * @description\n   * Adds a new `NgModelGroup` directive instance to the form.\n   *\n   * @param dir The `NgModelGroup` directive instance.\n   */\n  addFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      const group = new FormGroup({});\n      setUpFormContainer(group, dir);\n      container.registerControl(dir.name, group);\n      group.updateValueAndValidity({emitEvent: false});\n    });\n  }\n\n  /**\n   * @description\n   * Removes the `NgModelGroup` directive instance from the form.\n   *\n   * @param dir The `NgModelGroup` directive instance.\n   */\n  removeFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n\n  /**\n   * @description\n   * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance\n   *\n   * @param dir The `NgModelGroup` directive instance.\n   */\n  getFormGroup(dir: NgModelGroup): FormGroup {\n    return <FormGroup>this.form.get(dir.path);\n  }\n\n  /**\n   * Sets the new value for the provided `NgControl` directive.\n   *\n   * @param dir The `NgControl` directive instance.\n   * @param value The new value for the directive's control.\n   */\n  updateModel(dir: NgControl, value: any): void {\n    resolvedPromise.then(() => {\n      const ctrl = <FormControl>this.form.get(dir.path!);\n      ctrl.setValue(value);\n    });\n  }\n\n  /**\n   * @description\n   * Sets the value for this `FormGroup`.\n   *\n   * @param value The new value\n   */\n  setValue(value: {[key: string]: any}): void {\n    this.control.setValue(value);\n  }\n\n  /**\n   * @description\n   * Method called when the \"submit\" event is triggered on the form.\n   * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n   *\n   * @param $event The \"submit\" event object\n   */\n  onSubmit($event: Event): boolean {\n    this.submittedReactive.set(true);\n    syncPendingControls(this.form, this._directives);\n    this.ngSubmit.emit($event);\n    // Forms with `method=\"dialog\"` have some special behavior\n    // that won't reload the page and that shouldn't be prevented.\n    return ($event?.target as HTMLFormElement | null)?.method === 'dialog';\n  }\n\n  /**\n   * @description\n   * Method called when the \"reset\" event is triggered on the form.\n   */\n  onReset(): void {\n    this.resetForm();\n  }\n\n  /**\n   * @description\n   * Resets the form to an initial value and resets its submitted status.\n   *\n   * @param value The new value for the form.\n   */\n  resetForm(value: any = undefined): void {\n    this.form.reset(value);\n    this.submittedReactive.set(false);\n  }\n\n  private _setUpdateStrategy() {\n    if (this.options && this.options.updateOn != null) {\n      this.form._updateOn = this.options.updateOn;\n    }\n  }\n\n  private _findContainer(path: string[]): FormGroup {\n    path.pop();\n    return path.length ? <FormGroup>this.form.get(path) : this.form;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport function removeListItem<T>(list: T[], el: T): void {\n  const index = list.indexOf(el);\n  if (index > -1) list.splice(index, 1);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵWritable as Writable} from '@angular/core';\n\nimport {AsyncValidatorFn, ValidatorFn} from '../directives/validators';\nimport {removeListItem} from '../util';\n\nimport {\n  AbstractControl,\n  AbstractControlOptions,\n  isOptionsObj,\n  pickAsyncValidators,\n  pickValidators,\n} from './abstract_model';\n\n/**\n * FormControlState is a boxed form value. It is an object with a `value` key and a `disabled` key.\n *\n * @publicApi\n */\nexport interface FormControlState<T> {\n  value: T;\n  disabled: boolean;\n}\n\n/**\n * Interface for options provided to a `FormControl`.\n *\n * This interface extends all options from {@link AbstractControlOptions}, plus some options\n * unique to `FormControl`.\n *\n * @publicApi\n */\nexport interface FormControlOptions extends AbstractControlOptions {\n  /**\n   * @description\n   * Whether to use the initial value used to construct the `FormControl` as its default value\n   * as well. If this option is false or not provided, the default value of a FormControl is `null`.\n   * When a FormControl is reset without an explicit value, its value reverts to\n   * its default value.\n   */\n  nonNullable?: boolean;\n\n  /**\n   * @deprecated Use `nonNullable` instead.\n   */\n  initialValueIsDefault?: boolean;\n}\n\n/**\n * Tracks the value and validation status of an individual form control.\n *\n * This is one of the four fundamental building blocks of Angular forms, along with\n * `FormGroup`, `FormArray` and `FormRecord`. It extends the `AbstractControl` class that\n * implements most of the base functionality for accessing the value, validation status,\n * user interactions and events.\n *\n * `FormControl` takes a single generic argument, which describes the type of its value. This\n * argument always implicitly includes `null` because the control can be reset. To change this\n * behavior, set `nonNullable` or see the usage notes below.\n *\n * See [usage examples below](#usage-notes).\n *\n * @see {@link AbstractControl}\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see [Usage Notes](#usage-notes)\n *\n * @publicApi\n *\n * @overriddenImplementation ɵFormControlCtor\n *\n * @usageNotes\n *\n * ### Initializing Form Controls\n *\n * Instantiate a `FormControl`, with an initial value.\n *\n * ```ts\n * const control = new FormControl('some value');\n * console.log(control.value);     // 'some value'\n * ```\n *\n * The following example initializes the control with a form state object. The `value`\n * and `disabled` keys are required in this case.\n *\n * ```ts\n * const control = new FormControl({ value: 'n/a', disabled: true });\n * console.log(control.value);     // 'n/a'\n * console.log(control.status);    // 'DISABLED'\n * ```\n *\n * The following example initializes the control with a synchronous validator.\n *\n * ```ts\n * const control = new FormControl('', Validators.required);\n * console.log(control.value);      // ''\n * console.log(control.status);     // 'INVALID'\n * ```\n *\n * The following example initializes the control using an options object.\n *\n * ```ts\n * const control = new FormControl('', {\n *    validators: Validators.required,\n *    asyncValidators: myAsyncValidator\n * });\n * ```\n *\n * ### The single type argument\n *\n * `FormControl` accepts a generic argument, which describes the type of its value.\n * In most cases, this argument will be inferred.\n *\n * If you are initializing the control to `null`, or you otherwise wish to provide a\n * wider type, you may specify the argument explicitly:\n *\n * ```ts\n * let fc = new FormControl<string|null>(null);\n * fc.setValue('foo');\n * ```\n *\n * You might notice that `null` is always added to the type of the control.\n * This is because the control will become `null` if you call `reset`. You can change\n * this behavior by setting `{nonNullable: true}`.\n *\n * ### Configure the control to update on a blur event\n *\n * Set the `updateOn` option to `'blur'` to update on the blur `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'blur' });\n * ```\n *\n * ### Configure the control to update on a submit event\n *\n * Set the `updateOn` option to `'submit'` to update on a submit `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'submit' });\n * ```\n *\n * ### Reset the control back to a specific value\n *\n * You reset to a specific form state by passing through a standalone\n * value or a form state object that contains both a value and a disabled state\n * (these are the only two properties that cannot be calculated).\n *\n * ```ts\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n *\n * control.reset('Drew');\n *\n * console.log(control.value); // 'Drew'\n * ```\n *\n * ### Reset the control to its initial value\n *\n * If you wish to always reset the control to its initial value (instead of null),\n * you can pass the `nonNullable` option:\n *\n * ```ts\n * const control = new FormControl('Nancy', {nonNullable: true});\n *\n * console.log(control.value); // 'Nancy'\n *\n * control.reset();\n *\n * console.log(control.value); // 'Nancy'\n * ```\n *\n * ### Reset the control back to an initial value and disabled\n *\n * ```ts\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n * console.log(control.status); // 'VALID'\n *\n * control.reset({ value: 'Drew', disabled: true });\n *\n * console.log(control.value); // 'Drew'\n * console.log(control.status); // 'DISABLED'\n * ```\n */\nexport interface FormControl<TValue = any> extends AbstractControl<TValue> {\n  /**\n   * The default value of this FormControl, used whenever the control is reset without an explicit\n   * value. See {@link FormControlOptions#nonNullable} for more information on configuring\n   * a default value.\n   */\n  readonly defaultValue: TValue;\n\n  /** @internal */\n  _onChange: Function[];\n\n  /**\n   * This field holds a pending value that has not yet been applied to the form's value.\n   * @internal\n   */\n  _pendingValue: TValue;\n\n  /** @internal */\n  _pendingChange: boolean;\n\n  /**\n   * Sets a new value for the form control.\n   *\n   * @param value The new value for the control.\n   * @param options Configuration options that determine how the control propagates changes\n   * and emits events when the value changes.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n   * false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control value is updated.\n   * When false, no events are emitted.\n   * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an\n   * `onChange` event to\n   * update the view.\n   * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an\n   * `ngModelChange`\n   * event to update the model.\n   *\n   */\n  setValue(\n    value: TValue,\n    options?: {\n      onlySelf?: boolean;\n      emitEvent?: boolean;\n      emitModelToViewChange?: boolean;\n      emitViewToModelChange?: boolean;\n    },\n  ): void;\n\n  /**\n   * Patches the value of a control.\n   *\n   * This function is functionally the same as {@link FormControl#setValue setValue} at this level.\n   * It exists for symmetry with {@link FormGroup#patchValue patchValue} on `FormGroups` and\n   * `FormArrays`, where it does behave differently.\n   *\n   * @see {@link FormControl#setValue} for options\n   */\n  patchValue(\n    value: TValue,\n    options?: {\n      onlySelf?: boolean;\n      emitEvent?: boolean;\n      emitModelToViewChange?: boolean;\n      emitViewToModelChange?: boolean;\n    },\n  ): void;\n\n  /**\n   * Resets the form control, marking it `pristine` and `untouched`, and resetting\n   * the value. The new value will be the provided value (if passed), `null`, or the initial value\n   * if `nonNullable` was set in the constructor via {@link FormControlOptions}.\n   *\n   * ```ts\n   * // By default, the control will reset to null.\n   * const dog = new FormControl('spot');\n   * dog.reset(); // dog.value is null\n   *\n   * // If this flag is set, the control will instead reset to the initial value.\n   * const cat = new FormControl('tabby', {nonNullable: true});\n   * cat.reset(); // cat.value is \"tabby\"\n   *\n   * // A value passed to reset always takes precedence.\n   * const fish = new FormControl('finn', {nonNullable: true});\n   * fish.reset('bubble'); // fish.value is \"bubble\"\n   * ```\n   *\n   * @param formState Resets the control with an initial value,\n   * or an object that defines the initial value and disabled state.\n   *\n   * @param options Configuration options that determine how the control propagates changes\n   * and emits events after the value changes.\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n   * false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control is reset.\n   * When false, no events are emitted.\n   *\n   */\n  reset(\n    formState?: TValue | FormControlState<TValue>,\n    options?: {\n      onlySelf?: boolean;\n      emitEvent?: boolean;\n    },\n  ): void;\n\n  /**\n   * For a simple FormControl, the raw value is equivalent to the value.\n   */\n  getRawValue(): TValue;\n\n  /**\n   * @internal\n   */\n  _updateValue(): void;\n\n  /**\n   * @internal\n   */\n  _anyControls(condition: (c: AbstractControl) => boolean): boolean;\n\n  /**\n   * @internal\n   */\n  _allControlsDisabled(): boolean;\n\n  /**\n   * Register a listener for change events.\n   *\n   * @param fn The method that is called when the value changes\n   */\n  registerOnChange(fn: Function): void;\n\n  /**\n   * Internal function to unregister a change events listener.\n   * @internal\n   */\n  _unregisterOnChange(fn: (value?: any, emitModelEvent?: boolean) => void): void;\n\n  /**\n   * Register a listener for disabled events.\n   *\n   * @param fn The method that is called when the disabled status changes.\n   */\n  registerOnDisabledChange(fn: (isDisabled: boolean) => void): void;\n\n  /**\n   * Internal function to unregister a disabled event listener.\n   * @internal\n   */\n  _unregisterOnDisabledChange(fn: (isDisabled: boolean) => void): void;\n\n  /**\n   * @internal\n   */\n  _forEachChild(cb: (c: AbstractControl) => void): void;\n\n  /** @internal */\n  _syncPendingControls(): boolean;\n}\n\n// This internal interface is present to avoid a naming clash, resulting in the wrong `FormControl`\n// symbol being used.\ntype FormControlInterface<TValue = any> = FormControl<TValue>;\n\n/**\n * Various available constructors for `FormControl`.\n * Do not use this interface directly. Instead, use `FormControl`:\n * ```ts\n * const fc = new FormControl('foo');\n * ```\n * This symbol is prefixed with ɵ to make plain that it is an internal symbol.\n */\nexport interface ɵFormControlCtor {\n  /**\n   * Construct a FormControl with no initial value or validators.\n   */\n  new (): FormControl<any>;\n\n  /**\n   * Creates a new `FormControl` instance.\n   *\n   * @param value Initializes the control with an initial value,\n   * or an object that defines the initial value and disabled state.\n   *\n   * @param opts A `FormControlOptions` object that contains validation functions and a\n   * validation trigger. `nonNullable` have to be `true`\n   */\n  new <T = any>(\n    value: FormControlState<T> | T,\n    opts: FormControlOptions & {nonNullable: true},\n  ): FormControl<T>;\n\n  /**\n   * @deprecated Use `nonNullable` instead.\n   */\n  new <T = any>(\n    value: FormControlState<T> | T,\n    opts: FormControlOptions & {\n      initialValueIsDefault: true;\n    },\n  ): FormControl<T>;\n\n  /**\n   * @deprecated When passing an `options` argument, the `asyncValidator` argument has no effect.\n   */\n  new <T = any>(\n    value: FormControlState<T> | T,\n    opts: FormControlOptions,\n    asyncValidator: AsyncValidatorFn | AsyncValidatorFn[],\n  ): FormControl<T | null>;\n\n  /**\n   * Creates a new `FormControl` instance.\n   *\n   * @param value Initializes the control with an initial value,\n   * or an object that defines the initial value and disabled state.\n   *\n   * @param validatorOrOpts A synchronous validator function, or an array of\n   * such functions, or a `FormControlOptions` object that contains validation functions\n   * and a validation trigger.\n   *\n   * @param asyncValidator A single async validator or array of async validator functions\n   */\n  new <T = any>(\n    value: FormControlState<T> | T,\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | FormControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\n  ): FormControl<T | null>;\n\n  /**\n   * The presence of an explicit `prototype` property provides backwards-compatibility for apps that\n   * manually inspect the prototype chain.\n   */\n  prototype: FormControl<any>;\n}\n\nfunction isFormControlState(formState: unknown): formState is FormControlState<unknown> {\n  return (\n    typeof formState === 'object' &&\n    formState !== null &&\n    Object.keys(formState).length === 2 &&\n    'value' in formState &&\n    'disabled' in formState\n  );\n}\n\nexport const FormControl: ɵFormControlCtor = class FormControl<TValue = any>\n  extends AbstractControl<TValue>\n  implements FormControlInterface<TValue>\n{\n  /** @publicApi */\n  public readonly defaultValue: TValue = null as unknown as TValue;\n\n  /** @internal */\n  _onChange: Array<Function> = [];\n\n  /** @internal */\n  _pendingValue!: TValue;\n\n  /** @internal */\n  _pendingChange: boolean = false;\n\n  constructor(\n    // formState and defaultValue will only be null if T is nullable\n    formState: FormControlState<TValue> | TValue = null as unknown as TValue,\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | FormControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\n  ) {\n    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n    this._applyFormState(formState);\n    this._setUpdateStrategy(validatorOrOpts);\n    this._initObservables();\n    this.updateValueAndValidity({\n      onlySelf: true,\n      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n      // `VALID` or `INVALID`.\n      // The status should be broadcasted via the `statusChanges` observable, so we set\n      // `emitEvent` to `true` to allow that during the control creation process.\n      emitEvent: !!this.asyncValidator,\n    });\n    if (\n      isOptionsObj(validatorOrOpts) &&\n      (validatorOrOpts.nonNullable || validatorOrOpts.initialValueIsDefault)\n    ) {\n      if (isFormControlState(formState)) {\n        this.defaultValue = formState.value;\n      } else {\n        this.defaultValue = formState;\n      }\n    }\n  }\n\n  override setValue(\n    value: TValue,\n    options: {\n      onlySelf?: boolean;\n      emitEvent?: boolean;\n      emitModelToViewChange?: boolean;\n      emitViewToModelChange?: boolean;\n    } = {},\n  ): void {\n    (this as Writable<this>).value = this._pendingValue = value;\n    if (this._onChange.length && options.emitModelToViewChange !== false) {\n      this._onChange.forEach((changeFn) =>\n        changeFn(this.value, options.emitViewToModelChange !== false),\n      );\n    }\n    this.updateValueAndValidity(options);\n  }\n\n  override patchValue(\n    value: TValue,\n    options: {\n      onlySelf?: boolean;\n      emitEvent?: boolean;\n      emitModelToViewChange?: boolean;\n      emitViewToModelChange?: boolean;\n    } = {},\n  ): void {\n    this.setValue(value, options);\n  }\n\n  override reset(\n    formState: TValue | FormControlState<TValue> = this.defaultValue,\n    options: {onlySelf?: boolean; emitEvent?: boolean} = {},\n  ): void {\n    this._applyFormState(formState);\n    this.markAsPristine(options);\n    this.markAsUntouched(options);\n    this.setValue(this.value, options);\n    this._pendingChange = false;\n  }\n\n  /**  @internal */\n  override _updateValue(): void {}\n\n  /**  @internal */\n  override _anyControls(condition: (c: AbstractControl) => boolean): boolean {\n    return false;\n  }\n\n  /**  @internal */\n  override _allControlsDisabled(): boolean {\n    return this.disabled;\n  }\n\n  registerOnChange(fn: Function): void {\n    this._onChange.push(fn);\n  }\n\n  /** @internal */\n  _unregisterOnChange(fn: (value?: any, emitModelEvent?: boolean) => void): void {\n    removeListItem(this._onChange, fn);\n  }\n\n  registerOnDisabledChange(fn: (isDisabled: boolean) => void): void {\n    this._onDisabledChange.push(fn);\n  }\n\n  /** @internal */\n  _unregisterOnDisabledChange(fn: (isDisabled: boolean) => void): void {\n    removeListItem(this._onDisabledChange, fn);\n  }\n\n  /** @internal */\n  override _forEachChild(cb: (c: AbstractControl) => void): void {}\n\n  /** @internal */\n  override _syncPendingControls(): boolean {\n    if (this.updateOn === 'submit') {\n      if (this._pendingDirty) this.markAsDirty();\n      if (this._pendingTouched) this.markAsTouched();\n      if (this._pendingChange) {\n        this.setValue(this._pendingValue, {onlySelf: true, emitModelToViewChange: false});\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private _applyFormState(formState: FormControlState<TValue> | TValue) {\n    if (isFormControlState(formState)) {\n      (this as Writable<this>).value = this._pendingValue = formState.value;\n      formState.disabled\n        ? this.disable({onlySelf: true, emitEvent: false})\n        : this.enable({onlySelf: true, emitEvent: false});\n    } else {\n      (this as Writable<this>).value = this._pendingValue = formState;\n    }\n  }\n};\n\ninterface UntypedFormControlCtor {\n  new (): UntypedFormControl;\n\n  new (\n    formState?: any,\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | FormControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\n  ): UntypedFormControl;\n\n  /**\n   * The presence of an explicit `prototype` property provides backwards-compatibility for apps that\n   * manually inspect the prototype chain.\n   */\n  prototype: FormControl<any>;\n}\n\n/**\n * UntypedFormControl is a non-strongly-typed version of `FormControl`.\n */\nexport type UntypedFormControl = FormControl<any>;\n\nexport const UntypedFormControl: UntypedFormControlCtor = FormControl;\n\n/**\n * @description\n * Asserts that the given control is an instance of `FormControl`\n *\n * @publicApi\n */\nexport const isFormControl = (control: unknown): control is FormControl =>\n  control instanceof FormControl;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, OnDestroy, OnInit} from '@angular/core';\n\nimport {FormGroup} from '../model/form_group';\n\nimport {ControlContainer} from './control_container';\nimport type {Form} from './form_interface';\nimport {controlPath} from './shared';\n\n/**\n * @description\n * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.\n *\n * @publicApi\n */\n@Directive({\n  standalone: false,\n})\nexport class AbstractFormGroupDirective extends ControlContainer implements OnInit, OnDestroy {\n  /**\n   * @description\n   * The parent control for the group\n   *\n   * @internal\n   */\n  // TODO(issue/24571): remove '!'.\n  _parent!: ControlContainer;\n\n  /** @nodoc */\n  ngOnInit(): void {\n    this._checkParentType();\n    // Register the group with its parent group.\n    this.formDirective!.addFormGroup(this);\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    if (this.formDirective) {\n      // Remove the group from its parent group.\n      this.formDirective.removeFormGroup(this);\n    }\n  }\n\n  /**\n   * @description\n   * The `FormGroup` bound to this directive.\n   */\n  override get control(): FormGroup {\n    return this.formDirective!.getFormGroup(this);\n  }\n\n  /**\n   * @description\n   * The path to this group from the top-level directive.\n   */\n  override get path(): string[] {\n    return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n  }\n\n  /**\n   * @description\n   * The top-level directive for this group if present, otherwise null.\n   */\n  override get formDirective(): Form | null {\n    return this._parent ? this._parent.formDirective : null;\n  }\n\n  /** @internal */\n  _checkParentType(): void {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  booleanAttribute,\n  ChangeDetectorRef,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  Provider,\n  Self,\n  SimpleChanges,\n} from '@angular/core';\n\nimport {FormHooks} from '../model/abstract_model';\nimport {FormControl} from '../model/form_control';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\nimport {NgForm} from './ng_form';\nimport {NgModelGroup} from './ng_model_group';\nimport {\n  CALL_SET_DISABLED_STATE,\n  controlPath,\n  isPropertyUpdated,\n  selectValueAccessor,\n  SetDisabledStateOption,\n  setUpControl,\n} from './shared';\nimport {\n  formGroupNameException,\n  missingNameException,\n  modelParentException,\n} from './template_driven_errors';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nconst formControlBinding: Provider = {\n  provide: NgControl,\n  useExisting: forwardRef(() => NgModel),\n};\n\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```html\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have an old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel`s have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nconst resolvedPromise = (() => Promise.resolve())();\n\n/**\n * @description\n * Creates a `FormControl` instance from a [domain\n * model](https://en.wikipedia.org/wiki/Domain_model) and binds it to a form control element.\n *\n * The `FormControl` instance tracks the value, user interaction, and\n * validation status of the control and keeps the view synced with the model. If used\n * within a parent form, the directive also registers itself with the form as a child\n * control.\n *\n * This directive is used by itself or as part of a larger form. Use the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the domain model's value in the component\n * class sets the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-in-a-box syntax'), the value in the UI always syncs back to\n * the domain model in your class.\n *\n * To inspect the properties of the associated `FormControl` (like the validity state),\n * export the directive into a local template variable using `ngModel` as the key (ex:\n * `#myVar=\"ngModel\"`). You can then access the control using the directive's `control` property.\n * However, the most commonly used properties (like `valid` and `dirty`) also exist on the control\n * for direct access. See a full list of properties directly available in\n * `AbstractControlDirective`.\n *\n * @see {@link RadioControlValueAccessor}\n * @see {@link SelectControlValueAccessor}\n *\n * @usageNotes\n *\n * ### Using ngModel on a standalone control\n *\n * The following examples show a simple standalone control using `ngModel`:\n *\n * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,\n * as the parent form syncs the value for you. You access its properties by exporting it into a\n * local template variable using `ngForm` such as (`#f=\"ngForm\"`). Use the variable where\n * needed on form submission.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * ### Using ngModel within a form\n *\n * The following example shows controls using `ngModel` within a form:\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Using a standalone ngModel within a group\n *\n * The following example shows you how to use a standalone ngModel control\n * within a form. This controls the display of the form, but doesn't contain form data.\n *\n * ```html\n * <form>\n *   <input name=\"login\" ngModel placeholder=\"Login\">\n *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n * </form>\n * <!-- form value: {login: ''} -->\n * ```\n *\n * ### Setting the ngModel `name` attribute through options\n *\n * The following example shows you an alternate way to set the name attribute. Here,\n * an attribute identified as name is used within a custom form control component. To still be able\n * to specify the NgModel's name, you must specify it using the `ngModelOptions` input instead.\n *\n * ```html\n * <form>\n *   <my-custom-form-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n *   </my-custom-form-control>\n * </form>\n * <!-- form value: {user: ''} -->\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[ngModel]:not([formControlName]):not([formControl])',\n  providers: [formControlBinding],\n  exportAs: 'ngModel',\n  standalone: false,\n})\nexport class NgModel extends NgControl implements OnChanges, OnDestroy {\n  public override readonly control: FormControl = new FormControl();\n\n  // At runtime we coerce arbitrary values assigned to the \"disabled\" input to a \"boolean\".\n  // This is not reflected in the type of the property because outside of templates, consumers\n  // should only deal with booleans. In templates, a string is allowed for convenience and to\n  // match the native \"disabled attribute\" semantics which can be observed on input elements.\n  // This static member tells the compiler that values of type \"string\" can also be assigned\n  // to the input in a template.\n  /** @nodoc */\n  static ngAcceptInputType_isDisabled: boolean | string;\n\n  /** @internal */\n  _registered = false;\n\n  /**\n   * Internal reference to the view model value.\n   * @nodoc\n   */\n  viewModel: any;\n\n  /**\n   * @description\n   * Tracks the name bound to the directive. If a parent form exists, it\n   * uses this name as a key to retrieve this control's value.\n   */\n  @Input() override name: string = '';\n\n  /**\n   * @description\n   * Tracks whether the control is disabled.\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('disabled') isDisabled!: boolean;\n\n  /**\n   * @description\n   * Tracks the value bound to this directive.\n   */\n  @Input('ngModel') model: any;\n\n  /**\n   * @description\n   * Tracks the configuration options for this `ngModel` instance.\n   *\n   * **name**: An alternative to setting the name attribute on the form control element. See\n   * the [example](api/forms/NgModel#using-ngmodel-on-a-standalone-control) for using `NgModel`\n   * as a standalone control.\n   *\n   * **standalone**: When set to true, the `ngModel` will not register itself with its parent form,\n   * and acts as if it's not in the form. Defaults to false. If no parent form exists, this option\n   * has no effect.\n   *\n   * **updateOn**: Defines the event upon which the form control value and validity update.\n   * Defaults to 'change'. Possible values: `'change'` | `'blur'` | `'submit'`.\n   *\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('ngModelOptions') options!: {name?: string; standalone?: boolean; updateOn?: FormHooks};\n\n  /**\n   * @description\n   * Event emitter for producing the `ngModelChange` event after\n   * the view model updates.\n   */\n  @Output('ngModelChange') update = new EventEmitter();\n\n  constructor(\n    @Optional() @Host() parent: ControlContainer,\n    @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator | ValidatorFn)[],\n    @Optional()\n    @Self()\n    @Inject(NG_ASYNC_VALIDATORS)\n    asyncValidators: (AsyncValidator | AsyncValidatorFn)[],\n    @Optional() @Self() @Inject(NG_VALUE_ACCESSOR) valueAccessors: ControlValueAccessor[],\n    @Optional() @Inject(ChangeDetectorRef) private _changeDetectorRef?: ChangeDetectorRef | null,\n    @Optional()\n    @Inject(CALL_SET_DISABLED_STATE)\n    private callSetDisabledState?: SetDisabledStateOption,\n  ) {\n    super();\n    this._parent = parent;\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges) {\n    this._checkForErrors();\n    if (!this._registered || 'name' in changes) {\n      if (this._registered) {\n        this._checkName();\n        if (this.formDirective) {\n          // We can't call `formDirective.removeControl(this)`, because the `name` has already been\n          // changed. We also can't reset the name temporarily since the logic in `removeControl`\n          // is inside a promise and it won't run immediately. We work around it by giving it an\n          // object with the same shape instead.\n          const oldName = changes['name'].previousValue;\n          this.formDirective.removeControl({name: oldName, path: this._getPath(oldName)});\n        }\n      }\n      this._setUpControl();\n    }\n    if ('isDisabled' in changes) {\n      this._updateDisabled(changes);\n    }\n\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      this._updateValue(this.model);\n      this.viewModel = this.model;\n    }\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    this.formDirective && this.formDirective.removeControl(this);\n  }\n\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n  override get path(): string[] {\n    return this._getPath(this.name);\n  }\n\n  /**\n   * @description\n   * The top-level directive for this control if present, otherwise null.\n   */\n  get formDirective(): any {\n    return this._parent ? this._parent.formDirective : null;\n  }\n\n  /**\n   * @description\n   * Sets the new value for the view model and emits an `ngModelChange` event.\n   *\n   * @param newValue The new value emitted by `ngModelChange`.\n   */\n  override viewToModelUpdate(newValue: any): void {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n\n  private _setUpControl(): void {\n    this._setUpdateStrategy();\n    this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);\n    this._registered = true;\n  }\n\n  private _setUpdateStrategy(): void {\n    if (this.options && this.options.updateOn != null) {\n      this.control._updateOn = this.options.updateOn;\n    }\n  }\n\n  private _isStandalone(): boolean {\n    return !this._parent || !!(this.options && this.options.standalone);\n  }\n\n  private _setUpStandalone(): void {\n    setUpControl(this.control, this, this.callSetDisabledState);\n    this.control.updateValueAndValidity({emitEvent: false});\n  }\n\n  private _checkForErrors(): void {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._isStandalone()) {\n      checkParentType(this._parent);\n    }\n    this._checkName();\n  }\n\n  private _checkName(): void {\n    if (this.options && this.options.name) this.name = this.options.name;\n\n    if (!this._isStandalone() && !this.name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw missingNameException();\n    }\n  }\n\n  private _updateValue(value: any): void {\n    resolvedPromise.then(() => {\n      this.control.setValue(value, {emitViewToModelChange: false});\n      this._changeDetectorRef?.markForCheck();\n    });\n  }\n\n  private _updateDisabled(changes: SimpleChanges) {\n    const disabledValue = changes['isDisabled'].currentValue;\n    // checking for 0 to avoid breaking change\n    const isDisabled = disabledValue !== 0 && booleanAttribute(disabledValue);\n\n    resolvedPromise.then(() => {\n      if (isDisabled && !this.control.disabled) {\n        this.control.disable();\n      } else if (!isDisabled && this.control.disabled) {\n        this.control.enable();\n      }\n\n      this._changeDetectorRef?.markForCheck();\n    });\n  }\n\n  private _getPath(controlName: string): string[] {\n    return this._parent ? controlPath(controlName, this._parent) : [controlName];\n  }\n}\n\nfunction checkParentType(parent: ControlContainer | null) {\n  if (!(parent instanceof NgModelGroup) && parent instanceof AbstractFormGroupDirective) {\n    throw formGroupNameException();\n  } else if (!(parent instanceof NgModelGroup) && !(parent instanceof NgForm)) {\n    throw modelParentException();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive} from '@angular/core';\n\n/**\n * @description\n *\n * Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```html\n * <form ngNativeValidate></form>\n * ```\n *\n * @publicApi\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n */\n@Directive({\n  selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n  host: {'novalidate': ''},\n  standalone: false,\n})\nexport class ɵNgNoValidate {}\n\nexport {ɵNgNoValidate as NgNoValidate};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, ElementRef, forwardRef, Provider} from '@angular/core';\n\nimport {\n  BuiltInControlValueAccessor,\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n} from './control_value_accessor';\n\nconst NUMBER_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NumberValueAccessor),\n  multi: true,\n};\n\n/**\n * @description\n * The `ControlValueAccessor` for writing a number value and listening to number input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`\n * directives.\n *\n * @usageNotes\n *\n * ### Using a number input with a reactive form.\n *\n * The following example shows how to use a number input with a reactive form.\n *\n * ```ts\n * const totalCountControl = new FormControl();\n * ```\n *\n * ```html\n * <input type=\"number\" [formControl]=\"totalCountControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n    'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n  host: {'(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()'},\n  providers: [NUMBER_VALUE_ACCESSOR],\n  standalone: false,\n})\nexport class NumberValueAccessor\n  extends BuiltInControlValueAccessor\n  implements ControlValueAccessor\n{\n  /**\n   * Sets the \"value\" property on the input element.\n   * @nodoc\n   */\n  writeValue(value: number): void {\n    // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n    const normalizedValue = value == null ? '' : value;\n    this.setProperty('value', normalizedValue);\n  }\n\n  /**\n   * Registers a function called when the control value changes.\n   * @nodoc\n   */\n  override registerOnChange(fn: (_: number | null) => void): void {\n    this.onChange = (value) => {\n      fn(value == '' ? null : parseFloat(value));\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  Provider,\n  Self,\n  SimpleChanges,\n} from '@angular/core';\n\nimport {FormControl} from '../../model/form_control';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {disabledAttrWarning} from '../reactive_errors';\nimport {\n  _ngModelWarning,\n  CALL_SET_DISABLED_STATE,\n  cleanUpControl,\n  isPropertyUpdated,\n  selectValueAccessor,\n  SetDisabledStateOption,\n  setUpControl,\n} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n */\nexport const NG_MODEL_WITH_FORM_CONTROL_WARNING = new InjectionToken(\n  ngDevMode ? 'NgModelWithFormControlWarning' : '',\n);\n\nconst formControlBinding: Provider = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlDirective),\n};\n\n/**\n * @description\n * Synchronizes a standalone `FormControl` instance to a form control element.\n *\n * Note that support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives was deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see {@link FormControl}\n * @see {@link AbstractControl}\n *\n * @usageNotes\n *\n * The following example shows how to register a standalone control and set its value.\n *\n * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[formControl]',\n  providers: [formControlBinding],\n  exportAs: 'ngForm',\n  standalone: false,\n})\nexport class FormControlDirective extends NgControl implements OnChanges, OnDestroy {\n  /**\n   * Internal reference to the view model value.\n   * @nodoc\n   */\n  viewModel: any;\n\n  /**\n   * @description\n   * Tracks the `FormControl` instance bound to the directive.\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input('formControl') form!: FormControl;\n\n  /**\n   * @description\n   * Triggers a warning in dev mode that this input should not be used with reactive forms.\n   */\n  @Input('disabled')\n  set isDisabled(isDisabled: boolean) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      console.warn(disabledAttrWarning);\n    }\n  }\n\n  // TODO(kara): remove next 4 properties once deprecation period is over\n\n  /** @deprecated as of v6 */\n  @Input('ngModel') model: any;\n\n  /** @deprecated as of v6 */\n  @Output('ngModelChange') update = new EventEmitter();\n\n  /**\n   * @description\n   * Static property used to track whether any ngModel warnings have been sent across\n   * all instances of FormControlDirective. Used to support warning config of \"once\".\n   *\n   * @internal\n   */\n  static _ngModelWarningSentOnce = false;\n\n  /**\n   * @description\n   * Instance property used to track whether an ngModel warning has been sent out for this\n   * particular `FormControlDirective` instance. Used to support warning config of \"always\".\n   *\n   * @internal\n   */\n  _ngModelWarningSent = false;\n\n  constructor(\n    @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator | ValidatorFn)[],\n    @Optional()\n    @Self()\n    @Inject(NG_ASYNC_VALIDATORS)\n    asyncValidators: (AsyncValidator | AsyncValidatorFn)[],\n    @Optional() @Self() @Inject(NG_VALUE_ACCESSOR) valueAccessors: ControlValueAccessor[],\n    @Optional()\n    @Inject(NG_MODEL_WITH_FORM_CONTROL_WARNING)\n    private _ngModelWarningConfig: string | null,\n    @Optional()\n    @Inject(CALL_SET_DISABLED_STATE)\n    private callSetDisabledState?: SetDisabledStateOption,\n  ) {\n    super();\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this._isControlChanged(changes)) {\n      const previousForm = changes['form'].previousValue;\n      if (previousForm) {\n        cleanUpControl(previousForm, this, /* validateControlPresenceOnChange */ false);\n      }\n      setUpControl(this.form, this, this.callSetDisabledState);\n      this.form.updateValueAndValidity({emitEvent: false});\n    }\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);\n      }\n      this.form.setValue(this.model);\n      this.viewModel = this.model;\n    }\n  }\n\n  /** @nodoc */\n  ngOnDestroy() {\n    if (this.form) {\n      cleanUpControl(this.form, this, /* validateControlPresenceOnChange */ false);\n    }\n  }\n\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n  override get path(): string[] {\n    return [];\n  }\n\n  /**\n   * @description\n   * The `FormControl` bound to this directive.\n   */\n  override get control(): FormControl {\n    return this.form;\n  }\n\n  /**\n   * @description\n   * Sets the new value for the view model and emits an `ngModelChange` event.\n   *\n   * @param newValue The new value for the view model.\n   */\n  override viewToModelUpdate(newValue: any): void {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n\n  private _isControlChanged(changes: {[key: string]: any}): boolean {\n    return changes.hasOwnProperty('form');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  computed,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  Provider,\n  Self,\n  signal,\n  SimpleChanges,\n  untracked,\n  ɵWritable as Writable,\n} from '@angular/core';\n\nimport {FormArray} from '../../model/form_array';\nimport {FormControl, isFormControl} from '../../model/form_control';\nimport {FormGroup} from '../../model/form_group';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {ControlContainer} from '../control_container';\nimport {Form} from '../form_interface';\nimport {missingFormException} from '../reactive_errors';\nimport {\n  CALL_SET_DISABLED_STATE,\n  cleanUpControl,\n  cleanUpFormContainer,\n  cleanUpValidators,\n  removeListItem,\n  SetDisabledStateOption,\n  setUpControl,\n  setUpFormContainer,\n  setUpValidators,\n  syncPendingControls,\n} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nimport type {FormControlName} from './form_control_name';\nimport type {FormArrayName, FormGroupName} from './form_group_name';\nimport {FormResetEvent, FormSubmittedEvent} from '../../model/abstract_model';\n\nconst formDirectiveProvider: Provider = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupDirective),\n};\n\n/**\n * @description\n *\n * Binds an existing `FormGroup` or `FormRecord` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`/`FormRecord`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see {@link AbstractControl}\n *\n * @usageNotes\n * ### Register Form Group\n *\n * The following example registers a `FormGroup` with first name and last name controls,\n * and listens for the *ngSubmit* event when the button is clicked.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[formGroup]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  exportAs: 'ngForm',\n  standalone: false,\n})\nexport class FormGroupDirective extends ControlContainer implements Form, OnChanges, OnDestroy {\n  /**\n   * @description\n   * Reports whether the form submission has been triggered.\n   */\n  get submitted() {\n    return untracked(this._submittedReactive);\n  }\n  // TODO(atscott): Remove once invalid API usage is cleaned up internally\n  private set submitted(value: boolean) {\n    this._submittedReactive.set(value);\n  }\n  /** @internal */\n  readonly _submitted = computed(() => this._submittedReactive());\n  private readonly _submittedReactive = signal(false);\n\n  /**\n   * Reference to an old form group input value, which is needed to cleanup\n   * old instance in case it was replaced with a new one.\n   */\n  private _oldForm: FormGroup | undefined;\n\n  /**\n   * Callback that should be invoked when controls in FormGroup or FormArray collection change\n   * (added or removed). This callback triggers corresponding DOM updates.\n   */\n  private readonly _onCollectionChange = () => this._updateDomValue();\n\n  /**\n   * @description\n   * Tracks the list of added `FormControlName` instances\n   */\n  directives: FormControlName[] = [];\n\n  /**\n   * @description\n   * Tracks the `FormGroup` bound to this directive.\n   */\n  @Input('formGroup') form: FormGroup = null!;\n\n  /**\n   * @description\n   * Emits an event when the form submission has been triggered.\n   */\n  @Output() ngSubmit = new EventEmitter();\n\n  constructor(\n    @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator | ValidatorFn)[],\n    @Optional()\n    @Self()\n    @Inject(NG_ASYNC_VALIDATORS)\n    asyncValidators: (AsyncValidator | AsyncValidatorFn)[],\n    @Optional()\n    @Inject(CALL_SET_DISABLED_STATE)\n    private callSetDisabledState?: SetDisabledStateOption,\n  ) {\n    super();\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n  }\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges): void {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this.form) {\n      throw missingFormException();\n    }\n\n    if (changes.hasOwnProperty('form')) {\n      this._updateValidators();\n      this._updateDomValue();\n      this._updateRegistrations();\n      this._oldForm = this.form;\n    }\n  }\n\n  /** @nodoc */\n  ngOnDestroy() {\n    if (this.form) {\n      cleanUpValidators(this.form, this);\n\n      // Currently the `onCollectionChange` callback is rewritten each time the\n      // `_registerOnCollectionChange` function is invoked. The implication is that cleanup should\n      // happen *only* when the `onCollectionChange` callback was set by this directive instance.\n      // Otherwise it might cause overriding a callback of some other directive instances. We should\n      // consider updating this logic later to make it similar to how `onChange` callbacks are\n      // handled, see https://github.com/angular/angular/issues/39732 for additional info.\n      if (this.form._onCollectionChange === this._onCollectionChange) {\n        this.form._registerOnCollectionChange(() => {});\n      }\n    }\n  }\n\n  /**\n   * @description\n   * Returns this directive's instance.\n   */\n  override get formDirective(): Form {\n    return this;\n  }\n\n  /**\n   * @description\n   * Returns the `FormGroup` bound to this directive.\n   */\n  override get control(): FormGroup {\n    return this.form;\n  }\n\n  /**\n   * @description\n   * Returns an array representing the path to this group. Because this directive\n   * always lives at the top level of a form, it always an empty array.\n   */\n  override get path(): string[] {\n    return [];\n  }\n\n  /**\n   * @description\n   * Method that sets up the control directive in this group, re-calculates its value\n   * and validity, and adds the instance to the internal list of directives.\n   *\n   * @param dir The `FormControlName` directive instance.\n   */\n  addControl(dir: FormControlName): FormControl {\n    const ctrl: any = this.form.get(dir.path);\n    setUpControl(ctrl, dir, this.callSetDisabledState);\n    ctrl.updateValueAndValidity({emitEvent: false});\n    this.directives.push(dir);\n    return ctrl;\n  }\n\n  /**\n   * @description\n   * Retrieves the `FormControl` instance from the provided `FormControlName` directive\n   *\n   * @param dir The `FormControlName` directive instance.\n   */\n  getControl(dir: FormControlName): FormControl {\n    return <FormControl>this.form.get(dir.path);\n  }\n\n  /**\n   * @description\n   * Removes the `FormControlName` instance from the internal list of directives\n   *\n   * @param dir The `FormControlName` directive instance.\n   */\n  removeControl(dir: FormControlName): void {\n    cleanUpControl(dir.control || null, dir, /* validateControlPresenceOnChange */ false);\n    removeListItem(this.directives, dir);\n  }\n\n  /**\n   * Adds a new `FormGroupName` directive instance to the form.\n   *\n   * @param dir The `FormGroupName` directive instance.\n   */\n  addFormGroup(dir: FormGroupName): void {\n    this._setUpFormContainer(dir);\n  }\n\n  /**\n   * Performs the necessary cleanup when a `FormGroupName` directive instance is removed from the\n   * view.\n   *\n   * @param dir The `FormGroupName` directive instance.\n   */\n  removeFormGroup(dir: FormGroupName): void {\n    this._cleanUpFormContainer(dir);\n  }\n\n  /**\n   * @description\n   * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance\n   *\n   * @param dir The `FormGroupName` directive instance.\n   */\n  getFormGroup(dir: FormGroupName): FormGroup {\n    return <FormGroup>this.form.get(dir.path);\n  }\n\n  /**\n   * Performs the necessary setup when a `FormArrayName` directive instance is added to the view.\n   *\n   * @param dir The `FormArrayName` directive instance.\n   */\n  addFormArray(dir: FormArrayName): void {\n    this._setUpFormContainer(dir);\n  }\n\n  /**\n   * Performs the necessary cleanup when a `FormArrayName` directive instance is removed from the\n   * view.\n   *\n   * @param dir The `FormArrayName` directive instance.\n   */\n  removeFormArray(dir: FormArrayName): void {\n    this._cleanUpFormContainer(dir);\n  }\n\n  /**\n   * @description\n   * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.\n   *\n   * @param dir The `FormArrayName` directive instance.\n   */\n  getFormArray(dir: FormArrayName): FormArray {\n    return <FormArray>this.form.get(dir.path);\n  }\n\n  /**\n   * Sets the new value for the provided `FormControlName` directive.\n   *\n   * @param dir The `FormControlName` directive instance.\n   * @param value The new value for the directive's control.\n   */\n  updateModel(dir: FormControlName, value: any): void {\n    const ctrl = <FormControl>this.form.get(dir.path);\n    ctrl.setValue(value);\n  }\n\n  /**\n   * @description\n   * Method called with the \"submit\" event is triggered on the form.\n   * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n   *\n   * @param $event The \"submit\" event object\n   */\n  onSubmit($event: Event): boolean {\n    this._submittedReactive.set(true);\n    syncPendingControls(this.form, this.directives);\n    this.ngSubmit.emit($event);\n    this.form._events.next(new FormSubmittedEvent(this.control));\n\n    // Forms with `method=\"dialog\"` have some special behavior that won't reload the page and that\n    // shouldn't be prevented. Note that we need to null check the `event` and the `target`, because\n    // some internal apps call this method directly with the wrong arguments.\n    return ($event?.target as HTMLFormElement | null)?.method === 'dialog';\n  }\n\n  /**\n   * @description\n   * Method called when the \"reset\" event is triggered on the form.\n   */\n  onReset(): void {\n    this.resetForm();\n  }\n\n  /**\n   * @description\n   * Resets the form to an initial value and resets its submitted status.\n   *\n   * @param value The new value for the form.\n   */\n  resetForm(value: any = undefined): void {\n    this.form.reset(value);\n    this._submittedReactive.set(false);\n    this.form._events.next(new FormResetEvent(this.form));\n  }\n\n  /** @internal */\n  _updateDomValue() {\n    this.directives.forEach((dir) => {\n      const oldCtrl = dir.control;\n      const newCtrl = this.form.get(dir.path);\n      if (oldCtrl !== newCtrl) {\n        // Note: the value of the `dir.control` may not be defined, for example when it's a first\n        // `FormControl` that is added to a `FormGroup` instance (via `addControl` call).\n        cleanUpControl(oldCtrl || null, dir);\n\n        // Check whether new control at the same location inside the corresponding `FormGroup` is an\n        // instance of `FormControl` and perform control setup only if that's the case.\n        // Note: we don't need to clear the list of directives (`this.directives`) here, it would be\n        // taken care of in the `removeControl` method invoked when corresponding `formControlName`\n        // directive instance is being removed (invoked from `FormControlName.ngOnDestroy`).\n        if (isFormControl(newCtrl)) {\n          setUpControl(newCtrl, dir, this.callSetDisabledState);\n          (dir as Writable<FormControlName>).control = newCtrl;\n        }\n      }\n    });\n\n    this.form._updateTreeValidity({emitEvent: false});\n  }\n\n  private _setUpFormContainer(dir: FormArrayName | FormGroupName): void {\n    const ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    // NOTE: this operation looks unnecessary in case no new validators were added in\n    // `setUpFormContainer` call. Consider updating this code to match the logic in\n    // `_cleanUpFormContainer` function.\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n\n  private _cleanUpFormContainer(dir: FormArrayName | FormGroupName): void {\n    if (this.form) {\n      const ctrl: any = this.form.get(dir.path);\n      if (ctrl) {\n        const isControlUpdated = cleanUpFormContainer(ctrl, dir);\n        if (isControlUpdated) {\n          // Run validity check only in case a control was updated (i.e. view validators were\n          // removed) as removing view validators might cause validity to change.\n          ctrl.updateValueAndValidity({emitEvent: false});\n        }\n      }\n    }\n  }\n\n  private _updateRegistrations() {\n    this.form._registerOnCollectionChange(this._onCollectionChange);\n    if (this._oldForm) {\n      this._oldForm._registerOnCollectionChange(() => {});\n    }\n  }\n\n  private _updateValidators() {\n    setUpValidators(this.form, this);\n    if (this._oldForm) {\n      cleanUpValidators(this._oldForm, this);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Provider,\n  Self,\n  SkipSelf,\n} from '@angular/core';\n\nimport {FormArray} from '../../model/form_array';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {arrayParentException, groupParentException} from '../reactive_errors';\nimport {controlPath} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nimport {FormGroupDirective} from './form_group_directive';\n\nconst formGroupNameProvider: Provider = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupName),\n};\n\n/**\n * @description\n *\n * Syncs a nested `FormGroup` or `FormRecord` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective`.\n *\n * It accepts the string name of the nested `FormGroup` or `FormRecord` to link, and\n * looks for a `FormGroup` or `FormRecord` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Use nested form groups to validate a sub-group of a\n * form separately from the rest or to group the values of certain\n * controls into their own nested object.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n *\n * @usageNotes\n *\n * ### Access the group by name\n *\n * The following example uses the `AbstractControl.get` method to access the\n * associated `FormGroup`\n *\n * ```ts\n *   this.form.get('name');\n * ```\n *\n * ### Access individual controls in the group\n *\n * The following example uses the `AbstractControl.get` method to access\n * individual controls within the group using dot syntax.\n *\n * ```ts\n *   this.form.get('name.first');\n * ```\n *\n * ### Register a nested `FormGroup`.\n *\n * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\n * and provides methods to retrieve the nested `FormGroup` and individual controls.\n *\n * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[formGroupName]',\n  providers: [formGroupNameProvider],\n  standalone: false,\n})\nexport class FormGroupName extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n  /**\n   * @description\n   * Tracks the name of the `FormGroup` bound to the directive. The name corresponds\n   * to a key in the parent `FormGroup` or `FormArray`.\n   * Accepts a name as a string or a number.\n   * The name in the form of a string is useful for individual forms,\n   * while the numerical form allows for form groups to be bound\n   * to indices when iterating over groups in a `FormArray`.\n   */\n  @Input('formGroupName') override name: string | number | null = null;\n\n  constructor(\n    @Optional() @Host() @SkipSelf() parent: ControlContainer,\n    @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator | ValidatorFn)[],\n    @Optional()\n    @Self()\n    @Inject(NG_ASYNC_VALIDATORS)\n    asyncValidators: (AsyncValidator | AsyncValidatorFn)[],\n  ) {\n    super();\n    this._parent = parent;\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n  }\n\n  /** @internal */\n  override _checkParentType(): void {\n    if (hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw groupParentException();\n    }\n  }\n}\n\nexport const formArrayNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormArrayName),\n};\n\n/**\n * @description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see {@link AbstractControl}\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[formArrayName]',\n  providers: [formArrayNameProvider],\n  standalone: false,\n})\nexport class FormArrayName extends ControlContainer implements OnInit, OnDestroy {\n  /** @internal */\n  _parent: ControlContainer;\n\n  /**\n   * @description\n   * Tracks the name of the `FormArray` bound to the directive. The name corresponds\n   * to a key in the parent `FormGroup` or `FormArray`.\n   * Accepts a name as a string or a number.\n   * The name in the form of a string is useful for individual forms,\n   * while the numerical form allows for form arrays to be bound\n   * to indices when iterating over arrays in a `FormArray`.\n   */\n  @Input('formArrayName') override name: string | number | null = null;\n\n  constructor(\n    @Optional() @Host() @SkipSelf() parent: ControlContainer,\n    @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator | ValidatorFn)[],\n    @Optional()\n    @Self()\n    @Inject(NG_ASYNC_VALIDATORS)\n    asyncValidators: (AsyncValidator | AsyncValidatorFn)[],\n  ) {\n    super();\n    this._parent = parent;\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n  }\n\n  /**\n   * A lifecycle method called when the directive's inputs are initialized. For internal use only.\n   * @throws If the directive does not have a valid parent.\n   * @nodoc\n   */\n  ngOnInit(): void {\n    if (hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw arrayParentException();\n    }\n    this.formDirective!.addFormArray(this);\n  }\n\n  /**\n   * A lifecycle method called before the directive's instance is destroyed. For internal use only.\n   * @nodoc\n   */\n  ngOnDestroy(): void {\n    this.formDirective?.removeFormArray(this);\n  }\n\n  /**\n   * @description\n   * The `FormArray` bound to this directive.\n   */\n  override get control(): FormArray {\n    return this.formDirective!.getFormArray(this);\n  }\n\n  /**\n   * @description\n   * The top-level directive for this group if present, otherwise null.\n   */\n  override get formDirective(): FormGroupDirective | null {\n    return this._parent ? <FormGroupDirective>this._parent.formDirective : null;\n  }\n\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n  override get path(): string[] {\n    return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n  }\n}\n\nfunction hasInvalidParent(parent: ControlContainer): boolean {\n  return (\n    !(parent instanceof FormGroupName) &&\n    !(parent instanceof FormGroupDirective) &&\n    !(parent instanceof FormArrayName)\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  Provider,\n  Self,\n  SimpleChanges,\n  SkipSelf,\n  ɵWritable as Writable,\n} from '@angular/core';\n\nimport {FormControl} from '../../model/form_control';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {\n  controlParentException,\n  disabledAttrWarning,\n  ngModelGroupException,\n} from '../reactive_errors';\nimport {_ngModelWarning, controlPath, isPropertyUpdated, selectValueAccessor} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nimport {NG_MODEL_WITH_FORM_CONTROL_WARNING} from './form_control_directive';\nimport {FormGroupDirective} from './form_group_directive';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nconst controlNameBinding: Provider = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlName),\n};\n\n/**\n * @description\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see {@link FormControl}\n * @see {@link AbstractControl}\n *\n * @usageNotes\n *\n * ### Register `FormControl` within a group\n *\n * The following example shows how to register multiple form controls within a form group\n * and set their value.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel is deprecated\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[formControlName]',\n  providers: [controlNameBinding],\n  standalone: false,\n})\nexport class FormControlName extends NgControl implements OnChanges, OnDestroy {\n  private _added = false;\n  /**\n   * Internal reference to the view model value.\n   * @internal\n   */\n  viewModel: any;\n\n  /**\n   * @description\n   * Tracks the `FormControl` instance bound to the directive.\n   */\n  // TODO(issue/24571): remove '!'.\n  override readonly control!: FormControl;\n\n  /**\n   * @description\n   * Tracks the name of the `FormControl` bound to the directive. The name corresponds\n   * to a key in the parent `FormGroup` or `FormArray`.\n   * Accepts a name as a string or a number.\n   * The name in the form of a string is useful for individual forms,\n   * while the numerical form allows for form controls to be bound\n   * to indices when iterating over controls in a `FormArray`.\n   */\n  @Input('formControlName') override name: string | number | null = null;\n\n  /**\n   * @description\n   * Triggers a warning in dev mode that this input should not be used with reactive forms.\n   */\n  @Input('disabled')\n  set isDisabled(isDisabled: boolean) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      console.warn(disabledAttrWarning);\n    }\n  }\n\n  // TODO(kara): remove next 4 properties once deprecation period is over\n\n  /** @deprecated as of v6 */\n  @Input('ngModel') model: any;\n\n  /** @deprecated as of v6 */\n  @Output('ngModelChange') update = new EventEmitter();\n\n  /**\n   * @description\n   * Static property used to track whether any ngModel warnings have been sent across\n   * all instances of FormControlName. Used to support warning config of \"once\".\n   *\n   * @internal\n   */\n  static _ngModelWarningSentOnce = false;\n\n  /**\n   * @description\n   * Instance property used to track whether an ngModel warning has been sent out for this\n   * particular FormControlName instance. Used to support warning config of \"always\".\n   *\n   * @internal\n   */\n  _ngModelWarningSent = false;\n\n  constructor(\n    @Optional() @Host() @SkipSelf() parent: ControlContainer,\n    @Optional() @Self() @Inject(NG_VALIDATORS) validators: (Validator | ValidatorFn)[],\n    @Optional()\n    @Self()\n    @Inject(NG_ASYNC_VALIDATORS)\n    asyncValidators: (AsyncValidator | AsyncValidatorFn)[],\n    @Optional() @Self() @Inject(NG_VALUE_ACCESSOR) valueAccessors: ControlValueAccessor[],\n    @Optional()\n    @Inject(NG_MODEL_WITH_FORM_CONTROL_WARNING)\n    private _ngModelWarningConfig: string | null,\n  ) {\n    super();\n    this._parent = parent;\n    this._setValidators(validators);\n    this._setAsyncValidators(asyncValidators);\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this._added) this._setUpControl();\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n      }\n      this.viewModel = this.model;\n      this.formDirective.updateModel(this, this.model);\n    }\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeControl(this);\n    }\n  }\n\n  /**\n   * @description\n   * Sets the new value for the view model and emits an `ngModelChange` event.\n   *\n   * @param newValue The new value for the view model.\n   */\n  override viewToModelUpdate(newValue: any): void {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n  override get path(): string[] {\n    return controlPath(this.name == null ? this.name : this.name.toString(), this._parent!);\n  }\n\n  /**\n   * @description\n   * The top-level directive for this group if present, otherwise null.\n   */\n  get formDirective(): any {\n    return this._parent ? this._parent.formDirective : null;\n  }\n\n  private _setUpControl() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      checkParentType(this._parent, this.name);\n    }\n    (this as Writable<this>).control = this.formDirective.addControl(this);\n    this._added = true;\n  }\n}\n\nfunction checkParentType(parent: ControlContainer | null, name: string | number | null) {\n  if (!(parent instanceof FormGroupName) && parent instanceof AbstractFormGroupDirective) {\n    throw ngModelGroupException();\n  } else if (\n    !(parent instanceof FormGroupName) &&\n    !(parent instanceof FormGroupDirective) &&\n    !(parent instanceof FormArrayName)\n  ) {\n    throw controlParentException(name);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  booleanAttribute,\n  Directive,\n  forwardRef,\n  Input,\n  OnChanges,\n  Provider,\n  SimpleChanges,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport type {AbstractControl} from '../model/abstract_model';\nimport {\n  emailValidator,\n  maxLengthValidator,\n  maxValidator,\n  minLengthValidator,\n  minValidator,\n  NG_VALIDATORS,\n  nullValidator,\n  patternValidator,\n  requiredTrueValidator,\n  requiredValidator,\n} from '../validators';\n\n/**\n * Method that updates string to integer if not already a number\n *\n * @param value The value to convert to integer.\n * @returns value of parameter converted to number or integer.\n */\nfunction toInteger(value: string | number): number {\n  return typeof value === 'number' ? value : parseInt(value, 10);\n}\n\n/**\n * Method that ensures that provided value is a float (and converts it to float if needed).\n *\n * @param value The value to convert to float.\n * @returns value of parameter converted to number or float.\n */\nfunction toFloat(value: string | number): number {\n  return typeof value === 'number' ? value : parseFloat(value);\n}\n\n/**\n * @description\n * Defines the map of errors returned from failed validation checks.\n *\n * @publicApi\n */\nexport type ValidationErrors = {\n  [key: string]: any;\n};\n\n/**\n * @description\n * An interface implemented by classes that perform synchronous validation.\n *\n * @usageNotes\n *\n * ### Provide a custom validator\n *\n * The following example implements the `Validator` interface to create a\n * validator directive with a custom error key.\n *\n * ```ts\n * @Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors|null {\n *     return {'custom': true};\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport interface Validator {\n  /**\n   * @description\n   * Method that performs synchronous validation against the provided control.\n   *\n   * @param control The control to validate against.\n   *\n   * @returns A map of validation errors if validation fails,\n   * otherwise null.\n   */\n  validate(control: AbstractControl): ValidationErrors | null;\n\n  /**\n   * @description\n   * Registers a callback function to call when the validator inputs change.\n   *\n   * @param fn The callback function\n   */\n  registerOnValidatorChange?(fn: () => void): void;\n}\n\n/**\n * A base class for Validator-based Directives. The class contains common logic shared across such\n * Directives.\n *\n * For internal use only, this class is not intended for use outside of the Forms package.\n */\n@Directive()\nabstract class AbstractValidatorDirective implements Validator, OnChanges {\n  private _validator: ValidatorFn = nullValidator;\n  private _onChange!: () => void;\n\n  /**\n   * A flag that tracks whether this validator is enabled.\n   *\n   * Marking it `internal` (vs `protected`), so that this flag can be used in host bindings of\n   * directive classes that extend this base class.\n   * @internal\n   */\n  _enabled?: boolean;\n\n  /**\n   * Name of an input that matches directive selector attribute (e.g. `minlength` for\n   * `MinLengthDirective`). An input with a given name might contain configuration information (like\n   * `minlength='10'`) or a flag that indicates whether validator should be enabled (like\n   * `[required]='false'`).\n   *\n   * @internal\n   */\n  abstract inputName: string;\n\n  /**\n   * Creates an instance of a validator (specific to a directive that extends this base class).\n   *\n   * @internal\n   */\n  abstract createValidator(input: unknown): ValidatorFn;\n\n  /**\n   * Performs the necessary input normalization based on a specific logic of a Directive.\n   * For example, the function might be used to convert string-based representation of the\n   * `minlength` input to an integer value that can later be used in the `Validators.minLength`\n   * validator.\n   *\n   * @internal\n   */\n  abstract normalizeInput(input: unknown): unknown;\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.inputName in changes) {\n      const input = this.normalizeInput(changes[this.inputName].currentValue);\n      this._enabled = this.enabled(input);\n      this._validator = this._enabled ? this.createValidator(input) : nullValidator;\n      if (this._onChange) {\n        this._onChange();\n      }\n    }\n  }\n\n  /** @nodoc */\n  validate(control: AbstractControl): ValidationErrors | null {\n    return this._validator(control);\n  }\n\n  /** @nodoc */\n  registerOnValidatorChange(fn: () => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * @description\n   * Determines whether this validator should be active or not based on an input.\n   * Base class implementation checks whether an input is defined (if the value is different from\n   * `null` and `undefined`). Validator classes that extend this base class can override this\n   * function with the logic specific to a particular validator directive.\n   */\n  enabled(input: unknown): boolean {\n    return input != null /* both `null` and `undefined` */;\n  }\n}\n\n/**\n * @description\n * Provider which adds `MaxValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const MAX_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxValidator),\n  multi: true,\n};\n\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `max` attribute.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a max validator\n *\n * The following example shows how to add a max validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input type=\"number\" ngModel max=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n    'input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]',\n  providers: [MAX_VALIDATOR],\n  host: {'[attr.max]': '_enabled ? max : null'},\n  standalone: false,\n})\nexport class MaxValidator extends AbstractValidatorDirective {\n  /**\n   * @description\n   * Tracks changes to the max bound to this directive.\n   */\n  @Input() max!: string | number | null;\n  /** @internal */\n  override inputName = 'max';\n  /** @internal */\n  override normalizeInput = (input: string | number): number => toFloat(input);\n  /** @internal */\n  override createValidator = (max: number): ValidatorFn => maxValidator(max);\n}\n\n/**\n * @description\n * Provider which adds `MinValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const MIN_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinValidator),\n  multi: true,\n};\n\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a min validator\n *\n * The following example shows how to add a min validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input type=\"number\" ngModel min=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n    'input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]',\n  providers: [MIN_VALIDATOR],\n  host: {'[attr.min]': '_enabled ? min : null'},\n  standalone: false,\n})\nexport class MinValidator extends AbstractValidatorDirective {\n  /**\n   * @description\n   * Tracks changes to the min bound to this directive.\n   */\n  @Input() min!: string | number | null;\n  /** @internal */\n  override inputName = 'min';\n  /** @internal */\n  override normalizeInput = (input: string | number): number => toFloat(input);\n  /** @internal */\n  override createValidator = (min: number): ValidatorFn => minValidator(min);\n}\n\n/**\n * @description\n * An interface implemented by classes that perform asynchronous validation.\n *\n * @usageNotes\n *\n * ### Provide a custom async validator directive\n *\n * The following example implements the `AsyncValidator` interface to create an\n * async validator directive with a custom error key.\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * @Directive({\n *   selector: '[customAsyncValidator]',\n *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:\n * true}]\n * })\n * class CustomAsyncValidatorDirective implements AsyncValidator {\n *   validate(control: AbstractControl): Observable<ValidationErrors|null> {\n *     return of({'custom': true});\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport interface AsyncValidator extends Validator {\n  /**\n   * @description\n   * Method that performs async validation against the provided control.\n   *\n   * @param control The control to validate against.\n   *\n   * @returns A promise or observable that resolves a map of validation errors\n   * if validation fails, otherwise null.\n   */\n  validate(\n    control: AbstractControl,\n  ): Promise<ValidationErrors | null> | Observable<ValidationErrors | null>;\n}\n\n/**\n * @description\n * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RequiredValidator),\n  multi: true,\n};\n\n/**\n * @description\n * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => CheckboxRequiredValidator),\n  multi: true,\n};\n\n/**\n * @description\n * A directive that adds the `required` validator to any controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required validator using template-driven forms\n *\n * ```html\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n    ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n  providers: [REQUIRED_VALIDATOR],\n  host: {'[attr.required]': '_enabled ? \"\" : null'},\n  standalone: false,\n})\nexport class RequiredValidator extends AbstractValidatorDirective {\n  /**\n   * @description\n   * Tracks changes to the required attribute bound to this directive.\n   */\n  @Input() required!: boolean | string;\n\n  /** @internal */\n  override inputName = 'required';\n\n  /** @internal */\n  override normalizeInput = booleanAttribute;\n\n  /** @internal */\n  override createValidator = (input: boolean): ValidatorFn => requiredValidator;\n\n  /** @nodoc */\n  override enabled(input: boolean): boolean {\n    return input;\n  }\n}\n\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required checkbox validator using template-driven forms\n *\n * The following example shows how to add a checkbox required validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector:\n    'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n  providers: [CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': '_enabled ? \"\" : null'},\n  standalone: false,\n})\nexport class CheckboxRequiredValidator extends RequiredValidator {\n  /** @internal */\n  override createValidator = (input: unknown): ValidatorFn => requiredTrueValidator;\n}\n\n/**\n * @description\n * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const EMAIL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EmailValidator),\n  multi: true,\n};\n\n/**\n * A directive that adds the `email` validator to controls marked with the\n * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * The email validation is based on the WHATWG HTML specification with some enhancements to\n * incorporate more RFC rules. More information can be found on the [Validators.email\n * page](api/forms/Validators#email).\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding an email validator\n *\n * The following example shows how to add an email validator to an input attached to an ngModel\n * binding.\n *\n * ```html\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\n@Directive({\n  selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n  providers: [EMAIL_VALIDATOR],\n  standalone: false,\n})\nexport class EmailValidator extends AbstractValidatorDirective {\n  /**\n   * @description\n   * Tracks changes to the email attribute bound to this directive.\n   */\n  @Input() email!: boolean | string;\n\n  /** @internal */\n  override inputName = 'email';\n\n  /** @internal */\n  override normalizeInput = booleanAttribute;\n\n  /** @internal */\n  override createValidator = (input: number): ValidatorFn => emailValidator;\n\n  /** @nodoc */\n  override enabled(input: boolean): boolean {\n    return input;\n  }\n}\n\n/**\n * @description\n * A function that receives a control and synchronously returns a map of\n * validation errors if present, otherwise null.\n *\n * @publicApi\n */\nexport interface ValidatorFn {\n  (control: AbstractControl): ValidationErrors | null;\n}\n\n/**\n * @description\n * A function that receives a control and returns a Promise or observable\n * that emits validation errors if present, otherwise null.\n *\n * @publicApi\n */\nexport interface AsyncValidatorFn {\n  (\n    control: AbstractControl,\n  ): Promise<ValidationErrors | null> | Observable<ValidationErrors | null>;\n}\n\n/**\n * @description\n * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const MIN_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinLengthValidator),\n  multi: true,\n};\n\n/**\n * A directive that adds minimum length validation to controls marked with the\n * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a minimum length validator\n *\n * The following example shows how to add a minimum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel minlength=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n  providers: [MIN_LENGTH_VALIDATOR],\n  host: {'[attr.minlength]': '_enabled ? minlength : null'},\n  standalone: false,\n})\nexport class MinLengthValidator extends AbstractValidatorDirective {\n  /**\n   * @description\n   * Tracks changes to the minimum length bound to this directive.\n   */\n  @Input() minlength!: string | number | null;\n\n  /** @internal */\n  override inputName = 'minlength';\n\n  /** @internal */\n  override normalizeInput = (input: string | number): number => toInteger(input);\n\n  /** @internal */\n  override createValidator = (minlength: number): ValidatorFn => minLengthValidator(minlength);\n}\n\n/**\n * @description\n * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const MAX_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxLengthValidator),\n  multi: true,\n};\n\n/**\n * A directive that adds maximum length validation to controls marked with the\n * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a maximum length validator\n *\n * The following example shows how to add a maximum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel maxlength=\"25\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n  providers: [MAX_LENGTH_VALIDATOR],\n  host: {'[attr.maxlength]': '_enabled ? maxlength : null'},\n  standalone: false,\n})\nexport class MaxLengthValidator extends AbstractValidatorDirective {\n  /**\n   * @description\n   * Tracks changes to the maximum length bound to this directive.\n   */\n  @Input() maxlength!: string | number | null;\n\n  /** @internal */\n  override inputName = 'maxlength';\n\n  /** @internal */\n  override normalizeInput = (input: string | number): number => toInteger(input);\n\n  /** @internal */\n  override createValidator = (maxlength: number): ValidatorFn => maxLengthValidator(maxlength);\n}\n\n/**\n * @description\n * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nexport const PATTERN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PatternValidator),\n  multi: true,\n};\n\n/**\n * @description\n * A directive that adds regex pattern validation to controls marked with the\n * `pattern` attribute. The regex must match the entire control value.\n * The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a pattern validator\n *\n * The following example shows how to add a pattern validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel pattern=\"[a-zA-Z ]*\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n  providers: [PATTERN_VALIDATOR],\n  host: {'[attr.pattern]': '_enabled ? pattern : null'},\n  standalone: false,\n})\nexport class PatternValidator extends AbstractValidatorDirective {\n  /**\n   * @description\n   * Tracks changes to the pattern bound to this directive.\n   */\n  @Input()\n  pattern!: string | RegExp; // This input is always defined, since the name matches selector.\n\n  /** @internal */\n  override inputName = 'pattern';\n\n  /** @internal */\n  override normalizeInput = (input: string | RegExp): string | RegExp => input;\n\n  /** @internal */\n  override createValidator = (input: string | RegExp): ValidatorFn => patternValidator(input);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule, Type} from '@angular/core';\n\nimport {CheckboxControlValueAccessor} from './directives/checkbox_value_accessor';\nimport {DefaultValueAccessor} from './directives/default_value_accessor';\nimport {NgControlStatus, NgControlStatusGroup} from './directives/ng_control_status';\nimport {NgForm} from './directives/ng_form';\nimport {NgModel} from './directives/ng_model';\nimport {NgModelGroup} from './directives/ng_model_group';\nimport {NgNoValidate} from './directives/ng_no_validate_directive';\nimport {NumberValueAccessor} from './directives/number_value_accessor';\nimport {RadioControlValueAccessor} from './directives/radio_control_value_accessor';\nimport {RangeValueAccessor} from './directives/range_value_accessor';\nimport {FormControlDirective} from './directives/reactive_directives/form_control_directive';\nimport {FormControlName} from './directives/reactive_directives/form_control_name';\nimport {FormGroupDirective} from './directives/reactive_directives/form_group_directive';\nimport {FormArrayName, FormGroupName} from './directives/reactive_directives/form_group_name';\nimport {\n  NgSelectOption,\n  SelectControlValueAccessor,\n} from './directives/select_control_value_accessor';\nimport {\n  NgSelectMultipleOption,\n  SelectMultipleControlValueAccessor,\n} from './directives/select_multiple_control_value_accessor';\nimport {\n  CheckboxRequiredValidator,\n  EmailValidator,\n  MaxLengthValidator,\n  MaxValidator,\n  MinLengthValidator,\n  MinValidator,\n  PatternValidator,\n  RequiredValidator,\n} from './directives/validators';\n\nexport {CheckboxControlValueAccessor} from './directives/checkbox_value_accessor';\nexport {ControlValueAccessor} from './directives/control_value_accessor';\nexport {DefaultValueAccessor} from './directives/default_value_accessor';\nexport {NgControl} from './directives/ng_control';\nexport {NgControlStatus, NgControlStatusGroup} from './directives/ng_control_status';\nexport {NgForm} from './directives/ng_form';\nexport {NgModel} from './directives/ng_model';\nexport {NgModelGroup} from './directives/ng_model_group';\nexport {NumberValueAccessor} from './directives/number_value_accessor';\nexport {RadioControlValueAccessor} from './directives/radio_control_value_accessor';\nexport {RangeValueAccessor} from './directives/range_value_accessor';\nexport {\n  FormControlDirective,\n  NG_MODEL_WITH_FORM_CONTROL_WARNING,\n} from './directives/reactive_directives/form_control_directive';\nexport {FormControlName} from './directives/reactive_directives/form_control_name';\nexport {FormGroupDirective} from './directives/reactive_directives/form_group_directive';\nexport {FormArrayName, FormGroupName} from './directives/reactive_directives/form_group_name';\nexport {\n  NgSelectOption,\n  SelectControlValueAccessor,\n} from './directives/select_control_value_accessor';\nexport {\n  NgSelectMultipleOption,\n  SelectMultipleControlValueAccessor,\n} from './directives/select_multiple_control_value_accessor';\nexport {CALL_SET_DISABLED_STATE} from './directives/shared';\n\nexport const SHARED_FORM_DIRECTIVES: Type<any>[] = [\n  NgNoValidate,\n  NgSelectOption,\n  NgSelectMultipleOption,\n  DefaultValueAccessor,\n  NumberValueAccessor,\n  RangeValueAccessor,\n  CheckboxControlValueAccessor,\n  SelectControlValueAccessor,\n  SelectMultipleControlValueAccessor,\n  RadioControlValueAccessor,\n  NgControlStatus,\n  NgControlStatusGroup,\n  RequiredValidator,\n  MinLengthValidator,\n  MaxLengthValidator,\n  PatternValidator,\n  CheckboxRequiredValidator,\n  EmailValidator,\n  MinValidator,\n  MaxValidator,\n];\n\nexport const TEMPLATE_DRIVEN_DIRECTIVES: Type<any>[] = [NgModel, NgModelGroup, NgForm];\n\nexport const REACTIVE_DRIVEN_DIRECTIVES: Type<any>[] = [\n  FormControlDirective,\n  FormGroupDirective,\n  FormControlName,\n  FormGroupName,\n  FormArrayName,\n];\n\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\n@NgModule({\n  declarations: SHARED_FORM_DIRECTIVES,\n  exports: SHARED_FORM_DIRECTIVES,\n})\nexport class ɵInternalFormsSharedModule {}\n\nexport {ɵInternalFormsSharedModule as InternalFormsSharedModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ɵWritable as Writable} from '@angular/core';\n\nimport {AsyncValidatorFn, ValidatorFn} from '../directives/validators';\n\nimport {\n  AbstractControl,\n  AbstractControlOptions,\n  assertAllValuesPresent,\n  assertControlPresent,\n  pickAsyncValidators,\n  pickValidators,\n  ɵRawValue,\n  ɵTypedOrUntyped,\n  ɵValue,\n} from './abstract_model';\n\n/**\n * FormArrayValue extracts the type of `.value` from a FormArray's element type, and wraps it in an\n * array.\n *\n * Angular uses this type internally to support Typed Forms; do not use it directly. The untyped\n * case falls back to any[].\n */\nexport type ɵFormArrayValue<T extends AbstractControl<any>> = ɵTypedOrUntyped<\n  T,\n  Array<ɵValue<T>>,\n  any[]\n>;\n\n/**\n * FormArrayRawValue extracts the type of `.getRawValue()` from a FormArray's element type, and\n * wraps it in an array. The untyped case falls back to any[].\n *\n * Angular uses this type internally to support Typed Forms; do not use it directly.\n */\nexport type ɵFormArrayRawValue<T extends AbstractControl<any>> = ɵTypedOrUntyped<\n  T,\n  Array<ɵRawValue<T>>,\n  any[]\n>;\n\n/**\n * Tracks the value and validity state of an array of `FormControl`,\n * `FormGroup` or `FormArray` instances.\n *\n * A `FormArray` aggregates the values of each child `FormControl` into an array.\n * It calculates its status by reducing the status values of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` accepts one generic argument, which is the type of the controls inside.\n * If you need a heterogenous array, use {@link UntypedFormArray}.\n *\n * `FormArray` is one of the four fundamental building blocks used to define forms in Angular,\n * along with `FormControl`, `FormGroup`, and `FormRecord`.\n *\n * @usageNotes\n *\n * ### Create an array of form controls\n *\n * ```ts\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * ### Create a form array with array-level validators\n *\n * You include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators are passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```ts\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n * ### Set the updateOn property for all controls in a form array\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const arr = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls from a form array\n *\n * To change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that result in strange and unexpected behavior such\n * as broken change detection.\n *\n * @publicApi\n */\nexport class FormArray<TControl extends AbstractControl<any> = any> extends AbstractControl<\n  ɵTypedOrUntyped<TControl, ɵFormArrayValue<TControl>, any>,\n  ɵTypedOrUntyped<TControl, ɵFormArrayRawValue<TControl>, any>\n> {\n  /**\n   * Creates a new `FormArray` instance.\n   *\n   * @param controls An array of child controls. Each child control is given an index\n   * where it is registered.\n   *\n   * @param validatorOrOpts A synchronous validator function, or an array of\n   * such functions, or an `AbstractControlOptions` object that contains validation functions\n   * and a validation trigger.\n   *\n   * @param asyncValidator A single async validator or array of async validator functions\n   *\n   */\n  constructor(\n    controls: Array<TControl>,\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\n  ) {\n    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n    this.controls = controls;\n    this._initObservables();\n    this._setUpdateStrategy(validatorOrOpts);\n    this._setUpControls();\n    this.updateValueAndValidity({\n      onlySelf: true,\n      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n      // `VALID` or `INVALID`.\n      // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`\n      // to `true` to allow that during the control creation process.\n      emitEvent: !!this.asyncValidator,\n    });\n  }\n\n  public controls: ɵTypedOrUntyped<TControl, Array<TControl>, Array<AbstractControl<any>>>;\n\n  /**\n   * Get the `AbstractControl` at the given `index` in the array.\n   *\n   * @param index Index in the array to retrieve the control. If `index` is negative, it will wrap\n   *     around from the back, and if index is greatly negative (less than `-length`), the result is\n   * undefined. This behavior is the same as `Array.at(index)`.\n   */\n  at(index: number): ɵTypedOrUntyped<TControl, TControl, AbstractControl<any>> {\n    return (this.controls as any)[this._adjustIndex(index)];\n  }\n\n  /**\n   * Insert a new `AbstractControl` at the end of the array.\n   *\n   * @param control Form control to be inserted\n   * @param options Specifies whether this FormArray instance should emit events after a new\n   *     control is added.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when the control is\n   * inserted. When false, no events are emitted.\n   */\n  push(control: TControl, options: {emitEvent?: boolean} = {}): void {\n    this.controls.push(control);\n    this._registerControl(control);\n    this.updateValueAndValidity({emitEvent: options.emitEvent});\n    this._onCollectionChange();\n  }\n\n  /**\n   * Insert a new `AbstractControl` at the given `index` in the array.\n   *\n   * @param index Index in the array to insert the control. If `index` is negative, wraps around\n   *     from the back. If `index` is greatly negative (less than `-length`), prepends to the array.\n   * This behavior is the same as `Array.splice(index, 0, control)`.\n   * @param control Form control to be inserted\n   * @param options Specifies whether this FormArray instance should emit events after a new\n   *     control is inserted.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when the control is\n   * inserted. When false, no events are emitted.\n   */\n  insert(index: number, control: TControl, options: {emitEvent?: boolean} = {}): void {\n    this.controls.splice(index, 0, control);\n\n    this._registerControl(control);\n    this.updateValueAndValidity({emitEvent: options.emitEvent});\n  }\n\n  /**\n   * Remove the control at the given `index` in the array.\n   *\n   * @param index Index in the array to remove the control.  If `index` is negative, wraps around\n   *     from the back. If `index` is greatly negative (less than `-length`), removes the first\n   *     element. This behavior is the same as `Array.splice(index, 1)`.\n   * @param options Specifies whether this FormArray instance should emit events after a\n   *     control is removed.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when the control is\n   * removed. When false, no events are emitted.\n   */\n  removeAt(index: number, options: {emitEvent?: boolean} = {}): void {\n    // Adjust the index, then clamp it at no less than 0 to prevent undesired underflows.\n    let adjustedIndex = this._adjustIndex(index);\n    if (adjustedIndex < 0) adjustedIndex = 0;\n\n    if (this.controls[adjustedIndex])\n      this.controls[adjustedIndex]._registerOnCollectionChange(() => {});\n    this.controls.splice(adjustedIndex, 1);\n    this.updateValueAndValidity({emitEvent: options.emitEvent});\n  }\n\n  /**\n   * Replace an existing control.\n   *\n   * @param index Index in the array to replace the control. If `index` is negative, wraps around\n   *     from the back. If `index` is greatly negative (less than `-length`), replaces the first\n   *     element. This behavior is the same as `Array.splice(index, 1, control)`.\n   * @param control The `AbstractControl` control to replace the existing control\n   * @param options Specifies whether this FormArray instance should emit events after an\n   *     existing control is replaced with a new one.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when the control is\n   * replaced with a new one. When false, no events are emitted.\n   */\n  setControl(index: number, control: TControl, options: {emitEvent?: boolean} = {}): void {\n    // Adjust the index, then clamp it at no less than 0 to prevent undesired underflows.\n    let adjustedIndex = this._adjustIndex(index);\n    if (adjustedIndex < 0) adjustedIndex = 0;\n\n    if (this.controls[adjustedIndex])\n      this.controls[adjustedIndex]._registerOnCollectionChange(() => {});\n    this.controls.splice(adjustedIndex, 1);\n\n    if (control) {\n      this.controls.splice(adjustedIndex, 0, control);\n      this._registerControl(control);\n    }\n\n    this.updateValueAndValidity({emitEvent: options.emitEvent});\n    this._onCollectionChange();\n  }\n\n  /**\n   * Length of the control array.\n   */\n  get length(): number {\n    return this.controls.length;\n  }\n\n  /**\n   * Sets the value of the `FormArray`. It accepts an array that matches\n   * the structure of the control.\n   *\n   * This method performs strict checks, and throws an error if you try\n   * to set the value of a control that doesn't exist or if you exclude the\n   * value of a control.\n   *\n   * @usageNotes\n   * ### Set the values for the controls in the form array\n   *\n   * ```ts\n   * const arr = new FormArray([\n   *   new FormControl(),\n   *   new FormControl()\n   * ]);\n   * console.log(arr.value);   // [null, null]\n   *\n   * arr.setValue(['Nancy', 'Drew']);\n   * console.log(arr.value);   // ['Nancy', 'Drew']\n   * ```\n   *\n   * @param value Array of values for the controls\n   * @param options Configure options that determine how the control propagates changes and\n   * emits events after the value changes\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n   * is false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control value is updated.\n   * When false, no events are emitted.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   */\n  override setValue(\n    value: ɵFormArrayRawValue<TControl>,\n    options: {\n      onlySelf?: boolean;\n      emitEvent?: boolean;\n    } = {},\n  ): void {\n    assertAllValuesPresent(this, false, value);\n    value.forEach((newValue: any, index: number) => {\n      assertControlPresent(this, false, index);\n      this.at(index).setValue(newValue, {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * Patches the value of the `FormArray`. It accepts an array that matches the\n   * structure of the control, and does its best to match the values to the correct\n   * controls in the group.\n   *\n   * It accepts both super-sets and sub-sets of the array without throwing an error.\n   *\n   * @usageNotes\n   * ### Patch the values for controls in a form array\n   *\n   * ```ts\n   * const arr = new FormArray([\n   *    new FormControl(),\n   *    new FormControl()\n   * ]);\n   * console.log(arr.value);   // [null, null]\n   *\n   * arr.patchValue(['Nancy']);\n   * console.log(arr.value);   // ['Nancy', null]\n   * ```\n   *\n   * @param value Array of latest values for the controls\n   * @param options Configure options that determine how the control propagates changes and\n   * emits events after the value changes\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n   * is false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when the control\n   * value is updated. When false, no events are emitted. The configuration options are passed to\n   * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.\n   */\n  override patchValue(\n    value: ɵFormArrayValue<TControl>,\n    options: {\n      onlySelf?: boolean;\n      emitEvent?: boolean;\n    } = {},\n  ): void {\n    // Even though the `value` argument type doesn't allow `null` and `undefined` values, the\n    // `patchValue` can be called recursively and inner data structures might have these values,\n    // so we just ignore such cases when a field containing FormArray instance receives `null` or\n    // `undefined` as a value.\n    if (value == null /* both `null` and `undefined` */) return;\n\n    value.forEach((newValue, index) => {\n      if (this.at(index)) {\n        this.at(index).patchValue(newValue, {onlySelf: true, emitEvent: options.emitEvent});\n      }\n    });\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the\n   * value of all descendants to null or null maps.\n   *\n   * You reset to a specific form state by passing in an array of states\n   * that matches the structure of the control. The state is a standalone value\n   * or a form state object with both a value and a disabled status.\n   *\n   * @usageNotes\n   * ### Reset the values in a form array\n   *\n   * ```ts\n   * const arr = new FormArray([\n   *    new FormControl(),\n   *    new FormControl()\n   * ]);\n   * arr.reset(['name', 'last name']);\n   *\n   * console.log(arr.value);  // ['name', 'last name']\n   * ```\n   *\n   * ### Reset the values in a form array and the disabled status for the first control\n   *\n   * ```ts\n   * arr.reset([\n   *   {value: 'name', disabled: true},\n   *   'last'\n   * ]);\n   *\n   * console.log(arr.value);  // ['last']\n   * console.log(arr.at(0).status);  // 'DISABLED'\n   * ```\n   *\n   * @param value Array of values for the controls\n   * @param options Configure options that determine how the control propagates changes and\n   * emits events after the value changes\n   *\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n   * is false.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges`\n   * observables emit events with the latest status and value when the control is reset.\n   * When false, no events are emitted.\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n   * updateValueAndValidity} method.\n   */\n  override reset(\n    value: ɵTypedOrUntyped<TControl, ɵFormArrayValue<TControl>, any> = [],\n    options: {\n      onlySelf?: boolean;\n      emitEvent?: boolean;\n    } = {},\n  ): void {\n    this._forEachChild((control: AbstractControl, index: number) => {\n      control.reset(value[index], {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this._updatePristine(options, this);\n    this._updateTouched(options, this);\n    this.updateValueAndValidity(options);\n  }\n\n  /**\n   * The aggregate value of the array, including any disabled controls.\n   *\n   * Reports all values regardless of disabled status.\n   */\n  override getRawValue(): ɵFormArrayRawValue<TControl> {\n    return this.controls.map((control: AbstractControl) => control.getRawValue());\n  }\n\n  /**\n   * Remove all controls in the `FormArray`.\n   *\n   * @param options Specifies whether this FormArray instance should emit events after all\n   *     controls are removed.\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n   * `valueChanges` observables emit events with the latest status and value when all controls\n   * in this FormArray instance are removed. When false, no events are emitted.\n   *\n   * @usageNotes\n   * ### Remove all elements from a FormArray\n   *\n   * ```ts\n   * const arr = new FormArray([\n   *    new FormControl(),\n   *    new FormControl()\n   * ]);\n   * console.log(arr.length);  // 2\n   *\n   * arr.clear();\n   * console.log(arr.length);  // 0\n   * ```\n   *\n   * It's a simpler and more efficient alternative to removing all elements one by one:\n   *\n   * ```ts\n   * const arr = new FormArray([\n   *    new FormControl(),\n   *    new FormControl()\n   * ]);\n   *\n   * while (arr.length) {\n   *    arr.removeAt(0);\n   * }\n   * ```\n   */\n  clear(options: {emitEvent?: boolean} = {}): void {\n    if (this.controls.length < 1) return;\n    this._forEachChild((control) => control._registerOnCollectionChange(() => {}));\n    this.controls.splice(0);\n    this.updateValueAndValidity({emitEvent: options.emitEvent});\n  }\n\n  /**\n   * Adjusts a negative index by summing it with the length of the array. For very negative\n   * indices, the result may remain negative.\n   * @internal\n   */\n  private _adjustIndex(index: number): number {\n    return index < 0 ? index + this.length : index;\n  }\n\n  /** @internal */\n  override _syncPendingControls(): boolean {\n    let subtreeUpdated = (this.controls as any).reduce((updated: any, child: any) => {\n      return child._syncPendingControls() ? true : updated;\n    }, false);\n    if (subtreeUpdated) this.updateValueAndValidity({onlySelf: true});\n    return subtreeUpdated;\n  }\n\n  /** @internal */\n  override _forEachChild(cb: (c: AbstractControl, index: number) => void): void {\n    this.controls.forEach((control: AbstractControl, index: number) => {\n      cb(control, index);\n    });\n  }\n\n  /** @internal */\n  override _updateValue(): void {\n    (this as Writable<this>).value = this.controls\n      .filter((control) => control.enabled || this.disabled)\n      .map((control) => control.value);\n  }\n\n  /** @internal */\n  override _anyControls(condition: (c: AbstractControl) => boolean): boolean {\n    return this.controls.some((control) => control.enabled && condition(control));\n  }\n\n  /** @internal */\n  _setUpControls(): void {\n    this._forEachChild((control) => this._registerControl(control));\n  }\n\n  /** @internal */\n  override _allControlsDisabled(): boolean {\n    for (const control of this.controls) {\n      if (control.enabled) return false;\n    }\n    return this.controls.length > 0 || this.disabled;\n  }\n\n  private _registerControl(control: AbstractControl) {\n    control.setParent(this);\n    control._registerOnCollectionChange(this._onCollectionChange);\n  }\n\n  /** @internal */\n  override _find(name: string | number): AbstractControl | null {\n    return this.at(name as number) ?? null;\n  }\n}\n\ninterface UntypedFormArrayCtor {\n  new (\n    controls: AbstractControl[],\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\n  ): UntypedFormArray;\n\n  /**\n   * The presence of an explicit `prototype` property provides backwards-compatibility for apps that\n   * manually inspect the prototype chain.\n   */\n  prototype: FormArray<any>;\n}\n\n/**\n * UntypedFormArray is a non-strongly-typed version of `FormArray`, which\n * permits heterogenous controls.\n */\nexport type UntypedFormArray = FormArray<any>;\n\nexport const UntypedFormArray: UntypedFormArrayCtor = FormArray;\n\n/**\n * @description\n * Asserts that the given control is an instance of `FormArray`\n *\n * @publicApi\n */\nexport const isFormArray = (control: unknown): control is FormArray => control instanceof FormArray;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, Injectable} from '@angular/core';\n\nimport {AsyncValidatorFn, ValidatorFn} from './directives/validators';\nimport {AbstractControl, AbstractControlOptions, FormHooks} from './model/abstract_model';\nimport {FormArray, UntypedFormArray} from './model/form_array';\nimport {\n  FormControl,\n  FormControlOptions,\n  FormControlState,\n  UntypedFormControl,\n} from './model/form_control';\nimport {FormGroup, FormRecord, UntypedFormGroup} from './model/form_group';\n\nfunction isAbstractControlOptions(\n  options: AbstractControlOptions | {[key: string]: any} | null | undefined,\n): options is AbstractControlOptions {\n  return (\n    !!options &&\n    ((options as AbstractControlOptions).asyncValidators !== undefined ||\n      (options as AbstractControlOptions).validators !== undefined ||\n      (options as AbstractControlOptions).updateOn !== undefined)\n  );\n}\n\n/**\n * The union of all validator types that can be accepted by a ControlConfig.\n */\ntype ValidatorConfig = ValidatorFn | AsyncValidatorFn | ValidatorFn[] | AsyncValidatorFn[];\n\n/**\n * The compiler may not always be able to prove that the elements of the control config are a tuple\n * (i.e. occur in a fixed order). This slightly looser type is used for inference, to catch cases\n * where the compiler cannot prove order and position.\n *\n * For example, consider the simple case `fb.group({foo: ['bar', Validators.required]})`. The\n * compiler will infer this as an array, not as a tuple.\n */\ntype PermissiveControlConfig<T> = Array<T | FormControlState<T> | ValidatorConfig>;\n\n/**\n * Helper type to allow the compiler to accept [XXXX, { updateOn: string }] as a valid shorthand\n * argument for .group()\n */\ninterface PermissiveAbstractControlOptions extends Omit<AbstractControlOptions, 'updateOn'> {\n  updateOn?: string;\n}\n\n// Note: these two types have been extracted into type aliases to work around a .d.ts generation\n// issue in TypeScript 5.7. See: https://github.com/Microsoft/TypeScript/issues/60506. The types\n// have to be exported for the workaround to work.\n/** A map of nullable form controls. */\nexport type ɵNullableFormControls<T> = {[K in keyof T]: ɵElement<T[K], null>};\n\n/** A map of non-nullable form controls. */\nexport type ɵNonNullableFormControls<T> = {[K in keyof T]: ɵElement<T[K], never>};\n\n/**\n * ControlConfig<T> is a tuple containing a value of type T, plus optional validators and async\n * validators.\n *\n * @publicApi\n */\nexport type ControlConfig<T> = [\n  T | FormControlState<T>,\n  (ValidatorFn | ValidatorFn[])?,\n  (AsyncValidatorFn | AsyncValidatorFn[])?,\n];\n\n/**\n * FormBuilder accepts values in various container shapes, as well as raw values.\n * Element returns the appropriate corresponding model class, given the container T.\n * The flag N, if not never, makes the resulting `FormControl` have N in its type.\n */\nexport type ɵElement<T, N extends null> =\n  // The `extends` checks are wrapped in arrays in order to prevent TypeScript from applying type unions\n  // through the distributive conditional type. This is the officially recommended solution:\n  // https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types\n  //\n  // Identify FormControl container types.\n  [T] extends [FormControl<infer U>]\n    ? FormControl<U>\n    : // Or FormControl containers that are optional in their parent group.\n      [T] extends [FormControl<infer U> | undefined]\n      ? FormControl<U>\n      : // FormGroup containers.\n        [T] extends [FormGroup<infer U>]\n        ? FormGroup<U>\n        : // Optional FormGroup containers.\n          [T] extends [FormGroup<infer U> | undefined]\n          ? FormGroup<U>\n          : // FormRecord containers.\n            [T] extends [FormRecord<infer U>]\n            ? FormRecord<U>\n            : // Optional FormRecord containers.\n              [T] extends [FormRecord<infer U> | undefined]\n              ? FormRecord<U>\n              : // FormArray containers.\n                [T] extends [FormArray<infer U>]\n                ? FormArray<U>\n                : // Optional FormArray containers.\n                  [T] extends [FormArray<infer U> | undefined]\n                  ? FormArray<U>\n                  : // Otherwise unknown AbstractControl containers.\n                    [T] extends [AbstractControl<infer U>]\n                    ? AbstractControl<U>\n                    : // Optional AbstractControl containers.\n                      [T] extends [AbstractControl<infer U> | undefined]\n                      ? AbstractControl<U>\n                      : // FormControlState object container, which produces a nullable control.\n                        [T] extends [FormControlState<infer U>]\n                        ? FormControl<U | N>\n                        : // A ControlConfig tuple, which produces a nullable control.\n                          [T] extends [PermissiveControlConfig<infer U>]\n                          ? FormControl<\n                              Exclude<U, ValidatorConfig | PermissiveAbstractControlOptions> | N\n                            >\n                          : FormControl<T | N>;\n\n/**\n * @description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a\n * `FormControl`, `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to\n * build complex forms.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class FormBuilder {\n  private useNonNullable: boolean = false;\n\n  /**\n   * @description\n   * Returns a FormBuilder in which automatically constructed `FormControl` elements\n   * have `{nonNullable: true}` and are non-nullable.\n   *\n   * **Constructing non-nullable controls**\n   *\n   * When constructing a control, it will be non-nullable, and will reset to its initial value.\n   *\n   * ```ts\n   * let nnfb = new FormBuilder().nonNullable;\n   * let name = nnfb.control('Alex'); // FormControl<string>\n   * name.reset();\n   * console.log(name); // 'Alex'\n   * ```\n   *\n   * **Constructing non-nullable groups or arrays**\n   *\n   * When constructing a group or array, all automatically created inner controls will be\n   * non-nullable, and will reset to their initial values.\n   *\n   * ```ts\n   * let nnfb = new FormBuilder().nonNullable;\n   * let name = nnfb.group({who: 'Alex'}); // FormGroup<{who: FormControl<string>}>\n   * name.reset();\n   * console.log(name); // {who: 'Alex'}\n   * ```\n   * **Constructing *nullable* fields on groups or arrays**\n   *\n   * It is still possible to have a nullable field. In particular, any `FormControl` which is\n   * *already* constructed will not be altered. For example:\n   *\n   * ```ts\n   * let nnfb = new FormBuilder().nonNullable;\n   * // FormGroup<{who: FormControl<string|null>}>\n   * let name = nnfb.group({who: new FormControl('Alex')});\n   * name.reset(); console.log(name); // {who: null}\n   * ```\n   *\n   * Because the inner control is constructed explicitly by the caller, the builder has\n   * no control over how it is created, and cannot exclude the `null`.\n   */\n  get nonNullable(): NonNullableFormBuilder {\n    const nnfb = new FormBuilder();\n    nnfb.useNonNullable = true;\n    return nnfb as NonNullableFormBuilder;\n  }\n\n  /**\n   * @description\n   * Constructs a new `FormGroup` instance. Accepts a single generic argument, which is an object\n   * containing all the keys and corresponding inner control types.\n   *\n   * @param controls A collection of child controls. The key for each child is the name\n   * under which it is registered.\n   *\n   * @param options Configuration options object for the `FormGroup`. The object should have the\n   * `AbstractControlOptions` type and might contain the following fields:\n   * * `validators`: A synchronous validator function, or an array of validator functions.\n   * * `asyncValidators`: A single async validator or array of async validator functions.\n   * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur'\n   * | submit').\n   */\n  group<T extends {}>(\n    controls: T,\n    options?: AbstractControlOptions | null,\n  ): FormGroup<ɵNullableFormControls<T>>;\n\n  /**\n   * @description\n   * Constructs a new `FormGroup` instance.\n   *\n   * @deprecated This API is not typesafe and can result in issues with Closure Compiler renaming.\n   * Use the `FormBuilder#group` overload with `AbstractControlOptions` instead.\n   * Note that `AbstractControlOptions` expects `validators` and `asyncValidators` to be valid\n   * validators. If you have custom validators, make sure their validation function parameter is\n   * `AbstractControl` and not a sub-class, such as `FormGroup`. These functions will be called\n   * with an object of type `AbstractControl` and that cannot be automatically downcast to a\n   * subclass, so TypeScript sees this as an error. For example, change the `(group: FormGroup) =>\n   * ValidationErrors|null` signature to be `(group: AbstractControl) => ValidationErrors|null`.\n   *\n   * @param controls A record of child controls. The key for each child is the name\n   * under which the control is registered.\n   *\n   * @param options Configuration options object for the `FormGroup`. The legacy configuration\n   * object consists of:\n   * * `validator`: A synchronous validator function, or an array of validator functions.\n   * * `asyncValidator`: A single async validator or array of async validator functions\n   * Note: the legacy format is deprecated and might be removed in one of the next major versions\n   * of Angular.\n   */\n  group(controls: {[key: string]: any}, options: {[key: string]: any}): FormGroup;\n\n  group(\n    controls: {[key: string]: any},\n    options: AbstractControlOptions | {[key: string]: any} | null = null,\n  ): FormGroup {\n    const reducedControls = this._reduceControls(controls);\n    let newOptions: FormControlOptions = {};\n    if (isAbstractControlOptions(options)) {\n      // `options` are `AbstractControlOptions`\n      newOptions = options;\n    } else if (options !== null) {\n      // `options` are legacy form group options\n      newOptions.validators = (options as any).validator;\n      newOptions.asyncValidators = (options as any).asyncValidator;\n    }\n    return new FormGroup(reducedControls, newOptions);\n  }\n\n  /**\n   * @description\n   * Constructs a new `FormRecord` instance. Accepts a single generic argument, which is an object\n   * containing all the keys and corresponding inner control types.\n   *\n   * @param controls A collection of child controls. The key for each child is the name\n   * under which it is registered.\n   *\n   * @param options Configuration options object for the `FormRecord`. The object should have the\n   * `AbstractControlOptions` type and might contain the following fields:\n   * * `validators`: A synchronous validator function, or an array of validator functions.\n   * * `asyncValidators`: A single async validator or array of async validator functions.\n   * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur'\n   * | submit').\n   */\n  record<T>(\n    controls: {[key: string]: T},\n    options: AbstractControlOptions | null = null,\n  ): FormRecord<ɵElement<T, null>> {\n    const reducedControls = this._reduceControls(controls);\n    // Cast to `any` because the inferred types are not as specific as Element.\n    return new FormRecord(reducedControls, options) as any;\n  }\n\n  /** @deprecated Use `nonNullable` instead. */\n  control<T>(\n    formState: T | FormControlState<T>,\n    opts: FormControlOptions & {\n      initialValueIsDefault: true;\n    },\n  ): FormControl<T>;\n\n  control<T>(\n    formState: T | FormControlState<T>,\n    opts: FormControlOptions & {nonNullable: true},\n  ): FormControl<T>;\n\n  /**\n   * @deprecated When passing an `options` argument, the `asyncValidator` argument has no effect.\n   */\n  control<T>(\n    formState: T | FormControlState<T>,\n    opts: FormControlOptions,\n    asyncValidator: AsyncValidatorFn | AsyncValidatorFn[],\n  ): FormControl<T | null>;\n\n  control<T>(\n    formState: T | FormControlState<T>,\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | FormControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\n  ): FormControl<T | null>;\n\n  /**\n   * @description\n   * Constructs a new `FormControl` with the given state, validators and options. Sets\n   * `{nonNullable: true}` in the options to get a non-nullable control. Otherwise, the\n   * control will be nullable. Accepts a single generic argument, which is the type  of the\n   * control's value.\n   *\n   * @param formState Initializes the control with an initial state value, or\n   * with an object that contains both a value and a disabled status.\n   *\n   * @param validatorOrOpts A synchronous validator function, or an array of\n   * such functions, or a `FormControlOptions` object that contains\n   * validation functions and a validation trigger.\n   *\n   * @param asyncValidator A single async validator or array of async validator\n   * functions.\n   *\n   * @usageNotes\n   *\n   * ### Initialize a control as disabled\n   *\n   * The following example returns a control with an initial value in a disabled state.\n   *\n   * {@example forms/ts/formBuilder/form_builder_example.ts region='disabled-control'}\n   */\n  control<T>(\n    formState: T | FormControlState<T>,\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | FormControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\n  ): FormControl {\n    let newOptions: FormControlOptions = {};\n    if (!this.useNonNullable) {\n      return new FormControl(formState, validatorOrOpts, asyncValidator);\n    }\n    if (isAbstractControlOptions(validatorOrOpts)) {\n      // If the second argument is options, then they are copied.\n      newOptions = validatorOrOpts;\n    } else {\n      // If the other arguments are validators, they are copied into an options object.\n      newOptions.validators = validatorOrOpts;\n      newOptions.asyncValidators = asyncValidator;\n    }\n    return new FormControl<T>(formState, {...newOptions, nonNullable: true});\n  }\n\n  /**\n   * Constructs a new `FormArray` from the given array of configurations,\n   * validators and options. Accepts a single generic argument, which is the type of each control\n   * inside the array.\n   *\n   * @param controls An array of child controls or control configs. Each child control is given an\n   *     index when it is registered.\n   *\n   * @param validatorOrOpts A synchronous validator function, or an array of such functions, or an\n   *     `AbstractControlOptions` object that contains\n   * validation functions and a validation trigger.\n   *\n   * @param asyncValidator A single async validator or array of async validator functions.\n   */\n  array<T>(\n    controls: Array<T>,\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\n  ): FormArray<ɵElement<T, null>> {\n    const createdControls = controls.map((c) => this._createControl(c));\n    // Cast to `any` because the inferred types are not as specific as Element.\n    return new FormArray(createdControls, validatorOrOpts, asyncValidator) as any;\n  }\n\n  /** @internal */\n  _reduceControls<T>(controls: {\n    [k: string]: T | ControlConfig<T> | FormControlState<T> | AbstractControl<T>;\n  }): {[key: string]: AbstractControl} {\n    const createdControls: {[key: string]: AbstractControl} = {};\n    Object.keys(controls).forEach((controlName) => {\n      createdControls[controlName] = this._createControl(controls[controlName]);\n    });\n    return createdControls;\n  }\n\n  /** @internal */\n  _createControl<T>(\n    controls: T | FormControlState<T> | ControlConfig<T> | FormControl<T> | AbstractControl<T>,\n  ): FormControl<T> | FormControl<T | null> | AbstractControl<T> {\n    if (controls instanceof FormControl) {\n      return controls as FormControl<T>;\n    } else if (controls instanceof AbstractControl) {\n      // A control; just return it\n      return controls;\n    } else if (Array.isArray(controls)) {\n      // ControlConfig Tuple\n      const value: T | FormControlState<T> = controls[0];\n      const validator: ValidatorFn | ValidatorFn[] | null =\n        controls.length > 1 ? controls[1]! : null;\n      const asyncValidator: AsyncValidatorFn | AsyncValidatorFn[] | null =\n        controls.length > 2 ? controls[2]! : null;\n      return this.control<T>(value, validator, asyncValidator);\n    } else {\n      // T or FormControlState<T>\n      return this.control<T>(controls);\n    }\n  }\n}\n\n/**\n * @description\n * `NonNullableFormBuilder` is similar to {@link FormBuilder}, but automatically constructed\n * {@link FormControl} elements have `{nonNullable: true}` and are non-nullable.\n *\n * @publicApi\n */\n@Injectable({\n  providedIn: 'root',\n  useFactory: () => inject(FormBuilder).nonNullable,\n})\nexport abstract class NonNullableFormBuilder {\n  /**\n   * Similar to `FormBuilder#group`, except any implicitly constructed `FormControl`\n   * will be non-nullable (i.e. it will have `nonNullable` set to true). Note\n   * that already-constructed controls will not be altered.\n   */\n  abstract group<T extends {}>(\n    controls: T,\n    options?: AbstractControlOptions | null,\n  ): FormGroup<ɵNonNullableFormControls<T>>;\n\n  /**\n   * Similar to `FormBuilder#record`, except any implicitly constructed `FormControl`\n   * will be non-nullable (i.e. it will have `nonNullable` set to true). Note\n   * that already-constructed controls will not be altered.\n   */\n  abstract record<T>(\n    controls: {[key: string]: T},\n    options?: AbstractControlOptions | null,\n  ): FormRecord<ɵElement<T, never>>;\n\n  /**\n   * Similar to `FormBuilder#array`, except any implicitly constructed `FormControl`\n   * will be non-nullable (i.e. it will have `nonNullable` set to true). Note\n   * that already-constructed controls will not be altered.\n   */\n  abstract array<T>(\n    controls: Array<T>,\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\n  ): FormArray<ɵElement<T, never>>;\n\n  /**\n   * Similar to `FormBuilder#control`, except this overridden version of `control` forces\n   * `nonNullable` to be `true`, resulting in the control always being non-nullable.\n   */\n  abstract control<T>(\n    formState: T | FormControlState<T>,\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\n  ): FormControl<T>;\n}\n\n/**\n * UntypedFormBuilder is the same as `FormBuilder`, but it provides untyped controls.\n */\n@Injectable({providedIn: 'root'})\nexport class UntypedFormBuilder extends FormBuilder {\n  /**\n   * Like `FormBuilder#group`, except the resulting group is untyped.\n   */\n  override group(\n    controlsConfig: {[key: string]: any},\n    options?: AbstractControlOptions | null,\n  ): UntypedFormGroup;\n\n  /**\n   * @deprecated This API is not typesafe and can result in issues with Closure Compiler renaming.\n   * Use the `FormBuilder#group` overload with `AbstractControlOptions` instead.\n   */\n  override group(\n    controlsConfig: {[key: string]: any},\n    options: {[key: string]: any},\n  ): UntypedFormGroup;\n\n  override group(\n    controlsConfig: {[key: string]: any},\n    options: AbstractControlOptions | {[key: string]: any} | null = null,\n  ): UntypedFormGroup {\n    return super.group(controlsConfig, options);\n  }\n\n  /**\n   * Like `FormBuilder#control`, except the resulting control is untyped.\n   */\n  override control(\n    formState: any,\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | FormControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\n  ): UntypedFormControl {\n    return super.control(formState, validatorOrOpts, asyncValidator);\n  }\n\n  /**\n   * Like `FormBuilder#array`, except the resulting array is untyped.\n   */\n  override array(\n    controlsConfig: any[],\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null,\n  ): UntypedFormArray {\n    return super.array(controlsConfig, validatorOrOpts, asyncValidator);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {\n  InternalFormsSharedModule,\n  NG_MODEL_WITH_FORM_CONTROL_WARNING,\n  REACTIVE_DRIVEN_DIRECTIVES,\n  TEMPLATE_DRIVEN_DIRECTIVES,\n} from './directives';\nimport {\n  CALL_SET_DISABLED_STATE,\n  setDisabledStateDefault,\n  SetDisabledStateOption,\n} from './directives/shared';\n\n/**\n * Exports the required providers and directives for template-driven forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Overview](guide/forms)\n * @see [Template-driven Forms Guide](guide/forms)\n *\n * @publicApi\n */\n@NgModule({\n  declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n  exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES],\n})\nexport class FormsModule {\n  /**\n   * @description\n   * Provides options for configuring the forms module.\n   *\n   * @param opts An object of configuration options\n   * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more\n   * correct, or to only call it `whenDisabled`, which is the legacy behavior.\n   */\n  static withConfig(opts: {\n    callSetDisabledState?: SetDisabledStateOption;\n  }): ModuleWithProviders<FormsModule> {\n    return {\n      ngModule: FormsModule,\n      providers: [\n        {\n          provide: CALL_SET_DISABLED_STATE,\n          useValue: opts.callSetDisabledState ?? setDisabledStateDefault,\n        },\n      ],\n    };\n  }\n}\n\n/**\n * Exports the required infrastructure and directives for reactive forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Overview](guide/forms)\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n *\n * @publicApi\n */\n@NgModule({\n  declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n  exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES],\n})\nexport class ReactiveFormsModule {\n  /**\n   * @description\n   * Provides options for configuring the reactive forms module.\n   *\n   * @param opts An object of configuration options\n   * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`\n   * binding is used with reactive form directives.\n   * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more\n   * correct, or to only call it `whenDisabled`, which is the legacy behavior.\n   */\n  static withConfig(opts: {\n    /** @deprecated as of v6 */ warnOnNgModelWithFormControl?: 'never' | 'once' | 'always';\n    callSetDisabledState?: SetDisabledStateOption;\n  }): ModuleWithProviders<ReactiveFormsModule> {\n    return {\n      ngModule: ReactiveFormsModule,\n      providers: [\n        {\n          provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,\n          useValue: opts.warnOnNgModelWithFormControl ?? 'always',\n        },\n        {\n          provide: CALL_SET_DISABLED_STATE,\n          useValue: opts.callSetDisabledState ?? setDisabledStateDefault,\n        },\n      ],\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Type describing the allowed values for a number input\n * @docs-private\n */\nexport type NumberInput = string | number | null | undefined;\n\n/** Coerces a data-bound value (typically a string) to a number. */\nexport function coerceNumberProperty(value: any): number;\nexport function coerceNumberProperty<D>(value: any, fallback: D): number | D;\nexport function coerceNumberProperty(value: any, fallbackValue = 0) {\n  if (_isNumberValue(value)) {\n    return Number(value);\n  }\n  return arguments.length === 2 ? fallbackValue : 0;\n}\n\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nexport function _isNumberValue(value: any): boolean {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return !isNaN(parseFloat(value as any)) && !isNaN(Number(value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ElementRef} from '@angular/core';\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nexport function coerceElement<T>(elementOrRef: ElementRef<T> | T): T {\n  return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Wraps the provided value in an array, unless the provided value is an array. */\nexport function coerceArray<T>(value: T | T[]): T[];\nexport function coerceArray<T>(value: T | readonly T[]): readonly T[];\nexport function coerceArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Coerces a value to a CSS pixel value. */\nexport function coerceCssPixelValue(value: any): string {\n  if (value == null) {\n    return '';\n  }\n\n  return typeof value === 'string' ? value : `${value}px`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Type describing the allowed values for a boolean input.\n * @docs-private\n */\nexport type BooleanInput = string | boolean | null | undefined;\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nexport function coerceStringArray(value: any, separator: string | RegExp = /\\s+/): string[] {\n  const result = [];\n\n  if (value != null) {\n    const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n    for (const sourceValue of sourceValues) {\n      const trimmedString = `${sourceValue}`.trim();\n      if (trimmedString) {\n        result.push(trimmedString);\n      }\n    }\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {isPlatformBrowser} from '@angular/common';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  hasV8BreakIterator = typeof Intl !== 'undefined' && (Intl as any).v8BreakIterator;\n} catch {\n  hasV8BreakIterator = false;\n}\n\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n@Injectable({providedIn: 'root'})\nexport class Platform {\n  private _platformId = inject(PLATFORM_ID);\n\n  // We want to use the Angular platform check because if the Document is shimmed\n  // without the navigator, the following checks will fail. This is preferred because\n  // sometimes the Document may be shimmed without the user's knowledge or intention\n  /** Whether the Angular application is being rendered in the browser. */\n  isBrowser: boolean = this._platformId\n    ? isPlatformBrowser(this._platformId)\n    : typeof document === 'object' && !!document;\n\n  /** Whether the current browser is Microsoft Edge. */\n  EDGE: boolean = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n\n  /** Whether the current rendering engine is Microsoft Trident. */\n  TRIDENT: boolean = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n  /** Whether the current rendering engine is Blink. */\n  BLINK: boolean =\n    this.isBrowser &&\n    !!((window as any).chrome || hasV8BreakIterator) &&\n    typeof CSS !== 'undefined' &&\n    !this.EDGE &&\n    !this.TRIDENT;\n\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n  /** Whether the current rendering engine is WebKit. */\n  WEBKIT: boolean =\n    this.isBrowser &&\n    /AppleWebKit/i.test(navigator.userAgent) &&\n    !this.BLINK &&\n    !this.EDGE &&\n    !this.TRIDENT;\n\n  /** Whether the current platform is Apple iOS. */\n  IOS: boolean =\n    this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  /** Whether the current browser is Firefox. */\n  FIREFOX: boolean = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n  /** Whether the current platform is Android. */\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID: boolean = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n\n  // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n  // Safari browser should also use Webkit as its layout engine.\n  /** Whether the current browser is Safari. */\n  SAFARI: boolean = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n\n  /** Backwards-compatible constructor. */\n  constructor(..._args: unknown[]);\n\n  constructor() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents: boolean;\n\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nexport function supportsPassiveEventListeners(): boolean {\n  if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n    try {\n      window.addEventListener(\n        'test',\n        null!,\n        Object.defineProperty({}, 'passive', {\n          get: () => (supportsPassiveEvents = true),\n        }),\n      );\n    } finally {\n      supportsPassiveEvents = supportsPassiveEvents || false;\n    }\n  }\n\n  return supportsPassiveEvents;\n}\n\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nexport function normalizePassiveListenerOptions(\n  options: AddEventListenerOptions,\n): AddEventListenerOptions | boolean {\n  return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** The possible ways the browser may handle the horizontal scroll axis in RTL languages. */\nexport enum RtlScrollAxisType {\n  /**\n   * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\n   * all the way right.\n   */\n  NORMAL,\n  /**\n   * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  NEGATED,\n  /**\n   * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  INVERTED,\n}\n\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType: RtlScrollAxisType | undefined;\n\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported: boolean | undefined;\n\n/** Check whether the browser supports scroll behaviors. */\nexport function supportsScrollBehavior(): boolean {\n  if (scrollBehaviorSupported == null) {\n    // If we're not in the browser, it can't be supported. Also check for `Element`, because\n    // some projects stub out the global `document` during SSR which can throw us off.\n    if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\n      scrollBehaviorSupported = false;\n      return scrollBehaviorSupported;\n    }\n\n    // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n    if ('scrollBehavior' in document.documentElement!.style) {\n      scrollBehaviorSupported = true;\n    } else {\n      // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n      // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n      const scrollToFunction: Function | undefined = Element.prototype.scrollTo;\n\n      if (scrollToFunction) {\n        // We can detect if the function has been polyfilled by calling `toString` on it. Native\n        // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n        // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n        // polyfilled functions as supporting scroll behavior.\n        scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n      } else {\n        scrollBehaviorSupported = false;\n      }\n    }\n  }\n\n  return scrollBehaviorSupported;\n}\n\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nexport function getRtlScrollAxisType(): RtlScrollAxisType {\n  // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n  if (typeof document !== 'object' || !document) {\n    return RtlScrollAxisType.NORMAL;\n  }\n\n  if (rtlScrollAxisType == null) {\n    // Create a 1px wide scrolling container and a 2px wide content element.\n    const scrollContainer = document.createElement('div');\n    const containerStyle = scrollContainer.style;\n    scrollContainer.dir = 'rtl';\n    containerStyle.width = '1px';\n    containerStyle.overflow = 'auto';\n    containerStyle.visibility = 'hidden';\n    containerStyle.pointerEvents = 'none';\n    containerStyle.position = 'absolute';\n\n    const content = document.createElement('div');\n    const contentStyle = content.style;\n    contentStyle.width = '2px';\n    contentStyle.height = '1px';\n\n    scrollContainer.appendChild(content);\n    document.body.appendChild(scrollContainer);\n\n    rtlScrollAxisType = RtlScrollAxisType.NORMAL;\n\n    // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n    // dealing with one of the other two types of browsers.\n    if (scrollContainer.scrollLeft === 0) {\n      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n      // return 0 when we read it again.\n      scrollContainer.scrollLeft = 1;\n      rtlScrollAxisType =\n        scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;\n    }\n\n    scrollContainer.remove();\n  }\n  return rtlScrollAxisType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nlet shadowDomIsSupported: boolean;\n\n/** Checks whether the user's browser support Shadow DOM. */\nexport function _supportsShadowDom(): boolean {\n  if (shadowDomIsSupported == null) {\n    const head = typeof document !== 'undefined' ? document.head : null;\n    shadowDomIsSupported = !!(head && ((head as any).createShadowRoot || head.attachShadow));\n  }\n\n  return shadowDomIsSupported;\n}\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement): ShadowRoot | null {\n  if (_supportsShadowDom()) {\n    const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n    // Note that this should be caught by `_supportsShadowDom`, but some\n    // teams have been able to hit this code path on unsupported browsers.\n    if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n      return rootNode;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Gets the currently-focused element on the page while\n * also piercing through Shadow DOM boundaries.\n */\nexport function _getFocusedElementPierceShadowDom(): HTMLElement | null {\n  let activeElement =\n    typeof document !== 'undefined' && document\n      ? (document.activeElement as HTMLElement | null)\n      : null;\n\n  while (activeElement && activeElement.shadowRoot) {\n    const newActiveElement = activeElement.shadowRoot.activeElement as HTMLElement | null;\n    if (newActiveElement === activeElement) {\n      break;\n    } else {\n      activeElement = newActiveElement;\n    }\n  }\n\n  return activeElement;\n}\n\n/** Gets the target of an event while accounting for Shadow DOM. */\nexport function _getEventTarget<T extends EventTarget>(event: Event): T | null {\n  // If an event is bound outside the Shadow DOM, the `event.target` will\n  // point to the shadow root so we have to use `composedPath` instead.\n  return (event.composedPath ? event.composedPath()[0] : event.target) as T | null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Renderer2, VERSION} from '@angular/core';\n\n// TODO(crisbeto): replace interface with the one from core when making breaking changes for v20.\n/** Options when binding events manually. */\nexport interface _ListenerOptions {\n  capture?: boolean;\n  once?: boolean;\n  passive?: boolean;\n}\n\n// TODO(crisbeto): remove this function when making breaking changes for v20.\n/**\n * Binds an event listener with specific options in a backwards-compatible way.\n * This function is necessary, because `Renderer2.listen` only supports listener options\n * after 19.1 and during the v19 period we support any 19.x version.\n * @docs-private\n */\nexport function _bindEventWithOptions(\n  renderer: Renderer2,\n  target: EventTarget,\n  eventName: string,\n  callback: (event: any) => boolean | void,\n  options: _ListenerOptions,\n): () => void {\n  const major = parseInt(VERSION.major);\n  const minor = parseInt(VERSION.minor);\n\n  // Event options in `listen` are only supported in 19.1 and beyond.\n  // We also allow 0.0.x, because that indicates a build at HEAD.\n  if (major > 19 || (major === 19 && minor > 0) || (major === 0 && minor === 0)) {\n    return renderer.listen(target, eventName, callback, options);\n  }\n\n  target.addEventListener(eventName, callback, options);\n\n  return () => {\n    target.removeEventListener(eventName, callback, options);\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Gets whether the code is currently running in a test environment. */\nexport function _isTestEnvironment(): boolean {\n  // We can't use `declare const` because it causes conflicts inside Google with the real typings\n  // for these symbols and we can't read them off the global object, because they don't appear to\n  // be attached there for some runners like Jest.\n  // (see: https://github.com/angular/components/issues/23365#issuecomment-938146643)\n  return (\n    // @ts-ignore\n    (typeof __karma__ !== 'undefined' && !!__karma__) ||\n    // @ts-ignore\n    (typeof jasmine !== 'undefined' && !!jasmine) ||\n    // @ts-ignore\n    (typeof jest !== 'undefined' && !!jest) ||\n    // @ts-ignore\n    (typeof Mocha !== 'undefined' && !!Mocha)\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes: Set<string>;\n\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n  // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n  // first changing it to something else:\n  // The specified value \"\" does not conform to the required format.\n  // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n  'color',\n  'button',\n  'checkbox',\n  'date',\n  'datetime-local',\n  'email',\n  'file',\n  'hidden',\n  'image',\n  'month',\n  'number',\n  'password',\n  'radio',\n  'range',\n  'reset',\n  'search',\n  'submit',\n  'tel',\n  'text',\n  'time',\n  'url',\n  'week',\n];\n\n/** @returns The input types supported by this browser. */\nexport function getSupportedInputTypes(): Set<string> {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  }\n\n  // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n\n  let featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(\n    candidateInputTypes.filter(value => {\n      featureTestInput.setAttribute('type', value);\n      return featureTestInput.type === value;\n    }),\n  );\n\n  return supportedInputTypes;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ApplicationRef,\n  ComponentRef,\n  createComponent,\n  EnvironmentInjector,\n  inject,\n  Injectable,\n  Injector,\n  Type,\n} from '@angular/core';\n\n/** Apps in which we've loaded styles. */\nconst appsWithLoaders = new WeakMap<\n  ApplicationRef,\n  {\n    /** Style loaders that have been added. */\n    loaders: Set<Type<unknown>>;\n\n    /** References to the instantiated loaders. */\n    refs: ComponentRef<unknown>[];\n  }\n>();\n\n/**\n * Service that loads structural styles dynamically\n * and ensures that they're only loaded once per app.\n */\n@Injectable({providedIn: 'root'})\nexport class _CdkPrivateStyleLoader {\n  private _appRef: ApplicationRef | undefined;\n  private _injector = inject(Injector);\n  private _environmentInjector = inject(EnvironmentInjector);\n\n  /**\n   * Loads a set of styles.\n   * @param loader Component which will be instantiated to load the styles.\n   */\n  load(loader: Type<unknown>): void {\n    // Resolve the app ref lazily to avoid circular dependency errors if this is called too early.\n    const appRef = (this._appRef = this._appRef || this._injector.get(ApplicationRef));\n    let data = appsWithLoaders.get(appRef);\n\n    // If we haven't loaded for this app before, we have to initialize it.\n    if (!data) {\n      data = {loaders: new Set(), refs: []};\n      appsWithLoaders.set(appRef, data);\n\n      // When the app is destroyed, we need to clean up all the related loaders.\n      appRef.onDestroy(() => {\n        appsWithLoaders.get(appRef)?.refs.forEach(ref => ref.destroy());\n        appsWithLoaders.delete(appRef);\n      });\n    }\n\n    // If the loader hasn't been loaded before, we need to instatiate it.\n    if (!data.loaders.has(loader)) {\n      data.loaders.add(loader);\n      data.refs.push(createComponent(loader, {environmentInjector: this._environmentInjector}));\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\n  // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n  // a clickable element. We can distinguish these events when `event.buttons` is zero, or\n  // `event.detail` is zero depending on the browser:\n  // - `event.buttons` works on Firefox, but fails on Chrome.\n  // - `detail` works on Chrome, but fails on Firefox.\n  return event.buttons === 0 || event.detail === 0;\n}\n\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nexport function isFakeTouchstartFromScreenReader(event: TouchEvent): boolean {\n  const touch: Touch | undefined =\n    (event.touches && event.touches[0]) || (event.changedTouches && event.changedTouches[0]);\n\n  // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n  // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n  // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n  // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n  return (\n    !!touch &&\n    touch.identifier === -1 &&\n    (touch.radiusX == null || touch.radiusX === 1) &&\n    (touch.radiusY == null || touch.radiusY === 1)\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ALT, CONTROL, MAC_META, META, SHIFT} from '../../keycodes';\nimport {\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  NgZone,\n  inject,\n  RendererFactory2,\n} from '@angular/core';\nimport {Platform, _bindEventWithOptions, _getEventTarget} from '../../platform';\nimport {DOCUMENT} from '@angular/common';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {distinctUntilChanged, skip} from 'rxjs/operators';\nimport {\n  isFakeMousedownFromScreenReader,\n  isFakeTouchstartFromScreenReader,\n} from '../fake-event-detection';\n\n/**\n * The input modalities detected by this service. Null is used if the input modality is unknown.\n */\nexport type InputModality = 'keyboard' | 'mouse' | 'touch' | null;\n\n/** Options to configure the behavior of the InputModalityDetector. */\nexport interface InputModalityDetectorOptions {\n  /** Keys to ignore when detecting keyboard input modality. */\n  ignoreKeys?: number[];\n}\n\n/**\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\n * options.\n */\nexport const INPUT_MODALITY_DETECTOR_OPTIONS = new InjectionToken<InputModalityDetectorOptions>(\n  'cdk-input-modality-detector-options',\n);\n\n/**\n * Default options for the InputModalityDetector.\n *\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\n * keyboard input modality) for two reasons:\n *\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\n *    in new tab', and are thus less representative of actual keyboard interaction.\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\n *    these keys so as to not update the input modality.\n *\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\n * distinguish between the two.\n */\nexport const INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS: InputModalityDetectorOptions = {\n  ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT],\n};\n\n/**\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\n * event to be attributed as mouse and not touch.\n *\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n * that a value of around 650ms seems appropriate.\n */\nexport const TOUCH_BUFFER_MS = 650;\n\n/**\n * Event listener options that enable capturing and also mark the listener as passive if the browser\n * supports it.\n */\nconst modalityEventListenerOptions = {\n  passive: true,\n  capture: true,\n};\n\n/**\n * Service that detects the user's input modality.\n *\n * This service does not update the input modality when a user navigates with a screen reader\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\n * input interaction.\n *\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\n * update the input modality to keyboard, but in general this service's behavior is largely\n * undefined.\n */\n@Injectable({providedIn: 'root'})\nexport class InputModalityDetector implements OnDestroy {\n  private readonly _platform = inject(Platform);\n  private readonly _listenerCleanups: (() => void)[] | undefined;\n\n  /** Emits whenever an input modality is detected. */\n  readonly modalityDetected: Observable<InputModality>;\n\n  /** Emits when the input modality changes. */\n  readonly modalityChanged: Observable<InputModality>;\n\n  /** The most recently detected input modality. */\n  get mostRecentModality(): InputModality {\n    return this._modality.value;\n  }\n\n  /**\n   * The most recently detected input modality event target. Is null if no input modality has been\n   * detected or if the associated event target is null for some unknown reason.\n   */\n  _mostRecentTarget: HTMLElement | null = null;\n\n  /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\n  private readonly _modality = new BehaviorSubject<InputModality>(null);\n\n  /** Options for this InputModalityDetector. */\n  private readonly _options: InputModalityDetectorOptions;\n\n  /**\n   * The timestamp of the last touch input modality. Used to determine whether mousedown events\n   * should be attributed to mouse or touch.\n   */\n  private _lastTouchMs = 0;\n\n  /**\n   * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\n   * bound.\n   */\n  private _onKeydown = (event: KeyboardEvent) => {\n    // If this is one of the keys we should ignore, then ignore it and don't update the input\n    // modality to keyboard.\n    if (this._options?.ignoreKeys?.some(keyCode => keyCode === event.keyCode)) {\n      return;\n    }\n\n    this._modality.next('keyboard');\n    this._mostRecentTarget = _getEventTarget(event);\n  };\n\n  /**\n   * Handles mousedown events. Must be an arrow function in order to preserve the context when it\n   * gets bound.\n   */\n  private _onMousedown = (event: MouseEvent) => {\n    // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\n    // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\n    // after the previous touch event.\n    if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {\n      return;\n    }\n\n    // Fake mousedown events are fired by some screen readers when controls are activated by the\n    // screen reader. Attribute them to keyboard input modality.\n    this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\n    this._mostRecentTarget = _getEventTarget(event);\n  };\n\n  /**\n   * Handles touchstart events. Must be an arrow function in order to preserve the context when it\n   * gets bound.\n   */\n  private _onTouchstart = (event: TouchEvent) => {\n    // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\n    // events are fired. Again, attribute to keyboard input modality.\n    if (isFakeTouchstartFromScreenReader(event)) {\n      this._modality.next('keyboard');\n      return;\n    }\n\n    // Store the timestamp of this touch event, as it's used to distinguish between mouse events\n    // triggered via mouse vs touch.\n    this._lastTouchMs = Date.now();\n\n    this._modality.next('touch');\n    this._mostRecentTarget = _getEventTarget(event);\n  };\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const ngZone = inject(NgZone);\n    const document = inject<Document>(DOCUMENT);\n    const options = inject(INPUT_MODALITY_DETECTOR_OPTIONS, {optional: true});\n\n    this._options = {\n      ...INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS,\n      ...options,\n    };\n\n    // Skip the first emission as it's null.\n    this.modalityDetected = this._modality.pipe(skip(1));\n    this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged());\n\n    // If we're not in a browser, this service should do nothing, as there's no relevant input\n    // modality to detect.\n    if (this._platform.isBrowser) {\n      const renderer = inject(RendererFactory2).createRenderer(null, null);\n\n      this._listenerCleanups = ngZone.runOutsideAngular(() => {\n        return [\n          _bindEventWithOptions(\n            renderer,\n            document,\n            'keydown',\n            this._onKeydown,\n            modalityEventListenerOptions,\n          ),\n          _bindEventWithOptions(\n            renderer,\n            document,\n            'mousedown',\n            this._onMousedown,\n            modalityEventListenerOptions,\n          ),\n          _bindEventWithOptions(\n            renderer,\n            document,\n            'touchstart',\n            this._onTouchstart,\n            modalityEventListenerOptions,\n          ),\n        ];\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._modality.complete();\n    this._listenerCleanups?.forEach(cleanup => cleanup());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Platform,\n  normalizePassiveListenerOptions,\n  _getShadowRoot,\n  _getEventTarget,\n} from '../../platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  InjectionToken,\n  NgZone,\n  OnDestroy,\n  Output,\n  AfterViewInit,\n  inject,\n} from '@angular/core';\nimport {Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {coerceElement} from '../../coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {InputModalityDetector, TOUCH_BUFFER_MS} from '../input-modality/input-modality-detector';\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n/**\n * Corresponds to the options that can be passed to the native `focus` event.\n * via https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus\n */\nexport interface FocusOptions {\n  /** Whether the browser should scroll to the element when it is focused. */\n  preventScroll?: boolean;\n}\n\n/** Detection mode used for attributing the origin of a focus event. */\nexport enum FocusMonitorDetectionMode {\n  /**\n   * Any mousedown, keydown, or touchstart event that happened in the previous\n   * tick or the current tick will be used to assign a focus event's origin (to\n   * either mouse, keyboard, or touch). This is the default option.\n   */\n  IMMEDIATE,\n  /**\n   * A focus event's origin is always attributed to the last corresponding\n   * mousedown, keydown, or touchstart event, no matter how long ago it occurred.\n   */\n  EVENTUAL,\n}\n\n/** Injectable service-level options for FocusMonitor. */\nexport interface FocusMonitorOptions {\n  detectionMode?: FocusMonitorDetectionMode;\n}\n\n/** InjectionToken for FocusMonitorOptions. */\nexport const FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken<FocusMonitorOptions>(\n  'cdk-focus-monitor-default-options',\n);\n\ntype MonitoredElementInfo = {\n  checkChildren: boolean;\n  readonly subject: Subject<FocusOrigin>;\n  rootNode: HTMLElement | ShadowRoot | Document;\n};\n\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true,\n});\n\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n@Injectable({providedIn: 'root'})\nexport class FocusMonitor implements OnDestroy {\n  private _ngZone = inject(NgZone);\n  private _platform = inject(Platform);\n  private readonly _inputModalityDetector = inject(InputModalityDetector);\n\n  /** The focus origin that the next focus event is a result of. */\n  private _origin: FocusOrigin = null;\n\n  /** The FocusOrigin of the last focus event tracked by the FocusMonitor. */\n  private _lastFocusOrigin: FocusOrigin;\n\n  /** Whether the window has just been focused. */\n  private _windowFocused = false;\n\n  /** The timeout id of the window focus timeout. */\n  private _windowFocusTimeoutId: ReturnType<typeof setTimeout>;\n\n  /** The timeout id of the origin clearing timeout. */\n  private _originTimeoutId: ReturnType<typeof setTimeout>;\n\n  /**\n   * Whether the origin was determined via a touch interaction. Necessary as properly attributing\n   * focus events to touch interactions requires special logic.\n   */\n  private _originFromTouchInteraction = false;\n\n  /** Map of elements being monitored to their info. */\n  private _elementInfo = new Map<HTMLElement, MonitoredElementInfo>();\n\n  /** The number of elements currently being monitored. */\n  private _monitoredElementCount = 0;\n\n  /**\n   * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n   * as well as the number of monitored elements that they contain. We have to treat focus/blur\n   * handlers differently from the rest of the events, because the browser won't emit events\n   * to the document when focus moves inside of a shadow root.\n   */\n  private _rootNodeFocusListenerCount = new Map<HTMLElement | Document | ShadowRoot, number>();\n\n  /**\n   * The specified detection mode, used for attributing the origin of a focus\n   * event.\n   */\n  private readonly _detectionMode: FocusMonitorDetectionMode;\n\n  /**\n   * Event listener for `focus` events on the window.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _windowFocusListener = () => {\n    // Make a note of when the window regains focus, so we can\n    // restore the origin info for the focused element.\n    this._windowFocused = true;\n    this._windowFocusTimeoutId = setTimeout(() => (this._windowFocused = false));\n  };\n\n  /** Used to reference correct document/window */\n  protected _document? = inject(DOCUMENT, {optional: true});\n\n  /** Subject for stopping our InputModalityDetector subscription. */\n  private readonly _stopInputModalityDetector = new Subject<void>();\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const options = inject<FocusMonitorOptions | null>(FOCUS_MONITOR_DEFAULT_OPTIONS, {\n      optional: true,\n    });\n\n    this._detectionMode = options?.detectionMode || FocusMonitorDetectionMode.IMMEDIATE;\n  }\n  /**\n   * Event listener for `focus` and 'blur' events on the document.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _rootNodeFocusAndBlurListener = (event: Event) => {\n    const target = _getEventTarget<HTMLElement>(event);\n\n    // We need to walk up the ancestor chain in order to support `checkChildren`.\n    for (let element = target; element; element = element.parentElement) {\n      if (event.type === 'focus') {\n        this._onFocus(event as FocusEvent, element);\n      } else {\n        this._onBlur(event as FocusEvent, element);\n      }\n    }\n  };\n\n  /**\n   * Monitors focus on an element and applies appropriate CSS classes.\n   * @param element The element to monitor\n   * @param checkChildren Whether to count the element as focused when its children are focused.\n   * @returns An observable that emits when the focus state of the element changes.\n   *     When the element is blurred, null will be emitted.\n   */\n  monitor(element: HTMLElement, checkChildren?: boolean): Observable<FocusOrigin>;\n\n  /**\n   * Monitors focus on an element and applies appropriate CSS classes.\n   * @param element The element to monitor\n   * @param checkChildren Whether to count the element as focused when its children are focused.\n   * @returns An observable that emits when the focus state of the element changes.\n   *     When the element is blurred, null will be emitted.\n   */\n  monitor(element: ElementRef<HTMLElement>, checkChildren?: boolean): Observable<FocusOrigin>;\n\n  monitor(\n    element: HTMLElement | ElementRef<HTMLElement>,\n    checkChildren: boolean = false,\n  ): Observable<FocusOrigin> {\n    const nativeElement = coerceElement(element);\n\n    // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n    if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n      // Note: we don't want the observable to emit at all so we don't pass any parameters.\n      return observableOf();\n    }\n\n    // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n    // the shadow root, rather than the `document`, because the browser won't emit focus events\n    // to the `document`, if focus is moving within the same shadow root.\n    const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n    const cachedInfo = this._elementInfo.get(nativeElement);\n\n    // Check if we're already monitoring this element.\n    if (cachedInfo) {\n      if (checkChildren) {\n        // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n        // observers into ones that behave as if `checkChildren` was turned on. We need a more\n        // robust solution.\n        cachedInfo.checkChildren = true;\n      }\n\n      return cachedInfo.subject;\n    }\n\n    // Create monitored element info.\n    const info: MonitoredElementInfo = {\n      checkChildren: checkChildren,\n      subject: new Subject<FocusOrigin>(),\n      rootNode,\n    };\n    this._elementInfo.set(nativeElement, info);\n    this._registerGlobalListeners(info);\n\n    return info.subject;\n  }\n\n  /**\n   * Stops monitoring an element and removes all focus classes.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: HTMLElement): void;\n\n  /**\n   * Stops monitoring an element and removes all focus classes.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: ElementRef<HTMLElement>): void;\n\n  stopMonitoring(element: HTMLElement | ElementRef<HTMLElement>): void {\n    const nativeElement = coerceElement(element);\n    const elementInfo = this._elementInfo.get(nativeElement);\n\n    if (elementInfo) {\n      elementInfo.subject.complete();\n\n      this._setClasses(nativeElement);\n      this._elementInfo.delete(nativeElement);\n      this._removeGlobalListeners(elementInfo);\n    }\n  }\n\n  /**\n   * Focuses the element via the specified focus origin.\n   * @param element Element to focus.\n   * @param origin Focus origin.\n   * @param options Options that can be used to configure the focus behavior.\n   */\n  focusVia(element: HTMLElement, origin: FocusOrigin, options?: FocusOptions): void;\n\n  /**\n   * Focuses the element via the specified focus origin.\n   * @param element Element to focus.\n   * @param origin Focus origin.\n   * @param options Options that can be used to configure the focus behavior.\n   */\n  focusVia(element: ElementRef<HTMLElement>, origin: FocusOrigin, options?: FocusOptions): void;\n\n  focusVia(\n    element: HTMLElement | ElementRef<HTMLElement>,\n    origin: FocusOrigin,\n    options?: FocusOptions,\n  ): void {\n    const nativeElement = coerceElement(element);\n    const focusedElement = this._getDocument().activeElement;\n\n    // If the element is focused already, calling `focus` again won't trigger the event listener\n    // which means that the focus classes won't be updated. If that's the case, update the classes\n    // directly without waiting for an event.\n    if (nativeElement === focusedElement) {\n      this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) =>\n        this._originChanged(currentElement, origin, info),\n      );\n    } else {\n      this._setOrigin(origin);\n\n      // `focus` isn't available on the server\n      if (typeof nativeElement.focus === 'function') {\n        nativeElement.focus(options);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  private _getFocusOrigin(focusEventTarget: HTMLElement | null): FocusOrigin {\n    if (this._origin) {\n      // If the origin was realized via a touch interaction, we need to perform additional checks\n      // to determine whether the focus origin should be attributed to touch or program.\n      if (this._originFromTouchInteraction) {\n        return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\n      } else {\n        return this._origin;\n      }\n    }\n\n    // If the window has just regained focus, we can restore the most recent origin from before the\n    // window blurred. Otherwise, we've reached the point where we can't identify the source of the\n    // focus. This typically means one of two things happened:\n    //\n    // 1) The element was programmatically focused, or\n    // 2) The element was focused via screen reader navigation (which generally doesn't fire\n    //    events).\n    //\n    // Because we can't distinguish between these two cases, we default to setting `program`.\n    if (this._windowFocused && this._lastFocusOrigin) {\n      return this._lastFocusOrigin;\n    }\n\n    // If the interaction is coming from an input label, we consider it a mouse interactions.\n    // This is a special case where focus moves on `click`, rather than `mousedown` which breaks\n    // our detection, because all our assumptions are for `mousedown`. We need to handle this\n    // special case, because it's very common for checkboxes and radio buttons.\n    if (focusEventTarget && this._isLastInteractionFromInputLabel(focusEventTarget)) {\n      return 'mouse';\n    }\n\n    return 'program';\n  }\n\n  /**\n   * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\n   * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\n   * handle a focus event following a touch interaction, we need to determine whether (1) the focus\n   * event was directly caused by the touch interaction or (2) the focus event was caused by a\n   * subsequent programmatic focus call triggered by the touch interaction.\n   * @param focusEventTarget The target of the focus event under examination.\n   */\n  private _shouldBeAttributedToTouch(focusEventTarget: HTMLElement | null): boolean {\n    // Please note that this check is not perfect. Consider the following edge case:\n    //\n    // <div #parent tabindex=\"0\">\n    //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\n    // #child, #parent is programmatically focused. This code will attribute the focus to touch\n    // instead of program. This is a relatively minor edge-case that can be worked around by using\n    // focusVia(parent, 'program') to focus #parent.\n    return (\n      this._detectionMode === FocusMonitorDetectionMode.EVENTUAL ||\n      !!focusEventTarget?.contains(this._inputModalityDetector._mostRecentTarget)\n    );\n  }\n\n  /**\n   * Sets the focus classes on the element based on the given focus origin.\n   * @param element The element to update the classes on.\n   * @param origin The focus origin.\n   */\n  private _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n    element.classList.toggle('cdk-focused', !!origin);\n    element.classList.toggle('cdk-touch-focused', origin === 'touch');\n    element.classList.toggle('cdk-keyboard-focused', origin === 'keyboard');\n    element.classList.toggle('cdk-mouse-focused', origin === 'mouse');\n    element.classList.toggle('cdk-program-focused', origin === 'program');\n  }\n\n  /**\n   * Updates the focus origin. If we're using immediate detection mode, we schedule an async\n   * function to clear the origin at the end of a timeout. The duration of the timeout depends on\n   * the origin being set.\n   * @param origin The origin to set.\n   * @param isFromInteraction Whether we are setting the origin from an interaction event.\n   */\n  private _setOrigin(origin: FocusOrigin, isFromInteraction = false): void {\n    this._ngZone.runOutsideAngular(() => {\n      this._origin = origin;\n      this._originFromTouchInteraction = origin === 'touch' && isFromInteraction;\n\n      // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\n      // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\n      // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\n      // a touch event because when a touch event is fired, the associated focus event isn't yet in\n      // the event queue. Before doing so, clear any pending timeouts.\n      if (this._detectionMode === FocusMonitorDetectionMode.IMMEDIATE) {\n        clearTimeout(this._originTimeoutId);\n        const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\n        this._originTimeoutId = setTimeout(() => (this._origin = null), ms);\n      }\n    });\n  }\n\n  /**\n   * Handles focus events on a registered element.\n   * @param event The focus event.\n   * @param element The monitored element.\n   */\n  private _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const elementInfo = this._elementInfo.get(element);\n    const focusEventTarget = _getEventTarget<HTMLElement>(event);\n    if (!elementInfo || (!elementInfo.checkChildren && element !== focusEventTarget)) {\n      return;\n    }\n\n    this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\n  }\n\n  /**\n   * Handles blur events on a registered element.\n   * @param event The blur event.\n   * @param element The monitored element.\n   */\n  _onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const elementInfo = this._elementInfo.get(element);\n\n    if (\n      !elementInfo ||\n      (elementInfo.checkChildren &&\n        event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget))\n    ) {\n      return;\n    }\n\n    this._setClasses(element);\n    this._emitOrigin(elementInfo, null);\n  }\n\n  private _emitOrigin(info: MonitoredElementInfo, origin: FocusOrigin) {\n    if (info.subject.observers.length) {\n      this._ngZone.run(() => info.subject.next(origin));\n    }\n  }\n\n  private _registerGlobalListeners(elementInfo: MonitoredElementInfo) {\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    const rootNode = elementInfo.rootNode;\n    const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n\n    if (!rootNodeFocusListeners) {\n      this._ngZone.runOutsideAngular(() => {\n        rootNode.addEventListener(\n          'focus',\n          this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions,\n        );\n        rootNode.addEventListener(\n          'blur',\n          this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions,\n        );\n      });\n    }\n\n    this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n\n    // Register global listeners when first element is monitored.\n    if (++this._monitoredElementCount === 1) {\n      // Note: we listen to events in the capture phase so we\n      // can detect them even if the user stops propagation.\n      this._ngZone.runOutsideAngular(() => {\n        const window = this._getWindow();\n        window.addEventListener('focus', this._windowFocusListener);\n      });\n\n      // The InputModalityDetector is also just a collection of global listeners.\n      this._inputModalityDetector.modalityDetected\n        .pipe(takeUntil(this._stopInputModalityDetector))\n        .subscribe(modality => {\n          this._setOrigin(modality, true /* isFromInteraction */);\n        });\n    }\n  }\n\n  private _removeGlobalListeners(elementInfo: MonitoredElementInfo) {\n    const rootNode = elementInfo.rootNode;\n\n    if (this._rootNodeFocusListenerCount.has(rootNode)) {\n      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode)!;\n\n      if (rootNodeFocusListeners > 1) {\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n      } else {\n        rootNode.removeEventListener(\n          'focus',\n          this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions,\n        );\n        rootNode.removeEventListener(\n          'blur',\n          this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions,\n        );\n        this._rootNodeFocusListenerCount.delete(rootNode);\n      }\n    }\n\n    // Unregister global listeners when last element is unmonitored.\n    if (!--this._monitoredElementCount) {\n      const window = this._getWindow();\n      window.removeEventListener('focus', this._windowFocusListener);\n\n      // Equivalently, stop our InputModalityDetector subscription.\n      this._stopInputModalityDetector.next();\n\n      // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n      clearTimeout(this._windowFocusTimeoutId);\n      clearTimeout(this._originTimeoutId);\n    }\n  }\n\n  /** Updates all the state on an element once its focus origin has changed. */\n  private _originChanged(\n    element: HTMLElement,\n    origin: FocusOrigin,\n    elementInfo: MonitoredElementInfo,\n  ) {\n    this._setClasses(element, origin);\n    this._emitOrigin(elementInfo, origin);\n    this._lastFocusOrigin = origin;\n  }\n\n  /**\n   * Collects the `MonitoredElementInfo` of a particular element and\n   * all of its ancestors that have enabled `checkChildren`.\n   * @param element Element from which to start the search.\n   */\n  private _getClosestElementsInfo(element: HTMLElement): [HTMLElement, MonitoredElementInfo][] {\n    const results: [HTMLElement, MonitoredElementInfo][] = [];\n\n    this._elementInfo.forEach((info, currentElement) => {\n      if (currentElement === element || (info.checkChildren && currentElement.contains(element))) {\n        results.push([currentElement, info]);\n      }\n    });\n\n    return results;\n  }\n\n  /**\n   * Returns whether an interaction is likely to have come from the user clicking the `label` of\n   * an `input` or `textarea` in order to focus it.\n   * @param focusEventTarget Target currently receiving focus.\n   */\n  private _isLastInteractionFromInputLabel(focusEventTarget: HTMLElement): boolean {\n    const {_mostRecentTarget: mostRecentTarget, mostRecentModality} = this._inputModalityDetector;\n\n    // If the last interaction used the mouse on an element contained by one of the labels\n    // of an `input`/`textarea` that is currently focused, it is very likely that the\n    // user redirected focus using the label.\n    if (\n      mostRecentModality !== 'mouse' ||\n      !mostRecentTarget ||\n      mostRecentTarget === focusEventTarget ||\n      (focusEventTarget.nodeName !== 'INPUT' && focusEventTarget.nodeName !== 'TEXTAREA') ||\n      (focusEventTarget as HTMLInputElement | HTMLTextAreaElement).disabled\n    ) {\n      return false;\n    }\n\n    const labels = (focusEventTarget as HTMLInputElement | HTMLTextAreaElement).labels;\n\n    if (labels) {\n      for (let i = 0; i < labels.length; i++) {\n        if (labels[i].contains(mostRecentTarget)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n@Directive({\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n  exportAs: 'cdkMonitorFocus',\n})\nexport class CdkMonitorFocus implements AfterViewInit, OnDestroy {\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _focusMonitor = inject(FocusMonitor);\n\n  private _monitorSubscription: Subscription;\n  private _focusOrigin: FocusOrigin = null;\n\n  @Output() readonly cdkFocusChange = new EventEmitter<FocusOrigin>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  get focusOrigin(): FocusOrigin {\n    return this._focusOrigin;\n  }\n\n  ngAfterViewInit() {\n    const element = this._elementRef.nativeElement;\n    this._monitorSubscription = this._focusMonitor\n      .monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus'))\n      .subscribe(origin => {\n        this._focusOrigin = origin;\n        this.cdkFocusChange.emit(origin);\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    if (this._monitorSubscription) {\n      this._monitorSubscription.unsubscribe();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Component used to load the .cdk-visually-hidden styles.\n * @docs-private\n */\n@Component({\n  styleUrl: 'visually-hidden.css',\n  exportAs: 'cdkVisuallyHidden',\n  encapsulation: ViewEncapsulation.None,\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class _VisuallyHiddenLoader {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {Injectable, CSP_NONCE, inject} from '@angular/core';\nimport {Platform} from '../platform';\n\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility: Set<string> = new Set<string>();\n\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode: HTMLStyleElement | undefined;\n\n/** A utility for calling matchMedia queries. */\n@Injectable({providedIn: 'root'})\nexport class MediaMatcher {\n  private _platform = inject(Platform);\n  private _nonce = inject(CSP_NONCE, {optional: true});\n\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\n  private _matchMedia: (query: string) => MediaQueryList;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    this._matchMedia =\n      this._platform.isBrowser && window.matchMedia\n        ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n          // call it from a different scope.\n          window.matchMedia.bind(window)\n        : noopMatchMedia;\n  }\n\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   */\n  matchMedia(query: string): MediaQueryList {\n    if (this._platform.WEBKIT || this._platform.BLINK) {\n      createEmptyStyleRule(query, this._nonce);\n    }\n    return this._matchMedia(query);\n  }\n}\n\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query: string, nonce: string | undefined | null) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n\n      if (nonce) {\n        mediaQueryStyleNode.setAttribute('nonce', nonce);\n      }\n\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head!.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query: string): MediaQueryList {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {},\n  } as any;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {coerceArray} from '../coercion';\nimport {Injectable, NgZone, OnDestroy, inject} from '@angular/core';\nimport {combineLatest, concat, Observable, Observer, Subject} from 'rxjs';\nimport {debounceTime, map, skip, startWith, take, takeUntil} from 'rxjs/operators';\nimport {MediaMatcher} from './media-matcher';\n\n/** The current state of a layout breakpoint. */\nexport interface BreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /**\n   * A key boolean pair for each query provided to the observe method,\n   * with its current matched state.\n   */\n  breakpoints: {\n    [key: string]: boolean;\n  };\n}\n\n/** The current state of a layout breakpoint. */\ninterface InternalBreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /** The media query being to be matched */\n  query: string;\n}\n\ninterface Query {\n  observable: Observable<InternalBreakpointState>;\n  mql: MediaQueryList;\n}\n\n/** Utility for checking the matching state of `@media` queries. */\n@Injectable({providedIn: 'root'})\nexport class BreakpointObserver implements OnDestroy {\n  private _mediaMatcher = inject(MediaMatcher);\n  private _zone = inject(NgZone);\n\n  /**  A map of all media queries currently being listened for. */\n  private _queries = new Map<string, Query>();\n  /** A subject for all other observables to takeUntil based on. */\n  private readonly _destroySubject = new Subject<void>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /** Completes the active subject, signalling to all other observables to complete. */\n  ngOnDestroy() {\n    this._destroySubject.next();\n    this._destroySubject.complete();\n  }\n\n  /**\n   * Whether one or more media queries match the current viewport size.\n   * @param value One or more media queries to check.\n   * @returns Whether any of the media queries match.\n   */\n  isMatched(value: string | readonly string[]): boolean {\n    const queries = splitQueries(coerceArray(value));\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n  }\n\n  /**\n   * Gets an observable of results for the given queries that will emit new results for any changes\n   * in matching of the given queries.\n   * @param value One or more media queries to check.\n   * @returns A stream of matches for the given queries.\n   */\n  observe(value: string | readonly string[]): Observable<BreakpointState> {\n    const queries = splitQueries(coerceArray(value));\n    const observables = queries.map(query => this._registerQuery(query).observable);\n\n    let stateObservable = combineLatest(observables);\n    // Emit the first state immediately, and then debounce the subsequent emissions.\n    stateObservable = concat(\n      stateObservable.pipe(take(1)),\n      stateObservable.pipe(skip(1), debounceTime(0)),\n    );\n    return stateObservable.pipe(\n      map(breakpointStates => {\n        const response: BreakpointState = {\n          matches: false,\n          breakpoints: {},\n        };\n        breakpointStates.forEach(({matches, query}) => {\n          response.matches = response.matches || matches;\n          response.breakpoints[query] = matches;\n        });\n        return response;\n      }),\n    );\n  }\n\n  /** Registers a specific query to be listened for. */\n  private _registerQuery(query: string): Query {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return this._queries.get(query)!;\n    }\n\n    const mql = this._mediaMatcher.matchMedia(query);\n\n    // Create callback for match changes and add it is as a listener.\n    const queryObservable = new Observable((observer: Observer<MediaQueryListEvent>) => {\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      const handler = (e: MediaQueryListEvent): void => this._zone.run(() => observer.next(e));\n      mql.addListener(handler);\n\n      return () => {\n        mql.removeListener(handler);\n      };\n    }).pipe(\n      startWith(mql),\n      map(({matches}) => ({query, matches})),\n      takeUntil(this._destroySubject),\n    );\n\n    // Add the MediaQueryList to the set of queries.\n    const output = {observable: queryObservable, mql};\n    this._queries.set(query, output);\n    return output;\n  }\n}\n\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries: readonly string[]): readonly string[] {\n  return queries\n    .map(query => query.split(','))\n    .reduce((a1, a2) => a1.concat(a2))\n    .map(query => query.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NumberInput, coerceElement, coerceNumberProperty} from '../coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  Output,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {Observable, Observer, Subject, Subscription} from 'rxjs';\nimport {debounceTime, filter, map} from 'rxjs/operators';\n\n// Angular may add, remove, or edit comment nodes during change detection. We don't care about\n// these changes because they don't affect the user-preceived content, and worse it can cause\n// infinite change detection cycles where the change detection updates a comment, triggering the\n// MutationObserver, triggering another change detection and kicking the cycle off again.\nfunction shouldIgnoreRecord(record: MutationRecord) {\n  // Ignore changes to comment text.\n  if (record.type === 'characterData' && record.target instanceof Comment) {\n    return true;\n  }\n  // Ignore addition / removal of comments.\n  if (record.type === 'childList') {\n    for (let i = 0; i < record.addedNodes.length; i++) {\n      if (!(record.addedNodes[i] instanceof Comment)) {\n        return false;\n      }\n    }\n    for (let i = 0; i < record.removedNodes.length; i++) {\n      if (!(record.removedNodes[i] instanceof Comment)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  // Observe everything else.\n  return false;\n}\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MutationObserverFactory {\n  create(callback: MutationCallback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({providedIn: 'root'})\nexport class ContentObserver implements OnDestroy {\n  private _mutationObserverFactory = inject(MutationObserverFactory);\n\n  /** Keeps track of the existing MutationObservers so they can be reused. */\n  private _observedElements = new Map<\n    Element,\n    {\n      observer: MutationObserver | null;\n      readonly stream: Subject<MutationRecord[]>;\n      count: number;\n    }\n  >();\n\n  private _ngZone = inject(NgZone);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: Element): Observable<MutationRecord[]>;\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<MutationRecord[]>) => {\n      const stream = this._observeElement(element);\n      const subscription = stream\n        .pipe(\n          map(records => records.filter(record => !shouldIgnoreRecord(record))),\n          filter(records => !!records.length),\n        )\n        .subscribe(records => {\n          this._ngZone.run(() => {\n            observer.next(records);\n          });\n        });\n\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\n    return this._ngZone.runOutsideAngular(() => {\n      if (!this._observedElements.has(element)) {\n        const stream = new Subject<MutationRecord[]>();\n        const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n        if (observer) {\n          observer.observe(element, {\n            characterData: true,\n            childList: true,\n            subtree: true,\n          });\n        }\n        this._observedElements.set(element, {observer, stream, count: 1});\n      } else {\n        this._observedElements.get(element)!.count++;\n      }\n      return this._observedElements.get(element)!.stream;\n    });\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  private _unobserveElement(element: Element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element)!.count--;\n      if (!this._observedElements.get(element)!.count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  private _cleanupObserver(element: Element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n@Directive({\n  selector: '[cdkObserveContent]',\n  exportAs: 'cdkObserveContent',\n})\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n  private _contentObserver = inject(ContentObserver);\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  /** Event emitted for each change in the element's content. */\n  @Output('cdkObserveContent') readonly event = new EventEmitter<MutationRecord[]>();\n\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  @Input({alias: 'cdkObserveContentDisabled', transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  private _disabled = false;\n\n  /** Debounce interval for emitting the changes. */\n  @Input()\n  get debounce(): number {\n    return this._debounce;\n  }\n  set debounce(value: NumberInput) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  private _debounce: number;\n\n  private _currentSubscription: Subscription | null = null;\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  private _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n\n    this._currentSubscription = (\n      this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream\n    ).subscribe(this.event);\n  }\n\n  private _unsubscribe() {\n    this._currentSubscription?.unsubscribe();\n  }\n}\n\n@NgModule({\n  imports: [CdkObserveContent],\n  exports: [CdkObserveContent],\n  providers: [MutationObserverFactory],\n})\nexport class ObserversModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Platform} from '../../platform';\nimport {Injectable, inject} from '@angular/core';\n\n/**\n * Configuration for the isFocusable method.\n */\nexport class IsFocusableConfig {\n  /**\n   * Whether to count an element as focusable even if it is not currently visible.\n   */\n  ignoreVisibility: boolean = false;\n}\n\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether it is focusable or\n * tabbable.\n */\n@Injectable({providedIn: 'root'})\nexport class InteractivityChecker {\n  private _platform = inject(Platform);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is disabled.\n   */\n  isDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @returns Whether the element is visible.\n   */\n  isVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is tabbable.\n   */\n  isTabbable(element: HTMLElement): boolean {\n    // Nothing is tabbable on the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    const frameElement = getFrameElement(getWindow(element));\n\n    if (frameElement) {\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Browsers disable tabbing to an element inside of an invisible frame.\n      if (!this.isVisible(frameElement)) {\n        return false;\n      }\n    }\n\n    let nodeName = element.nodeName.toLowerCase();\n    let tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe' || nodeName === 'object') {\n      // The frame or object's content may be tabbable depending on the content, but it's\n      // not possibly to reliably detect the content of the frames. We always consider such\n      // elements as non-tabbable.\n      return false;\n    }\n\n    // In iOS, the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      // Audio elements without controls enabled are never tabbable, regardless\n      // of the tabindex attribute explicitly being set.\n      if (!element.hasAttribute('controls')) {\n        return false;\n      }\n      // Audio elements with controls are by default tabbable unless the\n      // tabindex attribute is set to `-1` explicitly.\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'video') {\n      // For all video elements, if the tabindex attribute is set to `-1`, the video\n      // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n      // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n      // tabindex attribute is the source of truth here.\n      if (tabIndexValue === -1) {\n        return false;\n      }\n      // If the tabindex is explicitly set, and not `-1` (as per check before), the\n      // video element is always tabbable (regardless of whether it has controls or not).\n      if (tabIndexValue !== null) {\n        return true;\n      }\n      // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n      // has controls enabled. Firefox is special as videos are always tabbable regardless\n      // of whether there are controls or not.\n      return this._platform.FIREFOX || element.hasAttribute('controls');\n    }\n\n    return element.tabIndex >= 0;\n  }\n\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param element Element to be checked.\n   * @param config The config object with options to customize this method's behavior\n   * @returns Whether the element is focusable.\n   */\n  isFocusable(element: HTMLElement, config?: IsFocusableConfig): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return (\n      isPotentiallyFocusable(element) &&\n      !this.isDisabled(element) &&\n      (config?.ignoreVisibility || this.isVisible(element))\n    );\n  }\n}\n\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window: Window) {\n  try {\n    return window.frameElement as HTMLElement;\n  } catch {\n    return null;\n  }\n}\n\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(\n    element.offsetWidth ||\n    element.offsetHeight ||\n    (typeof element.getClientRects === 'function' && element.getClientRects().length)\n  );\n}\n\n/** Gets whether an element's  */\nfunction isNativeFormElement(element: Node) {\n  let nodeName = element.nodeName.toLowerCase();\n  return (\n    nodeName === 'input' ||\n    nodeName === 'select' ||\n    nodeName === 'button' ||\n    nodeName === 'textarea'\n  );\n}\n\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n\n/** Gets whether an element is an input element. */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let tabIndex = element.getAttribute('tabindex');\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element: HTMLElement): number | null {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && (element as HTMLInputElement).type;\n\n  return (\n    inputType === 'text' ||\n    inputType === 'password' ||\n    nodeName === 'select' ||\n    nodeName === 'textarea'\n  );\n}\n\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return (\n    isNativeFormElement(element) ||\n    isAnchorWithHref(element) ||\n    element.hasAttribute('contenteditable') ||\n    hasValidTabIndex(element)\n  );\n}\n\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node: HTMLElement): Window {\n  // ownerDocument is null if `node` itself *is* a document.\n  return (node.ownerDocument && node.ownerDocument.defaultView) || window;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Platform, _getFocusedElementPierceShadowDom} from '../../platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  Directive,\n  DoCheck,\n  ElementRef,\n  Injectable,\n  Injector,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  afterNextRender,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\nimport {_CdkPrivateStyleLoader, _VisuallyHiddenLoader} from '../../private';\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n */\nexport class FocusTrap {\n  private _startAnchor: HTMLElement | null;\n  private _endAnchor: HTMLElement | null;\n  private _hasAttached = false;\n\n  // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n  protected startAnchorListener = () => this.focusLastTabbableElement();\n  protected endAnchorListener = () => this.focusFirstTabbableElement();\n\n  /** Whether the focus trap is active. */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n  set enabled(value: boolean) {\n    this._enabled = value;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  protected _enabled: boolean = true;\n\n  constructor(\n    readonly _element: HTMLElement,\n    private _checker: InteractivityChecker,\n    readonly _ngZone: NgZone,\n    readonly _document: Document,\n    deferAnchors = false,\n    /** @breaking-change 20.0.0 param to become required */\n    readonly _injector?: Injector,\n  ) {\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n\n  /** Destroys the focus trap by cleaning up the anchors. */\n  destroy() {\n    const startAnchor = this._startAnchor;\n    const endAnchor = this._endAnchor;\n\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\n      startAnchor.remove();\n    }\n\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\n      endAnchor.remove();\n    }\n\n    this._startAnchor = this._endAnchor = null;\n    this._hasAttached = false;\n  }\n\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @returns Whether the focus trap managed to attach successfully. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n  attachAnchors(): boolean {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n        this._startAnchor!.addEventListener('focus', this.startAnchorListener);\n      }\n\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n        this._endAnchor!.addEventListener('focus', this.endAnchorListener);\n      }\n    });\n\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor!, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor!, this._element.nextSibling);\n      this._hasAttached = true;\n    }\n\n    return this._hasAttached;\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses the first tabbable element.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusInitialElementWhenReady(options?: FocusOptions): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusFirstTabbableElementWhenReady(options?: FocusOptions): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusLastTabbableElementWhenReady(options?: FocusOptions): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n    });\n  }\n\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param bound The boundary to get (start or end of trapped region).\n   * @returns The boundary element.\n   */\n  private _getRegionBoundary(bound: 'start' | 'end'): HTMLElement | null {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const markers = this._element.querySelectorAll(\n      `[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`,\n    ) as NodeListOf<HTMLElement>;\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      for (let i = 0; i < markers.length; i++) {\n        // @breaking-change 8.0.0\n        if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n          console.warn(\n            `Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n              `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n              `attribute will be removed in 8.0.0.`,\n            markers[i],\n          );\n        } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n          console.warn(\n            `Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n              `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n              `will be removed in 8.0.0.`,\n            markers[i],\n          );\n        }\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length\n      ? markers[markers.length - 1]\n      : this._getLastTabbableElement(this._element);\n  }\n\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @returns Whether focus was moved successfully.\n   */\n  focusInitialElement(options?: FocusOptions): boolean {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(\n      `[cdk-focus-initial], ` + `[cdkFocusInitial]`,\n    ) as HTMLElement;\n\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        redirectToElement.hasAttribute(`cdk-focus-initial`)\n      ) {\n        console.warn(\n          `Found use of deprecated attribute 'cdk-focus-initial', ` +\n            `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n            `will be removed in 8.0.0`,\n          redirectToElement,\n        );\n      }\n\n      // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n      if (\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        !this._checker.isFocusable(redirectToElement)\n      ) {\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n      }\n\n      if (!this._checker.isFocusable(redirectToElement)) {\n        const focusableChild = this._getFirstTabbableElement(redirectToElement) as HTMLElement;\n        focusableChild?.focus(options);\n        return !!focusableChild;\n      }\n\n      redirectToElement.focus(options);\n      return true;\n    }\n\n    return this.focusFirstTabbableElement(options);\n  }\n\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusFirstTabbableElement(options?: FocusOptions): boolean {\n    const redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusLastTabbableElement(options?: FocusOptions): boolean {\n    const redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Checks whether the focus trap has successfully been attached.\n   */\n  hasAttached(): boolean {\n    return this._hasAttached;\n  }\n\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n  private _getFirstTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    const children = root.children;\n\n    for (let i = 0; i < children.length; i++) {\n      const tabbableChild =\n        children[i].nodeType === this._document.ELEMENT_NODE\n          ? this._getFirstTabbableElement(children[i] as HTMLElement)\n          : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n  private _getLastTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    const children = root.children;\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      const tabbableChild =\n        children[i].nodeType === this._document.ELEMENT_NODE\n          ? this._getLastTabbableElement(children[i] as HTMLElement)\n          : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Creates an anchor element. */\n  private _createAnchor(): HTMLElement {\n    const anchor = this._document.createElement('div');\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param isEnabled Whether the focus trap is enabled.\n   * @param anchor Anchor on which to toggle the tabindex.\n   */\n  private _toggleAnchorTabIndex(isEnabled: boolean, anchor: HTMLElement) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n\n  /**\n   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n   * @param enabled: Whether the anchors should trap Tab.\n   */\n  protected toggleAnchors(enabled: boolean) {\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(enabled, this._startAnchor);\n      this._toggleAnchorTabIndex(enabled, this._endAnchor);\n    }\n  }\n\n  /** Executes a function when the zone is stable. */\n  private _executeOnStable(fn: () => any): void {\n    // TODO: remove this conditional when injector is required in the constructor.\n    if (this._injector) {\n      afterNextRender(fn, {injector: this._injector});\n    } else {\n      setTimeout(fn);\n    }\n  }\n}\n\n/**\n * Factory that allows easy instantiation of focus traps.\n */\n@Injectable({providedIn: 'root'})\nexport class FocusTrapFactory {\n  private _checker = inject(InteractivityChecker);\n  private _ngZone = inject(NgZone);\n\n  private _document = inject(DOCUMENT);\n  private _injector = inject(Injector);\n\n  constructor(...args: unknown[]);\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n  }\n\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @returns The created focus trap instance.\n   */\n  create(element: HTMLElement, deferCaptureElements: boolean = false): FocusTrap {\n    return new FocusTrap(\n      element,\n      this._checker,\n      this._ngZone,\n      this._document,\n      deferCaptureElements,\n      this._injector,\n    );\n  }\n}\n\n/** Directive for trapping focus within a region. */\n@Directive({\n  selector: '[cdkTrapFocus]',\n  exportAs: 'cdkTrapFocus',\n})\nexport class CdkTrapFocus implements OnDestroy, AfterContentInit, OnChanges, DoCheck {\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _focusTrapFactory = inject(FocusTrapFactory);\n\n  /** Underlying FocusTrap instance. */\n  focusTrap: FocusTrap;\n\n  /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n  private _previouslyFocusedElement: HTMLElement | null = null;\n\n  /** Whether the focus trap is active. */\n  @Input({alias: 'cdkTrapFocus', transform: booleanAttribute})\n  get enabled(): boolean {\n    return this.focusTrap?.enabled || false;\n  }\n  set enabled(value: boolean) {\n    if (this.focusTrap) {\n      this.focusTrap.enabled = value;\n    }\n  }\n\n  /**\n   * Whether the directive should automatically move focus into the trapped region upon\n   * initialization and return focus to the previous activeElement upon destruction.\n   */\n  @Input({alias: 'cdkTrapFocusAutoCapture', transform: booleanAttribute}) autoCapture: boolean;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const platform = inject(Platform);\n\n    if (platform.isBrowser) {\n      this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n  }\n\n  ngOnDestroy() {\n    this.focusTrap?.destroy();\n\n    // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n      this._previouslyFocusedElement = null;\n    }\n  }\n\n  ngAfterContentInit() {\n    this.focusTrap?.attachAnchors();\n\n    if (this.autoCapture) {\n      this._captureFocus();\n    }\n  }\n\n  ngDoCheck() {\n    if (this.focusTrap && !this.focusTrap.hasAttached()) {\n      this.focusTrap.attachAnchors();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const autoCaptureChange = changes['autoCapture'];\n\n    if (\n      autoCaptureChange &&\n      !autoCaptureChange.firstChange &&\n      this.autoCapture &&\n      this.focusTrap?.hasAttached()\n    ) {\n      this._captureFocus();\n    }\n  }\n\n  private _captureFocus() {\n    this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n    this.focusTrap?.focusInitialElementWhenReady();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n// The tokens for the live announcer are defined in a separate file from LiveAnnouncer\n// as a workaround for https://github.com/angular/angular/issues/22559\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\n\nexport const LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken<HTMLElement | null>(\n  'liveAnnouncerElement',\n  {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n  },\n);\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY(): null {\n  return null;\n}\n\n/** Object that can be used to configure the default options for the LiveAnnouncer. */\nexport interface LiveAnnouncerDefaultOptions {\n  /** Default politeness for the announcements. */\n  politeness?: AriaLivePoliteness;\n\n  /** Default duration for the announcement messages. */\n  duration?: number;\n}\n\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nexport const LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken<LiveAnnouncerDefaultOptions>(\n  'LIVE_ANNOUNCER_DEFAULT_OPTIONS',\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ContentObserver} from '../../observers';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Injectable, Input, NgZone, OnDestroy, inject} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {\n  AriaLivePoliteness,\n  LiveAnnouncerDefaultOptions,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_DEFAULT_OPTIONS,\n} from './live-announcer-tokens';\nimport {_CdkPrivateStyleLoader, _VisuallyHiddenLoader} from '../../private';\n\nlet uniqueIds = 0;\n\n@Injectable({providedIn: 'root'})\nexport class LiveAnnouncer implements OnDestroy {\n  private _ngZone = inject(NgZone);\n  private _defaultOptions = inject<LiveAnnouncerDefaultOptions>(LIVE_ANNOUNCER_DEFAULT_OPTIONS, {\n    optional: true,\n  });\n\n  private _liveElement: HTMLElement;\n  private _document = inject(DOCUMENT);\n  private _previousTimeout: ReturnType<typeof setTimeout>;\n  private _currentPromise: Promise<void> | undefined;\n  private _currentResolve: (() => void) | undefined;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const elementToken = inject(LIVE_ANNOUNCER_ELEMENT_TOKEN, {optional: true});\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param politeness The politeness of the announcer element.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness?: AriaLivePoliteness): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\n   *   that this takes effect after the message has been added to the DOM, which can be up to\n   *   100ms after `announce` has been called.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, duration?: number): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param politeness The politeness of the announcer element.\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\n   *   that this takes effect after the message has been added to the DOM, which can be up to\n   *   100ms after `announce` has been called.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness?: AriaLivePoliteness, duration?: number): Promise<void>;\n\n  announce(message: string, ...args: any[]): Promise<void> {\n    const defaultOptions = this._defaultOptions;\n    let politeness: AriaLivePoliteness | undefined;\n    let duration: number | undefined;\n\n    if (args.length === 1 && typeof args[0] === 'number') {\n      duration = args[0];\n    } else {\n      [politeness, duration] = args;\n    }\n\n    this.clear();\n    clearTimeout(this._previousTimeout);\n\n    if (!politeness) {\n      politeness =\n        defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n    }\n\n    if (duration == null && defaultOptions) {\n      duration = defaultOptions.duration;\n    }\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    if (this._liveElement.id) {\n      this._exposeAnnouncerToModals(this._liveElement.id);\n    }\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    return this._ngZone.runOutsideAngular(() => {\n      if (!this._currentPromise) {\n        this._currentPromise = new Promise(resolve => (this._currentResolve = resolve));\n      }\n\n      clearTimeout(this._previousTimeout);\n      this._previousTimeout = setTimeout(() => {\n        this._liveElement.textContent = message;\n\n        if (typeof duration === 'number') {\n          this._previousTimeout = setTimeout(() => this.clear(), duration);\n        }\n\n        // For some reason in tests this can be undefined\n        // Probably related to ZoneJS and every other thing that patches browser APIs in tests\n        this._currentResolve?.();\n        this._currentPromise = this._currentResolve = undefined;\n      }, 100);\n\n      return this._currentPromise;\n    });\n  }\n\n  /**\n   * Clears the current text from the announcer element. Can be used to prevent\n   * screen readers from reading the text out again while the user is going\n   * through the page landmarks.\n   */\n  clear() {\n    if (this._liveElement) {\n      this._liveElement.textContent = '';\n    }\n  }\n\n  ngOnDestroy() {\n    clearTimeout(this._previousTimeout);\n    this._liveElement?.remove();\n    this._liveElement = null!;\n    this._currentResolve?.();\n    this._currentPromise = this._currentResolve = undefined;\n  }\n\n  private _createLiveElement(): HTMLElement {\n    const elementClass = 'cdk-live-announcer-element';\n    const previousElements = this._document.getElementsByClassName(elementClass);\n    const liveEl = this._document.createElement('div');\n\n    // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n    for (let i = 0; i < previousElements.length; i++) {\n      previousElements[i].remove();\n    }\n\n    liveEl.classList.add(elementClass);\n    liveEl.classList.add('cdk-visually-hidden');\n\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n    liveEl.id = `cdk-live-announcer-${uniqueIds++}`;\n\n    this._document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\n  /**\n   * Some browsers won't expose the accessibility node of the live announcer element if there is an\n   * `aria-modal` and the live announcer is outside of it. This method works around the issue by\n   * pointing the `aria-owns` of all modals to the live announcer element.\n   */\n  private _exposeAnnouncerToModals(id: string) {\n    // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n    // the `SnakBarContainer` and other usages.\n    //\n    // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n    // section of the DOM we need to look through. This should cover all the cases we support, but\n    // the selector can be expanded if it turns out to be too narrow.\n    const modals = this._document.querySelectorAll(\n      'body > .cdk-overlay-container [aria-modal=\"true\"]',\n    );\n\n    for (let i = 0; i < modals.length; i++) {\n      const modal = modals[i];\n      const ariaOwns = modal.getAttribute('aria-owns');\n\n      if (!ariaOwns) {\n        modal.setAttribute('aria-owns', id);\n      } else if (ariaOwns.indexOf(id) === -1) {\n        modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n      }\n    }\n  }\n}\n\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n@Directive({\n  selector: '[cdkAriaLive]',\n  exportAs: 'cdkAriaLive',\n})\nexport class CdkAriaLive implements OnDestroy {\n  private _elementRef = inject(ElementRef);\n  private _liveAnnouncer = inject(LiveAnnouncer);\n  private _contentObserver = inject(ContentObserver);\n  private _ngZone = inject(NgZone);\n\n  /** The aria-live politeness level to use when announcing messages. */\n  @Input('cdkAriaLive')\n  get politeness(): AriaLivePoliteness {\n    return this._politeness;\n  }\n  set politeness(value: AriaLivePoliteness) {\n    this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n    if (this._politeness === 'off') {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n        this._subscription = null;\n      }\n    } else if (!this._subscription) {\n      this._subscription = this._ngZone.runOutsideAngular(() => {\n        return this._contentObserver.observe(this._elementRef).subscribe(() => {\n          // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n          const elementText = this._elementRef.nativeElement.textContent;\n\n          // The `MutationObserver` fires also for attribute\n          // changes which we don't want to announce.\n          if (elementText !== this._previousAnnouncedText) {\n            this._liveAnnouncer.announce(elementText, this._politeness, this.duration);\n            this._previousAnnouncedText = elementText;\n          }\n        });\n      });\n    }\n  }\n  private _politeness: AriaLivePoliteness = 'polite';\n\n  /** Time in milliseconds after which to clear out the announcer element. */\n  @Input('cdkAriaLiveDuration') duration: number;\n\n  private _previousAnnouncedText?: string;\n  private _subscription: Subscription | null;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, Injectable, OnDestroy} from '@angular/core';\nimport {BreakpointObserver} from '../../layout';\nimport {Platform} from '../../platform';\nimport {DOCUMENT} from '@angular/common';\nimport {Subscription} from 'rxjs';\n\n/** Set of possible high-contrast mode backgrounds. */\nexport enum HighContrastMode {\n  NONE,\n  BLACK_ON_WHITE,\n  WHITE_ON_BLACK,\n}\n\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nexport const BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nexport const WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n\n/** CSS class applied to the document body when in high-contrast mode. */\nexport const HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\n@Injectable({providedIn: 'root'})\nexport class HighContrastModeDetector implements OnDestroy {\n  private _platform = inject(Platform);\n\n  /**\n   * Figuring out the high contrast mode and adding the body classes can cause\n   * some expensive layouts. This flag is used to ensure that we only do it once.\n   */\n  private _hasCheckedHighContrastMode: boolean;\n  private _document = inject(DOCUMENT);\n  private _breakpointSubscription: Subscription;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    this._breakpointSubscription = inject(BreakpointObserver)\n      .observe('(forced-colors: active)')\n      .subscribe(() => {\n        if (this._hasCheckedHighContrastMode) {\n          this._hasCheckedHighContrastMode = false;\n          this._applyBodyHighContrastModeCssClasses();\n        }\n      });\n  }\n\n  /** Gets the current high-contrast-mode for the page. */\n  getHighContrastMode(): HighContrastMode {\n    if (!this._platform.isBrowser) {\n      return HighContrastMode.NONE;\n    }\n\n    // Create a test element with an arbitrary background-color that is neither black nor\n    // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n    // appending the test element to the DOM does not affect layout by absolutely positioning it\n    const testElement = this._document.createElement('div');\n    testElement.style.backgroundColor = 'rgb(1,2,3)';\n    testElement.style.position = 'absolute';\n    this._document.body.appendChild(testElement);\n\n    // Get the computed style for the background color, collapsing spaces to normalize between\n    // browsers. Once we get this color, we no longer need the test element. Access the `window`\n    // via the document so we can fake it in tests. Note that we have extra null checks, because\n    // this logic will likely run during app bootstrap and throwing can break the entire app.\n    const documentWindow = this._document.defaultView || window;\n    const computedStyle =\n      documentWindow && documentWindow.getComputedStyle\n        ? documentWindow.getComputedStyle(testElement)\n        : null;\n    const computedColor = ((computedStyle && computedStyle.backgroundColor) || '').replace(\n      / /g,\n      '',\n    );\n    testElement.remove();\n\n    switch (computedColor) {\n      // Pre Windows 11 dark theme.\n      case 'rgb(0,0,0)':\n      // Windows 11 dark themes.\n      case 'rgb(45,50,54)':\n      case 'rgb(32,32,32)':\n        return HighContrastMode.WHITE_ON_BLACK;\n      // Pre Windows 11 light theme.\n      case 'rgb(255,255,255)':\n      // Windows 11 light theme.\n      case 'rgb(255,250,239)':\n        return HighContrastMode.BLACK_ON_WHITE;\n    }\n    return HighContrastMode.NONE;\n  }\n\n  ngOnDestroy(): void {\n    this._breakpointSubscription.unsubscribe();\n  }\n\n  /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n  _applyBodyHighContrastModeCssClasses(): void {\n    if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n      const bodyClasses = this._document.body.classList;\n      bodyClasses.remove(\n        HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS,\n        BLACK_ON_WHITE_CSS_CLASS,\n        WHITE_ON_BLACK_CSS_CLASS,\n      );\n      this._hasCheckedHighContrastMode = true;\n\n      const mode = this.getHighContrastMode();\n      if (mode === HighContrastMode.BLACK_ON_WHITE) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS);\n      } else if (mode === HighContrastMode.WHITE_ON_BLACK) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ObserversModule} from '../observers';\nimport {NgModule, inject} from '@angular/core';\nimport {CdkMonitorFocus} from './focus-monitor/focus-monitor';\nimport {CdkTrapFocus} from './focus-trap/focus-trap';\nimport {HighContrastModeDetector} from './high-contrast-mode/high-contrast-mode-detector';\nimport {CdkAriaLive} from './live-announcer/live-announcer';\n\n@NgModule({\n  imports: [ObserversModule, CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n  exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n})\nexport class A11yModule {\n  constructor() {\n    inject(HighContrastModeDetector)._applyBodyHighContrastModeCssClasses();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {APP_ID, inject, Injectable} from '@angular/core';\n\n/**\n * Keeps track of the ID count per prefix. This helps us make the IDs a bit more deterministic\n * like they were before the service was introduced. Note that ideally we wouldn't have to do\n * this, but there are some internal tests that rely on the IDs.\n */\nconst counters: Record<string, number> = {};\n\n/** Service that generates unique IDs for DOM nodes. */\n@Injectable({providedIn: 'root'})\nexport class _IdGenerator {\n  private _appId = inject(APP_ID);\n\n  /**\n   * Generates a unique ID with a specific prefix.\n   * @param prefix Prefix to add to the ID.\n   */\n  getId(prefix: string): string {\n    // Omit the app ID if it's the default `ng`. Since the vast majority of pages have one\n    // Angular app on them, we can reduce the amount of breakages by not adding it.\n    if (this._appId !== 'ng') {\n      prefix += this._appId;\n    }\n\n    if (!counters.hasOwnProperty(prefix)) {\n      counters[prefix] = 0;\n    }\n\n    return `${prefix}${counters[prefix]++}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nexport type ModifierKey = 'altKey' | 'shiftKey' | 'ctrlKey' | 'metaKey';\n\n/**\n * Checks whether a modifier key is pressed.\n * @param event Event to be checked.\n */\nexport function hasModifierKey(event: KeyboardEvent, ...modifiers: ModifierKey[]): boolean {\n  if (modifiers.length) {\n    return modifiers.some(modifier => event[modifier]);\n  }\n\n  return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {A, NINE, Z, ZERO} from '../../keycodes';\nimport {Subject, Observable} from 'rxjs';\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\n\nconst DEFAULT_TYPEAHEAD_DEBOUNCE_INTERVAL_MS = 200;\n\ninterface TypeaheadItem {\n  getLabel?(): string;\n}\n\ninterface TypeaheadConfig<T> {\n  debounceInterval?: number;\n  skipPredicate?: (item: T) => boolean | undefined;\n}\n\n/**\n * Selects items based on keyboard inputs. Implements the typeahead functionality of\n * `role=\"listbox\"` or `role=\"tree\"` and other related roles.\n */\nexport class Typeahead<T extends TypeaheadItem> {\n  private readonly _letterKeyStream = new Subject<string>();\n  private _items: readonly T[] = [];\n  private _selectedItemIndex = -1;\n\n  /** Buffer for the letters that the user has pressed */\n  private _pressedLetters: string[] = [];\n\n  private _skipPredicateFn?: (item: T) => boolean | undefined;\n\n  private readonly _selectedItem = new Subject<T>();\n  readonly selectedItem: Observable<T> = this._selectedItem;\n\n  constructor(initialItems: readonly T[], config?: TypeaheadConfig<T>) {\n    const typeAheadInterval =\n      typeof config?.debounceInterval === 'number'\n        ? config.debounceInterval\n        : DEFAULT_TYPEAHEAD_DEBOUNCE_INTERVAL_MS;\n\n    if (config?.skipPredicate) {\n      this._skipPredicateFn = config.skipPredicate;\n    }\n\n    if (\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      initialItems.length &&\n      initialItems.some(item => typeof item.getLabel !== 'function')\n    ) {\n      throw new Error('KeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this.setItems(initialItems);\n    this._setupKeyHandler(typeAheadInterval);\n  }\n\n  destroy() {\n    this._pressedLetters = [];\n    this._letterKeyStream.complete();\n    this._selectedItem.complete();\n  }\n\n  setCurrentSelectedItemIndex(index: number) {\n    this._selectedItemIndex = index;\n  }\n\n  setItems(items: readonly T[]) {\n    this._items = items;\n  }\n\n  handleKey(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n    // otherwise fall back to resolving alphanumeric characters via the keyCode.\n    if (event.key && event.key.length === 1) {\n      this._letterKeyStream.next(event.key.toLocaleUpperCase());\n    } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n      this._letterKeyStream.next(String.fromCharCode(keyCode));\n    }\n  }\n\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping(): boolean {\n    return this._pressedLetters.length > 0;\n  }\n\n  /** Resets the currently stored sequence of typed letters. */\n  reset(): void {\n    this._pressedLetters = [];\n  }\n\n  private _setupKeyHandler(typeAheadInterval: number) {\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._letterKeyStream\n      .pipe(\n        tap(letter => this._pressedLetters.push(letter)),\n        debounceTime(typeAheadInterval),\n        filter(() => this._pressedLetters.length > 0),\n        map(() => this._pressedLetters.join('').toLocaleUpperCase()),\n      )\n      .subscribe(inputString => {\n        // Start at 1 because we want to start searching at the item immediately\n        // following the current active item.\n        for (let i = 1; i < this._items.length + 1; i++) {\n          const index = (this._selectedItemIndex + i) % this._items.length;\n          const item = this._items[index];\n\n          if (\n            !this._skipPredicateFn?.(item) &&\n            item.getLabel?.().toLocaleUpperCase().trim().indexOf(inputString) === 0\n          ) {\n            this._selectedItem.next(item);\n            break;\n          }\n        }\n\n        this._pressedLetters = [];\n      });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  TAB,\n  UP_ARROW,\n  hasModifierKey,\n} from '../../keycodes';\nimport {EffectRef, Injector, QueryList, Signal, effect, isSignal, signal} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {Typeahead} from './typeahead';\n\n/** This interface is for items that can be passed to a ListKeyManager. */\nexport interface ListKeyManagerOption {\n  /** Whether the option is disabled. */\n  disabled?: boolean;\n\n  /** Gets the label for this option. */\n  getLabel?(): string;\n}\n\n/** Modifier keys handled by the ListKeyManager. */\nexport type ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n  private _activeItemIndex = -1;\n  private _activeItem = signal<T | null>(null);\n  private _wrap = false;\n  private _typeaheadSubscription = Subscription.EMPTY;\n  private _itemChangesSubscription?: Subscription;\n  private _vertical = true;\n  private _horizontal: 'ltr' | 'rtl' | null;\n  private _allowedModifierKeys: ListKeyManagerModifierKey[] = [];\n  private _homeAndEnd = false;\n  private _pageUpAndDown = {enabled: false, delta: 10};\n  private _effectRef: EffectRef | undefined;\n  private _typeahead?: Typeahead<T>;\n\n  /**\n   * Predicate function that can be used to check whether an item should be skipped\n   * by the key manager. By default, disabled items are skipped.\n   */\n  private _skipPredicateFn = (item: T) => item.disabled;\n\n  constructor(items: QueryList<T> | T[] | readonly T[]);\n  constructor(items: Signal<T[]> | Signal<readonly T[]>, injector: Injector);\n  constructor(\n    private _items: QueryList<T> | T[] | readonly T[] | Signal<T[]> | Signal<readonly T[]>,\n    injector?: Injector,\n  ) {\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      this._itemChangesSubscription = _items.changes.subscribe((newItems: QueryList<T>) =>\n        this._itemsChanged(newItems.toArray()),\n      );\n    } else if (isSignal(_items)) {\n      if (!injector && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw new Error('ListKeyManager constructed with a signal must receive an injector');\n      }\n\n      this._effectRef = effect(() => this._itemsChanged(_items()), {injector});\n    }\n  }\n\n  /**\n   * Stream that emits any time the TAB key is pressed, so components can react\n   * when focus is shifted off of the list.\n   */\n  readonly tabOut = new Subject<void>();\n\n  /** Stream that emits whenever the active item of the list manager changes. */\n  readonly change = new Subject<number>();\n\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate: (item: T) => boolean): this {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n  withWrap(shouldWrap = true): this {\n    this._wrap = shouldWrap;\n    return this;\n  }\n\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled: boolean = true): this {\n    this._vertical = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n    this._horizontal = direction;\n    return this;\n  }\n\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n  withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval: number = 200): this {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const items = this._getItemsArray();\n      if (items.length > 0 && items.some(item => typeof item.getLabel !== 'function')) {\n        throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n      }\n    }\n\n    this._typeaheadSubscription.unsubscribe();\n\n    const items = this._getItemsArray();\n    this._typeahead = new Typeahead(items, {\n      debounceInterval: typeof debounceInterval === 'number' ? debounceInterval : undefined,\n      skipPredicate: item => this._skipPredicateFn(item),\n    });\n\n    this._typeaheadSubscription = this._typeahead.selectedItem.subscribe(item => {\n      this.setActiveItem(item);\n    });\n\n    return this;\n  }\n\n  /** Cancels the current typeahead sequence. */\n  cancelTypeahead(): this {\n    this._typeahead?.reset();\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n  withHomeAndEnd(enabled: boolean = true): this {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate every 10th, configured or first/last element in up/down direction\n   * respectively when the Page-Up or Page-Down key is pressed.\n   * @param enabled Whether pressing the Page-Up or Page-Down key activates the first/last item.\n   * @param delta Whether pressing the Home or End key activates the first/last item.\n   */\n  withPageUpDown(enabled: boolean = true, delta: number = 10): this {\n    this._pageUpAndDown = {enabled, delta};\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the index specified.\n   * @param index The index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the specified item.\n   * @param item The item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    const previousActiveItem = this._activeItem();\n\n    this.updateActiveItem(item);\n\n    if (this._activeItem() !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const modifiers: ListKeyManagerModifierKey[] = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case PAGE_UP:\n        if (this._pageUpAndDown.enabled && isModifierAllowed) {\n          const targetIndex = this._activeItemIndex - this._pageUpAndDown.delta;\n          this._setActiveItemByIndex(targetIndex > 0 ? targetIndex : 0, 1);\n          break;\n        } else {\n          return;\n        }\n\n      case PAGE_DOWN:\n        if (this._pageUpAndDown.enabled && isModifierAllowed) {\n          const targetIndex = this._activeItemIndex + this._pageUpAndDown.delta;\n          const itemsLength = this._getItemsArray().length;\n          this._setActiveItemByIndex(targetIndex < itemsLength ? targetIndex : itemsLength - 1, -1);\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          this._typeahead?.handleKey(event);\n        }\n\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    this._typeahead?.reset();\n    event.preventDefault();\n  }\n\n  /** Index of the currently active item. */\n  get activeItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The active item. */\n  get activeItem(): T | null {\n    return this._activeItem();\n  }\n\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping(): boolean {\n    return !!this._typeahead && this._typeahead.isTyping();\n  }\n\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive(): void {\n    this._setActiveItemByIndex(this._getItemsArray().length - 1, -1);\n  }\n\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive(): void {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive(): void {\n    this._activeItemIndex < 0 && this._wrap\n      ? this.setLastItemActive()\n      : this._setActiveItemByDelta(-1);\n  }\n\n  /**\n   * Allows setting the active without any other effects.\n   * @param index Index of the item to be set as active.\n   */\n  updateActiveItem(index: number): void;\n\n  /**\n   * Allows setting the active item without any other effects.\n   * @param item Item to be set as active.\n   */\n  updateActiveItem(item: T): void;\n\n  updateActiveItem(item: any): void {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index];\n\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\n    this._activeItem.set(activeItem == null ? null : activeItem);\n    this._activeItemIndex = index;\n    this._typeahead?.setCurrentSelectedItemIndex(index);\n  }\n\n  /** Cleans up the key manager. */\n  destroy() {\n    this._typeaheadSubscription.unsubscribe();\n    this._itemChangesSubscription?.unsubscribe();\n    this._effectRef?.destroy();\n    this._typeahead?.destroy();\n    this.tabOut.complete();\n    this.change.complete();\n  }\n\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  private _setActiveItemByDelta(delta: -1 | 1): void {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  private _setActiveInWrapMode(delta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  private _setActiveInDefaultMode(delta: -1 | 1): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  private _setActiveItemByIndex(index: number, fallbackDelta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n\n  /** Returns the items as an array. */\n  private _getItemsArray(): T[] | readonly T[] {\n    if (isSignal(this._items)) {\n      return this._items();\n    }\n\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n\n  /** Callback for when the items have changed. */\n  private _itemsChanged(newItems: T[] | readonly T[]) {\n    this._typeahead?.setItems(newItems);\n    const activeItem = this._activeItem();\n    if (activeItem) {\n      const newIndex = newItems.indexOf(activeItem);\n\n      if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n        this._activeItemIndex = newIndex;\n        this._typeahead?.setCurrentSelectedItemIndex(newIndex);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends ListKeyManagerOption {\n  /** Applies the styles for an active item to this item. */\n  setActiveStyles(): void;\n\n  /** Applies the styles for an inactive item to this item. */\n  setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n  /**\n   * Sets the active item to the item at the specified index and adds the\n   * active styles to the newly active item. Also removes active styles\n   * from the previously active item.\n   * @param index Index of the item to be set as active.\n   */\n  override setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item to the specified one and adds the\n   * active styles to the it. Also removes active styles from the\n   * previously active item.\n   * @param item Item to be set as active.\n   */\n  override setActiveItem(item: T): void;\n\n  override setActiveItem(index: any): void {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n    super.setActiveItem(index);\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\nimport {FocusOrigin} from '../focus-monitor/focus-monitor';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply its label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  /** Focuses the `FocusableOption`. */\n  focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n  private _origin: FocusOrigin = 'program';\n\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin: FocusOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the specified\n   * index and focuses the newly active item.\n   * @param index Index of the item to be set as active.\n   */\n  override setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item that is specified and focuses it.\n   * @param item Item to be set as active.\n   */\n  override setActiveItem(item: T): void;\n\n  override setActiveItem(item: any): void {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {Observable, isObservable, of as observableOf} from 'rxjs';\n\n/**\n * Given either an Observable or non-Observable value, returns either the original\n * Observable, or wraps it in an Observable that emits the non-Observable value.\n */\nexport function coerceObservable<T>(data: T | Observable<T>): Observable<T> {\n  if (!isObservable(data)) {\n    return observableOf(data);\n  }\n  return data;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken, QueryList} from '@angular/core';\nimport {coerceObservable} from '../../coercion/private';\nimport {Observable, Subject, Subscription, isObservable, of as observableOf} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {\n  TreeKeyManagerFactory,\n  TreeKeyManagerItem,\n  TreeKeyManagerOptions,\n  TreeKeyManagerStrategy,\n} from './tree-key-manager-strategy';\nimport {Typeahead} from './typeahead';\n\n/**\n * This class manages keyboard events for trees. If you pass it a QueryList or other list of tree\n * items, it will set the active item, focus, handle expansion and typeahead correctly when\n * keyboard events occur.\n */\nexport class TreeKeyManager<T extends TreeKeyManagerItem> implements TreeKeyManagerStrategy<T> {\n  /** The index of the currently active (focused) item. */\n  private _activeItemIndex = -1;\n  /** The currently active (focused) item. */\n  private _activeItem: T | null = null;\n  /** Whether or not we activate the item when it's focused. */\n  private _shouldActivationFollowFocus = false;\n  /**\n   * The orientation that the tree is laid out in. In `rtl` mode, the behavior of Left and\n   * Right arrow are switched.\n   */\n  private _horizontalOrientation: 'ltr' | 'rtl' = 'ltr';\n\n  /**\n   * Predicate function that can be used to check whether an item should be skipped\n   * by the key manager.\n   *\n   * The default value for this doesn't skip any elements in order to keep tree items focusable\n   * when disabled. This aligns with ARIA guidelines:\n   * https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#focusabilityofdisabledcontrols.\n   */\n  private _skipPredicateFn = (_item: T) => false;\n\n  /** Function to determine equivalent items. */\n  private _trackByFn: (item: T) => unknown = (item: T) => item;\n\n  /** Synchronous cache of the items to manage. */\n  private _items: T[] = [];\n\n  private _typeahead?: Typeahead<T>;\n  private _typeaheadSubscription = Subscription.EMPTY;\n\n  private _hasInitialFocused = false;\n\n  private _initializeFocus(): void {\n    if (this._hasInitialFocused || this._items.length === 0) {\n      return;\n    }\n\n    let activeIndex = 0;\n    for (let i = 0; i < this._items.length; i++) {\n      if (!this._skipPredicateFn(this._items[i]) && !this._isItemDisabled(this._items[i])) {\n        activeIndex = i;\n        break;\n      }\n    }\n\n    const activeItem = this._items[activeIndex];\n\n    // Use `makeFocusable` here, because we want the item to just be focusable, not actually\n    // capture the focus since the user isn't interacting with it. See #29628.\n    if (activeItem.makeFocusable) {\n      this._activeItem?.unfocus();\n      this._activeItemIndex = activeIndex;\n      this._activeItem = activeItem;\n      this._typeahead?.setCurrentSelectedItemIndex(activeIndex);\n      activeItem.makeFocusable();\n    } else {\n      // Backwards compatibility for items that don't implement `makeFocusable`.\n      this.focusItem(activeIndex);\n    }\n\n    this._hasInitialFocused = true;\n  }\n\n  /**\n   *\n   * @param items List of TreeKeyManager options. Can be synchronous or asynchronous.\n   * @param config Optional configuration options. By default, use 'ltr' horizontal orientation. By\n   * default, do not skip any nodes. By default, key manager only calls `focus` method when items\n   * are focused and does not call `activate`. If `typeaheadDefaultInterval` is `true`, use a\n   * default interval of 200ms.\n   */\n  constructor(items: Observable<T[]> | QueryList<T> | T[], config: TreeKeyManagerOptions<T>) {\n    // We allow for the items to be an array or Observable because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (items instanceof QueryList) {\n      this._items = items.toArray();\n      items.changes.subscribe((newItems: QueryList<T>) => {\n        this._items = newItems.toArray();\n        this._typeahead?.setItems(this._items);\n        this._updateActiveItemIndex(this._items);\n        this._initializeFocus();\n      });\n    } else if (isObservable(items)) {\n      items.subscribe(newItems => {\n        this._items = newItems;\n        this._typeahead?.setItems(newItems);\n        this._updateActiveItemIndex(newItems);\n        this._initializeFocus();\n      });\n    } else {\n      this._items = items;\n      this._initializeFocus();\n    }\n\n    if (typeof config.shouldActivationFollowFocus === 'boolean') {\n      this._shouldActivationFollowFocus = config.shouldActivationFollowFocus;\n    }\n    if (config.horizontalOrientation) {\n      this._horizontalOrientation = config.horizontalOrientation;\n    }\n    if (config.skipPredicate) {\n      this._skipPredicateFn = config.skipPredicate;\n    }\n    if (config.trackBy) {\n      this._trackByFn = config.trackBy;\n    }\n    if (typeof config.typeAheadDebounceInterval !== 'undefined') {\n      this._setTypeAhead(config.typeAheadDebounceInterval);\n    }\n  }\n\n  /** Stream that emits any time the focused item changes. */\n  readonly change = new Subject<T | null>();\n\n  /** Cleans up the key manager. */\n  destroy() {\n    this._typeaheadSubscription.unsubscribe();\n    this._typeahead?.destroy();\n    this.change.complete();\n  }\n\n  /**\n   * Handles a keyboard event on the tree.\n   * @param event Keyboard event that represents the user interaction with the tree.\n   */\n  onKeydown(event: KeyboardEvent) {\n    const key = event.key;\n\n    switch (key) {\n      case 'Tab':\n        // Return early here, in order to allow Tab to actually tab out of the tree\n        return;\n\n      case 'ArrowDown':\n        this._focusNextItem();\n        break;\n\n      case 'ArrowUp':\n        this._focusPreviousItem();\n        break;\n\n      case 'ArrowRight':\n        this._horizontalOrientation === 'rtl'\n          ? this._collapseCurrentItem()\n          : this._expandCurrentItem();\n        break;\n\n      case 'ArrowLeft':\n        this._horizontalOrientation === 'rtl'\n          ? this._expandCurrentItem()\n          : this._collapseCurrentItem();\n        break;\n\n      case 'Home':\n        this._focusFirstItem();\n        break;\n\n      case 'End':\n        this._focusLastItem();\n        break;\n\n      case 'Enter':\n      case ' ':\n        this._activateCurrentItem();\n        break;\n\n      default:\n        if (event.key === '*') {\n          this._expandAllItemsAtCurrentItemLevel();\n          break;\n        }\n\n        this._typeahead?.handleKey(event);\n        // Return here, in order to avoid preventing the default action of non-navigational\n        // keys or resetting the buffer of pressed letters.\n        return;\n    }\n\n    // Reset the typeahead since the user has used a navigational key.\n    this._typeahead?.reset();\n    event.preventDefault();\n  }\n\n  /** Index of the currently active item. */\n  getActiveItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The currently active item. */\n  getActiveItem(): T | null {\n    return this._activeItem;\n  }\n\n  /** Focus the first available item. */\n  private _focusFirstItem(): void {\n    this.focusItem(this._findNextAvailableItemIndex(-1));\n  }\n\n  /** Focus the last available item. */\n  private _focusLastItem(): void {\n    this.focusItem(this._findPreviousAvailableItemIndex(this._items.length));\n  }\n\n  /** Focus the next available item. */\n  private _focusNextItem(): void {\n    this.focusItem(this._findNextAvailableItemIndex(this._activeItemIndex));\n  }\n\n  /** Focus the previous available item. */\n  private _focusPreviousItem(): void {\n    this.focusItem(this._findPreviousAvailableItemIndex(this._activeItemIndex));\n  }\n\n  /**\n   * Focus the provided item by index.\n   * @param index The index of the item to focus.\n   * @param options Additional focusing options.\n   */\n  focusItem(index: number, options?: {emitChangeEvent?: boolean}): void;\n  focusItem(item: T, options?: {emitChangeEvent?: boolean}): void;\n  focusItem(itemOrIndex: number | T, options?: {emitChangeEvent?: boolean}): void;\n  focusItem(itemOrIndex: number | T, options: {emitChangeEvent?: boolean} = {}) {\n    // Set default options\n    options.emitChangeEvent ??= true;\n\n    let index =\n      typeof itemOrIndex === 'number'\n        ? itemOrIndex\n        : this._items.findIndex(item => this._trackByFn(item) === this._trackByFn(itemOrIndex));\n    if (index < 0 || index >= this._items.length) {\n      return;\n    }\n    const activeItem = this._items[index];\n\n    // If we're just setting the same item, don't re-call activate or focus\n    if (\n      this._activeItem !== null &&\n      this._trackByFn(activeItem) === this._trackByFn(this._activeItem)\n    ) {\n      return;\n    }\n\n    const previousActiveItem = this._activeItem;\n    this._activeItem = activeItem ?? null;\n    this._activeItemIndex = index;\n    this._typeahead?.setCurrentSelectedItemIndex(index);\n\n    this._activeItem?.focus();\n    previousActiveItem?.unfocus();\n\n    if (options.emitChangeEvent) {\n      this.change.next(this._activeItem);\n    }\n\n    if (this._shouldActivationFollowFocus) {\n      this._activateCurrentItem();\n    }\n  }\n\n  private _updateActiveItemIndex(newItems: T[]) {\n    const activeItem = this._activeItem;\n    if (!activeItem) {\n      return;\n    }\n\n    const newIndex = newItems.findIndex(\n      item => this._trackByFn(item) === this._trackByFn(activeItem),\n    );\n\n    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n      this._activeItemIndex = newIndex;\n      this._typeahead?.setCurrentSelectedItemIndex(newIndex);\n    }\n  }\n\n  private _setTypeAhead(debounceInterval: number | boolean) {\n    this._typeahead = new Typeahead(this._items, {\n      debounceInterval: typeof debounceInterval === 'number' ? debounceInterval : undefined,\n      skipPredicate: item => this._skipPredicateFn(item),\n    });\n\n    this._typeaheadSubscription = this._typeahead.selectedItem.subscribe(item => {\n      this.focusItem(item);\n    });\n  }\n\n  private _findNextAvailableItemIndex(startingIndex: number) {\n    for (let i = startingIndex + 1; i < this._items.length; i++) {\n      if (!this._skipPredicateFn(this._items[i])) {\n        return i;\n      }\n    }\n    return startingIndex;\n  }\n\n  private _findPreviousAvailableItemIndex(startingIndex: number) {\n    for (let i = startingIndex - 1; i >= 0; i--) {\n      if (!this._skipPredicateFn(this._items[i])) {\n        return i;\n      }\n    }\n    return startingIndex;\n  }\n\n  /**\n   * If the item is already expanded, we collapse the item. Otherwise, we will focus the parent.\n   */\n  private _collapseCurrentItem() {\n    if (!this._activeItem) {\n      return;\n    }\n\n    if (this._isCurrentItemExpanded()) {\n      this._activeItem.collapse();\n    } else {\n      const parent = this._activeItem.getParent();\n      if (!parent || this._skipPredicateFn(parent as T)) {\n        return;\n      }\n      this.focusItem(parent as T);\n    }\n  }\n\n  /**\n   * If the item is already collapsed, we expand the item. Otherwise, we will focus the first child.\n   */\n  private _expandCurrentItem() {\n    if (!this._activeItem) {\n      return;\n    }\n\n    if (!this._isCurrentItemExpanded()) {\n      this._activeItem.expand();\n    } else {\n      coerceObservable(this._activeItem.getChildren())\n        .pipe(take(1))\n        .subscribe(children => {\n          const firstChild = children.find(child => !this._skipPredicateFn(child as T));\n          if (!firstChild) {\n            return;\n          }\n          this.focusItem(firstChild as T);\n        });\n    }\n  }\n\n  private _isCurrentItemExpanded() {\n    if (!this._activeItem) {\n      return false;\n    }\n    return typeof this._activeItem.isExpanded === 'boolean'\n      ? this._activeItem.isExpanded\n      : this._activeItem.isExpanded();\n  }\n\n  private _isItemDisabled(item: TreeKeyManagerItem) {\n    return typeof item.isDisabled === 'boolean' ? item.isDisabled : item.isDisabled?.();\n  }\n\n  /** For all items that are the same level as the current item, we expand those items. */\n  private _expandAllItemsAtCurrentItemLevel() {\n    if (!this._activeItem) {\n      return;\n    }\n\n    const parent = this._activeItem.getParent();\n    let itemsToExpand;\n    if (!parent) {\n      itemsToExpand = observableOf(this._items.filter(item => item.getParent() === null));\n    } else {\n      itemsToExpand = coerceObservable(parent.getChildren());\n    }\n\n    itemsToExpand.pipe(take(1)).subscribe(items => {\n      for (const item of items) {\n        item.expand();\n      }\n    });\n  }\n\n  private _activateCurrentItem() {\n    this._activeItem?.activate();\n  }\n}\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function TREE_KEY_MANAGER_FACTORY<T extends TreeKeyManagerItem>(): TreeKeyManagerFactory<T> {\n  return (items, options) => new TreeKeyManager(items, options);\n}\n\n/** Injection token that determines the key manager to use. */\nexport const TREE_KEY_MANAGER = new InjectionToken<TreeKeyManagerFactory<any>>('tree-key-manager', {\n  providedIn: 'root',\n  factory: TREE_KEY_MANAGER_FACTORY,\n});\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport const TREE_KEY_MANAGER_FACTORY_PROVIDER = {\n  provide: TREE_KEY_MANAGER,\n  useFactory: TREE_KEY_MANAGER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** IDs are delimited by an empty space, as per the spec. */\nconst ID_DELIMITER = ' ';\n\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function addAriaReferencedId(el: Element, attr: `aria-${string}`, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  id = id.trim();\n  if (ids.some(existingId => existingId.trim() === id)) {\n    return;\n  }\n  ids.push(id);\n\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function removeAriaReferencedId(el: Element, attr: `aria-${string}`, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  id = id.trim();\n  const filteredIds = ids.filter(val => val !== id);\n\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  const attrValue = el.getAttribute(attr);\n  return attrValue?.match(/\\S+/g) ?? [];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Injectable, OnDestroy, APP_ID, inject} from '@angular/core';\nimport {Platform} from '../../platform';\nimport {addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId} from './aria-reference';\nimport {_CdkPrivateStyleLoader, _VisuallyHiddenLoader} from '../../private';\n\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the same message and the reference to the message element used for the `aria-describedby`.\n */\nexport interface RegisteredMessage {\n  /** The element containing the message. */\n  messageElement: Element;\n\n  /** The number of elements that reference this message element via `aria-describedby`. */\n  referenceCount: number;\n}\n\n/**\n * ID used for the body container where all messages are appended.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 14.0.0\n */\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n\n/**\n * ID prefix used for each created message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n\n/**\n * Attribute given to each host element that is described by a message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\n@Injectable({providedIn: 'root'})\nexport class AriaDescriber implements OnDestroy {\n  private _platform = inject(Platform);\n  private _document = inject(DOCUMENT);\n\n  /** Map of all registered message elements that have been placed into the document. */\n  private _messageRegistry = new Map<string | Element, RegisteredMessage>();\n\n  /** Container for all registered messages. */\n  private _messagesContainer: HTMLElement | null = null;\n\n  /** Unique ID for the service. */\n  private readonly _id = `${nextId++}`;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n    this._id = inject(APP_ID) + '-' + nextId++;\n  }\n\n  /**\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\n   * the message. If the same message has already been registered, then it will reuse the created\n   * message element.\n   */\n  describe(hostElement: Element, message: string, role?: string): void;\n\n  /**\n   * Adds to the host element an aria-describedby reference to an already-existing message element.\n   */\n  describe(hostElement: Element, message: HTMLElement): void;\n\n  describe(hostElement: Element, message: string | HTMLElement, role?: string): void {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    const key = getKey(message, role);\n\n    if (typeof message !== 'string') {\n      // We need to ensure that the element has an ID.\n      setMessageId(message, this._id);\n      this._messageRegistry.set(key, {messageElement: message, referenceCount: 0});\n    } else if (!this._messageRegistry.has(key)) {\n      this._createMessageElement(message, role);\n    }\n\n    if (!this._isElementDescribedByMessage(hostElement, key)) {\n      this._addMessageReference(hostElement, key);\n    }\n  }\n\n  /** Removes the host element's aria-describedby reference to the message. */\n  removeDescription(hostElement: Element, message: string, role?: string): void;\n\n  /** Removes the host element's aria-describedby reference to the message element. */\n  removeDescription(hostElement: Element, message: HTMLElement): void;\n\n  removeDescription(hostElement: Element, message: string | HTMLElement, role?: string): void {\n    if (!message || !this._isElementNode(hostElement)) {\n      return;\n    }\n\n    const key = getKey(message, role);\n\n    if (this._isElementDescribedByMessage(hostElement, key)) {\n      this._removeMessageReference(hostElement, key);\n    }\n\n    // If the message is a string, it means that it's one that we created for the\n    // consumer so we can remove it safely, otherwise we should leave it in place.\n    if (typeof message === 'string') {\n      const registeredMessage = this._messageRegistry.get(key);\n      if (registeredMessage && registeredMessage.referenceCount === 0) {\n        this._deleteMessageElement(key);\n      }\n    }\n\n    if (this._messagesContainer?.childNodes.length === 0) {\n      this._messagesContainer.remove();\n      this._messagesContainer = null;\n    }\n  }\n\n  /** Unregisters all created message elements and removes the message container. */\n  ngOnDestroy() {\n    const describedElements = this._document.querySelectorAll(\n      `[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}=\"${this._id}\"]`,\n    );\n\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    this._messagesContainer?.remove();\n    this._messagesContainer = null;\n    this._messageRegistry.clear();\n  }\n\n  /**\n   * Creates a new element in the visually hidden message container element with the message\n   * as its content and adds it to the message registry.\n   */\n  private _createMessageElement(message: string, role?: string) {\n    const messageElement = this._document.createElement('div');\n    setMessageId(messageElement, this._id);\n    messageElement.textContent = message;\n\n    if (role) {\n      messageElement.setAttribute('role', role);\n    }\n\n    this._createMessagesContainer();\n    this._messagesContainer!.appendChild(messageElement);\n    this._messageRegistry.set(getKey(message, role), {messageElement, referenceCount: 0});\n  }\n\n  /** Deletes the message element from the global messages container. */\n  private _deleteMessageElement(key: string | Element) {\n    this._messageRegistry.get(key)?.messageElement?.remove();\n    this._messageRegistry.delete(key);\n  }\n\n  /** Creates the global container for all aria-describedby messages. */\n  private _createMessagesContainer() {\n    if (this._messagesContainer) {\n      return;\n    }\n\n    const containerClassName = 'cdk-describedby-message-container';\n    const serverContainers = this._document.querySelectorAll(\n      `.${containerClassName}[platform=\"server\"]`,\n    );\n\n    for (let i = 0; i < serverContainers.length; i++) {\n      // When going from the server to the client, we may end up in a situation where there's\n      // already a container on the page, but we don't have a reference to it. Clear the\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\n      // container, should be slightly faster.\n      serverContainers[i].remove();\n    }\n\n    const messagesContainer = this._document.createElement('div');\n\n    // We add `visibility: hidden` in order to prevent text in this container from\n    // being searchable by the browser's Ctrl + F functionality.\n    // Screen-readers will still read the description for elements with aria-describedby even\n    // when the description element is not visible.\n    messagesContainer.style.visibility = 'hidden';\n    // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n    // the description element doesn't impact page layout.\n    messagesContainer.classList.add(containerClassName);\n    messagesContainer.classList.add('cdk-visually-hidden');\n\n    if (!this._platform.isBrowser) {\n      messagesContainer.setAttribute('platform', 'server');\n    }\n\n    this._document.body.appendChild(messagesContainer);\n    this._messagesContainer = messagesContainer;\n  }\n\n  /** Removes all cdk-describedby messages that are hosted through the element. */\n  private _removeCdkDescribedByReferenceIds(element: Element) {\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(\n      id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0,\n    );\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n\n  /**\n   * Adds a message reference to the element using aria-describedby and increments the registered\n   * message's reference count.\n   */\n  private _addMessageReference(element: Element, key: string | Element) {\n    const registeredMessage = this._messageRegistry.get(key)!;\n\n    // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);\n    registeredMessage.referenceCount++;\n  }\n\n  /**\n   * Removes a message reference from the element using aria-describedby\n   * and decrements the registered message's reference count.\n   */\n  private _removeMessageReference(element: Element, key: string | Element) {\n    const registeredMessage = this._messageRegistry.get(key)!;\n    registeredMessage.referenceCount--;\n\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n\n  /** Returns true if the element has been described by the provided message ID. */\n  private _isElementDescribedByMessage(element: Element, key: string | Element): boolean {\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    const registeredMessage = this._messageRegistry.get(key);\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n\n  /** Determines whether a message can be described on a particular element. */\n  private _canBeDescribed(element: Element, message: string | HTMLElement | void): boolean {\n    if (!this._isElementNode(element)) {\n      return false;\n    }\n\n    if (message && typeof message === 'object') {\n      // We'd have to make some assumptions about the description element's text, if the consumer\n      // passed in an element. Assume that if an element is passed in, the consumer has verified\n      // that it can be used as a description.\n      return true;\n    }\n\n    const trimmedMessage = message == null ? '' : `${message}`.trim();\n    const ariaLabel = element.getAttribute('aria-label');\n\n    // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n    // element, because screen readers will end up reading out the same text twice in a row.\n    return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n  }\n\n  /** Checks whether a node is an Element node. */\n  private _isElementNode(element: Node): element is Element {\n    return element.nodeType === this._document.ELEMENT_NODE;\n  }\n}\n\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message: string | Element, role?: string): string | Element {\n  return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element: HTMLElement, serviceId: string) {\n  if (!element.id) {\n    element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${serviceId}-${nextId++}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {inject, InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-browser because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nexport const DIR_DOCUMENT = new InjectionToken<Document>('cdk-dir-doc', {\n  providedIn: 'root',\n  factory: DIR_DOCUMENT_FACTORY,\n});\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function DIR_DOCUMENT_FACTORY(): Document {\n  return inject(DOCUMENT);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {EventEmitter, Injectable, OnDestroy, inject} from '@angular/core';\nimport {DIR_DOCUMENT} from './dir-document-token';\n\nexport type Direction = 'ltr' | 'rtl';\n\n/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */\nconst RTL_LOCALE_PATTERN =\n  /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;\n\n/** Resolves a string value to a specific direction. */\nexport function _resolveDirectionality(rawValue: string): Direction {\n  const value = rawValue?.toLowerCase() || '';\n\n  if (value === 'auto' && typeof navigator !== 'undefined' && navigator?.language) {\n    return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';\n  }\n\n  return value === 'rtl' ? 'rtl' : 'ltr';\n}\n\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\n@Injectable({providedIn: 'root'})\nexport class Directionality implements OnDestroy {\n  /** The current 'ltr' or 'rtl' value. */\n  readonly value: Direction = 'ltr';\n\n  /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n  readonly change = new EventEmitter<Direction>();\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const _document = inject(DIR_DOCUMENT, {optional: true});\n\n    if (_document) {\n      const bodyDir = _document.body ? _document.body.dir : null;\n      const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n      this.value = _resolveDirectionality(bodyDir || htmlDir || 'ltr');\n    }\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {Dir} from './dir';\n\n@NgModule({\n  imports: [Dir],\n  exports: [Dir],\n})\nexport class BidiModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {HighContrastModeDetector} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {inject, InjectionToken, NgModule} from '@angular/core';\nimport {_isTestEnvironment} from '@angular/cdk/platform';\n\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n * @deprecated No longer used and will be removed.\n * @breaking-change 21.0.0\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<SanityChecks>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: () => true,\n});\n\n/**\n * Possible sanity checks that can be enabled. If set to\n * true/false, all checks will be enabled/disabled.\n * @deprecated No longer used and will be removed.\n * @breaking-change 21.0.0\n */\nexport type SanityChecks = boolean | GranularSanityChecks;\n\n/**\n * Object that can be used to configure the sanity checks granularly.\n * @deprecated No longer used and will be removed.\n * @breaking-change 21.0.0\n */\nexport interface GranularSanityChecks {\n  doctype: boolean;\n  theme: boolean;\n  version: boolean;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n * @deprecated No longer used and will be removed.\n * @breaking-change 21.0.0\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  constructor(...args: any[]);\n\n  constructor() {\n    // While A11yModule also does this, we repeat it here to avoid importing A11yModule\n    // in MatCommonModule.\n    inject(HighContrastModeDetector)._applyBodyHighContrastModeCssClasses();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  TemplateRef,\n  ViewContainerRef,\n  ElementRef,\n  ComponentRef,\n  EmbeddedViewRef,\n  Injector,\n} from '@angular/core';\nimport {\n  throwNullPortalOutletError,\n  throwPortalAlreadyAttachedError,\n  throwNoPortalAttachedError,\n  throwNullPortalError,\n  throwPortalOutletAlreadyDisposedError,\n  throwUnknownPortalTypeError,\n} from './portal-errors';\n\n/** Interface that can be used to generically type a class. */\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nexport abstract class Portal<T> {\n  private _attachedHost: PortalOutlet | null;\n\n  /** Attach this portal to a host. */\n  attach(host: PortalOutlet): T {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (host == null) {\n        throwNullPortalOutletError();\n      }\n\n      if (host.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n    }\n\n    this._attachedHost = host;\n    return <T>host.attach(this);\n  }\n\n  /** Detach this portal from its host */\n  detach(): void {\n    let host = this._attachedHost;\n\n    if (host != null) {\n      this._attachedHost = null;\n      host.detach();\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throwNoPortalAttachedError();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n   * the PortalOutlet when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host: PortalOutlet | null) {\n    this._attachedHost = host;\n  }\n}\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalOutlet.\n   * The origin is necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef?: ViewContainerRef | null;\n\n  /** Injector used for the instantiation of the component. */\n  injector?: Injector | null;\n\n  /**\n   * @deprecated No longer in use. To be removed.\n   * @breaking-change 18.0.0\n   */\n  componentFactoryResolver?: any;\n\n  /**\n   * List of DOM nodes that should be projected through `<ng-content>` of the attached component.\n   */\n  projectableNodes?: Node[][] | null;\n\n  constructor(\n    component: ComponentType<T>,\n    viewContainerRef?: ViewContainerRef | null,\n    injector?: Injector | null,\n    /**\n     * @deprecated No longer in use. To be removed.\n     * @breaking-change 18.0.0\n     */\n    _componentFactoryResolver?: any,\n    projectableNodes?: Node[][] | null,\n  ) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n    this.projectableNodes = projectableNodes;\n  }\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal<C = any> extends Portal<EmbeddedViewRef<C>> {\n  constructor(\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\n    public templateRef: TemplateRef<C>,\n    /** Reference to the ViewContainer into which the template will be stamped out. */\n    public viewContainerRef: ViewContainerRef,\n    /** Contextual data to be passed in to the embedded view. */\n    public context?: C,\n    /** The injector to use for the embedded view. */\n    public injector?: Injector,\n  ) {\n    super();\n  }\n\n  get origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n\n  /**\n   * Attach the portal to the provided `PortalOutlet`.\n   * When a context is provided it will override the `context` property of the `TemplatePortal`\n   * instance.\n   */\n  override attach(host: PortalOutlet, context: C | undefined = this.context): EmbeddedViewRef<C> {\n    this.context = context;\n    return super.attach(host);\n  }\n\n  override detach(): void {\n    this.context = undefined;\n    return super.detach();\n  }\n}\n\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nexport class DomPortal<T = HTMLElement> extends Portal<T> {\n  /** DOM node hosting the portal's content. */\n  readonly element: T;\n\n  constructor(element: T | ElementRef<T>) {\n    super();\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n}\n\n/** A `PortalOutlet` is a space that can contain a single `Portal`. */\nexport interface PortalOutlet {\n  /** Attaches a portal to this outlet. */\n  attach(portal: Portal<any>): any;\n\n  /** Detaches the currently attached portal from this outlet. */\n  detach(): any;\n\n  /** Performs cleanup before the outlet is destroyed. */\n  dispose(): void;\n\n  /** Whether there is currently a portal attached to this outlet. */\n  hasAttached(): boolean;\n}\n\n/**\n * @deprecated Use `PortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport type PortalHost = PortalOutlet;\n\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nexport abstract class BasePortalOutlet implements PortalOutlet {\n  /** The portal currently attached to the host. */\n  protected _attachedPortal: Portal<any> | null;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn: (() => void) | null;\n\n  /** Whether this host has already been permanently disposed. */\n  private _isDisposed: boolean = false;\n\n  /** Whether this host has an attached portal. */\n  hasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /** Attaches a portal. */\n  attach(portal: Portal<any>): any {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!portal) {\n        throwNullPortalError();\n      }\n\n      if (this.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n\n      if (this._isDisposed) {\n        throwPortalOutletAlreadyDisposedError();\n      }\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n      // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n    } else if (this.attachDomPortal && portal instanceof DomPortal) {\n      this._attachedPortal = portal;\n      return this.attachDomPortal(portal);\n    }\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throwUnknownPortalTypeError();\n    }\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n\n  abstract attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n\n  // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n  readonly attachDomPortal: null | ((portal: DomPortal) => any) = null;\n\n  /** Detaches a previously attached portal. */\n  detach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n\n  /** Permanently dispose of this portal host. */\n  dispose(): void {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n\n  /** @docs-private */\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n\n  private _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport abstract class BasePortalHost extends BasePortalOutlet {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ApplicationRef,\n  ComponentRef,\n  EmbeddedViewRef,\n  EnvironmentInjector,\n  Injector,\n  NgModuleRef,\n  createComponent,\n} from '@angular/core';\nimport {BasePortalOutlet, ComponentPortal, DomPortal, TemplatePortal} from './portal';\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nexport class DomPortalOutlet extends BasePortalOutlet {\n  private _document: Document;\n\n  /**\n   * @param outletElement Element into which the content is projected.\n   * @param _unusedComponentFactoryResolver Used to resolve the component factory.\n   *   Only required when attaching component portals.\n   * @param _appRef Reference to the application. Only used in component portals when there\n   *   is no `ViewContainerRef` available.\n   * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n   *   have one. Only used for component portals.\n   * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n   *   become a required parameter.\n   */\n  constructor(\n    /** Element into which the content is projected. */\n    public outletElement: Element,\n    /**\n     * @deprecated No longer in use. To be removed.\n     * @breaking-change 18.0.0\n     */\n    _unusedComponentFactoryResolver?: any,\n    private _appRef?: ApplicationRef,\n    private _defaultInjector?: Injector,\n\n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document?: any,\n  ) {\n    super();\n    this._document = _document;\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element.\n   * @param portal Portal to be attached\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      const injector = portal.injector || portal.viewContainerRef.injector;\n      const ngModuleRef = injector.get(NgModuleRef, null, {optional: true}) || undefined;\n\n      componentRef = portal.viewContainerRef.createComponent(portal.component, {\n        index: portal.viewContainerRef.length,\n        injector,\n        ngModuleRef,\n        projectableNodes: portal.projectableNodes || undefined,\n      });\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n        throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n      }\n      const appRef = this._appRef!;\n\n      const elementInjector = portal.injector || this._defaultInjector || Injector.NULL;\n      const environmentInjector = elementInjector.get(EnvironmentInjector, appRef.injector);\n      componentRef = createComponent(portal.component, {\n        elementInjector,\n        environmentInjector,\n        projectableNodes: portal.projectableNodes || undefined,\n      });\n\n      appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        // Verify that the ApplicationRef has registered views before trying to detach a host view.\n        // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n        if (appRef.viewCount > 0) {\n          appRef.detachView(componentRef.hostView);\n        }\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n    this._attachedPortal = portal;\n\n    return componentRef;\n  }\n\n  /**\n   * Attaches a template portal to the DOM as an embedded view.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    let viewContainer = portal.viewContainerRef;\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\n      injector: portal.injector,\n    });\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalOutlet the view can be added everywhere in the DOM\n    // (e.g Overlay Container) To move the view to the specified host element. We just\n    // re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n\n    // Note that we want to detect changes after the nodes have been moved so that\n    // any directives inside the portal that are looking at the DOM inside a lifecycle\n    // hook won't be invoked too early.\n    viewRef.detectChanges();\n\n    this.setDisposeFn(() => {\n      let index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    });\n\n    this._attachedPortal = portal;\n\n    // TODO(jelbourn): Return locals from view.\n    return viewRef;\n  }\n\n  /**\n   * Attaches a DOM portal by transferring its content into the outlet.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  override attachDomPortal = (portal: DomPortal) => {\n    const element = portal.element;\n    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('DOM portal content must be attached to a parent node.');\n    }\n\n    // Anchor used to save the element's previous position so\n    // that we can restore it when the portal is detached.\n    const anchorNode = this._document.createComment('dom-portal');\n\n    element.parentNode!.insertBefore(anchorNode, element);\n    this.outletElement.appendChild(element);\n    this._attachedPortal = portal;\n\n    super.setDisposeFn(() => {\n      // We can't use `replaceWith` here because IE doesn't support it.\n      if (anchorNode.parentNode) {\n        anchorNode.parentNode.replaceChild(element, anchorNode);\n      }\n    });\n  };\n\n  /**\n   * Clears out a portal from the DOM.\n   */\n  override dispose(): void {\n    super.dispose();\n    this.outletElement.remove();\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport class DomPortalHost extends DomPortalOutlet {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  NgModule,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewContainerRef,\n  Input,\n  inject,\n  NgModuleRef,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {BasePortalOutlet, ComponentPortal, Portal, TemplatePortal, DomPortal} from './portal';\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\n@Directive({\n  selector: '[cdkPortal]',\n  exportAs: 'cdkPortal',\n})\nexport class CdkPortal extends TemplatePortal {\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const templateRef = inject<TemplateRef<any>>(TemplateRef);\n    const viewContainerRef = inject(ViewContainerRef);\n\n    super(templateRef, viewContainerRef);\n  }\n}\n\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\n@Directive({\n  selector: '[cdk-portal], [portal]',\n  exportAs: 'cdkPortal',\n  providers: [\n    {\n      provide: CdkPortal,\n      useExisting: TemplatePortalDirective,\n    },\n  ],\n})\nexport class TemplatePortalDirective extends CdkPortal {}\n\n/**\n * Possible attached references to the CdkPortalOutlet.\n */\nexport type CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\n\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\n@Directive({\n  selector: '[cdkPortalOutlet]',\n  exportAs: 'cdkPortalOutlet',\n})\nexport class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\n  private _moduleRef = inject(NgModuleRef, {optional: true});\n  private _document = inject(DOCUMENT);\n  private _viewContainerRef = inject(ViewContainerRef);\n\n  /** Whether the portal component is initialized. */\n  private _isInitialized = false;\n\n  /** Reference to the currently-attached component/view ref. */\n  private _attachedRef: CdkPortalOutletAttachedRef;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n  }\n\n  /** Portal associated with the Portal outlet. */\n  @Input('cdkPortalOutlet')\n  get portal(): Portal<any> | null {\n    return this._attachedPortal;\n  }\n\n  set portal(portal: Portal<any> | null | undefined | '') {\n    // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n    // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n    // and attach a portal programmatically in the parent component. When Angular does the first CD\n    // round, it will fire the setter with empty string, causing the user's content to be cleared.\n    if (this.hasAttached() && !portal && !this._isInitialized) {\n      return;\n    }\n\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._attachedPortal = portal || null;\n  }\n\n  /** Emits when a portal is attached to the outlet. */\n  @Output() readonly attached: EventEmitter<CdkPortalOutletAttachedRef> =\n    new EventEmitter<CdkPortalOutletAttachedRef>();\n\n  /** Component or view reference that is attached to the portal. */\n  get attachedRef(): CdkPortalOutletAttachedRef {\n    return this._attachedRef;\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    super.dispose();\n    this._attachedRef = this._attachedPortal = null;\n  }\n\n  /**\n   * Attach the given ComponentPortal to this PortalOutlet.\n   *\n   * @param portal Portal to be attached to the portal outlet.\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalOutlet.\n    const viewContainerRef =\n      portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n\n    const ref = viewContainerRef.createComponent(portal.component, {\n      index: viewContainerRef.length,\n      injector: portal.injector || viewContainerRef.injector,\n      projectableNodes: portal.projectableNodes || undefined,\n      ngModuleRef: this._moduleRef || undefined,\n    });\n\n    // If we're using a view container that's different from the injected one (e.g. when the portal\n    // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n    // inside of the alternate view container.\n    if (viewContainerRef !== this._viewContainerRef) {\n      this._getRootNode().appendChild((ref.hostView as EmbeddedViewRef<any>).rootNodes[0]);\n    }\n\n    super.setDisposeFn(() => ref.destroy());\n    this._attachedPortal = portal;\n    this._attachedRef = ref;\n    this.attached.emit(ref);\n\n    return ref;\n  }\n\n  /**\n   * Attach the given TemplatePortal to this PortalHost as an embedded View.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    portal.setAttachedHost(this);\n    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\n      injector: portal.injector,\n    });\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._attachedPortal = portal;\n    this._attachedRef = viewRef;\n    this.attached.emit(viewRef);\n\n    return viewRef;\n  }\n\n  /**\n   * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  override attachDomPortal = (portal: DomPortal) => {\n    const element = portal.element;\n    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('DOM portal content must be attached to a parent node.');\n    }\n\n    // Anchor used to save the element's previous position so\n    // that we can restore it when the portal is detached.\n    const anchorNode = this._document.createComment('dom-portal');\n\n    portal.setAttachedHost(this);\n    element.parentNode!.insertBefore(anchorNode, element);\n    this._getRootNode().appendChild(element);\n    this._attachedPortal = portal;\n\n    super.setDisposeFn(() => {\n      if (anchorNode.parentNode) {\n        anchorNode.parentNode!.replaceChild(element, anchorNode);\n      }\n    });\n  };\n\n  /** Gets the root node of the portal outlet. */\n  private _getRootNode(): HTMLElement {\n    const nativeElement: Node = this._viewContainerRef.element.nativeElement;\n\n    // The directive could be set on a template which will result in a comment\n    // node being the root. Use the comment's parent node if that is the case.\n    return (\n      nativeElement.nodeType === nativeElement.ELEMENT_NODE\n        ? nativeElement\n        : nativeElement.parentNode!\n    ) as HTMLElement;\n  }\n}\n\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\n@Directive({\n  selector: '[cdkPortalHost], [portalHost]',\n  exportAs: 'cdkPortalHost',\n  inputs: [{name: 'portal', alias: 'cdkPortalHost'}],\n  providers: [\n    {\n      provide: CdkPortalOutlet,\n      useExisting: PortalHostDirective,\n    },\n  ],\n})\nexport class PortalHostDirective extends CdkPortalOutlet {}\n\n@NgModule({\n  imports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n  exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n})\nexport class PortalModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ConnectableObservable, Observable} from 'rxjs';\nimport {CollectionViewer} from './collection-viewer';\n\nexport abstract class DataSource<T> {\n  /**\n   * Connects a collection viewer (such as a data-table) to this data source. Note that\n   * the stream provided will be accessed during change detection and should not directly change\n   * values that are bound in template views.\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   * @returns Observable that emits a new value when the data changes.\n   */\n  abstract connect(collectionViewer: CollectionViewer): Observable<readonly T[]>;\n\n  /**\n   * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n   * to perform any clean-up or tear-down operations when a view is being destroyed.\n   *\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   */\n  abstract disconnect(collectionViewer: CollectionViewer): void;\n}\n\n/** Checks whether an object is a data source. */\nexport function isDataSource(value: any): value is DataSource<any> {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n  // here, because of some internal apps.\n  return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  InjectionToken,\n  IterableChangeRecord,\n  IterableChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * The context for an embedded view in the repeater's view container.\n *\n * @template T The type for the embedded view's $implicit property.\n */\nexport interface _ViewRepeaterItemContext<T> {\n  $implicit?: T;\n}\n\n/**\n * The arguments needed to construct an embedded view for an item in a view\n * container.\n *\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeaterItemInsertArgs<C> {\n  templateRef: TemplateRef<C>;\n  context?: C;\n  index?: number;\n}\n\n/**\n * A factory that derives the embedded view context for an item in a view\n * container.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport type _ViewRepeaterItemContextFactory<T, R, C extends _ViewRepeaterItemContext<T>> = (\n  record: IterableChangeRecord<R>,\n  adjustedPreviousIndex: number | null,\n  currentIndex: number | null,\n) => _ViewRepeaterItemInsertArgs<C>;\n\n/**\n * Extracts the value of an item from an {@link IterableChangeRecord}.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n */\nexport type _ViewRepeaterItemValueResolver<T, R> = (record: IterableChangeRecord<R>) => T;\n\n/** Indicates how a view was changed by a {@link _ViewRepeater}. */\nexport enum _ViewRepeaterOperation {\n  /** The content of an existing view was replaced with another item. */\n  REPLACED,\n  /** A new view was created with `createEmbeddedView`. */\n  INSERTED,\n  /** The position of a view changed, but the content remains the same. */\n  MOVED,\n  /** A view was detached from the view container. */\n  REMOVED,\n}\n\n/**\n * Meta data describing the state of a view after it was updated by a\n * {@link _ViewRepeater}.\n *\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeaterItemChange<R, C> {\n  /** The view's context after it was changed. */\n  context?: C;\n  /** Indicates how the view was changed. */\n  operation: _ViewRepeaterOperation;\n  /** The view's corresponding change record. */\n  record: IterableChangeRecord<R>;\n}\n\n/**\n * Type for a callback to be executed after a view has changed.\n *\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport type _ViewRepeaterItemChanged<R, C> = (change: _ViewRepeaterItemChange<R, C>) => void;\n\n/**\n * Describes a strategy for rendering items in a {@link ViewContainerRef}.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nexport interface _ViewRepeater<T, R, C extends _ViewRepeaterItemContext<T>> {\n  applyChanges(\n    changes: IterableChanges<R>,\n    viewContainerRef: ViewContainerRef,\n    itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>,\n    itemValueResolver: _ViewRepeaterItemValueResolver<T, R>,\n    itemViewChanged?: _ViewRepeaterItemChanged<R, C>,\n  ): void;\n\n  detach(): void;\n}\n\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nexport const _VIEW_REPEATER_STRATEGY = new InjectionToken<\n  _ViewRepeater<unknown, unknown, _ViewRepeaterItemContext<unknown>>\n>('_ViewRepeater');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {coerceElement} from '../coercion';\nimport {Platform} from '../platform';\nimport {ElementRef, Injectable, NgZone, OnDestroy, RendererFactory2, inject} from '@angular/core';\nimport {of as observableOf, Subject, Subscription, Observable, Observer} from 'rxjs';\nimport {auditTime, filter} from 'rxjs/operators';\nimport type {CdkScrollable} from './scrollable';\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const DEFAULT_SCROLL_TIME = 20;\n\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollDispatcher implements OnDestroy {\n  private _ngZone = inject(NgZone);\n  private _platform = inject(Platform);\n  private _renderer = inject(RendererFactory2).createRenderer(null, null);\n  private _cleanupGlobalListener: (() => void) | undefined;\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n  private readonly _scrolled = new Subject<CdkScrollable | void>();\n\n  /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n  private _scrolledCount = 0;\n\n  /**\n   * Map of all the scrollable references that are registered with the service and their\n   * scroll event subscriptions.\n   */\n  scrollContainers: Map<CdkScrollable, Subscription> = new Map();\n\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param scrollable Scrollable instance to be registered.\n   */\n  register(scrollable: CdkScrollable): void {\n    if (!this.scrollContainers.has(scrollable)) {\n      this.scrollContainers.set(\n        scrollable,\n        scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)),\n      );\n    }\n  }\n\n  /**\n   * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n   * @param scrollable Scrollable instance to be deregistered.\n   */\n  deregister(scrollable: CdkScrollable): void {\n    const scrollableReference = this.scrollContainers.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollContainers.delete(scrollable);\n    }\n  }\n\n  /**\n   * Returns an observable that emits an event whenever any of the registered Scrollable\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n   * to override the default \"throttle\" time.\n   *\n   * **Note:** in order to avoid hitting change detection for every scroll event,\n   * all of the events emitted from this stream will be run outside the Angular zone.\n   * If you need to update any data bindings as a result of a scroll event, you have\n   * to run the callback using `NgZone.run`.\n   */\n  scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable | void> {\n    if (!this._platform.isBrowser) {\n      return observableOf<void>();\n    }\n\n    return new Observable((observer: Observer<CdkScrollable | void>) => {\n      if (!this._cleanupGlobalListener) {\n        this._cleanupGlobalListener = this._ngZone.runOutsideAngular(() =>\n          this._renderer.listen('document', 'scroll', () => this._scrolled.next()),\n        );\n      }\n\n      // In the case of a 0ms delay, use an observable without auditTime\n      // since it does add a perceptible delay in processing overhead.\n      const subscription =\n        auditTimeInMs > 0\n          ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n          : this._scrolled.subscribe(observer);\n\n      this._scrolledCount++;\n\n      return () => {\n        subscription.unsubscribe();\n        this._scrolledCount--;\n\n        if (!this._scrolledCount) {\n          this._cleanupGlobalListener?.();\n          this._cleanupGlobalListener = undefined;\n        }\n      };\n    });\n  }\n\n  ngOnDestroy() {\n    this._cleanupGlobalListener?.();\n    this._cleanupGlobalListener = undefined;\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\n    this._scrolled.complete();\n  }\n\n  /**\n   * Returns an observable that emits whenever any of the\n   * scrollable ancestors of an element are scrolled.\n   * @param elementOrElementRef Element whose ancestors to listen for.\n   * @param auditTimeInMs Time to throttle the scroll events.\n   */\n  ancestorScrolled(\n    elementOrElementRef: ElementRef | HTMLElement,\n    auditTimeInMs?: number,\n  ): Observable<CdkScrollable | void> {\n    const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n\n    return this.scrolled(auditTimeInMs).pipe(\n      filter(target => !target || ancestors.indexOf(target) > -1),\n    );\n  }\n\n  /** Returns all registered Scrollables that contain the provided element. */\n  getAncestorScrollContainers(elementOrElementRef: ElementRef | HTMLElement): CdkScrollable[] {\n    const scrollingContainers: CdkScrollable[] = [];\n\n    this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\n      if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n\n  /** Returns true if the element is contained within the provided Scrollable. */\n  private _scrollableContainsElement(\n    scrollable: CdkScrollable,\n    elementOrElementRef: ElementRef | HTMLElement,\n  ): boolean {\n    let element: HTMLElement | null = coerceElement(elementOrElementRef);\n    let scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) {\n        return true;\n      }\n    } while ((element = element!.parentElement));\n\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directionality} from '../bidi';\nimport {getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior} from '../platform';\nimport {Directive, ElementRef, NgZone, OnDestroy, OnInit, Renderer2, inject} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\nexport type _Without<T> = {[P in keyof T]?: never};\nexport type _XOR<T, U> = (_Without<T> & U) | (_Without<U> & T);\nexport type _Top = {top?: number};\nexport type _Bottom = {bottom?: number};\nexport type _Left = {left?: number};\nexport type _Right = {right?: number};\nexport type _Start = {start?: number};\nexport type _End = {end?: number};\nexport type _XAxis = _XOR<_XOR<_Left, _Right>, _XOR<_Start, _End>>;\nexport type _YAxis = _XOR<_Top, _Bottom>;\n\n/**\n * An extended version of ScrollToOptions that allows expressing scroll offsets relative to the\n * top, bottom, left, right, start, or end of the viewport rather than just the top and left.\n * Please note: the top and bottom properties are mutually exclusive, as are the left, right,\n * start, and end properties.\n */\nexport type ExtendedScrollToOptions = _XAxis & _YAxis & ScrollOptions;\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n@Directive({\n  selector: '[cdk-scrollable], [cdkScrollable]',\n})\nexport class CdkScrollable implements OnInit, OnDestroy {\n  protected elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  protected scrollDispatcher = inject(ScrollDispatcher);\n  protected ngZone = inject(NgZone);\n  protected dir? = inject(Directionality, {optional: true});\n  protected _scrollElement: EventTarget = this.elementRef.nativeElement;\n  protected readonly _destroyed = new Subject<void>();\n  private _renderer = inject(Renderer2);\n  private _cleanupScroll: (() => void) | undefined;\n  private _elementScrolled = new Subject<Event>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    this._cleanupScroll = this.ngZone.runOutsideAngular(() =>\n      this._renderer.listen(this._scrollElement, 'scroll', event =>\n        this._elementScrolled.next(event),\n      ),\n    );\n    this.scrollDispatcher.register(this);\n  }\n\n  ngOnDestroy() {\n    this._cleanupScroll?.();\n    this._elementScrolled.complete();\n    this.scrollDispatcher.deregister(this);\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Returns observable that emits when a scroll event is fired on the host element. */\n  elementScrolled(): Observable<Event> {\n    return this._elementScrolled;\n  }\n\n  /** Gets the ElementRef for the viewport. */\n  getElementRef(): ElementRef<HTMLElement> {\n    return this.elementRef;\n  }\n\n  /**\n   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param options specified the offsets to scroll to.\n   */\n  scrollTo(options: ExtendedScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n    const isRtl = this.dir && this.dir.value == 'rtl';\n\n    // Rewrite start & end offsets as right or left offsets.\n    if (options.left == null) {\n      options.left = isRtl ? options.end : options.start;\n    }\n\n    if (options.right == null) {\n      options.right = isRtl ? options.start : options.end;\n    }\n\n    // Rewrite the bottom offset as a top offset.\n    if (options.bottom != null) {\n      (options as _Without<_Bottom> & _Top).top =\n        el.scrollHeight - el.clientHeight - options.bottom;\n    }\n\n    // Rewrite the right offset as a left offset.\n    if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n      if (options.left != null) {\n        (options as _Without<_Left> & _Right).right =\n          el.scrollWidth - el.clientWidth - options.left;\n      }\n\n      if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n        options.left = options.right;\n      } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n        options.left = options.right ? -options.right : options.right;\n      }\n    } else {\n      if (options.right != null) {\n        (options as _Without<_Right> & _Left).left =\n          el.scrollWidth - el.clientWidth - options.right;\n      }\n    }\n\n    this._applyScrollToOptions(options);\n  }\n\n  private _applyScrollToOptions(options: ScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n\n    if (supportsScrollBehavior()) {\n      el.scrollTo(options);\n    } else {\n      if (options.top != null) {\n        el.scrollTop = options.top;\n      }\n      if (options.left != null) {\n        el.scrollLeft = options.left;\n      }\n    }\n  }\n\n  /**\n   * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n   * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n   * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param from The edge to measure from.\n   */\n  measureScrollOffset(from: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n    const LEFT = 'left';\n    const RIGHT = 'right';\n    const el = this.elementRef.nativeElement;\n    if (from == 'top') {\n      return el.scrollTop;\n    }\n    if (from == 'bottom') {\n      return el.scrollHeight - el.clientHeight - el.scrollTop;\n    }\n\n    // Rewrite start & end as left or right offsets.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    if (from == 'start') {\n      from = isRtl ? RIGHT : LEFT;\n    } else if (from == 'end') {\n      from = isRtl ? LEFT : RIGHT;\n    }\n\n    if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n      // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      } else {\n        return el.scrollLeft;\n      }\n    } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n      // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft + el.scrollWidth - el.clientWidth;\n      } else {\n        return -el.scrollLeft;\n      }\n    } else {\n      // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n      // (scrollWidth - clientWidth) when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft;\n      } else {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Platform} from '../platform';\nimport {Injectable, NgZone, OnDestroy, RendererFactory2, inject} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {auditTime} from 'rxjs/operators';\nimport {DOCUMENT} from '@angular/common';\n\n/** Time in ms to throttle the resize events by default. */\nexport const DEFAULT_RESIZE_TIME = 20;\n\n/** Object that holds the scroll position of the viewport in each direction. */\nexport interface ViewportScrollPosition {\n  top: number;\n  left: number;\n}\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class ViewportRuler implements OnDestroy {\n  private _platform = inject(Platform);\n  private _listeners: (() => void)[] | undefined;\n\n  /** Cached viewport dimensions. */\n  private _viewportSize: {width: number; height: number} | null;\n\n  /** Stream of viewport change events. */\n  private readonly _change = new Subject<Event>();\n\n  /** Used to reference correct document/window */\n  protected _document = inject(DOCUMENT, {optional: true})!;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const ngZone = inject(NgZone);\n    const renderer = inject(RendererFactory2).createRenderer(null, null);\n\n    ngZone.runOutsideAngular(() => {\n      if (this._platform.isBrowser) {\n        const changeListener = (event: Event) => this._change.next(event);\n        this._listeners = [\n          renderer.listen('window', 'resize', changeListener),\n          renderer.listen('window', 'orientationchange', changeListener),\n        ];\n      }\n\n      // Clear the cached position so that the viewport is re-measured next time it is required.\n      // We don't need to keep track of the subscription, because it is completed on destroy.\n      this.change().subscribe(() => (this._viewportSize = null));\n    });\n  }\n\n  ngOnDestroy() {\n    this._listeners?.forEach(cleanup => cleanup());\n    this._change.complete();\n  }\n\n  /** Returns the viewport's width and height. */\n  getViewportSize(): Readonly<{width: number; height: number}> {\n    if (!this._viewportSize) {\n      this._updateViewportSize();\n    }\n\n    const output = {width: this._viewportSize!.width, height: this._viewportSize!.height};\n\n    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n    if (!this._platform.isBrowser) {\n      this._viewportSize = null!;\n    }\n\n    return output;\n  }\n\n  /** Gets a DOMRect for the viewport's bounds. */\n  getViewportRect() {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const scrollPosition = this.getViewportScrollPosition();\n    const {width, height} = this.getViewportSize();\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n\n  /** Gets the (top, left) scroll position of the viewport. */\n  getViewportScrollPosition(): ViewportScrollPosition {\n    // While we can get a reference to the fake document\n    // during SSR, it doesn't have getBoundingClientRect.\n    if (!this._platform.isBrowser) {\n      return {top: 0, left: 0};\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const document = this._document;\n    const window = this._getWindow();\n    const documentElement = document.documentElement!;\n    const documentRect = documentElement.getBoundingClientRect();\n\n    const top =\n      -documentRect.top ||\n      document.body.scrollTop ||\n      window.scrollY ||\n      documentElement.scrollTop ||\n      0;\n\n    const left =\n      -documentRect.left ||\n      document.body.scrollLeft ||\n      window.scrollX ||\n      documentElement.scrollLeft ||\n      0;\n\n    return {top, left};\n  }\n\n  /**\n   * Returns a stream that emits whenever the size of the viewport changes.\n   * This stream emits outside of the Angular zone.\n   * @param throttleTime Time in milliseconds to throttle the stream.\n   */\n  change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    return this._document.defaultView || window;\n  }\n\n  /** Updates the cached viewport size. */\n  private _updateViewportSize() {\n    const window = this._getWindow();\n    this._viewportSize = this._platform.isBrowser\n      ? {width: window.innerWidth, height: window.innerHeight}\n      : {width: 0, height: 0};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {BidiModule} from '../bidi';\nimport {NgModule} from '@angular/core';\nimport {CdkFixedSizeVirtualScroll} from './fixed-size-virtual-scroll';\nimport {CdkScrollable} from './scrollable';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\nimport {CdkVirtualScrollableElement} from './virtual-scrollable-element';\nimport {CdkVirtualScrollableWindow} from './virtual-scrollable-window';\n\n@NgModule({\n  exports: [CdkScrollable],\n  imports: [CdkScrollable],\n})\nexport class CdkScrollableModule {}\n\n/**\n * @docs-primary-export\n */\n@NgModule({\n  imports: [\n    BidiModule,\n    CdkScrollableModule,\n    CdkVirtualScrollViewport,\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollableWindow,\n    CdkVirtualScrollableElement,\n  ],\n  exports: [\n    BidiModule,\n    CdkScrollableModule,\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n    CdkVirtualScrollableWindow,\n    CdkVirtualScrollableElement,\n  ],\n})\nexport class ScrollingModule {}\n\n// Re-export needed by the Angular compiler.\n// See: https://github.com/angular/components/issues/30663.\n// Note: These exports need to be stable and shouldn't be renamed unnecessarily because\n// consuming libraries might have references to them in their own partial compilation output.\nexport {Dir as ɵɵDir} from '../bidi';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '../../scrolling';\nimport {coerceCssPixelValue} from '../../coercion';\nimport {supportsScrollBehavior} from '../../platform';\n\nconst scrollBehaviorSupported = supportsScrollBehavior();\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = {top: '', left: ''};\n  private _previousScrollPosition: {top: number; left: number};\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    document: any,\n  ) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() {}\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement!;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement!;\n      const body = this._document.body!;\n      const htmlStyle = html.style;\n      const bodyStyle = body.style;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n\n      this._isEnabled = false;\n\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n      // because it can throw off feature detections in `supportsScrollBehavior` which\n      // checks for `'scrollBehavior' in documentElement.style`.\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n      }\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n        bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n      }\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement!;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {NgZone} from '@angular/core';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {Subscription} from 'rxjs';\nimport {ScrollDispatcher, ViewportRuler} from '../../scrolling';\nimport {filter} from 'rxjs/operators';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface CloseScrollStrategyConfig {\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\n  threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription | null = null;\n  private _overlayRef: OverlayRef;\n  private _initialScrollPosition: number;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _config?: CloseScrollStrategyConfig,\n  ) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0).pipe(\n      filter(scrollable => {\n        return (\n          !scrollable ||\n          !this._overlayRef.overlayElement.contains(scrollable.getElementRef().nativeElement)\n        );\n      }),\n    );\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n\n  /** Detaches the overlay ref and disables the scroll strategy. */\n  private _detach = () => {\n    this.disable();\n\n    if (this._overlayRef.hasAttached()) {\n      this._ngZone.run(() => this._overlayRef.detach());\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements ScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() {}\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() {}\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/** Equivalent of `DOMRect` without some of the properties we don't care about. */\ntype Dimensions = Omit<DOMRect, 'x' | 'y' | 'toJSON'>;\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: Dimensions, scrollContainers: Dimensions[]) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: Dimensions, scrollContainers: Dimensions[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {ScrollDispatcher, ViewportRuler} from '../../scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription | null = null;\n  private _overlayRef: OverlayRef;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig,\n  ) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '../../scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Injectable, NgZone, inject} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _scrollDispatcher = inject(ScrollDispatcher);\n  private _viewportRuler = inject(ViewportRuler);\n  private _ngZone = inject(NgZone);\n\n  private _document = inject(DOCUMENT);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) =>\n    new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) =>\n    new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction, Directionality} from '../bidi';\nimport {ScrollStrategy, NoopScrollStrategy} from './scroll/index';\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /**\n   * Direction of the text in the overlay panel. If a `Directionality` instance\n   * is passed in, the overlay will handle changes to its value automatically.\n   */\n  direction?: Direction | Directionality;\n\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  disposeOnNavigation?: boolean = false;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n      const configKeys = Object.keys(config) as Iterable<keyof OverlayConfig> &\n        (keyof OverlayConfig)[];\n      for (const key of configKeys) {\n        if (config[key] !== undefined) {\n          // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n          // as \"I don't know *which* key this is, so the only valid value is the intersection\n          // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n          // is not smart enough to see that the right-hand-side is actually an access of the same\n          // exact type with the same exact key, meaning that the value type must be identical.\n          // So we use `any` to work around this.\n          this[key] = config[key] as any;\n        }\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    /** Offset along the X axis. */\n    public offsetX?: number,\n    /** Offset along the Y axis. */\n    public offsetY?: number,\n    /** Class(es) to be applied to the panel while this position is active. */\n    public panelClass?: string | string[],\n  ) {\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n    /** The position used as a result of this change. */\n    public connectionPair: ConnectionPositionPair,\n    /** @docs-private */\n    public scrollableViewProperties: ScrollingVisibility,\n  ) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(\n      `ConnectedPosition: Invalid ${property} \"${value}\". ` +\n        `Expected \"top\", \"bottom\" or \"center\".`,\n    );\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(\n      `ConnectedPosition: Invalid ${property} \"${value}\". ` +\n        `Expected \"start\", \"end\" or \"center\".`,\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Injectable, OnDestroy, inject} from '@angular/core';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport abstract class BaseOverlayDispatcher implements OnDestroy {\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayRef[] = [];\n\n  protected _document = inject(DOCUMENT);\n  protected _isAttached: boolean;\n\n  constructor(...args: unknown[]);\n\n  constructor() {}\n\n  ngOnDestroy(): void {\n    this.detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayRef): void {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayRef): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this.detach();\n    }\n  }\n\n  /** Detaches the global event listener. */\n  protected abstract detach(): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, NgZone, RendererFactory2, inject} from '@angular/core';\nimport {BaseOverlayDispatcher} from './base-overlay-dispatcher';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n  private _ngZone = inject(NgZone);\n  private _renderer = inject(RendererFactory2).createRenderer(null, null);\n  private _cleanupKeydown: (() => void) | undefined;\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  override add(overlayRef: OverlayRef): void {\n    super.add(overlayRef);\n\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._ngZone.runOutsideAngular(() => {\n        this._cleanupKeydown = this._renderer.listen('body', 'keydown', this._keydownListener);\n      });\n\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  protected detach() {\n    if (this._isAttached) {\n      this._cleanupKeydown?.();\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    const overlays = this._attachedOverlays;\n\n    for (let i = overlays.length - 1; i > -1; i--) {\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n      // We want to target the most recent overlay, rather than trying to match where the event came\n      // from, because some components might open an overlay, but keep focus on a trigger element\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n      // because we don't want overlays that don't handle keyboard events to block the ones below\n      // them that do.\n      if (overlays[i]._keydownEvents.observers.length > 0) {\n        this._ngZone.run(() => overlays[i]._keydownEvents.next(event));\n        break;\n      }\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, NgZone, RendererFactory2, inject} from '@angular/core';\nimport {Platform, _bindEventWithOptions, _getEventTarget} from '../../platform';\nimport {BaseOverlayDispatcher} from './base-overlay-dispatcher';\nimport type {OverlayRef} from '../overlay-ref';\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n  private _platform = inject(Platform);\n  private _ngZone = inject(NgZone);\n  private _renderer = inject(RendererFactory2).createRenderer(null, null);\n\n  private _cursorOriginalValue: string;\n  private _cursorStyleIsSet = false;\n  private _pointerDownEventTarget: HTMLElement | null;\n  private _cleanups: (() => void)[] | undefined;\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  override add(overlayRef: OverlayRef): void {\n    super.add(overlayRef);\n\n    // Safari on iOS does not generate click events for non-interactive\n    // elements. However, we want to receive a click for any element outside\n    // the overlay. We can force a \"clickable\" state by setting\n    // `cursor: pointer` on the document body. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n    // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n    if (!this._isAttached) {\n      const body = this._document.body;\n      const eventOptions = {capture: true};\n\n      this._cleanups = this._ngZone.runOutsideAngular(() => [\n        _bindEventWithOptions(\n          this._renderer,\n          body,\n          'pointerdown',\n          this._pointerDownListener,\n          eventOptions,\n        ),\n        _bindEventWithOptions(this._renderer, body, 'click', this._clickListener, eventOptions),\n        _bindEventWithOptions(this._renderer, body, 'auxclick', this._clickListener, eventOptions),\n        _bindEventWithOptions(\n          this._renderer,\n          body,\n          'contextmenu',\n          this._clickListener,\n          eventOptions,\n        ),\n      ]);\n\n      // click event is not fired on iOS. To make element \"clickable\" we are\n      // setting the cursor to pointer\n      if (this._platform.IOS && !this._cursorStyleIsSet) {\n        this._cursorOriginalValue = body.style.cursor;\n        body.style.cursor = 'pointer';\n        this._cursorStyleIsSet = true;\n      }\n\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  protected detach() {\n    if (this._isAttached) {\n      this._cleanups?.forEach(cleanup => cleanup());\n      this._cleanups = undefined;\n      if (this._platform.IOS && this._cursorStyleIsSet) {\n        this._document.body.style.cursor = this._cursorOriginalValue;\n        this._cursorStyleIsSet = false;\n      }\n      this._isAttached = false;\n    }\n  }\n\n  /** Store pointerdown event target to track origin of click. */\n  private _pointerDownListener = (event: PointerEvent) => {\n    this._pointerDownEventTarget = _getEventTarget<HTMLElement>(event);\n  };\n\n  /** Click event listener that will be attached to the body propagate phase. */\n  private _clickListener = (event: MouseEvent) => {\n    const target = _getEventTarget<HTMLElement>(event);\n    // In case of a click event, we want to check the origin of the click\n    // (e.g. in case where a user starts a click inside the overlay and\n    // releases the click outside of it).\n    // This is done by using the event target of the preceding pointerdown event.\n    // Every click event caused by a pointer device has a preceding pointerdown\n    // event, unless the click was programmatically triggered (e.g. in a unit test).\n    const origin =\n      event.type === 'click' && this._pointerDownEventTarget\n        ? this._pointerDownEventTarget\n        : target;\n    // Reset the stored pointerdown event target, to avoid having it interfere\n    // in subsequent events.\n    this._pointerDownEventTarget = null;\n\n    // We copy the array because the original may be modified asynchronously if the\n    // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n    // the for loop.\n    const overlays = this._attachedOverlays.slice();\n\n    // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n    // We want to target all overlays for which the click could be considered as outside click.\n    // As soon as we reach an overlay for which the click is not outside click we break off\n    // the loop.\n    for (let i = overlays.length - 1; i > -1; i--) {\n      const overlayRef = overlays[i];\n      if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n        continue;\n      }\n\n      // If it's a click inside the overlay, just break - we should do nothing\n      // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n      // and proceed with the next overlay\n      if (\n        containsPierceShadowDom(overlayRef.overlayElement, target) ||\n        containsPierceShadowDom(overlayRef.overlayElement, origin)\n      ) {\n        break;\n      }\n\n      const outsidePointerEvents = overlayRef._outsidePointerEvents;\n      /** @breaking-change 14.0.0 _ngZone will be required. */\n      if (this._ngZone) {\n        this._ngZone.run(() => outsidePointerEvents.next(event));\n      } else {\n        outsidePointerEvents.next(event);\n      }\n    }\n  };\n}\n\n/** Version of `Element.contains` that transcends shadow DOM boundaries. */\nfunction containsPierceShadowDom(parent: HTMLElement, child: HTMLElement | null): boolean {\n  const supportsShadowRoot = typeof ShadowRoot !== 'undefined' && ShadowRoot;\n  let current: Node | null = child;\n\n  while (current) {\n    if (current === parent) {\n      return true;\n    }\n\n    current =\n      supportsShadowRoot && current instanceof ShadowRoot ? current.host : current.parentNode;\n  }\n\n  return false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Injectable,\n  OnDestroy,\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  inject,\n} from '@angular/core';\nimport {_CdkPrivateStyleLoader} from '../private';\nimport {Platform, _isTestEnvironment} from '../platform';\n\n@Component({\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  styleUrl: 'overlay-structure.css',\n  host: {'cdk-overlay-style-loader': ''},\n})\nexport class _CdkOverlayStyleLoader {}\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _platform = inject(Platform);\n\n  protected _containerElement: HTMLElement;\n  protected _document = inject(DOCUMENT);\n  protected _styleLoader = inject(_CdkPrivateStyleLoader);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnDestroy() {\n    this._containerElement?.remove();\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    this._loadStyles();\n\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const containerClass = 'cdk-overlay-container';\n\n    // TODO(crisbeto): remove the testing check once we have an overlay testing\n    // module or Angular starts tearing down the testing `NgModule`. See:\n    // https://github.com/angular/angular/issues/18831\n    if (this._platform.isBrowser || _isTestEnvironment()) {\n      const oppositePlatformContainers = this._document.querySelectorAll(\n        `.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`,\n      );\n\n      // Remove any old containers from the opposite platform.\n      // This can happen when transitioning from the server to the client.\n      for (let i = 0; i < oppositePlatformContainers.length; i++) {\n        oppositePlatformContainers[i].remove();\n      }\n    }\n\n    const container = this._document.createElement('div');\n    container.classList.add(containerClass);\n\n    // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n    // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n    // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n    // To mitigate the problem we made it so that only containers from a different platform are\n    // cleared, but the side-effect was that people started depending on the overly-aggressive\n    // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n    // module which does the cleanup, we try to detect that we're in a test environment and we\n    // always clear the container. See #17006.\n    // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n    if (_isTestEnvironment()) {\n      container.setAttribute('platform', 'test');\n    } else if (!this._platform.isBrowser) {\n      container.setAttribute('platform', 'server');\n    }\n\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n\n  /** Loads the structural styles necessary for the overlay to work. */\n  protected _loadStyles(): void {\n    this._styleLoader.load(_CdkOverlayStyleLoader);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgZone, Renderer2} from '@angular/core';\n\n/** Encapsulates the logic for attaching and detaching a backdrop. */\nexport class BackdropRef {\n  readonly element: HTMLElement;\n  private _cleanupClick: (() => void) | undefined;\n  private _cleanupTransitionEnd: (() => void) | undefined;\n  private _fallbackTimeout: ReturnType<typeof setTimeout> | undefined;\n\n  constructor(\n    document: Document,\n    private _renderer: Renderer2,\n    private _ngZone: NgZone,\n    onClick: (event: MouseEvent) => void,\n  ) {\n    this.element = document.createElement('div');\n    this.element.classList.add('cdk-overlay-backdrop');\n    this._cleanupClick = _renderer.listen(this.element, 'click', onClick);\n  }\n\n  detach() {\n    this._ngZone.runOutsideAngular(() => {\n      const element = this.element;\n      clearTimeout(this._fallbackTimeout);\n      this._cleanupTransitionEnd?.();\n      this._cleanupTransitionEnd = this._renderer.listen(element, 'transitionend', this.dispose);\n      this._fallbackTimeout = setTimeout(this.dispose, 500);\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      element.style.pointerEvents = 'none';\n      element.classList.remove('cdk-overlay-backdrop-showing');\n    });\n  }\n\n  dispose = () => {\n    clearTimeout(this._fallbackTimeout);\n    this._cleanupClick?.();\n    this._cleanupTransitionEnd?.();\n    this._cleanupClick = this._cleanupTransitionEnd = this._fallbackTimeout = undefined;\n    this.element.remove();\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Direction, Directionality} from '../bidi';\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '../portal';\nimport {\n  AfterRenderRef,\n  ComponentRef,\n  EmbeddedViewRef,\n  EnvironmentInjector,\n  NgZone,\n  Renderer2,\n  afterNextRender,\n  afterRender,\n  untracked,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, merge, SubscriptionLike, Subscription} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {OverlayKeyboardDispatcher} from './dispatchers/overlay-keyboard-dispatcher';\nimport {OverlayOutsideClickDispatcher} from './dispatchers/overlay-outside-click-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {coerceCssPixelValue, coerceArray} from '../coercion';\nimport {PositionStrategy} from './position/position-strategy';\nimport {ScrollStrategy} from './scroll';\nimport {BackdropRef} from './backdrop-ref';\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalOutlet {\n  private readonly _backdropClick = new Subject<MouseEvent>();\n  private readonly _attachments = new Subject<void>();\n  private readonly _detachments = new Subject<void>();\n  private _positionStrategy: PositionStrategy | undefined;\n  private _scrollStrategy: ScrollStrategy | undefined;\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n  private _backdropRef: BackdropRef | null = null;\n\n  /**\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\n   * the `_host` to its original position in the DOM when it gets re-attached.\n   */\n  private _previousHostParent: HTMLElement;\n\n  /** Stream of keydown events dispatched to this overlay. */\n  readonly _keydownEvents = new Subject<KeyboardEvent>();\n\n  /** Stream of mouse outside events dispatched to this overlay. */\n  readonly _outsidePointerEvents = new Subject<MouseEvent>();\n\n  private _renders = new Subject<void>();\n\n  private _afterRenderRef: AfterRenderRef;\n\n  /** Reference to the currently-running `afterNextRender` call. */\n  private _afterNextRenderRef: AfterRenderRef | undefined;\n\n  constructor(\n    private _portalOutlet: PortalOutlet,\n    private _host: HTMLElement,\n    private _pane: HTMLElement,\n    private _config: ImmutableObject<OverlayConfig>,\n    private _ngZone: NgZone,\n    private _keyboardDispatcher: OverlayKeyboardDispatcher,\n    private _document: Document,\n    private _location: Location,\n    private _outsideClickDispatcher: OverlayOutsideClickDispatcher,\n    private _animationsDisabled = false,\n    private _injector: EnvironmentInjector,\n    private _renderer: Renderer2,\n  ) {\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n      this._scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n\n    // Users could open the overlay from an `effect`, in which case we need to\n    // run the `afterRender` as `untracked`. We don't recommend that users do\n    // this, but we also don't want to break users who are doing it.\n    this._afterRenderRef = untracked(() =>\n      afterRender(\n        () => {\n          this._renders.next();\n        },\n        {injector: this._injector},\n      ),\n    );\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement(): HTMLElement {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement(): HTMLElement | null {\n    return this._backdropRef?.element || null;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement(): HTMLElement {\n    return this._host;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal: Portal<any>): any {\n    // Insert the host into the DOM before attaching the portal, otherwise\n    // the animations module will skip animations on repeat attachments.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    const attachResult = this._portalOutlet.attach(portal);\n\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.enable();\n    }\n\n    // We need to clean this up ourselves, because we're passing in an\n    // `EnvironmentInjector` below which won't ever be destroyed.\n    // Otherwise it causes some callbacks to be retained (see #29696).\n    this._afterNextRenderRef?.destroy();\n\n    // Update the position once the overlay is fully rendered before attempting to position it,\n    // as the position may depend on the size of the rendered content.\n    this._afterNextRenderRef = afterNextRender(\n      () => {\n        // The overlay could've been detached before the callback executed.\n        if (this.hasAttached()) {\n          this.updatePosition();\n        }\n      },\n      {injector: this._injector},\n    );\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n\n    if (this._config.disposeOnNavigation) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n\n    this._outsideClickDispatcher.add(this);\n\n    // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n    // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n    // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n    if (typeof attachResult?.onDestroy === 'function') {\n      // In most cases we control the portal and we know when it is being detached so that\n      // we can finish the disposal process. The exception is if the user passes in a custom\n      // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n      // `detach` here instead of `dispose`, because we don't know if the user intends to\n      // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n      attachResult.onDestroy(() => {\n        if (this.hasAttached()) {\n          // We have to delay the `detach` call, because detaching immediately prevents\n          // other destroy hooks from running. This is likely a framework bug similar to\n          // https://github.com/angular/angular/issues/46119\n          this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n        }\n      });\n    }\n\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach(): any {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n\n    // Keeping the host element in the DOM can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n    this._detachContentWhenEmpty();\n    this._locationChanges.unsubscribe();\n    this._outsideClickDispatcher.remove(this);\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose(): void {\n    const isAttached = this.hasAttached();\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._disposeScrollStrategy();\n    this._backdropRef?.dispose();\n    this._locationChanges.unsubscribe();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n    this._outsidePointerEvents.complete();\n    this._outsideClickDispatcher.remove(this);\n    this._host?.remove();\n    this._afterNextRenderRef?.destroy();\n    this._previousHostParent = this._pane = this._host = this._backdropRef = null!;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n    this._afterRenderRef.destroy();\n    this._renders.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached(): boolean {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._backdropClick;\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments(): Observable<void> {\n    return this._attachments;\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments(): Observable<void> {\n    return this._detachments;\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._keydownEvents;\n  }\n\n  /** Gets an observable of pointer events targeted outside this overlay. */\n  outsidePointerEvents(): Observable<MouseEvent> {\n    return this._outsidePointerEvents;\n  }\n\n  /** Gets the current overlay configuration, which is immutable. */\n  getConfig(): OverlayConfig {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition(): void {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n\n  /** Switches to a new position strategy and updates the overlay position. */\n  updatePositionStrategy(strategy: PositionStrategy): void {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._positionStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig: OverlaySizeConfig): void {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir: Direction | Directionality): void {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, true);\n    }\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, false);\n    }\n  }\n\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n  getDirection(): Direction {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n\n  /** Switches to a new scroll strategy. */\n  updateScrollStrategy(strategy: ScrollStrategy): void {\n    if (strategy === this._scrollStrategy) {\n      return;\n    }\n\n    this._disposeScrollStrategy();\n    this._scrollStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      strategy.enable();\n    }\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  private _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  private _updateElementSize() {\n    if (!this._pane) {\n      return;\n    }\n\n    const style = this._pane.style;\n\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  private _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n\n    this._backdropRef?.dispose();\n    this._backdropRef = new BackdropRef(this._document, this._renderer, this._ngZone, event => {\n      this._backdropClick.next(event);\n    });\n\n    if (this._animationsDisabled) {\n      this._backdropRef.element.classList.add('cdk-overlay-backdrop-noop-animation');\n    }\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropRef.element, this._config.backdropClass, true);\n    }\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement!.insertBefore(this._backdropRef.element, this._host);\n\n    // Add class to fade-in the backdrop after one frame.\n    if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._backdropRef?.element.classList.add(showingClass));\n      });\n    } else {\n      this._backdropRef.element.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  private _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode!.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop(): void {\n    if (this._animationsDisabled) {\n      this._backdropRef?.dispose();\n      this._backdropRef = null;\n    } else {\n      this._backdropRef?.detach();\n    }\n  }\n\n  /** Toggles a single CSS class or an array of classes on an element. */\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n    const classes = coerceArray(cssClasses || []).filter(c => !!c);\n\n    if (classes.length) {\n      isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n    }\n  }\n\n  /** Detaches the overlay content next time the zone stabilizes. */\n  private _detachContentWhenEmpty() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._renders\n        .pipe(takeUntil(merge(this._attachments, this._detachments)))\n        .subscribe(() => {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!this._pane || !this._host || this._pane.children.length === 0) {\n            if (this._pane && this._config.panelClass) {\n              this._toggleClasses(this._pane, this._config.panelClass, false);\n            }\n\n            if (this._host && this._host.parentElement) {\n              this._previousHostParent = this._host.parentElement;\n              this._host.remove();\n            }\n\n            subscription.unsubscribe();\n          }\n        });\n    });\n  }\n\n  /** Disposes of a scroll strategy. */\n  private _disposeScrollStrategy() {\n    const scrollStrategy = this._scrollStrategy;\n    scrollStrategy?.disable();\n    scrollStrategy?.detach?.();\n  }\n}\n\n/** Size properties for an overlay. */\nexport interface OverlaySizeConfig {\n  width?: number | string;\n  height?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler, CdkScrollable, ViewportScrollPosition} from '../../scrolling';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  ScrollingVisibility,\n  validateHorizontalPosition,\n  validateVerticalPosition,\n} from './connected-position';\nimport {Observable, Subscription, Subject} from 'rxjs';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {coerceCssPixelValue, coerceArray} from '../../coercion';\nimport {Platform} from '../../platform';\nimport {OverlayContainer} from '../overlay-container';\nimport {OverlayRef} from '../overlay-ref';\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n\n/** Possible values that can be set as the origin of a FlexibleConnectedPositionStrategy. */\nexport type FlexibleConnectedPositionStrategyOrigin =\n  | ElementRef\n  | Element\n  | (Point & {\n      width?: number;\n      height?: number;\n    });\n\n/** Equivalent of `DOMRect` without some of the properties we don't care about. */\ntype Dimensions = Omit<DOMRect, 'x' | 'y' | 'toJSON'>;\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayRef;\n\n  /** Whether we're performing the very first positioning of the overlay. */\n  private _isInitialRender: boolean;\n\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n  private _lastBoundingBoxSize = {width: 0, height: 0};\n\n  /** Whether the overlay was pushed in a previous positioning. */\n  private _isPushed = false;\n\n  /** Whether the overlay can be pushed on-screen on the initial open. */\n  private _canPush = true;\n\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\n  private _growAfterOpen = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  private _hasFlexibleDimensions = true;\n\n  /** Whether the overlay position is locked. */\n  private _positionLocked = false;\n\n  /** Cached origin dimensions */\n  private _originRect: Dimensions;\n\n  /** Cached overlay dimensions */\n  private _overlayRect: Dimensions;\n\n  /** Cached viewport dimensions */\n  private _viewportRect: Dimensions;\n\n  /** Cached container dimensions */\n  private _containerRect: Dimensions;\n\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n  private _viewportMargin = 0;\n\n  /** The Scrollable containers used to check scrollable view properties on position change. */\n  private _scrollables: CdkScrollable[] = [];\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** The origin element against which the overlay will be positioned. */\n  _origin: FlexibleConnectedPositionStrategyOrigin;\n\n  /** The overlay pane element. */\n  private _pane: HTMLElement;\n\n  /** Whether the strategy has been disposed of already. */\n  private _isDisposed: boolean;\n\n  /**\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n   * within the viewport.\n   */\n  private _boundingBox: HTMLElement | null;\n\n  /** The last position to have been calculated as the best fit position. */\n  private _lastPosition: ConnectedPosition | null;\n\n  /** The last calculated scroll visibility. Only tracked  */\n  private _lastScrollVisibility: ScrollingVisibility | null;\n\n  /** Subject that emits whenever the position changes. */\n  private readonly _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n  /** Subscription to viewport size changes. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /** Default offset for the overlay along the x axis. */\n  private _offsetX = 0;\n\n  /** Default offset for the overlay along the y axis. */\n  private _offsetY = 0;\n\n  /** Selector to be used when finding the elements on which to set the transform origin. */\n  private _transformOriginSelector: string;\n\n  /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n  private _appliedPanelClasses: string[] = [];\n\n  /** Amount by which the overlay was pushed in each axis during the last time it was positioned. */\n  private _previousPushAmount: {x: number; y: number} | null;\n\n  /** Observable sequence of position changes. */\n  positionChanges: Observable<ConnectedOverlayPositionChange> = this._positionChanges;\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  constructor(\n    connectedTo: FlexibleConnectedPositionStrategyOrigin,\n    private _viewportRuler: ViewportRuler,\n    private _document: Document,\n    private _platform: Platform,\n    private _overlayContainer: OverlayContainer,\n  ) {\n    this.setOrigin(connectedTo);\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef: OverlayRef): void {\n    if (\n      this._overlayRef &&\n      overlayRef !== this._overlayRef &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply(): void {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._clearPanelClasses();\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n\n    // We need the bounding rects for the origin, the overlay and the container to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._getOriginRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n    this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n    const containerRect = this._containerRect;\n\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits: FlexibleFit[] = [];\n\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback: FallbackPosition | undefined;\n\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n        });\n\n        continue;\n      }\n\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit: FlexibleFit | null = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score =\n          fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n      this._applyPosition(bestFit!.position, bestFit!.origin);\n      return;\n    }\n\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback!.position, fallback!.originPoint);\n      return;\n    }\n\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback!.position, fallback!.originPoint);\n  }\n\n  detach(): void {\n    this._clearPanelClasses();\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n\n    // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: '',\n      } as CSSStyleDeclaration);\n    }\n\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n\n    this.detach();\n    this._positionChanges.complete();\n    this._overlayRef = this._boundingBox = null!;\n    this._isDisposed = true;\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition(): void {\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n\n    const lastPosition = this._lastPosition;\n\n    if (lastPosition) {\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n      this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n\n      const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n      this._applyPosition(lastPosition, originPoint);\n    } else {\n      this.apply();\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]): this {\n    this._scrollables = scrollables;\n    return this;\n  }\n\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions: ConnectedPosition[]): this {\n    this._preferredPositions = positions;\n\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition!) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin: number): this {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true): this {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true): this {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true): this {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true): this {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin, relative to which to position the overlay.\n   * Using an element origin is useful for building components that need to be positioned\n   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n   * used for cases like contextual menus which open relative to the user's pointer.\n   * @param origin Reference to the new origin.\n   */\n  setOrigin(origin: FlexibleConnectedPositionStrategyOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n  withTransformOriginOn(selector: string): this {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  private _getOriginPoint(\n    originRect: Dimensions,\n    containerRect: Dimensions,\n    pos: ConnectedPosition,\n  ): Point {\n    let x: number;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + originRect.width / 2;\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    // When zooming in Safari the container rectangle contains negative values for the position\n    // and we need to re-add them to the calculated coordinates.\n    if (containerRect.left < 0) {\n      x -= containerRect.left;\n    }\n\n    let y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + originRect.height / 2;\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n    // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    // Additionally, when zooming in Safari this fixes the vertical position.\n    if (containerRect.top < 0) {\n      y -= containerRect.top;\n    }\n\n    return {x, y};\n  }\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  private _getOverlayPoint(\n    originPoint: Point,\n    overlayRect: Dimensions,\n    pos: ConnectedPosition,\n  ): Point {\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  private _getOverlayFit(\n    point: Point,\n    rawOverlayRect: Dimensions,\n    viewport: Dimensions,\n    position: ConnectedPosition,\n  ): OverlayFit {\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    let {x, y} = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    }\n\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = x + overlay.width - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = y + overlay.height - viewport.height;\n\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlay at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: Dimensions) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n      const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n\n      const verticalFit =\n        fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n      const horizontalFit =\n        fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n\n      return verticalFit && horizontalFit;\n    }\n    return false;\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param rawOverlayRect Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  private _pushOverlayOnScreen(\n    start: Point,\n    rawOverlayRect: Dimensions,\n    scrollPosition: ViewportScrollPosition,\n  ): Point {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y,\n      };\n    }\n\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    const viewport = this._viewportRect;\n\n    // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n\n    // Amount by which to push the overlay in each axis such that it remains on-screen.\n    let pushX = 0;\n    let pushY = 0;\n\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n    }\n\n    this._previousPushAmount = {x: pushX, y: pushY};\n\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    }\n\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculations can be somewhat expensive.\n    if (this._positionChanges.observers.length) {\n      const scrollVisibility = this._getScrollVisibility();\n\n      // We're recalculating on scroll, but we only want to emit if anything\n      // changed since downstream code might be hitting the `NgZone`.\n      if (\n        position !== this._lastPosition ||\n        !this._lastScrollVisibility ||\n        !compareScrollVisibility(this._lastScrollVisibility, scrollVisibility)\n      ) {\n        const changeEvent = new ConnectedOverlayPositionChange(position, scrollVisibility);\n        this._positionChanges.next(changeEvent);\n      }\n\n      this._lastScrollVisibility = scrollVisibility;\n    }\n\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n    this._isInitialRender = false;\n  }\n\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n  private _setTransformOrigin(position: ConnectedPosition) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements: NodeListOf<HTMLElement> = this._boundingBox!.querySelectorAll(\n      this._transformOriginSelector,\n    );\n    let xOrigin: 'left' | 'right' | 'center';\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height: number, top: number, bottom: number;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.height - top + this._viewportMargin;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `DOMRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge = Math.min(\n        viewport.bottom - origin.y + viewport.top,\n        origin.y,\n      );\n\n      const previousHeight = this._lastBoundingBoxSize.height;\n\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - previousHeight / 2;\n      }\n    }\n\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge =\n      (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge =\n      (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n\n    let width: number, left: number, right: number;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.width - origin.x + this._viewportMargin * 2;\n      width = origin.x - this._viewportMargin;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge = Math.min(\n        viewport.right - origin.x + viewport.left,\n        origin.x,\n      );\n      const previousWidth = this._lastBoundingBoxSize.width;\n\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - previousWidth / 2;\n      }\n    }\n\n    return {top: top!, left: left!, bottom: bottom!, right: right!, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stretches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n\n    extendStyles(this._boundingBox!.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  private _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox!.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  private _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n      transform: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\n    const styles = {} as CSSStyleDeclaration;\n    const hasExactPosition = this._hasExactPosition();\n    const hasFlexibleDimensions = this._hasFlexibleDimensions;\n    const config = this._overlayRef.getConfig();\n\n    if (hasExactPosition) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    }\n\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim();\n\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    // Note that this doesn't apply when we have an exact position, in which case we do want to\n    // apply them because they'll be cleared from the bounding box.\n    if (config.maxHeight) {\n      if (hasExactPosition) {\n        styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n      } else if (hasFlexibleDimensions) {\n        styles.maxHeight = '';\n      }\n    }\n\n    if (config.maxWidth) {\n      if (hasExactPosition) {\n        styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n      } else if (hasFlexibleDimensions) {\n        styles.maxWidth = '';\n      }\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayY(\n    position: ConnectedPosition,\n    originPoint: Point,\n    scrollPosition: ViewportScrollPosition,\n  ) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: '', bottom: ''} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement!.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayX(\n    position: ConnectedPosition,\n    originPoint: Point,\n    scrollPosition: ViewportScrollPosition,\n  ) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: '', right: ''} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty: 'left' | 'right';\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement!.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  private _getScrollVisibility(): ScrollingVisibility {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._getOriginRect();\n    const overlayBounds = this._pane.getBoundingClientRect();\n\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this._scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from its length. */\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  private _getNarrowedViewportRect(): Dimensions {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement!.clientWidth;\n    const height = this._document.documentElement!.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top: scrollPosition.top + this._viewportMargin,\n      left: scrollPosition.left + this._viewportMargin,\n      right: scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width: width - 2 * this._viewportMargin,\n      height: height - 2 * this._viewportMargin,\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  private _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  private _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breaking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n\n  /** Validates that the current position match the expected values. */\n  private _validatePositions(): void {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._preferredPositions.length) {\n        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n      }\n\n      // TODO(crisbeto): remove these once Angular's template type\n      // checking is advanced enough to catch these cases.\n      this._preferredPositions.forEach(pair => {\n        validateHorizontalPosition('originX', pair.originX);\n        validateVerticalPosition('originY', pair.originY);\n        validateHorizontalPosition('overlayX', pair.overlayX);\n        validateVerticalPosition('overlayY', pair.overlayY);\n      });\n    }\n  }\n\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n  private _addPanelClasses(cssClasses: string | string[]) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n  private _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => {\n        this._pane.classList.remove(cssClass);\n      });\n      this._appliedPanelClasses = [];\n    }\n  }\n\n  /** Returns the DOMRect of the current origin. */\n  private _getOriginRect(): Dimensions {\n    const origin = this._origin;\n\n    if (origin instanceof ElementRef) {\n      return origin.nativeElement.getBoundingClientRect();\n    }\n\n    // Check for Element so SVG elements are also supported.\n    if (origin instanceof Element) {\n      return origin.getBoundingClientRect();\n    }\n\n    const width = origin.width || 0;\n    const height = origin.height || 0;\n\n    // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n    return {\n      top: origin.y,\n      bottom: origin.y + height,\n      left: origin.x,\n      right: origin.x + width,\n      height,\n      width,\n    };\n  }\n}\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface OverlayFit {\n  /** Whether the overlay fits completely in the viewport. */\n  isCompletelyWithinViewport: boolean;\n\n  /** Whether the overlay fits in the viewport on the y-axis. */\n  fitsInViewportVertically: boolean;\n\n  /** Whether the overlay fits in the viewport on the x-axis. */\n  fitsInViewportHorizontally: boolean;\n\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\n  visibleArea: number;\n}\n\n/** Record of the measurements determining whether an overlay will fit in a specific position. */\ninterface FallbackPosition {\n  position: ConnectedPosition;\n  originPoint: Point;\n  overlayPoint: Point;\n  overlayFit: OverlayFit;\n  overlayRect: Dimensions;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface BoundingBoxRect {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface FlexibleFit {\n  position: ConnectedPosition;\n  origin: Point;\n  overlayRect: Dimensions;\n  boundingBoxRect: BoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface ConnectedPosition {\n  originX: 'start' | 'center' | 'end';\n  originY: 'top' | 'center' | 'bottom';\n\n  overlayX: 'start' | 'center' | 'end';\n  overlayY: 'top' | 'center' | 'bottom';\n\n  weight?: number;\n  offsetX?: number;\n  offsetY?: number;\n  panelClass?: string | string[];\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(\n  destination: CSSStyleDeclaration,\n  source: CSSStyleDeclaration,\n): CSSStyleDeclaration {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      destination[key] = source[key];\n    }\n  }\n\n  return destination;\n}\n\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input: number | string | null | undefined): number | null {\n  if (typeof input !== 'number' && input != null) {\n    const [value, units] = input.split(cssUnitPattern);\n    return !units || units === 'px' ? parseFloat(value) : null;\n  }\n\n  return input || null;\n}\n\n/**\n * Gets a version of an element's bounding `DOMRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `DOMRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect: Dimensions): Dimensions {\n  return {\n    top: Math.floor(clientRect.top),\n    right: Math.floor(clientRect.right),\n    bottom: Math.floor(clientRect.bottom),\n    left: Math.floor(clientRect.left),\n    width: Math.floor(clientRect.width),\n    height: Math.floor(clientRect.height),\n  };\n}\n\n/** Returns whether two `ScrollingVisibility` objects are identical. */\nfunction compareScrollVisibility(a: ScrollingVisibility, b: ScrollingVisibility): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  return (\n    a.isOriginClipped === b.isOriginClipped &&\n    a.isOriginOutsideView === b.isOriginOutsideView &&\n    a.isOverlayClipped === b.isOverlayClipped &&\n    a.isOverlayOutsideView === b.isOverlayOutsideView\n  );\n}\n\nexport const STANDARD_DROPDOWN_BELOW_POSITIONS: ConnectedPosition[] = [\n  {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n  {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'},\n  {originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top'},\n  {originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom'},\n];\n\nexport const STANDARD_DROPDOWN_ADJACENT_POSITIONS: ConnectedPosition[] = [\n  {originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top'},\n  {originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom'},\n  {originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top'},\n  {originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom'},\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {OverlayRef} from '../overlay-ref';\nimport {PositionStrategy} from './position-strategy';\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayRef;\n  private _cssPosition = 'static';\n  private _topOffset = '';\n  private _bottomOffset = '';\n  private _alignItems = '';\n  private _xPosition = '';\n  private _xOffset = '';\n  private _width = '';\n  private _height = '';\n  private _isDisposed = false;\n\n  attach(overlayRef: OverlayRef): void {\n    const config = overlayRef.getConfig();\n\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value: string = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value: string = ''): this {\n    this._xOffset = value;\n    this._xPosition = 'left';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value: string = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value: string = ''): this {\n    this._xOffset = value;\n    this._xPosition = 'right';\n    return this;\n  }\n\n  /**\n   * Sets the overlay to the start of the viewport, depending on the overlay direction.\n   * This will be to the left in LTR layouts and to the right in RTL.\n   * @param offset Offset from the edge of the screen.\n   */\n  start(value: string = ''): this {\n    this._xOffset = value;\n    this._xPosition = 'start';\n    return this;\n  }\n\n  /**\n   * Sets the overlay to the end of the viewport, depending on the overlay direction.\n   * This will be to the right in LTR layouts and to the left in RTL.\n   * @param offset Offset from the edge of the screen.\n   */\n  end(value: string = ''): this {\n    this._xOffset = value;\n    this._xPosition = 'end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  width(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  height(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset: string = ''): this {\n    this.left(offset);\n    this._xPosition = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset: string = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply(): void {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n    const {width, height, maxWidth, maxHeight} = config;\n    const shouldBeFlushHorizontally =\n      (width === '100%' || width === '100vw') &&\n      (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n    const shouldBeFlushVertically =\n      (height === '100%' || height === '100vh') &&\n      (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n    const xPosition = this._xPosition;\n    const xOffset = this._xOffset;\n    const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n    let marginLeft = '';\n    let marginRight = '';\n    let justifyContent = '';\n\n    if (shouldBeFlushHorizontally) {\n      justifyContent = 'flex-start';\n    } else if (xPosition === 'center') {\n      justifyContent = 'center';\n\n      if (isRtl) {\n        marginRight = xOffset;\n      } else {\n        marginLeft = xOffset;\n      }\n    } else if (isRtl) {\n      if (xPosition === 'left' || xPosition === 'end') {\n        justifyContent = 'flex-end';\n        marginLeft = xOffset;\n      } else if (xPosition === 'right' || xPosition === 'start') {\n        justifyContent = 'flex-start';\n        marginRight = xOffset;\n      }\n    } else if (xPosition === 'left' || xPosition === 'start') {\n      justifyContent = 'flex-start';\n      marginLeft = xOffset;\n    } else if (xPosition === 'right' || xPosition === 'end') {\n      justifyContent = 'flex-end';\n      marginRight = xOffset;\n    }\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n    styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n    parentStyles.justifyContent = justifyContent;\n    parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n  dispose(): void {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent =\n      parentStyles.alignItems =\n      styles.marginTop =\n      styles.marginBottom =\n      styles.marginLeft =\n      styles.marginRight =\n      styles.position =\n        '';\n\n    this._overlayRef = null!;\n    this._isDisposed = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Platform} from '../../platform';\nimport {ViewportRuler} from '../../scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Injectable, inject} from '@angular/core';\nimport {OverlayContainer} from '../overlay-container';\nimport {\n  FlexibleConnectedPositionStrategy,\n  FlexibleConnectedPositionStrategyOrigin,\n} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  private _viewportRuler = inject(ViewportRuler);\n  private _document = inject(DOCUMENT);\n  private _platform = inject(Platform);\n  private _overlayContainer = inject(OverlayContainer);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param origin Origin relative to which to position the overlay.\n   */\n  flexibleConnectedTo(\n    origin: FlexibleConnectedPositionStrategyOrigin,\n  ): FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(\n      origin,\n      this._viewportRuler,\n      this._document,\n      this._platform,\n      this._overlayContainer,\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directionality} from '../bidi';\nimport {DomPortalOutlet} from '../portal';\nimport {DOCUMENT, Location} from '@angular/common';\nimport {\n  ApplicationRef,\n  Injectable,\n  Injector,\n  NgZone,\n  ANIMATION_MODULE_TYPE,\n  EnvironmentInjector,\n  inject,\n  RendererFactory2,\n} from '@angular/core';\nimport {_IdGenerator} from '../a11y';\nimport {_CdkPrivateStyleLoader} from '../private';\nimport {OverlayKeyboardDispatcher} from './dispatchers/overlay-keyboard-dispatcher';\nimport {OverlayOutsideClickDispatcher} from './dispatchers/overlay-outside-click-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {_CdkOverlayStyleLoader, OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable({providedIn: 'root'})\nexport class Overlay {\n  scrollStrategies = inject(ScrollStrategyOptions);\n  private _overlayContainer = inject(OverlayContainer);\n  private _positionBuilder = inject(OverlayPositionBuilder);\n  private _keyboardDispatcher = inject(OverlayKeyboardDispatcher);\n  private _injector = inject(Injector);\n  private _ngZone = inject(NgZone);\n  private _document = inject(DOCUMENT);\n  private _directionality = inject(Directionality);\n  private _location = inject(Location);\n  private _outsideClickDispatcher = inject(OverlayOutsideClickDispatcher);\n  private _animationsModuleType = inject(ANIMATION_MODULE_TYPE, {optional: true});\n  private _idGenerator = inject(_IdGenerator);\n  private _renderer = inject(RendererFactory2).createRenderer(null, null);\n\n  private _appRef: ApplicationRef;\n  private _styleLoader = inject(_CdkPrivateStyleLoader);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    // This is done in the overlay container as well, but we have it here\n    // since it's common to mock out the overlay container in tests.\n    this._styleLoader.load(_CdkOverlayStyleLoader);\n\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(\n      portalOutlet,\n      host,\n      pane,\n      overlayConfig,\n      this._ngZone,\n      this._keyboardDispatcher,\n      this._document,\n      this._location,\n      this._outsideClickDispatcher,\n      this._animationsModuleType === 'NoopAnimations',\n      this._injector.get(EnvironmentInjector),\n      this._renderer,\n    );\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = this._idGenerator.getId('cdk-overlay-');\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, null, this._appRef, this._injector, this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Direction, Directionality} from '../bidi';\nimport {ESCAPE, hasModifierKey} from '../keycodes';\nimport {TemplatePortal} from '../portal';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {_getEventTarget} from '../platform';\nimport {Subscription} from 'rxjs';\nimport {takeWhile} from 'rxjs/operators';\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n  FlexibleConnectedPositionStrategyOrigin,\n} from './position/flexible-connected-position-strategy';\nimport {RepositionScrollStrategy, ScrollStrategy} from './scroll/index';\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: ConnectedPosition[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top',\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom',\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom',\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top',\n  },\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>(\n  'cdk-connected-overlay-scroll-strategy',\n  {\n    providedIn: 'root',\n    factory: () => {\n      const overlay = inject(Overlay);\n      return () => overlay.scrollStrategies.reposition();\n    },\n  },\n);\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n})\nexport class CdkOverlayOrigin {\n  elementRef = inject(ElementRef);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n}\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay',\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n  private _overlay = inject(Overlay);\n  private _dir = inject(Directionality, {optional: true});\n\n  private _overlayRef: OverlayRef | undefined;\n  private _templatePortal: TemplatePortal;\n  private _backdropSubscription = Subscription.EMPTY;\n  private _attachSubscription = Subscription.EMPTY;\n  private _detachSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _offsetX: number;\n  private _offsetY: number;\n  private _position: FlexibleConnectedPositionStrategy;\n  private _scrollStrategyFactory = inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY);\n  private _disposeOnNavigation = false;\n  private _ngZone = inject(NgZone);\n\n  /** Origin for the connected overlay. */\n  @Input('cdkConnectedOverlayOrigin')\n  origin: CdkOverlayOrigin | FlexibleConnectedPositionStrategyOrigin;\n\n  /** Registered connected position pairs. */\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\n\n  /**\n   * This input overrides the positions input if specified. It lets users pass\n   * in arbitrary positioning strategies.\n   */\n  @Input('cdkConnectedOverlayPositionStrategy') positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  @Input('cdkConnectedOverlayOffsetX')\n  get offsetX(): number {\n    return this._offsetX;\n  }\n  set offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  @Input('cdkConnectedOverlayOffsetY')\n  get offsetY() {\n    return this._offsetY;\n  }\n  set offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The width of the overlay panel. */\n  @Input('cdkConnectedOverlayWidth') width: number | string;\n\n  /** The height of the overlay panel. */\n  @Input('cdkConnectedOverlayHeight') height: number | string;\n\n  /** The min width of the overlay panel. */\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string | string[];\n\n  /** The custom class to add to the overlay pane element. */\n  @Input('cdkConnectedOverlayPanelClass') panelClass: string | string[];\n\n  /** Margin between the overlay and the viewport edges. */\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy;\n\n  /** Whether the overlay is open. */\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n  /** Whether the overlay can be closed by user interaction. */\n  @Input('cdkConnectedOverlayDisableClose') disableClose: boolean = false;\n\n  /** CSS selector which to set the transform origin. */\n  @Input('cdkConnectedOverlayTransformOriginOn') transformOriginSelector: string;\n\n  /** Whether or not the overlay should attach a backdrop. */\n  @Input({alias: 'cdkConnectedOverlayHasBackdrop', transform: booleanAttribute})\n  hasBackdrop: boolean = false;\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  @Input({alias: 'cdkConnectedOverlayLockPosition', transform: booleanAttribute})\n  lockPosition: boolean = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  @Input({alias: 'cdkConnectedOverlayFlexibleDimensions', transform: booleanAttribute})\n  flexibleDimensions: boolean = false;\n\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n  @Input({alias: 'cdkConnectedOverlayGrowAfterOpen', transform: booleanAttribute})\n  growAfterOpen: boolean = false;\n\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  @Input({alias: 'cdkConnectedOverlayPush', transform: booleanAttribute}) push: boolean = false;\n\n  /** Whether the overlay should be disposed of when the user goes backwards/forwards in history. */\n  @Input({alias: 'cdkConnectedOverlayDisposeOnNavigation', transform: booleanAttribute})\n  get disposeOnNavigation(): boolean {\n    return this._disposeOnNavigation;\n  }\n  set disposeOnNavigation(value: boolean) {\n    this._disposeOnNavigation = value;\n  }\n\n  /** Event emitted when the backdrop is clicked. */\n  @Output() readonly backdropClick = new EventEmitter<MouseEvent>();\n\n  /** Event emitted when the position has changed. */\n  @Output() readonly positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n  @Output() readonly attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n  @Output() readonly detach = new EventEmitter<void>();\n\n  /** Emits when there are keyboard events that are targeted at the overlay. */\n  @Output() readonly overlayKeydown = new EventEmitter<KeyboardEvent>();\n\n  /** Emits when there are mouse outside click events that are targeted at the overlay. */\n  @Output() readonly overlayOutsideClick = new EventEmitter<MouseEvent>();\n\n  constructor(...args: unknown[]);\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  constructor() {\n    const templateRef = inject<TemplateRef<any>>(TemplateRef);\n    const viewContainerRef = inject(ViewContainerRef);\n\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef(): OverlayRef {\n    return this._overlayRef!;\n  }\n\n  /** The element's layout direction. */\n  get dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    this._attachSubscription.unsubscribe();\n    this._detachSubscription.unsubscribe();\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._overlayRef?.dispose();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n      this._overlayRef?.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this.attachOverlay() : this.detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  private _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n    this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n    this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n    overlayRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      this.overlayKeydown.next(event);\n\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n        this.detachOverlay();\n      }\n    });\n\n    this._overlayRef.outsidePointerEvents().subscribe((event: MouseEvent) => {\n      const origin = this._getOriginElement();\n      const target = _getEventTarget(event) as Element | null;\n\n      if (!origin || (origin !== target && !origin.contains(target))) {\n        this.overlayOutsideClick.next(event);\n      }\n    });\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  private _buildConfig(): OverlayConfig {\n    const positionStrategy = (this._position =\n      this.positionStrategy || this._createPositionStrategy());\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir || 'ltr',\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop,\n      disposeOnNavigation: this.disposeOnNavigation,\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n\n    return overlayConfig;\n  }\n\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\n  private _updatePositionStrategy(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const positions: ConnectedPosition[] = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY,\n      panelClass: currentPosition.panelClass || undefined,\n    }));\n\n    return positionStrategy\n      .setOrigin(this._getOrigin())\n      .withPositions(positions)\n      .withFlexibleDimensions(this.flexibleDimensions)\n      .withPush(this.push)\n      .withGrowAfterOpen(this.growAfterOpen)\n      .withViewportMargin(this.viewportMargin)\n      .withLockedPosition(this.lockPosition)\n      .withTransformOriginOn(this.transformOriginSelector);\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n    const strategy = this._overlay.position().flexibleConnectedTo(this._getOrigin());\n    this._updatePositionStrategy(strategy);\n    return strategy;\n  }\n\n  private _getOrigin(): FlexibleConnectedPositionStrategyOrigin {\n    if (this.origin instanceof CdkOverlayOrigin) {\n      return this.origin.elementRef;\n    } else {\n      return this.origin;\n    }\n  }\n\n  private _getOriginElement(): Element | null {\n    if (this.origin instanceof CdkOverlayOrigin) {\n      return this.origin.elementRef.nativeElement;\n    }\n\n    if (this.origin instanceof ElementRef) {\n      return this.origin.nativeElement;\n    }\n\n    if (typeof Element !== 'undefined' && this.origin instanceof Element) {\n      return this.origin;\n    }\n\n    return null;\n  }\n\n  /** Attaches the overlay. */\n  attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n    }\n\n    if (!this._overlayRef!.hasAttached()) {\n      this._overlayRef!.attach(this._templatePortal);\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef!.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    } else {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    this._positionSubscription.unsubscribe();\n\n    // Only subscribe to `positionChanges` if requested, because putting\n    // together all the information for it can be expensive.\n    if (this.positionChange.observers.length > 0) {\n      this._positionSubscription = this._position.positionChanges\n        .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n        .subscribe(position => {\n          this._ngZone.run(() => this.positionChange.emit(position));\n\n          if (this.positionChange.observers.length === 0) {\n            this._positionSubscription.unsubscribe();\n          }\n        });\n    }\n\n    this.open = true;\n  }\n\n  /** Detaches the overlay. */\n  detachOverlay() {\n    this._overlayRef?.detach();\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this.open = false;\n  }\n}\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(\n  overlay: Overlay,\n): () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {BidiModule} from '../bidi';\nimport {PortalModule} from '../portal';\nimport {ScrollingModule} from '../scrolling';\nimport {NgModule} from '@angular/core';\nimport {Overlay} from './overlay';\nimport {\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n} from './overlay-directives';\n\n@NgModule({\n  imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin],\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n})\nexport class OverlayModule {}\n\n// Re-export needed by the Angular compiler.\n// See: https://github.com/angular/components/issues/30663.\n// Note: These exports need to be stable and shouldn't be renamed unnecessarily because\n// consuming libraries might have references to them in their own partial compilation output.\nexport {\n  CdkScrollableModule as ɵɵCdkScrollableModule,\n  CdkFixedSizeVirtualScroll as ɵɵCdkFixedSizeVirtualScroll,\n  CdkVirtualForOf as ɵɵCdkVirtualForOf,\n  CdkVirtualScrollViewport as ɵɵCdkVirtualScrollViewport,\n  CdkVirtualScrollableWindow as ɵɵCdkVirtualScrollableWindow,\n  CdkVirtualScrollableElement as ɵɵCdkVirtualScrollableElement,\n} from '../scrolling';\nexport {Dir as ɵɵDir} from '../bidi';\n"]}