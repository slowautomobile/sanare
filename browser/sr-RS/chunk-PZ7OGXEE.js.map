{"version":3,"mappings":"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","names":["_c0","MatTab_ng_template_0_Template","rf","ctx","K","_c1","_c2","_c3","_c4","_c5","_c6","MatTabBody_ng_template_2_Template","_c7","_c8","MatTabGroup_For_3_Conditional_6_ng_template_0_Template","MatTabGroup_For_3_Conditional_6_Template","w","Be","tab_r4","ɵɵnextContext","$implicit","u","t","templateLabel","MatTabGroup_For_3_Conditional_7_Template","Lt","St","textLabel","MatTabGroup_For_3_Template","_r2","ɵɵgetCurrentView","m","C","a","d","i","o","$index","l","k","I","ot","c","ctx_r5","_handleClick","tabHeader_r7","ɵ$index_3_r5","$event","ɵɵrestoreView","_tabFocusChanged","P","Le","_","tabNode_r8","ɵɵreference","U","labelClass","y","selectedIndex","e","_getTabLabelId","disabled","fitInkBarToContent","D","_getTabIndex","_tabs","length","_getTabContentId","ariaLabel","ariaLabelledby","p","disableRipple","at","MatTabGroup_Conditional_4_Template","MatTabGroup_For_8_Template","_r9","_removeTabBodyWrapperHeight","_setTabBodyWrapperHeight","_bodyCentered","tab_r10","$index_r11","bodyClass","content","position","animationDuration","preserveContent","contentTabIndex","MAT_TAB_CONTENT","InjectionToken","MatTabContent","template","inject","TemplateRef","constructor","ɵfac","ɵdir","M","type","selectors","features","ɵɵProvidersFeature","provide","useExisting","MAT_TAB_LABEL","MAT_TAB","MatTabLabel","CdkPortal","_closestTab","optional","G","__ngFactoryType__","ɵɵInheritDefinitionFeature","MAT_TAB_GROUP","MatTab","_viewContainerRef","ViewContainerRef","_closestTabGroup","_templateLabel","value","_setTemplateLabelInput","_explicitContent","undefined","_implicitContent","_contentPortal","_stateChanges","Subject","origin","isActive","_CdkPrivateStyleLoader","load","_StructuralStylesLoader","ngOnChanges","changes","hasOwnProperty","next","ngOnDestroy","complete","ngOnInit","TemplatePortal","ɵcmp","x","contentQueries","dirIndex","F","_t","f","inputs","booleanAttribute","exportAs","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","Z","ke","encapsulation","ACTIVE_CLASS","NO_TRANSITION_CLASS","MatInkBar","_items","_currentItem","hide","forEach","item","deactivateInkBar","alignToElement","element","correspondingItem","find","elementRef","nativeElement","currentItem","domRect","getBoundingClientRect","activateInkBar","InkBarItem","_elementRef","ElementRef","_inkBarElement","_inkBarContentElement","_fitToContent","newValue","_appendInkBarElement","previousIndicatorClientRect","classList","add","currentClientRect","widthDelta","width","xPosition","left","style","setProperty","remove","_createInkBarElement","documentNode","ownerDocument","document","inkBarElement","createElement","inkBarContentElement","className","appendChild","parentElement","querySelector","ɵɵdefineDirective","MatTabLabelWrapper","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","hostVars","hostBindings","passiveEventListenerOptions","passive","HEADER_SCROLL_DELAY","HEADER_SCROLL_INTERVAL","MatPaginatedTabHeader","_changeDetectorRef","ChangeDetectorRef","_viewportRuler","ViewportRuler","_dir","Directionality","_ngZone","NgZone","_platform","Platform","_sharedResizeObserver","SharedResizeObserver","_injector","Injector","_renderer","Renderer2","_animationMode","ANIMATION_MODULE_TYPE","_eventCleanups","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_tabLabelCount","_scrollDistanceChanged","_keyManager","_currentTextContent","_stopScrolling","disablePagination","_selectedIndex","v","isNaN","updateActiveItem","selectFocusedIndex","EventEmitter","indexFocused","runOutsideAngular","listen","_stopInterval","ngAfterViewInit","push","_bindEventWithOptions","_previousPaginator","_handlePaginatorPress","_nextPaginator","ngAfterContentInit","dirChange","change","of","resize","observe","pipe","debounceTime","takeUntil","viewportResize","realign","updatePagination","_alignInkBarToSelectedTab","FocusKeyManager","withHorizontalOrientation","_getLayoutDirection","withHomeAndEnd","withWrap","skipPredicate","afterNextRender","injector","merge","_itemsResized","subscribe","run","Promise","resolve","then","Math","max","min","_getMaxScrollDistance","newFocusIndex","emit","_setTabFocus","ResizeObserver","EMPTY","startWith","switchMap","tabItems","Observable","observer","resizeObserver","entries","disconnect","skip","filter","some","contentRect","height","ngAfterContentChecked","markForCheck","_scrollToLabel","_checkScrollingControls","_updateTabScrollPosition","cleanup","destroy","_handleKeydown","event","hasModifierKey","keyCode","ENTER","SPACE","focusIndex","get","_itemSelected","onKeydown","_onContentChanges","textContent","_checkPaginationEnabled","activeItemIndex","_isValidIndex","setActiveItem","index","toArray","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","transform","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","_tabListInner","beforeVisiblePos","afterVisiblePos","containerWidth","isEnabled","lengthOfTabList","selectedItem","selectedLabelWrapper","_inkBar","mouseEvent","button","timer","maxScrollDistance","distance","numberAttribute","outputs","MatTabHeader","preventDefault","consts","A","dependencies","MatRipple","CdkObserveContent","styles","MAT_TABS_CONFIG","MatTabBodyPortal","CdkPortalOutlet","_host","MatTabBody","_centeringSub","Subscription","_leavingSub","_beforeCentering","_isCenterPosition","isCentering","_content","hasAttached","attach","_afterLeavingCenter","detach","unsubscribe","_animationsModule","_initialized","_fallbackTimer","_positionIndex","_dirChangeSubscription","_position","_previousPosition","_onCentering","_onCentered","_portalHost","_contentElement","_computePositionAnimationState","changeDetectorRef","dir","_bindTransitionEvents","_setActiveClass","clientHeight","clearTimeout","transitionDone","target","_transitionDone","_transitionStarted","toggle","_animationsDisabled","_simulateTransitionEvents","setTimeout","ɵɵdefineComponent","viewQuery","De","b","h","first","hostAttrs","Pe","CdkScrollable","MatTabGroup","_tabsSubscription","_tabLabelSubscription","_tabBodySubscription","_allTabs","_tabBodies","_tabBodyWrapper","_tabHeader","QueryList","_indexToSelect","_lastFocusedTabIndex","_tabBodyWrapperHeight","color","_fitInkBarToContent","stretchTabs","alignTabs","dynamicHeight","headerPosition","_animationDuration","stringValue","test","_contentTabIndex","backgroundColor","_backgroundColor","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","_isServer","isBrowser","defaultConfig","_IdGenerator","getId","indexToSelect","_clampTabIndex","isFirstRun","_createChangeEvent","wrapper","minHeight","tab","_subscribeToAllTabChanges","_subscribeToTabLabels","tabs","selectedTab","reset","notifyOnChanges","realignInkBar","focusTab","header","_focusChanged","MatTabChangeEvent","map","tabHeight","offsetHeight","tabHeader","targetIndex","focusOrigin","isCenter","body","Ee","Re","Bt","_r1","nt","Ae","it","Fe","Ne","rt","CdkMonitorFocus","qe","n","s","ɵɵelement","ɵɵproperty","Ue","ClientFormComponent","location","Location","formBuilder","FormBuilder","route","ActivatedRoute","clientsService","ClientsService","_snackBar","MatSnackBar","dialog","MatDialog","router","Router","shareClientsDataService","ShareClientsDataService","shareStateService","ShareStateService","subscriptions","editMode","isLoading","clientInfo","_initForm","_checkEditMode","form","group","id","name","firstName","Validators","required","lastName","email","phone","address","street","streetNumber","city","zipCode","country","programs","array","clientForm","controls","currentClientId","snapshot","paramMap","getClient","client","console","log","setValue","programsArray","program","FormControl","clientName","update","currentValue","__spreadProps","__spreadValues","clientId","error","navigateByUrl","onSubmit","invalid","open","duration","panelClass","set","_updateClient","_createClient","subscription","createClient","lastValueFrom","programPosition","programId","programName","dateRange","start","end","updateClient","createdClient","info","openDeleteConfirmationDialog","dialogRef","DeleteConfirmationDialogComponent","data","title","$localize","message","afterClosed","result","deleteClient","close","onBack","i18n_0","ɵɵelementStart","ɵɵlistener","ɵɵelementEnd","ɵɵtemplate","ClientFormComponent_ng_template_5_Template","ClientFormComponent_ng_template_7_Template","ɵɵadvance","PageToolbarComponent","ClientFullEditFormComponent","ClientFullEditProgramsComponent","FormsModule","ɵNgNoValidate","NgControlStatusGroup","ReactiveFormsModule","FormGroupDirective","za"],"ignoreList":[],"sources":["../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab.html","../../src/material/tabs/tab-group.html","../../src/material/tabs/tab-label.ts","../../src/material/tabs/tab.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/paginated-tab-header.ts","../../src/material/tabs/tab-header.ts","../../src/material/tabs/tab-header.html","../../src/material/tabs/tab-config.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-body.html","../../src/material/tabs/tab-group.ts","apps/sanare-app/src/app/pages/clients/client-form/client-form.component.html","apps/sanare-app/src/app/pages/clients/client-form/client-form.component.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, InjectionToken, TemplateRef, inject} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `MatTabContent`. It serves as\n * alternative token to the actual `MatTabContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_TAB_CONTENT = new InjectionToken<MatTabContent>('MatTabContent');\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({\n  selector: '[matTabContent]',\n  providers: [{provide: MAT_TAB_CONTENT, useExisting: MatTabContent}],\n})\nexport class MatTabContent {\n  template = inject<TemplateRef<any>>(TemplateRef);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n}\n","<!-- Create a template for the content of the <mat-tab> so that we can grab a reference to this\n    TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\n    tab-group. -->\n<ng-template><ng-content></ng-content></ng-template>\n","<mat-tab-header #tabHeader\n                [selectedIndex]=\"selectedIndex || 0\"\n                [disableRipple]=\"disableRipple\"\n                [disablePagination]=\"disablePagination\"\n                [aria-label]=\"ariaLabel\"\n                [aria-labelledby]=\"ariaLabelledby\"\n                (indexFocused)=\"_focusChanged($event)\"\n                (selectFocusedIndex)=\"selectedIndex = $event\">\n\n  @for (tab of _tabs; track tab; let i = $index) {\n    <div class=\"mdc-tab mat-mdc-tab mat-focus-indicator\"\n        #tabNode\n        role=\"tab\"\n        matTabLabelWrapper\n        cdkMonitorElementFocus\n        [id]=\"_getTabLabelId(i)\"\n        [attr.tabIndex]=\"_getTabIndex(i)\"\n        [attr.aria-posinset]=\"i + 1\"\n        [attr.aria-setsize]=\"_tabs.length\"\n        [attr.aria-controls]=\"_getTabContentId(i)\"\n        [attr.aria-selected]=\"selectedIndex === i\"\n        [attr.aria-label]=\"tab.ariaLabel || null\"\n        [attr.aria-labelledby]=\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\"\n        [class.mdc-tab--active]=\"selectedIndex === i\"\n        [class]=\"tab.labelClass\"\n        [disabled]=\"tab.disabled\"\n        [fitInkBarToContent]=\"fitInkBarToContent\"\n        (click)=\"_handleClick(tab, tabHeader, i)\"\n        (cdkFocusChange)=\"_tabFocusChanged($event, i)\">\n      <span class=\"mdc-tab__ripple\"></span>\n\n      <!-- Needs to be a separate element, because we can't put\n          `overflow: hidden` on tab due to the ink bar. -->\n      <div\n        class=\"mat-mdc-tab-ripple\"\n        mat-ripple\n        [matRippleTrigger]=\"tabNode\"\n        [matRippleDisabled]=\"tab.disabled || disableRipple\"></div>\n\n      <span class=\"mdc-tab__content\">\n        <span class=\"mdc-tab__text-label\">\n          <!--\n            If there is a label template, use it, otherwise fall back to the text label.\n            Note that we don't have indentation around the text label, because it adds\n            whitespace around the text which breaks some internal tests.\n          -->\n          @if (tab.templateLabel) {\n            <ng-template [cdkPortalOutlet]=\"tab.templateLabel\"></ng-template>\n          } @else {{{tab.textLabel}}}\n        </span>\n      </span>\n    </div>\n  }\n</mat-tab-header>\n\n<!--\n  We need to project the content somewhere to avoid hydration errors. Some observations:\n  1. This is only necessary on the server.\n  2. We get a hydration error if there aren't any nodes after the `ng-content`.\n  3. We get a hydration error if `ng-content` is wrapped in another element.\n-->\n@if (_isServer) {\n  <ng-content/>\n}\n\n<div\n  class=\"mat-mdc-tab-body-wrapper\"\n  [class._mat-animation-noopable]=\"_animationMode === 'NoopAnimations'\"\n  #tabBodyWrapper>\n  @for (tab of _tabs; track tab;) {\n    <mat-tab-body role=\"tabpanel\"\n                 [id]=\"_getTabContentId($index)\"\n                 [attr.tabindex]=\"(contentTabIndex != null && selectedIndex === $index) ? contentTabIndex : null\"\n                 [attr.aria-labelledby]=\"_getTabLabelId($index)\"\n                 [attr.aria-hidden]=\"selectedIndex !== $index\"\n                 [class]=\"tab.bodyClass\"\n                 [content]=\"tab.content!\"\n                 [position]=\"tab.position!\"\n                 [animationDuration]=\"animationDuration\"\n                 [preserveContent]=\"preserveContent\"\n                 (_onCentered)=\"_removeTabBodyWrapperHeight()\"\n                 (_onCentering)=\"_setTabBodyWrapperHeight($event)\"\n                 (_beforeCentering)=\"_bodyCentered($event)\"/>\n  }\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, InjectionToken, inject} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/**\n * Injection token that can be used to reference instances of `MatTabLabel`. It serves as\n * alternative token to the actual `MatTabLabel` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_TAB_LABEL = new InjectionToken<MatTabLabel>('MatTabLabel');\n\n/**\n * Used to provide a tab label to a tab without causing a circular dependency.\n * @docs-private\n */\nexport const MAT_TAB = new InjectionToken<any>('MAT_TAB');\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n  providers: [{provide: MAT_TAB_LABEL, useExisting: MatTabLabel}],\n})\nexport class MatTabLabel extends CdkPortal {\n  _closestTab = inject(MAT_TAB, {optional: true});\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {MatTabContent} from './tab-content';\nimport {MAT_TAB, MatTabLabel} from './tab-label';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs';\nimport {_CdkPrivateStyleLoader} from '@angular/cdk/private';\nimport {_StructuralStylesLoader} from '../core';\n\n/**\n * Used to provide a tab group to a tab without causing a circular dependency.\n * @docs-private\n */\nexport const MAT_TAB_GROUP = new InjectionToken<any>('MAT_TAB_GROUP');\n\n@Component({\n  selector: 'mat-tab',\n  // Note that usually we'd go through a bit more trouble and set up another class so that\n  // the inlined template of `MatTab` isn't duplicated, however the template is small enough\n  // that creating the extra class will generate more code than just duplicating the template.\n  templateUrl: 'tab.html',\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n  providers: [{provide: MAT_TAB, useExisting: MatTab}],\n  host: {\n    // This element will be rendered on the server in order to support hydration.\n    // Hide it so it doesn't cause a layout shift when it's removed on the client.\n    'hidden': '',\n  },\n})\nexport class MatTab implements OnInit, OnChanges, OnDestroy {\n  private _viewContainerRef = inject(ViewContainerRef);\n  _closestTabGroup = inject(MAT_TAB_GROUP, {optional: true});\n\n  /** whether the tab is disabled. */\n  @Input({transform: booleanAttribute})\n  disabled: boolean = false;\n\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel)\n  get templateLabel(): MatTabLabel {\n    return this._templateLabel;\n  }\n  set templateLabel(value: MatTabLabel) {\n    this._setTemplateLabelInput(value);\n  }\n  private _templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  // We need an initializer here to avoid a TS error. The value will be set in `ngAfterViewInit`.\n  private _explicitContent: TemplateRef<any> = undefined!;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Classes to be passed to the tab label inside the mat-tab-header container. */\n  @Input() labelClass: string | string[];\n\n  /** Classes to be passed to the tab mat-tab-body container. */\n  @Input() bodyClass: string | string[];\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  // TODO(crisbeto): we no longer use this, but some internal apps appear to rely on it.\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(...args: unknown[]);\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n      this._explicitContent || this._implicitContent,\n      this._viewContainerRef,\n    );\n  }\n\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  private _setTemplateLabelInput(value: MatTabLabel | undefined) {\n    // Only update the label if the query managed to find one. This works around an issue where a\n    // user may have manually set `templateLabel` during creation mode, which would then get\n    // clobbered by `undefined` when the query resolves. Also note that we check that the closest\n    // tab matches the current one so that we don't pick up labels from nested tabs.\n    if (value && value._closestTab === this) {\n      this._templateLabel = value;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\n\n/**\n * Item inside a tab header relative to which the ink bar can be aligned.\n * @docs-private\n */\nexport interface MatInkBarItem extends OnInit, OnDestroy {\n  elementRef: ElementRef<HTMLElement>;\n  activateInkBar(previousIndicatorClientRect?: DOMRect): void;\n  deactivateInkBar(): void;\n  fitInkBarToContent: boolean;\n}\n\n/** Class that is applied when a tab indicator is active. */\nconst ACTIVE_CLASS = 'mdc-tab-indicator--active';\n\n/** Class that is applied when the tab indicator should not transition. */\nconst NO_TRANSITION_CLASS = 'mdc-tab-indicator--no-transition';\n\n/**\n * Abstraction around the MDC tab indicator that acts as the tab header's ink bar.\n * @docs-private\n */\nexport class MatInkBar {\n  /** Item to which the ink bar is aligned currently. */\n  private _currentItem: MatInkBarItem | undefined;\n\n  constructor(private _items: QueryList<MatInkBarItem>) {}\n\n  /** Hides the ink bar. */\n  hide() {\n    this._items.forEach(item => item.deactivateInkBar());\n    this._currentItem = undefined;\n  }\n\n  /** Aligns the ink bar to a DOM node. */\n  alignToElement(element: HTMLElement) {\n    const correspondingItem = this._items.find(item => item.elementRef.nativeElement === element);\n    const currentItem = this._currentItem;\n\n    if (correspondingItem === currentItem) {\n      return;\n    }\n\n    currentItem?.deactivateInkBar();\n\n    if (correspondingItem) {\n      const domRect = currentItem?.elementRef.nativeElement.getBoundingClientRect?.();\n\n      // The ink bar won't animate unless we give it the `DOMRect` of the previous item.\n      correspondingItem.activateInkBar(domRect);\n      this._currentItem = correspondingItem;\n    }\n  }\n}\n\n@Directive()\nexport abstract class InkBarItem implements OnInit, OnDestroy {\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _inkBarElement: HTMLElement | null;\n  private _inkBarContentElement: HTMLElement | null;\n  private _fitToContent = false;\n\n  /** Whether the ink bar should fit to the entire tab or just its content. */\n  @Input({transform: booleanAttribute})\n  get fitInkBarToContent(): boolean {\n    return this._fitToContent;\n  }\n  set fitInkBarToContent(newValue: boolean) {\n    if (this._fitToContent !== newValue) {\n      this._fitToContent = newValue;\n\n      if (this._inkBarElement) {\n        this._appendInkBarElement();\n      }\n    }\n  }\n\n  /** Aligns the ink bar to the current item. */\n  activateInkBar(previousIndicatorClientRect?: DOMRect) {\n    const element = this._elementRef.nativeElement;\n\n    // Early exit if no indicator is present to handle cases where an indicator\n    // may be activated without a prior indicator state\n    if (\n      !previousIndicatorClientRect ||\n      !element.getBoundingClientRect ||\n      !this._inkBarContentElement\n    ) {\n      element.classList.add(ACTIVE_CLASS);\n      return;\n    }\n\n    // This animation uses the FLIP approach. You can read more about it at the link below:\n    // https://aerotwist.com/blog/flip-your-animations/\n\n    // Calculate the dimensions based on the dimensions of the previous indicator\n    const currentClientRect = element.getBoundingClientRect();\n    const widthDelta = previousIndicatorClientRect.width / currentClientRect.width;\n    const xPosition = previousIndicatorClientRect.left - currentClientRect.left;\n    element.classList.add(NO_TRANSITION_CLASS);\n    this._inkBarContentElement.style.setProperty(\n      'transform',\n      `translateX(${xPosition}px) scaleX(${widthDelta})`,\n    );\n\n    // Force repaint before updating classes and transform to ensure the transform properly takes effect\n    element.getBoundingClientRect();\n\n    element.classList.remove(NO_TRANSITION_CLASS);\n    element.classList.add(ACTIVE_CLASS);\n    this._inkBarContentElement.style.setProperty('transform', '');\n  }\n\n  /** Removes the ink bar from the current item. */\n  deactivateInkBar() {\n    this._elementRef.nativeElement.classList.remove(ACTIVE_CLASS);\n  }\n\n  /** Initializes the foundation. */\n  ngOnInit() {\n    this._createInkBarElement();\n  }\n\n  /** Destroys the foundation. */\n  ngOnDestroy() {\n    this._inkBarElement?.remove();\n    this._inkBarElement = this._inkBarContentElement = null!;\n  }\n\n  /** Creates and appends the ink bar element. */\n  private _createInkBarElement() {\n    const documentNode = this._elementRef.nativeElement.ownerDocument || document;\n    const inkBarElement = (this._inkBarElement = documentNode.createElement('span'));\n    const inkBarContentElement = (this._inkBarContentElement = documentNode.createElement('span'));\n\n    inkBarElement.className = 'mdc-tab-indicator';\n    inkBarContentElement.className =\n      'mdc-tab-indicator__content mdc-tab-indicator__content--underline';\n\n    inkBarElement.appendChild(this._inkBarContentElement);\n    this._appendInkBarElement();\n  }\n\n  /**\n   * Appends the ink bar to the tab host element or content, depending on whether\n   * the ink bar should fit to content.\n   */\n  private _appendInkBarElement() {\n    if (!this._inkBarElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Ink bar element has not been created and cannot be appended');\n    }\n\n    const parentElement = this._fitToContent\n      ? this._elementRef.nativeElement.querySelector('.mdc-tab__content')\n      : this._elementRef.nativeElement;\n\n    if (!parentElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Missing element to host the ink bar');\n    }\n\n    parentElement!.appendChild(this._inkBarElement!);\n  }\n}\n\n/**\n * Interface for a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): {left: string; width: string};\n}\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER = new InjectionToken<_MatInkBarPositioner>(\n  'MatInkBarPositioner',\n  {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY,\n  },\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, ElementRef, Input, booleanAttribute, inject} from '@angular/core';\nimport {InkBarItem} from './ink-bar';\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  host: {\n    '[class.mat-mdc-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  },\n})\nexport class MatTabLabelWrapper extends InkBarItem {\n  elementRef = inject(ElementRef);\n\n  /** Whether the tab is disabled. */\n  @Input({transform: booleanAttribute})\n  disabled: boolean = false;\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {FocusKeyManager, FocusableOption} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {SharedResizeObserver} from '@angular/cdk/observers/private';\nimport {Platform, _bindEventWithOptions} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  ANIMATION_MODULE_TYPE,\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injector,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  QueryList,\n  Renderer2,\n  afterNextRender,\n  booleanAttribute,\n  inject,\n  numberAttribute,\n} from '@angular/core';\nimport {EMPTY, Observable, Observer, Subject, merge, of as observableOf, timer} from 'rxjs';\nimport {debounceTime, filter, skip, startWith, switchMap, takeUntil} from 'rxjs/operators';\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions = {\n  passive: true,\n};\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n/** Item inside a paginated tab header. */\nexport type MatPaginatedTabHeaderItem = FocusableOption & {elementRef: ElementRef};\n\n/**\n * Base class for a tab header that supported pagination.\n * @docs-private\n */\n@Directive()\nexport abstract class MatPaginatedTabHeader\n  implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy\n{\n  protected _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  protected _changeDetectorRef = inject(ChangeDetectorRef);\n  private _viewportRuler = inject(ViewportRuler);\n  private _dir = inject(Directionality, {optional: true});\n  private _ngZone = inject(NgZone);\n  private _platform = inject(Platform);\n  private _sharedResizeObserver = inject(SharedResizeObserver);\n  private _injector = inject(Injector);\n  private _renderer = inject(Renderer2);\n  _animationMode = inject(ANIMATION_MODULE_TYPE, {optional: true});\n  private _eventCleanups: (() => void)[];\n\n  abstract _items: QueryList<MatPaginatedTabHeaderItem>;\n  abstract _inkBar: {hide: () => void; alignToElement: (element: HTMLElement) => void};\n  abstract _tabListContainer: ElementRef<HTMLElement>;\n  abstract _tabList: ElementRef<HTMLElement>;\n  abstract _tabListInner: ElementRef<HTMLElement>;\n  abstract _nextPaginator: ElementRef<HTMLElement>;\n  abstract _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  protected readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatPaginatedTabHeaderItem>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  @Input({transform: booleanAttribute})\n  disablePagination: boolean = false;\n\n  /** The index of the active tab. */\n  @Input({transform: numberAttribute})\n  get selectedIndex(): number {\n    return this._selectedIndex;\n  }\n  set selectedIndex(v: number) {\n    const value = isNaN(v) ? 0 : v;\n\n    if (this._selectedIndex != value) {\n      this._selectedIndexChanged = true;\n      this._selectedIndex = value;\n\n      if (this._keyManager) {\n        this._keyManager.updateActiveItem(value);\n      }\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    this._eventCleanups = this._ngZone.runOutsideAngular(() => [\n      this._renderer.listen(this._elementRef.nativeElement, 'mouseleave', () =>\n        this._stopInterval(),\n      ),\n    ]);\n  }\n\n  /** Called when the user has selected an item via the keyboard. */\n  protected abstract _itemSelected(event: KeyboardEvent): void;\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n\n    this._eventCleanups.push(\n      _bindEventWithOptions(\n        this._renderer,\n        this._previousPaginator.nativeElement,\n        'touchstart',\n        () => this._handlePaginatorPress('before'),\n        passiveEventListenerOptions,\n      ),\n      _bindEventWithOptions(\n        this._renderer,\n        this._nextPaginator.nativeElement,\n        'touchstart',\n        () => this._handlePaginatorPress('after'),\n        passiveEventListenerOptions,\n      ),\n    );\n  }\n\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf('ltr');\n    // We need to debounce resize events because the alignment logic is expensive.\n    // If someone animates the width of tabs, we don't want to realign on every animation frame.\n    // Once we haven't seen any more resize events in the last 32ms (~2 animaion frames) we can\n    // re-align.\n    const resize = this._sharedResizeObserver\n      .observe(this._elementRef.nativeElement)\n      .pipe(debounceTime(32), takeUntil(this._destroyed));\n    // Note: We do not actually need to watch these events for proper functioning of the tabs,\n    // the resize events above should capture any viewport resize that we care about. However,\n    // removing this is fairly breaking for screenshot tests, so we're leaving it here for now.\n    const viewportResize = this._viewportRuler.change(150).pipe(takeUntil(this._destroyed));\n\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager<MatPaginatedTabHeaderItem>(this._items)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withHomeAndEnd()\n      .withWrap()\n      // Allow focus to land on disabled tabs, as per https://w3c.github.io/aria-practices/#kbd_disabled_controls\n      .skipPredicate(() => false);\n\n    this._keyManager.updateActiveItem(this._selectedIndex);\n\n    // Note: We do not need to realign after the first render for proper functioning of the tabs\n    // the resize events above should fire when we first start observing the element. However,\n    // removing this is fairly breaking for screenshot tests, so we're leaving it here for now.\n    afterNextRender(realign, {injector: this._injector});\n\n    // On dir change or resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, viewportResize, resize, this._items.changes, this._itemsResized())\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        // We need to defer this to give the browser some time to recalculate\n        // the element dimensions. The call has to be wrapped in `NgZone.run`,\n        // because the viewport change handler runs outside of Angular.\n        this._ngZone.run(() => {\n          Promise.resolve().then(() => {\n            // Clamp the scroll distance, because it can change with the number of tabs.\n            this._scrollDistance = Math.max(\n              0,\n              Math.min(this._getMaxScrollDistance(), this._scrollDistance),\n            );\n            realign();\n          });\n        });\n        this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n      });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  /** Sends any changes that could affect the layout of the items. */\n  private _itemsResized(): Observable<ResizeObserverEntry[]> {\n    if (typeof ResizeObserver !== 'function') {\n      return EMPTY;\n    }\n\n    return this._items.changes.pipe(\n      startWith(this._items),\n      switchMap(\n        (tabItems: QueryList<MatPaginatedTabHeaderItem>) =>\n          new Observable((observer: Observer<ResizeObserverEntry[]>) =>\n            this._ngZone.runOutsideAngular(() => {\n              const resizeObserver = new ResizeObserver(entries => observer.next(entries));\n              tabItems.forEach(item => resizeObserver.observe(item.elementRef.nativeElement));\n              return () => {\n                resizeObserver.disconnect();\n              };\n            }),\n          ),\n      ),\n      // Skip the first emit since the resize observer emits when an item\n      // is observed for new items when the tab is already inserted\n      skip(1),\n      // Skip emissions where all the elements are invisible since we don't want\n      // the header to try and re-render with invalid measurements. See #25574.\n      filter(entries => entries.some(e => e.contentRect.width > 0 && e.contentRect.height > 0)),\n    );\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._items.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._items.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventCleanups.forEach(cleanup => cleanup());\n    this._keyManager?.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case ENTER:\n      case SPACE:\n        if (this.focusIndex !== this.selectedIndex) {\n          const item = this._items.get(this.focusIndex);\n\n          if (item && !item.disabled) {\n            this.selectFocusedIndex.emit(this.focusIndex);\n            this._itemSelected(event);\n          }\n        }\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent || '';\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    return this._items ? !!this._items.toArray()[index] : true;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._items && this._items.length) {\n      this._items.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    if (this.disablePagination) {\n      return;\n    }\n\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    if (this._platform.TRIDENT || this._platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number {\n    return this._scrollDistance;\n  }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = ((direction == 'before' ? -1 : 1) * viewLength) / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    if (this.disablePagination) {\n      return;\n    }\n\n    const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) {\n      return;\n    }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    const {offsetLeft, offsetWidth} = selectedLabel.elementRef.nativeElement;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = offsetLeft;\n      labelAfterPos = labelBeforePos + offsetWidth;\n    } else {\n      labelAfterPos = this._tabListInner.nativeElement.offsetWidth - offsetLeft;\n      labelBeforePos = labelAfterPos - offsetWidth;\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += Math.min(\n        labelAfterPos - afterVisiblePos,\n        labelBeforePos - beforeVisiblePos,\n      );\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    if (this.disablePagination) {\n      this._showPaginationControls = false;\n    } else {\n      const scrollWidth = this._tabListInner.nativeElement.scrollWidth;\n      const containerWidth = this._elementRef.nativeElement.offsetWidth;\n\n      // Usually checking that the scroll width is greater than the container width should be\n      // enough, but on Safari at specific widths the browser ends up rounding up when there's\n      // no pagination and rounding down once the pagination is added. This can throw the component\n      // into an infinite loop where the pagination shows up and disappears constantly. We work\n      // around it by adding a threshold to the calculation. From manual testing the threshold\n      // can be lowered to 2px and still resolve the issue, but we set a higher one to be safe.\n      // This shouldn't cause any content to be clipped, because tabs have a 24px horizontal\n      // padding. See b/316395154 for more information.\n      const isEnabled = scrollWidth - containerWidth >= 5;\n\n      if (!isEnabled) {\n        this.scrollDistance = 0;\n      }\n\n      if (isEnabled !== this._showPaginationControls) {\n        this._showPaginationControls = isEnabled;\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    if (this.disablePagination) {\n      this._disableScrollAfter = this._disableScrollBefore = true;\n    } else {\n      // Check if the pagination arrows should be activated.\n      this._disableScrollBefore = this.scrollDistance == 0;\n      this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabListInner.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return lengthOfTabList - viewLength || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedItem =\n      this._items && this._items.length ? this._items.toArray()[this.selectedIndex] : null;\n    const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n\n    if (selectedLabelWrapper) {\n      this._inkBar.alignToElement(selectedLabelWrapper);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection, mouseEvent?: MouseEvent) {\n    // Don't start auto scrolling for right mouse button clicks. Note that we shouldn't have to\n    // null check the `button`, but we do it so we don't break tests that use fake events.\n    if (mouseEvent && mouseEvent.button != null && mouseEvent.button !== 0) {\n      return;\n    }\n\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    if (this.disablePagination) {\n      return {maxScrollDistance: 0, distance: 0};\n    }\n\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  OnDestroy,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  booleanAttribute,\n} from '@angular/core';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatInkBar} from './ink-bar';\nimport {MatPaginatedTabHeader} from './paginated-tab-header';\nimport {CdkObserveContent} from '@angular/cdk/observers';\nimport {MatRipple} from '../core';\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrl: 'tab-header.css',\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  host: {\n    'class': 'mat-mdc-tab-header',\n    '[class.mat-mdc-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-mdc-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n  imports: [MatRipple, CdkObserveContent],\n})\nexport class MatTabHeader\n  extends MatPaginatedTabHeader\n  implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy\n{\n  @ContentChildren(MatTabLabelWrapper, {descendants: false}) _items: QueryList<MatTabLabelWrapper>;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('tabListInner', {static: true}) _tabListInner: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n  _inkBar: MatInkBar;\n\n  /** Aria label of the header. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Sets the `aria-labelledby` of the header. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether the ripple effect is disabled or not. */\n  @Input({transform: booleanAttribute})\n  disableRipple: boolean = false;\n\n  override ngAfterContentInit() {\n    this._inkBar = new MatInkBar(this._items);\n    super.ngAfterContentInit();\n  }\n\n  protected _itemSelected(event: KeyboardEvent) {\n    event.preventDefault();\n  }\n}\n","<!--\n Note that this intentionally uses a `div` instead of a `button`, because it's not part of\n the regular tabs flow and is only here to support mouse users. It should also not be focusable.\n-->\n<div class=\"mat-mdc-tab-header-pagination mat-mdc-tab-header-pagination-before\"\n     #previousPaginator\n     mat-ripple\n     [matRippleDisabled]=\"_disableScrollBefore || disableRipple\"\n     [class.mat-mdc-tab-header-pagination-disabled]=\"_disableScrollBefore\"\n     (click)=\"_handlePaginatorClick('before')\"\n     (mousedown)=\"_handlePaginatorPress('before', $event)\"\n     (touchend)=\"_stopInterval()\">\n  <div class=\"mat-mdc-tab-header-pagination-chevron\"></div>\n</div>\n\n<div\n  class=\"mat-mdc-tab-label-container\"\n  #tabListContainer\n  (keydown)=\"_handleKeydown($event)\"\n  [class._mat-animation-noopable]=\"_animationMode === 'NoopAnimations'\">\n  <div\n    #tabList\n    class=\"mat-mdc-tab-list\"\n    role=\"tablist\"\n    [attr.aria-label]=\"ariaLabel || null\"\n    [attr.aria-labelledby]=\"ariaLabelledby || null\"\n    (cdkObserveContent)=\"_onContentChanges()\">\n    <div class=\"mat-mdc-tab-labels\" #tabListInner>\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n\n<div class=\"mat-mdc-tab-header-pagination mat-mdc-tab-header-pagination-after\"\n     #nextPaginator\n     mat-ripple\n     [matRippleDisabled]=\"_disableScrollAfter || disableRipple\"\n     [class.mat-mdc-tab-header-pagination-disabled]=\"_disableScrollAfter\"\n     (mousedown)=\"_handlePaginatorPress('after', $event)\"\n     (click)=\"_handlePaginatorClick('after')\"\n     (touchend)=\"_stopInterval()\">\n  <div class=\"mat-mdc-tab-header-pagination-chevron\"></div>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\nimport {InjectionToken} from '@angular/core';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  disablePagination?: boolean;\n\n  /**\n   * Whether the ink bar should fit its width to the size of the tab label content.\n   * This only applies to the MDC-based tabs.\n   */\n  fitInkBarToContent?: boolean;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  dynamicHeight?: boolean;\n\n  /** `tabindex` to be set on the inner element that wraps the tab content. */\n  contentTabIndex?: number;\n\n  /**\n   * By default tabs remove their content from the DOM while it's off-screen.\n   * Setting this to `true` will keep it in the DOM which will prevent elements\n   * like iframes and videos from reloading next time it comes back into the view.\n   */\n  preserveContent?: boolean;\n\n  /** Whether tabs should be stretched to fill the header. */\n  stretchTabs?: boolean;\n\n  /** Alignment for the tabs label. */\n  alignTabs?: 'start' | 'center' | 'end';\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken<MatTabsConfig>('MAT_TABS_CONFIG');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {CdkPortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {\n  ANIMATION_MODULE_TYPE,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injector,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n  afterNextRender,\n  inject,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({selector: '[matTabBodyHost]'})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  private _host = inject(MatTabBody);\n\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  override ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition()))\n      .subscribe((isCentering: boolean) => {\n        if (this._host._content && isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      if (!this._host.preserveContent) {\n        this.detach();\n      }\n    });\n  }\n\n  /** Clean up centering subscription. */\n  override ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * pseudo-prior state.\n *\n * @deprecated Will stop being exported.\n * @breaking-change 21.0.0\n */\nexport type MatTabBodyPositionState = 'left' | 'center' | 'right';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n *\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 21.0.0\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrl: 'tab-body.css',\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  host: {\n    'class': 'mat-mdc-tab-body',\n    // In most cases the `visibility: hidden` that we set on the off-screen content is enough\n    // to stop interactions with it, but if a child element sets its own `visibility`, it'll\n    // override the one from the parent. This ensures that even those elements will be removed\n    // from the accessibility tree.\n    '[attr.inert]': '_position === \"center\" ? null : \"\"',\n  },\n  imports: [MatTabBodyPortal, CdkScrollable],\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _dir = inject(Directionality, {optional: true});\n  private _ngZone = inject(NgZone);\n  private _injector = inject(Injector);\n  private _renderer = inject(Renderer2);\n  private _animationsModule = inject(ANIMATION_MODULE_TYPE, {optional: true});\n  private _eventCleanups?: (() => void)[];\n  private _initialized: boolean;\n  private _fallbackTimer: ReturnType<typeof setTimeout>;\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Current position of the body within the tab group. */\n  _position: MatTabBodyPositionState;\n\n  /** Previous position of the body. */\n  protected _previousPosition: MatTabBodyPositionState | undefined;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  readonly _afterLeavingCenter: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(MatTabBodyPortal) _portalHost: MatTabBodyPortal;\n\n  /** Element in which the content is rendered. */\n  @ViewChild('content') _contentElement: ElementRef<HTMLElement> | undefined;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** Whether the tab's content should be kept in the DOM while it's off-screen. */\n  @Input() preserveContent: boolean = false;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    if (this._dir) {\n      const changeDetectorRef = inject(ChangeDetectorRef);\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnInit() {\n    this._bindTransitionEvents();\n\n    if (this._position === 'center') {\n      this._setActiveClass(true);\n\n      // Allows for the dynamic height to animate properly on the initial run.\n      afterNextRender(() => this._onCentering.emit(this._elementRef.nativeElement.clientHeight), {\n        injector: this._injector,\n      });\n    }\n\n    this._initialized = true;\n  }\n\n  ngOnDestroy() {\n    clearTimeout(this._fallbackTimer);\n    this._eventCleanups?.forEach(cleanup => cleanup());\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  /** Sets up the transition events. */\n  private _bindTransitionEvents() {\n    this._ngZone.runOutsideAngular(() => {\n      const element = this._elementRef.nativeElement;\n      const transitionDone = (event: TransitionEvent) => {\n        if (event.target === this._contentElement?.nativeElement) {\n          this._elementRef.nativeElement.classList.remove('mat-tab-body-animating');\n\n          // Only fire the actual callback when a transition is fully finished,\n          // otherwise the content can jump around when the next transition starts.\n          if (event.type === 'transitionend') {\n            this._transitionDone();\n          }\n        }\n      };\n\n      this._eventCleanups = [\n        this._renderer.listen(element, 'transitionstart', (event: TransitionEvent) => {\n          if (event.target === this._contentElement?.nativeElement) {\n            this._elementRef.nativeElement.classList.add('mat-tab-body-animating');\n            this._transitionStarted();\n          }\n        }),\n        this._renderer.listen(element, 'transitionend', transitionDone),\n        this._renderer.listen(element, 'transitioncancel', transitionDone),\n      ];\n    });\n  }\n\n  /** Called when a transition has started. */\n  private _transitionStarted() {\n    clearTimeout(this._fallbackTimer);\n    const isCentering = this._position === 'center';\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** Called when a transition is done. */\n  private _transitionDone() {\n    if (this._position === 'center') {\n      this._onCentered.emit();\n    } else if (this._previousPosition === 'center') {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** Sets the active styling on the tab body based on its current position. */\n  _setActiveClass(isActive: boolean) {\n    this._elementRef.nativeElement.classList.toggle('mat-mdc-tab-body-active', isActive);\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(): boolean {\n    return this._positionIndex === 0;\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    this._previousPosition = this._position;\n\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n\n    if (this._animationsDisabled()) {\n      this._simulateTransitionEvents();\n    } else if (\n      this._initialized &&\n      (this._position === 'center' || this._previousPosition === 'center')\n    ) {\n      // The transition events are load-bearing and in some cases they might not fire (e.g.\n      // tests setting `* {transition: none}` to disable animations). This timeout will simulate\n      // them if a transition doesn't start within a certain amount of time.\n      clearTimeout(this._fallbackTimer);\n      this._fallbackTimer = this._ngZone.runOutsideAngular(() =>\n        setTimeout(() => this._simulateTransitionEvents(), 100),\n      );\n    }\n  }\n\n  /** Simulates the body's transition events in an environment where they might not fire. */\n  private _simulateTransitionEvents() {\n    this._transitionStarted();\n    afterNextRender(() => this._transitionDone(), {injector: this._injector});\n  }\n\n  /** Whether animations are disabled for the tab group. */\n  private _animationsDisabled() {\n    return (\n      this._animationsModule === 'NoopAnimations' ||\n      this.animationDuration === '0ms' ||\n      this.animationDuration === '0s'\n    );\n  }\n}\n","<div\n   class=\"mat-mdc-tab-body-content\"\n   #content\n   cdkScrollable\n   [class.mat-tab-body-content-left]=\"_position === 'left'\"\n   [class.mat-tab-body-content-right]=\"_position === 'right'\"\n   [class.mat-tab-body-content-can-animate]=\"_position === 'center' || _previousPosition === 'center'\">\n  <ng-template matTabBodyHost></ng-template>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  booleanAttribute,\n  inject,\n  numberAttribute,\n  ANIMATION_MODULE_TYPE,\n  ViewChildren,\n  AfterViewInit,\n  NgZone,\n} from '@angular/core';\nimport {MAT_TAB_GROUP, MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {ThemePalette, MatRipple} from '../core';\nimport {merge, Subscription} from 'rxjs';\nimport {MAT_TABS_CONFIG, MatTabsConfig} from './tab-config';\nimport {startWith} from 'rxjs/operators';\nimport {_IdGenerator, CdkMonitorFocus, FocusOrigin} from '@angular/cdk/a11y';\nimport {MatTabBody} from './tab-body';\nimport {CdkPortalOutlet} from '@angular/cdk/portal';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {Platform} from '@angular/cdk/platform';\n\n/** @docs-private */\nexport interface MatTabGroupBaseHeader {\n  _alignInkBarToSelectedTab(): void;\n  updatePagination(): void;\n  focusIndex: number;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Boolean constant that determines whether the tab group supports the `backgroundColor` input */\nconst ENABLE_BACKGROUND_INPUT = true;\n\n/**\n * Material design tab-group component. Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrl: 'tab-group.css',\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [\n    {\n      provide: MAT_TAB_GROUP,\n      useExisting: MatTabGroup,\n    },\n  ],\n  host: {\n    'class': 'mat-mdc-tab-group',\n    '[class]': '\"mat-\" + (color || \"primary\")',\n    '[class.mat-mdc-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-mdc-tab-group-inverted-header]': 'headerPosition === \"below\"',\n    '[class.mat-mdc-tab-group-stretch-tabs]': 'stretchTabs',\n    '[attr.mat-align-tabs]': 'alignTabs',\n    '[style.--mat-tab-animation-duration]': 'animationDuration',\n  },\n  imports: [\n    MatTabHeader,\n    MatTabLabelWrapper,\n    CdkMonitorFocus,\n    MatRipple,\n    CdkPortalOutlet,\n    MatTabBody,\n  ],\n})\nexport class MatTabGroup\n  implements AfterViewInit, AfterContentInit, AfterContentChecked, OnDestroy\n{\n  readonly _elementRef = inject(ElementRef);\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  private _ngZone = inject(NgZone);\n  private _tabsSubscription = Subscription.EMPTY;\n  private _tabLabelSubscription = Subscription.EMPTY;\n  private _tabBodySubscription = Subscription.EMPTY;\n\n  _animationMode = inject(ANIMATION_MODULE_TYPE, {optional: true});\n\n  /**\n   * All tabs inside the tab group. This includes tabs that belong to groups that are nested\n   * inside the current one. We filter out only the tabs that belong to this group in `_tabs`.\n   */\n  @ContentChildren(MatTab, {descendants: true}) _allTabs: QueryList<MatTab>;\n  @ViewChildren(MatTabBody) _tabBodies: QueryList<MatTabBody> | undefined;\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** All of the tabs that belong to the group. */\n  _tabs: QueryList<MatTab> = new QueryList<MatTab>();\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Index of the tab that was focused last. */\n  private _lastFocusedTabIndex: number | null = null;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /**\n   * Theme color of the tab group. This API is supported in M2 themes only, it\n   * has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/tabs/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   */\n  @Input()\n  color: ThemePalette;\n\n  /** Whether the ink bar should fit its width to the size of the tab label content. */\n  @Input({transform: booleanAttribute})\n  get fitInkBarToContent(): boolean {\n    return this._fitInkBarToContent;\n  }\n  set fitInkBarToContent(value: boolean) {\n    this._fitInkBarToContent = value;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _fitInkBarToContent = false;\n\n  /** Whether tabs should be stretched to fill the header. */\n  @Input({alias: 'mat-stretch-tabs', transform: booleanAttribute})\n  stretchTabs: boolean = true;\n\n  /** Alignment for tabs label. */\n  @Input({alias: 'mat-align-tabs'})\n  alignTabs: string | null = null;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input({transform: booleanAttribute})\n  dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input({transform: numberAttribute})\n  get selectedIndex(): number | null {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: number) {\n    this._indexToSelect = isNaN(value) ? null : value;\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string {\n    return this._animationDuration;\n  }\n  set animationDuration(value: string | number) {\n    const stringValue = value + '';\n    this._animationDuration = /^\\d+$/.test(stringValue) ? value + 'ms' : stringValue;\n  }\n  private _animationDuration: string;\n\n  /**\n   * `tabindex` to be set on the inner element that wraps the tab content. Can be used for improved\n   * accessibility when the tab does not have focusable elements or if it has scrollable content.\n   * The `tabindex` will be removed automatically for inactive tabs.\n   * Read more at https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html\n   */\n  @Input({transform: numberAttribute})\n  get contentTabIndex(): number | null {\n    return this._contentTabIndex;\n  }\n\n  set contentTabIndex(value: number) {\n    this._contentTabIndex = isNaN(value) ? null : value;\n  }\n\n  private _contentTabIndex: number | null;\n\n  /**\n   * Whether pagination should be disabled. This can be used to avoid unnecessary\n   * layout recalculations if it's known that pagination won't be required.\n   */\n  @Input({transform: booleanAttribute})\n  disablePagination: boolean = false;\n\n  /** Whether ripples in the tab group are disabled. */\n  @Input({transform: booleanAttribute})\n  disableRipple: boolean = false;\n\n  /**\n   * By default tabs remove their content from the DOM while it's off-screen.\n   * Setting this to `true` will keep it in the DOM which will prevent elements\n   * like iframes and videos from reloading next time it comes back into the view.\n   */\n  @Input({transform: booleanAttribute})\n  preserveContent: boolean = false;\n\n  /**\n   * Theme color of the background of the tab group. This API is supported in M2 themes only, it\n   * has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/tabs/styling.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n   *\n   * @deprecated The background color should be customized through Sass theming APIs.\n   * @breaking-change 20.0.0 Remove this input\n   */\n  @Input()\n  get backgroundColor(): ThemePalette {\n    return this._backgroundColor;\n  }\n\n  set backgroundColor(value: ThemePalette) {\n    if (!ENABLE_BACKGROUND_INPUT) {\n      throw new Error(`mat-tab-group background color must be set through the Sass theming API`);\n    }\n\n    const classList: DOMTokenList = this._elementRef.nativeElement.classList;\n\n    classList.remove('mat-tabs-with-background', `mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      classList.add('mat-tabs-with-background', `mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n\n  private _backgroundColor: ThemePalette;\n\n  /** Aria label of the inner `tablist` of the group. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Sets the `aria-labelledby` of the inner `tablist` of the group. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n    new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n    new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: string;\n\n  /** Whether the tab group is rendered on the server. */\n  protected _isServer: boolean = !inject(Platform).isBrowser;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const defaultConfig = inject<MatTabsConfig>(MAT_TABS_CONFIG, {optional: true});\n\n    this._groupId = inject(_IdGenerator).getId('mat-tab-group-');\n    this.animationDuration =\n      defaultConfig && defaultConfig.animationDuration ? defaultConfig.animationDuration : '500ms';\n    this.disablePagination =\n      defaultConfig && defaultConfig.disablePagination != null\n        ? defaultConfig.disablePagination\n        : false;\n    this.dynamicHeight =\n      defaultConfig && defaultConfig.dynamicHeight != null ? defaultConfig.dynamicHeight : false;\n    if (defaultConfig?.contentTabIndex != null) {\n      this.contentTabIndex = defaultConfig.contentTabIndex;\n    }\n    this.preserveContent = !!defaultConfig?.preserveContent;\n    this.fitInkBarToContent =\n      defaultConfig && defaultConfig.fitInkBarToContent != null\n        ? defaultConfig.fitInkBarToContent\n        : false;\n    this.stretchTabs =\n      defaultConfig && defaultConfig.stretchTabs != null ? defaultConfig.stretchTabs : true;\n    this.alignTabs =\n      defaultConfig && defaultConfig.alignTabs != null ? defaultConfig.alignTabs : null;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = (this._indexToSelect = this._clampTabIndex(this._indexToSelect));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n        // Preserve the height so page doesn't scroll up during tab change.\n        // Fixes https://stackblitz.com/edit/mat-tabs-scroll-page-top-on-tab-change\n        const wrapper = this._tabBodyWrapper.nativeElement;\n        wrapper.style.minHeight = wrapper.clientHeight + 'px';\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => (tab.isActive = index === indexToSelect));\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n          // Clear the min-height, this was needed during tab change to avoid\n          // unnecessary scrolling.\n          this._tabBodyWrapper.nativeElement.style.minHeight = '';\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._lastFocusedTabIndex = null;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToAllTabChanges();\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n        let selectedTab: MatTab | undefined;\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            this._lastFocusedTabIndex = null;\n            selectedTab = tabs[i];\n            break;\n          }\n        }\n\n        // If we haven't found an active tab and a tab exists at the selected index, it means\n        // that the active tab was swapped out. Since this won't be picked up by the rendering\n        // loop in `ngAfterContentChecked`, we need to sync it up manually.\n        if (!selectedTab && tabs[indexToSelect]) {\n          Promise.resolve().then(() => {\n            tabs[indexToSelect].isActive = true;\n            this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n          });\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterViewInit() {\n    this._tabBodySubscription = this._tabBodies!.changes.subscribe(() => this._bodyCentered(true));\n  }\n\n  /** Listens to changes in all of the tabs. */\n  private _subscribeToAllTabChanges() {\n    // Since we use a query with `descendants: true` to pick up the tabs, we may end up catching\n    // some that are inside of nested tab groups. We filter them out manually by checking that\n    // the closest group to the tab is the current one.\n    this._allTabs.changes.pipe(startWith(this._allTabs)).subscribe((tabs: QueryList<MatTab>) => {\n      this._tabs.reset(\n        tabs.filter(tab => {\n          return tab._closestTabGroup === this || !tab._closestTabGroup;\n        }),\n      );\n      this._tabs.notifyOnChanges();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabs.destroy();\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n    this._tabBodySubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  /**\n   * Recalculates the tab group's pagination dimensions.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance. It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    if (this._tabHeader) {\n      this._tabHeader.updatePagination();\n    }\n  }\n\n  /**\n   * Sets focus to a particular tab.\n   * @param index Index of the tab to be focused.\n   */\n  focusTab(index: number) {\n    const header = this._tabHeader;\n\n    if (header) {\n      header.focusIndex = index;\n    }\n  }\n\n  _focusChanged(index: number) {\n    this._lastFocusedTabIndex = index;\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent();\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges)).subscribe(() =>\n      this._changeDetectorRef.markForCheck(),\n    );\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `${this._groupId}-label-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `${this._groupId}-content-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this.dynamicHeight || !this._tabBodyWrapperHeight) {\n      this._tabBodyWrapperHeight = tabHeight;\n      return;\n    }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this._ngZone.run(() => this.animationDone.emit());\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabGroupBaseHeader, index: number) {\n    tabHeader.focusIndex = index;\n\n    if (!tab.disabled) {\n      this.selectedIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(index: number): number {\n    const targetIndex = this._lastFocusedTabIndex ?? this.selectedIndex;\n    return index === targetIndex ? 0 : -1;\n  }\n\n  /** Callback for when the focused state of a tab has changed. */\n  _tabFocusChanged(focusOrigin: FocusOrigin, index: number) {\n    // Mouse/touch focus happens during the `mousedown`/`touchstart` phase which\n    // can cause the tab to be moved out from under the pointer, interrupting the\n    // click sequence (see #21898). We don't need to scroll the tab into view for\n    // such cases anyway, because it will be done when the tab becomes selected.\n    if (focusOrigin && focusOrigin !== 'mouse' && focusOrigin !== 'touch') {\n      this._tabHeader.focusIndex = index;\n    }\n  }\n\n  /**\n   * Callback invoked when the centered state of a tab body changes.\n   * @param isCenter Whether the tab will be in the center.\n   */\n  protected _bodyCentered(isCenter: boolean) {\n    // Marks all the existing tabs as inactive and the center tab as active. Note that this can\n    // be achieved much easier by using a class binding on each body. The problem with\n    // doing so is that we can't control the timing of when the class is removed from the\n    // previously-active element and added to the newly-active one. If there's a tick between\n    // removing the class and adding the new one, the content will jump in a very jarring way.\n    // We go through the trouble of setting the classes ourselves to guarantee that they're\n    // swapped out at the same time.\n    if (isCenter) {\n      this._tabBodies?.forEach((body, i) => body._setActiveClass(i === this._selectedIndex));\n    }\n  }\n}\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n","<ui-page-toolbar\n  [cancelButton]=\"true\"\n  [submitButton]=\"true\"\n  [pageType]=\"'client'\"\n  [editMode]=\"true\"\n  [itemName]=\"clientInfo().clientName\"\n  (cancelEvent)=\"onBack()\"\n  (submitEvent)=\"onSubmit()\"\n  (deleteEvent)=\"openDeleteConfirmationDialog(currentClientId)\"\n></ui-page-toolbar>\n\n<div class=\"client-form-wrapper\">\n  <form [formGroup]=\"form\">\n    <!-- <nav mat-tab-nav-bar [tabPanel]=\"tabPanel\" mat-stretch-tabs=\"false\">\n      @for (tab of tabs; track tab) {\n        <a\n          mat-tab-link\n          [routerLink]=\"tab.routerLink\"\n          routerLinkActive\n          #RouterLinkActive=\"routerLinkActive\"\n          [active]=\"RouterLinkActive.isActive\"\n        >\n          {{ tab.label }}\n        </a>\n      }\n  \n    </nav>\n    <mat-tab-nav-panel #tabPanel\n      ><router-outlet></router-outlet\n    ></mat-tab-nav-panel> -->\n    <mat-tab-group mat-stretch-tabs=\"false\" animationDuration=\"0ms\">\n      <mat-tab\n        label=\"General\"\n        i18n-label=\"@@ClientForm.tabGeneralLabel\"\n        bodyClass=\"tab-content\"\n      >\n        <ng-template matTabContent>\n          <ui-client-full-edit-form\n            [isClient]=\"true\"\n          ></ui-client-full-edit-form>\n        </ng-template>\n      </mat-tab>\n      <mat-tab\n        label=\"Programs\"\n        i18n-label=\"@@ClientForm.tabProgramsLabel\"\n        [disabled]=\"clientInfo().clientName.length === 0\"\n      >\n        <ng-template matTabContent>\n          <ui-client-full-edit-programs></ui-client-full-edit-programs>\n        </ng-template>\n      </mat-tab>\n      <!-- <mat-tab label=\"Notes\">\n        <ng-template matTabContent> Content 3 </ng-template>\n      </mat-tab> -->\n    </mat-tab-group>\n  </form>\n</div>\n","import { Component, OnDestroy, OnInit, inject } from '@angular/core';\nimport { Location } from '@angular/common';\nimport {\n  FormArray,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport {\n  Client,\n  ClientInfo,\n  ClientsService,\n  ShareClientsDataService,\n  ShareStateService,\n} from '@slowautomobile/exercises';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { lastValueFrom, timer, Subscription } from 'rxjs';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { DeleteConfirmationDialogComponent } from 'libs/ui/src/lib/components/deleteConfirmationDialog/deleteConfirmationDialog.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatTabGroup, MatTab, MatTabContent } from '@angular/material/tabs';\nimport {\n  PageToolbarComponent,\n  ClientFullEditFormComponent,\n  ClientFullEditProgramsComponent,\n} from '@slowautomobile/ui';\n\n// export interface TabNavigationTab {\n//   routerLink: any;\n//   label: string;\n// }\n\n@Component({\n    selector: 'sanareapp-client-form',\n    templateUrl: './client-form.component.html',\n    styleUrl: './client-form.component.scss',\n    imports: [\n        PageToolbarComponent,\n        ClientFullEditFormComponent,\n        ClientFullEditProgramsComponent,\n        FormsModule,\n        ReactiveFormsModule,\n        MatTabGroup,\n        MatTab,\n        MatTabContent,\n    ]\n})\nexport class ClientFormComponent implements OnInit, OnDestroy {\n  private location = inject(Location);\n  private formBuilder = inject(FormBuilder);\n  private route = inject(ActivatedRoute);\n  private clientsService = inject(ClientsService);\n  private _snackBar = inject(MatSnackBar);\n  dialog = inject(MatDialog);\n  private router = inject(Router);\n  private shareClientsDataService = inject(ShareClientsDataService);\n  private shareStateService = inject(ShareStateService);\n\n  subscriptions = new Subscription();\n\n  form!: FormGroup;\n  editMode = false;\n  currentClientId!: string;\n  // clientName!: string;\n  isLoading = this.shareStateService.isLoading;\n\n  clientInfo = this.shareClientsDataService.clientInfo;\n\n  ngOnInit(): void {\n    this._initForm();\n    this._checkEditMode();\n\n    // this.form.valueChanges.subscribe(value => console.log(value));\n  }\n\n  private _initForm() {\n    this.form = this.formBuilder.group({\n      clientInfo: this.formBuilder.group({\n        id: [''],\n        name: [''],\n        firstName: ['', Validators.required],\n        lastName: ['', Validators.required],\n        email: ['', Validators.required],\n        phone: ['', Validators.required],\n        address: this.formBuilder.group({\n          street: [''],\n          streetNumber: [''],\n          city: [''],\n          zipCode: [''],\n          country: [''],\n        }),\n      }),\n      programs: this.formBuilder.array([]),\n    });\n  }\n\n  get clientForm() {\n    return this.form.controls;\n  }\n\n  private _checkEditMode() {\n    // const subscription = this.route.params.subscribe(params => {\n\n    // Check for ClientId param\n    this.currentClientId = this.route.snapshot.paramMap.get('id') as string;\n\n    // Check for clientName query(or other queries)\n    // IT SHOULD BE REFACTORED IN NEW-PROGRAM-STEPPER, TO PASS QUERY IN PARAMS WITH NAVIGATION !~!!! UNTIL THEN, SIGNALS ARE USED(clientInfo())\n    // this.clientName = this.route.snapshot.queryParamMap.get(\n    //   'clientName',\n    // ) as string;\n\n    if (this.currentClientId) {\n      this.editMode = true;\n      // this.currentClientId = this.currentClientId;\n\n      this.clientsService.getClient(this.currentClientId).subscribe({\n        next: client => {\n          console.log(client);\n          this.form.get('clientInfo.id')?.setValue(this.currentClientId);\n          this.form.get('clientInfo.name')?.setValue(client.name);\n          this.form.get('clientInfo.firstName')?.setValue(client.firstName);\n          this.form.get('clientInfo.lastName')?.setValue(client.lastName);\n          this.form.get('clientInfo.email')?.setValue(client.email);\n          this.form.get('clientInfo.phone')?.setValue(client.phone);\n          this.form\n            .get('clientInfo.address.street')\n            ?.setValue(client.address?.street);\n          this.form\n            .get('clientInfo.address.streetNumber')\n            ?.setValue(client.address?.streetNumber);\n          this.form\n            .get('clientInfo.address.city')\n            ?.setValue(client.address?.city);\n          this.form\n            .get('clientInfo.address.zipCode')\n            ?.setValue(client.address?.zipCode);\n          this.form\n            .get('clientInfo.address.country')\n            ?.setValue(client.address?.country);\n\n          // this.clientForm['name'].setValue(client.name);\n          // this.clientForm['firstName'].setValue(client.firstName);\n          // this.clientForm['lastName'].setValue(client.lastName);\n          // this.clientForm['email'].setValue(client.email);\n          // this.clientForm['phone'].setValue(client.phone);\n\n          const programsArray = this.form.get('programs') as FormArray;\n          client.programs?.forEach(program => {\n            programsArray.push(new FormControl(program));\n          });\n\n          // If something goes wrong, comment this out!\n          // Use case: When reusing program from client1 to client2, clientId is set to client2, so that when New btn clicked(for creating brand new program for client), then setting this clientId used to automatically set selected client\n          // this.clientInfo.update(clientInfo => {\n          //   return {\n          //     clientId: this.currentClientId,\n          //     clientName: clientInfo.clientName,\n          //     programPosition: clientInfo.programPosition,\n          //     programId: clientInfo.programId,\n          //     programName: clientInfo.programName,\n          //     dateRange: clientInfo.dateRange,\n          //   };\n          // });\n          // On manual page reload, this will populate basic info for page functioning (clientId and clientName)\n          if (!this.clientInfo().clientName) {\n            this.clientInfo.update((currentValue: ClientInfo) => ({\n              ...currentValue,\n              clientId: this.currentClientId,\n              clientName: this.form.get('clientInfo.name')?.value,\n            }));\n          }\n        },\n        error: e => {\n          // Error handling logic\n          // error Snackbar is needed here and elsewhere!!!!!!\n          console.log(e);\n          this.router.navigateByUrl('clients');\n        },\n      });\n    }\n    // });\n\n    // this.subscriptions.add(subscription);\n  }\n\n  onSubmit() {\n    // this.isSubmitted = true;\n\n    if (this.form.invalid) {\n      this._snackBar.open(\n        $localize`:@@Snackbar.enterRequiredFields:Please enter required fields`,\n        '',\n        {\n          duration: 2000,\n          panelClass: ['custom-snackbar-style'],\n        },\n      );\n      return;\n    }\n    this.isLoading.set(true);\n\n    const clientForm: Client = {\n      name: this.form.get('clientInfo.name')?.value,\n      firstName: this.form.get('clientInfo.firstName')?.value,\n      lastName: this.form.get('clientInfo.lastName')?.value,\n      email: this.form.get('clientInfo.email')?.value,\n      phone: this.form.get('clientInfo.phone')?.value,\n      address: {\n        street: this.form.get('clientInfo.address.street')?.value,\n        streetNumber: this.form.get('clientInfo.address.streetNumber')?.value,\n        city: this.form.get('clientInfo.address.city')?.value,\n        zipCode: this.form.get('clientInfo.address.zipCode')?.value,\n        country: this.form.get('clientInfo.address.country')?.value,\n      },\n      programs: this.form.get('programs')?.value,\n    };\n\n    console.log(clientForm);\n\n    if (this.editMode) {\n      this._updateClient(clientForm, this.currentClientId);\n    } else {\n      this._createClient(clientForm);\n    }\n  }\n\n  private _createClient(client: Client) {\n    const subscription = this.clientsService\n      .createClient(client)\n      .subscribe(client => {\n        this._snackBar.open(\n          $localize`:@@Snackbar.clientCreated:Client created`,\n          '',\n          {\n            duration: 2000,\n            panelClass: ['custom-snackbar-style'],\n          },\n        );\n\n        // this.router.navigateByUrl(`clients/form/${clientId}`);\n        lastValueFrom(timer(1000)).then(() => {\n          this.isLoading.set(false);\n          this.clientInfo.set({\n            clientId: client.id as string,\n            clientName: client.name,\n            programPosition: 0,\n            programId: '',\n            programName: '',\n            dateRange: { start: '', end: '' },\n          });\n          this.router.navigateByUrl(`clients/form/${client.id}`);\n        });\n      });\n\n    this.subscriptions.add(subscription);\n  }\n\n  private _updateClient(client: Client, currentClientId: string) {\n    const subscription = this.clientsService\n      .updateClient(client, currentClientId)\n      .subscribe({\n        next: createdClient => {\n          console.log(createdClient);\n          this._snackBar.open(\n            $localize`:@@Snackbar.clientUpdated:Client updated`,\n            '',\n            {\n              duration: 2000,\n              panelClass: ['custom-snackbar-style'],\n            },\n          );\n          lastValueFrom(timer(1000)).then(() => {\n            this.isLoading.set(false);\n            this.router.navigateByUrl(`clients`);\n          });\n        },\n        error: e => {\n          console.error(e);\n          this.isLoading.set(false);\n          // this.router.navigateByUrl(`clients`);\n        },\n        complete: () => console.info('Client updated'),\n      });\n\n    this.subscriptions.add(subscription);\n  }\n\n  openDeleteConfirmationDialog(clientId: string): void {\n    console.log(clientId);\n    const dialogRef = this.dialog.open(DeleteConfirmationDialogComponent, {\n      width: '312px',\n      data: {\n        title: $localize`:@@DeleteConfirmationDialog.deleteTitleClient:Delete selected client?`,\n        message: $localize`:@@DeleteConfirmationDialog.deleteMessageClient:Deleting the selected client will remove it from your account.`,\n      },\n      panelClass: 'custom-dialog',\n    });\n\n    const subscription = dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        // User confirmed deletion, handle deletion logic here\n        console.log('User confirmed deletion');\n        this.deleteClient(clientId);\n        dialogRef.close();\n      } else {\n        // User canceled deletion\n        console.log('User canceled deletion');\n        dialogRef.close();\n      }\n    });\n\n    this.subscriptions.add(subscription);\n  }\n\n  deleteClient(clientId: string) {\n    const subscription = this.clientsService.deleteClient(clientId).subscribe({\n      next: () => {\n        this._snackBar.open(\n          $localize`:@@Snackbar.clientDeleted:Client deleted`,\n          '',\n          {\n            duration: 2000,\n            panelClass: ['custom-snackbar-style'],\n          },\n        );\n        lastValueFrom(timer(2000)).then(() => {\n          this.router.navigateByUrl(`clients`);\n        });\n      },\n      error: e => console.error(e),\n      complete: () => console.info('Client deletion completed'),\n    });\n\n    this.subscriptions.add(subscription);\n\n    // this.subscriptions.add(deleteClientSubscription);\n  }\n\n  onBack() {\n    this.router.navigateByUrl(`clients`);\n  }\n\n  // tabs: TabNavigationTab[] = [\n  //   { routerLink: 'general', label: 'General' },\n  //   { routerLink: 'programs', label: 'Programs' },\n  // ];\n  // activeLink = this.tabs[0].routerLink;\n\n  // tabs: TabNavigationTab[];\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n"]}