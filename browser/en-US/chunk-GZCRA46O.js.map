{"version":3,"mappings":"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","names":["ɵɵelementStart","ɵɵtext","ɵɵelementEnd","e","t","r","$implicit","ɵɵadvance","ɵɵtextInterpolate1","column_r2","label","Ge","a","ɵɵtextInterpolate","row_r3","name","email","ze","Be","ɵɵtemplate","ClientsListComponent_For_11_Conditional_0_Conditional_2_mat_cell_0_Conditional_1_Template","ClientsListComponent_For_11_Conditional_0_Conditional_2_mat_cell_0_Conditional_2_Template","i","ɵɵconditional","tmp_15_0","ctx_r3","screenSize","isCompact","Xe","ClientsListComponent_For_11_Conditional_0_Conditional_2_mat_cell_0_Template","Ve","element_r5","key","He","ClientsListComponent_For_11_Conditional_0_Conditional_3_mat_cell_0_Template","Qe","ɵɵelementContainerStart","ClientsListComponent_For_11_Conditional_0_mat_header_cell_1_Template","ClientsListComponent_For_11_Conditional_0_Conditional_2_Template","ClientsListComponent_For_11_Conditional_0_Conditional_3_Template","I","n","ɵɵproperty","tmp_13_0","je","ɵɵelement","Ke","M","ɵɵlistener","ɵɵrestoreView","_r6","row_r7","ɵɵnextContext","ɵɵresetView","openEditClientDialog","id","openDeleteConfirmationDialog","Ue","_r8","ɵɵi18n","y","menu_r9","qe","ClientsListComponent_For_11_Conditional_1_mat_cell_2_Conditional_1_Template","ClientsListComponent_For_11_Conditional_1_mat_cell_2_Conditional_2_Template","tmp_14_0","Je","ClientsListComponent_For_11_Conditional_1_mat_header_cell_1_Template","ClientsListComponent_For_11_Conditional_1_mat_cell_2_Template","We","ClientsListComponent_For_11_Conditional_0_Template","ClientsListComponent_For_11_Conditional_1_Template","Ye","Ze","et","ɵɵi18nExp","input_r10","value","V","tt","ɵɵpureFunction0","_c0","ClientsListComponent","constructor","pageType","clientsService","inject","ClientsService","_snackBar","MatSnackBar","dialog","MatDialog","router","Router","ActivePageService","screenSizeService","ScreenSizeService","pageTitle","columnName","$localize","columnEmail","columnPhone","displayedColumns","columnKeys","computed","filter","column","map","col","dataSource","MatTableDataSource","clients","subscriptions","Subscription","shareClientsDataService","ShareClientsDataService","clientInfo","themeManager","ThemeManagerService","themeSignal","console","log","getClients","ngOnInit","set","clientId","clientName","programPosition","programId","programName","dateRange","start","end","ngAfterViewInit","paginator","sort","createClient","navigateByUrl","subscription","getClientsBasic","subscribe","clientsList","data","add","applyFilter","event","filterValue","target","trim","toLowerCase","firstPage","open","ShowClientModalComponent","width","title","panelClass","afterClosed","result","itemId","dialogRef","DeleteConfirmationDialogComponent","message","deleteClient","close","next","duration","error","complete","info","ngOnDestroy","unsubscribe","ɵfac","ɵcmp","G","type","selectors","viewQuery","rf","ctx","x","MatSort","MatPaginator","o","w","O","first","features","H","provide","MatPaginatorIntl","useClass","PaginatorI18nService","decls","vars","consts","i18n_0","v","D","k","T","f","$","template","i0","_r1","$event","ɵɵrepeaterCreate","ClientsListComponent_For_11_Template","_forTrack0","ClientsListComponent_mat_header_row_12_Template","ClientsListComponent_mat_row_13_Template","ClientsListComponent_mat_row_14_Template","ClientsListComponent_Conditional_15_Template","ɵɵrepeater","tmp_9_0","dependencies","PageToolbarComponent","MatFormField","MatLabel","MatInput","OverlayscrollbarsModule","OverlayScrollbarsComponent","MatTableModule","MatTable","MatHeaderCellDef","MatHeaderRowDef","MatColumnDef","MatCellDef","MatRowDef","MatHeaderCell","MatCell","MatHeaderRow","MatRow","MatNoDataRow","MatSortModule","MatSortHeader","MatIconModule","MatIcon","MatTooltip","MatButtonModule","MatIconButton","MatPaginatorModule","MatMenuModule","MatMenu","MatMenuItem","MatMenuTrigger","styles","yt"],"ignoreList":[],"sources":["apps/sanare-app/src/app/pages/clients/clients-list/clients-list.component.html","apps/sanare-app/src/app/pages/clients/clients-list/clients-list.component.ts"],"sourcesContent":["<ui-page-toolbar\n  [pageTitle]=\"pageTitle()\"\n  [pageType]=\"pageType\"\n  [newButton]=\"true\"\n  (newEvent)=\"createClient()\"\n></ui-page-toolbar>\n\n<div class=\"table-wrapper\">\n  <mat-form-field class=\"rounded-filter-input\" appearance=\"fill\">\n    <mat-label i18n=\"@@ClientsList.inputFilterLabel\">Filter</mat-label>\n    <input\n      matInput\n      (keyup)=\"applyFilter($event)\"\n      i18n-placeholder=\"@@ClientsList.inputPlaceholder\"\n      placeholder=\"E.g. John Maurice\"\n      #input\n    />\n  </mat-form-field>\n\n  <!-- <div class=\"mat-elevation-z8 clients-table\"> -->\n  <div class=\"clients-table-container\">\n    <div\n      overlay-scrollbars\n      [options]=\"themeSignal()\"\n      [defer]\n      class=\"clients-list-table table-scroll-container\"\n    >\n      <mat-table class=\"mat-table-background\" [dataSource]=\"dataSource\" matSort>\n        @for (column of displayedColumns; track column.key) {\n          @if (column.key !== 'options') {\n            <ng-container [matColumnDef]=\"column.key\">\n              <mat-header-cell *matHeaderCellDef mat-sort-header>\n                {{ column.label }}</mat-header-cell\n              >\n              @if (screenSize()?.isCompact) {\n                <mat-cell *matCellDef=\"let row\" class=\"dynamic-cell\">\n                  @if (screenSize()?.isCompact) {\n                    <span class=\"mat-body-large\">{{ row.name }}</span>\n                    <span class=\"mat-body-medium-secondary\">{{\n                      row.email\n                    }}</span>\n                  } @else {\n                    {{ row.name }}\n                  }\n                </mat-cell>\n              } @else {\n                <mat-cell *matCellDef=\"let element\">\n                  {{ element[column.key] }}\n                </mat-cell>\n              }\n            </ng-container>\n          } @else {\n            <ng-container matColumnDef=\"options\">\n              <mat-header-cell *matHeaderCellDef></mat-header-cell>\n              <mat-cell *matCellDef=\"let row\" class=\"client-options\">\n                @if (!screenSize()?.isCompact) {\n                  <div>\n                    <button\n                      mat-icon-button\n                      matTooltip=\"Edit\"\n                      i18n-matTooltip=\"@@ClientsList.tableEditButtonTooltip\"\n                      aria-label=\"Edit icon button\"\n                      i18n-aria-label=\"@@ClientsList.tableEditButtonAriaLabel\"\n                      (click)=\"openEditClientDialog(row.id, row.name)\"\n                    >\n                      <mat-icon>edit</mat-icon>\n                    </button>\n                    <button\n                      mat-icon-button\n                      matTooltip=\"Delete\"\n                      i18n-matTooltip=\"@@ClientsList.tableDeleteButtonTooltip\"\n                      aria-label=\"Delete icon button\"\n                      i18n-aria-label=\"@@ClientsList.tableDeleteButtonAriaLabel\"\n                      (click)=\"openDeleteConfirmationDialog(row.id)\"\n                    >\n                      <mat-icon>delete_outline</mat-icon>\n                    </button>\n                  </div>\n                } @else {\n                  <button\n                    mat-icon-button\n                    [matMenuTriggerFor]=\"menu\"\n                    aria-label=\"Example icon-button with a menu\"\n                  >\n                    <mat-icon>more_vert</mat-icon>\n                  </button>\n                  <mat-menu #menu=\"matMenu\">\n                    <button\n                      mat-menu-item\n                      style=\"min-width: 200px\"\n                      (click)=\"openEditClientDialog(row.id, row.name)\"\n                    >\n                      <mat-icon>edit</mat-icon>\n                      <span i18n=\"@@ClientsList.tableEditButtonTooltip\"\n                        >Edit</span\n                      >\n                    </button>\n                    <button\n                      mat-menu-item\n                      (click)=\"openDeleteConfirmationDialog(row.id)\"\n                    >\n                      <mat-icon>delete_outline</mat-icon>\n                      <span i18n=\"@@ClientsList.tableDeleteButtonTooltip\"\n                        >Delete</span\n                      >\n                    </button>\n                  </mat-menu>\n                }\n              </mat-cell>\n            </ng-container>\n          }\n        }\n\n        <mat-header-row *matHeaderRowDef=\"columnKeys()\"></mat-header-row>\n        <mat-row\n          *matRowDef=\"let row; columns: columnKeys()\"\n          class=\"table-rows\"\n        ></mat-row>\n        <!-- Row shown when there is no matching data. -->\n        <mat-row class=\"mat-row\" *matNoDataRow>\n          <td\n            class=\"mat-cell\"\n            colspan=\"4\"\n            i18n=\"@@ClientsList.tableNoMatchingData\"\n          >\n            No data matching the filter \"{{ input.value }}\"\n          </td>\n        </mat-row>\n      </mat-table>\n    </div>\n    @if (!screenSize()?.isCompact) {\n      <mat-paginator\n        pageSize=\"10\"\n        class=\"mat-paginator-background\"\n        [pageSizeOptions]=\"[5, 10, 25, 100]\"\n        i18n-aria-label=\"@@ClientsList.selectPageOfClientsAriaLabel\"\n        aria-label=\"Select page of clients\"\n      ></mat-paginator>\n    }\n  </div>\n</div>\n","/// <reference types=\"@angular/localize\" />\n\nimport {\n  AfterViewInit,\n  Component,\n  computed,\n  inject,\n  OnDestroy,\n  OnInit,\n  signal,\n  ViewChild,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n  MatPaginator,\n  MatPaginatorIntl,\n  MatPaginatorModule,\n} from '@angular/material/paginator';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatSort, MatSortHeader, MatSortModule } from '@angular/material/sort';\nimport {\n  MatTableDataSource,\n  MatTable,\n  MatColumnDef,\n  MatHeaderCellDef,\n  MatHeaderCell,\n  MatCellDef,\n  MatCell,\n  MatHeaderRowDef,\n  MatHeaderRow,\n  MatRowDef,\n  MatRow,\n  MatNoDataRow,\n  MatTableModule,\n} from '@angular/material/table';\nimport {\n  Client,\n  ClientsService,\n  ShareClientsDataService,\n  ShareStateService,\n} from '@slowautomobile/exercises';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { DeleteConfirmationDialogComponent } from 'libs/ui/src/lib/components/deleteConfirmationDialog/deleteConfirmationDialog.component';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { ShowClientModalComponent } from 'libs/clients/src/lib/components/show-client-modal/show-client-modal.component';\nimport { Subscription } from 'rxjs';\nimport { Router } from '@angular/router';\nimport {\n  ActivePageService,\n  PaginatorI18nService,\n  ScreenSizeService,\n  ThemeManagerService,\n} from '@slowautomobile/ui';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\nimport { MatInput } from '@angular/material/input';\nimport { MatFormField, MatLabel } from '@angular/material/form-field';\nimport { PageToolbarComponent } from '@slowautomobile/ui';\nimport { MatMenuModule } from '@angular/material/menu';\n\n@Component({\n  selector: 'sanareapp-clients-list',\n  templateUrl: './clients-list.component.html',\n  styleUrl: './clients-list.component.scss',\n  imports: [\n    PageToolbarComponent,\n    MatFormField,\n    MatLabel,\n    MatInput,\n    OverlayscrollbarsModule,\n    MatTableModule,\n    MatSortModule,\n    MatIconModule,\n    MatTooltip,\n    MatButtonModule,\n    MatPaginatorModule,\n    MatMenuModule,\n  ],\n  providers: [{ provide: MatPaginatorIntl, useClass: PaginatorI18nService }],\n})\nexport class ClientsListComponent implements OnInit, AfterViewInit, OnDestroy {\n  // Page info and inputs for ui-page-toolbar\n  // pageTitle = $localize`:@@ClientsList.pageTitle:Clients`;\n  // pageType = $localize`:@@ClientsList.pageType:client`;\n  pageType = 'client';\n\n  private clientsService = inject(ClientsService);\n  private _snackBar = inject(MatSnackBar);\n  dialog = inject(MatDialog);\n  private router = inject(Router);\n  // private shareStateService = inject(ShareStateService);\n  ActivePageService = inject(ActivePageService);\n  private screenSizeService = inject(ScreenSizeService);\n\n  // isFetchingData = this.shareStateService.isFetchingData;\n  screenSize = this.screenSizeService.screenSize;\n\n  pageTitle = this.ActivePageService.pageTitle;\n\n  columnName = $localize`:@@ClientsList.tableNameColumn:Name`;\n  columnEmail = $localize`:@@ClientsList.tableEmailColumn:Email`;\n  columnPhone = $localize`:@@ClientsList.tablePhoneColumn:Phone`;\n\n  displayedColumns: any[] = [\n    { key: 'name', label: this.columnName },\n    { key: 'email', label: this.columnEmail },\n    { key: 'phone', label: this.columnPhone },\n    { key: 'options', label: '' },\n  ];\n\n  columnKeys = computed(() => {\n    if (this.screenSize()?.isCompact) {\n      return this.displayedColumns\n        .filter(column => column.key !== 'phone' && column.key !== 'email')\n        .map(col => col.key);\n    } else {\n      return this.displayedColumns.map(col => col.key);\n    }\n  });\n\n  dataSource = new MatTableDataSource<Client>();\n  clients: Client[] = [];\n  removedClient!: any | null;\n  @ViewChild(MatSort) sort!: MatSort;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  subscriptions = new Subscription();\n  private shareClientsDataService = inject(ShareClientsDataService);\n  clientInfo = this.shareClientsDataService.clientInfo;\n\n  themeManager = inject(ThemeManagerService);\n  themeSignal = this.themeManager.themeSignal;\n\n  constructor() {\n    console.log(this.screenSize()?.isCompact);\n    // Get data and assign the data to the data source for the table to render\n    this.getClients();\n  }\n\n  ngOnInit(): void {\n    this.pageTitle.set($localize`:@@ClientsList.pageTitle:Clients`);\n\n    // Reset clientInfo() signal data\n    this.clientInfo.set({\n      clientId: '',\n      clientName: '',\n      programPosition: 0,\n      programId: '',\n      programName: '',\n      dateRange: { start: '', end: '' },\n    });\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  createClient() {\n    this.router.navigateByUrl('/clients/form');\n  }\n\n  private getClients() {\n    // this.isFetchingData.set(true);\n\n    const subscription = this.clientsService\n      .getClientsBasic()\n      .subscribe(clientsList => {\n        // this.clients = [];\n        // clientsList.forEach(client => {\n        //   client.fullName = client.lastName + ' ' + client.firstName;\n        //   this.clients.push(client);\n        this.clients = clientsList;\n        // });\n        this.dataSource.data = this.clients;\n        console.log(this.dataSource.data);\n        // this.isFetchingData.set(false);\n      });\n\n    this.subscriptions.add(subscription);\n  }\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  openEditClientDialog(clientId: string, clientName: string) {\n    const dialogRef = this.dialog.open(ShowClientModalComponent, {\n      width: '500px',\n      // height: '736px',\n      data: {\n        title: $localize`:@@ClientModal.editClientModalTitle:Edit client`,\n        clientId: clientId,\n        clientName: clientName,\n      },\n      // disableClose: true, // Disable closing when clicked outside\n      panelClass: ['custom-dialog', 'custom-client-dialog-content-wrapper'],\n    });\n\n    const subscription = dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.getClients();\n      } else {\n        console.log('Client modal exited');\n      }\n    });\n    this.subscriptions.add(subscription);\n  }\n\n  openDeleteConfirmationDialog(itemId: string): void {\n    const dialogRef = this.dialog.open(DeleteConfirmationDialogComponent, {\n      width: '312px',\n      data: {\n        title: $localize`:@@DeleteConfirmationDialog.deleteTitleClient:Delete selected client?`,\n        message: $localize`:@@DeleteConfirmationDialog.deleteMessageClient:Deleting the selected client will remove it from your account.`,\n      },\n      panelClass: 'custom-dialog',\n    });\n\n    const subscription = dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        // User confirmed deletion, handle deletion logic here\n        console.log('User confirmed deletion');\n        this.deleteClient(itemId);\n        dialogRef.close();\n      } else {\n        // User canceled deletion\n        console.log('User canceled deletion');\n        dialogRef.close();\n      }\n    });\n    this.subscriptions.add(subscription);\n  }\n\n  deleteClient(clientId: string) {\n    const subscription = this.clientsService.deleteClient(clientId).subscribe({\n      next: () => {\n        this.getClients();\n        this._snackBar.open(\n          $localize`:@@Snackbar.clientDeleted:Client deleted`,\n          '',\n          {\n            duration: 2000,\n            panelClass: ['custom-snackbar-style'],\n          },\n        );\n      },\n      error: e => console.error(e),\n      complete: () => console.info('Client deletion completed'),\n    });\n\n    this.subscriptions.add(subscription);\n  }\n\n  /*   undoRemove(): void {\n    console.log(this.removedClient?.client);\n    if (this.removedClient) {\n      // Add the removed item back to its original position\n      // this.items.splice(this.removedItem.index, 0, this.removedItem.value);\n\n      const restoredClientSubscription = this.clientsService\n        .createClient(this.removedClient.client)\n        .subscribe(\n          // NOT LIKE THIS, PUT CONFIRM DIALOG, AND AFTER WITHOUT UNDO, ONLY SNACKBAR INFO!!!! BECAUSE THERE IS NO NEED FOR UNNECCESSARY HTTP REQUESTS AND NEWLY CREATED CLIENT(ALTOUGH SAME) WILL HAVE DIFERENT ID!!!!!!\n          () => {\n            this.getClients();\n          },\n        );\n\n      // Reset the removedItem reference\n      this.removedClient = null;\n      this.subscriptions.add(restoredClientSubscription);\n    }\n  } */\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n"]}