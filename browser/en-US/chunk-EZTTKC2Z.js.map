{"version":3,"mappings":"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","names":["ɵɵelementStart","ɵɵtext","ɵɵelementEnd","a","t","T","$implicit","ɵɵproperty","language_r1","code","ɵɵadvance","ɵɵtextInterpolate","name","q","ɵɵi18n","SettingsComponent","constructor","router","inject","Router","themeManager","ThemeManagerService","localstorageService","LocalstorageService","usersService","UsersService","shareStateService","ShareStateService","activePageTitle","ActivePageService","pageTitle","backNavigation","userId","selectValueChanged","isDarkSignal","isDark","subscriptions","Subscription","isLoading","languages","ngOnInit","set","selectedLanguage","_getUserLanguageToken","console","log","switchTheme","changeTheme","onSubmit","_setAndUpdateUserLanguageToken","navigateByUrl","onBack","getToken","languageCode","setToken","subscription","updateUserLanguage","langCode","subscribe","location","replace","window","origin","add","ngOnDestroy","unsubscribe","ɵfac","o","ɵcmp","P","type","selectors","decls","vars","consts","i18n_0","$localize","ɵɵlistener","ctx","ɵɵtwoWayListener","$event","i0","ɵɵtwoWayBindingSet","ɵɵrepeaterCreate","SettingsComponent_For_16_Template","ɵɵrepeaterTrackByIdentity","ɵɵtemplate","SettingsComponent_Conditional_17_Template","ɵɵtwoWayProperty","ɵɵrepeater","ɵɵconditional","dependencies","FormsModule","NgControlStatus","NgModel","MatInputModule","MatFormField","MatLabel","MatHint","MatSelectModule","MatSelect","MatOption","MatFormFieldModule","MatSlideToggleModule","MatSlideToggle","PageToolbarComponent","styles","ce"],"ignoreList":[],"sources":["apps/sanare-app/src/app/pages/settings/settings.component.html","apps/sanare-app/src/app/pages/settings/settings.component.ts"],"sourcesContent":["<div class=\"page-container\">\n  <ui-page-toolbar\n    [pageTitle]=\"pageTitle()\"\n    [cancelButton]=\"true\"\n    [submitButton]=\"true\"\n    (cancelEvent)=\"onBack()\"\n    (submitEvent)=\"onSubmit()\"\n  ></ui-page-toolbar>\n\n  <div class=\"settings-wrapper\">\n    <h3 class=\"mat-title-large-margin-plus\" i18n=\"@@Settings.userInterfaceTitle\">\n      User interface\n    </h3>\n    <div class=\"theme-toggle-wrapper\">\n      <mat-slide-toggle\n        labelPosition=\"before\"\n        [(ngModel)]=\"isDark\"\n        (change)=\"switchTheme()\"\n        i18n=\"@@Settings.switchThemeToggleLabel\"\n        class=\"mat-headline-small\"\n        >Dark mode</mat-slide-toggle\n      >\n    </div>\n    <div class=\"language-wrapper\">\n      <p i18n=\"@@Settings.languageSettingsTitle\">Language settings</p>\n      <mat-form-field appearance=\"outline\">\n        <mat-label i18n=\"@@Settings.languageSettingsLabel\"\n          >Select your default language</mat-label\n        >\n        <mat-select\n          [(value)]=\"selectedLanguage\"\n          (valueChange)=\"selectValueChanged = true\"\n        >\n          @for (language of languages; track language) {\n            <mat-option [value]=\"language.code\">{{ language.name }}</mat-option>\n          }\n        </mat-select>\n        @if (selectValueChanged) {\n          <mat-hint i18n=\"@@Settings.languageSettingsHint\"\n            >Changes will take effect after saving</mat-hint\n          >\n        }\n      </mat-form-field>\n    </div>\n    <!-- <div class=\"copyright-block\">\n      <h3 class=\"mat-title-large\">About Sanare App</h3>\n      <p>Designed and developed by Marko Bokan.</p>\n      <p>Copyright © 2025 Marko Bokan. All Rights Reserved.</p>\n    </div> -->\n    <!-- <div>\n      <h3>About Sanare App</h3>\n      <p><strong>Development:</strong> This app was developed by Marko Bokan, focusing on programming, web design, and deployment across the frontend and backend.</p>\n      <p><strong>Expertise:</strong> Miloš Bokan contributed as a physiotherapy specialist, providing consultation and domain expertise throughout the development process.</p>\n      <p>Copyright © 2025 Marko Bokan. All Rights Reserved.</p>\n    </div> -->\n  </div>\n</div>\n","import {\n  Component,\n  computed,\n  effect,\n  inject,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { Router } from '@angular/router';\nimport {\n  ActivePageService,\n  PageToolbarComponent,\n  ThemeManagerService,\n} from '@slowautomobile/ui';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { LocalstorageService, UsersService } from '@slowautomobile/users';\nimport { Subscription } from 'rxjs';\nimport { ShareStateService } from '@slowautomobile/exercises';\n\ninterface Language {\n  name: string;\n  code: string;\n}\n\n@Component({\n    selector: 'sanareapp-settings',\n    templateUrl: './settings.component.html',\n    styleUrl: './settings.component.scss',\n    imports: [\n        FormsModule,\n        MatInputModule,\n        MatSelectModule,\n        MatFormFieldModule,\n        MatSlideToggleModule,\n        PageToolbarComponent,\n    ]\n})\nexport class SettingsComponent implements OnInit, OnDestroy {\n  private router = inject(Router);\n  themeManager = inject(ThemeManagerService);\n  private localstorageService = inject(LocalstorageService);\n  private usersService = inject(UsersService);\n  private shareStateService = inject(ShareStateService);\n  private activePageTitle = inject(ActivePageService);\n\n  pageTitle = this.activePageTitle.pageTitle;\n  backNavigation = this.activePageTitle.backNavigation;\n  userId = this.usersService.userId;\n  selectValueChanged = false;\n  isDarkSignal = this.themeManager.isDark;\n  isDark = false;\n  subscriptions = new Subscription();\n  isLoading = this.shareStateService.isLoading;\n\n  languages: Language[] = [\n    { name: 'English', code: 'en-US' },\n    { name: 'Deutsch', code: 'de-DE' },\n    { name: 'Srpski', code: 'sr-RS' },\n  ];\n\n  selectedLanguage!: string;\n  fe!: string;\n\n  ngOnInit(): void {\n    this.pageTitle.set($localize`:@@Settings.pageTitle:Settings`);\n    this.backNavigation.set(true);\n\n    this.isDark = this.isDarkSignal();\n\n    this.selectedLanguage = this._getUserLanguageToken();\n    console.log(this.selectedLanguage);\n  }\n\n  switchTheme() {\n    this.isDark\n      ? this.themeManager.changeTheme('dark')\n      : this.themeManager.changeTheme('light');\n  }\n\n  onSubmit() {\n    this.isLoading.set(true);\n\n    // This works only when app is deployed on server which serves different localized builds, otherwise, router will navigate to dashboard(every ** path that is not in routes will redirect to '/' ie. /dashboard)\n    // this.router.navigate([`/${this.selectedLanguage}`]);\n    if (this.selectValueChanged) {\n      this._setAndUpdateUserLanguageToken(this.selectedLanguage);\n    } else {\n      this.isLoading.set(false);\n\n      this.router.navigateByUrl('/');\n    }\n    // location.replace(`/${this.selectedLanguage}/settings`);\n\n    console.log(this.selectedLanguage);\n  }\n\n  onBack() {\n    this.router.navigateByUrl('');\n  }\n\n  // showValue() {\n  //   this.selectValueChanged = true;\n  //   console.log(this.selectedLanguage);\n  // }\n\n  private _getUserLanguageToken(): string {\n    return this.localstorageService.getToken('userLanguage') || 'en-US';\n  }\n\n  private _setAndUpdateUserLanguageToken(languageCode: string) {\n    this.localstorageService.setToken('userLanguage', languageCode);\n\n    const subscription = this.usersService\n      .updateUserLanguage(this.userId(), { langCode: languageCode })\n      .subscribe(() => {\n        // setTimeout(() => {\n        //   location.replace(`${window.location.origin}/${languageCode}/`);\n        // }, 4000);\n        this.isLoading.set(false);\n\n        location.replace(`${window.location.origin}/${languageCode}/`);\n      });\n\n    this.subscriptions.add(subscription);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.backNavigation.set(false);\n  }\n}\n"]}