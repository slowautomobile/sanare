{"version":3,"mappings":"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","names":["ɵɵelementStart","ɵɵi18n","ɵɵelementEnd","tn","n","l","an","on","rn","_n","NavigationRailComponent","constructor","shareDataService","inject","ShareDataService","shareStateService","ShareStateService","router","Router","tokenService","LocalstorageService","usersService","UsersService","themeManager","ThemeManagerService","activePageTitle","ActivePageService","screenSizeService","ScreenSizeService","screenSize","pageTitle","themeSignal","customScrollbarOptions","isDark","navDrawerToggler","userId","isAdmin","userFavorites","userName","subscriptions","Subscription","ngOnInit","drawerOpen","drawerSignal","getUserInfo","computed","toggleNavDrawer","toggleDrawer","update","value","onBackdropClick","token","getToken","tokenDecode","JSON","parse","atob","split","set","_getFavorites","subscription","getFavorites","subscribe","favorites","add","ngOnDestroy","unsubscribe","ɵfac","o","ɵcmp","h","type","selectors","decls","vars","consts","i18n_0","$localize","ɵɵelement","ɵɵtext","ɵɵtemplate","NavigationRailComponent_Conditional_14_Template","NavigationRailComponent_Conditional_15_Template","NavigationRailComponent_Conditional_20_Template","NavigationRailComponent_Conditional_21_Template","NavigationRailComponent_Conditional_26_Template","NavigationRailComponent_Conditional_27_Template","g","P","p","m","N","ɵɵadvance","ɵɵproperty","ɵɵpureFunction2","_c0","tmp_1_0","ctx","isCompact","T","e","ɵɵpureFunction1","_c1","ɵɵstyleProp","tmp_4_0","ɵɵconditional","tmp_11_0","tmp_12_0","dependencies","MatIcon","MatTooltip","RouterLink","MatSidenavContainer","MatSidenav","MatNavList","NgClass","MatFabButton","RouterLinkActive","MatSidenavContent","RouterOutlet","ToolbarButtonsComponent","OverlayscrollbarsModule","OverlayScrollbarsComponent","styles","Mn"],"ignoreList":[],"sources":["apps/sanare-app/src/app/shared/navigation-rail/navigation-rail.component.html","apps/sanare-app/src/app/shared/navigation-rail/navigation-rail.component.ts"],"sourcesContent":["<!-- @if (screenSize()?.isCompact === false) { -->\n<ui-toolbar-buttons></ui-toolbar-buttons>\n<!-- } -->\n\n<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav\n    #drawer\n    class=\"sidenav\"\n    [ngClass]=\"{\n      'bottom-sidenav': screenSize()?.isCompact,\n      'bottom-sidenav-container': screenSize()?.isCompact,\n    }\"\n    [attr.role]=\"screenSize()?.isCompact ? 'dialog' : 'navigation'\"\n    mode=\"side\"\n    opened=\"true\"\n  >\n    <mat-nav-list\n      class=\"custom-nav\"\n      [ngClass]=\"{ 'expanded-custom-nav': navDrawerToggler }\"\n    >\n      <!-- @if (navDrawerToggler) {\n        <p style=\"white-space: nowrap\">\n          Lorem, ipsum dolor sit amet consectetur.\n        </p>\n      } -->\n\n      <div class=\"nav-drawer\">\n        <!-- ------------------------------------------------ -->\n        <!-- DISABLED IN DEMO, ADD FUNCTIONALITY WITH ALGOLIA -->\n        <div\n          i18n-matTooltip=\"@@NavigationRail.searchButtonDisabledMsg\"\n          matTooltip=\"Disabled in demo\"\n          style=\"margin-bottom: 30px; visibility: hidden\"\n          [style.display]=\"screenSize()?.isCompact ? 'none' : ''\"\n        >\n          <button\n            mat-fab\n            class=\"custom-fab\"\n            aria-label=\"Search icon button\"\n            i18n-aria-label=\"@@NavigationRail.searchButtonAriaLabel\"\n          >\n            <mat-icon>search</mat-icon>\n          </button>\n        </div>\n        <!-- ------------------------------------------------ -->\n        <div class=\"nav-list-wrapper\">\n          <a\n            class=\"nav-list\"\n            routerLink=\"dashboard\"\n            routerLinkActive=\"active-link\"\n          >\n            <mat-icon\n              aria-label=\"Sidenav dashboard icon\"\n              i18n-aria-label=\"@@NavigationRail.sidenavDashboardAriaLabel\"\n              >grid_view</mat-icon\n            >\n            @if (navDrawerToggler) {\n              <span i18n=\"@@NavigationRail.dashboardBtn\">Dashboard</span>\n            }\n          </a>\n          @if (!navDrawerToggler) {\n            <span i18n=\"@@NavigationRail.dashboardBtn\">Dashboard</span>\n          }\n        </div>\n        <div class=\"nav-list-wrapper\">\n          <a\n            class=\"nav-list\"\n            routerLink=\"clients\"\n            routerLinkActive=\"active-link\"\n          >\n            <mat-icon\n              aria-label=\"Sidenav clients icon\"\n              i18n-aria-label=\"@@NavigationRail.sidenavClientsAriaLabel\"\n              >people_outline</mat-icon\n            >\n            @if (navDrawerToggler) {\n              <span i18n=\"@@NavigationRail.clientsBtn\">Clients</span>\n            }\n          </a>\n          @if (!navDrawerToggler) {\n            <span i18n=\"@@NavigationRail.clientsBtn\">Clients</span>\n          }\n        </div>\n        <div class=\"nav-list-wrapper\">\n          <a\n            class=\"nav-list\"\n            routerLink=\"programs\"\n            routerLinkActive=\"active-link\"\n          >\n            <mat-icon\n              aria-label=\"Sidenav programs icon\"\n              i18n-aria-label=\"@@NavigationRail.sidenavProgramsAriaLabel\"\n              >list</mat-icon\n            >\n            @if (navDrawerToggler) {\n              <span i18n=\"@@NavigationRail.programsBtn\">Programs</span>\n            }\n          </a>\n          @if (!navDrawerToggler) {\n            <span i18n=\"@@NavigationRail.programsBtn\">Programs</span>\n          }\n        </div>\n      </div>\n      <!-- <a class=\"nav-list\" routerLink=\"exercises\" routerLinkActive=\"active-link\"\n          ><mat-icon aria-label=\"Side nav toggle icon\">directions_run</mat-icon>\n          <span>Exercises</span>\n        </a> -->\n      <!-- <a class=\"nav-list\" routerLink=\"settings\" routerLinkActive=\"active-link\"\n          ><mat-icon aria-label=\"Side nav toggle icon\">settings</mat-icon>\n          <span>Settings</span>\n        </a> -->\n      <!-- </div> -->\n    </mat-nav-list>\n  </mat-sidenav>\n\n  <mat-sidenav-content class=\"navigation-sidenav\">\n    <!-- Add Content Here -->\n    <div\n      class=\"main\"\n      overlay-scrollbars\n      [options]=\"\n        screenSize()?.isCompact ? themeSignal() : customScrollbarOptions()\n      \"\n      [defer]\n    >\n      <router-outlet></router-outlet>\n    </div>\n    <footer [style.display]=\"screenSize()?.isCompact ? 'none' : ''\">\n      <p>Copyright © 2025 Marko Bokan. All Rights Reserved.</p>\n    </footer>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n","import { Component, OnDestroy, OnInit, computed, inject } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { ShareDataService, ShareStateService } from '@slowautomobile/exercises';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { UsersService, LocalstorageService } from '@slowautomobile/users';\nimport {\n  Router,\n  RouterLink,\n  RouterLinkActive,\n  RouterOutlet,\n} from '@angular/router';\nimport { NgClass } from '@angular/common';\nimport { MatNavList } from '@angular/material/list';\nimport {\n  MatSidenavContainer,\n  MatSidenav,\n  MatSidenavContent,\n} from '@angular/material/sidenav';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatFabButton } from '@angular/material/button';\nimport {\n  ActivePageService,\n  ScreenSizeService,\n  ThemeManagerService,\n  ToolbarButtonsComponent,\n} from '@slowautomobile/ui';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\n\n@Component({\n    selector: 'sanareapp-navigation-rail',\n    templateUrl: './navigation-rail.component.html',\n    styleUrls: ['./navigation-rail.component.scss'],\n    imports: [\n        MatIcon,\n        MatTooltip,\n        RouterLink,\n        MatSidenavContainer,\n        MatSidenav,\n        MatNavList,\n        NgClass,\n        MatFabButton,\n        RouterLinkActive,\n        MatSidenavContent,\n        RouterOutlet,\n        ToolbarButtonsComponent,\n        OverlayscrollbarsModule,\n    ]\n})\nexport class NavigationRailComponent implements OnInit, OnDestroy {\n  private shareDataService = inject(ShareDataService);\n  private shareStateService = inject(ShareStateService);\n  // private authService = inject(AuthService);\n  private router = inject(Router);\n  private tokenService = inject(LocalstorageService);\n  private usersService = inject(UsersService);\n  themeManager = inject(ThemeManagerService);\n  activePageTitle = inject(ActivePageService);\n  private screenSizeService = inject(ScreenSizeService);\n\n  screenSize = this.screenSizeService.screenSize;\n  pageTitle = this.activePageTitle.pageTitle;\n  themeSignal = this.themeManager.themeSignal;\n  customScrollbarOptions = this.themeManager.customScrollbarOptions;\n  isDark = this.themeManager.isDark;\n  drawerOpen!: any;\n  navDrawerToggler = false;\n  userId = this.usersService.userId;\n  isAdmin = this.usersService.isAdmin;\n  userFavorites = this.usersService.userFavorites;\n  userName = this.usersService.userName;\n  subscriptions = new Subscription();\n\n  // HOW IS THIS WORKING??\n  ngOnInit(): void {\n    // Assign drawer state signal\n    this.drawerOpen = this.shareStateService.drawerSignal;\n    this.getUserInfo();\n    // BehaviorSubject drawer state\n    // this.shareDataService.toggleDrawerSignal$.subscribe(drawerSignal => {\n    //   this.drawerOpen = drawerSignal;\n\n    // });\n    // Check for preffered system theme and set app theme\n    computed(() => this.isDark());\n  }\n\n  // getInitial(name: string): string {\n  //   return name.trim().charAt(0).toUpperCase();\n  // }\n\n  toggleNavDrawer() {\n    this.navDrawerToggler = !this.navDrawerToggler;\n  }\n\n  toggleDrawer() {\n    // BehaviorSubject drawer state\n    // this.shareDataService.updateToggleDrawerResults(!this.drawerOpen);\n\n    this.shareStateService.drawerSignal.update(value => !value);\n  }\n\n  onBackdropClick() {\n    // BehaviorSubject toggle drawer state\n    // this.shareDataService.updateToggleDrawerResults(!this.drawerOpen);\n\n    // Toggle signal drawer state\n    this.shareStateService.drawerSignal.update(value => !value);\n  }\n\n  getUserInfo() {\n    const token = this.tokenService.getToken('jwtToken');\n\n    if (token) {\n      const tokenDecode = JSON.parse(atob(token.split('.')[1]));\n      // Set global signal for logged user\n      this.userId.set(tokenDecode.userId);\n      this.isAdmin.set(tokenDecode.isAdmin);\n\n      this._getFavorites(this.userId());\n    }\n  }\n\n  _getFavorites(userId: string) {\n    // Set user favorites\n    const subscription = this.usersService\n      .getFavorites(userId)\n      .subscribe(favorites => {\n        this.userFavorites.set(favorites);\n      });\n    this.subscriptions.add(subscription);\n  }\n\n  // editUser() {\n  //   const userId = this.getUserInfo();\n  //   this.router.navigateByUrl(`profile/form/${userId}`);\n\n  // }\n\n  // logoutUser() {\n  //   this.authService.logout();\n  // }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n"]}