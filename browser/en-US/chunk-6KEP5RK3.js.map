{
  "version": 3,
  "sources": ["libs/ui/src/lib/components/video-player/video-player.component.ts", "libs/ui/src/lib/components/video-player/video-player.component.html"],
  "sourcesContent": ["import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  input,\n  Input,\n  OnDestroy,\n  signal,\n  ViewChild,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { interval, map, takeUntil, takeWhile, timer } from 'rxjs';\n\n@Component({\n  selector: 'ui-video-player',\n  imports: [CommonModule, MatProgressBarModule],\n  templateUrl: './video-player.component.html',\n  styleUrl: './video-player.component.scss',\n})\nexport class VideoPlayerComponent implements AfterViewInit {\n  @ViewChild('videoPlayer', { static: false })\n  videoPlayer!: ElementRef<HTMLVideoElement>;\n  @Input() videoSrc!: string | undefined;\n  @Input() thumbnail?: string | undefined;\n  // @Input() isModal()? = true;\n  isModal = input<boolean>(true);\n  isDash = input<boolean>(false);\n  private video!: HTMLVideoElement;\n  isPlaying = signal<boolean>(false);\n  private hoverTimeout: any;\n\n  progressValue = signal(0);\n  private progressInterval: any;\n  mouseOver = signal(false);\n\n  ngAfterViewInit() {\n    this.video = this.videoPlayer.nativeElement;\n  }\n\n  logVideoTime() {\n    if (!this.isPlaying()) {\n      return;\n    }\n\n    const currentTime = this.videoPlayer.nativeElement.currentTime;\n    const duration = this.videoPlayer.nativeElement.duration;\n    const percent = (currentTime / duration) * 100;\n    this.progressValue.update(() => +percent.toFixed(1));\n  }\n\n  public getIsModalIsPlayingStatus() {\n    return !this.isModal() && !this.isPlaying();\n  }\n\n  onMouseEnter() {\n    if (this.isModal()) return;\n    this.mouseOver.set(true);\n    // this.progressValue.set(0);\n\n    const interval = setInterval(() => {\n      this.progressValue.update(value => value + 50);\n      if (this.progressValue() >= 100) {\n        this.progressValue.set(100);\n\n        clearInterval(interval);\n      }\n    }, 100);\n\n    // Store interval reference to clear on mouse leave\n    this.progressInterval = interval;\n\n    this.hoverTimeout = setTimeout(() => {\n      this.playVideo();\n    }, 500);\n  }\n\n  onMouseLeave() {\n    if (this.isModal()) {\n      return;\n    }\n    this.progressValue.set(0);\n    this.pauseVideo();\n    clearTimeout(this.hoverTimeout);\n    clearInterval(this.progressInterval);\n  }\n\n  // Play video on mouse enter\n  async playVideo() {\n    // if (this.isPlaying) return; // Prevents unnecessary restarts\n    if (!this.isModal() && !this.isPlaying()) {\n      try {\n        // Load the video explicitly\n        this.video.load();\n\n        // Wait for the video to be ready\n        await new Promise<void>(resolve => {\n          this.video.addEventListener('canplay', () => resolve(), {\n            once: true,\n          });\n        });\n\n        // Attempt to play the video\n        this.isPlaying.set(true);\n        await this.video.play();\n        this.video.loop = true;\n        // console.log('Video is playing');\n      } catch (error) {\n        console.error('Video playback failed:', error);\n      }\n    }\n  }\n\n  // Pause video on mouse leave\n  pauseVideo() {\n    this.isPlaying.set(false);\n    this.video.loop = false;\n    this.video.pause();\n    // console.log('Video is paused');\n  }\n\n  togglePlay() {\n    const video = this.videoPlayer.nativeElement;\n    if (video.paused) {\n      video.play();\n    } else {\n      video.pause();\n    }\n  }\n}\n", "<div\n  [class.img-wrapper-player]=\"!isModal()\"\n  [class.reset-width-padding]=\"isDash()\"\n>\n  <!-- Thumbnail Image -->\n  @if (getIsModalIsPlayingStatus()) {\n    <img\n      [src]=\"thumbnail\"\n      alt=\"Video Thumbnail\"\n      class=\"exercise-img-player\"\n      [class.remove-width]=\"isDash()\"\n    />\n  }\n\n  <video\n    (timeupdate)=\"logVideoTime()\"\n    #videoPlayer\n    muted\n    disablepictureinpicture\n    controlslist=\"nodownload nofullscreen noplaybackrate\"\n    [controls]=\"isModal()\"\n    [preload]=\"isModal() ? 'auto' : 'none'\"\n    playsinline\n    [poster]=\"isModal() ? '' : thumbnail\"\n    [ngClass]=\"{\n      'remove-width': isDash(),\n      'exercise-img-player': !isModal(),\n      'modal-img': isModal(),\n    }\"\n    (click)=\"isModal() ? togglePlay() : ''\"\n    [class.video-hidden]=\"getIsModalIsPlayingStatus()\"\n  >\n    @if (videoSrc) {\n      <source [src]=\"videoSrc\" type=\"video/mp4\" />\n    }\n    <p>Your browser does not support the video tag.</p>\n  </video>\n  @if (mouseOver()) {\n    <div class=\"progress-bar-wrapper\" [class.progress-dash]=\"isDash()\">\n      <mat-progress-bar\n        class=\"progress-bar\"\n        [class.play-progress]=\"isPlaying()\"\n        mode=\"determinate\"\n        [value]=\"progressValue()\"\n      ></mat-progress-bar>\n    </div>\n  }\n</div>\n"],
  "mappings": "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",
  "names": []
}
