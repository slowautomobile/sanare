{"version":3,"mappings":"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","names":["ɵɵelement","i","n","A","ɵɵproperty","ctx_r0","programs$","isProgramCompleted","le","ne","ɵɵelementStart","ɵɵelementEnd","ShowClientModalComponent","constructor","dialogRef","inject","MatDialogRef","data","MAT_DIALOG_DATA","formBuilder","FormBuilder","clientsService","ClientsService","programsService","ProgramsService","router","Router","_snackBar","MatSnackBar","shareClientsDataService","ShareClientsDataService","programs","subscriptions","Subscription","fullEditButtonString","$localize","date","Date","clientInfo","themeManager","ThemeManagerService","themeSignal","ngOnInit","_initForm","subscription","getClient","clientId","subscribe","client","clientForm","firstName","setValue","lastName","email","phone","of","console","log","currentDate","forEach","program","adaptedProgram","programStartDate","dateRange","start","programEndDate","end","totalDuration","getTime","elapsedTime","progress","Math","min","push","add","form","group","Validators","required","name","controls","_updateClient","updateClient","updatedClient","open","duration","panelClass","fullEditMode","clientName","set","programPosition","programId","programName","navigateByUrl","close","onConfirm","value","deleteClientProgram","onClose","ngOnDestroy","unsubscribe","ɵfac","e","ɵcmp","I","type","selectors","decls","vars","consts","i18n_0","ɵɵtext","ɵɵi18n","ɵɵtemplate","ShowClientModalComponent_Defer_22_Template","ShowClientModalComponent_DeferPlaceholder_23_Template","ɵɵdefer","ShowClientModalComponent_Defer_24_DepsFn","D","ɵɵlistener","ctx","ɵɵadvance","ɵɵtextInterpolate1","title","invalid","dependencies","MatDialogTitle","OverlayscrollbarsModule","OverlayScrollbarsComponent","FormsModule","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","ReactiveFormsModule","FormGroupDirective","FormControlName","MatFormField","MatLabel","MatInput","MatDialogActions","MatButton","MatIcon","styles","fe","a"],"ignoreList":[],"sources":["libs/clients/src/lib/components/show-client-modal/show-client-modal.component.html","libs/clients/src/lib/components/show-client-modal/show-client-modal.component.ts"],"sourcesContent":["<!-- <div class=\"dialog-icon\">\n  <mat-icon>edit</mat-icon>\n</div> -->\n<div class=\"confirmation-dialog-wrapper\">\n  <div class=\"header-container\">\n    <h2 mat-dialog-title class=\"dialog-title mat-title-large\">\n      {{ data.title }}\n    </h2>\n    <!-- <button\n      mat-icon-button\n      (click)=\"onClose()\"\n      aria-label=\"Icon button with a close icon\"\n    >\n      <mat-icon>close</mat-icon>\n    </button> -->\n  </div>\n  <div\n    overlay-scrollbars\n    [options]=\"themeSignal()\"\n    [defer]\n    class=\"dialog-content-wrapper\"\n  >\n    <form [formGroup]=\"form\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label i18n=\"@@ClientModal.firstNameLabel\">Firstname</mat-label>\n        <input\n          matInput\n          formControlName=\"firstName\"\n          type=\"text\"\n          placeholder=\"Enter clients firstname\"\n          i18n-placeholder=\"@@ClientModal.firstNamePlaceholder\"\n        />\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label i18n=\"@@ClientModal.lastNameLabel\">Lastname</mat-label>\n        <input\n          matInput\n          formControlName=\"lastName\"\n          type=\"text\"\n          placeholder=\"Enter clients lastname\"\n          i18n-placeholder=\"@@ClientModal.lastNamePlaceholder\"\n        />\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label i18n=\"@@ClientModal.emailLabel\">Email</mat-label>\n        <input\n          matInput\n          formControlName=\"email\"\n          type=\"text\"\n          placeholder=\"Enter clients email\"\n          i18n-placeholder=\"@@ClientModal.emailPlaceholder\"\n        />\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label i18n=\"@@ClientModal.phoneLabel\">Phone</mat-label>\n        <input\n          matInput\n          formControlName=\"phone\"\n          type=\"text\"\n          placeholder=\"Enter clients phone number\"\n          i18n-placeholder=\"@@ClientModal.phonePlaceholder\"\n        />\n      </mat-form-field>\n\n      <!-- <mat-label>Programs</mat-label> -->\n\n      <!-- <mat-list class=\"program-list\">\n          @if (programs?.length !== 0) {\n            <div mat-subheader class=\"subheader-text\">Programs</div>\n          }\n          @for (programData of programs; track programData; let i = $index) {\n            <mat-list-item class=\"program-list-item\">\n              <mat-icon matListItemIcon>description</mat-icon>\n              <span matListItemTitle>{{ programData.program.name }}</span>\n              @if (isProgramCompleted[i]) {\n            \n                <span matListItemLine class=\"status-tooltip\">\n                  <span\n                    class=\"status-icon-wrapper\"\n                    style=\"background-color: #3f51b5\"\n                    matTooltip=\"Completed\"\n                  >\n                    <mat-icon\n                      aria-hidden=\"false\"\n                      aria-label=\"Done icon\"\n                      fontIcon=\"done\"\n                    ></mat-icon>\n                  </span>\n\n                  {{\n                    'Ended: ' + (programData.dateRange.end | date: 'd MMM yyyy')\n                  }}</span\n                >\n              } @else {\n\n                <span matListItemLine class=\"status-tooltip\">\n                  <span\n                    class=\"status-icon-wrapper\"\n                    style=\"background-color: #ff4081\"\n                    matTooltip=\"In progress\"\n                  >\n                    <mat-icon\n                      aria-hidden=\"false\"\n                      aria-label=\"In progress icon\"\n                      fontIcon=\"autorenew\"\n                    ></mat-icon>\n                  </span>\n\n                  {{\n                    'Ends: ' + (programData.dateRange.end | date: 'd MMM yyyy')\n                  }}</span\n                >\n              }\n\n\n              <span matListItemMeta class=\"list-action-button\">\n               \n              </span>\n            </mat-list-item>\n            <mat-divider></mat-divider>\n          }\n        </mat-list> -->\n      @defer {\n        <clients-progress\n          [programs$]=\"programs$\"\n          [isProgramCompleted]=\"isProgramCompleted\"\n          [isDashboard]=\"false\"\n        ></clients-progress>\n      } @placeholder {\n        <div class=\"programs-list-wrapper-placeholder\">\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n        </div>\n      }\n      <!-- <div class=\"status-toggle\">\n          <mat-label>Status</mat-label>\n          <mat-slide-toggle formControlName=\"completed\">\n            @if (clientForm['completed'].value) {\n              <span>Completed</span>\n            } @else {\n              <span>In progress</span>\n            }\n          </mat-slide-toggle>\n        </div> -->\n    </form>\n  </div>\n  <div mat-dialog-actions class=\"dialog-actions\">\n    <button\n      class=\"custom-btn\"\n      mat-flat-button\n      color=\"primary\"\n      (click)=\"fullEditMode(data.clientId, data.clientName)\"\n    >\n      <mat-icon>edit</mat-icon>\n      {{ fullEditButtonString }}\n    </button>\n    <div class=\"actions-wrapper\">\n      <button\n        mat-button\n        (click)=\"onClose()\"\n        class=\"dialog-buttons\"\n        cdkFocusInitial\n        i18n=\"@@ClientModal.cancelModalBtn\"\n      >\n        Cancel\n      </button>\n      <button\n        mat-button\n        class=\"dialog-buttons\"\n        (click)=\"onConfirm()\"\n        [disabled]=\"form.invalid\"\n        i18n=\"@@ClientModal.saveModalBtn\"\n      >\n        Save\n      </button>\n    </div>\n  </div>\n</div>\n","import { Component, inject, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogRef,\n  MatDialogTitle,\n  MatDialogActions,\n} from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport {\n  Client,\n  ClientsService,\n  ProgramsService,\n  ShareClientsDataService,\n} from '@slowautomobile/exercises';\nimport { ThemeManagerService } from '@slowautomobile/ui';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatButton } from '@angular/material/button';\nimport { ClientsProgressComponent } from '../clients-progress/clients-progress.component';\nimport { MatInput } from '@angular/material/input';\nimport { MatFormField, MatLabel } from '@angular/material/form-field';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\n\ninterface DialogData {\n  title: string;\n  clientId: string;\n  clientName: string;\n}\n\n@Component({\n    selector: 'clients-show-client-modal',\n    templateUrl: './show-client-modal.component.html',\n    styleUrl: './show-client-modal.component.scss',\n    imports: [\n        MatDialogTitle,\n        OverlayscrollbarsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormField,\n        MatLabel,\n        MatInput,\n        ClientsProgressComponent,\n        MatDialogActions,\n        MatButton,\n        MatIcon,\n    ]\n})\nexport class ShowClientModalComponent implements OnInit, OnDestroy {\n  dialogRef = inject<MatDialogRef<ShowClientModalComponent>>(MatDialogRef);\n  data = inject<DialogData>(MAT_DIALOG_DATA);\n  private formBuilder = inject(FormBuilder);\n  private clientsService = inject(ClientsService);\n  private programsService = inject(ProgramsService);\n  private router = inject(Router);\n  private _snackBar = inject(MatSnackBar);\n  private shareClientsDataService = inject(ShareClientsDataService);\n\n  form!: FormGroup;\n  programs: any[] | undefined = [];\n  programs$!: Observable<any[] | undefined>;\n  subscriptions = new Subscription();\n\n  fullEditButtonString = $localize`:@@ClientModal.fullEditClientBtn:Full edit`;\n\n  date = new Date();\n  isProgramCompleted: boolean[] = [];\n  clientInfo = this.shareClientsDataService.clientInfo;\n\n  themeManager = inject(ThemeManagerService);\n  themeSignal = this.themeManager.themeSignal;\n\n  ngOnInit() {\n    this._initForm();\n\n    const subscription = this.clientsService\n      .getClient(this.data.clientId)\n      .subscribe(client => {\n        this.clientForm['firstName'].setValue(client.firstName);\n        this.clientForm['lastName'].setValue(client.lastName);\n        this.clientForm['email'].setValue(client.email);\n        this.clientForm['phone'].setValue(client.phone);\n        // this.clientForm['completed'].setValue(client.completed);\n\n        this.programs = client.programs;\n        this.programs$ = of(this.programs);\n        console.log(this.programs);\n        // this.programs$.subscribe(res => console.log(res));\n\n        // Make function out of this !!!\n        const currentDate = new Date();\n        this.programs?.forEach(program => {\n          const adaptedProgram = program;\n          const programStartDate = new Date(adaptedProgram.dateRange.start);\n          const programEndDate = new Date(adaptedProgram.dateRange.end);\n\n          const totalDuration =\n            programEndDate.getTime() - programStartDate.getTime();\n          const elapsedTime =\n            currentDate.getTime() - programStartDate.getTime();\n          const progress = Math.min((elapsedTime / totalDuration) * 100, 100); // Ensure progress doesn't exceed 100%\n          adaptedProgram.progress = progress;\n\n          if (programEndDate < currentDate) {\n            this.isProgramCompleted.push(true);\n            console.log('This program is completed');\n          } else {\n            this.isProgramCompleted.push(false);\n            console.log('This program is in progress');\n          }\n        });\n\n        // console.log(client);\n        // console.log(this.programs);\n        // console.log(this.isProgramCompleted);\n      });\n    this.subscriptions.add(subscription);\n  }\n\n  private _initForm() {\n    this.form = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      name: [''],\n      email: [''],\n      phone: ['', Validators.required],\n      // completed: [false],\n    });\n  }\n\n  get clientForm() {\n    return this.form.controls;\n  }\n\n  private _updateClient(client: Client, clientId: string) {\n    const subscription = this.clientsService\n      .updateClient(client, clientId)\n      .subscribe(updatedClient => {\n        this._snackBar.open($localize`:@@Snackbar.clientUpdated:Client updated`, '', {\n          duration: 2000,\n          panelClass: ['custom-snackbar-style'],\n        });\n        console.log(updatedClient);\n      });\n    this.subscriptions.add(subscription);\n  }\n\n  fullEditMode(clientId: string, clientName: string) {\n    console.log(clientName);\n    this.clientInfo.set({\n      clientId: clientId,\n      clientName: clientName,\n      programPosition: 0,\n      programId: '',\n      programName: '',\n      dateRange: { start: '', end: '' },\n    });\n    this.router.navigateByUrl(`clients/form/${clientId}`);\n\n    // THIS IS ALTERNATIVE WHICH SHOULD BE IMPLEMENTED WHEN ALL SIGNAL DEPENDENCIES ARE ADJUSTED/REMOVED\n    // this.router.navigate([`clients/form/${clientId}`], {\n    //   queryParams: {\n    //     clientName: `${clientName}`,\n    //   },\n    // });\n\n    this.dialogRef.close(true);\n\n    console.log(clientId);\n  }\n\n  onConfirm(): void {\n    const updatedClient: Client = {\n      firstName: this.clientForm['firstName'].value,\n      lastName: this.clientForm['lastName'].value,\n      name: this.clientForm['name'].value,\n      email: this.clientForm['email'].value,\n      phone: this.clientForm['phone'].value,\n      // completed: this.clientForm['completed'].value,\n    };\n\n    this._updateClient(updatedClient, this.data.clientId);\n\n    this.dialogRef.close(true);\n  }\n\n  // Implement options for viewing/editing. ARE THEY REDUNDANT, SINCE THERE IS \"Switch to full edit\"? Also, where should \"View\" button lead, in clients programs table or in \"Reuse\" program editor???\n  // viewClientProgram() {\n  //   console.log('view client program');\n  // }\n\n  deleteClientProgram() {\n    console.log('delete client program');\n  }\n\n  onClose(): void {\n    this.dialogRef.close();\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n"]}