{"version":3,"mappings":"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","names":["ɵɵelement","ɵɵelementStart","ɵɵelementEnd","ɵɵtext","ɵɵadvance","ɵɵtextInterpolate","muscle_r3","bodyArea_r4","translations","ctx_r1","selectedLanguage","movement_r5","startingPosition_r6","equipment_r7","ɵɵlistener","FullExerciseComponent_Conditional_1_Template_ui_page_toolbar_cancelEvent_0_listener","ɵɵrestoreView","_r1","ɵɵnextContext","ɵɵresetView","onBack","ɵɵi18n","ɵɵrepeaterCreate","FullExerciseComponent_Conditional_1_For_22_Template","ɵɵrepeaterTrackByIdentity","FullExerciseComponent_Conditional_1_For_28_Template","FullExerciseComponent_Conditional_1_For_34_Template","FullExerciseComponent_Conditional_1_For_40_Template","FullExerciseComponent_Conditional_1_For_46_Template","FullExerciseComponent_Conditional_1_Template_ui_basic_programs_table_viewProgramEvent_50_listener","$event","viewProgramModal","ɵɵproperty","exercise","video","images","mainImg","themeSignal","name","description","ɵɵrepeater","muscles","bodyAreas","movements","startingPositions","equipments","dataSourceAllPrograms","FullExerciseComponent","_FullExerciseComponent","constructor","location","inject","Location","exercisesService","ExercisesService","localstorageService","LocalstorageService","themeManager","ThemeManagerService","programsService","ProgramsService","dialog","MatDialog","exerciseId","input","MatTableDataSource","subscriptions","Subscription","isLoading","signal","ngOnInit","_getUserLanguageToken","getExercise","subscribe","data","programs","set","getToken","split","programId","subscription","getProgram","program","dialogRef","open","ProgramModalComponent","width","title","selectedLang","isClient","panelClass","afterClosed","result","console","log","add","back","ngOnDestroy","unsubscribe","selectors","inputs","decls","vars","consts","i18n_0","ɵɵtemplate","FullExerciseComponent_Conditional_0_Template","FullExerciseComponent_Conditional_1_Template","ɵɵconditional","tmp_0_0","ctx","CommonModule","PageToolbarComponent","MatChipsModule","MatChip","MatChipSet","VideoPlayerComponent","OverlayscrollbarsModule","OverlayScrollbarsComponent","BasicProgramsTableComponent","styles","changeDetection","className","filePath","lineNumber"],"ignoreList":[],"sources":["apps/sanare-app/src/app/pages/exercises/full-exercise/full-exercise.component.html","apps/sanare-app/src/app/pages/exercises/full-exercise/full-exercise.component.ts"],"sourcesContent":["@if (isLoading(); as isLoading) {\n  <!-- @if (1) { -->\n  <div class=\"page-toolbar-placeholder\"></div>\n  <div class=\"video-skeleton-wrapper\">\n    <div class=\"video-skeleton\"></div>\n  </div>\n} @else {\n  <!-- @defer { -->\n  <ui-page-toolbar\n    [pageType]=\"'exercise'\"\n    [editMode]=\"true\"\n    (cancelEvent)=\"onBack()\"\n  ></ui-page-toolbar>\n  <!-- } @placeholder (minimum 500ms) { -->\n  <!-- } -->\n  <div class=\"content-container\">\n    <div class=\"exercise-video-wrapper\">\n      <!-- @defer { -->\n      <ui-video-player\n        [videoSrc]=\"exercise.video\"\n        [thumbnail]=\"exercise.images?.mainImg\"\n        [isModal]=\"true\"\n      />\n      <!-- } @placeholder (minimum 500ms) { -->\n      <!-- } -->\n    </div>\n    <div\n      class=\"exercise-info-wrapper\"\n      overlay-scrollbars\n      [options]=\"themeSignal()\"\n      [defer]\n    >\n      <div class=\"info-flex-container\">\n        <div class=\"dialog-content-wrapper\">\n          <div class=\"category-labels\">\n            <span i18n=\"@@ExerciseModal.exerciseName\" class=\"label\"\n              >Exercise name:\n            </span>\n            <span class=\"category-value\">{{\n              exercise.name[selectedLanguage]\n            }}</span>\n          </div>\n          <div class=\"category-labels\">\n            <span i18n=\"@@ExerciseModal.exerciseDescription\" class=\"label\"\n              >Description:\n            </span>\n            <span class=\"category-value\">{{\n              exercise.description[selectedLanguage]\n            }}</span>\n          </div>\n          <div class=\"category-labels\">\n            <span i18n=\"@@ExerciseModal.muscles\" class=\"label\">Muscles: </span>\n            <mat-chip-set>\n              @for (muscle of exercise.muscles; track muscle) {\n                <mat-chip class=\"chips-category\">{{ muscle }}</mat-chip>\n              }\n            </mat-chip-set>\n          </div>\n          <div class=\"category-labels\">\n            <span i18n=\"@@ExerciseModal.bodyAreas\" class=\"label\"\n              >Body areas:\n            </span>\n            <mat-chip-set>\n              @for (bodyArea of exercise.bodyAreas; track bodyArea) {\n                <mat-chip class=\"chips-category\">{{\n                  bodyArea.translations?.[selectedLanguage]\n                }}</mat-chip>\n              }\n            </mat-chip-set>\n          </div>\n          <div class=\"category-labels\">\n            <span i18n=\"@@ExerciseModal.movements\" class=\"label\"\n              >Movements:\n            </span>\n            <mat-chip-set>\n              @for (movement of exercise.movements; track movement) {\n                <mat-chip class=\"chips-category\">{{\n                  movement.translations?.[selectedLanguage]\n                }}</mat-chip>\n              }\n            </mat-chip-set>\n          </div>\n          <div class=\"category-labels\">\n            <span i18n=\"@@ExerciseModal.startingPositions\" class=\"label\"\n              >Starting positions:\n            </span>\n            <mat-chip-set>\n              @for (\n                startingPosition of exercise.startingPositions;\n                track startingPosition\n              ) {\n                <mat-chip class=\"chips-category\">{{\n                  startingPosition.translations?.[selectedLanguage]\n                }}</mat-chip>\n              }\n            </mat-chip-set>\n          </div>\n          <div class=\"category-labels\">\n            <span i18n=\"@@ExerciseModal.equipment\" class=\"label\"\n              >Equipment:\n            </span>\n            <mat-chip-set>\n              @for (equipment of exercise.equipments; track equipment) {\n                <mat-chip class=\"chips-category\">{{\n                  equipment.translations[selectedLanguage]\n                }}</mat-chip>\n              }\n            </mat-chip-set>\n          </div>\n        </div>\n        <div class=\"programs-wrapper\">\n          <span i18n=\"@@FullExerciseProgramsTable.pageTitle\"class=\"label\">Programs: </span>\n          <ui-basic-programs-table\n            class=\"ui-programs-table\"\n            [dataSource]=\"dataSourceAllPrograms\"\n            [isClient]=\"false\"\n            (viewProgramEvent)=\"viewProgramModal($event)\"\n          ></ui-basic-programs-table>\n        </div>\n      </div>\n    </div>\n  </div>\n}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  effect,\n  inject,\n  Injector,\n  input,\n  OnDestroy,\n  OnInit,\n  signal,\n  Signal,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { PageToolbarComponent } from '../../../../../../../libs/ui/src/lib/components/page-toolbar/page-toolbar.component';\nimport { Location } from '@angular/common';\nimport { ExercisesService } from '../../../../../../../libs/exercises/src/lib/services/exercises.service';\nimport { Exercise } from '../../../../../../../libs/exercises/src/lib/models/exercise';\nimport { Observable, Subscription } from 'rxjs';\nimport { LocalstorageService } from '@slowautomobile/users';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { VideoPlayerComponent } from '../../../../../../../libs/ui/src/lib/components/video-player/video-player.component';\nimport { ProgramModalComponent, ThemeManagerService } from '@slowautomobile/ui';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Program } from '../../../../../../../libs/exercises/src/lib/models/program';\nimport { BasicProgramsTableComponent } from '../../../../../../../libs/ui/src/lib/components/basic-programs-table/basic-programs-table.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ProgramsService } from '../../../../../../../libs/exercises/src/lib/services/programs/programs.service';\n\n@Component({\n  selector: 'full-exercise',\n  imports: [\n    CommonModule,\n    PageToolbarComponent,\n    MatChipsModule,\n    VideoPlayerComponent,\n    OverlayscrollbarsModule,\n    BasicProgramsTableComponent,\n  ],\n  templateUrl: './full-exercise.component.html',\n  styleUrl: './full-exercise.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FullExerciseComponent implements OnInit, OnDestroy {\n  private location = inject(Location);\n  private exercisesService = inject(ExercisesService);\n  private localstorageService = inject(LocalstorageService);\n  themeManager = inject(ThemeManagerService);\n  private programsService = inject(ProgramsService);\n  dialog = inject(MatDialog);\n\n  exerciseId = input<string>('');\n  exercise$!: Observable<Exercise>;\n  exercise!: Exercise;\n  selectedLanguage!: 'en' | 'de' | 'sr';\n  themeSignal = this.themeManager.themeSignal;\n  dataSourceAllPrograms = new MatTableDataSource<Program>();\n  subscriptions = new Subscription();\n  isLoading = signal(true);\n\n  ngOnInit(): void {\n    this.selectedLanguage = this._getUserLanguageToken();\n\n    this.exercisesService.getExercise(this.exerciseId()).subscribe(exercise => {\n      this.exercise = exercise;\n\n      this.dataSourceAllPrograms.data = exercise.programs as Program[];\n\n      this.isLoading.set(false);\n    });\n  }\n\n  private _getUserLanguageToken(): 'en' | 'de' | 'sr' {\n    return <'en' | 'de' | 'sr'>(\n      this.localstorageService.getToken('userLanguage')?.split('-')[0]\n    );\n  }\n\n  viewProgramModal(programId: string) {\n    const subscription = this.programsService\n      .getProgram(programId)\n      .subscribe((program: any) => {\n        const dialogRef = this.dialog.open(ProgramModalComponent, {\n          width: '500px',\n          // height: '736px',\n          data: {\n            title: $localize`:@@ProgramModal.modalTitle:Program info`,\n            program: program,\n            selectedLang: this.selectedLanguage,\n            isClient: false,\n          },\n          // disableClose: true, // Disable closing when clicked outside\n          panelClass: 'custom-dialog',\n          // enterAnimationDuration: 0,\n        });\n\n        const subscription = dialogRef.afterClosed().subscribe(result => {\n          console.log('Program modal exited');\n        });\n        this.subscriptions.add(subscription);\n      });\n    this.subscriptions.add(subscription);\n  }\n\n  onBack() {\n    this.location.back();\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n"]}