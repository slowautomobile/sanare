{"version":3,"mappings":"2iBACEA,EAAA,uBAAAC,CAAA,QAAAC,CAAA,CAAAC,CAAA,GAAiBC,EAAA,YAAAC,EAAAC,UAAA,cAAAC,EAAAN,CAAA,CAAAO,CAAA,KAAAP,CAAA,QAAAC,CAAA,CAAAO,CAAA,GAcbC,EAAA,wBAIEC,EAAA,sCAAAC,EAAA,CAAAC,EAAAC,CAAA,KAAAT,GAAAU,EAAA,QAAAC,GAA8BX,EAAAY,sBAAAL,CAAA,CAA6B,KAC5DM,EAAA,MAAAjB,CAAA,QAAAC,CAAA,CAAAC,CAAA,GAJCC,EAAA,YAAAC,EAAAc,gBAAA,EAA8B,qBAAAd,EAAAe,kBAAA,EACW,6BAAAC,EAAApB,CAAA,CAAAO,CAAA,EAAAP,CAAA,KAK3CS,EAAA,WACEV,EAAA,WAAyC,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WAE3CkB,EAAA,ICNN,GAAaI,KAAkB,KAAzB,KAAOA,EAAkB,CAV/BC,aAAA,CAWU,KAAAC,eAAiBC,EAAOC,CAAc,EACtC,KAAAC,OAASF,EAAOG,CAAM,EACtB,KAAAC,wBAA0BJ,EAAOK,CAAuB,EACxD,KAAAC,gBAAkBN,EAAOO,CAAiB,EAC1C,KAAAC,kBAAoBR,EAAOS,CAAiB,EAGpD,KAAAd,mBAAgC,GAChC,KAAAe,WAAa,KAAKN,wBAAwBM,WAG1C,KAAA7B,UAAY,KAAKyB,gBAAgBzB,UACjC,KAAA8B,aAAeX,EAAOY,CAAmB,EACzC,KAAAC,YAAc,KAAKF,aAAaE,YAChC,KAAAC,WAAa,KAAKN,kBAAkBM,YAEpCC,UAAQ,CACN,KAAKlC,UAAUmC,eAA+C,EAE9D,KAAKtB,iBAAmB,KAAKK,eAC1BkB,2BAA0B,EAC1BC,KACCC,EAAIC,GAAW,CAEb,GAAMC,GAAc,GAAIC,QAElBC,EAAyB,GAC/BH,SAASI,QAAQC,GAAU,CAEzB,GAAMC,GAAiBD,EAAQA,QACzBE,EAAmB,GAAIL,MAAKI,EAAeE,UAAUC,KAAK,EAC1DC,EAAiB,GAAIR,MAAKI,EAAeE,UAAUG,GAAG,EAEtDC,EACJF,EAAeG,QAAO,EAAKN,EAAiBM,QAAO,EAC/CC,EACJb,EAAYY,QAAO,EAAKN,EAAiBM,QAAO,EAC5CE,EAAWC,KAAKC,IAAKH,EAAcF,EAAiB,IAAK,GAAG,EAClEN,EAAeS,SAAWC,KAAKE,MAAMH,CAAQ,EAEzCL,EAAiBT,IACnB,KAAK1B,mBAAmB4C,KAAK,EAAK,EAClChB,EAAgBgB,KAAKb,CAAc,EACnCc,QAAQC,IAAI,6BAA6B,EAE7C,EAAC,EACDlB,EAAgBmB,KACd,CAACC,EAAGC,IACF,GAAItB,MAAKsB,EAAEhB,UAAUG,GAAG,EAAEE,QAAO,EACjC,GAAIX,MAAKqB,EAAEf,UAAUG,GAAG,EAAEE,QAAO,CAAE,EAEvCO,QAAQC,IAAIlB,CAAe,EACpBA,CACT,EAAC,CAAC,CAER,EAEA/B,sBAAsBqD,EAAgB,CACpCL,QAAQC,IAAII,CAAW,EAGvB,GAAMC,GAAYD,EAAYE,GACxBC,EAAcH,EAAYI,KAE1BrB,EAAYiB,EAAYjB,UAC9BY,QAAQC,IAAIb,CAAS,EAErB,KAAKlB,WAAWM,IAAI,CAClBkC,SAAUL,EAAYK,SACtBC,WAAYN,EAAYM,WACxBC,gBAAiBP,EAAYQ,SAC7BP,UAAWA,EACXE,YAAaA,EACbpB,UAAWA,EACZ,EAMD,KAAK1B,OAAOoD,SAAS,CAAC,iBAAiBR,CAAS,EAAE,EAAG,CACnDS,YAAa,CACXP,YAAa,GAAGA,CAAW,GAC3BQ,gBAAiBR,EAAYS,WAAa,QAAU,QAEvD,CACH,cAAAC,IAAA,UAAAC,CAAA,aAAAA,CAAA,EAvFW9D,IAAkB,gBAAA+D,IAAA,CAAAC,CAAA,EAAAC,IAAA,CAAlBjE,EAAkBkE,UAAA,0BAAAC,MAAA,EAAAC,KAAA,EAAAC,WAAA,IAAAC,uCDrB4CC,0VAL3EC,EAAA,EAAAC,EAAA,yBAIArF,EAAA,WAAuC,UACrCsF,EAAA,KAEA9E,EAAA,EACAR,EAAA,WAMEoF,EAAA,EAAAG,EAAA,KAmBC,EAAAC,EAAA,MAnBDC,EAAA,IAAAC,EAAA,mBAAAC,CAAA,EAAAC,CAAA,GAoBFpF,EAAA,EAAM,GAAAkE,CAAA,QAAAmB,CAAA,CAlCRC,GAAAC,EAAAC,EAAAnE,WAAA,UAAAkE,EAAAE,UAAA,MAWIC,EAAA,GAAAxG,EAAA,UAAAsG,EAAApE,YAAA,MAAAuE,YAAA,ECUIC,EAEAC,EAAuBC,CAAA,EAAAC,OAAA,6uCAGlB3F,EAAkB,aAAA4F,EAAA,IAAA5F,kBAAA","names":["ɵɵelement","t","e","p","ɵɵproperty","ctx_r0","pageTitle","F","d","M","ɵɵelementStart","ɵɵlistener","$event","ɵɵrestoreView","_r2","ɵɵnextContext","ɵɵresetView","openEditClientProgram","ɵɵelementEnd","clientsPrograms$","isProgramCompleted","L","DashboardComponent","constructor","clientsService","inject","ClientsService","router","Router","shareClientsDataService","ShareClientsDataService","activePageTitle","ActivePageService","screenSizeService","ScreenSizeService","clientInfo","themeManager","ThemeManagerService","themeSignal","screenSize","ngOnInit","set","getAllClientsProgramsBasic","pipe","map","programs","currentDate","Date","adaptedPrograms","forEach","program","adaptedProgram","programStartDate","dateRange","start","programEndDate","end","totalDuration","getTime","elapsedTime","progress","Math","min","round","push","console","log","sort","a","b","programData","programId","id","programName","name","clientId","clientName","programPosition","position","navigate","queryParams","isClientProgram","isTemplate","ɵfac","i","ɵcmp","S","type","selectors","decls","vars","consts","i18n_0","$localize","ɵɵtemplate","DashboardComponent_Conditional_0_Template","ɵɵi18n","DashboardComponent_Defer_5_Template","DashboardComponent_DeferPlaceholder_6_Template","ɵɵdefer","DashboardComponent_Defer_7_DepsFn","ɵɵdeferEnableTimerScheduling","T","r","ɵɵconditional","tmp_0_0","ctx","isCompact","ɵɵadvance","dependencies","PageToolbarComponent","OverlayscrollbarsModule","OverlayScrollbarsComponent","styles","ee"],"ignoreList":[],"sources":["apps/sanare-app/src/app/pages/dashboard/dashboard.component.html","apps/sanare-app/src/app/pages/dashboard/dashboard.component.ts"],"sourcesContent":["@if (!screenSize()?.isCompact) {\n  <ui-page-toolbar [pageTitle]=\"pageTitle()\"></ui-page-toolbar>\n}\n\n<div class=\"client-progress-container\">\n  <h3 class=\"mat-title-large-margin-plus\" i18n=\"@@Dashboard.progressTitle\">\n    Recent clients progress\n  </h3>\n  <div\n    class=\"scrollable-container\"\n    overlay-scrollbars\n    [options]=\"themeSignal()\"\n    [defer]\n  >\n    @defer {\n      <clients-progress\n        [programs$]=\"clientsPrograms$\"\n        [isProgramCompleted]=\"isProgramCompleted\"\n        [isDashboard]=\"true\"\n        (openEditClientProgramEvent)=\"openEditClientProgram($event)\"\n      ></clients-progress>\n    } @placeholder (minimum 1s) {\n      <div class=\"programs-list-wrapper-placeholder\">\n        <div class=\"program-list-skeleton\"></div>\n        <div class=\"program-list-skeleton\"></div>\n        <div class=\"program-list-skeleton\"></div>\n        <div class=\"program-list-skeleton\"></div>\n        <div class=\"program-list-skeleton\"></div>\n        <div class=\"program-list-skeleton\"></div>\n        <div class=\"program-list-skeleton\"></div>\n        <div class=\"program-list-skeleton\"></div>\n        <div class=\"program-list-skeleton\"></div>\n      </div>\n    }\n  </div>\n</div>\n<!-- @for (program of clientsPrograms$ | async; track program) {\n  <div>{{ program.program.name }}</div>\n} -->\n","import { Component, inject, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  ClientsService,\n  ShareClientsDataService,\n} from '@slowautomobile/exercises';\nimport {\n  ActivePageService,\n  ScreenSizeService,\n  ThemeManagerService,\n} from '@slowautomobile/ui';\nimport { Observable, map, shareReplay } from 'rxjs';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\nimport { PageToolbarComponent } from '@slowautomobile/ui';\nimport { ClientsProgressComponent } from '@slowautomobile/clients';\nimport { AsyncPipe } from '@angular/common';\n@Component({\n    selector: 'sanareapp-dashboard',\n    templateUrl: './dashboard.component.html',\n    styleUrl: './dashboard.component.scss',\n    imports: [\n        PageToolbarComponent,\n        ClientsProgressComponent,\n        OverlayscrollbarsModule,\n    ]\n})\nexport class DashboardComponent implements OnInit {\n  private clientsService = inject(ClientsService);\n  private router = inject(Router);\n  private shareClientsDataService = inject(ShareClientsDataService);\n  private activePageTitle = inject(ActivePageService);\n  private screenSizeService = inject(ScreenSizeService);\n\n  clientsPrograms$!: Observable<any[]>;\n  isProgramCompleted: boolean[] = [];\n  clientInfo = this.shareClientsDataService.clientInfo;\n  // isClientProgram = this.shareClientsDataService.isClientProgram;\n\n  pageTitle = this.activePageTitle.pageTitle;\n  themeManager = inject(ThemeManagerService);\n  themeSignal = this.themeManager.themeSignal;\n  screenSize = this.screenSizeService.screenSize;\n\n  ngOnInit(): void {\n    this.pageTitle.set($localize`:@@Dashboard.pageTitle:Dashboard`);\n\n    this.clientsPrograms$ = this.clientsService\n      .getAllClientsProgramsBasic()\n      .pipe(\n        map(programs => {\n          // const adaptedPrograms = [...programs];\n          const currentDate = new Date();\n          // const programsClone = [...programs];\n          const adaptedPrograms: any[] = [];\n          programs.forEach(program => {\n            // console.log(program.program);\n            const adaptedProgram = program.program;\n            const programStartDate = new Date(adaptedProgram.dateRange.start);\n            const programEndDate = new Date(adaptedProgram.dateRange.end);\n\n            const totalDuration =\n              programEndDate.getTime() - programStartDate.getTime();\n            const elapsedTime =\n              currentDate.getTime() - programStartDate.getTime();\n            const progress = Math.min((elapsedTime / totalDuration) * 100, 100); // Ensure progress doesn't exceed 100%\n            adaptedProgram.progress = Math.round(progress);\n\n            if (programEndDate > currentDate) {\n              this.isProgramCompleted.push(false);\n              adaptedPrograms.push(adaptedProgram);\n              console.log('This program is in progress');\n            }\n          });\n          adaptedPrograms.sort(\n            (a, b) =>\n              new Date(b.dateRange.end).getTime() -\n              new Date(a.dateRange.end).getTime(),\n          );\n          console.log(adaptedPrograms);\n          return adaptedPrograms;\n        }),\n      );\n  }\n\n  openEditClientProgram(programData: any) {\n    console.log(programData);\n    // console.log(this.programs[programPosition - 1]);\n    // this.isClientProgram.set(true);\n    const programId = programData.id;\n    const programName = programData.name;\n\n    const dateRange = programData.dateRange;\n    console.log(dateRange);\n\n    this.clientInfo.set({\n      clientId: programData.clientId,\n      clientName: programData.clientName,\n      programPosition: programData.position,\n      programId: programId,\n      programName: programName,\n      dateRange: dateRange,\n    });\n\n    // this.router.navigateByUrl(`programs/form/${programId}`);\n    // this.router.navigateByUrl(\n    //   `clients/form/${this.clientId}/programs/${programId}`,\n    // );\n    this.router.navigate([`programs/form/${programId}`], {\n      queryParams: {\n        programName: `${programName}`,\n        isClientProgram: programName.isTemplate ? 'false' : 'true',\n      },\n    });\n  }\n}\n"]}