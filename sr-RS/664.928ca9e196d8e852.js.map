{"version":3,"file":"664.928ca9e196d8e852.js","mappings":"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","sources":["./node_modules/@angular/material/fesm2022/menu.mjs","./node_modules/@angular/material/fesm2022/toolbar.mjs","./apps/sanare-app/src/app/shared/navigation-rail/navigation-rail.component.html","./apps/sanare-app/src/app/shared/navigation-rail/navigation-rail.component.ts"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, booleanAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Optional, Input, Directive, QueryList, EventEmitter, inject, Injector, afterNextRender, TemplateRef, ContentChildren, ViewChild, ContentChild, Output, ChangeDetectorRef, Self, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Subject, merge, Subscription, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, takeUntil, filter, take, delay } from 'rxjs/operators';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i3 from '@angular/cdk/bidi';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * Single item inside a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem {\n    constructor(_elementRef, _document, _focusMonitor, _parentMenu, _changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** ARIA role for the menu item. */\n        this.role = 'menuitem';\n        /** Whether the menu item is disabled. */\n        this.disabled = false;\n        /** Whether ripples are disabled on the menu item. */\n        this.disableRipple = false;\n        /** Stream that emits when the menu item is hovered. */\n        this._hovered = new Subject();\n        /** Stream that emits when the menu item is focused. */\n        this._focused = new Subject();\n        /** Whether the menu item is highlighted. */\n        this._highlighted = false;\n        /** Whether the menu item acts as a trigger for a sub-menu. */\n        this._triggersSubmenu = false;\n        _parentMenu?.addItem?.(this);\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element, so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons, so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            icons[i].remove();\n        }\n        return clone.textContent?.trim() || '';\n    }\n    _setHighlighted(isHighlighted) {\n        // We need to mark this for check for the case where the content is coming from a\n        // `matMenuContent` whose change detection tree is at the declaration position,\n        // not the insertion position. See #23175.\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._highlighted = isHighlighted;\n        this._changeDetectorRef?.markForCheck();\n    }\n    _setTriggersSubmenu(triggersSubmenu) {\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._triggersSubmenu = triggersSubmenu;\n        this._changeDetectorRef?.markForCheck();\n    }\n    _hasFocus() {\n        return this._document && this._document.activeElement === this._getHostElement();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatMenuItem, deps: [{ token: i0.ElementRef }, { token: DOCUMENT }, { token: i1.FocusMonitor }, { token: MAT_MENU_PANEL, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"18.2.0-next.2\", type: MatMenuItem, isStandalone: true, selector: \"[mat-menu-item]\", inputs: { role: \"role\", disabled: [\"disabled\", \"disabled\", booleanAttribute], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute] }, host: { listeners: { \"click\": \"_checkDisabled($event)\", \"mouseenter\": \"_handleMouseEnter()\" }, properties: { \"attr.role\": \"role\", \"class.mat-mdc-menu-item-highlighted\": \"_highlighted\", \"class.mat-mdc-menu-item-submenu-trigger\": \"_triggersSubmenu\", \"attr.tabindex\": \"_getTabIndex()\", \"attr.aria-disabled\": \"disabled\", \"attr.disabled\": \"disabled || null\" }, classAttribute: \"mat-mdc-menu-item mat-mdc-focus-indicator\" }, exportAs: [\"matMenuItem\"], ngImport: i0, template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n@if (_triggersSubmenu) {\\n     <svg\\n       class=\\\"mat-mdc-menu-submenu-icon\\\"\\n       viewBox=\\\"0 0 5 10\\\"\\n       focusable=\\\"false\\\"\\n       aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n}\\n\", dependencies: [{ kind: \"directive\", type: MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatMenuItem, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-menu-item]', exportAs: 'matMenuItem', host: {\n                        '[attr.role]': 'role',\n                        'class': 'mat-mdc-menu-item mat-mdc-focus-indicator',\n                        '[class.mat-mdc-menu-item-highlighted]': '_highlighted',\n                        '[class.mat-mdc-menu-item-submenu-trigger]': '_triggersSubmenu',\n                        '[attr.tabindex]': '_getTabIndex()',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[attr.disabled]': 'disabled || null',\n                        '(click)': '_checkDisabled($event)',\n                        '(mouseenter)': '_handleMouseEnter()',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, imports: [MatRipple], template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n@if (_triggersSubmenu) {\\n     <svg\\n       class=\\\"mat-mdc-menu-submenu-icon\\\"\\n       viewBox=\\\"0 0 5 10\\\"\\n       focusable=\\\"false\\\"\\n       aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n}\\n\" }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: i0.ChangeDetectorRef }], propDecorators: { role: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\n/** Menu content that will be rendered lazily once the menu is opened. */\nclass MatMenuContent {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Emits when the menu content has been attached. */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        this._changeDetectorRef?.markForCheck();\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatMenuContent, deps: [{ token: i0.TemplateRef }, { token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatMenuContent, isStandalone: true, selector: \"ng-template[matMenuContent]\", providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatMenuContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matMenuContent]',\n                    providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ChangeDetectorRef }] });\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)',\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1)',\n        }))),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ]),\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\nlet menuPanelUid = 0;\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\nclass MatMenu {\n    /** Position of the menu in the X axis. */\n    get xPosition() {\n        return this._xPosition;\n    }\n    set xPosition(value) {\n        if (value !== 'before' &&\n            value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() {\n        return this._yPosition;\n    }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        const newClassList = { ...this._classList };\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                newClassList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                newClassList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n        this._classList = newClassList;\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() {\n        return this.panelClass;\n    }\n    set classList(classes) {\n        this.panelClass = classes;\n    }\n    constructor(_elementRef, \n    /**\n     * @deprecated Unused param, will be removed.\n     * @breaking-change 19.0.0\n     */\n    _unusedNgZone, defaultOptions, \n    // @breaking-change 15.0.0 `_changeDetectorRef` to become a required parameter.\n    _changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elevationPrefix = 'mat-elevation-z';\n        this._baseElevation = null;\n        /** Only the direct descendant menu items. */\n        this._directDescendantItems = new QueryList();\n        /** Classes to be applied to the menu panel. */\n        this._classList = {};\n        /** Current state of the panel animation. */\n        this._panelAnimationState = 'void';\n        /** Emits whenever an animation on the menu completes. */\n        this._animationDone = new Subject();\n        /** Event emitted when the menu is closed. */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * @breaking-change 8.0.0\n         */\n        this.close = this.closed;\n        this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n        this._injector = inject(Injector);\n        this.overlayPanelClass = defaultOptions.overlayPanelClass || '';\n        this._xPosition = defaultOptions.xPosition;\n        this._yPosition = defaultOptions.yPosition;\n        this.backdropClass = defaultOptions.backdropClass;\n        this.overlapTrigger = defaultOptions.overlapTrigger;\n        this.hasBackdrop = defaultOptions.hasBackdrop;\n    }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes\n            .pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused))))\n            .subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n        this._directDescendantItems.changes.subscribe((itemsList) => {\n            // Move focus to another item, if the active item is removed from the list.\n            // We need to debounce the callback, because multiple items might be removed\n            // in quick succession.\n            const manager = this._keyManager;\n            if (this._panelAnimationState === 'enter' && manager.activeItem?._hasFocus()) {\n                const items = itemsList.toArray();\n                const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n                if (items[index] && !items[index].disabled) {\n                    manager.setActiveItem(index);\n                }\n                else {\n                    manager.setNextItemActive();\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._directDescendantItems.destroy();\n        this.closed.complete();\n        this._firstItemFocusRef?.destroy();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n                return;\n        }\n        // Don't allow the event to propagate if we've already handled it, or it may\n        // end up reaching other overlays that were opened earlier (see #22694).\n        event.stopPropagation();\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // Wait for `afterNextRender` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n        this._firstItemFocusRef?.destroy();\n        this._firstItemFocusRef = afterNextRender(() => {\n            let menuPanel = null;\n            if (this._directDescendantItems.length) {\n                // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n                // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n                // because the panel is inside an `ng-template`. We work around it by starting from one of\n                // the items and walking up the DOM.\n                menuPanel = this._directDescendantItems.first._getHostElement().closest('[role=\"menu\"]');\n            }\n            // If an item in the menuPanel is already focused, avoid overriding the focus.\n            if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n                const manager = this._keyManager;\n                manager.setFocusOrigin(origin).setFirstItemActive();\n                // If there's no active item at this point, it means that all the items are disabled.\n                // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n                // give _some_ feedback to screen readers.\n                if (!manager.activeItem && menuPanel) {\n                    menuPanel.focus();\n                }\n            }\n        }, { injector: this._injector });\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth) {\n        // The base elevation depends on which version of the spec\n        // we're running so we have to resolve it at runtime.\n        if (this._baseElevation === null) {\n            const styles = typeof getComputedStyle === 'function'\n                ? getComputedStyle(this._elementRef.nativeElement)\n                : null;\n            const value = styles?.getPropertyValue('--mat-menu-base-elevation-level') || '8';\n            this._baseElevation = parseInt(value);\n        }\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        const elevation = Math.min(this._baseElevation + depth, 24);\n        const newElevation = `${this._elevationPrefix}${elevation}`;\n        const customElevation = Object.keys(this._classList).find(className => {\n            return className.startsWith(this._elevationPrefix);\n        });\n        if (!customElevation || customElevation === this._previousElevation) {\n            const newClassList = { ...this._classList };\n            if (this._previousElevation) {\n                newClassList[this._previousElevation] = false;\n            }\n            newClassList[newElevation] = true;\n            this._previousElevation = newElevation;\n            this._classList = newClassList;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        this._classList = {\n            ...this._classList,\n            ['mat-menu-before']: posX === 'before',\n            ['mat-menu-after']: posX === 'after',\n            ['mat-menu-above']: posY === 'above',\n            ['mat-menu-below']: posY === 'below',\n        };\n        // @breaking-change 15.0.0 Remove null check for `_changeDetectorRef`.\n        this._changeDetectorRef?.markForCheck();\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatMenu, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatMenu, isStandalone: true, selector: \"mat-menu\", inputs: { backdropClass: \"backdropClass\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: [\"overlapTrigger\", \"overlapTrigger\", booleanAttribute], hasBackdrop: [\"hasBackdrop\", \"hasBackdrop\", (value) => (value == null ? null : booleanAttribute(value))], panelClass: [\"class\", \"panelClass\"], classList: \"classList\" }, outputs: { closed: \"closed\", close: \"close\" }, host: { properties: { \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" } }, providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], queries: [{ propertyName: \"lazyContent\", first: true, predicate: MAT_MENU_CONTENT, descendants: true }, { propertyName: \"_allItems\", predicate: MatMenuItem, descendants: true }, { propertyName: \"items\", predicate: MatMenuItem }], viewQueries: [{ propertyName: \"templateRef\", first: true, predicate: TemplateRef, descendants: true }], exportAs: [\"matMenu\"], ngImport: i0, template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel mat-mdc-elevation-specific\\\"\\n    [id]=\\\"panelId\\\"\\n    [class]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;outline:0}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;flex:1;white-space:normal;font-family:var(--mat-menu-item-label-text-font, var(--mat-app-label-large-font));line-height:var(--mat-menu-item-label-text-line-height, var(--mat-app-label-large-line-height));font-size:var(--mat-menu-item-label-text-size, var(--mat-app-label-large-size));letter-spacing:var(--mat-menu-item-label-text-tracking, var(--mat-app-label-large-tracking));font-weight:var(--mat-menu-item-label-text-weight, var(--mat-app-label-large-weight))}.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape, var(--mat-app-corner-extra-small));background-color:var(--mat-menu-container-color, var(--mat-app-surface-container));will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.mat-mdc-menu-panel.ng-animating:has(.mat-mdc-menu-content:empty){display:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-mdc-menu-panel .mat-divider{color:var(--mat-menu-divider-color, var(--mat-app-surface-variant));margin-bottom:var(--mat-menu-divider-bottom-spacing);margin-top:var(--mat-menu-divider-top-spacing)}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:var(--mat-menu-item-leading-spacing);padding-right:var(--mat-menu-item-trailing-spacing);-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;min-height:48px}[dir=rtl] .mat-mdc-menu-item{padding-right:var(--mat-menu-item-leading-spacing);padding-left:var(--mat-menu-item-trailing-spacing)}.mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-leading-spacing);padding-right:var(--mat-menu-item-with-icon-trailing-spacing)}[dir=rtl] .mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-right:var(--mat-menu-item-with-icon-leading-spacing);padding-left:var(--mat-menu-item-with-icon-trailing-spacing)}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color, var(--mat-app-on-surface))}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color, var(--mat-app-on-surface-variant))}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item:focus{outline:0}.mat-mdc-menu-item .mat-icon{flex-shrink:0;margin-right:var(--mat-menu-item-spacing);height:var(--mat-menu-item-icon-size);width:var(--mat-menu-item-icon-size)}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:var(--mat-menu-item-spacing)}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color)}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color)}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{width:var(--mat-menu-item-icon-size);height:10px;fill:currentColor;padding-left:var(--mat-menu-item-spacing)}[dir=rtl] .mat-mdc-menu-submenu-icon{padding-right:var(--mat-menu-item-spacing);padding-left:0}[dir=rtl] .mat-mdc-menu-submenu-icon polygon{transform:scaleX(-1);transform-origin:center}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"], animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatMenu, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'matMenu', host: {\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                    }, animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], standalone: true, template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel mat-mdc-elevation-specific\\\"\\n    [id]=\\\"panelId\\\"\\n    [class]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;outline:0}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;flex:1;white-space:normal;font-family:var(--mat-menu-item-label-text-font, var(--mat-app-label-large-font));line-height:var(--mat-menu-item-label-text-line-height, var(--mat-app-label-large-line-height));font-size:var(--mat-menu-item-label-text-size, var(--mat-app-label-large-size));letter-spacing:var(--mat-menu-item-label-text-tracking, var(--mat-app-label-large-tracking));font-weight:var(--mat-menu-item-label-text-weight, var(--mat-app-label-large-weight))}.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape, var(--mat-app-corner-extra-small));background-color:var(--mat-menu-container-color, var(--mat-app-surface-container));will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.mat-mdc-menu-panel.ng-animating:has(.mat-mdc-menu-content:empty){display:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-mdc-menu-panel .mat-divider{color:var(--mat-menu-divider-color, var(--mat-app-surface-variant));margin-bottom:var(--mat-menu-divider-bottom-spacing);margin-top:var(--mat-menu-divider-top-spacing)}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:var(--mat-menu-item-leading-spacing);padding-right:var(--mat-menu-item-trailing-spacing);-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;min-height:48px}[dir=rtl] .mat-mdc-menu-item{padding-right:var(--mat-menu-item-leading-spacing);padding-left:var(--mat-menu-item-trailing-spacing)}.mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-leading-spacing);padding-right:var(--mat-menu-item-with-icon-trailing-spacing)}[dir=rtl] .mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-right:var(--mat-menu-item-with-icon-leading-spacing);padding-left:var(--mat-menu-item-with-icon-trailing-spacing)}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color, var(--mat-app-on-surface))}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color, var(--mat-app-on-surface-variant))}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item:focus{outline:0}.mat-mdc-menu-item .mat-icon{flex-shrink:0;margin-right:var(--mat-menu-item-spacing);height:var(--mat-menu-item-icon-size);width:var(--mat-menu-item-icon-size)}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:var(--mat-menu-item-spacing)}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color)}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color)}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{width:var(--mat-menu-item-icon-size);height:10px;fill:currentColor;padding-left:var(--mat-menu-item-spacing)}[dir=rtl] .mat-mdc-menu-submenu-icon{padding-right:var(--mat-menu-item-spacing);padding-left:0}[dir=rtl] .mat-mdc-menu-submenu-icon polygon{transform:scaleX(-1);transform-origin:center}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }], propDecorators: { _allItems: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: true }]\n            }], backdropClass: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], xPosition: [{\n                type: Input\n            }], yPosition: [{\n                type: Input\n            }], templateRef: [{\n                type: ViewChild,\n                args: [TemplateRef]\n            }], items: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: false }]\n            }], lazyContent: [{\n                type: ContentChild,\n                args: [MAT_MENU_CONTENT]\n            }], overlapTrigger: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], hasBackdrop: [{\n                type: Input,\n                args: [{ transform: (value) => (value == null ? null : booleanAttribute(value)) }]\n            }], panelClass: [{\n                type: Input,\n                args: ['class']\n            }], classList: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }] } });\n\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Default top padding of the menu panel.\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 15.0.0\n */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger {\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() {\n        return this.menu;\n    }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() {\n        return this._menu;\n    }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n        this._menuItemInstance?._setTriggersSubmenu(this.triggersSubmenu());\n    }\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, \n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, _focusMonitor, _ngZone) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        this._changeDetectorRef = inject(ChangeDetectorRef);\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (event) => {\n            if (!isFakeTouchstartFromScreenReader(event)) {\n                this._openedBy = 'touch';\n            }\n        };\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = undefined;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /** Event emitted when the associated menu is opened. */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /** Event emitted when the associated menu is closed. */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        this._scrollStrategy = scrollStrategy;\n        this._parentMaterialMenu = parentMenu instanceof MatMenu ? parentMenu : undefined;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n    }\n    ngAfterContentInit() {\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu && this.menu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        const menu = this.menu;\n        if (this._menuOpen || !menu) {\n            return;\n        }\n        const overlayRef = this._createOverlay(menu);\n        const overlayConfig = overlayRef.getConfig();\n        const positionStrategy = overlayConfig.positionStrategy;\n        this._setPosition(menu, positionStrategy);\n        overlayConfig.hasBackdrop =\n            menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;\n        overlayRef.attach(this._getPortal(menu));\n        if (menu.lazyContent) {\n            menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu(menu);\n        if (menu instanceof MatMenu) {\n            menu._startAnimation();\n            menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(() => {\n                // Re-adjust the position without locking when the amount of items\n                // changes so that the overlay is allowed to pick a new optimal position.\n                positionStrategy.withLockedPosition(false).reapplyLastPosition();\n                positionStrategy.withLockedPosition(true);\n            });\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu?.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        this._overlayRef?.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        if (menu instanceof MatMenu) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false),\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            menu?.lazyContent?.detach();\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu(menu) {\n        menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        menu.direction = this.dir;\n        this._setMenuElevation(menu);\n        menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    _setMenuElevation(menu) {\n        if (menu.setElevation) {\n            let depth = 0;\n            let parentMenu = menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            menu.setElevation(depth);\n        }\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        if (isOpen !== this._menuOpen) {\n            this._menuOpen = isOpen;\n            this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n            if (this.triggersSubmenu()) {\n                this._menuItemInstance._setHighlighted(isOpen);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay(menu) {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig(menu);\n            this._subscribeToPositions(menu, config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig(menu) {\n        return new OverlayConfig({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir,\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(menu, position) {\n        if (menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                // @breaking-change 15.0.0 Remove null check for `ngZone`.\n                // `positionChanges` fires outside of the `ngZone` and `setPositionClasses` might be\n                // updating something in the view so we need to bring it back in.\n                if (this._ngZone) {\n                    this._ngZone.run(() => menu.setPositionClasses(posX, posY));\n                }\n                else {\n                    menu.setPositionClasses(posX, posY);\n                }\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(menu, positionStrategy) {\n        let [originX, originFallbackX] = menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            if (this._parentMaterialMenu) {\n                if (this._parentInnerPadding == null) {\n                    const firstItem = this._parentMaterialMenu.items.first;\n                    this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;\n                }\n                offsetY = overlayY === 'bottom' ? this._parentInnerPadding : -this._parentInnerPadding;\n            }\n        }\n        else if (!menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu\n            ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen))\n            : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() &&\n            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n            return;\n        }\n        this._hoverSubscription = this._parentMaterialMenu\n            ._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal(menu) {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== menu.templateRef) {\n            this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatMenuTrigger, deps: [{ token: i1$1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: MAT_MENU_SCROLL_STRATEGY }, { token: MAT_MENU_PANEL, optional: true }, { token: MatMenuItem, optional: true, self: true }, { token: i3.Directionality, optional: true }, { token: i1.FocusMonitor }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatMenuTrigger, isStandalone: true, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", inputs: { _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"], restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, host: { listeners: { \"click\": \"_handleClick($event)\", \"mousedown\": \"_handleMousedown($event)\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"attr.aria-haspopup\": \"menu ? \\\"menu\\\" : null\", \"attr.aria-expanded\": \"menuOpen\", \"attr.aria-controls\": \"menuOpen ? menu.panelId : null\" }, classAttribute: \"mat-mdc-menu-trigger\" }, exportAs: [\"matMenuTrigger\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatMenuTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                    host: {\n                        'class': 'mat-mdc-menu-trigger',\n                        '[attr.aria-haspopup]': 'menu ? \"menu\" : null',\n                        '[attr.aria-expanded]': 'menuOpen',\n                        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                        '(click)': '_handleClick($event)',\n                        '(mousedown)': '_handleMousedown($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                    },\n                    exportAs: 'matMenuTrigger',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i1$1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_SCROLL_STRATEGY]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: MatMenuItem, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i1.FocusMonitor }, { type: i0.NgZone }], propDecorators: { _deprecatedMatMenuTriggerFor: [{\n                type: Input,\n                args: ['mat-menu-trigger-for']\n            }], menu: [{\n                type: Input,\n                args: ['matMenuTriggerFor']\n            }], menuData: [{\n                type: Input,\n                args: ['matMenuTriggerData']\n            }], restoreFocus: [{\n                type: Input,\n                args: ['matMenuTriggerRestoreFocus']\n            }], menuOpened: [{\n                type: Output\n            }], onMenuOpen: [{\n                type: Output\n            }], menuClosed: [{\n                type: Output\n            }], onMenuClose: [{\n                type: Output\n            }] } });\n\nclass MatMenuModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatMenuModule, imports: [CommonModule,\n            MatRippleModule,\n            MatCommonModule,\n            OverlayModule,\n            MatMenu,\n            MatMenuItem,\n            MatMenuContent,\n            MatMenuTrigger], exports: [CdkScrollableModule,\n            MatMenu,\n            MatCommonModule,\n            MatMenuItem,\n            MatMenuContent,\n            MatMenuTrigger] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatMenuModule, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [CommonModule,\n            MatRippleModule,\n            MatCommonModule,\n            OverlayModule, CdkScrollableModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        MatRippleModule,\n                        MatCommonModule,\n                        OverlayModule,\n                        MatMenu,\n                        MatMenuItem,\n                        MatMenuContent,\n                        MatMenuTrigger,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatMenu,\n                        MatCommonModule,\n                        MatMenuItem,\n                        MatMenuContent,\n                        MatMenuTrigger,\n                    ],\n                    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MENU_PANEL_TOP_PADDING, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, fadeInItems, matMenuAnimations, transformMenu };\n","import * as i0 from '@angular/core';\nimport { Directive, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Input, ContentChildren, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n\nclass MatToolbarRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatToolbarRow, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatToolbarRow, isStandalone: true, selector: \"mat-toolbar-row\", host: { classAttribute: \"mat-toolbar-row\" }, exportAs: [\"matToolbarRow\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatToolbarRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-toolbar-row',\n                    exportAs: 'matToolbarRow',\n                    host: { 'class': 'mat-toolbar-row' },\n                    standalone: true,\n                }]\n        }] });\nclass MatToolbar {\n    constructor(_elementRef, _platform, document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        // TODO: make the document a required param when doing breaking changes.\n        this._document = document;\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._checkToolbarMixedModes();\n            this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n        }\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     */\n    _checkToolbarMixedModes() {\n        if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            // Check if there are any other DOM nodes that can display content but aren't inside of\n            // a <mat-toolbar-row> element.\n            const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)\n                .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n                .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n                .some(node => !!(node.textContent && node.textContent.trim()));\n            if (isCombinedUsage) {\n                throwToolbarMixedModesError();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatToolbar, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatToolbar, isStandalone: true, selector: \"mat-toolbar\", inputs: { color: \"color\" }, host: { properties: { \"class\": \"color ? \\\"mat-\\\" + color : \\\"\\\"\", \"class.mat-toolbar-multiple-rows\": \"_toolbarRows.length > 0\", \"class.mat-toolbar-single-row\": \"_toolbarRows.length === 0\" }, classAttribute: \"mat-toolbar\" }, queries: [{ propertyName: \"_toolbarRows\", predicate: MatToolbarRow, descendants: true }], exportAs: [\"matToolbar\"], ngImport: i0, template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\", styles: [\".mat-toolbar{background:var(--mat-toolbar-container-background-color, var(--mat-app-surface));color:var(--mat-toolbar-container-text-color, var(--mat-app-on-surface))}.mat-toolbar,.mat-toolbar h1,.mat-toolbar h2,.mat-toolbar h3,.mat-toolbar h4,.mat-toolbar h5,.mat-toolbar h6{font-family:var(--mat-toolbar-title-text-font, var(--mat-app-title-large-font));font-size:var(--mat-toolbar-title-text-size, var(--mat-app-title-large-size));line-height:var(--mat-toolbar-title-text-line-height, var(--mat-app-title-large-line-height));font-weight:var(--mat-toolbar-title-text-weight, var(--mat-app-title-large-weight));letter-spacing:var(--mat-toolbar-title-text-tracking, var(--mat-app-title-large-tracking));margin:0}.cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar .mat-form-field-underline,.mat-toolbar .mat-form-field-ripple,.mat-toolbar .mat-focused .mat-form-field-ripple{background-color:currentColor}.mat-toolbar .mat-form-field-label,.mat-toolbar .mat-focused .mat-form-field-label,.mat-toolbar .mat-select-value,.mat-toolbar .mat-select-arrow,.mat-toolbar .mat-form-field.mat-focused .mat-select-arrow{color:inherit}.mat-toolbar .mat-input-element{caret-color:currentColor}.mat-toolbar .mat-mdc-button-base.mat-mdc-button-base.mat-unthemed{--mdc-text-button-label-text-color:var(--mat-toolbar-container-text-color, var(--mat-app-on-surface));--mdc-outlined-button-label-text-color:var(--mat-toolbar-container-text-color, var(--mat-app-on-surface))}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap;height:var(--mat-toolbar-standard-height)}@media(max-width: 599px){.mat-toolbar-row,.mat-toolbar-single-row{height:var(--mat-toolbar-mobile-height)}}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%;min-height:var(--mat-toolbar-standard-height)}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:var(--mat-toolbar-mobile-height)}}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatToolbar, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-toolbar', exportAs: 'matToolbar', host: {\n                        'class': 'mat-toolbar',\n                        '[class]': 'color ? \"mat-\" + color : \"\"',\n                        '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n                        '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\", styles: [\".mat-toolbar{background:var(--mat-toolbar-container-background-color, var(--mat-app-surface));color:var(--mat-toolbar-container-text-color, var(--mat-app-on-surface))}.mat-toolbar,.mat-toolbar h1,.mat-toolbar h2,.mat-toolbar h3,.mat-toolbar h4,.mat-toolbar h5,.mat-toolbar h6{font-family:var(--mat-toolbar-title-text-font, var(--mat-app-title-large-font));font-size:var(--mat-toolbar-title-text-size, var(--mat-app-title-large-size));line-height:var(--mat-toolbar-title-text-line-height, var(--mat-app-title-large-line-height));font-weight:var(--mat-toolbar-title-text-weight, var(--mat-app-title-large-weight));letter-spacing:var(--mat-toolbar-title-text-tracking, var(--mat-app-title-large-tracking));margin:0}.cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar .mat-form-field-underline,.mat-toolbar .mat-form-field-ripple,.mat-toolbar .mat-focused .mat-form-field-ripple{background-color:currentColor}.mat-toolbar .mat-form-field-label,.mat-toolbar .mat-focused .mat-form-field-label,.mat-toolbar .mat-select-value,.mat-toolbar .mat-select-arrow,.mat-toolbar .mat-form-field.mat-focused .mat-select-arrow{color:inherit}.mat-toolbar .mat-input-element{caret-color:currentColor}.mat-toolbar .mat-mdc-button-base.mat-mdc-button-base.mat-unthemed{--mdc-text-button-label-text-color:var(--mat-toolbar-container-text-color, var(--mat-app-on-surface));--mdc-outlined-button-label-text-color:var(--mat-toolbar-container-text-color, var(--mat-app-on-surface))}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap;height:var(--mat-toolbar-standard-height)}@media(max-width: 599px){.mat-toolbar-row,.mat-toolbar-single-row{height:var(--mat-toolbar-mobile-height)}}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%;min-height:var(--mat-toolbar-standard-height)}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:var(--mat-toolbar-mobile-height)}}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }], propDecorators: { color: [{\n                type: Input\n            }], _toolbarRows: [{\n                type: ContentChildren,\n                args: [MatToolbarRow, { descendants: true }]\n            }] } });\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nfunction throwToolbarMixedModesError() {\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n        'inside of a `<mat-toolbar>` for a single row.');\n}\n\nclass MatToolbarModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatToolbarModule, imports: [MatCommonModule, MatToolbar, MatToolbarRow], exports: [MatToolbar, MatToolbarRow, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatToolbarModule, imports: [MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatToolbarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatToolbar, MatToolbarRow],\n                    exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };\n","<mat-toolbar class=\"mat-toolbar\">\n  <div class=\"menu-logo-wrapper\">\n    <!-- THIS IS SUSPENDED (NOT VISIBLE)IN DEMO -->\n    <button\n      type=\"button\"\n      aria-label=\"Toggle sidenav\"\n      i18n-aria-label=\"@@NavigationRail.toggleSidenav\"\n      mat-icon-button\n      (click)=\"toggleNavDrawer()\"\n      style=\"display: none\"\n    >\n      <mat-icon>menu</mat-icon>\n    </button>\n    <div class=\"logo\">\n      <!-- <img src=\"assets/images/text-logo-placeholder.png\" alt=\"\" /> -->\n      <!-- <img src=\"assets/images/leaf-sanare-thin-logo-2.svg\" alt=\"\" /> -->\n      @if (isDark()) {\n        <img src=\"assets/images/leaf-sanare-thin-dark-logo-2.svg\" alt=\"\" />\n      } @else {\n        <img src=\"assets/images/leaf-sanare-thin-light-logo-2.svg\" alt=\"\" />\n      }\n    </div>\n  </div>\n  <!-- <span class=\"icons-spacer\"></span> -->\n\n  <!-- Search on toolbar should be right, different style, smaller -->\n  <!-- <ui-search\n    class=\"toolbar-search\"\n    (toggleDrawerSignal)=\"toggleDrawer()\"\n  ></ui-search> -->\n\n  <!-- <div style=\"margin-left: 16px; display: flex; align-items: center;\">\n <button\n    mat-icon-button\n    aria-label=\"Arrow back icon-button\"\n    (click)=\"onBack()\"\n     matTooltip=\"Back\"\n  >\n    <mat-icon>arrow_back</mat-icon>\n  </button>\n    <span style=\"font-weight: 400;\"> Title</span>\n  </div> -->\n  <!-- <span class=\"icons-spacer\"></span> -->\n\n  <!-- <button\n    mat-icon-button\n    class=\"example-icon\"\n    aria-label=\"Share icon-button with share icon\"\n  >\n    <mat-icon>share</mat-icon>\n  </button> -->\n\n  <!-- <button\n    mat-icon-button\n    class=\"theme-toggle\"\n    matTooltip=\"Switch theme\"\n    i18n-matTooltip=\"@@NavigationRail.switchTheme\"\n    aria-label=\"Change theme\"\n    i18n-aria-label=\"@@NavigationRail.switchThemeAriaLabel\"\n    [matMenuTriggerFor]=\"themeMenu\"\n  >\n    <mat-icon>{{\n      (isDark$ | async) === true ? 'dark_mode' : 'light_mode'\n    }}</mat-icon>\n  </button>\n  <mat-menu #themeMenu=\"matMenu\">\n    <button\n      mat-menu-item\n      (click)=\"changeTheme('auto')\"\n      i18n=\"@@NavigationRail.systemTheme\"\n    >\n      System\n    </button>\n    <button\n      mat-menu-item\n      (click)=\"changeTheme('light')\"\n      i18n=\"@@NavigationRail.lightTheme\"\n    >\n      Light\n    </button>\n    <button\n      mat-menu-item\n      (click)=\"changeTheme('dark')\"\n      i18n=\"@@NavigationRail.darkTheme\"\n    >\n      Dark\n    </button>\n  </mat-menu> -->\n  <button\n    mat-icon-button\n    matTooltip=\"Settings\"\n    routerLink=\"settings\"\n    i18n-matTooltip=\"@@NavigationRail.settings\"\n    aria-label=\"Settings icon-button\"\n    i18n-aria-label=\"@@NavigationRail.settingsAriaLabel\"\n    class=\"user-icon\"\n  >\n    <mat-icon>settings</mat-icon>\n  </button>\n  <button\n    mat-icon-button\n    [matMenuTriggerFor]=\"menu\"\n    matTooltip=\"Profile\"\n    i18n-matTooltip=\"@@NavigationRail.profile\"\n    aria-label=\"User icon-button with a menu\"\n    i18n-aria-label=\"@@NavigationRail.profileAriaLabel\"\n    class=\"user-icon\"\n  >\n    <mat-icon>person</mat-icon>\n  </button>\n  <mat-menu #menu=\"matMenu\">\n    <button mat-menu-item routerLink=\"profile\" style=\"width: 200px\">\n      <mat-icon>account_circle</mat-icon>\n      <span i18n=\"@@NavigationRail.profileMenuItem\">Profile</span>\n    </button>\n    <!-- <button mat-menu-item disabled>\n      <mat-icon>edit</mat-icon>\n      <span>Edit profile</span>\n    </button> -->\n    <button mat-menu-item (click)=\"logoutUser()\">\n      <mat-icon>logout</mat-icon>\n      <span i18n=\"@@NavigationRail.logoutMenuItem\">Logout</span>\n    </button>\n  </mat-menu>\n</mat-toolbar>\n<mat-sidenav-container autosize class=\"sidenav-container\">\n  <mat-sidenav\n    #drawer\n    class=\"sidenav\"\n    [attr.role]=\"(isCompact$ | async) ? 'dialog' : 'navigation'\"\n    [mode]=\"(isCompact$ | async) ? 'over' : 'side'\"\n    [opened]=\"navDrawerToggler || (isCompact$ | async) === false\"\n  >\n    <mat-nav-list\n      class=\"custom-nav\"\n      [ngClass]=\"{ 'expanded-custom-nav': navDrawerToggler }\"\n    >\n      <!-- @if (navDrawerToggler) {\n        <p style=\"white-space: nowrap\">\n          Lorem, ipsum dolor sit amet consectetur.\n        </p>\n      } -->\n\n      <div class=\"nav-drawer\">\n        <!-- ------------------------------------------------ -->\n        <!-- DISABLED IN DEMO, ADD FUNCTIONALITY WITH ALGOLIA -->\n        <div\n          i18n-matTooltip=\"@@NavigationRail.searchButtonDisabledMsg\"\n          matTooltip=\"Disabled in demo\"\n          style=\"margin-bottom: 30px; visibility: hidden\"\n        >\n          <button\n            mat-fab\n            class=\"custom-fab\"\n            aria-label=\"Search icon button\"\n            i18n-aria-label=\"@@NavigationRail.searchButtonAriaLabel\"\n          >\n            <mat-icon>search</mat-icon>\n          </button>\n        </div>\n        <!-- ------------------------------------------------ -->\n        <div class=\"nav-list-wrapper\">\n          <a\n            class=\"nav-list\"\n            routerLink=\"dashboard\"\n            routerLinkActive=\"active-link\"\n          >\n            <mat-icon\n              aria-label=\"Sidenav dashboard icon\"\n              i18n-aria-label=\"@@NavigationRail.sidenavDashboardAriaLabel\"\n              >grid_view</mat-icon\n            >\n            @if (navDrawerToggler) {\n              <span i18n=\"@@NavigationRail.dashboardBtn\">Dashboard</span>\n            }\n          </a>\n          @if (!navDrawerToggler) {\n            <span i18n=\"@@NavigationRail.dashboardBtn\">Dashboard</span>\n          }\n        </div>\n        <div class=\"nav-list-wrapper\">\n          <a\n            class=\"nav-list\"\n            routerLink=\"clients\"\n            routerLinkActive=\"active-link\"\n          >\n            <mat-icon\n              aria-label=\"Sidenav clients icon\"\n              i18n-aria-label=\"@@NavigationRail.sidenavClientsAriaLabel\"\n              >people_outline</mat-icon\n            >\n            @if (navDrawerToggler) {\n              <span i18n=\"@@NavigationRail.clientsBtn\">Clients</span>\n            }\n          </a>\n          @if (!navDrawerToggler) {\n            <span i18n=\"@@NavigationRail.clientsBtn\">Clients</span>\n          }\n        </div>\n        <div class=\"nav-list-wrapper\">\n          <a\n            class=\"nav-list\"\n            routerLink=\"programs\"\n            routerLinkActive=\"active-link\"\n          >\n            <mat-icon\n              aria-label=\"Sidenav programs icon\"\n              i18n-aria-label=\"@@NavigationRail.sidenavProgramsAriaLabel\"\n              >list</mat-icon\n            >\n            @if (navDrawerToggler) {\n              <span i18n=\"@@NavigationRail.programsBtn\">Programs</span>\n            }\n          </a>\n          @if (!navDrawerToggler) {\n            <span i18n=\"@@NavigationRail.programsBtn\">Programs</span>\n          }\n        </div>\n      </div>\n      <!-- <a class=\"nav-list\" routerLink=\"exercises\" routerLinkActive=\"active-link\"\n          ><mat-icon aria-label=\"Side nav toggle icon\">directions_run</mat-icon>\n          <span>Exercises</span>\n        </a> -->\n      <!-- <a class=\"nav-list\" routerLink=\"settings\" routerLinkActive=\"active-link\"\n          ><mat-icon aria-label=\"Side nav toggle icon\">settings</mat-icon>\n          <span>Settings</span>\n        </a> -->\n      <!-- </div> -->\n    </mat-nav-list>\n  </mat-sidenav>\n\n  <mat-sidenav-content class=\"navigation-sidenav\">\n    <!-- Add Content Here -->\n    <div class=\"main\">\n      <router-outlet></router-outlet>\n    </div>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n","import { Component, OnDestroy, OnInit, computed, inject } from '@angular/core';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { ShareDataService, ShareStateService } from '@slowautomobile/exercises';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport {\n  AuthService,\n  UsersService,\n  LocalstorageService,\n} from '@slowautomobile/users';\nimport {\n  Router,\n  RouterLink,\n  RouterLinkActive,\n  RouterOutlet,\n} from '@angular/router';\nimport { NgClass, AsyncPipe } from '@angular/common';\nimport { MatNavList } from '@angular/material/list';\nimport {\n  MatSidenavContainer,\n  MatSidenav,\n  MatSidenavContent,\n} from '@angular/material/sidenav';\nimport { MatMenuTrigger, MatMenu, MatMenuItem } from '@angular/material/menu';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatIconButton, MatFabButton } from '@angular/material/button';\nimport { MatToolbar } from '@angular/material/toolbar';\nimport { ThemeManagerService } from '@slowautomobile/ui';\n\n@Component({\n  selector: 'sanareapp-navigation-rail',\n  templateUrl: './navigation-rail.component.html',\n  styleUrls: ['./navigation-rail.component.scss'],\n  standalone: true,\n  imports: [\n    MatToolbar,\n    MatIconButton,\n    MatIcon,\n    MatTooltip,\n    MatMenuTrigger,\n    MatMenu,\n    MatMenuItem,\n    RouterLink,\n    MatSidenavContainer,\n    MatSidenav,\n    MatNavList,\n    NgClass,\n    MatFabButton,\n    RouterLinkActive,\n    MatSidenavContent,\n    RouterOutlet,\n    AsyncPipe,\n  ],\n})\nexport class NavigationRailComponent implements OnInit, OnDestroy {\n  private shareDataService = inject(ShareDataService);\n  private shareStateService = inject(ShareStateService);\n  private authService = inject(AuthService);\n  private router = inject(Router);\n  private tokenService = inject(LocalstorageService);\n  private usersService = inject(UsersService);\n  themeManager = inject(ThemeManagerService);\n\n  isDark = this.themeManager.isDark;\n  private breakpointObserver = inject(BreakpointObserver);\n  drawerOpen!: any;\n  navDrawerToggler = false;\n  userId = this.usersService.userId;\n  isAdmin = this.usersService.isAdmin;\n  userFavorites = this.usersService.userFavorites;\n  subscriptions = new Subscription();\n\n  // HOW IS THIS WORKING??\n  ngOnInit(): void {\n    // Assign drawer state signal\n    this.drawerOpen = this.shareStateService.drawerSignal;\n    this.getUserInfo();\n    // BehaviorSubject drawer state\n    // this.shareDataService.toggleDrawerSignal$.subscribe(drawerSignal => {\n    //   this.drawerOpen = drawerSignal;\n\n    // });\n    // Check for preffered system theme and set app theme\n    computed(() => this.isDark());\n  }\n  toggleNavDrawer() {\n    this.navDrawerToggler = !this.navDrawerToggler;\n  }\n\n  toggleDrawer() {\n    // BehaviorSubject drawer state\n    // this.shareDataService.updateToggleDrawerResults(!this.drawerOpen);\n\n    this.shareStateService.drawerSignal.update(value => !value);\n  }\n\n  isCompact$: Observable<boolean> = this.breakpointObserver\n    .observe(['(max-width: 600px)'])\n    .pipe(\n      map(result => result.matches),\n      shareReplay(),\n    );\n\n  isTablet$: Observable<boolean> = this.breakpointObserver\n    .observe(['(max-width: 1168px)'])\n    .pipe(\n      map(result => {\n        this.navDrawerToggler = false;\n        return result.matches;\n      }),\n      shareReplay(),\n    );\n\n  onBackdropClick() {\n    // BehaviorSubject toggle drawer state\n    // this.shareDataService.updateToggleDrawerResults(!this.drawerOpen);\n\n    // Toggle signal drawer state\n    this.shareStateService.drawerSignal.update(value => !value);\n  }\n\n  getUserInfo() {\n    const token = this.tokenService.getToken('jwtToken');\n\n    if (token) {\n      const tokenDecode = JSON.parse(atob(token.split('.')[1]));\n      // Set global signal for logged user\n      this.userId.set(tokenDecode.userId);\n      this.isAdmin.set(tokenDecode.isAdmin);\n\n      this._getFavorites(this.userId());\n    }\n  }\n\n  _getFavorites(userId: string) {\n    // Set user favorites\n    const subscription = this.usersService\n      .getFavorites(userId)\n      .subscribe(favorites => {\n        this.userFavorites.set(favorites);\n      });\n    this.subscriptions.add(subscription);\n  }\n\n  // editUser() {\n  //   const userId = this.getUserInfo();\n  //   this.router.navigateByUrl(`profile/form/${userId}`);\n\n  // }\n\n  logoutUser() {\n    this.authService.logout();\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n"],"names":["_c0","_c1","_c2","MatMenuItem_Conditional_4_Template","rf","ctx","i0","_c3","MatMenu_ng_template_0_Template","_r1","$event","ctx_r1","_handleKeydown","closed","emit","_onAnimationStart","_onAnimationDone","_classList","panelId","_panelAnimationState","ariaLabel","ariaLabelledby","ariaDescribedby","MAT_MENU_PANEL","InjectionToken","MatMenuItem","constructor","_elementRef","_document","_focusMonitor","_parentMenu","_changeDetectorRef","this","role","disabled","disableRipple","_hovered","Subject","_focused","_highlighted","_triggersSubmenu","addItem","focus","origin","options","focusVia","_getHostElement","next","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","removeItem","complete","_getTabIndex","nativeElement","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","clone","cloneNode","icons","querySelectorAll","i","length","remove","textContent","trim","_setHighlighted","isHighlighted","markForCheck","_setTriggersSubmenu","triggersSubmenu","_hasFocus","activeElement","ɵfac","__ngFactoryType__","DOCUMENT","i1","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","inputs","booleanAttribute","exportAs","standalone","features","attrs","ngContentSelectors","decls","vars","consts","template","dependencies","MatRipple","encapsulation","changeDetection","MAT_MENU_CONTENT","matMenuAnimations","transformMenu","trigger","state","style","opacity","transform","transition","animate","fadeInItems","menuPanelUid","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","MatMenu","_xPosition","value","setPositionClasses","_yPosition","panelClass","classes","previousPanelClass","_previousPanelClass","newClassList","split","forEach","className","classList","_unusedNgZone","defaultOptions","_elevationPrefix","_baseElevation","_directDescendantItems","QueryList","_animationDone","EventEmitter","close","_injector","inject","Injector","overlayPanelClass","hasBackdrop","ngOnInit","ngAfterContentInit","_updateDirectDescendants","_keyManager","FocusKeyManager","withWrap","withTypeAhead","withHomeAndEnd","tabOut","subscribe","changes","pipe","startWith","switchMap","items","merge","map","item","focusedItem","updateActiveItem","itemsList","manager","activeItem","toArray","index","Math","max","min","activeItemIndex","setActiveItem","setNextItemActive","destroy","_firstItemFocusRef","_item","keyCode","ESCAPE","hasModifierKey","LEFT_ARROW","parentMenu","direction","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","setFocusOrigin","onKeydown","focusFirstItem","afterNextRender","menuPanel","first","closest","contains","document","setFirstItemActive","injector","resetActiveItem","setElevation","depth","getComputedStyle","getPropertyValue","parseInt","elevation","newElevation","customElevation","Object","keys","find","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_isAnimating","toState","element","scrollTop","_allItems","reset","filter","notifyOnChanges","contentQueries","dirIndex","_t","lazyContent","viewQuery","TemplateRef","templateRef","outputs","provide","useExisting","styles","data","animation","MAT_MENU_SCROLL_STRATEGY","overlay","Overlay","scrollStrategies","reposition","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatMenuTrigger","_deprecatedMatMenuTriggerFor","menu","v","_menu","_menuCloseSubscription","unsubscribe","reason","_destroyMenu","_parentMaterialMenu","_menuItemInstance","_overlay","_element","_viewContainerRef","scrollStrategy","_dir","_ngZone","_overlayRef","_menuOpen","_closingActionsSubscription","Subscription","EMPTY","_hoverSubscription","ChangeDetectorRef","_handleTouchStart","isFakeTouchstartFromScreenReader","_openedBy","undefined","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_scrollStrategy","addEventListener","_handleHover","dispose","removeEventListener","menuOpen","dir","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","positionStrategy","_setPosition","attach","_getPortal","menuData","_menuClosingActions","_initMenu","takeUntil","withLockedPosition","reapplyLastPosition","updatePosition","detach","take","_attached","_setIsMenuOpen","_setMenuElevation","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","OverlayConfig","position","flexibleConnectedTo","withGrowAfterOpen","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","run","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","_parentInnerPadding","firstItem","offsetTop","withPositions","backdrop","backdropClick","detachments","parentClose","of","hover","active","_handleMousedown","isFakeMousedownFromScreenReader","button","ENTER","SPACE","_handleClick","delay","asapScheduler","_portal","TemplatePortal","i1$1","i3","ɵdir","MatToolbarRow","MatToolbar","_platform","isBrowser","_checkToolbarMixedModes","_toolbarRows","color","NavigationRailComponent","shareDataService","ShareDataService","shareStateService","ShareStateService","authService","AuthService","router","Router","tokenService","LocalstorageService","usersService","UsersService","themeManager","ThemeManagerService","isDark","breakpointObserver","BreakpointObserver","navDrawerToggler","userId","isAdmin","userFavorites","subscriptions","isCompact$","observe","result","matches","shareReplay","isTablet$","drawerOpen","drawerSignal","getUserInfo","computed","toggleNavDrawer","toggleDrawer","update","onBackdropClick","token","getToken","tokenDecode","JSON","parse","atob","set","_getFavorites","subscription","getFavorites","favorites","add","logoutUser","logout","i18n_0","$localize","NavigationRailComponent_Conditional_6_Template","NavigationRailComponent_Conditional_7_Template","NavigationRailComponent_Conditional_42_Template","NavigationRailComponent_Conditional_43_Template","NavigationRailComponent_Conditional_48_Template","NavigationRailComponent_Conditional_49_Template","NavigationRailComponent_Conditional_54_Template","NavigationRailComponent_Conditional_55_Template","menu_r2","MatIconButton","MatIcon","MatTooltip","RouterLink","MatSidenavContainer","MatSidenav","MatNavList","NgClass","MatFabButton","RouterLinkActive","MatSidenavContent","RouterOutlet","AsyncPipe"],"sourceRoot":"webpack:///"}