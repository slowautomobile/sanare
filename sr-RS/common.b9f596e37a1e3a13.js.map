{"version":3,"file":"common.b9f596e37a1e3a13.js","mappings":"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","sources":["./libs/clients/src/lib/components/show-client-modal/show-client-modal.component.html","./libs/clients/src/lib/components/show-client-modal/show-client-modal.component.ts","./node_modules/rxjs/dist/esm/internal/lastValueFrom.js","./node_modules/ngx-print/fesm2022/ngx-print.mjs"],"sourcesContent":["<!-- <div class=\"dialog-icon\">\n  <mat-icon>edit</mat-icon>\n</div> -->\n<div class=\"confirmation-dialog-wrapper\">\n  <div class=\"header-container\">\n    <h2 mat-dialog-title class=\"dialog-title mat-title-large\">\n      {{ data.title }}\n    </h2>\n    <!-- <button\n      mat-icon-button\n      (click)=\"onClose()\"\n      aria-label=\"Icon button with a close icon\"\n    >\n      <mat-icon>close</mat-icon>\n    </button> -->\n  </div>\n  <div\n    overlay-scrollbars\n    [options]=\"themeSignal()\"\n    [defer]\n    class=\"dialog-content-wrapper\"\n  >\n    <form [formGroup]=\"form\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label i18n=\"@@ClientModal.firstNameLabel\">Firstname</mat-label>\n        <input\n          matInput\n          formControlName=\"firstName\"\n          type=\"text\"\n          placeholder=\"Enter clients firstname\"\n          i18n-placeholder=\"@@ClientModal.firstNamePlaceholder\"\n        />\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label i18n=\"@@ClientModal.lastNameLabel\">Lastname</mat-label>\n        <input\n          matInput\n          formControlName=\"lastName\"\n          type=\"text\"\n          placeholder=\"Enter clients lastname\"\n          i18n-placeholder=\"@@ClientModal.lastNamePlaceholder\"\n        />\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label i18n=\"@@ClientModal.emailLabel\">Email</mat-label>\n        <input\n          matInput\n          formControlName=\"email\"\n          type=\"text\"\n          placeholder=\"Enter clients email\"\n          i18n-placeholder=\"@@ClientModal.emailPlaceholder\"\n        />\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label i18n=\"@@ClientModal.phoneLabel\">Phone</mat-label>\n        <input\n          matInput\n          formControlName=\"phone\"\n          type=\"text\"\n          placeholder=\"Enter clients phone number\"\n          i18n-placeholder=\"@@ClientModal.phonePlaceholder\"\n        />\n      </mat-form-field>\n\n      <!-- <mat-label>Programs</mat-label> -->\n\n      <!-- <mat-list class=\"program-list\">\n          @if (programs?.length !== 0) {\n            <div mat-subheader class=\"subheader-text\">Programs</div>\n          }\n          @for (programData of programs; track programData; let i = $index) {\n            <mat-list-item class=\"program-list-item\">\n              <mat-icon matListItemIcon>description</mat-icon>\n              <span matListItemTitle>{{ programData.program.name }}</span>\n              @if (isProgramCompleted[i]) {\n            \n                <span matListItemLine class=\"status-tooltip\">\n                  <span\n                    class=\"status-icon-wrapper\"\n                    style=\"background-color: #3f51b5\"\n                    matTooltip=\"Completed\"\n                  >\n                    <mat-icon\n                      aria-hidden=\"false\"\n                      aria-label=\"Done icon\"\n                      fontIcon=\"done\"\n                    ></mat-icon>\n                  </span>\n\n                  {{\n                    'Ended: ' + (programData.dateRange.end | date: 'd MMM yyyy')\n                  }}</span\n                >\n              } @else {\n\n                <span matListItemLine class=\"status-tooltip\">\n                  <span\n                    class=\"status-icon-wrapper\"\n                    style=\"background-color: #ff4081\"\n                    matTooltip=\"In progress\"\n                  >\n                    <mat-icon\n                      aria-hidden=\"false\"\n                      aria-label=\"In progress icon\"\n                      fontIcon=\"autorenew\"\n                    ></mat-icon>\n                  </span>\n\n                  {{\n                    'Ends: ' + (programData.dateRange.end | date: 'd MMM yyyy')\n                  }}</span\n                >\n              }\n\n\n              <span matListItemMeta class=\"list-action-button\">\n               \n              </span>\n            </mat-list-item>\n            <mat-divider></mat-divider>\n          }\n        </mat-list> -->\n      @defer {\n        <clients-progress\n          [programs$]=\"programs$\"\n          [isProgramCompleted]=\"isProgramCompleted\"\n          [isDashboard]=\"false\"\n        ></clients-progress>\n      } @placeholder {\n        <div class=\"programs-list-wrapper-placeholder\">\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n          <div class=\"program-list-skeleton\"></div>\n        </div>\n      }\n      <!-- <div class=\"status-toggle\">\n          <mat-label>Status</mat-label>\n          <mat-slide-toggle formControlName=\"completed\">\n            @if (clientForm['completed'].value) {\n              <span>Completed</span>\n            } @else {\n              <span>In progress</span>\n            }\n          </mat-slide-toggle>\n        </div> -->\n    </form>\n  </div>\n  <div mat-dialog-actions class=\"dialog-actions\">\n    <button\n      class=\"custom-btn\"\n      mat-flat-button\n      color=\"primary\"\n      (click)=\"fullEditMode(data.clientId, data.clientName)\"\n    >\n      <mat-icon>edit</mat-icon>\n      {{ fullEditButtonString }}\n    </button>\n    <div class=\"actions-wrapper\">\n      <button\n        mat-button\n        (click)=\"onClose()\"\n        class=\"dialog-buttons\"\n        cdkFocusInitial\n        i18n=\"@@ClientModal.cancelModalBtn\"\n      >\n        Cancel\n      </button>\n      <button\n        mat-button\n        class=\"dialog-buttons\"\n        (click)=\"onConfirm()\"\n        [disabled]=\"form.invalid\"\n        i18n=\"@@ClientModal.saveModalBtn\"\n      >\n        Save\n      </button>\n    </div>\n  </div>\n</div>\n","import { Component, inject, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogRef,\n  MatDialogTitle,\n  MatDialogActions,\n} from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport {\n  Client,\n  ClientsService,\n  ProgramsService,\n  ShareClientsDataService,\n} from '@slowautomobile/exercises';\nimport { ThemeManagerService } from '@slowautomobile/ui';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatButton } from '@angular/material/button';\nimport { ClientsProgressComponent } from '../clients-progress/clients-progress.component';\nimport { MatInput } from '@angular/material/input';\nimport { MatFormField, MatLabel } from '@angular/material/form-field';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\n\ninterface DialogData {\n  title: string;\n  clientId: string;\n  clientName: string;\n}\n\n@Component({\n  selector: 'clients-show-client-modal',\n  templateUrl: './show-client-modal.component.html',\n  styleUrl: './show-client-modal.component.scss',\n  standalone: true,\n  imports: [\n    MatDialogTitle,\n    OverlayscrollbarsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatFormField,\n    MatLabel,\n    MatInput,\n    ClientsProgressComponent,\n    MatDialogActions,\n    MatButton,\n    MatIcon,\n  ],\n})\nexport class ShowClientModalComponent implements OnInit, OnDestroy {\n  dialogRef = inject<MatDialogRef<ShowClientModalComponent>>(MatDialogRef);\n  data = inject<DialogData>(MAT_DIALOG_DATA);\n  private formBuilder = inject(FormBuilder);\n  private clientsService = inject(ClientsService);\n  private programsService = inject(ProgramsService);\n  private router = inject(Router);\n  private _snackBar = inject(MatSnackBar);\n  private shareClientsDataService = inject(ShareClientsDataService);\n\n  form!: FormGroup;\n  programs: any[] | undefined = [];\n  programs$!: Observable<any[] | undefined>;\n  subscriptions = new Subscription();\n\n  fullEditButtonString = $localize`:@@ClientModal.fullEditClientBtn:Full edit`;\n\n  date = new Date();\n  isProgramCompleted: boolean[] = [];\n  clientInfo = this.shareClientsDataService.clientInfo;\n\n  themeManager = inject(ThemeManagerService);\n  themeSignal = this.themeManager.themeSignal;\n\n  ngOnInit() {\n    this._initForm();\n\n    const subscription = this.clientsService\n      .getClient(this.data.clientId)\n      .subscribe(client => {\n        this.clientForm['firstName'].setValue(client.firstName);\n        this.clientForm['lastName'].setValue(client.lastName);\n        this.clientForm['email'].setValue(client.email);\n        this.clientForm['phone'].setValue(client.phone);\n        // this.clientForm['completed'].setValue(client.completed);\n\n        this.programs = client.programs;\n        this.programs$ = of(this.programs);\n        console.log(this.programs);\n        // this.programs$.subscribe(res => console.log(res));\n\n        // Make function out of this !!!\n        const currentDate = new Date();\n        this.programs?.forEach(program => {\n          const adaptedProgram = program;\n          const programStartDate = new Date(adaptedProgram.dateRange.start);\n          const programEndDate = new Date(adaptedProgram.dateRange.end);\n\n          const totalDuration =\n            programEndDate.getTime() - programStartDate.getTime();\n          const elapsedTime =\n            currentDate.getTime() - programStartDate.getTime();\n          const progress = Math.min((elapsedTime / totalDuration) * 100, 100); // Ensure progress doesn't exceed 100%\n          adaptedProgram.progress = progress;\n\n          if (programEndDate < currentDate) {\n            this.isProgramCompleted.push(true);\n            console.log('This program is completed');\n          } else {\n            this.isProgramCompleted.push(false);\n            console.log('This program is in progress');\n          }\n        });\n\n        // console.log(client);\n        // console.log(this.programs);\n        // console.log(this.isProgramCompleted);\n      });\n    this.subscriptions.add(subscription);\n  }\n\n  private _initForm() {\n    this.form = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      name: [''],\n      email: [''],\n      phone: ['', Validators.required],\n      // completed: [false],\n    });\n  }\n\n  get clientForm() {\n    return this.form.controls;\n  }\n\n  private _updateClient(client: Client, clientId: string) {\n    const subscription = this.clientsService\n      .updateClient(client, clientId)\n      .subscribe(updatedClient => {\n        this._snackBar.open($localize`:@@Snackbar.clientUpdated:Client updated`, '', {\n          duration: 2000,\n          panelClass: ['custom-snackbar-style'],\n        });\n        console.log(updatedClient);\n      });\n    this.subscriptions.add(subscription);\n  }\n\n  fullEditMode(clientId: string, clientName: string) {\n    console.log(clientName);\n    this.clientInfo.set({\n      clientId: clientId,\n      clientName: clientName,\n      programPosition: 0,\n      programId: '',\n      programName: '',\n      dateRange: { start: '', end: '' },\n    });\n    this.router.navigateByUrl(`clients/form/${clientId}`);\n\n    // THIS IS ALTERNATIVE WHICH SHOULD BE IMPLEMENTED WHEN ALL SIGNAL DEPENDENCIES ARE ADJUSTED/REMOVED\n    // this.router.navigate([`clients/form/${clientId}`], {\n    //   queryParams: {\n    //     clientName: `${clientName}`,\n    //   },\n    // });\n\n    this.dialogRef.close(true);\n\n    console.log(clientId);\n  }\n\n  onConfirm(): void {\n    const updatedClient: Client = {\n      firstName: this.clientForm['firstName'].value,\n      lastName: this.clientForm['lastName'].value,\n      name: this.clientForm['name'].value,\n      email: this.clientForm['email'].value,\n      phone: this.clientForm['phone'].value,\n      // completed: this.clientForm['completed'].value,\n    };\n\n    this._updateClient(updatedClient, this.data.clientId);\n\n    this.dialogRef.close(true);\n  }\n\n  // Implement options for viewing/editing. ARE THEY REDUNDANT, SINCE THERE IS \"Switch to full edit\"? Also, where should \"View\" button lead, in clients programs table or in \"Reuse\" program editor???\n  // viewClientProgram() {\n  //   console.log('view client program');\n  // }\n\n  deleteClientProgram() {\n    console.log('delete client program');\n  }\n\n  onClose(): void {\n    this.dialogRef.close();\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { EmptyError } from './util/EmptyError';\nexport function lastValueFrom(source, config) {\n    const hasConfig = typeof config === 'object';\n    return new Promise((resolve, reject) => {\n        let _hasValue = false;\n        let _value;\n        source.subscribe({\n            next: (value) => {\n                _value = value;\n                _hasValue = true;\n            },\n            error: reject,\n            complete: () => {\n                if (_hasValue) {\n                    resolve(_value);\n                }\n                else if (hasConfig) {\n                    resolve(config.defaultValue);\n                }\n                else {\n                    reject(new EmptyError());\n                }\n            },\n        });\n    });\n}\n","import * as i0 from '@angular/core';\nimport { Injectable, Directive, Input, HostListener, NgModule } from '@angular/core';\n\nclass PrintBase {\n    _printStyle = [];\n    _styleSheetFile = '';\n    //#region Getters and Setters\n    /**\n     * Sets the print styles based on the provided values.\n     *\n     * @param {Object} values - Key-value pairs representing print styles.\n     * @protected\n     */\n    setPrintStyle(values) {\n        this._printStyle = [];\n        for (let key in values) {\n            if (values.hasOwnProperty(key)) {\n                this._printStyle.push((key + JSON.stringify(values[key])).replace(/['\"]+/g, ''));\n            }\n        }\n    }\n    /**\n     *\n     *\n     * @returns the string that create the stylesheet which will be injected\n     * later within <style></style> tag.\n     *\n     * -join/replace to transform an array objects to css-styled string\n     */\n    returnStyleValues() {\n        return `<style> ${this._printStyle.join(' ').replace(/,/g, ';')} </style>`;\n    }\n    /**\n   * @returns string which contains the link tags containing the css which will\n   * be injected later within <head></head> tag.\n   *\n   */\n    returnStyleSheetLinkTags() {\n        return this._styleSheetFile;\n    }\n    /**\n     * Sets the style sheet file based on the provided CSS list.\n     *\n     * @param {string} cssList - CSS file or list of CSS files.\n     * @protected\n     */\n    setStyleSheetFile(cssList) {\n        let linkTagFn = function (cssFileName) {\n            return `<link rel=\"stylesheet\" type=\"text/css\" href=\"${cssFileName}\">`;\n        };\n        if (cssList.indexOf(',') !== -1) {\n            const valueArr = cssList.split(',');\n            this._styleSheetFile = valueArr.map(val => linkTagFn(val)).join('');\n        }\n        else {\n            this._styleSheetFile = linkTagFn(cssList);\n        }\n    }\n    //#endregion\n    //#region Private methods used by PrintBase\n    /**\n     * Updates the default values for input elements.\n     *\n     * @param {HTMLCollectionOf<HTMLInputElement>} elements - Collection of input elements.\n     * @private\n     */\n    updateInputDefaults(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            element['defaultValue'] = element.value;\n            if (element['checked'])\n                element['defaultChecked'] = true;\n        }\n    }\n    /**\n     * Updates the default values for select elements.\n     *\n     * @param {HTMLCollectionOf<HTMLSelectElement>} elements - Collection of select elements.\n     * @private\n     */\n    updateSelectDefaults(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            const selectedIdx = element.selectedIndex;\n            const selectedOption = element.options[selectedIdx];\n            selectedOption.defaultSelected = true;\n        }\n    }\n    /**\n     * Updates the default values for textarea elements.\n     *\n     * @param {HTMLCollectionOf<HTMLTextAreaElement>} elements - Collection of textarea elements.\n     * @private\n     */\n    updateTextAreaDefaults(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            element['defaultValue'] = element.value;\n        }\n    }\n    /**\n     * Converts a canvas element to an image and returns its HTML string.\n     *\n     * @param {HTMLCanvasElement} element - The canvas element to convert.\n     * @returns {string} - HTML string of the image.\n     * @private\n     */\n    canvasToImageHtml(element) {\n        const dataUrl = element.toDataURL();\n        return `<img src=\"${dataUrl}\" style=\"max-width: 100%;\">`;\n    }\n    /**\n     * Includes canvas contents in the print section via img tags.\n     *\n     * @param {HTMLCollectionOf<HTMLCanvasElement>} elements - Collection of canvas elements.\n     * @private\n     */\n    updateCanvasToImage(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            const element = this.canvasToImageHtml(elements[i]);\n            elements[i].insertAdjacentHTML('afterend', element);\n            elements[i].remove();\n        }\n    }\n    /**\n     * Retrieves the HTML content of a specified printing section.\n     *\n     * @param {string} printSectionId - Id of the printing section.\n     * @returns {string | null} - HTML content of the printing section, or null if not found.\n     * @private\n     */\n    getHtmlContents(printSectionId) {\n        const printContents = document.getElementById(printSectionId);\n        if (!printContents)\n            return null;\n        const inputEls = printContents.getElementsByTagName('input');\n        const selectEls = printContents.getElementsByTagName('select');\n        const textAreaEls = printContents.getElementsByTagName('textarea');\n        const canvasEls = printContents.getElementsByTagName('canvas');\n        this.updateInputDefaults(inputEls);\n        this.updateSelectDefaults(selectEls);\n        this.updateTextAreaDefaults(textAreaEls);\n        this.updateCanvasToImage(canvasEls);\n        return printContents.innerHTML;\n    }\n    /**\n     * Retrieves the HTML content of elements with the specified tag.\n     *\n     * @param {keyof HTMLElementTagNameMap} tag - HTML tag name.\n     * @returns {string} - Concatenated outerHTML of elements with the specified tag.\n     * @private\n     */\n    getElementTag(tag) {\n        const html = [];\n        const elements = document.getElementsByTagName(tag);\n        for (let index = 0; index < elements.length; index++) {\n            html.push(elements[index].outerHTML);\n        }\n        return html.join('\\r\\n');\n    }\n    //#endregion\n    /**\n     * Prints the specified content using the provided print options.\n     *\n     * @param {PrintOptions} printOptions - Options for printing.\n     * @public\n     */\n    print(printOptions) {\n        let styles = '', links = '', popOut = 'top=0,left=0,height=auto,width=auto';\n        const baseTag = this.getElementTag('base');\n        if (printOptions.useExistingCss) {\n            styles = this.getElementTag('style');\n            links = this.getElementTag('link');\n        }\n        // If the openNewTab option is set to true, then set the popOut option to an empty string. \n        // This will cause the print dialog to open in a new tab.\n        if (printOptions.openNewTab) {\n            popOut = '';\n        }\n        const printContents = this.getHtmlContents(printOptions.printSectionId);\n        if (!printContents) {\n            // Handle the case where the specified print section is not found.\n            console.error(`Print section with id ${printOptions.printSectionId} not found.`);\n            return;\n        }\n        const popupWin = window.open(\"\", \"_blank\", popOut);\n        if (!popupWin) {\n            // the popup window could not be opened.\n            console.error('Could not open print window.');\n            return;\n        }\n        popupWin.document.open();\n        popupWin.document.write(`\r\n          <html>\r\n            <head>\r\n              <title>${printOptions.printTitle ? printOptions.printTitle : \"\"}</title>\r\n              ${baseTag}\r\n              ${this.returnStyleValues()}\r\n              ${this.returnStyleSheetLinkTags()}\r\n              ${styles}\r\n              ${links}\r\n            </head>\r\n            <body ${printOptions.bodyClass ? `class=\"${printOptions.bodyClass}\"` : ''}>\r\n              ${printContents}\r\n              <script defer>\r\n                function triggerPrint(event) {\r\n                  window.removeEventListener('load', triggerPrint, false);\r\n                  ${printOptions.previewOnly ? '' : `setTimeout(function() {\r\n                    closeWindow(window.print());\r\n                  }, ${printOptions.printDelay});`}\r\n                }\r\n                function closeWindow(){\r\n                  ${printOptions.closeWindow ? 'window.close();' : ''}\r\n                }\r\n                window.addEventListener('load', triggerPrint, false);\r\n              </script>\r\n            </body>\r\n          </html>`);\n        popupWin.document.close();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: PrintBase, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: PrintBase, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: PrintBase, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\n/**\n * Service for handling printing functionality in Angular applications.\n * Extends the base printing class (PrintBase).\n *\n * @export\n * @class NgxPrintService\n * @extends {PrintBase}\n */\nclass NgxPrintService extends PrintBase {\n    /**\n     * Initiates the printing process using the provided print options.\n     *\n     * @param {PrintOptions} printOptions - Options for configuring the printing process.\n     * @memberof NgxPrintService\n     * @returns {void}\n     */\n    print(printOptions) {\n        // Call the print method in the parent class\n        super.print(printOptions);\n    }\n    /**\n     * Sets the print style for the printing process.\n     *\n     * @param {{ [key: string]: { [key: string]: string } }} values - A dictionary representing the print styles.\n     * @memberof NgxPrintService\n     * @setter\n     */\n    set printStyle(values) {\n        super.setPrintStyle(values);\n    }\n    /**\n     * Sets the stylesheet file for the printing process.\n     *\n     * @param {string} cssList - A string representing the path to the stylesheet file.\n     * @memberof NgxPrintService\n     * @setter\n     */\n    set styleSheetFile(cssList) {\n        super.setStyleSheetFile(cssList);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: NgxPrintService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: NgxPrintService, providedIn: \"root\" });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: NgxPrintService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: \"root\",\n                }]\n        }] });\n\nclass PrintOptions {\n    printSectionId = null;\n    printTitle = null;\n    useExistingCss = false;\n    bodyClass = '';\n    openNewTab = false;\n    previewOnly = false;\n    closeWindow = true;\n    printDelay = 0;\n    constructor(options) {\n        if (options) {\n            Object.assign(this, options);\n        }\n    }\n}\n\nclass NgxPrintDirective extends PrintBase {\n    printOptions = new PrintOptions();\n    /**\n     * Prevents the print dialog from opening on the window\n     *\n     * @memberof NgxPrintDirective\n     */\n    set previewOnly(value) {\n        this.printOptions = { ...this.printOptions, previewOnly: value };\n    }\n    /**\n     *\n     *\n     * @memberof NgxPrintDirective\n     */\n    set printSectionId(value) {\n        this.printOptions = { ...this.printOptions, printSectionId: value };\n    }\n    /**\n     *\n     *\n     * @memberof NgxPrintDirective\n     */\n    set printTitle(value) {\n        this.printOptions = { ...this.printOptions, printTitle: value };\n    }\n    /**\n     *\n     *\n     * @memberof NgxPrintDirective\n     */\n    set useExistingCss(value) {\n        this.printOptions = { ...this.printOptions, useExistingCss: value };\n    }\n    /**\n     * A delay in milliseconds to force the print dialog to wait before opened. Default: 0\n     *\n     * @memberof NgxPrintDirective\n     */\n    set printDelay(value) {\n        this.printOptions = { ...this.printOptions, printDelay: value };\n    }\n    /**\n     * Whether to close the window after print() returns.\n     *\n     */\n    set closeWindow(value) {\n        this.printOptions = { ...this.printOptions, closeWindow: value };\n    }\n    /**\n     * Class attribute to apply to the body element.\n     *\n     */\n    set bodyClass(value) {\n        this.printOptions = { ...this.printOptions, bodyClass: value };\n    }\n    /**\n     * Whether to open a new window or default to new window.\n     *\n     */\n    set openNewTab(value) {\n        this.printOptions = { ...this.printOptions, openNewTab: value };\n    }\n    /**\n     *\n     *\n     * @memberof NgxPrintDirective\n     */\n    set printStyle(values) {\n        super.setPrintStyle(values);\n    }\n    /**\n     * @memberof NgxPrintDirective\n     * @param cssList\n     */\n    set styleSheetFile(cssList) {\n        super.setStyleSheetFile(cssList);\n    }\n    /**\n     *\n     *\n     * @memberof NgxPrintDirective\n     */\n    print() {\n        super.print(this.printOptions);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: NgxPrintDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.4\", type: NgxPrintDirective, isStandalone: true, selector: \"button[ngxPrint]\", inputs: { previewOnly: \"previewOnly\", printSectionId: \"printSectionId\", printTitle: \"printTitle\", useExistingCss: \"useExistingCss\", printDelay: \"printDelay\", closeWindow: \"closeWindow\", bodyClass: \"bodyClass\", openNewTab: \"openNewTab\", printStyle: \"printStyle\", styleSheetFile: \"styleSheetFile\" }, host: { listeners: { \"click\": \"print()\" } }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: NgxPrintDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"button[ngxPrint]\",\n                    standalone: true\n                }]\n        }], propDecorators: { previewOnly: [{\n                type: Input\n            }], printSectionId: [{\n                type: Input\n            }], printTitle: [{\n                type: Input\n            }], useExistingCss: [{\n                type: Input\n            }], printDelay: [{\n                type: Input\n            }], closeWindow: [{\n                type: Input\n            }], bodyClass: [{\n                type: Input\n            }], openNewTab: [{\n                type: Input\n            }], printStyle: [{\n                type: Input\n            }], styleSheetFile: [{\n                type: Input\n            }], print: [{\n                type: HostListener,\n                args: ['click']\n            }] } });\n\nclass NgxPrintModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: NgxPrintModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: NgxPrintModule, imports: [NgxPrintDirective], exports: [NgxPrintDirective] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: NgxPrintModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: NgxPrintModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [NgxPrintDirective],\n                    exports: [NgxPrintDirective]\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-print\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxPrintDirective, NgxPrintModule, NgxPrintService, PrintOptions };\n"],"names":["i0","ctx_r0","programs$","isProgramCompleted","ShowClientModalComponent","constructor","this","dialogRef","inject","MatDialogRef","data","MAT_DIALOG_DATA","formBuilder","FormBuilder","clientsService","ClientsService","programsService","ProgramsService","router","Router","_snackBar","MatSnackBar","shareClientsDataService","ShareClientsDataService","programs","subscriptions","Subscription","fullEditButtonString","$localize","date","Date","clientInfo","themeManager","ThemeManagerService","themeSignal","ngOnInit","_initForm","subscription","getClient","clientId","subscribe","client","clientForm","firstName","setValue","lastName","email","phone","of","console","log","currentDate","forEach","program","adaptedProgram","programStartDate","dateRange","start","programEndDate","end","totalDuration","getTime","elapsedTime","progress","Math","min","push","add","form","group","Validators","required","name","controls","_updateClient","updateClient","updatedClient","open","duration","panelClass","fullEditMode","clientName","set","programPosition","programId","programName","navigateByUrl","close","onConfirm","value","deleteClientProgram","onClose","ngOnDestroy","unsubscribe","selectors","standalone","features","decls","vars","consts","i18n_0","ShowClientModalComponent_Defer_22_Template","ShowClientModalComponent_DeferPlaceholder_23_Template","ShowClientModalComponent_Defer_24_DepsFn","ctx","title","invalid","MatDialogTitle","OverlayscrollbarsModule","i1","FormsModule","i2","ReactiveFormsModule","MatFormField","MatLabel","MatInput","MatDialogActions","MatButton","MatIcon","styles","lastValueFrom","source","config","hasConfig","Promise","resolve","reject","_value","_hasValue","next","error","complete","defaultValue","EmptyError","PrintBase","_printStyle","_styleSheetFile","setPrintStyle","values","key","hasOwnProperty","JSON","stringify","replace","returnStyleValues","join","returnStyleSheetLinkTags","setStyleSheetFile","cssList","linkTagFn","cssFileName","indexOf","valueArr","split","map","val","updateInputDefaults","elements","i","length","element","checked","defaultChecked","updateSelectDefaults","options","selectedIndex","defaultSelected","updateTextAreaDefaults","canvasToImageHtml","toDataURL","updateCanvasToImage","insertAdjacentHTML","remove","getHtmlContents","printSectionId","printContents","document","getElementById","inputEls","getElementsByTagName","selectEls","textAreaEls","canvasEls","innerHTML","getElementTag","tag","html","index","outerHTML","print","printOptions","links","popOut","baseTag","useExistingCss","openNewTab","popupWin","window","write","printTitle","bodyClass","previewOnly","printDelay","closeWindow","static","__ngFactoryType__","token","factory","ɵfac","providedIn","NgxPrintService","super","printStyle","styleSheetFile","ɵNgxPrintService_BaseFactory","PrintOptions","Object","assign","NgxPrintDirective","ɵNgxPrintDirective_BaseFactory","type","hostBindings","rf","inputs"],"sourceRoot":"webpack:///"}