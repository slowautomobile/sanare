{"version":3,"file":"716.4f88f2d5df574fa5.js","mappings":"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","sources":["./apps/sanare-app/src/app/pages/exercises/exercise-card/exercise-card.component.html","./apps/sanare-app/src/app/pages/exercises/exercise-card/exercise-card.component.ts","./apps/sanare-app/src/app/pages/exercises/exercises-grid/exercises-grid.component.ts","./apps/sanare-app/src/app/pages/exercises/exercises-grid/exercises-grid.component.html"],"sourcesContent":["<div [ngClass]=\"cardWrapper\">\n  @if (!isEmptyPlaceholder) {\n    <div class=\"card\">\n      <div class=\"card-head\">\n        <div class=\"img-wrapper\">\n          <img\n            class=\"exercise-img\"\n            [src]=\"exercise.images?.mainImg\"\n            [alt]=\"exercise.name[selectedLanguage]\"\n          />\n        </div>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"exercise-name\">\n          <span class=\"multi-line-text\">\n            {{ exercise.name[selectedLanguage] }}\n          </span>\n        </div>\n        <div class=\"card-icons\">\n          @if (exercise.isFavorite) {\n            <button\n              (click)=\"removeFromFavorites(exercise)\"\n              mat-icon-button\n              class=\"favorite-exercise-star\"\n              matTooltip=\"Remove from favorites\"\n              i18n-matTooltip=\"@@ExerciseCard.removeFromFavoritesTooltip\"\n              aria-label=\"Favorite icon-button with a star icon\"\n              i18n-aria-label=\"@@ExerciseCard.removeFromFavoritesAriaLabel\"\n            >\n              <mat-icon>star</mat-icon>\n            </button>\n          } @else {\n            <button\n              (click)=\"addToFavorites(exercise)\"\n              mat-icon-button\n              matTooltip=\"Add to favorites\"\n              i18n-matTooltip=\"@@ExerciseCard.addToFavoritesTooltip\"\n              aria-label=\"Favorite icon-button with a star icon\"\n              i18n-aria-label=\"@@ExerciseCard.addToFavoritesAriaLabel\"\n            >\n              <mat-icon>star_border</mat-icon>\n            </button>\n          }\n          <!-- <button\n            (click)=\"\n              exercise.isFavorite\n                ? removeFromFavorites(exercise)\n                : addToFavorites(exercise.id)\n            \"\n            mat-icon-button\n            [class.favorite-exercise-star]=\"exercise.isFavorite\"\n            [matTooltip]=\"\n              exercise.isFavorite ? 'Remove from favorites' : 'Add to favorites'\n            \"\n            aria-label=\"Favorite icon-button with a star icon\"\n          >\n            <mat-icon>{{\n              exercise.isFavorite ? 'star' : 'star_border'\n            }}</mat-icon>\n          </button> -->\n          <button\n            (click)=\"showExerciseModal(exercise.id, exercise, false)\"\n            mat-icon-button\n            matTooltip=\"Details\"\n            i18n-matTooltip=\"@@ExerciseCard.details\"\n            aria-label=\"Info icon-button with a info icon\"\n            i18n-aria-label=\"@@ExerciseCard.detailsAriaLabel\"\n          >\n            <mat-icon>info_outline</mat-icon>\n          </button>\n          @if (exercise.isSelected) {\n            <button\n              (click)=\"removeFromSelected(exercise)\"\n              class=\"toggleDoneRemoveBtn\"\n              (mouseenter)=\"showHoverIcon(true)\"\n              (mouseleave)=\"showHoverIcon(false)\"\n              mat-mini-fab\n              [color]=\"isHovered ? 'accent' : 'primary'\"\n              matTooltip=\"Remove exercise\"\n              i18n-matTooltip=\"@@ExerciseCard.removeExercise\"\n              aria-label=\"Remove icon-button with a close icon\"\n              i18n-aria-label=\"@@ExerciseCard.removeExerciseAriaLabel\"\n            >\n              <mat-icon>{{ isHovered ? 'close' : 'done' }}</mat-icon>\n            </button>\n          } @else {\n            <button\n              (click)=\"addToSelected(exercise)\"\n              mat-icon-button\n              matTooltip=\"Add exercise\"\n              i18n-matTooltip=\"@@ExerciseCard.addExercise\"\n              color=\"primary\"\n              aria-label=\"Add icon button with a add icon\"\n              i18n-aria-label=\"@@ExerciseCard.addExerciseAriaLabel\"\n            >\n              <mat-icon>add</mat-icon>\n            </button>\n          }\n        </div>\n      </div>\n    </div>\n  }\n</div>\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  inject,\n} from '@angular/core';\nimport {\n  Exercise,\n  ExerciseModalComponent,\n  ExercisesService,\n  SelectedExercisesService,\n  ShareStateService,\n} from '@slowautomobile/exercises';\nimport { MatDialog } from '@angular/material/dialog';\n\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { LocalstorageService, UsersService } from '@slowautomobile/users';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { MatIconButton, MatMiniFabButton } from '@angular/material/button';\nimport { NgClass } from '@angular/common';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'sanareapp-exercise-card',\n  templateUrl: './exercise-card.component.html',\n  styleUrl: './exercise-card.component.scss',\n  standalone: true,\n  imports: [NgClass, MatIconButton, MatTooltip, MatIcon, MatMiniFabButton],\n})\nexport class ExerciseCardComponent implements OnInit, OnDestroy {\n  dialog = inject(MatDialog);\n  private exercisesService = inject(ExercisesService);\n  private shareStateService = inject(ShareStateService);\n  private selectedExercisesService = inject(SelectedExercisesService);\n  private usersService = inject(UsersService);\n  private localstorageService = inject(LocalstorageService);\n\n  subscriptions = new Subscription();\n\n  @Input() exercise!: Exercise;\n  @Input() cardWrapper!: string;\n  @Input() isEmptyPlaceholder = false;\n  @Output() selectedExercise = new EventEmitter<Exercise>();\n  @Output() removeExercise = new EventEmitter<Exercise>();\n  @Output() favoriteExercise = new EventEmitter<Exercise>();\n  @Output() removeFavoriteExercise = new EventEmitter<Exercise>();\n\n  selectedLanguage!: 'en' | 'de' | 'sr';\n  isHovered = false;\n  userFavorites = this.usersService.userFavorites;\n  userId = this.usersService.userId;\n\n  ngOnInit(): void {\n    this.selectedLanguage = this._getUserLanguageToken();\n  }\n\n  addToSelected(exercise: Exercise) {\n    this.selectedExercisesService.addToSelected(exercise);\n  }\n\n  removeFromSelected(exercise: Exercise) {\n    this.selectedExercisesService.removeFromSelected(exercise);\n  }\n\n  selectExercise(exercise: Exercise) {\n    exercise.isSelected = true;\n    this.selectedExercise.emit(exercise);\n  }\n\n  removeCard(exercise: Exercise) {\n    this.removeExercise.emit(exercise);\n  }\n\n  showHoverIcon(isHovered: boolean): void {\n    this.isHovered = isHovered;\n  }\n\n  private _getExercise(exerciseId: string): Observable<Exercise> {\n    return this.exercisesService.getExercise(exerciseId);\n  }\n\n  showExerciseModal(\n    exerciseId: string,\n    exerciseCard: Exercise,\n    isProgramExercise: boolean,\n  ): void {\n    const subscription = this._getExercise(exerciseId).subscribe(exercise => {\n      this.dialog.open(ExerciseModalComponent, {\n        data: {\n          fullExercise: exercise,\n          exerciseCard: exerciseCard,\n          isProgramExercise: isProgramExercise,\n          selectedLang: this.selectedLanguage,\n        },\n        width: '500px',\n        // height: '736px',\n        panelClass: ['custom-dialog', isProgramExercise ? 'custom-shadow' : ''],\n        // disableClose: isProgramExercise,\n        // hasBackdrop: isProgramExercise ? false : true,\n        backdropClass: isProgramExercise ? 'custom-backdrop' : '',\n        // enterAnimationDuration: 0,\n      });\n    });\n    this.subscriptions.add(subscription);\n  }\n\n  addToFavorites(exercise: Exercise) {\n    exercise.isFavorite = true;\n    this.favoriteExercise.emit(exercise);\n  }\n\n  removeFromFavorites(exercise: Exercise) {\n    exercise.isFavorite = false;\n    this.removeFavoriteExercise.emit(exercise);\n  }\n\n  private _getUserLanguageToken(): 'en' | 'de' | 'sr' {\n    return <'en' | 'de' | 'sr'>(\n      this.localstorageService.getToken('userLanguage')?.split('-')[0]\n    );\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, inject, Input, input, OnInit } from '@angular/core';\nimport { AsyncPipe, CommonModule, NgStyle } from '@angular/common';\nimport {\n  CdkDrag,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragPlaceholder,\n  CdkDragPreview,\n  CdkDropList,\n} from '@angular/cdk/drag-drop';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\nimport { ExerciseCardComponent } from '../exercise-card/exercise-card.component';\nimport { ThemeManagerService } from '@slowautomobile/ui';\nimport {\n  DropListTransferItemService,\n  Exercise,\n  SelectedExercisesService,\n  ShareStateService,\n} from '@slowautomobile/exercises';\nimport {\n  debounceTime,\n  fromEvent,\n  map,\n  Observable,\n  startWith,\n  Subscription,\n} from 'rxjs';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { Favorites, UsersService } from '@slowautomobile/users';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\n@Component({\n  selector: 'sanareapp-exercises-grid',\n  standalone: true,\n  imports: [\n    CommonModule,\n    CdkDropList,\n    CdkDrag,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n    OverlayscrollbarsModule,\n    ExerciseCardComponent,\n    NgStyle,\n    AsyncPipe,\n    MatProgressSpinnerModule,\n  ],\n  templateUrl: './exercises-grid.component.html',\n  styleUrl: './exercises-grid.component.scss',\n})\nexport class ExercisesGridComponent implements OnInit {\n  themeManager = inject(ThemeManagerService);\n  private shareStateService = inject(ShareStateService);\n  private selectedExercisesService = inject(SelectedExercisesService);\n  private usersService = inject(UsersService);\n  transferringItemService = inject(DropListTransferItemService);\n\n  isFetchingData = this.shareStateService.isFetchingData;\n  transferringItem = this.transferringItemService.transferringItem;\n  userFavorites = this.usersService.userFavorites;\n  userId = this.usersService.userId;\n  selectedExercises = this.selectedExercisesService.selectedExercises;\n  // transferringItem: Exercise | undefined = undefined;\n  themeSignal = this.themeManager.themeSignal;\n  drawerOpen!: boolean;\n  // exercises = input<Exercise[]>();\n  @Input() exercises!: Exercise[];\n  windowSize$?: Observable<number>;\n  subscriptions = new Subscription();\n  isDragging = false;\n\n  ngOnInit(): void {\n    this.windowSize$ = fromEvent(window, 'resize').pipe(\n      startWith(null), // Emit an initial value to trigger the styles on component initialization\n      debounceTime(200),\n      map(() => window.innerWidth),\n    );\n  }\n\n  // Dynamically change filter drawer and exercise display grid behavior\n  getGridStyle(windowSize: number | null): { [key: string]: string } {\n    const effectiveSize = windowSize ?? 0;\n    this.drawerOpen = this.shareStateService.drawerSignal();\n    if (effectiveSize < 1510 && effectiveSize > 1338 && this.drawerOpen) {\n      return {\n        'grid-template-columns': 'repeat(3, 1fr)',\n      };\n    } else if (\n      effectiveSize < 1338 &&\n      effectiveSize > 1168 &&\n      this.drawerOpen\n    ) {\n      return {\n        'grid-template-columns': 'repeat(2, 1fr)',\n      };\n    } else {\n      return {};\n    }\n  }\n\n  entered() {\n    // entered(event: CdkDragEnter<any>) {\n    // this.transferringItem = undefined;\n    this.transferringItem.set(undefined);\n\n    // this.enteredSelectedList = false;\n\n    // console.log(event);\n  }\n\n  exited(e: CdkDragExit<any>) {\n    // this.transferringItem = e.item.data;\n    this.transferringItem.set(e.item.data);\n    console.log(this.transferringItem());\n  }\n\n  noReturnPredicate() {\n    return false;\n  }\n\n  // SEEMS THAT IT WORKS, REFACTOR THESE TWO FUNCTIONS IN ONE AND REMOVE UNNECESSARY CODE\n  removeCard(cardToRemove: Exercise): void {\n    let indexToRemove!: number;\n\n    this.selectedExercises().some((selectedExercise, i) => {\n      if (selectedExercise.id === cardToRemove.id) {\n        indexToRemove = i;\n      }\n    });\n    // console.log(cardToRemove, indexToRemove);\n    this._resetCardState(cardToRemove, indexToRemove);\n    // this.selectedExercises.splice(indexToRemove, 1);\n\n    // if (indexToRemove !== -1) {\n    // }\n  }\n\n  addToFavorites(exercise: Exercise) {\n    this.userFavorites.update(favorites => {\n      const updatedFavorites = {\n        ...favorites,\n        favExercises: [...favorites.favExercises, exercise.id],\n      };\n      this._updateFavorites(this.userId(), updatedFavorites);\n\n      return updatedFavorites;\n    });\n  }\n\n  removeFromFavorites(exercise: Exercise) {\n    const updatedFavExercises = this.userFavorites().favExercises.filter(\n      favExerciseId => favExerciseId !== exercise.id,\n    );\n\n    this.userFavorites.update(favorites => {\n      const updatedFavorites = {\n        ...favorites,\n        favExercises: [...updatedFavExercises],\n      };\n\n      return updatedFavorites;\n    });\n\n    this._updateFavorites(this.userId(), this.userFavorites());\n  }\n\n  // Add/remove favorite exercises\n  _updateFavorites(userId: string, updatedFavorites: Favorites) {\n    const subscription = this.usersService\n      .updateFavorites(userId, updatedFavorites)\n      .subscribe(favorites => console.log(favorites));\n    this.subscriptions.add(subscription);\n  }\n\n  private _resetCardState(cardToReset: Exercise, indexToRemove: number) {\n    if (this.exercises.length === 0) {\n      return;\n    }\n\n    this.exercises.find(exerciseToReset => {\n      if (exerciseToReset.id === cardToReset.id) {\n        exerciseToReset.isSelected = false;\n      }\n    });\n  }\n\n  onDragStarted() {\n    this.isDragging = true;\n  }\n\n  onDragEnded() {\n    this.isDragging = false;\n    // console.log(this.isDragging);\n  }\n}\n","<div\n  overlay-scrollbars\n  [options]=\"themeSignal()\"\n  [defer]\n  class=\"grid-container\"\n>\n  @if (exercises.length === 0 && !isFetchingData()) {\n    <div class=\"noExercisesFound\">\n      <span i18n=\"@@ExercisesGrid.noExercisesFoundMessage\"\n        >No exercises found for your search</span\n      >\n    </div>\n  }\n  @if (isFetchingData()) {\n    <div class=\"fetchingDataSpinner\">\n      <mat-spinner diameter=\"50\"></mat-spinner>\n    </div>\n  }\n  <div\n    cdkDropList\n    [cdkDropListData]=\"exercises\"\n    [ngStyle]=\"getGridStyle(windowSize$ | async)\"\n    class=\"exercise-cards\"\n    cdkDropListSortingDisabled\n    (cdkDropListEntered)=\"entered()\"\n    (cdkDropListExited)=\"exited($event)\"\n    [cdkDropListEnterPredicate]=\"noReturnPredicate\"\n  >\n    @for (exercise of exercises; track exercise.id) {\n      @defer {\n        <sanareapp-exercise-card\n          (removeExercise)=\"removeCard($event)\"\n          (favoriteExercise)=\"addToFavorites($event)\"\n          (removeFavoriteExercise)=\"removeFromFavorites($event)\"\n          [isEmptyPlaceholder]=\"false\"\n          cardWrapper=\"wrap-default\"\n          [exercise]=\"exercise\"\n          cdkDrag\n          cdkDragPreviewContainer=\"parent\"\n          [cdkDragData]=\"exercise\"\n          (cdkDragStarted)=\"onDragStarted()\"\n          (cdkDragEnded)=\"onDragEnded()\"\n        >\n          <div class=\"exercise-card-placeholder\" *cdkDragPlaceholder></div>\n        </sanareapp-exercise-card>\n      } @placeholder {\n        <div class=\"exercise-card-skeleton\"></div>\n      }\n      @if (transferringItem() === exercise) {\n        <div class=\"static-placeholder\">\n          <sanareapp-exercise-card\n            cardWrapper=\"wrap-default\"\n            [exercise]=\"exercise\"\n          >\n            ></sanareapp-exercise-card\n          >\n        </div>\n      }\n    }\n  </div>\n</div>\n"],"names":["i0","_r2","ctx_r2","removeFromFavorites","exercise","_r4","addToFavorites","_r5","removeFromSelected","showHoverIcon","isHovered","_r6","addToSelected","ExerciseCardComponent_Conditional_1_Conditional_9_Template","ExerciseCardComponent_Conditional_1_Conditional_10_Template","_r1","showExerciseModal","id","ExerciseCardComponent_Conditional_1_Conditional_14_Template","ExerciseCardComponent_Conditional_1_Conditional_15_Template","images","mainImg","name","selectedLanguage","isFavorite","isSelected","ExerciseCardComponent","constructor","this","dialog","inject","MatDialog","exercisesService","ExercisesService","shareStateService","ShareStateService","selectedExercisesService","SelectedExercisesService","usersService","UsersService","localstorageService","LocalstorageService","subscriptions","Subscription","isEmptyPlaceholder","selectedExercise","EventEmitter","removeExercise","favoriteExercise","removeFavoriteExercise","userFavorites","userId","ngOnInit","_getUserLanguageToken","selectExercise","emit","removeCard","_getExercise","exerciseId","getExercise","exerciseCard","isProgramExercise","subscription","subscribe","open","ExerciseModalComponent","data","fullExercise","selectedLang","width","panelClass","backdropClass","add","getToken","split","ngOnDestroy","unsubscribe","selectors","inputs","cardWrapper","outputs","standalone","features","decls","vars","consts","i18n_0","$localize","ExerciseCardComponent_Conditional_1_Template","ctx","NgClass","MatIconButton","MatTooltip","MatIcon","MatMiniFabButton","styles","CdkDrag","CdkDragPlaceholder","$event","ctx_r1","onDragStarted","onDragEnded","ExercisesGridComponent_For_6_Defer_0_div_1_Template","exercise_r3","ExercisesGridComponent_For_6_Defer_0_Template","ExercisesGridComponent_For_6_DeferPlaceholder_1_Template","ExercisesGridComponent_For_6_Defer_2_DepsFn","ExercisesGridComponent_For_6_Conditional_4_Template","transferringItem","ExercisesGridComponent","themeManager","ThemeManagerService","transferringItemService","DropListTransferItemService","isFetchingData","selectedExercises","themeSignal","isDragging","windowSize$","fromEvent","window","pipe","startWith","debounceTime","map","innerWidth","getGridStyle","windowSize","effectiveSize","drawerOpen","drawerSignal","entered","set","undefined","exited","e","item","console","log","noReturnPredicate","cardToRemove","indexToRemove","some","i","_resetCardState","update","favorites","updatedFavorites","favExercises","_updateFavorites","updatedFavExercises","filter","favExerciseId","updateFavorites","cardToReset","exercises","length","find","exerciseToReset","ExercisesGridComponent_Conditional_1_Template","ExercisesGridComponent_Conditional_2_Template","ExercisesGridComponent_For_6_Template","_forTrack0","CommonModule","i1","CdkDropList","OverlayscrollbarsModule","i2","MatProgressSpinnerModule","i3"],"sourceRoot":"webpack:///"}