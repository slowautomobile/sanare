{"version":3,"file":"49.fc29d93cbfad0115.js","mappings":"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","names":["_c0","_c1","_c2","_c3","MatDrawerContainer_Conditional_0_Template","rf","ctx","_r1","i0","ctx_r1","_onBackdropClicked","_isShowingBackdrop","MatDrawerContainer_Conditional_3_Template","_c4","_c5","MatSidenavContainer_Conditional_0_Template","MatSidenavContainer_Conditional_3_Template","matDrawerAnimations","transformDrawer","trigger","state","style","transform","visibility","transition","animate","MAT_DRAWER_DEFAULT_AUTOSIZE","InjectionToken","providedIn","factory","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","MAT_DRAWER_CONTAINER","MatDrawerContent","CdkScrollable","constructor","_changeDetectorRef","_container","elementRef","scrollDispatcher","ngZone","super","this","ngAfterContentInit","_contentMarginChanges","subscribe","markForCheck","ɵfac","__ngFactoryType__","forwardRef","MatDrawerContainer","i1","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","_contentMargins","left","right","standalone","features","provide","useExisting","ngContentSelectors","decls","vars","template","encapsulation","changeDetection","MatDrawer","position","_position","value","_isAttached","_updatePositionInParent","onPositionChanged","emit","mode","_mode","_updateFocusTrapState","_modeChanged","next","disableClose","_disableClose","coerceBooleanProperty","autoFocus","_autoFocus","opened","_opened","toggle","_elementRef","_focusTrapFactory","_focusMonitor","_platform","_ngZone","_interactivityChecker","_doc","_focusTrap","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_animationStarted","Subject","_animationEnd","_animationState","openedChange","EventEmitter","_openedStream","pipe","filter","o","map","openedStart","e","fromState","toState","indexOf","mapTo","undefined","_closedStream","closedStart","_destroyed","_injector","inject","Injector","ChangeDetectorRef","takeUntil","activeElement","_takeFocus","_isFocusWithinDrawer","_restoreFocus","_openedVia","runOutsideAngular","fromEvent","nativeElement","event","keyCode","ESCAPE","hasModifierKey","run","close","stopPropagation","preventDefault","distinctUntilChanged","x","y","_forceFocus","element","options","isFocusable","tabIndex","callback","removeEventListener","removeAttribute","addEventListener","focus","_focusByCssSelector","selector","elementToFocus","querySelector","afterNextRender","focusInitialElement","injector","focusOrigin","focusVia","blur","activeEl","contains","ngAfterViewInit","isBrowser","create","ngAfterContentChecked","ngOnDestroy","destroy","_anchor","remove","complete","open","openedVia","_closeViaBackdropClick","_setOpen","isOpen","result","restoreFocus","Promise","resolve","take","_getWidth","offsetWidth","enabled","hasBackdrop","newPosition","parent","parentNode","createComment","insertBefore","appendChild","i2","i3","DOCUMENT","viewQuery","_t","_content","first","$event","inputs","outputs","exportAs","consts","dependencies","data","animation","start","_start","end","_end","autosize","_autosize","_drawerHasBackdrop","_backdropOverride","scrollable","_userContent","_dir","_element","viewportRuler","defaultAutosize","_animationMode","_drawers","QueryList","backdropClick","_doCheckSubject","change","_validateDrawers","updateContentMargins","_allDrawers","changes","startWith","drawer","reset","item","notifyOnChanges","forEach","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","length","_isDrawerOpen","debounceTime","_left","width","_right","ngDoCheck","_isPushed","classList","add","_setContainerClass","phase","AfterRenderPhase","Read","merge","isAdd","className","_closeModalDrawersViaBackdrop","i4","ANIMATION_MODULE_TYPE","contentQueries","dirIndex","styles","MatSidenavContent","changeDetectorRef","container","MatSidenavContainer","MatSidenav","arguments","_fixedInViewport","_fixedTopGap","_fixedBottomGap","fixedInViewport","fixedTopGap","coerceNumberProperty","fixedBottomGap","ɵMatSidenav_BaseFactory","ɵMatSidenavContainer_BaseFactory"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/sidenav.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollable, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, EventEmitter, inject, Injector, ChangeDetectorRef, afterNextRender, Optional, Input, Output, ViewChild, QueryList, AfterRenderPhase, ANIMATION_MODULE_TYPE, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i3 from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nconst matDrawerAnimations = {\n    /** Animation that slides a drawer in and out. */\n    transformDrawer: trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        state('open, open-instant', style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        state('void', style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        transition('void => open-instant', animate('0ms')),\n        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ]),\n};\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n    constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n        super(elementRef, scrollDispatcher, ngZone);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._container = _container;\n    }\n    ngAfterContentInit() {\n        this._container._contentMarginChanges.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDrawerContent, deps: [{ token: i0.ChangeDetectorRef }, { token: forwardRef(() => MatDrawerContainer) }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDrawerContent, isStandalone: true, selector: \"mat-drawer-content\", host: { properties: { \"style.margin-left.px\": \"_container._contentMargins.left\", \"style.margin-right.px\": \"_container._contentMargins.right\" }, classAttribute: \"mat-drawer-content\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useExisting: MatDrawerContent,\n            },\n        ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDrawerContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-drawer-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatDrawerContent,\n                        },\n                    ],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: MatDrawerContainer, decorators: [{\n                    type: Inject,\n                    args: [forwardRef(() => MatDrawerContainer)]\n                }] }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.NgZone }] });\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n    /** The side that the drawer is attached to. */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n        if (value !== this._position) {\n            // Static inputs in Ivy are set before the element is in the DOM.\n            if (this._isAttached) {\n                this._updatePositionInParent(value);\n            }\n            this._position = value;\n            this.onPositionChanged.emit();\n        }\n    }\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    get mode() {\n        return this._mode;\n    }\n    set mode(value) {\n        this._mode = value;\n        this._updateFocusTrapState();\n        this._modeChanged.next();\n    }\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    get disableClose() {\n        return this._disableClose;\n    }\n    set disableClose(value) {\n        this._disableClose = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or AutoFocusTarget\n     * instead.\n     */\n    get autoFocus() {\n        const value = this._autoFocus;\n        // Note that usually we don't allow autoFocus to be set to `first-tabbable` in `side` mode,\n        // because we don't know how the sidenav is being used, but in some cases it still makes\n        // sense to do it. The consumer can explicitly set `autoFocus`.\n        if (value == null) {\n            if (this.mode === 'side') {\n                return 'dialog';\n            }\n            else {\n                return 'first-tabbable';\n            }\n        }\n        return value;\n    }\n    set autoFocus(value) {\n        if (value === 'true' || value === 'false' || value == null) {\n            value = coerceBooleanProperty(value);\n        }\n        this._autoFocus = value;\n    }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    get opened() {\n        return this._opened;\n    }\n    set opened(value) {\n        this.toggle(coerceBooleanProperty(value));\n    }\n    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _interactivityChecker, _doc, _container) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._focusMonitor = _focusMonitor;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._interactivityChecker = _interactivityChecker;\n        this._doc = _doc;\n        this._container = _container;\n        this._focusTrap = null;\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        /** Whether the drawer is initialized. Used for disabling the initial animation. */\n        this._enableAnimations = false;\n        this._position = 'start';\n        this._mode = 'over';\n        this._disableClose = false;\n        this._opened = false;\n        /** Emits whenever the drawer has started animating. */\n        this._animationStarted = new Subject();\n        /** Emits whenever the drawer is done animating. */\n        this._animationEnd = new Subject();\n        /** Current state of the sidenav animation. */\n        this._animationState = 'void';\n        /** Event emitted when the drawer open state is changed. */\n        this.openedChange = \n        // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n        new EventEmitter(/* isAsync */ true);\n        /** Event emitted when the drawer has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the drawer has started opening. */\n        this.openedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));\n        /** Event emitted when the drawer has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the drawer has started closing. */\n        this.closedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Event emitted when the drawer's position changes. */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onPositionChanged = new EventEmitter();\n        /**\n         * An observable that emits when the drawer mode changes. This is used by the drawer container to\n         * to know when to when the mode changes so it can adapt the margins on the content.\n         */\n        this._modeChanged = new Subject();\n        this._injector = inject(Injector);\n        this._changeDetectorRef = inject(ChangeDetectorRef);\n        this.openedChange.pipe(takeUntil(this._destroyed)).subscribe((opened) => {\n            if (opened) {\n                if (this._doc) {\n                    this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n                }\n                this._takeFocus();\n            }\n            else if (this._isFocusWithinDrawer()) {\n                this._restoreFocus(this._openedVia || 'program');\n            }\n        });\n        /**\n         * Listen to `keydown` events outside the zone so that change detection is not run every\n         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n         * and we don't have close disabled.\n         */\n        this._ngZone.runOutsideAngular(() => {\n            fromEvent(this._elementRef.nativeElement, 'keydown')\n                .pipe(filter(event => {\n                return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }), takeUntil(this._destroyed))\n                .subscribe(event => this._ngZone.run(() => {\n                this.close();\n                event.stopPropagation();\n                event.preventDefault();\n            }));\n        });\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._animationEnd\n            .pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))\n            .subscribe((event) => {\n            const { fromState, toState } = event;\n            if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                (toState === 'void' && fromState.indexOf('open') === 0)) {\n                this.openedChange.emit(this._opened);\n            }\n        });\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     */\n    _takeFocus() {\n        if (!this._focusTrap) {\n            return;\n        }\n        const element = this._elementRef.nativeElement;\n        // When autoFocus is not on the sidenav, if the element cannot be focused or does\n        // not exist, focus the sidenav itself so the keyboard navigation still works.\n        // We need to check that `focus` is a function due to Universal.\n        switch (this.autoFocus) {\n            case false:\n            case 'dialog':\n                return;\n            case true:\n            case 'first-tabbable':\n                afterNextRender(() => {\n                    const hasMovedFocus = this._focusTrap.focusInitialElement();\n                    if (!hasMovedFocus && typeof element.focus === 'function') {\n                        element.focus();\n                    }\n                }, { injector: this._injector });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this.autoFocus);\n                break;\n        }\n    }\n    /**\n     * Restores focus to the element that was originally focused when the drawer opened.\n     * If no element was focused at that time, the focus will be restored to the drawer.\n     */\n    _restoreFocus(focusOrigin) {\n        if (this.autoFocus === 'dialog') {\n            return;\n        }\n        if (this._elementFocusedBeforeDrawerWasOpened) {\n            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, focusOrigin);\n        }\n        else {\n            this._elementRef.nativeElement.blur();\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n    }\n    /** Whether focus is currently within the drawer. */\n    _isFocusWithinDrawer() {\n        const activeEl = this._doc.activeElement;\n        return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n    }\n    ngAfterViewInit() {\n        this._isAttached = true;\n        // Only update the DOM position when the sidenav is positioned at\n        // the end since we project the sidenav before the content by default.\n        if (this._position === 'end') {\n            this._updatePositionInParent('end');\n        }\n        // Needs to happen after the position is updated\n        // so the focus trap anchors are in the right place.\n        if (this._platform.isBrowser) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            this._updateFocusTrapState();\n        }\n    }\n    ngAfterContentChecked() {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n            this._enableAnimations = true;\n        }\n    }\n    ngOnDestroy() {\n        this._focusTrap?.destroy();\n        this._anchor?.remove();\n        this._anchor = null;\n        this._animationStarted.complete();\n        this._animationEnd.complete();\n        this._modeChanged.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia) {\n        return this.toggle(true, openedVia);\n    }\n    /** Close the drawer. */\n    close() {\n        return this.toggle(false);\n    }\n    /** Closes the drawer with context that the backdrop was clicked. */\n    _closeViaBackdropClick() {\n        // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n        // don't need to check whether focus is currently in the drawer, as clicking on the\n        // backdrop causes blurs the active element.\n        return this._setOpen(/* isOpen */ false, /* restoreFocus */ true, 'mouse');\n    }\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen = !this.opened, openedVia) {\n        // If the focus is currently inside the drawer content and we are closing the drawer,\n        // restore the focus to the initially focused element (when the drawer opened).\n        if (isOpen && openedVia) {\n            this._openedVia = openedVia;\n        }\n        const result = this._setOpen(isOpen, \n        /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), this._openedVia || 'program');\n        if (!isOpen) {\n            this._openedVia = null;\n        }\n        return result;\n    }\n    /**\n     * Toggles the opened state of the drawer.\n     * @param isOpen Whether the drawer should open or close.\n     * @param restoreFocus Whether focus should be restored on close.\n     * @param focusOrigin Origin to use when restoring focus.\n     */\n    _setOpen(isOpen, restoreFocus, focusOrigin) {\n        this._opened = isOpen;\n        if (isOpen) {\n            this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n        }\n        else {\n            this._animationState = 'void';\n            if (restoreFocus) {\n                this._restoreFocus(focusOrigin);\n            }\n        }\n        // Needed to ensure that the closing sequence fires off correctly.\n        this._changeDetectorRef.markForCheck();\n        this._updateFocusTrapState();\n        return new Promise(resolve => {\n            this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n        });\n    }\n    _getWidth() {\n        return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n    }\n    /** Updates the enabled state of the focus trap. */\n    _updateFocusTrapState() {\n        if (this._focusTrap) {\n            // Trap focus only if the backdrop is enabled. Otherwise, allow end user to interact with the\n            // sidenav content.\n            this._focusTrap.enabled = !!this._container?.hasBackdrop && this.opened;\n        }\n    }\n    /**\n     * Updates the position of the drawer in the DOM. We need to move the element around ourselves\n     * when it's in the `end` position so that it comes after the content and the visual order\n     * matches the tab order. We also need to be able to move it back to `start` if the sidenav\n     * started off as `end` and was changed to `start`.\n     */\n    _updatePositionInParent(newPosition) {\n        // Don't move the DOM node around on the server, because it can throw off hydration.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        const element = this._elementRef.nativeElement;\n        const parent = element.parentNode;\n        if (newPosition === 'end') {\n            if (!this._anchor) {\n                this._anchor = this._doc.createComment('mat-drawer-anchor');\n                parent.insertBefore(this._anchor, element);\n            }\n            parent.appendChild(element);\n        }\n        else if (this._anchor) {\n            this._anchor.parentNode.insertBefore(element, this._anchor);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDrawer, deps: [{ token: i0.ElementRef }, { token: i2.FocusTrapFactory }, { token: i2.FocusMonitor }, { token: i3.Platform }, { token: i0.NgZone }, { token: i2.InteractivityChecker }, { token: DOCUMENT, optional: true }, { token: MAT_DRAWER_CONTAINER, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDrawer, isStandalone: true, selector: \"mat-drawer\", inputs: { position: \"position\", mode: \"mode\", disableClose: \"disableClose\", autoFocus: \"autoFocus\", opened: \"opened\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", openedStart: \"openedStart\", _closedStream: \"closed\", closedStart: \"closedStart\", onPositionChanged: \"positionChanged\" }, host: { attributes: { \"tabIndex\": \"-1\" }, listeners: { \"@transform.start\": \"_animationStarted.next($event)\", \"@transform.done\": \"_animationEnd.next($event)\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-drawer-opened\": \"opened\", \"@transform\": \"_animationState\" }, classAttribute: \"mat-drawer\" }, viewQueries: [{ propertyName: \"_content\", first: true, predicate: [\"content\"], descendants: true }], exportAs: [\"matDrawer\"], ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], animations: [matDrawerAnimations.transformDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDrawer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer', exportAs: 'matDrawer', animations: [matDrawerAnimations.transformDrawer], host: {\n                        'class': 'mat-drawer',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-drawer-opened]': 'opened',\n                        'tabIndex': '-1',\n                        '[@transform]': '_animationState',\n                        '(@transform.start)': '_animationStarted.next($event)',\n                        '(@transform.done)': '_animationEnd.next($event)',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, imports: [CdkScrollable], template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i2.FocusTrapFactory }, { type: i2.FocusMonitor }, { type: i3.Platform }, { type: i0.NgZone }, { type: i2.InteractivityChecker }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MatDrawerContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_DRAWER_CONTAINER]\n                }] }], propDecorators: { position: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], disableClose: [{\n                type: Input\n            }], autoFocus: [{\n                type: Input\n            }], opened: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], openedStart: [{\n                type: Output\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], closedStart: [{\n                type: Output\n            }], onPositionChanged: [{\n                type: Output,\n                args: ['positionChanged']\n            }], _content: [{\n                type: ViewChild,\n                args: ['content']\n            }] } });\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n    /** The drawer child with the `start` position. */\n    get start() {\n        return this._start;\n    }\n    /** The drawer child with the `end` position. */\n    get end() {\n        return this._end;\n    }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    get autosize() {\n        return this._autosize;\n    }\n    set autosize(value) {\n        this._autosize = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    get hasBackdrop() {\n        return this._drawerHasBackdrop(this._start) || this._drawerHasBackdrop(this._end);\n    }\n    set hasBackdrop(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    get scrollable() {\n        return this._userContent || this._content;\n    }\n    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n        this._dir = _dir;\n        this._element = _element;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /** Drawers that belong to this container. */\n        this._drawers = new QueryList();\n        /** Event emitted when the drawer backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Emits on every ngDoCheck. Used for debouncing reflows. */\n        this._doCheckSubject = new Subject();\n        /**\n         * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n         * drawer is open. We use margin rather than transform even for push mode because transform breaks\n         * fixed position elements inside of the transformed element.\n         */\n        this._contentMargins = { left: null, right: null };\n        this._contentMarginChanges = new Subject();\n        this._injector = inject(Injector);\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._validateDrawers();\n                this.updateContentMargins();\n            });\n        }\n        // Since the minimum width of the sidenav depends on the viewport width,\n        // we need to recompute the margins if the viewport changes.\n        viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateContentMargins());\n        this._autosize = defaultAutosize;\n    }\n    ngAfterContentInit() {\n        this._allDrawers.changes\n            .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n            .subscribe((drawer) => {\n            this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n            this._drawers.notifyOnChanges();\n        });\n        this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n            this._validateDrawers();\n            this._drawers.forEach((drawer) => {\n                this._watchDrawerToggle(drawer);\n                this._watchDrawerPosition(drawer);\n                this._watchDrawerMode(drawer);\n            });\n            if (!this._drawers.length ||\n                this._isDrawerOpen(this._start) ||\n                this._isDrawerOpen(this._end)) {\n                this.updateContentMargins();\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n        // Avoid hitting the NgZone through the debounce timeout.\n        this._ngZone.runOutsideAngular(() => {\n            this._doCheckSubject\n                .pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            takeUntil(this._destroyed))\n                .subscribe(() => this.updateContentMargins());\n        });\n    }\n    ngOnDestroy() {\n        this._contentMarginChanges.complete();\n        this._doCheckSubject.complete();\n        this._drawers.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Calls `open` of both start and end drawers */\n    open() {\n        this._drawers.forEach(drawer => drawer.open());\n    }\n    /** Calls `close` of both start and end drawers */\n    close() {\n        this._drawers.forEach(drawer => drawer.close());\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    updateContentMargins() {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        let left = 0;\n        let right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._getWidth();\n            }\n            else if (this._left.mode == 'push') {\n                const width = this._left._getWidth();\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._getWidth();\n            }\n            else if (this._right.mode == 'push') {\n                const width = this._right._getWidth();\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || null;\n        right = right || null;\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left, right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n        }\n    }\n    ngDoCheck() {\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n        }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    _watchDrawerToggle(drawer) {\n        drawer._animationStarted\n            .pipe(filter((event) => event.fromState !== event.toState), takeUntil(this._drawers.changes))\n            .subscribe((event) => {\n            // Set the transition class on the container so that the animations occur. This should not\n            // be set initially because animations should only be triggered via a change in state.\n            if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n                this._element.nativeElement.classList.add('mat-drawer-transition');\n            }\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (drawer.mode !== 'side') {\n            drawer.openedChange\n                .pipe(takeUntil(this._drawers.changes))\n                .subscribe(() => this._setContainerClass(drawer.opened));\n        }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    _watchDrawerPosition(drawer) {\n        if (!drawer) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n            afterNextRender(() => {\n                this._validateDrawers();\n            }, { injector: this._injector, phase: AfterRenderPhase.Read });\n        });\n    }\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    _watchDrawerMode(drawer) {\n        if (drawer) {\n            drawer._modeChanged\n                .pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                .subscribe(() => {\n                this.updateContentMargins();\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    _setContainerClass(isAdd) {\n        const classList = this._element.nativeElement.classList;\n        const className = 'mat-drawer-container-has-open';\n        if (isAdd) {\n            classList.add(className);\n        }\n        else {\n            classList.remove(className);\n        }\n    }\n    /** Validate the state of the drawer children components. */\n    _validateDrawers() {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach(drawer => {\n            if (drawer.position == 'end') {\n                if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                this._end = drawer;\n            }\n            else {\n                if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                this._start = drawer;\n            }\n        });\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    }\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    _isPushed() {\n        return ((this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over'));\n    }\n    _onBackdropClicked() {\n        this.backdropClick.emit();\n        this._closeModalDrawersViaBackdrop();\n    }\n    _closeModalDrawersViaBackdrop() {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(drawer => drawer && !drawer.disableClose && this._drawerHasBackdrop(drawer))\n            .forEach(drawer => drawer._closeViaBackdropClick());\n    }\n    _isShowingBackdrop() {\n        return ((this._isDrawerOpen(this._start) && this._drawerHasBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._drawerHasBackdrop(this._end)));\n    }\n    _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n    }\n    // Whether argument drawer should have a backdrop when it opens\n    _drawerHasBackdrop(drawer) {\n        if (this._backdropOverride == null) {\n            return !!drawer && drawer.mode !== 'side';\n        }\n        return this._backdropOverride;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDrawerContainer, deps: [{ token: i4.Directionality, optional: true }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i1.ViewportRuler }, { token: MAT_DRAWER_DEFAULT_AUTOSIZE }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"18.2.0-next.2\", type: MatDrawerContainer, isStandalone: true, selector: \"mat-drawer-container\", inputs: { autosize: \"autosize\", hasBackdrop: \"hasBackdrop\" }, outputs: { backdropClick: \"backdropClick\" }, host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container\" }, providers: [\n            {\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatDrawerContainer,\n            },\n        ], queries: [{ propertyName: \"_content\", first: true, predicate: MatDrawerContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatDrawer, descendants: true }], viewQueries: [{ propertyName: \"_userContent\", first: true, predicate: MatDrawerContent, descendants: true }], exportAs: [\"matDrawerContainer\"], ngImport: i0, template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-drawer-content>\\n    <ng-content></ng-content>\\n  </mat-drawer-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-app-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-app-background));box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-app-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow);background-color:var(--mat-sidenav-container-background-color, var(--mat-app-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));width:var(--mat-sidenav-container-width);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"], dependencies: [{ kind: \"component\", type: MatDrawerContent, selector: \"mat-drawer-content\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDrawerContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-drawer-container', exportAs: 'matDrawerContainer', host: {\n                        'class': 'mat-drawer-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatDrawerContainer,\n                        },\n                    ], standalone: true, imports: [MatDrawerContent], template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-drawer-content>\\n    <ng-content></ng-content>\\n  </mat-drawer-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-app-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-app-background));box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-app-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow);background-color:var(--mat-sidenav-container-background-color, var(--mat-app-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));width:var(--mat-sidenav-container-width);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"] }]\n        }], ctorParameters: () => [{ type: i4.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatDrawer, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatDrawerContent]\n            }], _userContent: [{\n                type: ViewChild,\n                args: [MatDrawerContent]\n            }], autosize: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], backdropClick: [{\n                type: Output\n            }] } });\n\nclass MatSidenavContent extends MatDrawerContent {\n    constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n        super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenavContent, deps: [{ token: i0.ChangeDetectorRef }, { token: forwardRef(() => MatSidenavContainer) }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatSidenavContent, isStandalone: true, selector: \"mat-sidenav-content\", host: { properties: { \"style.margin-left.px\": \"_container._contentMargins.left\", \"style.margin-right.px\": \"_container._contentMargins.right\" }, classAttribute: \"mat-drawer-content mat-sidenav-content\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useExisting: MatSidenavContent,\n            },\n        ], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenavContent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-sidenav-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content mat-sidenav-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [\n                        {\n                            provide: CdkScrollable,\n                            useExisting: MatSidenavContent,\n                        },\n                    ],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: MatSidenavContainer, decorators: [{\n                    type: Inject,\n                    args: [forwardRef(() => MatSidenavContainer)]\n                }] }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.NgZone }] });\nclass MatSidenav extends MatDrawer {\n    constructor() {\n        super(...arguments);\n        this._fixedInViewport = false;\n        this._fixedTopGap = 0;\n        this._fixedBottomGap = 0;\n    }\n    /** Whether the sidenav is fixed in the viewport. */\n    get fixedInViewport() {\n        return this._fixedInViewport;\n    }\n    set fixedInViewport(value) {\n        this._fixedInViewport = coerceBooleanProperty(value);\n    }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    get fixedTopGap() {\n        return this._fixedTopGap;\n    }\n    set fixedTopGap(value) {\n        this._fixedTopGap = coerceNumberProperty(value);\n    }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    get fixedBottomGap() {\n        return this._fixedBottomGap;\n    }\n    set fixedBottomGap(value) {\n        this._fixedBottomGap = coerceNumberProperty(value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenav, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatSidenav, isStandalone: true, selector: \"mat-sidenav\", inputs: { fixedInViewport: \"fixedInViewport\", fixedTopGap: \"fixedTopGap\", fixedBottomGap: \"fixedBottomGap\" }, host: { attributes: { \"tabIndex\": \"-1\" }, properties: { \"attr.align\": \"null\", \"class.mat-drawer-end\": \"position === \\\"end\\\"\", \"class.mat-drawer-over\": \"mode === \\\"over\\\"\", \"class.mat-drawer-push\": \"mode === \\\"push\\\"\", \"class.mat-drawer-side\": \"mode === \\\"side\\\"\", \"class.mat-drawer-opened\": \"opened\", \"class.mat-sidenav-fixed\": \"fixedInViewport\", \"style.top.px\": \"fixedInViewport ? fixedTopGap : null\", \"style.bottom.px\": \"fixedInViewport ? fixedBottomGap : null\" }, classAttribute: \"mat-drawer mat-sidenav\" }, exportAs: [\"matSidenav\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\", dependencies: [{ kind: \"directive\", type: CdkScrollable, selector: \"[cdk-scrollable], [cdkScrollable]\" }], animations: [matDrawerAnimations.transformDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenav, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav', exportAs: 'matSidenav', animations: [matDrawerAnimations.transformDrawer], host: {\n                        'class': 'mat-drawer mat-sidenav',\n                        'tabIndex': '-1',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-drawer-opened]': 'opened',\n                        '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                        '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                        '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, imports: [CdkScrollable], template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable #content>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\" }]\n        }], propDecorators: { fixedInViewport: [{\n                type: Input\n            }], fixedTopGap: [{\n                type: Input\n            }], fixedBottomGap: [{\n                type: Input\n            }] } });\nclass MatSidenavContainer extends MatDrawerContainer {\n    constructor() {\n        super(...arguments);\n        this._allDrawers = undefined;\n        // We need an initializer here to avoid a TS error.\n        this._content = undefined;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenavContainer, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"18.2.0-next.2\", type: MatSidenavContainer, isStandalone: true, selector: \"mat-sidenav-container\", host: { properties: { \"class.mat-drawer-container-explicit-backdrop\": \"_backdropOverride\" }, classAttribute: \"mat-drawer-container mat-sidenav-container\" }, providers: [\n            {\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatSidenavContainer,\n            },\n        ], queries: [{ propertyName: \"_content\", first: true, predicate: MatSidenavContent, descendants: true }, { propertyName: \"_allDrawers\", predicate: MatSidenav, descendants: true }], exportAs: [\"matSidenavContainer\"], usesInheritance: true, ngImport: i0, template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-sidenav-content>\\n    <ng-content></ng-content>\\n  </mat-sidenav-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-app-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-app-background));box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-app-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow);background-color:var(--mat-sidenav-container-background-color, var(--mat-app-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));width:var(--mat-sidenav-container-width);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"], dependencies: [{ kind: \"component\", type: MatSidenavContent, selector: \"mat-sidenav-content\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenavContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-sidenav-container', exportAs: 'matSidenavContainer', host: {\n                        'class': 'mat-drawer-container mat-sidenav-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [\n                        {\n                            provide: MAT_DRAWER_CONTAINER,\n                            useExisting: MatSidenavContainer,\n                        },\n                    ], standalone: true, imports: [MatSidenavContent], template: \"@if (hasBackdrop) {\\n  <div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\"\\n       [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n}\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n\\n@if (!_content) {\\n  <mat-sidenav-content>\\n    <ng-content></ng-content>\\n  </mat-sidenav-content>\\n}\\n\", styles: [\".mat-drawer-container{position:relative;z-index:1;color:var(--mat-sidenav-content-text-color, var(--mat-app-on-background));background-color:var(--mat-sidenav-content-background-color, var(--mat-app-background));box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible;background-color:var(--mat-sidenav-scrim-color)}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;color:var(--mat-sidenav-container-text-color, var(--mat-app-on-surface-variant));box-shadow:var(--mat-sidenav-container-elevation-shadow);background-color:var(--mat-sidenav-container-background-color, var(--mat-app-surface));border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));width:var(--mat-sidenav-container-width);display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0);border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .mat-drawer{border-top-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-left-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-right-radius:0;border-bottom-right-radius:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{border-top-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-bottom-right-radius:var(--mat-sidenav-container-shape, var(--mat-app-corner-large));border-top-left-radius:0;border-bottom-left-radius:0;left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer[style*=\\\"visibility: hidden\\\"]{display:none}.mat-drawer-side{box-shadow:none;border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid}.mat-drawer-side.mat-drawer-end{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side{border-left-color:var(--mat-sidenav-container-divider-color);border-left-width:1px;border-left-style:solid;border-right:none}[dir=rtl] .mat-drawer-side.mat-drawer-end{border-right-color:var(--mat-sidenav-container-divider-color);border-right-width:1px;border-right-style:solid;border-left:none}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"] }]\n        }], propDecorators: { _allDrawers: [{\n                type: ContentChildren,\n                args: [MatSidenav, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }], _content: [{\n                type: ContentChild,\n                args: [MatSidenavContent]\n            }] } });\n\nclass MatSidenavModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenavModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenavModule, imports: [MatCommonModule,\n            CdkScrollableModule,\n            MatDrawer,\n            MatDrawerContainer,\n            MatDrawerContent,\n            MatSidenav,\n            MatSidenavContainer,\n            MatSidenavContent], exports: [CdkScrollableModule,\n            MatCommonModule,\n            MatDrawer,\n            MatDrawerContainer,\n            MatDrawerContent,\n            MatSidenav,\n            MatSidenavContainer,\n            MatSidenavContent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenavModule, imports: [MatCommonModule,\n            CdkScrollableModule, CdkScrollableModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSidenavModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        CdkScrollableModule,\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatCommonModule,\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError };\n"],"x_google_ignoreList":[0]}