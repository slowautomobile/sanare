{"version":3,"file":"809.80ed54993b71755a.js","mappings":"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","sources":["./apps/sanare-app/src/app/pages/programs/programs-list/programs-list.component.ts","./apps/sanare-app/src/app/pages/programs/programs-list/programs-list.component.html"],"sourcesContent":["import {\n  AfterViewInit,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n  inject,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator, MatPaginatorIntl } from '@angular/material/paginator';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Router } from '@angular/router';\nimport {\n  ClientsService,\n  Program,\n  ProgramsService,\n  ShareClientsDataService,\n} from '@slowautomobile/exercises';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { Favorites, UsersService } from '@slowautomobile/users';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { DeleteConfirmationDialogComponent } from 'libs/ui/src/lib/components/deleteConfirmationDialog/deleteConfirmationDialog.component';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { Subscription, forkJoin } from 'rxjs';\nimport {\n  PageToolbarComponent,\n  PaginatorI18nService,\n  ProgramsTableComponent,\n} from '@slowautomobile/ui';\n\nexport interface ClientInfo {\n  clientId: string;\n  clientName: string;\n  programPosition: number;\n  programId: string;\n  programName: string;\n  dateRange: {\n    start: string;\n    end: string;\n  };\n}\n\n@Component({\n  selector: 'sanareapp-programs-list',\n  templateUrl: './programs-list.component.html',\n  styleUrl: './programs-list.component.scss',\n  standalone: true,\n  imports: [PageToolbarComponent, ProgramsTableComponent],\n  providers: [{ provide: MatPaginatorIntl, useClass: PaginatorI18nService }],\n})\nexport class ProgramsListComponent implements OnInit, OnDestroy {\n  private programsService = inject(ProgramsService);\n  private _snackBar = inject(MatSnackBar);\n  dialog = inject(MatDialog);\n  private router = inject(Router);\n  private clientsService = inject(ClientsService);\n  private shareClientsDataService = inject(ShareClientsDataService);\n  private usersService = inject(UsersService);\n\n  // Page info and inputs for ui-page-toolbar\n  pageTitle = $localize`:@@ProgramsList.pageTitle:Programs`;\n  pageType = 'program';\n\n  // displayedColumns: string[] = ['name', 'numberOfExercises', 'type', 'options'];\n  dataSource = new MatTableDataSource<Program>();\n  programs: Program[] | any[] = [];\n  removedProgram!: any | null;\n  // @ViewChild(MatSort) sort!: MatSort;\n  // @ViewChild(MatPaginator) paginator!: MatPaginator;\n  subscriptions = new Subscription();\n  // listOption: string = 'all';\n  // isClientProgram = this.shareClientsDataService.isClientProgram;\n  reuseProgram = this.shareClientsDataService.reuseProgram;\n  userFavorites = this.usersService.userFavorites;\n  userId = this.usersService.userId;\n  isAdmin = this.usersService.isAdmin;\n  clientInfo = this.shareClientsDataService.clientInfo;\n  isAdminProgram = this.programsService.isAdminProgram;\n\n  constructor() {\n    // Get data and assign the data to the data source for the table to render\n    this.getPrograms('all');\n    // this.changeListedItems();\n  }\n  //  FINISH THIS  COMPONENT !!!!!\n  ngOnInit(): void {\n    // Reset clientInfo() signal data\n    this.clientInfo.set({\n      clientId: '',\n      clientName: '',\n      programPosition: 0,\n      programId: '',\n      programName: '',\n      dateRange: { start: '', end: '' },\n    });\n  }\n\n  // ngAfterViewInit() {\n  //   this.dataSource.paginator = this.paginator;\n  //   this.dataSource.sort = this.sort;\n  // }\n\n  /*   changeListedItems() {\n    console.log(this.listOption);\n    if (this.listOption === 'all') {\n      const subscription = forkJoin([\n        this.programsService.getPrograms(),\n        this.clientsService.getAllClientsPrograms(),\n      ]).subscribe(([programsServiceList, clientsServiceList]) => {\n        this.programs = [];\n\n        const clientsProgramList = clientsServiceList.map(\n          (clientInfo: any) => clientInfo.program,\n        );\n        this.programs = [...programsServiceList, ...clientsProgramList];\n        console.log(this.programs);\n        this.dataSource.data = this.programs;\n      });\n\n      this.subscriptions.add(subscription);\n    } else if (this.listOption === 'template') {\n      const subscription = this.programsService\n        .getPrograms()\n        .subscribe(programsList => {\n          this.programs = [];\n          this.programs = programsList;\n          this.dataSource.data = this.programs;\n\n          this.subscriptions.add(subscription);\n        });\n    } else if (this.listOption === 'client') {\n      const subscription = this.clientsService\n        .getAllClientsPrograms()\n        .subscribe(programsList => {\n          this.programs = [];\n          const clientsProgramList = programsList.map(\n            (clientInfo: any) => clientInfo.program,\n          );\n\n          this.programs = clientsProgramList;\n          this.dataSource.data = this.programs;\n\n          this.subscriptions.add(subscription);\n        });\n    } else if (this.listOption === 'favorite') {\n      // Implement logic for favorite programs. isFavorite field should be added to program model\n      this.programs = [];\n      this.dataSource.data = this.programs;\n    }\n  } */\n  createProgram() {\n    this.router.navigateByUrl('/programs/form');\n  }\n\n  getPrograms(listOption: string) {\n    // const subscription = forkJoin([\n    //   this.programsService.getPrograms(),\n    //   this.clientsService.getAllClientsPrograms(),\n    // ]).subscribe(([programsServiceList, clientsServiceList]) => {\n    //   this.programs = [];\n    //   const clientsProgramList = clientsServiceList.map(\n    //     (clientInfo: any) => clientInfo.program,\n    //   );\n    //   this.programs = [...programsServiceList, ...clientsProgramList];\n    //   this.dataSource.data = this.programs;\n    // });\n\n    // this.subscriptions.add(subscription);\n    if (listOption === 'all') {\n      const subscription = forkJoin([\n        this.programsService.getPrograms(),\n        this.clientsService.getAllClientsPrograms(),\n      ]).subscribe(([programsServiceList, clientsServiceList]) => {\n        this.programs = [];\n\n        const clientsProgramList = clientsServiceList.map(\n          (clientInfo: any) => clientInfo.program,\n        );\n        this.programs = [...programsServiceList, ...clientsProgramList];\n\n        this.programs.forEach(program => {\n          // Check if program is favorite for user\n          if (\n            this.userFavorites().favPrograms.some(\n              favProgram => favProgram === program.id,\n            )\n          ) {\n            program.isFavorite = true;\n          } else {\n            program.isFavorite = false;\n          }\n        });\n\n        this.programs.sort((a, b) => {\n          return a.name.localeCompare(b.name);\n        });\n        this.dataSource.data = this.programs;\n      });\n      this.subscriptions.add(subscription);\n    } else if (listOption === 'template') {\n      const subscription = this.programsService\n        .getPrograms()\n        .subscribe(programsList => {\n          this.programs = [];\n          this.programs = programsList;\n\n          this.programs.forEach(program => {\n            // Check if program is favorite for user\n            if (\n              this.userFavorites().favPrograms.some(\n                favProgram => favProgram === program.id,\n              )\n            ) {\n              program.isFavorite = true;\n            } else {\n              program.isFavorite = false;\n            }\n          });\n\n          this.programs.sort((a, b) => {\n            return a.name.localeCompare(b.name);\n          });\n          this.dataSource.data = this.programs;\n        });\n      this.subscriptions.add(subscription);\n    } else if (listOption === 'client') {\n      const subscription = this.clientsService\n        .getAllClientsPrograms()\n        .subscribe(programsList => {\n          this.programs = [];\n          const clientsProgramList = programsList.map(\n            (clientInfo: any) => clientInfo.program,\n          );\n\n          this.programs = clientsProgramList;\n\n          this.programs.forEach(program => {\n            // Check if program is favorite for user\n            if (\n              this.userFavorites().favPrograms.some(\n                favProgram => favProgram === program.id,\n              )\n            ) {\n              program.isFavorite = true;\n            } else {\n              program.isFavorite = false;\n            }\n          });\n\n          this.programs.sort((a, b) => {\n            return a.name.localeCompare(b.name);\n          });\n          this.dataSource.data = this.programs;\n        });\n      this.subscriptions.add(subscription);\n    } else if (listOption === 'favorite') {\n      this._getFavoritePrograms();\n    }\n  }\n\n  _getFavoritePrograms() {\n    const subscription = forkJoin([\n      this.programsService.getPrograms(),\n      this.clientsService.getAllClientsPrograms(),\n    ]).subscribe(([programsServiceList, clientsServiceList]) => {\n      this.programs = [];\n      let favoritePrograms = [];\n\n      const clientsProgramList = clientsServiceList.map(\n        (clientInfo: any) => clientInfo.program,\n      );\n      this.programs = [...programsServiceList, ...clientsProgramList];\n\n      favoritePrograms = this.programs.filter(program => {\n        // Check if program is favorite for user\n        if (\n          this.userFavorites().favPrograms.some(\n            favProgram => favProgram === program.id,\n          )\n        ) {\n          program.isFavorite = true;\n          return true;\n        } else {\n          program.isFavorite = false;\n          return false;\n        }\n      });\n\n      favoritePrograms.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n      });\n      this.dataSource.data = favoritePrograms;\n    });\n    this.subscriptions.add(subscription);\n  }\n\n  // applyFilter(event: Event) {\n  //   const filterValue = (event.target as HTMLInputElement).value;\n  //   this.dataSource.filter = filterValue.trim().toLowerCase();\n\n  //   if (this.dataSource.paginator) {\n  //     this.dataSource.paginator.firstPage();\n  //   }\n  // }\n\n  // openEditProgramDialog(programId: string) {\n  //   const dialogRef = this.dialog.open(ShowProgramModalComponent, {\n  //     width: '500px',\n  //     data: {\n  //       title: 'Edit program',\n  //       programId: programId,\n  //     },\n  //     // disableClose: true, // Disable closing when clicked outside\n  //     panelClass: 'custom-delete-confirmation-dialog',\n  //   });\n\n  //   dialogRef.afterClosed().subscribe(result => {\n  //     if (result) {\n  //       this.getPrograms();\n  //     } else {\n  //       console.log('Program modal exited');\n  //     }\n  //   });\n  // }\n\n  openEditProgram(programId: string) {\n    // Iterate through all programs and find the one for editing, then check if it's template or client's program\n    const programToEdit = this.programs.find(\n      (program: Program) => program.id === programId,\n    );\n\n    // Update clientInfo() signal for new-program-stepper component template rendering\n    this.clientInfo.update((currentValue: ClientInfo) => ({\n      ...currentValue,\n      programName: programToEdit.name,\n    }));\n\n    // if (programToEdit.isTemplate) {\n    //   this.router.navigateByUrl(`programs/form/${programId}`);\n    // } else {\n    //   this.isClientProgram.set(true);\n    //   this.router.navigateByUrl(`programs/form/${programId}`);\n    // }\n    // Alternative\n    this.router.navigate([`programs/form/${programId}`], {\n      queryParams: {\n        programName: `${programToEdit.name}`,\n        isClientProgram: programToEdit.isTemplate ? 'false' : 'true',\n      },\n    });\n  }\n\n  reuseEditProgram(eventData: any) {\n    // Signal that program should be reused, so that mat-stepper goes to last step automatically\n    this.reuseProgram.set(true);\n\n    // Iterate through all programs and find the one for adding to client, then check if it's template or client's program\n\n    const programToEdit = this.programs.find(\n      (program: Program) => program.id === eventData.programId,\n    );\n\n    // Update clientInfo() signal for new-program-stepper component template rendering\n    this.clientInfo.update((currentValue: ClientInfo) => ({\n      ...currentValue,\n      programName: programToEdit.name,\n    }));\n\n    console.log(this.clientInfo());\n    // console.log(\n    //   'position: ' +\n    //     programToEdit.position +\n    //     'programToEdit position:' +\n    //     programToEdit.position,\n    // );\n\n    // REDUNDANT !!! -> eventData.programId === programToEdit.id !!!!\n    // if (programToEdit.isTemplate) {\n    //   this.router.navigateByUrl(`programs/form/${eventData.programId}`);\n    // } else {\n    //   this.isClientProgram.set(true);\n    //   // console.log(this.programs[programPosition].id);\n    //   this.router.navigateByUrl(`programs/form/${programToEdit.id}`);\n    // }\n    this.router.navigate([`programs/form/${programToEdit.id}`], {\n      queryParams: {\n        programName: `${programToEdit.name}`,\n        isClientProgram: programToEdit.isTemplate ? 'false' : 'true',\n      },\n    });\n  }\n\n  addClient(clientId: string) {\n    console.log('open program and add client automatically');\n  }\n\n  openDeleteConfirmationDialog(eventData: any): void {\n    const dialogRef = this.dialog.open(DeleteConfirmationDialogComponent, {\n      width: '312px',\n      data: {\n        title: $localize`:@@DeleteConfirmationDialog.deleteTitleProgram:Delete selected program?`,\n        message: $localize`:@@DeleteConfirmationDialog.deleteTitleUserProgram:Deleting the selected program will remove it from your account.`,\n      },\n      panelClass: 'custom-dialog',\n    });\n\n    const subscription = dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        // User confirmed deletion, handle deletion logic here\n        console.log('User confirmed deletion');\n        this.deleteProgram(eventData.itemId, eventData.listOption);\n        dialogRef.close();\n      } else {\n        // User canceled deletion\n        console.log('User canceled deletion');\n        dialogRef.close();\n      }\n    });\n    this.subscriptions.add(subscription);\n  }\n\n  deleteProgram(programId: string, listOption: string) {\n    // Iterate through all programs and find the one for deleting, then check if it's template or client's program\n    const programToDelete = this.programs.find(\n      (program: Program) => program.id === programId,\n    );\n\n    let subscription;\n    if (programToDelete.isTemplate) {\n      // this.router.navigateByUrl(`programs/form/${programId}`);\n      subscription = this.programsService\n        .deleteProgram(programId)\n        .subscribe(() => {\n          this.getPrograms(listOption);\n          // this.changeListedItems();\n        });\n    } else {\n      subscription = this.clientsService\n        .deleteClientProgram(programToDelete.clientId, programToDelete.position)\n        .subscribe(() => {\n          this.getPrograms(listOption);\n          // this.changeListedItems();\n        });\n    }\n    this.subscriptions.add(subscription);\n\n    this._snackBar.open(\n      $localize`:@@Snackbar.programDeleted:Program deleted`,\n      '',\n      {\n        duration: 2000,\n        panelClass: ['custom-snackbar-style'],\n      },\n    );\n  }\n\n  /*   undoRemove(): void {\n    console.log(this.removedProgram?.program);\n    if (this.removedProgram) {\n      // Add the removed item back to its original position\n      // this.items.splice(this.removedItem.index, 0, this.removedItem.value);\n\n      const restoredProgramSubscription = this.programsService\n        .createProgram(this.removedProgram.program)\n        .subscribe(\n          // NOT LIKE THIS, PUT CONFIRM DIALOG, AND AFTER WITHOUT UNDO, ONLY SNACKBAR INFO!!!! BECAUSE THERE IS NO NEED FOR UNNECCESSARY HTTP REQUESTS AND NEWLY CREATED CLIENT(ALTOUGH SAME) WILL HAVE DIFERENT ID!!!!!!\n          () => {\n            this.getPrograms();\n          },\n        );\n\n      // Reset the removedItem reference\n      this.removedProgram = null;\n      this.subscriptions.add(restoredProgramSubscription);\n    }\n  } */\n\n  // Add/remove favorite programs\n  _updateFavorites(userId: string, updatedFavorites: Favorites) {\n    const subscription = this.usersService\n      .updateFavorites(userId, updatedFavorites)\n      .subscribe(favorites => console.log(favorites));\n    this.subscriptions.add(subscription);\n  }\n\n  addToFavorites(program: Program) {\n    this.userFavorites.update(favorites => {\n      const programId = program.id as string;\n      const updatedFavorites = {\n        ...favorites,\n        favPrograms: [...favorites.favPrograms, programId],\n      };\n      this._updateFavorites(this.userId(), updatedFavorites);\n\n      return updatedFavorites;\n    });\n  }\n\n  removeFromFavorites(program: Program) {\n    const updatedFavPrograms = this.userFavorites().favPrograms.filter(\n      favProgramId => favProgramId !== program.id,\n    );\n\n    this.userFavorites.update(favorites => {\n      const updatedFavorites = {\n        ...favorites,\n        favPrograms: [...updatedFavPrograms],\n      };\n\n      return updatedFavorites;\n    });\n\n    this._updateFavorites(this.userId(), this.userFavorites());\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","<ui-page-toolbar\n  [pageTitle]=\"pageTitle\"\n  [newButton]=\"true\"\n  [pageType]=\"'program'\"\n  (newEvent)=\"createProgram()\"\n></ui-page-toolbar>\n\n<ui-programs-table\n  [isAdmin]=\"isAdmin()\"\n  [isAdminProgram]=\"isAdminProgram()\"\n  [mainProgramsList]=\"true\"\n  [dataSource]=\"dataSource\"\n  (getProgramsEvent)=\"getPrograms($event)\"\n  (reuseEditProgramEvent)=\"reuseEditProgram($event)\"\n  (openEditProgramEvent)=\"openEditProgram($event)\"\n  (openDeleteConfirmationDialogEvent)=\"openDeleteConfirmationDialog($event)\"\n  (favoriteProgram)=\"addToFavorites($event)\"\n  (removeFavoriteProgram)=\"removeFromFavorites($event)\"\n>\n  <!-- <button\n    deleteBtn\n    mat-icon-button\n    matTooltip=\"Delete\"\n    aria-label=\"Delete icon button\"\n    (click)=\"openDeleteConfirmationDialog($event)\"\n  >\n    <mat-icon>delete_outline</mat-icon>\n  </button> -->\n</ui-programs-table>\n"],"names":["ProgramsListComponent","constructor","this","programsService","inject","ProgramsService","_snackBar","MatSnackBar","dialog","MatDialog","router","Router","clientsService","ClientsService","shareClientsDataService","ShareClientsDataService","usersService","UsersService","pageTitle","$localize","pageType","dataSource","MatTableDataSource","programs","subscriptions","Subscription","reuseProgram","userFavorites","userId","isAdmin","clientInfo","isAdminProgram","getPrograms","ngOnInit","set","clientId","clientName","programPosition","programId","programName","dateRange","start","end","createProgram","navigateByUrl","listOption","subscription","forkJoin","getAllClientsPrograms","subscribe","programsServiceList","clientsServiceList","clientsProgramList","map","program","forEach","isFavorite","favPrograms","some","favProgram","id","sort","a","b","name","localeCompare","data","add","programsList","_getFavoritePrograms","favoritePrograms","filter","openEditProgram","programToEdit","find","update","currentValue","navigate","queryParams","isClientProgram","isTemplate","reuseEditProgram","eventData","console","log","addClient","openDeleteConfirmationDialog","dialogRef","open","DeleteConfirmationDialogComponent","width","title","message","panelClass","afterClosed","result","deleteProgram","itemId","close","programToDelete","deleteClientProgram","position","duration","_updateFavorites","updatedFavorites","updateFavorites","favorites","addToFavorites","removeFromFavorites","updatedFavPrograms","favProgramId","ngOnDestroy","unsubscribe","selectors","standalone","features","i0","provide","MatPaginatorIntl","useClass","PaginatorI18nService","decls","vars","consts","template","rf","ctx","$event","PageToolbarComponent","ProgramsTableComponent"],"sourceRoot":"webpack:///"}