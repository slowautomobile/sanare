{"version":3,"file":"52.ef552c84c523c082.js","mappings":"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","sources":["./apps/sanare-app/src/app/pages/clients/clients-list/clients-list.component.html","./apps/sanare-app/src/app/pages/clients/clients-list/clients-list.component.ts"],"sourcesContent":["<ui-page-toolbar\n  [pageTitle]=\"pageTitle\"\n  [pageType]=\"pageType\"\n  [newButton]=\"true\"\n  (newEvent)=\"createClient()\"\n></ui-page-toolbar>\n\n<div class=\"table-wrapper\">\n  <mat-form-field>\n    <mat-label i18n=\"@@ClientsList.inputFilterLabel\">Filter</mat-label>\n    <input\n      matInput\n      (keyup)=\"applyFilter($event)\"\n      i18n-placeholder=\"@@ClientsList.inputPlaceholder\"\n      placeholder=\"E.g. John Maurice\"\n      #input\n    />\n  </mat-form-field>\n\n  <!-- <div class=\"mat-elevation-z8 clients-table\"> -->\n  <div class=\"clients-table-container\">\n    <div\n      overlay-scrollbars\n      [options]=\"themeSignal()\"\n      [defer]\n      class=\"clients-list-table table-scroll-container\"\n    >\n      <table\n        mat-table\n        class=\"mat-table-background\"\n        [dataSource]=\"dataSource\"\n        matSort\n      >\n        <!-- ID Column -->\n        <!-- <ng-container matColumnDef=\"id\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>ID</th>\n          <td mat-cell *matCellDef=\"let row\">{{ row.id }}</td>\n        </ng-container> -->\n        <!-- Name Column -->\n        <ng-container matColumnDef=\"name\">\n          <th\n            mat-header-cell\n            *matHeaderCellDef\n            mat-sort-header\n            i18n=\"@@ClientsList.tableNameColumn\"\n          >\n            Name\n          </th>\n          <td mat-cell *matCellDef=\"let row\">{{ row.name }}</td>\n        </ng-container>\n        <!-- Mail Column -->\n        <ng-container matColumnDef=\"email\">\n          <th\n            mat-header-cell\n            *matHeaderCellDef\n            mat-sort-header\n            i18n=\"@@ClientsList.tableEmailColumn\"\n          >\n            Email\n          </th>\n          <td mat-cell *matCellDef=\"let row\">{{ row.email }}</td>\n        </ng-container>\n        <!-- Phone Column -->\n        <ng-container matColumnDef=\"phone\">\n          <th\n            mat-header-cell\n            *matHeaderCellDef\n            mat-sort-header\n            i18n=\"@@ClientsList.tablePhoneColumn\"\n          >\n            Phone\n          </th>\n          <td mat-cell *matCellDef=\"let row\">{{ row.phone }}</td>\n        </ng-container>\n        <!-- Status Column -->\n        <!-- <ng-container matColumnDef=\"completed\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Status</th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div class=\"status-chip-wrapper\">\n              @if (row.completed) {\n                <div class=\"status-chip status-completed\">\n                  <span>Completed</span>\n                </div>\n              } @else {\n                <div class=\"status-chip status-inprogress\">\n                  <span>In progress</span>\n                </div>\n              }\n            </div>\n          </td>\n        </ng-container> -->\n        <!-- Options Column -->\n        <ng-container matColumnDef=\"options\">\n          <th mat-header-cell *matHeaderCellDef></th>\n          <td mat-cell *matCellDef=\"let row\">\n            <div class=\"client-options\">\n              <button\n                mat-icon-button\n                matTooltip=\"Edit\"\n                i18n-matTooltip=\"@@ClientsList.tableEditButtonTooltip\"\n                aria-label=\"Edit icon button\"\n                i18n-aria-label=\"@@ClientsList.tableEditButtonAriaLabel\"\n                (click)=\"openEditClientDialog(row.id, row.name)\"\n              >\n                <mat-icon>edit</mat-icon>\n              </button>\n              <button\n                mat-icon-button\n                matTooltip=\"Delete\"\n                i18n-matTooltip=\"@@ClientsList.tableDeleteButtonTooltip\"\n                aria-label=\"Delete icon button\"\n                i18n-aria-label=\"@@ClientsList.tableDeleteButtonAriaLabel\"\n                (click)=\"openDeleteConfirmationDialog(row.id)\"\n              >\n                <mat-icon>delete_outline</mat-icon>\n              </button>\n            </div>\n          </td>\n        </ng-container>\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr\n          mat-row\n          *matRowDef=\"let row; columns: displayedColumns\"\n          class=\"table-rows\"\n        ></tr>\n        <!-- Row shown when there is no matching data. -->\n        <tr class=\"mat-row\" *matNoDataRow>\n          <td\n            class=\"mat-cell\"\n            colspan=\"4\"\n            i18n=\"@@ClientsList.tableNoMatchingData\"\n          >\n            No data matching the filter \"{{ input.value }}\"\n          </td>\n        </tr>\n      </table>\n    </div>\n    <mat-paginator\n      pageSize=\"10\"\n      class=\"mat-paginator-background\"\n      [pageSizeOptions]=\"[5, 10, 25, 100]\"\n      i18n-aria-label=\"@@ClientsList.selectPageOfClientsAriaLabel\"\n      aria-label=\"Select page of clients\"\n    ></mat-paginator>\n  </div>\n</div>\n","/// <reference types=\"@angular/localize\" />\n\nimport {\n  AfterViewInit,\n  Component,\n  inject,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n  MatPaginator,\n  MatPaginatorIntl,\n  MatPaginatorModule,\n} from '@angular/material/paginator';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatSort, MatSortHeader } from '@angular/material/sort';\nimport {\n  MatTableDataSource,\n  MatTable,\n  MatColumnDef,\n  MatHeaderCellDef,\n  MatHeaderCell,\n  MatCellDef,\n  MatCell,\n  MatHeaderRowDef,\n  MatHeaderRow,\n  MatRowDef,\n  MatRow,\n  MatNoDataRow,\n} from '@angular/material/table';\nimport {\n  Client,\n  ClientsService,\n  ShareClientsDataService,\n} from '@slowautomobile/exercises';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { DeleteConfirmationDialogComponent } from 'libs/ui/src/lib/components/deleteConfirmationDialog/deleteConfirmationDialog.component';\n// eslint-disable-next-line @nx/enforce-module-boundaries\nimport { ShowClientModalComponent } from 'libs/clients/src/lib/components/show-client-modal/show-client-modal.component';\nimport { Subscription } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { PaginatorI18nService, ThemeManagerService } from '@slowautomobile/ui';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatTooltip } from '@angular/material/tooltip';\nimport { MatIconButton } from '@angular/material/button';\nimport { OverlayscrollbarsModule } from 'overlayscrollbars-ngx';\nimport { MatInput } from '@angular/material/input';\nimport { MatFormField, MatLabel } from '@angular/material/form-field';\nimport { PageToolbarComponent } from '@slowautomobile/ui';\n\n@Component({\n  selector: 'sanareapp-clients-list',\n  templateUrl: './clients-list.component.html',\n  styleUrl: './clients-list.component.scss',\n  standalone: true,\n  imports: [\n    PageToolbarComponent,\n    MatFormField,\n    MatLabel,\n    MatInput,\n    OverlayscrollbarsModule,\n    MatTable,\n    MatSort,\n    MatColumnDef,\n    MatHeaderCellDef,\n    MatHeaderCell,\n    MatSortHeader,\n    MatCellDef,\n    MatCell,\n    MatIconButton,\n    MatTooltip,\n    MatIcon,\n    MatHeaderRowDef,\n    MatHeaderRow,\n    MatRowDef,\n    MatRow,\n    MatNoDataRow,\n    MatPaginatorModule,\n  ],\n  providers: [{ provide: MatPaginatorIntl, useClass: PaginatorI18nService }],\n})\nexport class ClientsListComponent implements OnInit, AfterViewInit, OnDestroy {\n  // Page info and inputs for ui-page-toolbar\n  pageTitle = $localize`:@@ClientsList.pageTitle:Clients`;\n  // pageType = $localize`:@@ClientsList.pageType:client`;\n  pageType = 'client';\n\n  private clientsService = inject(ClientsService);\n  private _snackBar = inject(MatSnackBar);\n  dialog = inject(MatDialog);\n  private router = inject(Router);\n\n  displayedColumns: string[] = [\n    'name',\n    'email',\n    'phone',\n    // 'completed',\n    'options',\n  ];\n  dataSource = new MatTableDataSource<Client>();\n  clients: Client[] = [];\n  removedClient!: any | null;\n  @ViewChild(MatSort) sort!: MatSort;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  subscriptions = new Subscription();\n  private shareClientsDataService = inject(ShareClientsDataService);\n  clientInfo = this.shareClientsDataService.clientInfo;\n\n  themeManager = inject(ThemeManagerService);\n  themeSignal = this.themeManager.themeSignal;\n\n  constructor() {\n    // Get data and assign the data to the data source for the table to render\n    this.getClients();\n  }\n\n  ngOnInit(): void {\n    // Reset clientInfo() signal data\n    this.clientInfo.set({\n      clientId: '',\n      clientName: '',\n      programPosition: 0,\n      programId: '',\n      programName: '',\n      dateRange: { start: '', end: '' },\n    });\n\n    this.clientsService.getClients().subscribe(res => console.log(res));\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  createClient() {\n    this.router.navigateByUrl('/clients/form');\n  }\n\n  private getClients() {\n    const subscription = this.clientsService\n      .getClientsBasic()\n      .subscribe(clientsList => {\n        // this.clients = [];\n        // clientsList.forEach(client => {\n        //   client.fullName = client.lastName + ' ' + client.firstName;\n        //   this.clients.push(client);\n        this.clients = clientsList;\n        // });\n        this.dataSource.data = this.clients;\n        console.log(this.dataSource.data);\n      });\n\n    this.subscriptions.add(subscription);\n  }\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  openEditClientDialog(clientId: string, clientName: string) {\n    const dialogRef = this.dialog.open(ShowClientModalComponent, {\n      width: '500px',\n      // height: '736px',\n      data: {\n        title: $localize`:@@ClientModal.editClientModalTitle:Edit client`,\n        clientId: clientId,\n        clientName: clientName,\n      },\n      // disableClose: true, // Disable closing when clicked outside\n      panelClass: ['custom-dialog', 'custom-client-dialog-content-wrapper'],\n    });\n\n    const subscription = dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.getClients();\n      } else {\n        console.log('Client modal exited');\n      }\n    });\n    this.subscriptions.add(subscription);\n  }\n\n  openDeleteConfirmationDialog(itemId: string): void {\n    const dialogRef = this.dialog.open(DeleteConfirmationDialogComponent, {\n      width: '312px',\n      data: {\n        title: $localize`:@@DeleteConfirmationDialog.deleteTitleClient:Delete selected client?`,\n        message: $localize`:@@DeleteConfirmationDialog.deleteMessageClient:Deleting the selected client will remove it from your account.`,\n      },\n      panelClass: 'custom-dialog',\n    });\n\n    const subscription = dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        // User confirmed deletion, handle deletion logic here\n        console.log('User confirmed deletion');\n        this.deleteClient(itemId);\n        dialogRef.close();\n      } else {\n        // User canceled deletion\n        console.log('User canceled deletion');\n        dialogRef.close();\n      }\n    });\n    this.subscriptions.add(subscription);\n  }\n\n  deleteClient(clientId: string) {\n    const subscription = this.clientsService.deleteClient(clientId).subscribe({\n      next: () => {\n        this.getClients();\n        this._snackBar.open(\n          $localize`:@@Snackbar.clientDeleted:Client deleted`,\n          '',\n          {\n            duration: 2000,\n            panelClass: ['custom-snackbar-style'],\n          },\n        );\n      },\n      error: e => console.error(e),\n      complete: () => console.info('Client deletion completed'),\n    });\n\n    this.subscriptions.add(subscription);\n  }\n\n  /*   undoRemove(): void {\n    console.log(this.removedClient?.client);\n    if (this.removedClient) {\n      // Add the removed item back to its original position\n      // this.items.splice(this.removedItem.index, 0, this.removedItem.value);\n\n      const restoredClientSubscription = this.clientsService\n        .createClient(this.removedClient.client)\n        .subscribe(\n          // NOT LIKE THIS, PUT CONFIRM DIALOG, AND AFTER WITHOUT UNDO, ONLY SNACKBAR INFO!!!! BECAUSE THERE IS NO NEED FOR UNNECCESSARY HTTP REQUESTS AND NEWLY CREATED CLIENT(ALTOUGH SAME) WILL HAVE DIFERENT ID!!!!!!\n          () => {\n            this.getClients();\n          },\n        );\n\n      // Reset the removedItem reference\n      this.removedClient = null;\n      this.subscriptions.add(restoredClientSubscription);\n    }\n  } */\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n"],"names":["i0","row_r2","name","row_r3","email","row_r4","phone","row_r6","_r5","$implicit","ctx_r6","openEditClientDialog","id","openDeleteConfirmationDialog","input_r8","value","ClientsListComponent","constructor","this","pageTitle","$localize","pageType","clientsService","inject","ClientsService","_snackBar","MatSnackBar","dialog","MatDialog","router","Router","displayedColumns","dataSource","MatTableDataSource","clients","subscriptions","Subscription","shareClientsDataService","ShareClientsDataService","clientInfo","themeManager","ThemeManagerService","themeSignal","getClients","ngOnInit","set","clientId","clientName","programPosition","programId","programName","dateRange","start","end","subscribe","res","console","log","ngAfterViewInit","paginator","sort","createClient","navigateByUrl","subscription","getClientsBasic","clientsList","data","add","applyFilter","event","filter","target","trim","toLowerCase","firstPage","open","ShowClientModalComponent","width","title","panelClass","afterClosed","result","itemId","dialogRef","DeleteConfirmationDialogComponent","message","deleteClient","close","next","duration","error","e","complete","info","ngOnDestroy","unsubscribe","selectors","viewQuery","rf","ctx","MatSort","MatPaginator","provide","MatPaginatorIntl","useClass","PaginatorI18nService","decls","vars","consts","i18n_0","_r1","$event","ClientsListComponent_th_11_Template","ClientsListComponent_td_12_Template","ClientsListComponent_th_14_Template","ClientsListComponent_td_15_Template","ClientsListComponent_th_17_Template","ClientsListComponent_td_18_Template","ClientsListComponent_th_20_Template","ClientsListComponent_td_21_Template","ClientsListComponent_tr_22_Template","ClientsListComponent_tr_23_Template","ClientsListComponent_tr_24_Template","_c0","PageToolbarComponent","MatFormField","MatLabel","MatInput","OverlayscrollbarsModule","i1","MatTable","MatColumnDef","MatHeaderCellDef","MatHeaderCell","MatSortHeader","MatCellDef","MatCell","MatIconButton","MatTooltip","MatIcon","MatHeaderRowDef","MatHeaderRow","MatRowDef","MatRow","MatNoDataRow","MatPaginatorModule","i2","styles"],"sourceRoot":"webpack:///"}